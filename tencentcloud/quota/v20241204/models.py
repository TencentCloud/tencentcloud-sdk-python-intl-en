# -*- coding: utf8 -*-
# Copyright (c) 2017-2025 Tencent. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings

from tencentcloud.common.abstract_model import AbstractModel


class CreateAlarmRequest(AbstractModel):
    r"""CreateAlarm request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Alarm rule name. specifies the name of the Alarm rule.
        :type Name: str
        :param _ProductId: Product ID.
        :type ProductId: int
        :param _QuotaId: Quota ID.
        :type QuotaId: int
        :param _Metrics: Alert metrics 1: quota usage 2: quota usage rate 3: remaining quota 4: remaining quota rate.
        :type Metrics: int
        :param _Threshold: Specifies the Alarm threshold. value range: 0-100.
        :type Threshold: int
        :param _Frequency: Alarm frequency.
        :type Frequency: int
        :param _MemberUin:   Member UIN
        :type MemberUin: int
        """
        self._Name = None
        self._ProductId = None
        self._QuotaId = None
        self._Metrics = None
        self._Threshold = None
        self._Frequency = None
        self._MemberUin = None

    @property
    def Name(self):
        r"""Alarm rule name. specifies the name of the Alarm rule.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ProductId(self):
        r"""Product ID.
        :rtype: int
        """
        return self._ProductId

    @ProductId.setter
    def ProductId(self, ProductId):
        self._ProductId = ProductId

    @property
    def QuotaId(self):
        r"""Quota ID.
        :rtype: int
        """
        return self._QuotaId

    @QuotaId.setter
    def QuotaId(self, QuotaId):
        self._QuotaId = QuotaId

    @property
    def Metrics(self):
        r"""Alert metrics 1: quota usage 2: quota usage rate 3: remaining quota 4: remaining quota rate.
        :rtype: int
        """
        return self._Metrics

    @Metrics.setter
    def Metrics(self, Metrics):
        self._Metrics = Metrics

    @property
    def Threshold(self):
        r"""Specifies the Alarm threshold. value range: 0-100.
        :rtype: int
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold

    @property
    def Frequency(self):
        r"""Alarm frequency.
        :rtype: int
        """
        return self._Frequency

    @Frequency.setter
    def Frequency(self, Frequency):
        self._Frequency = Frequency

    @property
    def MemberUin(self):
        r"""  Member UIN
        :rtype: int
        """
        return self._MemberUin

    @MemberUin.setter
    def MemberUin(self, MemberUin):
        self._MemberUin = MemberUin


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ProductId = params.get("ProductId")
        self._QuotaId = params.get("QuotaId")
        self._Metrics = params.get("Metrics")
        self._Threshold = params.get("Threshold")
        self._Frequency = params.get("Frequency")
        self._MemberUin = params.get("MemberUin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAlarmResponse(AbstractModel):
    r"""CreateAlarm response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")