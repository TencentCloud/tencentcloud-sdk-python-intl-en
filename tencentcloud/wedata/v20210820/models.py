# -*- coding: utf8 -*-
# Copyright (c) 2017-2021 THL A29 Limited, a Tencent company. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings

from tencentcloud.common.abstract_model import AbstractModel


class AdhocDetail(AbstractModel):
    """Subtask records

    """

    def __init__(self):
        r"""
        :param _Id: Subtask record Id
        :type Id: int
        :param _ScriptContent: Script Content
        :type ScriptContent: str
        :param _StartTime: Task start time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: Task termination time
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _Status: Current Task Status
        :type Status: str
        :param _RecordId: Submit Task ID
        :type RecordId: int
        """
        self._Id = None
        self._ScriptContent = None
        self._StartTime = None
        self._EndTime = None
        self._Status = None
        self._RecordId = None

    @property
    def Id(self):
        """Subtask record Id
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ScriptContent(self):
        """Script Content
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def StartTime(self):
        """Task start time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Task termination time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Status(self):
        """Current Task Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RecordId(self):
        """Submit Task ID
        :rtype: int
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ScriptContent = params.get("ScriptContent")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Status = params.get("Status")
        self._RecordId = params.get("RecordId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AdhocRecord(AbstractModel):
    """Task Submission Record

    """

    def __init__(self):
        r"""
        :param _Id: Task Submission Record ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: int
        :param _ScriptContent: Script ContentNote: This field may return null, indicating that no valid value can be obtained.
        :type ScriptContent: str
        :param _CreateTime: Task Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _Status: Task StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _InstanceId: Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        """
        self._Id = None
        self._ScriptContent = None
        self._CreateTime = None
        self._Status = None
        self._InstanceId = None

    @property
    def Id(self):
        """Task Submission Record ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ScriptContent(self):
        """Script ContentNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def CreateTime(self):
        """Task Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Status(self):
        """Task StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def InstanceId(self):
        """Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ScriptContent = params.get("ScriptContent")
        self._CreateTime = params.get("CreateTime")
        self._Status = params.get("Status")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AgentStatus(AbstractModel):
    """Agent Collector Status Statistics

    """

    def __init__(self):
        r"""
        :param _Running: Running Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type Running: int
        :param _Abnormal: Number of Anomalies
Note: This field may return null, indicating that no valid value can be obtained.
        :type Abnormal: int
        :param _InOperation: Operating Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type InOperation: int
        """
        self._Running = None
        self._Abnormal = None
        self._InOperation = None

    @property
    def Running(self):
        """Running Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Running

    @Running.setter
    def Running(self, Running):
        self._Running = Running

    @property
    def Abnormal(self):
        """Number of Anomalies
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Abnormal

    @Abnormal.setter
    def Abnormal(self, Abnormal):
        self._Abnormal = Abnormal

    @property
    def InOperation(self):
        """Operating Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InOperation

    @InOperation.setter
    def InOperation(self, InOperation):
        self._InOperation = InOperation


    def _deserialize(self, params):
        self._Running = params.get("Running")
        self._Abnormal = params.get("Abnormal")
        self._InOperation = params.get("InOperation")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlarmEventInfo(AbstractModel):
    """Alarm Event Details

    """

    def __init__(self):
        r"""
        :param _AlarmId: Alert ID
        :type AlarmId: str
        :param _AlarmTime: Alarm Time
        :type AlarmTime: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _RegularName: Rule name
        :type RegularName: str
        :param _AlarmLevel: Alert level, 0 for normal, 1 for important, 2 for urgent
        :type AlarmLevel: int
        :param _AlarmWay: Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
        :type AlarmWay: int
        :param _AlarmRecipientId: Alert Recipient ID, separated by commas
        :type AlarmRecipientId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _AlarmIndicator: Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause
        :type AlarmIndicator: int
        :param _AlarmIndicatorDesc: Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicatorDesc: str
        :param _TriggerType: Metric threshold, 1 indicates the first run failure of the offline task, 2 indicates failure after all retries of the offline task
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerType: int
        :param _EstimatedTime: Estimated timeout, minute level
Note: This field may return null, indicating that no valid value can be obtained.
        :type EstimatedTime: int
        :param _InstanceId: Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _IsSendSuccess: 0: Partial Success, 1: Complete Success, 2: Complete Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsSendSuccess: int
        :param _InQuitePeriods: During Do Not Disturb time, 0: No, 1: Yes
Note: This field may return null, indicating that no valid value can be obtained.
        :type InQuitePeriods: int
        :param _RecordId: Alert Record ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RecordId: int
        :param _MessageId: Message ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type MessageId: str
        :param _Operator: Threshold Calculation Operator, 1: Greater than, 2: Less than
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: int
        :param _RegularId: Alert Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RegularId: str
        :param _AlarmRecipientName: Alert Recipient Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmRecipientName: str
        :param _TaskType: Alert Task Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskType: int
        :param _SendResult: Send Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type SendResult: str
        :param _MonitorObjectId: Monitoring Object ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorObjectId: str
        :param _MonitorObjectName: Monitoring Object Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorObjectName: str
        :param _Threshold: Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
        :type Threshold: float
        """
        self._AlarmId = None
        self._AlarmTime = None
        self._TaskId = None
        self._RegularName = None
        self._AlarmLevel = None
        self._AlarmWay = None
        self._AlarmRecipientId = None
        self._ProjectId = None
        self._AlarmIndicator = None
        self._AlarmIndicatorDesc = None
        self._TriggerType = None
        self._EstimatedTime = None
        self._InstanceId = None
        self._TaskName = None
        self._IsSendSuccess = None
        self._InQuitePeriods = None
        self._RecordId = None
        self._MessageId = None
        self._Operator = None
        self._RegularId = None
        self._AlarmRecipientName = None
        self._TaskType = None
        self._SendResult = None
        self._MonitorObjectId = None
        self._MonitorObjectName = None
        self._Threshold = None

    @property
    def AlarmId(self):
        """Alert ID
        :rtype: str
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def AlarmTime(self):
        """Alarm Time
        :rtype: str
        """
        return self._AlarmTime

    @AlarmTime.setter
    def AlarmTime(self, AlarmTime):
        self._AlarmTime = AlarmTime

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RegularName(self):
        """Rule name
        :rtype: str
        """
        return self._RegularName

    @RegularName.setter
    def RegularName(self, RegularName):
        self._RegularName = RegularName

    @property
    def AlarmLevel(self):
        """Alert level, 0 for normal, 1 for important, 2 for urgent
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel

    @property
    def AlarmWay(self):
        """Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
        :rtype: int
        """
        return self._AlarmWay

    @AlarmWay.setter
    def AlarmWay(self, AlarmWay):
        self._AlarmWay = AlarmWay

    @property
    def AlarmRecipientId(self):
        """Alert Recipient ID, separated by commas
        :rtype: str
        """
        return self._AlarmRecipientId

    @AlarmRecipientId.setter
    def AlarmRecipientId(self, AlarmRecipientId):
        self._AlarmRecipientId = AlarmRecipientId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def AlarmIndicator(self):
        """Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause
        :rtype: int
        """
        return self._AlarmIndicator

    @AlarmIndicator.setter
    def AlarmIndicator(self, AlarmIndicator):
        self._AlarmIndicator = AlarmIndicator

    @property
    def AlarmIndicatorDesc(self):
        """Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmIndicatorDesc

    @AlarmIndicatorDesc.setter
    def AlarmIndicatorDesc(self, AlarmIndicatorDesc):
        self._AlarmIndicatorDesc = AlarmIndicatorDesc

    @property
    def TriggerType(self):
        """Metric threshold, 1 indicates the first run failure of the offline task, 2 indicates failure after all retries of the offline task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def EstimatedTime(self):
        """Estimated timeout, minute level
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._EstimatedTime

    @EstimatedTime.setter
    def EstimatedTime(self, EstimatedTime):
        self._EstimatedTime = EstimatedTime

    @property
    def InstanceId(self):
        """Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def IsSendSuccess(self):
        """0: Partial Success, 1: Complete Success, 2: Complete Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IsSendSuccess

    @IsSendSuccess.setter
    def IsSendSuccess(self, IsSendSuccess):
        self._IsSendSuccess = IsSendSuccess

    @property
    def InQuitePeriods(self):
        """During Do Not Disturb time, 0: No, 1: Yes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InQuitePeriods

    @InQuitePeriods.setter
    def InQuitePeriods(self, InQuitePeriods):
        self._InQuitePeriods = InQuitePeriods

    @property
    def RecordId(self):
        """Alert Record ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def MessageId(self):
        """Message ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MessageId

    @MessageId.setter
    def MessageId(self, MessageId):
        self._MessageId = MessageId

    @property
    def Operator(self):
        """Threshold Calculation Operator, 1: Greater than, 2: Less than
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def RegularId(self):
        """Alert Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RegularId

    @RegularId.setter
    def RegularId(self, RegularId):
        self._RegularId = RegularId

    @property
    def AlarmRecipientName(self):
        """Alert Recipient Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmRecipientName

    @AlarmRecipientName.setter
    def AlarmRecipientName(self, AlarmRecipientName):
        self._AlarmRecipientName = AlarmRecipientName

    @property
    def TaskType(self):
        """Alert Task Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def SendResult(self):
        """Send Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SendResult

    @SendResult.setter
    def SendResult(self, SendResult):
        self._SendResult = SendResult

    @property
    def MonitorObjectId(self):
        """Monitoring Object ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MonitorObjectId

    @MonitorObjectId.setter
    def MonitorObjectId(self, MonitorObjectId):
        self._MonitorObjectId = MonitorObjectId

    @property
    def MonitorObjectName(self):
        """Monitoring Object Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MonitorObjectName

    @MonitorObjectName.setter
    def MonitorObjectName(self, MonitorObjectName):
        self._MonitorObjectName = MonitorObjectName

    @property
    def Threshold(self):
        """Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold


    def _deserialize(self, params):
        self._AlarmId = params.get("AlarmId")
        self._AlarmTime = params.get("AlarmTime")
        self._TaskId = params.get("TaskId")
        self._RegularName = params.get("RegularName")
        self._AlarmLevel = params.get("AlarmLevel")
        self._AlarmWay = params.get("AlarmWay")
        self._AlarmRecipientId = params.get("AlarmRecipientId")
        self._ProjectId = params.get("ProjectId")
        self._AlarmIndicator = params.get("AlarmIndicator")
        self._AlarmIndicatorDesc = params.get("AlarmIndicatorDesc")
        self._TriggerType = params.get("TriggerType")
        self._EstimatedTime = params.get("EstimatedTime")
        self._InstanceId = params.get("InstanceId")
        self._TaskName = params.get("TaskName")
        self._IsSendSuccess = params.get("IsSendSuccess")
        self._InQuitePeriods = params.get("InQuitePeriods")
        self._RecordId = params.get("RecordId")
        self._MessageId = params.get("MessageId")
        self._Operator = params.get("Operator")
        self._RegularId = params.get("RegularId")
        self._AlarmRecipientName = params.get("AlarmRecipientName")
        self._TaskType = params.get("TaskType")
        self._SendResult = params.get("SendResult")
        self._MonitorObjectId = params.get("MonitorObjectId")
        self._MonitorObjectName = params.get("MonitorObjectName")
        self._Threshold = params.get("Threshold")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlarmIndicatorInfo(AbstractModel):
    """Alert Metrics

    """

    def __init__(self):
        r"""
        :param _Id: Metric ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _AlarmIndicator: Alert Metrics, 0 for task failure, 1 for task execution timeout, 2 for task stop, 3 for task pause, 4 read speed, 5 write speed, 6 read throughput, 7 write throughput, 8 dirty data byte count, 9 number of dirty data entries, 10 task exception, 11 task detection anomaly, 12 restart times, 13 task delay, 14 number of restarts within the last 20 minutes, 15 transmission delay, 16 business delay, 50 offline package CPU usage rate, 51 offline package memory usage rate, 52 offline package parallelism utilization, 53 number of instances queued for offline packages, 54 real-time package resource utilization, 55 number of tasks running in real-time packages
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicator: int
        :param _AlarmIndicatorDesc: Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicatorDesc: str
        :param _TriggerType: Metric Threshold, 1 for the first run failure of an offline task, 2 for all retries failed of an offline task
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerType: int
        :param _EstimatedTime: Estimated timeout duration, minute level
Note: This field may return null, indicating that no valid value can be obtained.
        :type EstimatedTime: int
        :param _Operator: Alert threshold operator, 1 Greater than, 2 Less than
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: int
        :param _AlarmIndicatorUnit: Alert metric threshold unit: ms (milliseconds), s (seconds), min (minutes)
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicatorUnit: str
        :param _Duration: Alert Interval
        :type Duration: int
        :param _DurationUnit: Alert interval unit: hour, minute, day
        :type DurationUnit: str
        :param _MaxTimes: Maximum number of alerts within a cycle
        :type MaxTimes: int
        :param _Threshold: Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
        :type Threshold: float
        """
        self._Id = None
        self._AlarmIndicator = None
        self._AlarmIndicatorDesc = None
        self._TriggerType = None
        self._EstimatedTime = None
        self._Operator = None
        self._AlarmIndicatorUnit = None
        self._Duration = None
        self._DurationUnit = None
        self._MaxTimes = None
        self._Threshold = None

    @property
    def Id(self):
        """Metric ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def AlarmIndicator(self):
        """Alert Metrics, 0 for task failure, 1 for task execution timeout, 2 for task stop, 3 for task pause, 4 read speed, 5 write speed, 6 read throughput, 7 write throughput, 8 dirty data byte count, 9 number of dirty data entries, 10 task exception, 11 task detection anomaly, 12 restart times, 13 task delay, 14 number of restarts within the last 20 minutes, 15 transmission delay, 16 business delay, 50 offline package CPU usage rate, 51 offline package memory usage rate, 52 offline package parallelism utilization, 53 number of instances queued for offline packages, 54 real-time package resource utilization, 55 number of tasks running in real-time packages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AlarmIndicator

    @AlarmIndicator.setter
    def AlarmIndicator(self, AlarmIndicator):
        self._AlarmIndicator = AlarmIndicator

    @property
    def AlarmIndicatorDesc(self):
        """Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmIndicatorDesc

    @AlarmIndicatorDesc.setter
    def AlarmIndicatorDesc(self, AlarmIndicatorDesc):
        self._AlarmIndicatorDesc = AlarmIndicatorDesc

    @property
    def TriggerType(self):
        """Metric Threshold, 1 for the first run failure of an offline task, 2 for all retries failed of an offline task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def EstimatedTime(self):
        """Estimated timeout duration, minute level
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._EstimatedTime

    @EstimatedTime.setter
    def EstimatedTime(self, EstimatedTime):
        self._EstimatedTime = EstimatedTime

    @property
    def Operator(self):
        """Alert threshold operator, 1 Greater than, 2 Less than
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def AlarmIndicatorUnit(self):
        """Alert metric threshold unit: ms (milliseconds), s (seconds), min (minutes)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmIndicatorUnit

    @AlarmIndicatorUnit.setter
    def AlarmIndicatorUnit(self, AlarmIndicatorUnit):
        self._AlarmIndicatorUnit = AlarmIndicatorUnit

    @property
    def Duration(self):
        """Alert Interval
        :rtype: int
        """
        return self._Duration

    @Duration.setter
    def Duration(self, Duration):
        self._Duration = Duration

    @property
    def DurationUnit(self):
        """Alert interval unit: hour, minute, day
        :rtype: str
        """
        return self._DurationUnit

    @DurationUnit.setter
    def DurationUnit(self, DurationUnit):
        self._DurationUnit = DurationUnit

    @property
    def MaxTimes(self):
        """Maximum number of alerts within a cycle
        :rtype: int
        """
        return self._MaxTimes

    @MaxTimes.setter
    def MaxTimes(self, MaxTimes):
        self._MaxTimes = MaxTimes

    @property
    def Threshold(self):
        """Metric Threshold
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._AlarmIndicator = params.get("AlarmIndicator")
        self._AlarmIndicatorDesc = params.get("AlarmIndicatorDesc")
        self._TriggerType = params.get("TriggerType")
        self._EstimatedTime = params.get("EstimatedTime")
        self._Operator = params.get("Operator")
        self._AlarmIndicatorUnit = params.get("AlarmIndicatorUnit")
        self._Duration = params.get("Duration")
        self._DurationUnit = params.get("DurationUnit")
        self._MaxTimes = params.get("MaxTimes")
        self._Threshold = params.get("Threshold")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlarmInfo(AbstractModel):
    """Task Alert Information

    """

    def __init__(self):
        r"""
        :param _TaskIds: Associated Task ID
        :type TaskIds: str
        :param _AlarmType: Alert Categories; 'failure' indicates failure alert; 'overtime' indicates timeout alert
        :type AlarmType: str
        :param _AlarmWay: Alert Method; 'SMS' indicates SMS; 'Email' indicates email; 'HTTP' indicates an interface method; 'Wechat' indicates WeChat method
        :type AlarmWay: str
        :param _AlarmRecipient: Alert Recipient, multiple recipients separated by ;
        :type AlarmRecipient: str
        :param _AlarmRecipientId: Alert Recipient ID, multiple recipient IDs separated by ;
        :type AlarmRecipientId: str
        :param _Hours: Estimated Running Hours, value range 0-23
        :type Hours: int
        :param _Minutes: Estimated Running Minutes, value range 0-59
        :type Minutes: int
        :param _TriggerType: Alert Trigger Moment; '1' means first run failure; '2' means failure after all retries;
        :type TriggerType: int
        :param _AlarmId: Alert Information ID
        :type AlarmId: str
        :param _Status: Alert Status Setting; '1' indicates available; '0' indicates unavailable, default is available
        :type Status: int
        """
        self._TaskIds = None
        self._AlarmType = None
        self._AlarmWay = None
        self._AlarmRecipient = None
        self._AlarmRecipientId = None
        self._Hours = None
        self._Minutes = None
        self._TriggerType = None
        self._AlarmId = None
        self._Status = None

    @property
    def TaskIds(self):
        """Associated Task ID
        :rtype: str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def AlarmType(self):
        """Alert Categories; 'failure' indicates failure alert; 'overtime' indicates timeout alert
        :rtype: str
        """
        return self._AlarmType

    @AlarmType.setter
    def AlarmType(self, AlarmType):
        self._AlarmType = AlarmType

    @property
    def AlarmWay(self):
        """Alert Method; 'SMS' indicates SMS; 'Email' indicates email; 'HTTP' indicates an interface method; 'Wechat' indicates WeChat method
        :rtype: str
        """
        return self._AlarmWay

    @AlarmWay.setter
    def AlarmWay(self, AlarmWay):
        self._AlarmWay = AlarmWay

    @property
    def AlarmRecipient(self):
        """Alert Recipient, multiple recipients separated by ;
        :rtype: str
        """
        return self._AlarmRecipient

    @AlarmRecipient.setter
    def AlarmRecipient(self, AlarmRecipient):
        self._AlarmRecipient = AlarmRecipient

    @property
    def AlarmRecipientId(self):
        """Alert Recipient ID, multiple recipient IDs separated by ;
        :rtype: str
        """
        return self._AlarmRecipientId

    @AlarmRecipientId.setter
    def AlarmRecipientId(self, AlarmRecipientId):
        self._AlarmRecipientId = AlarmRecipientId

    @property
    def Hours(self):
        """Estimated Running Hours, value range 0-23
        :rtype: int
        """
        return self._Hours

    @Hours.setter
    def Hours(self, Hours):
        self._Hours = Hours

    @property
    def Minutes(self):
        """Estimated Running Minutes, value range 0-59
        :rtype: int
        """
        return self._Minutes

    @Minutes.setter
    def Minutes(self, Minutes):
        self._Minutes = Minutes

    @property
    def TriggerType(self):
        """Alert Trigger Moment; '1' means first run failure; '2' means failure after all retries;
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def AlarmId(self):
        """Alert Information ID
        :rtype: str
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def Status(self):
        """Alert Status Setting; '1' indicates available; '0' indicates unavailable, default is available
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._AlarmType = params.get("AlarmType")
        self._AlarmWay = params.get("AlarmWay")
        self._AlarmRecipient = params.get("AlarmRecipient")
        self._AlarmRecipientId = params.get("AlarmRecipientId")
        self._Hours = params.get("Hours")
        self._Minutes = params.get("Minutes")
        self._TriggerType = params.get("TriggerType")
        self._AlarmId = params.get("AlarmId")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlarmReceiverInfo(AbstractModel):
    """Alert Recipient Details

    """

    def __init__(self):
        r"""
        :param _AlarmId: Alert ID
        :type AlarmId: str
        :param _AlarmReceiver: Alarm Recipient ID
        :type AlarmReceiver: str
        :param _Email: Email,0: Not set,1: Success,2: Failure
        :type Email: int
        :param _Sms: SMS,0: Not set,1: Success,2: Failure
        :type Sms: int
        :param _Wechat: WeChat,0: Not set,1: Success,2: Failure
        :type Wechat: int
        :param _Voice: Telephone,0: Not set,1: Success,2: Failure
        :type Voice: int
        :param _Wecom: WeCom,0: Not set,1: Success,2: Failure
        :type Wecom: int
        :param _Http: http,0: Not set,1: Success,2: Failure
        :type Http: int
        :param _WecomGroup: Enterprise WeChat group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type WecomGroup: int
        :param _LarkGroup: FeiShu Group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type LarkGroup: int
        """
        self._AlarmId = None
        self._AlarmReceiver = None
        self._Email = None
        self._Sms = None
        self._Wechat = None
        self._Voice = None
        self._Wecom = None
        self._Http = None
        self._WecomGroup = None
        self._LarkGroup = None

    @property
    def AlarmId(self):
        """Alert ID
        :rtype: str
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def AlarmReceiver(self):
        """Alarm Recipient ID
        :rtype: str
        """
        return self._AlarmReceiver

    @AlarmReceiver.setter
    def AlarmReceiver(self, AlarmReceiver):
        self._AlarmReceiver = AlarmReceiver

    @property
    def Email(self):
        """Email,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Email

    @Email.setter
    def Email(self, Email):
        self._Email = Email

    @property
    def Sms(self):
        """SMS,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Sms

    @Sms.setter
    def Sms(self, Sms):
        self._Sms = Sms

    @property
    def Wechat(self):
        """WeChat,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Wechat

    @Wechat.setter
    def Wechat(self, Wechat):
        self._Wechat = Wechat

    @property
    def Voice(self):
        """Telephone,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Voice

    @Voice.setter
    def Voice(self, Voice):
        self._Voice = Voice

    @property
    def Wecom(self):
        """WeCom,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Wecom

    @Wecom.setter
    def Wecom(self, Wecom):
        self._Wecom = Wecom

    @property
    def Http(self):
        """http,0: Not set,1: Success,2: Failure
        :rtype: int
        """
        return self._Http

    @Http.setter
    def Http(self, Http):
        self._Http = Http

    @property
    def WecomGroup(self):
        """Enterprise WeChat group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._WecomGroup

    @WecomGroup.setter
    def WecomGroup(self, WecomGroup):
        self._WecomGroup = WecomGroup

    @property
    def LarkGroup(self):
        """FeiShu Group,0: Not set,1: Success,2: Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LarkGroup

    @LarkGroup.setter
    def LarkGroup(self, LarkGroup):
        self._LarkGroup = LarkGroup


    def _deserialize(self, params):
        self._AlarmId = params.get("AlarmId")
        self._AlarmReceiver = params.get("AlarmReceiver")
        self._Email = params.get("Email")
        self._Sms = params.get("Sms")
        self._Wechat = params.get("Wechat")
        self._Voice = params.get("Voice")
        self._Wecom = params.get("Wecom")
        self._Http = params.get("Http")
        self._WecomGroup = params.get("WecomGroup")
        self._LarkGroup = params.get("LarkGroup")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Apply(AbstractModel):
    """Approval List Information

    """

    def __init__(self):
        r"""
        :param _ApplicantId: Applicant ID
        :type ApplicantId: str
        :param _ApplicantName: Applicant Name
        :type ApplicantName: str
        :param _Remark: Approval Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :type Remark: str
        :param _ApproveClassification: Approval Category Key
        :type ApproveClassification: str
        :param _ApproveId: Approval Form ID
        :type ApproveId: str
        :param _ApproveType: Approval Type Key
        :type ApproveType: str
        :param _Reason: Application Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :type Reason: str
        :param _CreateTime: Creation Time
        :type CreateTime: str
        :param _ApproveTime: Approval Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ApproveTime: str
        :param _ApproveClassificationName: Approval Category Name
        :type ApproveClassificationName: str
        :param _Status: Status
        :type Status: str
        :param _ApproveTypeName: Approval Type Name
        :type ApproveTypeName: str
        :param _ErrorMessage: Approval Exception or Failure Information
        :type ErrorMessage: str
        :param _ApplyName: Apply for Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ApplyName: str
        :param _ApproverId: Approver ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ApproverId: str
        :param _ApproverName: Approver Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ApproverName: str
        :param _ApproveProjectName: Project for Approval
Note: This field may return null, indicating that no valid value can be obtained.
        :type ApproveProjectName: str
        """
        self._ApplicantId = None
        self._ApplicantName = None
        self._Remark = None
        self._ApproveClassification = None
        self._ApproveId = None
        self._ApproveType = None
        self._Reason = None
        self._CreateTime = None
        self._ApproveTime = None
        self._ApproveClassificationName = None
        self._Status = None
        self._ApproveTypeName = None
        self._ErrorMessage = None
        self._ApplyName = None
        self._ApproverId = None
        self._ApproverName = None
        self._ApproveProjectName = None

    @property
    def ApplicantId(self):
        """Applicant ID
        :rtype: str
        """
        return self._ApplicantId

    @ApplicantId.setter
    def ApplicantId(self, ApplicantId):
        self._ApplicantId = ApplicantId

    @property
    def ApplicantName(self):
        """Applicant Name
        :rtype: str
        """
        return self._ApplicantName

    @ApplicantName.setter
    def ApplicantName(self, ApplicantName):
        self._ApplicantName = ApplicantName

    @property
    def Remark(self):
        """Approval Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def ApproveClassification(self):
        """Approval Category Key
        :rtype: str
        """
        return self._ApproveClassification

    @ApproveClassification.setter
    def ApproveClassification(self, ApproveClassification):
        self._ApproveClassification = ApproveClassification

    @property
    def ApproveId(self):
        """Approval Form ID
        :rtype: str
        """
        return self._ApproveId

    @ApproveId.setter
    def ApproveId(self, ApproveId):
        self._ApproveId = ApproveId

    @property
    def ApproveType(self):
        """Approval Type Key
        :rtype: str
        """
        return self._ApproveType

    @ApproveType.setter
    def ApproveType(self, ApproveType):
        self._ApproveType = ApproveType

    @property
    def Reason(self):
        """Application Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def CreateTime(self):
        """Creation Time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ApproveTime(self):
        """Approval Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ApproveTime

    @ApproveTime.setter
    def ApproveTime(self, ApproveTime):
        self._ApproveTime = ApproveTime

    @property
    def ApproveClassificationName(self):
        """Approval Category Name
        :rtype: str
        """
        return self._ApproveClassificationName

    @ApproveClassificationName.setter
    def ApproveClassificationName(self, ApproveClassificationName):
        self._ApproveClassificationName = ApproveClassificationName

    @property
    def Status(self):
        """Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ApproveTypeName(self):
        """Approval Type Name
        :rtype: str
        """
        return self._ApproveTypeName

    @ApproveTypeName.setter
    def ApproveTypeName(self, ApproveTypeName):
        self._ApproveTypeName = ApproveTypeName

    @property
    def ErrorMessage(self):
        """Approval Exception or Failure Information
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def ApplyName(self):
        """Apply for Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ApplyName

    @ApplyName.setter
    def ApplyName(self, ApplyName):
        self._ApplyName = ApplyName

    @property
    def ApproverId(self):
        """Approver ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ApproverId

    @ApproverId.setter
    def ApproverId(self, ApproverId):
        self._ApproverId = ApproverId

    @property
    def ApproverName(self):
        """Approver Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ApproverName

    @ApproverName.setter
    def ApproverName(self, ApproverName):
        self._ApproverName = ApproverName

    @property
    def ApproveProjectName(self):
        """Project for Approval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ApproveProjectName

    @ApproveProjectName.setter
    def ApproveProjectName(self, ApproveProjectName):
        self._ApproveProjectName = ApproveProjectName


    def _deserialize(self, params):
        self._ApplicantId = params.get("ApplicantId")
        self._ApplicantName = params.get("ApplicantName")
        self._Remark = params.get("Remark")
        self._ApproveClassification = params.get("ApproveClassification")
        self._ApproveId = params.get("ApproveId")
        self._ApproveType = params.get("ApproveType")
        self._Reason = params.get("Reason")
        self._CreateTime = params.get("CreateTime")
        self._ApproveTime = params.get("ApproveTime")
        self._ApproveClassificationName = params.get("ApproveClassificationName")
        self._Status = params.get("Status")
        self._ApproveTypeName = params.get("ApproveTypeName")
        self._ErrorMessage = params.get("ErrorMessage")
        self._ApplyName = params.get("ApplyName")
        self._ApproverId = params.get("ApproverId")
        self._ApproverName = params.get("ApproverName")
        self._ApproveProjectName = params.get("ApproveProjectName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ApproveModify(AbstractModel):
    """Modify Approval Form Status

    """

    def __init__(self):
        r"""
        :param _ApproveId: Approval Form ID
        :type ApproveId: str
        :param _Success: Modification successful?
        :type Success: bool
        """
        self._ApproveId = None
        self._Success = None

    @property
    def ApproveId(self):
        """Approval Form ID
        :rtype: str
        """
        return self._ApproveId

    @ApproveId.setter
    def ApproveId(self, ApproveId):
        self._ApproveId = ApproveId

    @property
    def Success(self):
        """Modification successful?
        :rtype: bool
        """
        return self._Success

    @Success.setter
    def Success(self, Success):
        self._Success = Success


    def _deserialize(self, params):
        self._ApproveId = params.get("ApproveId")
        self._Success = params.get("Success")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ApproveType(AbstractModel):
    """Approval Category

    """

    def __init__(self):
        r"""
        :param _Type: Application Category Key
        :type Type: str
        :param _TypeName: Type Name
        :type TypeName: str
        :param _Classification: Application Type Key
        :type Classification: str
        """
        self._Type = None
        self._TypeName = None
        self._Classification = None

    @property
    def Type(self):
        """Application Category Key
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def TypeName(self):
        """Type Name
        :rtype: str
        """
        return self._TypeName

    @TypeName.setter
    def TypeName(self, TypeName):
        self._TypeName = TypeName

    @property
    def Classification(self):
        """Application Type Key
        :rtype: str
        """
        return self._Classification

    @Classification.setter
    def Classification(self, Classification):
        self._Classification = Classification


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._TypeName = params.get("TypeName")
        self._Classification = params.get("Classification")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttributeItemDTO(AbstractModel):
    """AIOps basic information

    """

    def __init__(self):
        r"""
        :param _Key: key
Note: This field may return null, indicating that no valid value can be obtained.
        :type Key: str
        :param _Value: value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        :param _Description: DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        """
        self._Key = None
        self._Value = None
        self._Description = None

    @property
    def Key(self):
        """key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Description(self):
        """DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaseClusterInfo(AbstractModel):
    """Cluster Basic Information

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterId: str
        :param _ClusterType: Cluster Type, EMR/CDW, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterType: str
        :param _ClusterName: Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
        :type ClusterName: str
        :param _RegionCn: Region Chinese
Note: This field may return null, indicating that no valid value can be obtained.
        :type RegionCn: str
        :param _RegionEn: Region English
Note: This field may return null, indicating that no valid value can be obtained.
        :type RegionEn: str
        :param _RegionArea: RegionNote: This field may return null, indicating that no valid value can be obtained.
        :type RegionArea: str
        :param _Used: Whether the Cluster is Used
Note: This field may return null, indicating that no valid value can be obtained.
        :type Used: bool
        :param _Status: Cluster StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        :param _StatusInfo: Cluster State Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type StatusInfo: str
        :param _StorageType: Cluster Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageType: str
        :param _ComputeType: Cluster Computing Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ComputeType: str
        :param _ClusterResource: Cluster Resource Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterResource: str
        :param _ChargeType: Cluster Payment Method
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChargeType: str
        :param _CreateTime: Cluster Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ExtraConf: Additional Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtraConf: str
        :param _RangerUserName: Ranger Account Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type RangerUserName: str
        :param _CdwUserName: CDW Account (for display)
Note: This field may return null, indicating that no valid value can be obtained.
        :type CdwUserName: str
        """
        self._ClusterId = None
        self._ClusterType = None
        self._ClusterName = None
        self._RegionCn = None
        self._RegionEn = None
        self._RegionArea = None
        self._Used = None
        self._Status = None
        self._StatusInfo = None
        self._StorageType = None
        self._ComputeType = None
        self._ClusterResource = None
        self._ChargeType = None
        self._CreateTime = None
        self._ExtraConf = None
        self._RangerUserName = None
        self._CdwUserName = None

    @property
    def ClusterId(self):
        """Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterType(self):
        """Cluster Type, EMR/CDW, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterType

    @ClusterType.setter
    def ClusterType(self, ClusterType):
        self._ClusterType = ClusterType

    @property
    def ClusterName(self):
        """Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def RegionCn(self):
        """Region Chinese
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RegionCn

    @RegionCn.setter
    def RegionCn(self, RegionCn):
        self._RegionCn = RegionCn

    @property
    def RegionEn(self):
        """Region English
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RegionEn

    @RegionEn.setter
    def RegionEn(self, RegionEn):
        self._RegionEn = RegionEn

    @property
    def RegionArea(self):
        """RegionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RegionArea

    @RegionArea.setter
    def RegionArea(self, RegionArea):
        self._RegionArea = RegionArea

    @property
    def Used(self):
        """Whether the Cluster is Used
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Used

    @Used.setter
    def Used(self, Used):
        self._Used = Used

    @property
    def Status(self):
        """Cluster StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StatusInfo(self):
        """Cluster State Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StatusInfo

    @StatusInfo.setter
    def StatusInfo(self, StatusInfo):
        self._StatusInfo = StatusInfo

    @property
    def StorageType(self):
        """Cluster Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageType

    @StorageType.setter
    def StorageType(self, StorageType):
        self._StorageType = StorageType

    @property
    def ComputeType(self):
        """Cluster Computing Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ComputeType

    @ComputeType.setter
    def ComputeType(self, ComputeType):
        self._ComputeType = ComputeType

    @property
    def ClusterResource(self):
        """Cluster Resource Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterResource

    @ClusterResource.setter
    def ClusterResource(self, ClusterResource):
        self._ClusterResource = ClusterResource

    @property
    def ChargeType(self):
        """Cluster Payment Method
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def CreateTime(self):
        """Cluster Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ExtraConf(self):
        """Additional Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExtraConf

    @ExtraConf.setter
    def ExtraConf(self, ExtraConf):
        self._ExtraConf = ExtraConf

    @property
    def RangerUserName(self):
        """Ranger Account Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RangerUserName

    @RangerUserName.setter
    def RangerUserName(self, RangerUserName):
        self._RangerUserName = RangerUserName

    @property
    def CdwUserName(self):
        """CDW Account (for display)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CdwUserName

    @CdwUserName.setter
    def CdwUserName(self, CdwUserName):
        self._CdwUserName = CdwUserName


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterType = params.get("ClusterType")
        self._ClusterName = params.get("ClusterName")
        self._RegionCn = params.get("RegionCn")
        self._RegionEn = params.get("RegionEn")
        self._RegionArea = params.get("RegionArea")
        self._Used = params.get("Used")
        self._Status = params.get("Status")
        self._StatusInfo = params.get("StatusInfo")
        self._StorageType = params.get("StorageType")
        self._ComputeType = params.get("ComputeType")
        self._ClusterResource = params.get("ClusterResource")
        self._ChargeType = params.get("ChargeType")
        self._CreateTime = params.get("CreateTime")
        self._ExtraConf = params.get("ExtraConf")
        self._RangerUserName = params.get("RangerUserName")
        self._CdwUserName = params.get("CdwUserName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaseTenant(AbstractModel):
    """Tenant basic information

    """

    def __init__(self):
        r"""
        :param _TenantId: Tenant IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TenantId: str
        :param _TenantName: Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TenantName: str
        :param _DisplayName: Tenant display name, usually the Chinese name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DisplayName: str
        :param _Description: RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _OwnerUserId: Tenant Main Account
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUserId: str
        :param _Params: Tenant's additional configuration parameters, in JSON format string
Note: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        """
        self._TenantId = None
        self._TenantName = None
        self._DisplayName = None
        self._Description = None
        self._OwnerUserId = None
        self._Params = None

    @property
    def TenantId(self):
        """Tenant IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def TenantName(self):
        """Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TenantName

    @TenantName.setter
    def TenantName(self, TenantName):
        self._TenantName = TenantName

    @property
    def DisplayName(self):
        """Tenant display name, usually the Chinese name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def Description(self):
        """RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def OwnerUserId(self):
        """Tenant Main Account
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerUserId

    @OwnerUserId.setter
    def OwnerUserId(self, OwnerUserId):
        self._OwnerUserId = OwnerUserId

    @property
    def Params(self):
        """Tenant's additional configuration parameters, in JSON format string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params


    def _deserialize(self, params):
        self._TenantId = params.get("TenantId")
        self._TenantName = params.get("TenantName")
        self._DisplayName = params.get("DisplayName")
        self._Description = params.get("Description")
        self._OwnerUserId = params.get("OwnerUserId")
        self._Params = params.get("Params")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaseUser(AbstractModel):
    """Basic User Information

    """

    def __init__(self):
        r"""
        :param _UserId: Cloud User UIN, Globally Unique
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: str
        :param _UserName: User Global Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserName: str
        :param _DisplayName: User Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DisplayName: str
        :param _PhoneNum: Telephone Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PhoneNum: str
        :param _Email: Email
Note: This field may return null, indicating that no valid value can be obtained.
        :type Email: str
        """
        self._UserId = None
        self._UserName = None
        self._DisplayName = None
        self._PhoneNum = None
        self._Email = None

    @property
    def UserId(self):
        """Cloud User UIN, Globally Unique
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def UserName(self):
        """User Global Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def DisplayName(self):
        """User Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def PhoneNum(self):
        """Telephone Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PhoneNum

    @PhoneNum.setter
    def PhoneNum(self, PhoneNum):
        self._PhoneNum = PhoneNum

    @property
    def Email(self):
        """Email
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Email

    @Email.setter
    def Email(self, Email):
        self._Email = Email


    def _deserialize(self, params):
        self._UserId = params.get("UserId")
        self._UserName = params.get("UserName")
        self._DisplayName = params.get("DisplayName")
        self._PhoneNum = params.get("PhoneNum")
        self._Email = params.get("Email")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchCreateIntegrationTaskAlarmsRequest(AbstractModel):
    """BatchCreateIntegrationTaskAlarms request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID.
        :type TaskIds: list of str
        :param _TaskAlarmInfo: Alert Configuration Information
        :type TaskAlarmInfo: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIds = None
        self._TaskAlarmInfo = None
        self._ProjectId = None

    @property
    def TaskIds(self):
        """Task ID.
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskAlarmInfo(self):
        """Alert Configuration Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        """
        return self._TaskAlarmInfo

    @TaskAlarmInfo.setter
    def TaskAlarmInfo(self, TaskAlarmInfo):
        self._TaskAlarmInfo = TaskAlarmInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        if params.get("TaskAlarmInfo") is not None:
            self._TaskAlarmInfo = TaskAlarmInfo()
            self._TaskAlarmInfo._deserialize(params.get("TaskAlarmInfo"))
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchCreateIntegrationTaskAlarmsResponse(AbstractModel):
    """BatchCreateIntegrationTaskAlarms response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessCount: int
        :param _FailedCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type FailedCount: int
        :param _TotalCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BatchCreateTaskVersionDTO(AbstractModel):
    """Used by BatchCreateTaskVersion, describes task information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _VersionRemark: VersionRemark
Note: This field may return null, indicating that no valid value can be obtained.
        :type VersionRemark: str
        :param _FolderId: Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        """
        self._TaskId = None
        self._VersionRemark = None
        self._FolderId = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VersionRemark(self):
        """VersionRemark
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._VersionRemark

    @VersionRemark.setter
    def VersionRemark(self, VersionRemark):
        self._VersionRemark = VersionRemark

    @property
    def FolderId(self):
        """Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._VersionRemark = params.get("VersionRemark")
        self._FolderId = params.get("FolderId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchDeleteIntegrationTasksRequest(AbstractModel):
    """BatchDeleteIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _TaskType: Task Type, 201 for real-time tasks, 202 for offline tasks
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DeleteKFFlag: Whether to delete development state tasks. By default, development state is not deleted, 0 means do not delete, 1 means delete
        :type DeleteKFFlag: int
        :param _Name: Operation Name
        :type Name: str
        :param _TaskNames: This batch operation involves tasks for auditing
        :type TaskNames: list of str
        """
        self._TaskIds = None
        self._TaskType = None
        self._ProjectId = None
        self._DeleteKFFlag = None
        self._Name = None
        self._TaskNames = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskType(self):
        """Task Type, 201 for real-time tasks, 202 for offline tasks
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DeleteKFFlag(self):
        """Whether to delete development state tasks. By default, development state is not deleted, 0 means do not delete, 1 means delete
        :rtype: int
        """
        return self._DeleteKFFlag

    @DeleteKFFlag.setter
    def DeleteKFFlag(self, DeleteKFFlag):
        self._DeleteKFFlag = DeleteKFFlag

    @property
    def Name(self):
        """Operation Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TaskNames(self):
        """This batch operation involves tasks for auditing
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._DeleteKFFlag = params.get("DeleteKFFlag")
        self._Name = params.get("Name")
        self._TaskNames = params.get("TaskNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchDeleteIntegrationTasksResponse(AbstractModel):
    """BatchDeleteIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessCount: int
        :param _FailedCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type FailedCount: int
        :param _TotalCount: Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BatchDeleteOpsTasksRequest(AbstractModel):
    """BatchDeleteOpsTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIdList: Batch Deleted Task TaskId
        :type TaskIdList: list of str
        :param _DeleteMode: true: After deletion, downstream tasks can run normally
false: After deletion, downstream tasks cannot run
        :type DeleteMode: bool
        :param _EnableNotify: true: Notify Downstream Task Responsible Persons
false: Do Not Notify Downstream Task Responsible Persons
        :type EnableNotify: bool
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIdList = None
        self._DeleteMode = None
        self._EnableNotify = None
        self._ProjectId = None

    @property
    def TaskIdList(self):
        """Batch Deleted Task TaskId
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def DeleteMode(self):
        """true: After deletion, downstream tasks can run normally
false: After deletion, downstream tasks cannot run
        :rtype: bool
        """
        return self._DeleteMode

    @DeleteMode.setter
    def DeleteMode(self, DeleteMode):
        self._DeleteMode = DeleteMode

    @property
    def EnableNotify(self):
        """true: Notify Downstream Task Responsible Persons
false: Do Not Notify Downstream Task Responsible Persons
        :rtype: bool
        """
        return self._EnableNotify

    @EnableNotify.setter
    def EnableNotify(self, EnableNotify):
        self._EnableNotify = EnableNotify

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIdList = params.get("TaskIdList")
        self._DeleteMode = params.get("DeleteMode")
        self._EnableNotify = params.get("EnableNotify")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchDeleteOpsTasksResponse(AbstractModel):
    """BatchDeleteOpsTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Returns the number of successful batch operations, the number of failures, and the total number of operations
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Returns the number of successful batch operations, the number of failures, and the total number of operations
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class BatchForceSuccessIntegrationTaskInstancesRequest(AbstractModel):
    """BatchForceSuccessIntegrationTaskInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance Information
        :type Instances: list of SchedulerTaskInstanceInfo
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Instances = None
        self._ProjectId = None

    @property
    def Instances(self):
        """Instance Information
        :rtype: list of SchedulerTaskInstanceInfo
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = SchedulerTaskInstanceInfo()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchForceSuccessIntegrationTaskInstancesResponse(AbstractModel):
    """BatchForceSuccessIntegrationTaskInstances response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successful Operations
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Operations
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successful Operations
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Operations
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BatchKillIntegrationTaskInstancesRequest(AbstractModel):
    """BatchKillIntegrationTaskInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance Information
        :type Instances: list of SchedulerTaskInstanceInfo
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Instances = None
        self._ProjectId = None

    @property
    def Instances(self):
        """Instance Information
        :rtype: list of SchedulerTaskInstanceInfo
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = SchedulerTaskInstanceInfo()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchKillIntegrationTaskInstancesResponse(AbstractModel):
    """BatchKillIntegrationTaskInstances response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _TaskNames: What is actually passed is taskId
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._TaskNames = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskNames(self):
        """What is actually passed is taskId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._TaskNames = params.get("TaskNames")
        self._RequestId = params.get("RequestId")


class BatchMakeUpIntegrationTasksRequest(AbstractModel):
    """BatchMakeUpIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _TaskType: Task Type, 201 for Real-time Task, 202 for Offline Task
        :type TaskType: int
        :param _StartTime: Data Supplement Start Time
        :type StartTime: str
        :param _EndTime: Data Supplement End Time
        :type EndTime: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIds = None
        self._TaskType = None
        self._StartTime = None
        self._EndTime = None
        self._ProjectId = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskType(self):
        """Task Type, 201 for Real-time Task, 202 for Offline Task
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def StartTime(self):
        """Data Supplement Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Data Supplement End Time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._TaskType = params.get("TaskType")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchMakeUpIntegrationTasksResponse(AbstractModel):
    """BatchMakeUpIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BatchModifyOpsOwnersRequest(AbstractModel):
    """BatchModifyOpsOwners request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIdList: TaskId Array that Needs Updated Responsible Person
        :type TaskIdList: list of str
        :param _Owners: Responsible User Id Information that Needs Updating, Connect Multiple Persons in Charge with ;
        :type Owners: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIdList = None
        self._Owners = None
        self._ProjectId = None

    @property
    def TaskIdList(self):
        """TaskId Array that Needs Updated Responsible Person
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def Owners(self):
        """Responsible User Id Information that Needs Updating, Connect Multiple Persons in Charge with ;
        :rtype: str
        """
        return self._Owners

    @Owners.setter
    def Owners(self, Owners):
        self._Owners = Owners

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIdList = params.get("TaskIdList")
        self._Owners = params.get("Owners")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchModifyOpsOwnersResponse(AbstractModel):
    """BatchModifyOpsOwners response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Return the number of successful batch operations, the number of failures, and the total number of operations
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Return the number of successful batch operations, the number of failures, and the total number of operations
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class BatchOperateResult(AbstractModel):
    """Batch operation result return

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Batch Operations Succeeded
        :type SuccessCount: int
        :param _FailedCount: Number of Batch Operations Failed
        :type FailedCount: int
        :param _TotalCount: Total Number of Batch Operations
        :type TotalCount: int
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None

    @property
    def SuccessCount(self):
        """Number of Batch Operations Succeeded
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Batch Operations Failed
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Batch Operations
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchOperateResultOpsDto(AbstractModel):
    """Instance Batch Operation Result Class

    """

    def __init__(self):
        r"""
        :param _Result: ResultNote: This field may return null, indicating that no valid value can be obtained.
        :type Result: bool
        :param _ErrorId: Error ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorId: str
        :param _ErrorDesc: Error Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        """
        self._Result = None
        self._ErrorId = None
        self._ErrorDesc = None

    @property
    def Result(self):
        """ResultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def ErrorId(self):
        """Error ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorId

    @ErrorId.setter
    def ErrorId(self, ErrorId):
        self._ErrorId = ErrorId

    @property
    def ErrorDesc(self):
        """Error Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc


    def _deserialize(self, params):
        self._Result = params.get("Result")
        self._ErrorId = params.get("ErrorId")
        self._ErrorDesc = params.get("ErrorDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchOperationOpsDto(AbstractModel):
    """Batch operation result return

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of successful batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessCount: int
        :param _FailedCount: Number of failed batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :type FailedCount: int
        :param _TotalCount: Total number of batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None

    @property
    def SuccessCount(self):
        """Number of successful batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of failed batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total number of batch operations
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchOpsDTO(AbstractModel):
    """Batch Operation Result, with Failure Reason

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _SuccessCount: Success count
Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessCount: int
        :param _FailCount: Failure count
Note: This field may return null, indicating that no valid value can be obtained.
        :type FailCount: int
        :param _FailMessageList: Failure reason
Note: This field may return null, indicating that no valid value can be obtained.
        :type FailMessageList: list of FailMessage
        """
        self._TotalCount = None
        self._SuccessCount = None
        self._FailCount = None
        self._FailMessageList = None

    @property
    def TotalCount(self):
        """Total Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def SuccessCount(self):
        """Success count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailCount(self):
        """Failure count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FailCount

    @FailCount.setter
    def FailCount(self, FailCount):
        self._FailCount = FailCount

    @property
    def FailMessageList(self):
        """Failure reason
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FailMessage
        """
        return self._FailMessageList

    @FailMessageList.setter
    def FailMessageList(self, FailMessageList):
        self._FailMessageList = FailMessageList


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._SuccessCount = params.get("SuccessCount")
        self._FailCount = params.get("FailCount")
        if params.get("FailMessageList") is not None:
            self._FailMessageList = []
            for item in params.get("FailMessageList"):
                obj = FailMessage()
                obj._deserialize(item)
                self._FailMessageList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchRerunIntegrationTaskInstancesRequest(AbstractModel):
    """BatchRerunIntegrationTaskInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance Information
        :type Instances: list of SchedulerTaskInstanceInfo
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Instances = None
        self._ProjectId = None

    @property
    def Instances(self):
        """Instance Information
        :rtype: list of SchedulerTaskInstanceInfo
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = SchedulerTaskInstanceInfo()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchRerunIntegrationTaskInstancesResponse(AbstractModel):
    """BatchRerunIntegrationTaskInstances response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _TaskNames: What is actually passed is taskId
        :type TaskNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._TaskNames = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskNames(self):
        """What is actually passed is taskId
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._TaskNames = params.get("TaskNames")
        self._RequestId = params.get("RequestId")


class BatchResult(AbstractModel):
    """Batch Operation Result

    """

    def __init__(self):
        r"""
        :param _Running: Number of Tasks Running
        :type Running: int
        :param _Success: Number of Tasks Executed Successfully
        :type Success: int
        :param _Failed: Number of Tasks Executed Failed
        :type Failed: int
        :param _Total: Total Tasks
        :type Total: int
        """
        self._Running = None
        self._Success = None
        self._Failed = None
        self._Total = None

    @property
    def Running(self):
        """Number of Tasks Running
        :rtype: int
        """
        return self._Running

    @Running.setter
    def Running(self, Running):
        self._Running = Running

    @property
    def Success(self):
        """Number of Tasks Executed Successfully
        :rtype: int
        """
        return self._Success

    @Success.setter
    def Success(self, Success):
        self._Success = Success

    @property
    def Failed(self):
        """Number of Tasks Executed Failed
        :rtype: int
        """
        return self._Failed

    @Failed.setter
    def Failed(self, Failed):
        self._Failed = Failed

    @property
    def Total(self):
        """Total Tasks
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total


    def _deserialize(self, params):
        self._Running = params.get("Running")
        self._Success = params.get("Success")
        self._Failed = params.get("Failed")
        self._Total = params.get("Total")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchResumeIntegrationTasksRequest(AbstractModel):
    """BatchResumeIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _TaskType: Task Type, 201 for Real-time Task, 202 for Offline Task
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIds = None
        self._TaskType = None
        self._ProjectId = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskType(self):
        """Task Type, 201 for Real-time Task, 202 for Offline Task
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchResumeIntegrationTasksResponse(AbstractModel):
    """BatchResumeIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _TaskNames: This batch operation involves tasks for auditing
        :type TaskNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._TaskNames = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskNames(self):
        """This batch operation involves tasks for auditing
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._TaskNames = params.get("TaskNames")
        self._RequestId = params.get("RequestId")


class BatchReturn(AbstractModel):
    """Operation result

    """

    def __init__(self):
        r"""
        :param _Result: Execution Result
        :type Result: bool
        :param _ErrorDesc: Execution remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        :param _ErrorId: Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorId: str
        """
        self._Result = None
        self._ErrorDesc = None
        self._ErrorId = None

    @property
    def Result(self):
        """Execution Result
        :rtype: bool
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def ErrorDesc(self):
        """Execution remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc

    @property
    def ErrorId(self):
        """Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorId

    @ErrorId.setter
    def ErrorId(self, ErrorId):
        self._ErrorId = ErrorId


    def _deserialize(self, params):
        self._Result = params.get("Result")
        self._ErrorDesc = params.get("ErrorDesc")
        self._ErrorId = params.get("ErrorId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchRunOpsTaskRequest(AbstractModel):
    """BatchRunOpsTask request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _EnableMakeUp: Whether to Supplement Intermediate Instances, 0 for not supplementing; 1 for supplementing
        :type EnableMakeUp: int
        :param _Tasks: Task ID list
        :type Tasks: list of str
        """
        self._ProjectId = None
        self._EnableMakeUp = None
        self._Tasks = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def EnableMakeUp(self):
        """Whether to Supplement Intermediate Instances, 0 for not supplementing; 1 for supplementing
        :rtype: int
        """
        return self._EnableMakeUp

    @EnableMakeUp.setter
    def EnableMakeUp(self, EnableMakeUp):
        self._EnableMakeUp = EnableMakeUp

    @property
    def Tasks(self):
        """Task ID list
        :rtype: list of str
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._EnableMakeUp = params.get("EnableMakeUp")
        self._Tasks = params.get("Tasks")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchRunOpsTaskResponse(AbstractModel):
    """BatchRunOpsTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation resultNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation resultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class BatchStartIntegrationTasksRequest(AbstractModel):
    """BatchStartIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type, 201 for real-time tasks, 202 for offline tasks
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _StartTaskInfoSet: Batch run integration tasks, currently only used in real-time integration
        :type StartTaskInfoSet: list of StartTaskInfo
        """
        self._TaskType = None
        self._ProjectId = None
        self._TaskIds = None
        self._StartTaskInfoSet = None

    @property
    def TaskType(self):
        """Task Type, 201 for real-time tasks, 202 for offline tasks
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def StartTaskInfoSet(self):
        """Batch run integration tasks, currently only used in real-time integration
        :rtype: list of StartTaskInfo
        """
        return self._StartTaskInfoSet

    @StartTaskInfoSet.setter
    def StartTaskInfoSet(self, StartTaskInfoSet):
        self._StartTaskInfoSet = StartTaskInfoSet


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._TaskIds = params.get("TaskIds")
        if params.get("StartTaskInfoSet") is not None:
            self._StartTaskInfoSet = []
            for item in params.get("StartTaskInfoSet"):
                obj = StartTaskInfo()
                obj._deserialize(item)
                self._StartTaskInfoSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchStartIntegrationTasksResponse(AbstractModel):
    """BatchStartIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _TaskNames: Batch operation successful task IDs for audit
        :type TaskNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._TaskNames = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskNames(self):
        """Batch operation successful task IDs for audit
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._TaskNames = params.get("TaskNames")
        self._RequestId = params.get("RequestId")


class BatchStopIntegrationTasksRequest(AbstractModel):
    """BatchStopIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _TaskType: Task Type, 201 for real-time tasks, 202 for offline tasks
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIds = None
        self._TaskType = None
        self._ProjectId = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskType(self):
        """Task Type, 201 for real-time tasks, 202 for offline tasks
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchStopIntegrationTasksResponse(AbstractModel):
    """BatchStopIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successful Operations
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Operations
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _TaskNames: Number of successful tasks involved in this batch operation, for auditing
        :type TaskNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._TaskNames = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successful Operations
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Operations
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskNames(self):
        """Number of successful tasks involved in this batch operation, for auditing
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._TaskNames = params.get("TaskNames")
        self._RequestId = params.get("RequestId")


class BatchStopOpsTasksRequest(AbstractModel):
    """BatchStopOpsTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIdList: TaskId for batch stop tasks
        :type TaskIdList: list of str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _KillInstance: Whether to terminate the generated instance
        :type KillInstance: bool
        """
        self._TaskIdList = None
        self._ProjectId = None
        self._KillInstance = None

    @property
    def TaskIdList(self):
        """TaskId for batch stop tasks
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def KillInstance(self):
        """Whether to terminate the generated instance
        :rtype: bool
        """
        return self._KillInstance

    @KillInstance.setter
    def KillInstance(self, KillInstance):
        self._KillInstance = KillInstance


    def _deserialize(self, params):
        self._TaskIdList = params.get("TaskIdList")
        self._ProjectId = params.get("ProjectId")
        self._KillInstance = params.get("KillInstance")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchStopOpsTasksResponse(AbstractModel):
    """BatchStopOpsTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Returns the number of successful batch operations, the number of failures, and the total number of operations
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Returns the number of successful batch operations, the number of failures, and the total number of operations
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class BatchStopWorkflowsByIdsRequest(AbstractModel):
    """BatchStopWorkflowsByIds request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowIds: Workflow ID List
        :type WorkflowIds: list of str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _KillInstance: Whether to terminate the generated instance
        :type KillInstance: bool
        """
        self._WorkflowIds = None
        self._ProjectId = None
        self._KillInstance = None

    @property
    def WorkflowIds(self):
        """Workflow ID List
        :rtype: list of str
        """
        return self._WorkflowIds

    @WorkflowIds.setter
    def WorkflowIds(self, WorkflowIds):
        self._WorkflowIds = WorkflowIds

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def KillInstance(self):
        """Whether to terminate the generated instance
        :rtype: bool
        """
        return self._KillInstance

    @KillInstance.setter
    def KillInstance(self, KillInstance):
        self._KillInstance = KillInstance


    def _deserialize(self, params):
        self._WorkflowIds = params.get("WorkflowIds")
        self._ProjectId = params.get("ProjectId")
        self._KillInstance = params.get("KillInstance")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchStopWorkflowsByIdsResponse(AbstractModel):
    """BatchStopWorkflowsByIds response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class BatchSuspendIntegrationTasksRequest(AbstractModel):
    """BatchSuspendIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _TaskType: Task Type, 201 for real-time tasks, 202 for offline tasks
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Event: Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
        :type Event: str
        :param _TaskNames: This batch operation involves tasks for auditing
        :type TaskNames: list of str
        """
        self._TaskIds = None
        self._TaskType = None
        self._ProjectId = None
        self._Event = None
        self._TaskNames = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def TaskType(self):
        """Task Type, 201 for real-time tasks, 202 for offline tasks
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Event(self):
        """Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
        :rtype: str
        """
        return self._Event

    @Event.setter
    def Event(self, Event):
        self._Event = Event

    @property
    def TaskNames(self):
        """This batch operation involves tasks for auditing
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._Event = params.get("Event")
        self._TaskNames = params.get("TaskNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchSuspendIntegrationTasksResponse(AbstractModel):
    """BatchSuspendIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successfully Operated Tasks
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Tasks
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successfully Operated Tasks
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Tasks
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BatchUpdateIntegrationTasksRequest(AbstractModel):
    """BatchUpdateIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _Incharge: Person in Charge (separate multiple persons in charge with a lowercase semicolon; offline tasks use the account name, real-time tasks use the account ID)
        :type Incharge: str
        :param _TaskType: Task Type
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _InchargeIds: Responsible Person ID (separate multiple persons in charge with a lowercase semicolon)
        :type InchargeIds: str
        :param _TaskNames: This batch operation involves tasks for auditing
        :type TaskNames: list of str
        """
        self._TaskIds = None
        self._Incharge = None
        self._TaskType = None
        self._ProjectId = None
        self._InchargeIds = None
        self._TaskNames = None

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def Incharge(self):
        """Person in Charge (separate multiple persons in charge with a lowercase semicolon; offline tasks use the account name, real-time tasks use the account ID)
        :rtype: str
        """
        return self._Incharge

    @Incharge.setter
    def Incharge(self, Incharge):
        self._Incharge = Incharge

    @property
    def TaskType(self):
        """Task Type
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def InchargeIds(self):
        """Responsible Person ID (separate multiple persons in charge with a lowercase semicolon)
        :rtype: str
        """
        return self._InchargeIds

    @InchargeIds.setter
    def InchargeIds(self, InchargeIds):
        self._InchargeIds = InchargeIds

    @property
    def TaskNames(self):
        """This batch operation involves tasks for auditing
        :rtype: list of str
        """
        return self._TaskNames

    @TaskNames.setter
    def TaskNames(self, TaskNames):
        self._TaskNames = TaskNames


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._Incharge = params.get("Incharge")
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._InchargeIds = params.get("InchargeIds")
        self._TaskNames = params.get("TaskNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchUpdateIntegrationTasksResponse(AbstractModel):
    """BatchUpdateIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessCount: Number of Successful Operations
        :type SuccessCount: int
        :param _FailedCount: Number of Failed Operations
        :type FailedCount: int
        :param _TotalCount: Total Number of Tasks
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessCount = None
        self._FailedCount = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SuccessCount(self):
        """Number of Successful Operations
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """Number of Failed Operations
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def TotalCount(self):
        """Total Number of Tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class BytesSpeed(AbstractModel):
    """Real-time task synchronization speed Bytes/s

    """

    def __init__(self):
        r"""
        :param _NodeType: Node TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeType: str
        :param _NodeName: Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeName: str
        :param _Values: Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Values: list of SpeedValue
        """
        self._NodeType = None
        self._NodeName = None
        self._Values = None

    @property
    def NodeType(self):
        """Node TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeName(self):
        """Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def Values(self):
        """Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SpeedValue
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._NodeType = params.get("NodeType")
        self._NodeName = params.get("NodeName")
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = SpeedValue()
                obj._deserialize(item)
                self._Values.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckAlarmRegularNameExistRequest(AbstractModel):
    """CheckAlarmRegularNameExist request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project name
        :type ProjectId: str
        :param _AlarmRegularName: Rule name
        :type AlarmRegularName: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _Id: Primary key ID
        :type Id: str
        :param _TaskType: Task type: 201.Real-time, 202.Offline
        :type TaskType: int
        :param _MonitorType: Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :type MonitorType: int
        """
        self._ProjectId = None
        self._AlarmRegularName = None
        self._TaskId = None
        self._Id = None
        self._TaskType = None
        self._MonitorType = None

    @property
    def ProjectId(self):
        """Project name
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def AlarmRegularName(self):
        """Rule name
        :rtype: str
        """
        return self._AlarmRegularName

    @AlarmRegularName.setter
    def AlarmRegularName(self, AlarmRegularName):
        self._AlarmRegularName = AlarmRegularName

    @property
    def TaskId(self):
        warnings.warn("parameter `TaskId` is deprecated", DeprecationWarning) 

        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        warnings.warn("parameter `TaskId` is deprecated", DeprecationWarning) 

        self._TaskId = TaskId

    @property
    def Id(self):
        """Primary key ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TaskType(self):
        """Task type: 201.Real-time, 202.Offline
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def MonitorType(self):
        """Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._AlarmRegularName = params.get("AlarmRegularName")
        self._TaskId = params.get("TaskId")
        self._Id = params.get("Id")
        self._TaskType = params.get("TaskType")
        self._MonitorType = params.get("MonitorType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckAlarmRegularNameExistResponse(AbstractModel):
    """CheckAlarmRegularNameExist response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Whether there are duplicate names
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Whether there are duplicate names
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CheckIntegrationNodeNameExistsRequest(AbstractModel):
    """CheckIntegrationNodeNameExists request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _Name: Node name
        :type Name: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Id: Node ID
        :type Id: int
        """
        self._TaskId = None
        self._Name = None
        self._ProjectId = None
        self._Id = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Name(self):
        """Node name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Id(self):
        """Node ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Name = params.get("Name")
        self._ProjectId = params.get("ProjectId")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckIntegrationNodeNameExistsResponse(AbstractModel):
    """CheckIntegrationNodeNameExists response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Return true means it exists, return false means it does not exist
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Return true means it exists, return false means it does not exist
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CheckIntegrationTaskNameExistsRequest(AbstractModel):
    """CheckIntegrationTaskNameExists request structure.

    """

    def __init__(self):
        r"""
        :param _TaskName: Task Name
        :type TaskName: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _SyncType: Synchronization Type 1. Single Table Synchronization, 2. Solution
        :type SyncType: int
        """
        self._TaskName = None
        self._ProjectId = None
        self._TaskId = None
        self._SyncType = None

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def SyncType(self):
        """Synchronization Type 1. Single Table Synchronization, 2. Solution
        :rtype: int
        """
        return self._SyncType

    @SyncType.setter
    def SyncType(self, SyncType):
        self._SyncType = SyncType


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._SyncType = params.get("SyncType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckIntegrationTaskNameExistsResponse(AbstractModel):
    """CheckIntegrationTaskNameExists response structure.

    """

    def __init__(self):
        r"""
        :param _Data: true indicates it exists, false indicates it does not exist
        :type Data: bool
        :param _ExistsType: Task Name Duplication Type (0: Not duplicated, 1: Duplicated in development state, 2: Duplicated in production state)
        :type ExistsType: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._ExistsType = None
        self._RequestId = None

    @property
    def Data(self):
        """true indicates it exists, false indicates it does not exist
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def ExistsType(self):
        """Task Name Duplication Type (0: Not duplicated, 1: Duplicated in development state, 2: Duplicated in production state)
        :rtype: int
        """
        return self._ExistsType

    @ExistsType.setter
    def ExistsType(self, ExistsType):
        self._ExistsType = ExistsType

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._ExistsType = params.get("ExistsType")
        self._RequestId = params.get("RequestId")


class CheckTaskNameExistRequest(AbstractModel):
    """CheckTaskNameExist request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID/Workspace ID.
        :type ProjectId: str
        :param _TypeId: Task Type (consistent with scheduling parameters).
        :type TypeId: int
        :param _TaskName: Task Name.
        :type TaskName: str
        """
        self._ProjectId = None
        self._TypeId = None
        self._TaskName = None

    @property
    def ProjectId(self):
        """Project ID/Workspace ID.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TypeId(self):
        """Task Type (consistent with scheduling parameters).
        :rtype: int
        """
        return self._TypeId

    @TypeId.setter
    def TypeId(self, TypeId):
        self._TypeId = TypeId

    @property
    def TaskName(self):
        """Task Name.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TypeId = params.get("TypeId")
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckTaskNameExistResponse(AbstractModel):
    """CheckTaskNameExist response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CollectionFolderOpsDto(AbstractModel):
    """Folder List

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total number of pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Task InformationNote: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of FolderOpsDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total number of pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Task InformationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FolderOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = FolderOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CollectionInstanceOpsDto(AbstractModel):
    """Instance List Structure

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Instance InformationNote: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of InstanceOpsDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Current Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Quantity per page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Instance InformationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnAggregationLineage(AbstractModel):
    """Column Lineage Aggregation Information

    """

    def __init__(self):
        r"""
        :param _TableName: Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _ParentId: Parent Node ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentId: str
        :param _MetastoreType: Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _ParentSet: String Type Parent Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentSet: str
        :param _ChildSet: String Type Child Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChildSet: str
        :param _ColumnInfoSet: Column Information Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnInfoSet: list of SimpleColumnInfo
        """
        self._TableName = None
        self._ParentId = None
        self._MetastoreType = None
        self._ParentSet = None
        self._ChildSet = None
        self._ColumnInfoSet = None

    @property
    def TableName(self):
        """Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def ParentId(self):
        """Parent Node ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId

    @property
    def MetastoreType(self):
        """Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def ParentSet(self):
        """String Type Parent Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentSet

    @ParentSet.setter
    def ParentSet(self, ParentSet):
        self._ParentSet = ParentSet

    @property
    def ChildSet(self):
        """String Type Child Node Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChildSet

    @ChildSet.setter
    def ChildSet(self, ChildSet):
        self._ChildSet = ChildSet

    @property
    def ColumnInfoSet(self):
        """Column Information Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SimpleColumnInfo
        """
        return self._ColumnInfoSet

    @ColumnInfoSet.setter
    def ColumnInfoSet(self, ColumnInfoSet):
        self._ColumnInfoSet = ColumnInfoSet


    def _deserialize(self, params):
        self._TableName = params.get("TableName")
        self._ParentId = params.get("ParentId")
        self._MetastoreType = params.get("MetastoreType")
        self._ParentSet = params.get("ParentSet")
        self._ChildSet = params.get("ChildSet")
        if params.get("ColumnInfoSet") is not None:
            self._ColumnInfoSet = []
            for item in params.get("ColumnInfoSet"):
                obj = SimpleColumnInfo()
                obj._deserialize(item)
                self._ColumnInfoSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnBasicInfo(AbstractModel):
    """Table Metadata Information

    """

    def __init__(self):
        r"""
        :param _TableId: Table's Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _DatasourceId: Data Source Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _ColumnName: Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :type ColumnName: str
        :param _DataType: Data Type, such as string/int etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataType: str
        :param _ColumnType: Field Type, such as varchar(32)/int(10) etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnType: str
        :param _ColumnDefault: Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnDefault: str
        :param _ColumnKey: Index Type, such as PRI/MUL/PARTITION etc., For normal fields, this value is an empty string
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnKey: str
        :param _ColumnPosition: Field Order Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnPosition: int
        :param _ColumnComment: Field Comment
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnComment: str
        :param _StoreType: Data TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type StoreType: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectName: Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _ProjectDisplayName: Project Name in Chinese
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectDisplayName: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _Scale: Precision
Note: This field may return null, indicating that no valid value can be obtained.
        :type Scale: int
        """
        self._TableId = None
        self._DatasourceId = None
        self._DatasourceName = None
        self._DatabaseId = None
        self._DatabaseName = None
        self._TableName = None
        self._ColumnName = None
        self._DataType = None
        self._ColumnType = None
        self._ColumnDefault = None
        self._ColumnKey = None
        self._ColumnPosition = None
        self._ColumnComment = None
        self._StoreType = None
        self._ProjectId = None
        self._ProjectName = None
        self._ProjectDisplayName = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Scale = None

    @property
    def TableId(self):
        """Table's Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def DatasourceId(self):
        """Data Source Globally Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def ColumnName(self):
        """Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnName

    @ColumnName.setter
    def ColumnName(self, ColumnName):
        self._ColumnName = ColumnName

    @property
    def DataType(self):
        """Data Type, such as string/int etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataType

    @DataType.setter
    def DataType(self, DataType):
        self._DataType = DataType

    @property
    def ColumnType(self):
        """Field Type, such as varchar(32)/int(10) etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnType

    @ColumnType.setter
    def ColumnType(self, ColumnType):
        self._ColumnType = ColumnType

    @property
    def ColumnDefault(self):
        """Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnDefault

    @ColumnDefault.setter
    def ColumnDefault(self, ColumnDefault):
        self._ColumnDefault = ColumnDefault

    @property
    def ColumnKey(self):
        """Index Type, such as PRI/MUL/PARTITION etc., For normal fields, this value is an empty string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnKey

    @ColumnKey.setter
    def ColumnKey(self, ColumnKey):
        self._ColumnKey = ColumnKey

    @property
    def ColumnPosition(self):
        """Field Order Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ColumnPosition

    @ColumnPosition.setter
    def ColumnPosition(self, ColumnPosition):
        self._ColumnPosition = ColumnPosition

    @property
    def ColumnComment(self):
        """Field Comment
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnComment

    @ColumnComment.setter
    def ColumnComment(self, ColumnComment):
        self._ColumnComment = ColumnComment

    @property
    def StoreType(self):
        """Data TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StoreType

    @StoreType.setter
    def StoreType(self, StoreType):
        self._StoreType = StoreType

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectName(self):
        """Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def ProjectDisplayName(self):
        """Project Name in Chinese
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectDisplayName

    @ProjectDisplayName.setter
    def ProjectDisplayName(self, ProjectDisplayName):
        self._ProjectDisplayName = ProjectDisplayName

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Scale(self):
        """Precision
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Scale

    @Scale.setter
    def Scale(self, Scale):
        self._Scale = Scale


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceName = params.get("DatasourceName")
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._TableName = params.get("TableName")
        self._ColumnName = params.get("ColumnName")
        self._DataType = params.get("DataType")
        self._ColumnType = params.get("ColumnType")
        self._ColumnDefault = params.get("ColumnDefault")
        self._ColumnKey = params.get("ColumnKey")
        self._ColumnPosition = params.get("ColumnPosition")
        self._ColumnComment = params.get("ColumnComment")
        self._StoreType = params.get("StoreType")
        self._ProjectId = params.get("ProjectId")
        self._ProjectName = params.get("ProjectName")
        self._ProjectDisplayName = params.get("ProjectDisplayName")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Scale = params.get("Scale")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnData(AbstractModel):
    """ColumnItem

    """

    def __init__(self):
        r"""
        :param _EventName: ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventName: str
        :param _EventProjectName: ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventProjectName: str
        :param _Type: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _CurRunDate: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _TaskId: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _State: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type State: str
        :param _EventType: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventType: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        """
        self._EventName = None
        self._EventProjectName = None
        self._Type = None
        self._CurRunDate = None
        self._TaskId = None
        self._State = None
        self._EventType = None
        self._TaskName = None
        self._ProjectName = None
        self._ProjectId = None

    @property
    def EventName(self):
        """ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def EventProjectName(self):
        """ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventProjectName

    @EventProjectName.setter
    def EventProjectName(self, EventProjectName):
        self._EventProjectName = EventProjectName

    @property
    def Type(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def CurRunDate(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def TaskId(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def State(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def EventType(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._EventName = params.get("EventName")
        self._EventProjectName = params.get("EventProjectName")
        self._Type = params.get("Type")
        self._CurRunDate = params.get("CurRunDate")
        self._TaskId = params.get("TaskId")
        self._State = params.get("State")
        self._EventType = params.get("EventType")
        self._TaskName = params.get("TaskName")
        self._ProjectName = params.get("ProjectName")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnItem(AbstractModel):
    """ColumnItem

    """

    def __init__(self):
        r"""
        :param _ColumnName: ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnName: str
        :param _ColumnRef: ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnRef: str
        """
        self._ColumnName = None
        self._ColumnRef = None

    @property
    def ColumnName(self):
        """ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnName

    @ColumnName.setter
    def ColumnName(self, ColumnName):
        self._ColumnName = ColumnName

    @property
    def ColumnRef(self):
        """ColumnName1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnRef

    @ColumnRef.setter
    def ColumnRef(self, ColumnRef):
        self._ColumnRef = ColumnRef


    def _deserialize(self, params):
        self._ColumnName = params.get("ColumnName")
        self._ColumnRef = params.get("ColumnRef")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnLineageInfo(AbstractModel):
    """Lineage Field Information

    """

    def __init__(self):
        r"""
        :param _Id: Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _ColumnName: Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :type ColumnName: str
        :param _ColumnNameCn: Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnNameCn: str
        :param _ColumnType: Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type ColumnType: str
        :param _RelationParams: Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type RelationParams: str
        :param _Params: ParameterNote: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        :param _ParentId: Parent ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentId: str
        :param _MetastoreType: Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _MetastoreTypeName: Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreTypeName: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _QualifiedName: Full Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualifiedName: str
        :param _DownStreamCount: Number of Downstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :type DownStreamCount: int
        :param _UpStreamCount: Number of Upstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpStreamCount: int
        :param _Description: DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _PrefixPath: Path Information Starting from the Central Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type PrefixPath: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _Tasks: Task ID list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of str
        :param _ParentSet: Parent Node List String
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentSet: str
        :param _ChildSet: Child Node List String
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChildSet: str
        :param _ExtParams: Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtParams: list of LineageParamRecord
        :param _TableId: Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        """
        self._Id = None
        self._DatasourceId = None
        self._ColumnName = None
        self._ColumnNameCn = None
        self._ColumnType = None
        self._RelationParams = None
        self._Params = None
        self._ParentId = None
        self._MetastoreType = None
        self._MetastoreTypeName = None
        self._TableName = None
        self._QualifiedName = None
        self._DownStreamCount = None
        self._UpStreamCount = None
        self._Description = None
        self._PrefixPath = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Tasks = None
        self._ParentSet = None
        self._ChildSet = None
        self._ExtParams = None
        self._TableId = None

    @property
    def Id(self):
        """Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ColumnName(self):
        """Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnName

    @ColumnName.setter
    def ColumnName(self, ColumnName):
        self._ColumnName = ColumnName

    @property
    def ColumnNameCn(self):
        """Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnNameCn

    @ColumnNameCn.setter
    def ColumnNameCn(self, ColumnNameCn):
        self._ColumnNameCn = ColumnNameCn

    @property
    def ColumnType(self):
        """Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnType

    @ColumnType.setter
    def ColumnType(self, ColumnType):
        self._ColumnType = ColumnType

    @property
    def RelationParams(self):
        """Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RelationParams

    @RelationParams.setter
    def RelationParams(self, RelationParams):
        self._RelationParams = RelationParams

    @property
    def Params(self):
        """ParameterNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def ParentId(self):
        """Parent ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId

    @property
    def MetastoreType(self):
        """Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def MetastoreTypeName(self):
        """Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreTypeName

    @MetastoreTypeName.setter
    def MetastoreTypeName(self, MetastoreTypeName):
        self._MetastoreTypeName = MetastoreTypeName

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def QualifiedName(self):
        """Full Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._QualifiedName

    @QualifiedName.setter
    def QualifiedName(self, QualifiedName):
        self._QualifiedName = QualifiedName

    @property
    def DownStreamCount(self):
        """Number of Downstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DownStreamCount

    @DownStreamCount.setter
    def DownStreamCount(self, DownStreamCount):
        self._DownStreamCount = DownStreamCount

    @property
    def UpStreamCount(self):
        """Number of Upstream Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpStreamCount

    @UpStreamCount.setter
    def UpStreamCount(self, UpStreamCount):
        self._UpStreamCount = UpStreamCount

    @property
    def Description(self):
        """DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PrefixPath(self):
        """Path Information Starting from the Central Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PrefixPath

    @PrefixPath.setter
    def PrefixPath(self, PrefixPath):
        self._PrefixPath = PrefixPath

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Tasks(self):
        """Task ID list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def ParentSet(self):
        """Parent Node List String
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentSet

    @ParentSet.setter
    def ParentSet(self, ParentSet):
        self._ParentSet = ParentSet

    @property
    def ChildSet(self):
        """Child Node List String
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChildSet

    @ChildSet.setter
    def ChildSet(self, ChildSet):
        self._ChildSet = ChildSet

    @property
    def ExtParams(self):
        """Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of LineageParamRecord
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def TableId(self):
        """Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._DatasourceId = params.get("DatasourceId")
        self._ColumnName = params.get("ColumnName")
        self._ColumnNameCn = params.get("ColumnNameCn")
        self._ColumnType = params.get("ColumnType")
        self._RelationParams = params.get("RelationParams")
        self._Params = params.get("Params")
        self._ParentId = params.get("ParentId")
        self._MetastoreType = params.get("MetastoreType")
        self._MetastoreTypeName = params.get("MetastoreTypeName")
        self._TableName = params.get("TableName")
        self._QualifiedName = params.get("QualifiedName")
        self._DownStreamCount = params.get("DownStreamCount")
        self._UpStreamCount = params.get("UpStreamCount")
        self._Description = params.get("Description")
        self._PrefixPath = params.get("PrefixPath")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Tasks = params.get("Tasks")
        self._ParentSet = params.get("ParentSet")
        self._ChildSet = params.get("ChildSet")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = LineageParamRecord()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._TableId = params.get("TableId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ColumnMeta(AbstractModel):
    """Column Metadata

    """

    def __init__(self):
        r"""
        :param _NameEn: Field English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type NameEn: str
        :param _NameCn: Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type NameCn: str
        :param _Type: Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Description: Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Position: Field Sequence Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type Position: int
        :param _IsPartition: Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsPartition: bool
        :param _Name: Field nameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _ColumnFamiliesFieldSet: HBase Column Family Attribute Set
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnFamiliesFieldSet: list of Pair
        :param _DictionaryId: Corresponding Code Table Dictionary ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DictionaryId: str
        :param _DictionaryName: Corresponding Code Table Dictionary Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DictionaryName: str
        :param _LevelName: Security Level: Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type LevelName: str
        :param _LevelRank: Security Level: Value Range 1-10
Note: This field may return null, indicating that no valid value can be obtained.
        :type LevelRank: int
        """
        self._NameEn = None
        self._NameCn = None
        self._Type = None
        self._Description = None
        self._Position = None
        self._IsPartition = None
        self._Name = None
        self._ColumnFamiliesFieldSet = None
        self._DictionaryId = None
        self._DictionaryName = None
        self._LevelName = None
        self._LevelRank = None

    @property
    def NameEn(self):
        """Field English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NameEn

    @NameEn.setter
    def NameEn(self, NameEn):
        self._NameEn = NameEn

    @property
    def NameCn(self):
        """Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NameCn

    @NameCn.setter
    def NameCn(self, NameCn):
        self._NameCn = NameCn

    @property
    def Type(self):
        """Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Description(self):
        """Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Position(self):
        """Field Sequence Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Position

    @Position.setter
    def Position(self, Position):
        self._Position = Position

    @property
    def IsPartition(self):
        """Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IsPartition

    @IsPartition.setter
    def IsPartition(self, IsPartition):
        self._IsPartition = IsPartition

    @property
    def Name(self):
        """Field nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ColumnFamiliesFieldSet(self):
        """HBase Column Family Attribute Set
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of Pair
        """
        return self._ColumnFamiliesFieldSet

    @ColumnFamiliesFieldSet.setter
    def ColumnFamiliesFieldSet(self, ColumnFamiliesFieldSet):
        self._ColumnFamiliesFieldSet = ColumnFamiliesFieldSet

    @property
    def DictionaryId(self):
        """Corresponding Code Table Dictionary ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DictionaryId

    @DictionaryId.setter
    def DictionaryId(self, DictionaryId):
        self._DictionaryId = DictionaryId

    @property
    def DictionaryName(self):
        """Corresponding Code Table Dictionary Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DictionaryName

    @DictionaryName.setter
    def DictionaryName(self, DictionaryName):
        self._DictionaryName = DictionaryName

    @property
    def LevelName(self):
        """Security Level: Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LevelName

    @LevelName.setter
    def LevelName(self, LevelName):
        self._LevelName = LevelName

    @property
    def LevelRank(self):
        """Security Level: Value Range 1-10
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LevelRank

    @LevelRank.setter
    def LevelRank(self, LevelRank):
        self._LevelRank = LevelRank


    def _deserialize(self, params):
        self._NameEn = params.get("NameEn")
        self._NameCn = params.get("NameCn")
        self._Type = params.get("Type")
        self._Description = params.get("Description")
        self._Position = params.get("Position")
        self._IsPartition = params.get("IsPartition")
        self._Name = params.get("Name")
        if params.get("ColumnFamiliesFieldSet") is not None:
            self._ColumnFamiliesFieldSet = []
            for item in params.get("ColumnFamiliesFieldSet"):
                obj = Pair()
                obj._deserialize(item)
                self._ColumnFamiliesFieldSet.append(obj)
        self._DictionaryId = params.get("DictionaryId")
        self._DictionaryName = params.get("DictionaryName")
        self._LevelName = params.get("LevelName")
        self._LevelRank = params.get("LevelRank")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommitIntegrationTaskRequest(AbstractModel):
    """CommitIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _CommitType: 0. Only submit, 1. Start immediately, 2. Stop online jobs, discard job state data, restart, 3. Pause online jobs, keep job state data, continue running, 4. Keep job state data, continue running
        :type CommitType: int
        :param _TaskType: Real-time task 201 Offline task 202 Default is real-time task
        :type TaskType: int
        :param _ExtConfig: Additional parameters
        :type ExtConfig: list of RecordField
        :param _VersionDesc: Submit version description
        :type VersionDesc: str
        :param _InstanceVersion: Submit version number
        :type InstanceVersion: int
        :param _EventDesc: Describe the type of front-end operation
        :type EventDesc: str
        """
        self._TaskId = None
        self._ProjectId = None
        self._CommitType = None
        self._TaskType = None
        self._ExtConfig = None
        self._VersionDesc = None
        self._InstanceVersion = None
        self._EventDesc = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CommitType(self):
        """0. Only submit, 1. Start immediately, 2. Stop online jobs, discard job state data, restart, 3. Pause online jobs, keep job state data, continue running, 4. Keep job state data, continue running
        :rtype: int
        """
        return self._CommitType

    @CommitType.setter
    def CommitType(self, CommitType):
        self._CommitType = CommitType

    @property
    def TaskType(self):
        """Real-time task 201 Offline task 202 Default is real-time task
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ExtConfig(self):
        """Additional parameters
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def VersionDesc(self):
        """Submit version description
        :rtype: str
        """
        return self._VersionDesc

    @VersionDesc.setter
    def VersionDesc(self, VersionDesc):
        self._VersionDesc = VersionDesc

    @property
    def InstanceVersion(self):
        """Submit version number
        :rtype: int
        """
        return self._InstanceVersion

    @InstanceVersion.setter
    def InstanceVersion(self, InstanceVersion):
        self._InstanceVersion = InstanceVersion

    @property
    def EventDesc(self):
        """Describe the type of front-end operation
        :rtype: str
        """
        return self._EventDesc

    @EventDesc.setter
    def EventDesc(self, EventDesc):
        self._EventDesc = EventDesc


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._CommitType = params.get("CommitType")
        self._TaskType = params.get("TaskType")
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        self._VersionDesc = params.get("VersionDesc")
        self._InstanceVersion = params.get("InstanceVersion")
        self._EventDesc = params.get("EventDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommitIntegrationTaskResponse(AbstractModel):
    """CommitIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CommitRuleGroupTaskRequest(AbstractModel):
    """CommitRuleGroupTask request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _TriggerType: Trigger Type 1. Manual Trigger 2. In-process Scheduling Trigger 3. Periodic Scheduling Trigger
        :type TriggerType: int
        :param _ExecRuleConfig: Rule Configuration List
        :type ExecRuleConfig: list of RuleConfig
        :param _ExecConfig: Execution configuration
        :type ExecConfig: :class:`tencentcloud.wedata.v20210820.models.RuleExecConfig`
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _EngineType: The execution engine that this rule runs. If this parameter is not passed, the default execution engine under this data source will be requested.
        :type EngineType: str
        """
        self._RuleGroupId = None
        self._TriggerType = None
        self._ExecRuleConfig = None
        self._ExecConfig = None
        self._ProjectId = None
        self._EngineType = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def TriggerType(self):
        """Trigger Type 1. Manual Trigger 2. In-process Scheduling Trigger 3. Periodic Scheduling Trigger
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def ExecRuleConfig(self):
        """Rule Configuration List
        :rtype: list of RuleConfig
        """
        return self._ExecRuleConfig

    @ExecRuleConfig.setter
    def ExecRuleConfig(self, ExecRuleConfig):
        self._ExecRuleConfig = ExecRuleConfig

    @property
    def ExecConfig(self):
        """Execution configuration
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecConfig`
        """
        return self._ExecConfig

    @ExecConfig.setter
    def ExecConfig(self, ExecConfig):
        self._ExecConfig = ExecConfig

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def EngineType(self):
        """The execution engine that this rule runs. If this parameter is not passed, the default execution engine under this data source will be requested.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._TriggerType = params.get("TriggerType")
        if params.get("ExecRuleConfig") is not None:
            self._ExecRuleConfig = []
            for item in params.get("ExecRuleConfig"):
                obj = RuleConfig()
                obj._deserialize(item)
                self._ExecRuleConfig.append(obj)
        if params.get("ExecConfig") is not None:
            self._ExecConfig = RuleExecConfig()
            self._ExecConfig._deserialize(params.get("ExecConfig"))
        self._ProjectId = params.get("ProjectId")
        self._EngineType = params.get("EngineType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommitRuleGroupTaskResponse(AbstractModel):
    """CommitRuleGroupTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecResult`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecResult`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupExecResult()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class CommonContent(AbstractModel):
    """Content Details

    """

    def __init__(self):
        r"""
        :param _Content: Detailed Content
Note: This field may return null, indicating that no valid value can be obtained.
        :type Content: str
        """
        self._Content = None

    @property
    def Content(self):
        """Detailed Content
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content


    def _deserialize(self, params):
        self._Content = params.get("Content")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommonId(AbstractModel):
    """ID Wrapper Object

    """

    def __init__(self):
        r"""
        :param _Id: ID Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """ID Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommonIdOpsDto(AbstractModel):
    """Return Command ID

    """

    def __init__(self):
        r"""
        :param _Id: Returns the supplemental plan id
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """Returns the supplemental plan id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompareResult(AbstractModel):
    """Quality Check Comparison Results

    """

    def __init__(self):
        r"""
        :param _Items: Comparison Result Item List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of CompareResultItem
        :param _TotalRows: Total Number of Rows Detected
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalRows: int
        :param _PassRows: Number of Rows Passed
Note: This field may return null, indicating that no valid value can be obtained.
        :type PassRows: int
        :param _TriggerRows: Number of Rows Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerRows: int
        """
        self._Items = None
        self._TotalRows = None
        self._PassRows = None
        self._TriggerRows = None

    @property
    def Items(self):
        """Comparison Result Item List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of CompareResultItem
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def TotalRows(self):
        """Total Number of Rows Detected
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalRows

    @TotalRows.setter
    def TotalRows(self, TotalRows):
        self._TotalRows = TotalRows

    @property
    def PassRows(self):
        """Number of Rows Passed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PassRows

    @PassRows.setter
    def PassRows(self, PassRows):
        self._PassRows = PassRows

    @property
    def TriggerRows(self):
        """Number of Rows Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TriggerRows

    @TriggerRows.setter
    def TriggerRows(self, TriggerRows):
        self._TriggerRows = TriggerRows


    def _deserialize(self, params):
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = CompareResultItem()
                obj._deserialize(item)
                self._Items.append(obj)
        self._TotalRows = params.get("TotalRows")
        self._PassRows = params.get("PassRows")
        self._TriggerRows = params.get("TriggerRows")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompareResultItem(AbstractModel):
    """Comparison Result Item

    """

    def __init__(self):
        r"""
        :param _FixResult: Comparison Result, 1 is true, 2 is false
Note: This field may return null, indicating that no valid value can be obtained.
        :type FixResult: int
        :param _ResultValue: Quality SQL Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResultValue: str
        :param _Values: Threshold List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Values: list of ThresholdValue
        :param _Operator: Comparison Operation Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: str
        :param _CompareType: Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompareType: int
        :param _ValueComputeType: Value Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ValueComputeType: int
        """
        self._FixResult = None
        self._ResultValue = None
        self._Values = None
        self._Operator = None
        self._CompareType = None
        self._ValueComputeType = None

    @property
    def FixResult(self):
        """Comparison Result, 1 is true, 2 is false
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FixResult

    @FixResult.setter
    def FixResult(self, FixResult):
        self._FixResult = FixResult

    @property
    def ResultValue(self):
        """Quality SQL Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResultValue

    @ResultValue.setter
    def ResultValue(self, ResultValue):
        self._ResultValue = ResultValue

    @property
    def Values(self):
        """Threshold List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ThresholdValue
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Operator(self):
        """Comparison Operation Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def CompareType(self):
        """Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CompareType

    @CompareType.setter
    def CompareType(self, CompareType):
        self._CompareType = CompareType

    @property
    def ValueComputeType(self):
        """Value Comparison Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ValueComputeType

    @ValueComputeType.setter
    def ValueComputeType(self, ValueComputeType):
        self._ValueComputeType = ValueComputeType


    def _deserialize(self, params):
        self._FixResult = params.get("FixResult")
        self._ResultValue = params.get("ResultValue")
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = ThresholdValue()
                obj._deserialize(item)
                self._Values.append(obj)
        self._Operator = params.get("Operator")
        self._CompareType = params.get("CompareType")
        self._ValueComputeType = params.get("ValueComputeType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompareRule(AbstractModel):
    """Comparison Rules

    """

    def __init__(self):
        r"""
        :param _Items: Comparison Criteria List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of CompareRuleItem
        :param _CycleStep: Default cycle of the periodic template, Unit: seconds
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleStep: int
        :param _ComputeExpression: o represents OR, a represents AND, numbers represent items' indices
Note: This field may return null, indicating that no valid value can be obtained.
        :type ComputeExpression: str
        """
        self._Items = None
        self._CycleStep = None
        self._ComputeExpression = None

    @property
    def Items(self):
        """Comparison Criteria List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of CompareRuleItem
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def CycleStep(self):
        """Default cycle of the periodic template, Unit: seconds
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def ComputeExpression(self):
        """o represents OR, a represents AND, numbers represent items' indices
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ComputeExpression

    @ComputeExpression.setter
    def ComputeExpression(self, ComputeExpression):
        self._ComputeExpression = ComputeExpression


    def _deserialize(self, params):
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = CompareRuleItem()
                obj._deserialize(item)
                self._Items.append(obj)
        self._CycleStep = params.get("CycleStep")
        self._ComputeExpression = params.get("ComputeExpression")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompareRuleItem(AbstractModel):
    """Comparison Criterion

    """

    def __init__(self):
        r"""
        :param _CompareType: Comparison Type 1. Fixed value  2. Fluctuation Value  3. Numeric Range Comparison  4. Enumeration Range Comparison  5. No Comparison
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompareType: int
        :param _Operator: Comparison Operation Type
<  <=  ==  =>  > !=
IRLCRO: Within the interval (left closed, right open)
IRLORC: Within the interval (left open, right closed)
IRLCRC: Within the interval (left closed, right closed)
IRLORO: Within the interval (left open, right open)
NRLCRO: Not within the range (left-closed, right-open)
NRLORC: Not within the range (left-open, right-closed)
NRLCRC: Not within the range (left-closed, right-closed)
NRLORO: Not within the range (left-open, right-open)
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: str
        :param _ValueComputeType: Quality statistical value types 1. Absolute Value 2. Increase 3. Decline 4. _C includes 5. N_C does not include
Note: This field may return null, indicating that no valid value can be obtained.
        :type ValueComputeType: int
        :param _ValueList: Comparison threshold list
Note: This field may return null, indicating that no valid value can be obtained.
        :type ValueList: list of ThresholdValue
        """
        self._CompareType = None
        self._Operator = None
        self._ValueComputeType = None
        self._ValueList = None

    @property
    def CompareType(self):
        """Comparison Type 1. Fixed value  2. Fluctuation Value  3. Numeric Range Comparison  4. Enumeration Range Comparison  5. No Comparison
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CompareType

    @CompareType.setter
    def CompareType(self, CompareType):
        self._CompareType = CompareType

    @property
    def Operator(self):
        """Comparison Operation Type
<  <=  ==  =>  > !=
IRLCRO: Within the interval (left closed, right open)
IRLORC: Within the interval (left open, right closed)
IRLCRC: Within the interval (left closed, right closed)
IRLORO: Within the interval (left open, right open)
NRLCRO: Not within the range (left-closed, right-open)
NRLORC: Not within the range (left-open, right-closed)
NRLCRC: Not within the range (left-closed, right-closed)
NRLORO: Not within the range (left-open, right-open)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def ValueComputeType(self):
        """Quality statistical value types 1. Absolute Value 2. Increase 3. Decline 4. _C includes 5. N_C does not include
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ValueComputeType

    @ValueComputeType.setter
    def ValueComputeType(self, ValueComputeType):
        self._ValueComputeType = ValueComputeType

    @property
    def ValueList(self):
        """Comparison threshold list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ThresholdValue
        """
        return self._ValueList

    @ValueList.setter
    def ValueList(self, ValueList):
        self._ValueList = ValueList


    def _deserialize(self, params):
        self._CompareType = params.get("CompareType")
        self._Operator = params.get("Operator")
        self._ValueComputeType = params.get("ValueComputeType")
        if params.get("ValueList") is not None:
            self._ValueList = []
            for item in params.get("ValueList"):
                obj = ThresholdValue()
                obj._deserialize(item)
                self._ValueList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Content(AbstractModel):
    """Content

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _Diagnose: Diagnosis
Note: This field may return null, indicating that no valid value can be obtained.
        :type Diagnose: str
        :param _Reason: Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :type Reason: str
        :param _Operation: OperationNote: This field may return null, indicating that no valid value can be obtained.
        :type Operation: str
        :param _Url: Link
Note: This field may return null, indicating that no valid value can be obtained.
        :type Url: str
        """
        self._TaskId = None
        self._TaskName = None
        self._Diagnose = None
        self._Reason = None
        self._Operation = None
        self._Url = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Diagnose(self):
        """Diagnosis
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Diagnose

    @Diagnose.setter
    def Diagnose(self, Diagnose):
        self._Diagnose = Diagnose

    @property
    def Reason(self):
        """Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def Operation(self):
        """OperationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Operation

    @Operation.setter
    def Operation(self, Operation):
        self._Operation = Operation

    @property
    def Url(self):
        """Link
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._Diagnose = params.get("Diagnose")
        self._Reason = params.get("Reason")
        self._Operation = params.get("Operation")
        self._Url = params.get("Url")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CountOpsInstanceStateRequest(AbstractModel):
    """CountOpsInstanceState request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CountOpsInstanceStateResponse(AbstractModel):
    """CountOpsInstanceState response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task Corresponding Instance Status Statistics
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TaskInstanceCountDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task Corresponding Instance Status Statistics
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskInstanceCountDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = TaskInstanceCountDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class CreateCustomFunctionRequest(AbstractModel):
    """CreateCustomFunction request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Enumerated values: HIVE, SPARK, DLC
        :type Type: str
        :param _Kind: Enumerated values: ANALYSIS (function), ENCRYPTION (encryption function), AGGREGATE (aggregate function), LOGIC (logic function), DATE_AND_TIME (date and time function), MATH (math function), CONVERSION (conversion function), STRING (string function), IP_AND_DOMAIN (IP and domain function), WINDOW (window function), OTHER (other function)
        :type Kind: str
        :param _Name: Function Name
        :type Name: str
        :param _ClusterIdentifier: Cluster Instance Engine ID
        :type ClusterIdentifier: str
        :param _DbName: Database name
        :type DbName: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Type = None
        self._Kind = None
        self._Name = None
        self._ClusterIdentifier = None
        self._DbName = None
        self._ProjectId = None

    @property
    def Type(self):
        """Enumerated values: HIVE, SPARK, DLC
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Kind(self):
        """Enumerated values: ANALYSIS (function), ENCRYPTION (encryption function), AGGREGATE (aggregate function), LOGIC (logic function), DATE_AND_TIME (date and time function), MATH (math function), CONVERSION (conversion function), STRING (string function), IP_AND_DOMAIN (IP and domain function), WINDOW (window function), OTHER (other function)
        :rtype: str
        """
        return self._Kind

    @Kind.setter
    def Kind(self, Kind):
        self._Kind = Kind

    @property
    def Name(self):
        """Function Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ClusterIdentifier(self):
        """Cluster Instance Engine ID
        :rtype: str
        """
        return self._ClusterIdentifier

    @ClusterIdentifier.setter
    def ClusterIdentifier(self, ClusterIdentifier):
        self._ClusterIdentifier = ClusterIdentifier

    @property
    def DbName(self):
        """Database name
        :rtype: str
        """
        return self._DbName

    @DbName.setter
    def DbName(self, DbName):
        self._DbName = DbName

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Kind = params.get("Kind")
        self._Name = params.get("Name")
        self._ClusterIdentifier = params.get("ClusterIdentifier")
        self._DbName = params.get("DbName")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateCustomFunctionResponse(AbstractModel):
    """CreateCustomFunction response structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type FunctionId: str
        :param _ErrorMessage: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FunctionId = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def FunctionId(self):
        """Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ErrorMessage(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class CreateDataSourceRequest(AbstractModel):
    """CreateDataSource request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Data Source Name, cannot be empty under the same SpaceName
        :type Name: str
        :param _Category: Data Source Category: Binding Engine, Binding Database
        :type Category: str
        :param _Type: Data Source Type: enumerated values
        :type Type: str
        :param _OwnerProjectId: Project ID
        :type OwnerProjectId: str
        :param _OwnerProjectName: Project Name
        :type OwnerProjectName: str
        :param _OwnerProjectIdent: Project Name (Chinese)
        :type OwnerProjectIdent: str
        :param _BizParams: Configuration Information Extension of Business Data Source
        :type BizParams: str
        :param _Params: Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
        :type Params: str
        :param _Description: Data source description information
        :type Description: str
        :param _Display: Data Source Display Name, for visual inspection
        :type Display: str
        :param _DatabaseName: If the data source list is bound to a database, then it is the database name
        :type DatabaseName: str
        :param _Instance: Instance ID of the data source engine, e.g., CDB Instance ID
        :type Instance: str
        :param _Status: Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
        :type Status: int
        :param _ClusterId: Name of the business space to which the data source belongs
        :type ClusterId: str
        :param _Collect: Collection Status
        :type Collect: str
        :param _COSBucket: COS Bucket Information
        :type COSBucket: str
        :param _COSRegion: cos region
        :type COSRegion: str
        :param _ConnectResult: Connection Test Result
        :type ConnectResult: str
        :param _DevelopmentParams: Development Environment Data Source Configuration
        :type DevelopmentParams: str
        """
        self._Name = None
        self._Category = None
        self._Type = None
        self._OwnerProjectId = None
        self._OwnerProjectName = None
        self._OwnerProjectIdent = None
        self._BizParams = None
        self._Params = None
        self._Description = None
        self._Display = None
        self._DatabaseName = None
        self._Instance = None
        self._Status = None
        self._ClusterId = None
        self._Collect = None
        self._COSBucket = None
        self._COSRegion = None
        self._ConnectResult = None
        self._DevelopmentParams = None

    @property
    def Name(self):
        """Data Source Name, cannot be empty under the same SpaceName
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Category(self):
        """Data Source Category: Binding Engine, Binding Database
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Type(self):
        """Data Source Type: enumerated values
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def OwnerProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._OwnerProjectId

    @OwnerProjectId.setter
    def OwnerProjectId(self, OwnerProjectId):
        self._OwnerProjectId = OwnerProjectId

    @property
    def OwnerProjectName(self):
        """Project Name
        :rtype: str
        """
        return self._OwnerProjectName

    @OwnerProjectName.setter
    def OwnerProjectName(self, OwnerProjectName):
        self._OwnerProjectName = OwnerProjectName

    @property
    def OwnerProjectIdent(self):
        """Project Name (Chinese)
        :rtype: str
        """
        return self._OwnerProjectIdent

    @OwnerProjectIdent.setter
    def OwnerProjectIdent(self, OwnerProjectIdent):
        self._OwnerProjectIdent = OwnerProjectIdent

    @property
    def BizParams(self):
        """Configuration Information Extension of Business Data Source
        :rtype: str
        """
        return self._BizParams

    @BizParams.setter
    def BizParams(self, BizParams):
        self._BizParams = BizParams

    @property
    def Params(self):
        """Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def Description(self):
        """Data source description information
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Display(self):
        """Data Source Display Name, for visual inspection
        :rtype: str
        """
        return self._Display

    @Display.setter
    def Display(self, Display):
        self._Display = Display

    @property
    def DatabaseName(self):
        """If the data source list is bound to a database, then it is the database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def Instance(self):
        """Instance ID of the data source engine, e.g., CDB Instance ID
        :rtype: str
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Status(self):
        """Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ClusterId(self):
        """Name of the business space to which the data source belongs
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Collect(self):
        """Collection Status
        :rtype: str
        """
        return self._Collect

    @Collect.setter
    def Collect(self, Collect):
        self._Collect = Collect

    @property
    def COSBucket(self):
        """COS Bucket Information
        :rtype: str
        """
        return self._COSBucket

    @COSBucket.setter
    def COSBucket(self, COSBucket):
        self._COSBucket = COSBucket

    @property
    def COSRegion(self):
        """cos region
        :rtype: str
        """
        return self._COSRegion

    @COSRegion.setter
    def COSRegion(self, COSRegion):
        self._COSRegion = COSRegion

    @property
    def ConnectResult(self):
        """Connection Test Result
        :rtype: str
        """
        return self._ConnectResult

    @ConnectResult.setter
    def ConnectResult(self, ConnectResult):
        self._ConnectResult = ConnectResult

    @property
    def DevelopmentParams(self):
        """Development Environment Data Source Configuration
        :rtype: str
        """
        return self._DevelopmentParams

    @DevelopmentParams.setter
    def DevelopmentParams(self, DevelopmentParams):
        self._DevelopmentParams = DevelopmentParams


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Category = params.get("Category")
        self._Type = params.get("Type")
        self._OwnerProjectId = params.get("OwnerProjectId")
        self._OwnerProjectName = params.get("OwnerProjectName")
        self._OwnerProjectIdent = params.get("OwnerProjectIdent")
        self._BizParams = params.get("BizParams")
        self._Params = params.get("Params")
        self._Description = params.get("Description")
        self._Display = params.get("Display")
        self._DatabaseName = params.get("DatabaseName")
        self._Instance = params.get("Instance")
        self._Status = params.get("Status")
        self._ClusterId = params.get("ClusterId")
        self._Collect = params.get("Collect")
        self._COSBucket = params.get("COSBucket")
        self._COSRegion = params.get("COSRegion")
        self._ConnectResult = params.get("ConnectResult")
        self._DevelopmentParams = params.get("DevelopmentParams")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDataSourceResponse(AbstractModel):
    """CreateDataSource response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Primary Key ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Primary Key ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateDsFolderRequest(AbstractModel):
    """CreateDsFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderName: Folder Name
        :type FolderName: str
        :param _ParentsFolderId: Parent Folder ID
        :type ParentsFolderId: str
        """
        self._ProjectId = None
        self._FolderName = None
        self._ParentsFolderId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderName(self):
        """Folder Name
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def ParentsFolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderName = params.get("FolderName")
        self._ParentsFolderId = params.get("ParentsFolderId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDsFolderResponse(AbstractModel):
    """CreateDsFolder response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Folder ID, null if creation fails
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Folder ID, null if creation fails
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateHiveTableByDDLRequest(AbstractModel):
    """CreateHiveTableByDDL request structure.

    """

    def __init__(self):
        r"""
        :param _DatasourceId: Data Source ID
        :type DatasourceId: str
        :param _Database: Database
        :type Database: str
        :param _DDLSql: Create Hive Table DDL
        :type DDLSql: str
        :param _Privilege: Table permissions, default is 0: Project share; 1: Individual and administrator only
        :type Privilege: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Type: Target Table Type (HIVE or GBASE)
        :type Type: str
        :param _Incharge: Person in Charge
        :type Incharge: str
        :param _SchemaName: Schema Name
        :type SchemaName: str
        """
        self._DatasourceId = None
        self._Database = None
        self._DDLSql = None
        self._Privilege = None
        self._ProjectId = None
        self._Type = None
        self._Incharge = None
        self._SchemaName = None

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Database(self):
        """Database
        :rtype: str
        """
        return self._Database

    @Database.setter
    def Database(self, Database):
        self._Database = Database

    @property
    def DDLSql(self):
        """Create Hive Table DDL
        :rtype: str
        """
        return self._DDLSql

    @DDLSql.setter
    def DDLSql(self, DDLSql):
        self._DDLSql = DDLSql

    @property
    def Privilege(self):
        """Table permissions, default is 0: Project share; 1: Individual and administrator only
        :rtype: int
        """
        return self._Privilege

    @Privilege.setter
    def Privilege(self, Privilege):
        self._Privilege = Privilege

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Type(self):
        """Target Table Type (HIVE or GBASE)
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Incharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._Incharge

    @Incharge.setter
    def Incharge(self, Incharge):
        self._Incharge = Incharge

    @property
    def SchemaName(self):
        """Schema Name
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName


    def _deserialize(self, params):
        self._DatasourceId = params.get("DatasourceId")
        self._Database = params.get("Database")
        self._DDLSql = params.get("DDLSql")
        self._Privilege = params.get("Privilege")
        self._ProjectId = params.get("ProjectId")
        self._Type = params.get("Type")
        self._Incharge = params.get("Incharge")
        self._SchemaName = params.get("SchemaName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateHiveTableByDDLResponse(AbstractModel):
    """CreateHiveTableByDDL response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Table Name
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Table Name
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateHiveTableRequest(AbstractModel):
    """CreateHiveTable request structure.

    """

    def __init__(self):
        r"""
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _Database: Database name
        :type Database: str
        :param _DDLSql: Base64-encoded Table Creation Statement
        :type DDLSql: str
        :param _Privilege: Table permissions, default is 0: Project share; 1: Individual and administrator only
        :type Privilege: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Incharge: Person in Charge
        :type Incharge: str
        """
        self._DatasourceId = None
        self._Database = None
        self._DDLSql = None
        self._Privilege = None
        self._ProjectId = None
        self._Incharge = None

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Database(self):
        """Database name
        :rtype: str
        """
        return self._Database

    @Database.setter
    def Database(self, Database):
        self._Database = Database

    @property
    def DDLSql(self):
        """Base64-encoded Table Creation Statement
        :rtype: str
        """
        return self._DDLSql

    @DDLSql.setter
    def DDLSql(self, DDLSql):
        self._DDLSql = DDLSql

    @property
    def Privilege(self):
        """Table permissions, default is 0: Project share; 1: Individual and administrator only
        :rtype: int
        """
        return self._Privilege

    @Privilege.setter
    def Privilege(self, Privilege):
        self._Privilege = Privilege

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Incharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._Incharge

    @Incharge.setter
    def Incharge(self, Incharge):
        self._Incharge = Incharge


    def _deserialize(self, params):
        self._DatasourceId = params.get("DatasourceId")
        self._Database = params.get("Database")
        self._DDLSql = params.get("DDLSql")
        self._Privilege = params.get("Privilege")
        self._ProjectId = params.get("ProjectId")
        self._Incharge = params.get("Incharge")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateHiveTableResponse(AbstractModel):
    """CreateHiveTable response structure.

    """

    def __init__(self):
        r"""
        :param _IsSuccess: Whether table creation was successful
        :type IsSuccess: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsSuccess = None
        self._RequestId = None

    @property
    def IsSuccess(self):
        """Whether table creation was successful
        :rtype: bool
        """
        return self._IsSuccess

    @IsSuccess.setter
    def IsSuccess(self, IsSuccess):
        self._IsSuccess = IsSuccess

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsSuccess = params.get("IsSuccess")
        self._RequestId = params.get("RequestId")


class CreateIntegrationNodeRequest(AbstractModel):
    """CreateIntegrationNode request structure.

    """

    def __init__(self):
        r"""
        :param _NodeInfo: Integrated Node Information
        :type NodeInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type, 201 for real-time tasks, 202 for offline tasks
        :type TaskType: int
        """
        self._NodeInfo = None
        self._ProjectId = None
        self._TaskType = None

    @property
    def NodeInfo(self):
        """Integrated Node Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        """
        return self._NodeInfo

    @NodeInfo.setter
    def NodeInfo(self, NodeInfo):
        self._NodeInfo = NodeInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type, 201 for real-time tasks, 202 for offline tasks
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        if params.get("NodeInfo") is not None:
            self._NodeInfo = IntegrationNodeInfo()
            self._NodeInfo._deserialize(params.get("NodeInfo"))
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateIntegrationNodeResponse(AbstractModel):
    """CreateIntegrationNode response structure.

    """

    def __init__(self):
        r"""
        :param _Id: Node
        :type Id: str
        :param _TaskId: Current Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Id = None
        self._TaskId = None
        self._RequestId = None

    @property
    def Id(self):
        """Node
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TaskId(self):
        """Current Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateIntegrationTaskRequest(AbstractModel):
    """CreateIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskInfo: Task Information
        :type TaskInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskInfo = None
        self._ProjectId = None

    @property
    def TaskInfo(self):
        """Task Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        """
        return self._TaskInfo

    @TaskInfo.setter
    def TaskInfo(self, TaskInfo):
        self._TaskInfo = TaskInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("TaskInfo") is not None:
            self._TaskInfo = IntegrationTaskInfo()
            self._TaskInfo._deserialize(params.get("TaskInfo"))
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateIntegrationTaskResponse(AbstractModel):
    """CreateIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateMakeDatetimeInfo(AbstractModel):
    """Supplementary Plan Date Range

    """

    def __init__(self):
        r"""
        :param _StartDate: Start date
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartDate: str
        :param _EndDate: End date
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndDate: str
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        """
        self._StartDate = None
        self._EndDate = None
        self._StartTime = None
        self._EndTime = None

    @property
    def StartDate(self):
        """Start date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartDate

    @StartDate.setter
    def StartDate(self, StartDate):
        self._StartDate = StartDate

    @property
    def EndDate(self):
        """End date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartDate = params.get("StartDate")
        self._EndDate = params.get("EndDate")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateOfflineTaskRequest(AbstractModel):
    """CreateOfflineTask request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _CycleStep: Interval, optional, default is 1. Not null. Default is 1
        :type CycleStep: int
        :param _DelayTime: Delayed Execution Time, in minutes
        :type DelayTime: int
        :param _EndTime: Task End Data Time. Not Empty. Default to Current Time
        :type EndTime: str
        :param _Notes: Remarks
        :type Notes: str
        :param _StartTime: Current date
        :type StartTime: str
        :param _TaskName: Task Name
        :type TaskName: str
        :param _TypeId: Keep it consistent with the previous call to the scheduling interface 27
        :type TypeId: int
        :param _TaskAction: Time Specification, for monthly tasks specify days like 1,3, then enter 1,3. Not Empty. Default "" Monthly Task: For specific days like "1,3", specifying the end of the month cannot be combined with specific dates, can only be "L"
        :type TaskAction: str
        :param _TaskMode: Distinguish between canvas and form
        :type TaskMode: str
        """
        self._ProjectId = None
        self._CycleStep = None
        self._DelayTime = None
        self._EndTime = None
        self._Notes = None
        self._StartTime = None
        self._TaskName = None
        self._TypeId = None
        self._TaskAction = None
        self._TaskMode = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CycleStep(self):
        """Interval, optional, default is 1. Not null. Default is 1
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def DelayTime(self):
        """Delayed Execution Time, in minutes
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def EndTime(self):
        """Task End Data Time. Not Empty. Default to Current Time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Notes(self):
        """Remarks
        :rtype: str
        """
        return self._Notes

    @Notes.setter
    def Notes(self, Notes):
        self._Notes = Notes

    @property
    def StartTime(self):
        """Current date
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TypeId(self):
        """Keep it consistent with the previous call to the scheduling interface 27
        :rtype: int
        """
        return self._TypeId

    @TypeId.setter
    def TypeId(self, TypeId):
        self._TypeId = TypeId

    @property
    def TaskAction(self):
        """Time Specification, for monthly tasks specify days like 1,3, then enter 1,3. Not Empty. Default "" Monthly Task: For specific days like "1,3", specifying the end of the month cannot be combined with specific dates, can only be "L"
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def TaskMode(self):
        """Distinguish between canvas and form
        :rtype: str
        """
        return self._TaskMode

    @TaskMode.setter
    def TaskMode(self, TaskMode):
        self._TaskMode = TaskMode


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._CycleStep = params.get("CycleStep")
        self._DelayTime = params.get("DelayTime")
        self._EndTime = params.get("EndTime")
        self._Notes = params.get("Notes")
        self._StartTime = params.get("StartTime")
        self._TaskName = params.get("TaskName")
        self._TypeId = params.get("TypeId")
        self._TaskAction = params.get("TaskAction")
        self._TaskMode = params.get("TaskMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateOfflineTaskResponse(AbstractModel):
    """CreateOfflineTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _Data: Result
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Data = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Data(self):
        """Result
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateOpsMakePlanRequest(AbstractModel):
    """CreateOpsMakePlan request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _MakeName: Supplemental Plan Name
        :type MakeName: str
        :param _TaskIdList: Supplementary Task Collection
        :type TaskIdList: list of str
        :param _MakeDatetimeList: Supplementary Plan Date Range
        :type MakeDatetimeList: list of CreateMakeDatetimeInfo
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _CheckParent: Check Parent Task Status for Supplement, default is not to check. Not recommended for use, will be deprecated, recommend using CheckParentType.
        :type CheckParent: bool
        :param _CheckParentType: Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
        :type CheckParentType: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _SelfDependence: Deprecated. Task Self-Dependency Type: parallel, serial (unordered parallel), orderly (ordered serial)
        :type SelfDependence: str
        :param _ParallelNum: Parallelism
        :type ParallelNum: int
        :param _SameCycle: Is the generation cycle of the supplementary instance the same as the original cycle, default is true
        :type SameCycle: bool
        :param _TargetTaskCycle: Supplementary Instance Target Cycle Type
        :type TargetTaskCycle: str
        :param _TargetTaskAction: Specified Time for Supplementary Instance Target Cycle Type
        :type TargetTaskAction: int
        :param _MapParamList: Custom Parameters for Supplement Instance
        :type MapParamList: list of StrToStrMap
        :param _CreatorId: Creator ID
        :type CreatorId: str
        :param _Creator: Creator
        :type Creator: str
        :param _Remark: Supplementary Plan Description
        :type Remark: str
        :param _SameSelfDependType: Use Original Self-Dependency Configuration of Task, default is true
        :type SameSelfDependType: bool
        :param _SourceTaskCycle: Supplementary Instance Original Cycle Type
        :type SourceTaskCycle: str
        :param _SchedulerResourceGroup: If no specified scheduling resource group (ID) is provided, the original task scheduling execution resource group will be used
        :type SchedulerResourceGroup: str
        :param _IntegrationResourceGroup: If no specified integration resource group (ID) is provided, the original task integration execution resource group will be used
        :type IntegrationResourceGroup: str
        :param _SchedulerResourceGroupName: If no specified scheduling resource group name is provided, the original task scheduling execution resource group will be used
        :type SchedulerResourceGroupName: str
        :param _IntegrationResourceGroupName: If no specified integration resource group name is provided, the original task integration execution resource group will be used
        :type IntegrationResourceGroupName: str
        """
        self._ProjectId = None
        self._MakeName = None
        self._TaskIdList = None
        self._MakeDatetimeList = None
        self._ProjectIdent = None
        self._CheckParent = None
        self._CheckParentType = None
        self._ProjectName = None
        self._SelfDependence = None
        self._ParallelNum = None
        self._SameCycle = None
        self._TargetTaskCycle = None
        self._TargetTaskAction = None
        self._MapParamList = None
        self._CreatorId = None
        self._Creator = None
        self._Remark = None
        self._SameSelfDependType = None
        self._SourceTaskCycle = None
        self._SchedulerResourceGroup = None
        self._IntegrationResourceGroup = None
        self._SchedulerResourceGroupName = None
        self._IntegrationResourceGroupName = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def MakeName(self):
        """Supplemental Plan Name
        :rtype: str
        """
        return self._MakeName

    @MakeName.setter
    def MakeName(self, MakeName):
        self._MakeName = MakeName

    @property
    def TaskIdList(self):
        """Supplementary Task Collection
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def MakeDatetimeList(self):
        """Supplementary Plan Date Range
        :rtype: list of CreateMakeDatetimeInfo
        """
        return self._MakeDatetimeList

    @MakeDatetimeList.setter
    def MakeDatetimeList(self, MakeDatetimeList):
        self._MakeDatetimeList = MakeDatetimeList

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def CheckParent(self):
        """Check Parent Task Status for Supplement, default is not to check. Not recommended for use, will be deprecated, recommend using CheckParentType.
        :rtype: bool
        """
        return self._CheckParent

    @CheckParent.setter
    def CheckParent(self, CheckParent):
        self._CheckParent = CheckParent

    @property
    def CheckParentType(self):
        """Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
        :rtype: str
        """
        return self._CheckParentType

    @CheckParentType.setter
    def CheckParentType(self, CheckParentType):
        self._CheckParentType = CheckParentType

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def SelfDependence(self):
        """Deprecated. Task Self-Dependency Type: parallel, serial (unordered parallel), orderly (ordered serial)
        :rtype: str
        """
        return self._SelfDependence

    @SelfDependence.setter
    def SelfDependence(self, SelfDependence):
        self._SelfDependence = SelfDependence

    @property
    def ParallelNum(self):
        """Parallelism
        :rtype: int
        """
        return self._ParallelNum

    @ParallelNum.setter
    def ParallelNum(self, ParallelNum):
        self._ParallelNum = ParallelNum

    @property
    def SameCycle(self):
        """Is the generation cycle of the supplementary instance the same as the original cycle, default is true
        :rtype: bool
        """
        return self._SameCycle

    @SameCycle.setter
    def SameCycle(self, SameCycle):
        self._SameCycle = SameCycle

    @property
    def TargetTaskCycle(self):
        """Supplementary Instance Target Cycle Type
        :rtype: str
        """
        return self._TargetTaskCycle

    @TargetTaskCycle.setter
    def TargetTaskCycle(self, TargetTaskCycle):
        self._TargetTaskCycle = TargetTaskCycle

    @property
    def TargetTaskAction(self):
        """Specified Time for Supplementary Instance Target Cycle Type
        :rtype: int
        """
        return self._TargetTaskAction

    @TargetTaskAction.setter
    def TargetTaskAction(self, TargetTaskAction):
        self._TargetTaskAction = TargetTaskAction

    @property
    def MapParamList(self):
        """Custom Parameters for Supplement Instance
        :rtype: list of StrToStrMap
        """
        return self._MapParamList

    @MapParamList.setter
    def MapParamList(self, MapParamList):
        self._MapParamList = MapParamList

    @property
    def CreatorId(self):
        """Creator ID
        :rtype: str
        """
        return self._CreatorId

    @CreatorId.setter
    def CreatorId(self, CreatorId):
        self._CreatorId = CreatorId

    @property
    def Creator(self):
        """Creator
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def Remark(self):
        """Supplementary Plan Description
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def SameSelfDependType(self):
        """Use Original Self-Dependency Configuration of Task, default is true
        :rtype: bool
        """
        return self._SameSelfDependType

    @SameSelfDependType.setter
    def SameSelfDependType(self, SameSelfDependType):
        self._SameSelfDependType = SameSelfDependType

    @property
    def SourceTaskCycle(self):
        """Supplementary Instance Original Cycle Type
        :rtype: str
        """
        return self._SourceTaskCycle

    @SourceTaskCycle.setter
    def SourceTaskCycle(self, SourceTaskCycle):
        self._SourceTaskCycle = SourceTaskCycle

    @property
    def SchedulerResourceGroup(self):
        """If no specified scheduling resource group (ID) is provided, the original task scheduling execution resource group will be used
        :rtype: str
        """
        return self._SchedulerResourceGroup

    @SchedulerResourceGroup.setter
    def SchedulerResourceGroup(self, SchedulerResourceGroup):
        self._SchedulerResourceGroup = SchedulerResourceGroup

    @property
    def IntegrationResourceGroup(self):
        """If no specified integration resource group (ID) is provided, the original task integration execution resource group will be used
        :rtype: str
        """
        return self._IntegrationResourceGroup

    @IntegrationResourceGroup.setter
    def IntegrationResourceGroup(self, IntegrationResourceGroup):
        self._IntegrationResourceGroup = IntegrationResourceGroup

    @property
    def SchedulerResourceGroupName(self):
        """If no specified scheduling resource group name is provided, the original task scheduling execution resource group will be used
        :rtype: str
        """
        return self._SchedulerResourceGroupName

    @SchedulerResourceGroupName.setter
    def SchedulerResourceGroupName(self, SchedulerResourceGroupName):
        self._SchedulerResourceGroupName = SchedulerResourceGroupName

    @property
    def IntegrationResourceGroupName(self):
        """If no specified integration resource group name is provided, the original task integration execution resource group will be used
        :rtype: str
        """
        return self._IntegrationResourceGroupName

    @IntegrationResourceGroupName.setter
    def IntegrationResourceGroupName(self, IntegrationResourceGroupName):
        self._IntegrationResourceGroupName = IntegrationResourceGroupName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._MakeName = params.get("MakeName")
        self._TaskIdList = params.get("TaskIdList")
        if params.get("MakeDatetimeList") is not None:
            self._MakeDatetimeList = []
            for item in params.get("MakeDatetimeList"):
                obj = CreateMakeDatetimeInfo()
                obj._deserialize(item)
                self._MakeDatetimeList.append(obj)
        self._ProjectIdent = params.get("ProjectIdent")
        self._CheckParent = params.get("CheckParent")
        self._CheckParentType = params.get("CheckParentType")
        self._ProjectName = params.get("ProjectName")
        self._SelfDependence = params.get("SelfDependence")
        self._ParallelNum = params.get("ParallelNum")
        self._SameCycle = params.get("SameCycle")
        self._TargetTaskCycle = params.get("TargetTaskCycle")
        self._TargetTaskAction = params.get("TargetTaskAction")
        if params.get("MapParamList") is not None:
            self._MapParamList = []
            for item in params.get("MapParamList"):
                obj = StrToStrMap()
                obj._deserialize(item)
                self._MapParamList.append(obj)
        self._CreatorId = params.get("CreatorId")
        self._Creator = params.get("Creator")
        self._Remark = params.get("Remark")
        self._SameSelfDependType = params.get("SameSelfDependType")
        self._SourceTaskCycle = params.get("SourceTaskCycle")
        self._SchedulerResourceGroup = params.get("SchedulerResourceGroup")
        self._IntegrationResourceGroup = params.get("IntegrationResourceGroup")
        self._SchedulerResourceGroupName = params.get("SchedulerResourceGroupName")
        self._IntegrationResourceGroupName = params.get("IntegrationResourceGroupName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateOpsMakePlanResponse(AbstractModel):
    """CreateOpsMakePlan response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CommonIdOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CommonIdOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CommonIdOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class CreateRuleRequest(AbstractModel):
    """CreateRule request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _Name: Rule name
        :type Name: str
        :param _TableId: Data Table ID
        :type TableId: str
        :param _RuleTemplateId: Rule Template List
        :type RuleTemplateId: int
        :param _Type: Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
        :type Type: int
        :param _QualityDim: Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
        :type QualityDim: int
        :param _SourceObjectDataTypeName: Source Field Detailed Type, int, string
        :type SourceObjectDataTypeName: str
        :param _SourceObjectValue: Source Field Name
        :type SourceObjectValue: str
        :param _ConditionType: Detection Range 1.Whole Table 2.Conditional Scan
        :type ConditionType: int
        :param _ConditionExpression: Conditional Scan WHERE Condition Expression
        :type ConditionExpression: str
        :param _CustomSql: Custom Definition SQL
        :type CustomSql: str
        :param _CompareRule: Alert Trigger Condition
        :type CompareRule: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        :param _AlarmLevel: Alert Trigger Level 1.Low, 2.Medium, 3.High
        :type AlarmLevel: int
        :param _Description: Rule Description
        :type Description: str
        :param _DatasourceId: Data Source ID
        :type DatasourceId: str
        :param _DatabaseId: Database ID
        :type DatabaseId: str
        :param _TargetDatabaseId: Target Database Id
        :type TargetDatabaseId: str
        :param _TargetTableId: Target Table Id
        :type TargetTableId: str
        :param _TargetConditionExpr: Target Filter Condition Expression
        :type TargetConditionExpr: str
        :param _RelConditionExpr: Source Field and Target Field Association Condition ON Expression
        :type RelConditionExpr: str
        :param _FieldConfig: Custom Definition Template SQL Expression Field Replacement Parameter
        :type FieldConfig: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        :param _TargetObjectValue: Target Field Name CITY
        :type TargetObjectValue: str
        :param _SourceEngineTypes: Supported Execution Engine List for the Rule
        :type SourceEngineTypes: list of int non-negative
        """
        self._ProjectId = None
        self._RuleGroupId = None
        self._Name = None
        self._TableId = None
        self._RuleTemplateId = None
        self._Type = None
        self._QualityDim = None
        self._SourceObjectDataTypeName = None
        self._SourceObjectValue = None
        self._ConditionType = None
        self._ConditionExpression = None
        self._CustomSql = None
        self._CompareRule = None
        self._AlarmLevel = None
        self._Description = None
        self._DatasourceId = None
        self._DatabaseId = None
        self._TargetDatabaseId = None
        self._TargetTableId = None
        self._TargetConditionExpr = None
        self._RelConditionExpr = None
        self._FieldConfig = None
        self._TargetObjectValue = None
        self._SourceEngineTypes = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def Name(self):
        """Rule name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TableId(self):
        """Data Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def RuleTemplateId(self):
        """Rule Template List
        :rtype: int
        """
        return self._RuleTemplateId

    @RuleTemplateId.setter
    def RuleTemplateId(self, RuleTemplateId):
        self._RuleTemplateId = RuleTemplateId

    @property
    def Type(self):
        """Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def QualityDim(self):
        """Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def SourceObjectDataTypeName(self):
        """Source Field Detailed Type, int, string
        :rtype: str
        """
        return self._SourceObjectDataTypeName

    @SourceObjectDataTypeName.setter
    def SourceObjectDataTypeName(self, SourceObjectDataTypeName):
        self._SourceObjectDataTypeName = SourceObjectDataTypeName

    @property
    def SourceObjectValue(self):
        """Source Field Name
        :rtype: str
        """
        return self._SourceObjectValue

    @SourceObjectValue.setter
    def SourceObjectValue(self, SourceObjectValue):
        self._SourceObjectValue = SourceObjectValue

    @property
    def ConditionType(self):
        """Detection Range 1.Whole Table 2.Conditional Scan
        :rtype: int
        """
        return self._ConditionType

    @ConditionType.setter
    def ConditionType(self, ConditionType):
        self._ConditionType = ConditionType

    @property
    def ConditionExpression(self):
        """Conditional Scan WHERE Condition Expression
        :rtype: str
        """
        return self._ConditionExpression

    @ConditionExpression.setter
    def ConditionExpression(self, ConditionExpression):
        self._ConditionExpression = ConditionExpression

    @property
    def CustomSql(self):
        """Custom Definition SQL
        :rtype: str
        """
        return self._CustomSql

    @CustomSql.setter
    def CustomSql(self, CustomSql):
        self._CustomSql = CustomSql

    @property
    def CompareRule(self):
        """Alert Trigger Condition
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        """
        return self._CompareRule

    @CompareRule.setter
    def CompareRule(self, CompareRule):
        self._CompareRule = CompareRule

    @property
    def AlarmLevel(self):
        """Alert Trigger Level 1.Low, 2.Medium, 3.High
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel

    @property
    def Description(self):
        """Rule Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatabaseId(self):
        """Database ID
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def TargetDatabaseId(self):
        """Target Database Id
        :rtype: str
        """
        return self._TargetDatabaseId

    @TargetDatabaseId.setter
    def TargetDatabaseId(self, TargetDatabaseId):
        self._TargetDatabaseId = TargetDatabaseId

    @property
    def TargetTableId(self):
        """Target Table Id
        :rtype: str
        """
        return self._TargetTableId

    @TargetTableId.setter
    def TargetTableId(self, TargetTableId):
        self._TargetTableId = TargetTableId

    @property
    def TargetConditionExpr(self):
        """Target Filter Condition Expression
        :rtype: str
        """
        return self._TargetConditionExpr

    @TargetConditionExpr.setter
    def TargetConditionExpr(self, TargetConditionExpr):
        self._TargetConditionExpr = TargetConditionExpr

    @property
    def RelConditionExpr(self):
        """Source Field and Target Field Association Condition ON Expression
        :rtype: str
        """
        return self._RelConditionExpr

    @RelConditionExpr.setter
    def RelConditionExpr(self, RelConditionExpr):
        self._RelConditionExpr = RelConditionExpr

    @property
    def FieldConfig(self):
        """Custom Definition Template SQL Expression Field Replacement Parameter
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        """
        return self._FieldConfig

    @FieldConfig.setter
    def FieldConfig(self, FieldConfig):
        self._FieldConfig = FieldConfig

    @property
    def TargetObjectValue(self):
        """Target Field Name CITY
        :rtype: str
        """
        return self._TargetObjectValue

    @TargetObjectValue.setter
    def TargetObjectValue(self, TargetObjectValue):
        self._TargetObjectValue = TargetObjectValue

    @property
    def SourceEngineTypes(self):
        """Supported Execution Engine List for the Rule
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._Name = params.get("Name")
        self._TableId = params.get("TableId")
        self._RuleTemplateId = params.get("RuleTemplateId")
        self._Type = params.get("Type")
        self._QualityDim = params.get("QualityDim")
        self._SourceObjectDataTypeName = params.get("SourceObjectDataTypeName")
        self._SourceObjectValue = params.get("SourceObjectValue")
        self._ConditionType = params.get("ConditionType")
        self._ConditionExpression = params.get("ConditionExpression")
        self._CustomSql = params.get("CustomSql")
        if params.get("CompareRule") is not None:
            self._CompareRule = CompareRule()
            self._CompareRule._deserialize(params.get("CompareRule"))
        self._AlarmLevel = params.get("AlarmLevel")
        self._Description = params.get("Description")
        self._DatasourceId = params.get("DatasourceId")
        self._DatabaseId = params.get("DatabaseId")
        self._TargetDatabaseId = params.get("TargetDatabaseId")
        self._TargetTableId = params.get("TargetTableId")
        self._TargetConditionExpr = params.get("TargetConditionExpr")
        self._RelConditionExpr = params.get("RelConditionExpr")
        if params.get("FieldConfig") is not None:
            self._FieldConfig = RuleFieldConfig()
            self._FieldConfig._deserialize(params.get("FieldConfig"))
        self._TargetObjectValue = params.get("TargetObjectValue")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRuleResponse(AbstractModel):
    """CreateRule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: RuleNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.Rule`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """RuleNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Rule`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = Rule()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class CreateRuleTemplateRequest(AbstractModel):
    """CreateRuleTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Template Type 1. System Template 2. Custom Definition Template
        :type Type: int
        :param _Name: Template Name
        :type Name: str
        :param _QualityDim: Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
        :type QualityDim: int
        :param _SourceObjectType: Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
        :type SourceObjectType: int
        :param _Description: Template Description
        :type Description: str
        :param _SourceEngineTypes: Corresponding Engine Type of the Source
        :type SourceEngineTypes: list of int non-negative
        :param _MultiSourceFlag: Whether to Associate with Other Databases and Tables
        :type MultiSourceFlag: bool
        :param _SqlExpression: SQL Expression
        :type SqlExpression: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WhereFlag: Whether to add where parameter
        :type WhereFlag: bool
        """
        self._Type = None
        self._Name = None
        self._QualityDim = None
        self._SourceObjectType = None
        self._Description = None
        self._SourceEngineTypes = None
        self._MultiSourceFlag = None
        self._SqlExpression = None
        self._ProjectId = None
        self._WhereFlag = None

    @property
    def Type(self):
        """Template Type 1. System Template 2. Custom Definition Template
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Name(self):
        """Template Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def QualityDim(self):
        """Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def SourceObjectType(self):
        """Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
        :rtype: int
        """
        return self._SourceObjectType

    @SourceObjectType.setter
    def SourceObjectType(self, SourceObjectType):
        self._SourceObjectType = SourceObjectType

    @property
    def Description(self):
        """Template Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def SourceEngineTypes(self):
        """Corresponding Engine Type of the Source
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes

    @property
    def MultiSourceFlag(self):
        """Whether to Associate with Other Databases and Tables
        :rtype: bool
        """
        return self._MultiSourceFlag

    @MultiSourceFlag.setter
    def MultiSourceFlag(self, MultiSourceFlag):
        self._MultiSourceFlag = MultiSourceFlag

    @property
    def SqlExpression(self):
        """SQL Expression
        :rtype: str
        """
        return self._SqlExpression

    @SqlExpression.setter
    def SqlExpression(self, SqlExpression):
        self._SqlExpression = SqlExpression

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WhereFlag(self):
        """Whether to add where parameter
        :rtype: bool
        """
        return self._WhereFlag

    @WhereFlag.setter
    def WhereFlag(self, WhereFlag):
        self._WhereFlag = WhereFlag


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Name = params.get("Name")
        self._QualityDim = params.get("QualityDim")
        self._SourceObjectType = params.get("SourceObjectType")
        self._Description = params.get("Description")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        self._MultiSourceFlag = params.get("MultiSourceFlag")
        self._SqlExpression = params.get("SqlExpression")
        self._ProjectId = params.get("ProjectId")
        self._WhereFlag = params.get("WhereFlag")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRuleTemplateResponse(AbstractModel):
    """CreateRuleTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Template ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Template ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateTaskAlarmRegularRequest(AbstractModel):
    """CreateTaskAlarmRegular request structure.

    """

    def __init__(self):
        r"""
        :param _TaskAlarmInfo: Alert Configuration Information
        :type TaskAlarmInfo: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskAlarmInfo = None
        self._ProjectId = None

    @property
    def TaskAlarmInfo(self):
        """Alert Configuration Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        """
        return self._TaskAlarmInfo

    @TaskAlarmInfo.setter
    def TaskAlarmInfo(self, TaskAlarmInfo):
        self._TaskAlarmInfo = TaskAlarmInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("TaskAlarmInfo") is not None:
            self._TaskAlarmInfo = TaskAlarmInfo()
            self._TaskAlarmInfo._deserialize(params.get("TaskAlarmInfo"))
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTaskAlarmRegularResponse(AbstractModel):
    """CreateTaskAlarmRegular response structure.

    """

    def __init__(self):
        r"""
        :param _AlarmId: Alert ID
        :type AlarmId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AlarmId = None
        self._RequestId = None

    @property
    def AlarmId(self):
        """Alert ID
        :rtype: int
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AlarmId = params.get("AlarmId")
        self._RequestId = params.get("RequestId")


class CreateTaskFolderRequest(AbstractModel):
    """CreateTaskFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderName: Folder Name
        :type FolderName: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _ParentFolderId: Parent Folder ID
        :type ParentFolderId: str
        """
        self._ProjectId = None
        self._FolderName = None
        self._WorkflowId = None
        self._ParentFolderId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderName(self):
        """Folder Name
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def ParentFolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._ParentFolderId

    @ParentFolderId.setter
    def ParentFolderId(self, ParentFolderId):
        self._ParentFolderId = ParentFolderId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderName = params.get("FolderName")
        self._WorkflowId = params.get("WorkflowId")
        self._ParentFolderId = params.get("ParentFolderId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTaskFolderResponse(AbstractModel):
    """CreateTaskFolder response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task Folder ID, null if creation failed
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task Folder ID, null if creation failed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateTaskRequest(AbstractModel):
    """CreateTask request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _TaskName: Task Name
        :type TaskName: str
        :param _TaskType: 26 Offline Synchronization,30 Python,31 PySpark,32 DLC,33 Impala,34 Hive SQL,35 Shell,36 Spark SQL,39 Spark,40 TCHouse-P,92 MapReduce
        :type TaskType: int
        :param _TaskExt: Extended Attributes
        :type TaskExt: list of TaskExtInfo
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._TaskName = None
        self._TaskType = None
        self._TaskExt = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskType(self):
        """26 Offline Synchronization,30 Python,31 PySpark,32 DLC,33 Impala,34 Hive SQL,35 Shell,36 Spark SQL,39 Spark,40 TCHouse-P,92 MapReduce
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskExt(self):
        """Extended Attributes
        :rtype: list of TaskExtInfo
        """
        return self._TaskExt

    @TaskExt.setter
    def TaskExt(self, TaskExt):
        self._TaskExt = TaskExt


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._TaskName = params.get("TaskName")
        self._TaskType = params.get("TaskType")
        if params.get("TaskExt") is not None:
            self._TaskExt = []
            for item in params.get("TaskExt"):
                obj = TaskExtInfo()
                obj._deserialize(item)
                self._TaskExt.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTaskResponse(AbstractModel):
    """CreateTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Return Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CommonId`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Return Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CommonId`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CommonId()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class CreateTaskVersionDsRequest(AbstractModel):
    """CreateTaskVersionDs request structure.

    """

    def __init__(self):
        r"""
        :param _Task: Task ID
        :type Task: :class:`tencentcloud.wedata.v20210820.models.BatchCreateTaskVersionDTO`
        :param _NeedCheckParentSubmitted: Whether to verify that the parent task has been submitted for scheduling
        :type NeedCheckParentSubmitted: bool
        :param _AutoRun: Automatic Execution
        :type AutoRun: bool
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RequestFromSource: Request Source, WEB frontend; CLIENT client
        :type RequestFromSource: str
        :param _AlarmWays: Alert Method: email-Email; sms-SMS; wecom-WeCom
        :type AlarmWays: str
        :param _AlarmRecipientTypes: Alert Object: 1-Project Administrator, 2-Task Owner
        :type AlarmRecipientTypes: str
        :param _EnableCheckTaskCycleLink: Whether to verify circular dependencies, default is true. If false is passed after successful validation using CheckTaskCycleLink and CheckTaskCycleConfiguration interfaces, the back-end server will not perform validation
        :type EnableCheckTaskCycleLink: bool
        """
        self._Task = None
        self._NeedCheckParentSubmitted = None
        self._AutoRun = None
        self._ProjectId = None
        self._RequestFromSource = None
        self._AlarmWays = None
        self._AlarmRecipientTypes = None
        self._EnableCheckTaskCycleLink = None

    @property
    def Task(self):
        """Task ID
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchCreateTaskVersionDTO`
        """
        return self._Task

    @Task.setter
    def Task(self, Task):
        self._Task = Task

    @property
    def NeedCheckParentSubmitted(self):
        """Whether to verify that the parent task has been submitted for scheduling
        :rtype: bool
        """
        return self._NeedCheckParentSubmitted

    @NeedCheckParentSubmitted.setter
    def NeedCheckParentSubmitted(self, NeedCheckParentSubmitted):
        self._NeedCheckParentSubmitted = NeedCheckParentSubmitted

    @property
    def AutoRun(self):
        """Automatic Execution
        :rtype: bool
        """
        return self._AutoRun

    @AutoRun.setter
    def AutoRun(self, AutoRun):
        self._AutoRun = AutoRun

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RequestFromSource(self):
        """Request Source, WEB frontend; CLIENT client
        :rtype: str
        """
        return self._RequestFromSource

    @RequestFromSource.setter
    def RequestFromSource(self, RequestFromSource):
        self._RequestFromSource = RequestFromSource

    @property
    def AlarmWays(self):
        """Alert Method: email-Email; sms-SMS; wecom-WeCom
        :rtype: str
        """
        return self._AlarmWays

    @AlarmWays.setter
    def AlarmWays(self, AlarmWays):
        self._AlarmWays = AlarmWays

    @property
    def AlarmRecipientTypes(self):
        """Alert Object: 1-Project Administrator, 2-Task Owner
        :rtype: str
        """
        return self._AlarmRecipientTypes

    @AlarmRecipientTypes.setter
    def AlarmRecipientTypes(self, AlarmRecipientTypes):
        self._AlarmRecipientTypes = AlarmRecipientTypes

    @property
    def EnableCheckTaskCycleLink(self):
        """Whether to verify circular dependencies, default is true. If false is passed after successful validation using CheckTaskCycleLink and CheckTaskCycleConfiguration interfaces, the back-end server will not perform validation
        :rtype: bool
        """
        return self._EnableCheckTaskCycleLink

    @EnableCheckTaskCycleLink.setter
    def EnableCheckTaskCycleLink(self, EnableCheckTaskCycleLink):
        self._EnableCheckTaskCycleLink = EnableCheckTaskCycleLink


    def _deserialize(self, params):
        if params.get("Task") is not None:
            self._Task = BatchCreateTaskVersionDTO()
            self._Task._deserialize(params.get("Task"))
        self._NeedCheckParentSubmitted = params.get("NeedCheckParentSubmitted")
        self._AutoRun = params.get("AutoRun")
        self._ProjectId = params.get("ProjectId")
        self._RequestFromSource = params.get("RequestFromSource")
        self._AlarmWays = params.get("AlarmWays")
        self._AlarmRecipientTypes = params.get("AlarmRecipientTypes")
        self._EnableCheckTaskCycleLink = params.get("EnableCheckTaskCycleLink")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTaskVersionDsResponse(AbstractModel):
    """CreateTaskVersionDs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: VersionNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """VersionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class CreateWorkflowDsRequest(AbstractModel):
    """CreateWorkflowDs request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowName: Workflow name
        :type WorkflowName: str
        :param _FolderId: Folder ID
        :type FolderId: str
        :param _WorkflowDesc: Workflow Description
        :type WorkflowDesc: str
        """
        self._ProjectId = None
        self._WorkflowName = None
        self._FolderId = None
        self._WorkflowDesc = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowName(self):
        """Workflow name
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def FolderId(self):
        """Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def WorkflowDesc(self):
        """Workflow Description
        :rtype: str
        """
        return self._WorkflowDesc

    @WorkflowDesc.setter
    def WorkflowDesc(self, WorkflowDesc):
        self._WorkflowDesc = WorkflowDesc


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowName = params.get("WorkflowName")
        self._FolderId = params.get("FolderId")
        self._WorkflowDesc = params.get("WorkflowDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateWorkflowDsResponse(AbstractModel):
    """CreateWorkflowDs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Workflow ID
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Workflow ID
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DagInstancesRequest(AbstractModel):
    """DagInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query conditions, this interface requires the example information to be placed in this field
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query conditions, this interface requires the example information to be placed in this field
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DagInstancesResponse(AbstractModel):
    """DagInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CollectionInstanceOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CollectionInstanceOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CollectionInstanceOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DailyScoreInfo(AbstractModel):
    """Daily Rating Information

    """

    def __init__(self):
        r"""
        :param _StatisticsDate: Statistics Date TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :type StatisticsDate: int
        :param _Score: ScoringNote: This field may return null, indicating that no valid value can be obtained.
        :type Score: float
        """
        self._StatisticsDate = None
        self._Score = None

    @property
    def StatisticsDate(self):
        """Statistics Date TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StatisticsDate

    @StatisticsDate.setter
    def StatisticsDate(self, StatisticsDate):
        self._StatisticsDate = StatisticsDate

    @property
    def Score(self):
        """ScoringNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        self._StatisticsDate = params.get("StatisticsDate")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataCheckStat(AbstractModel):
    """Data Monitoring Results

    """

    def __init__(self):
        r"""
        :param _TableTotal: Total Tables
        :type TableTotal: int
        :param _ColumnTotal: Total Number of Fields
        :type ColumnTotal: int
        :param _TableConfig: Number of Table Configuration Checks
        :type TableConfig: int
        :param _ColumnConfig: Number of Field Configuration Checks
        :type ColumnConfig: int
        :param _TableExec: Actual Number of Table Checks
        :type TableExec: int
        :param _ColumnExec: Actual Number of Field Checks
        :type ColumnExec: int
        """
        self._TableTotal = None
        self._ColumnTotal = None
        self._TableConfig = None
        self._ColumnConfig = None
        self._TableExec = None
        self._ColumnExec = None

    @property
    def TableTotal(self):
        """Total Tables
        :rtype: int
        """
        return self._TableTotal

    @TableTotal.setter
    def TableTotal(self, TableTotal):
        self._TableTotal = TableTotal

    @property
    def ColumnTotal(self):
        """Total Number of Fields
        :rtype: int
        """
        return self._ColumnTotal

    @ColumnTotal.setter
    def ColumnTotal(self, ColumnTotal):
        self._ColumnTotal = ColumnTotal

    @property
    def TableConfig(self):
        """Number of Table Configuration Checks
        :rtype: int
        """
        return self._TableConfig

    @TableConfig.setter
    def TableConfig(self, TableConfig):
        self._TableConfig = TableConfig

    @property
    def ColumnConfig(self):
        """Number of Field Configuration Checks
        :rtype: int
        """
        return self._ColumnConfig

    @ColumnConfig.setter
    def ColumnConfig(self, ColumnConfig):
        self._ColumnConfig = ColumnConfig

    @property
    def TableExec(self):
        """Actual Number of Table Checks
        :rtype: int
        """
        return self._TableExec

    @TableExec.setter
    def TableExec(self, TableExec):
        self._TableExec = TableExec

    @property
    def ColumnExec(self):
        """Actual Number of Field Checks
        :rtype: int
        """
        return self._ColumnExec

    @ColumnExec.setter
    def ColumnExec(self, ColumnExec):
        self._ColumnExec = ColumnExec


    def _deserialize(self, params):
        self._TableTotal = params.get("TableTotal")
        self._ColumnTotal = params.get("ColumnTotal")
        self._TableConfig = params.get("TableConfig")
        self._ColumnConfig = params.get("ColumnConfig")
        self._TableExec = params.get("TableExec")
        self._ColumnExec = params.get("ColumnExec")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataSourceInfo(AbstractModel):
    """Data Source Object

    """

    def __init__(self):
        r"""
        :param _DatabaseName: If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _Description: Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _ID: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ID: int
        :param _Instance: Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Instance: str
        :param _Name: Data Source Name, cannot be empty under the same SpaceNameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Region: Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        :param _Type: Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _ClusterId: Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterId: str
        :param _AppId: Application ID AppId
Note: This field may return null, indicating that no valid value can be obtained.
        :type AppId: int
        :param _BizParams: Configuration Information Extension of Business Data SourceNote: This field may return null, indicating that no valid value can be obtained.
        :type BizParams: str
        :param _Category: Data Source Category: Binding Engine, Binding DatabaseNote: This field may return null, indicating that no valid value can be obtained.
        :type Category: str
        :param _Display: Data Source Display Name, for visual inspectionNote: This field may return null, indicating that no valid value can be obtained.
        :type Display: str
        :param _OwnerAccount: Data Source Responsible Person Account ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerAccount: str
        :param _Params: Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        :param _Status: Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        :param _OwnerAccountName: Data source owner account name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerAccountName: str
        :param _ClusterName: Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
        :type ClusterName: str
        :param _OwnerProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerProjectId: str
        :param _OwnerProjectName: Project NameNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerProjectName: str
        :param _OwnerProjectIdent: Belonging project identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerProjectIdent: str
        :param _AuthorityProjectName: Authorized project
Note: This field may return null, indicating that no valid value can be obtained.
        :type AuthorityProjectName: str
        :param _AuthorityUserName: Authorized user
Note: This field may return null, indicating that no valid value can be obtained.
        :type AuthorityUserName: str
        :param _Edit: Edit permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :type Edit: bool
        :param _Author: Authorization permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :type Author: bool
        :param _Deliver: Transfer permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :type Deliver: bool
        :param _DataSourceStatus: Data source status
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataSourceStatus: str
        :param _CreateTime: TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: int
        :param _ParamsString: Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParamsString: str
        :param _BizParamsString: BizParams JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :type BizParamsString: str
        :param _ModifiedTime: Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifiedTime: int
        :param _ShowType: Data source display type, corresponding to Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ShowType: str
        :param _ProductId: Current data source production source Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProductId: int
        :param _DevelopmentId: Current data source development source Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type DevelopmentId: int
        :param _DevelopmentParams: Same as params, content is the data for the development data source
Note: This field may return null, indicating that no valid value can be obtained.
        :type DevelopmentParams: str
        """
        self._DatabaseName = None
        self._Description = None
        self._ID = None
        self._Instance = None
        self._Name = None
        self._Region = None
        self._Type = None
        self._ClusterId = None
        self._AppId = None
        self._BizParams = None
        self._Category = None
        self._Display = None
        self._OwnerAccount = None
        self._Params = None
        self._Status = None
        self._OwnerAccountName = None
        self._ClusterName = None
        self._OwnerProjectId = None
        self._OwnerProjectName = None
        self._OwnerProjectIdent = None
        self._AuthorityProjectName = None
        self._AuthorityUserName = None
        self._Edit = None
        self._Author = None
        self._Deliver = None
        self._DataSourceStatus = None
        self._CreateTime = None
        self._ParamsString = None
        self._BizParamsString = None
        self._ModifiedTime = None
        self._ShowType = None
        self._ProductId = None
        self._DevelopmentId = None
        self._DevelopmentParams = None

    @property
    def DatabaseName(self):
        """If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def Description(self):
        """Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ID(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def Instance(self):
        """Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Name(self):
        """Data Source Name, cannot be empty under the same SpaceNameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Region(self):
        """Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Type(self):
        """Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ClusterId(self):
        """Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def AppId(self):
        """Application ID AppId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def BizParams(self):
        """Configuration Information Extension of Business Data SourceNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._BizParams

    @BizParams.setter
    def BizParams(self, BizParams):
        self._BizParams = BizParams

    @property
    def Category(self):
        """Data Source Category: Binding Engine, Binding DatabaseNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Display(self):
        """Data Source Display Name, for visual inspectionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Display

    @Display.setter
    def Display(self, Display):
        self._Display = Display

    @property
    def OwnerAccount(self):
        """Data Source Responsible Person Account ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerAccount

    @OwnerAccount.setter
    def OwnerAccount(self, OwnerAccount):
        self._OwnerAccount = OwnerAccount

    @property
    def Params(self):
        """Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def Status(self):
        """Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def OwnerAccountName(self):
        """Data source owner account name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerAccountName

    @OwnerAccountName.setter
    def OwnerAccountName(self, OwnerAccountName):
        self._OwnerAccountName = OwnerAccountName

    @property
    def ClusterName(self):
        """Cluster NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def OwnerProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerProjectId

    @OwnerProjectId.setter
    def OwnerProjectId(self, OwnerProjectId):
        self._OwnerProjectId = OwnerProjectId

    @property
    def OwnerProjectName(self):
        """Project NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerProjectName

    @OwnerProjectName.setter
    def OwnerProjectName(self, OwnerProjectName):
        self._OwnerProjectName = OwnerProjectName

    @property
    def OwnerProjectIdent(self):
        """Belonging project identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerProjectIdent

    @OwnerProjectIdent.setter
    def OwnerProjectIdent(self, OwnerProjectIdent):
        self._OwnerProjectIdent = OwnerProjectIdent

    @property
    def AuthorityProjectName(self):
        """Authorized project
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AuthorityProjectName

    @AuthorityProjectName.setter
    def AuthorityProjectName(self, AuthorityProjectName):
        self._AuthorityProjectName = AuthorityProjectName

    @property
    def AuthorityUserName(self):
        """Authorized user
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AuthorityUserName

    @AuthorityUserName.setter
    def AuthorityUserName(self, AuthorityUserName):
        self._AuthorityUserName = AuthorityUserName

    @property
    def Edit(self):
        """Edit permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Edit

    @Edit.setter
    def Edit(self, Edit):
        self._Edit = Edit

    @property
    def Author(self):
        """Authorization permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Author

    @Author.setter
    def Author(self, Author):
        self._Author = Author

    @property
    def Deliver(self):
        """Transfer permissions available
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Deliver

    @Deliver.setter
    def Deliver(self, Deliver):
        self._Deliver = Deliver

    @property
    def DataSourceStatus(self):
        """Data source status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataSourceStatus

    @DataSourceStatus.setter
    def DataSourceStatus(self, DataSourceStatus):
        self._DataSourceStatus = DataSourceStatus

    @property
    def CreateTime(self):
        """TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ParamsString(self):
        """Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParamsString

    @ParamsString.setter
    def ParamsString(self, ParamsString):
        self._ParamsString = ParamsString

    @property
    def BizParamsString(self):
        """BizParams JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._BizParamsString

    @BizParamsString.setter
    def BizParamsString(self, BizParamsString):
        self._BizParamsString = BizParamsString

    @property
    def ModifiedTime(self):
        """Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ModifiedTime

    @ModifiedTime.setter
    def ModifiedTime(self, ModifiedTime):
        self._ModifiedTime = ModifiedTime

    @property
    def ShowType(self):
        """Data source display type, corresponding to Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ShowType

    @ShowType.setter
    def ShowType(self, ShowType):
        self._ShowType = ShowType

    @property
    def ProductId(self):
        """Current data source production source Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ProductId

    @ProductId.setter
    def ProductId(self, ProductId):
        self._ProductId = ProductId

    @property
    def DevelopmentId(self):
        """Current data source development source Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DevelopmentId

    @DevelopmentId.setter
    def DevelopmentId(self, DevelopmentId):
        self._DevelopmentId = DevelopmentId

    @property
    def DevelopmentParams(self):
        """Same as params, content is the data for the development data source
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DevelopmentParams

    @DevelopmentParams.setter
    def DevelopmentParams(self, DevelopmentParams):
        self._DevelopmentParams = DevelopmentParams


    def _deserialize(self, params):
        self._DatabaseName = params.get("DatabaseName")
        self._Description = params.get("Description")
        self._ID = params.get("ID")
        self._Instance = params.get("Instance")
        self._Name = params.get("Name")
        self._Region = params.get("Region")
        self._Type = params.get("Type")
        self._ClusterId = params.get("ClusterId")
        self._AppId = params.get("AppId")
        self._BizParams = params.get("BizParams")
        self._Category = params.get("Category")
        self._Display = params.get("Display")
        self._OwnerAccount = params.get("OwnerAccount")
        self._Params = params.get("Params")
        self._Status = params.get("Status")
        self._OwnerAccountName = params.get("OwnerAccountName")
        self._ClusterName = params.get("ClusterName")
        self._OwnerProjectId = params.get("OwnerProjectId")
        self._OwnerProjectName = params.get("OwnerProjectName")
        self._OwnerProjectIdent = params.get("OwnerProjectIdent")
        self._AuthorityProjectName = params.get("AuthorityProjectName")
        self._AuthorityUserName = params.get("AuthorityUserName")
        self._Edit = params.get("Edit")
        self._Author = params.get("Author")
        self._Deliver = params.get("Deliver")
        self._DataSourceStatus = params.get("DataSourceStatus")
        self._CreateTime = params.get("CreateTime")
        self._ParamsString = params.get("ParamsString")
        self._BizParamsString = params.get("BizParamsString")
        self._ModifiedTime = params.get("ModifiedTime")
        self._ShowType = params.get("ShowType")
        self._ProductId = params.get("ProductId")
        self._DevelopmentId = params.get("DevelopmentId")
        self._DevelopmentParams = params.get("DevelopmentParams")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataSourceInfoPage(AbstractModel):
    """Query Data Source Pagination List

    """

    def __init__(self):
        r"""
        :param _PageNumber: pagination page number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: pagination size
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Rows: data source list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Rows: list of DataSourceInfo
        :param _TotalCount: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPageNumber: total pagination pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPageNumber: int
        """
        self._PageNumber = None
        self._PageSize = None
        self._Rows = None
        self._TotalCount = None
        self._TotalPageNumber = None

    @property
    def PageNumber(self):
        """pagination page number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """pagination size
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Rows(self):
        """data source list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DataSourceInfo
        """
        return self._Rows

    @Rows.setter
    def Rows(self, Rows):
        self._Rows = Rows

    @property
    def TotalCount(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPageNumber(self):
        """total pagination pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPageNumber

    @TotalPageNumber.setter
    def TotalPageNumber(self, TotalPageNumber):
        self._TotalPageNumber = TotalPageNumber


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Rows") is not None:
            self._Rows = []
            for item in params.get("Rows"):
                obj = DataSourceInfo()
                obj._deserialize(item)
                self._Rows.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._TotalPageNumber = params.get("TotalPageNumber")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatabaseInfo(AbstractModel):
    """Data Quality Data Source Database

    """

    def __init__(self):
        r"""
        :param _DatasourceName: Data source name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatasourceId: Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _DatabaseId: Database id
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _InstanceId: Instance Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _DatasourceType: Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceType: int
        :param _OriginDatabaseName: Database Original Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OriginDatabaseName: str
        :param _OriginSchemaName: Schema NameNote: This field may return null, indicating that no valid value can be obtained.
        :type OriginSchemaName: str
        :param _DsEnvType: 0 or Not Returned. Undefined, 1. generation 2. development
Note: This field may return null, indicating that no valid value can be obtained.
        :type DsEnvType: int
        """
        self._DatasourceName = None
        self._DatasourceId = None
        self._DatabaseName = None
        self._DatabaseId = None
        self._InstanceId = None
        self._DatasourceType = None
        self._OriginDatabaseName = None
        self._OriginSchemaName = None
        self._DsEnvType = None

    @property
    def DatasourceName(self):
        """Data source name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatasourceId(self):
        """Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def DatabaseId(self):
        """Database id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def InstanceId(self):
        """Instance Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def DatasourceType(self):
        """Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType

    @property
    def OriginDatabaseName(self):
        """Database Original Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginDatabaseName

    @OriginDatabaseName.setter
    def OriginDatabaseName(self, OriginDatabaseName):
        self._OriginDatabaseName = OriginDatabaseName

    @property
    def OriginSchemaName(self):
        """Schema NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginSchemaName

    @OriginSchemaName.setter
    def OriginSchemaName(self, OriginSchemaName):
        self._OriginSchemaName = OriginSchemaName

    @property
    def DsEnvType(self):
        """0 or Not Returned. Undefined, 1. generation 2. development
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DsEnvType

    @DsEnvType.setter
    def DsEnvType(self, DsEnvType):
        self._DsEnvType = DsEnvType


    def _deserialize(self, params):
        self._DatasourceName = params.get("DatasourceName")
        self._DatasourceId = params.get("DatasourceId")
        self._DatabaseName = params.get("DatabaseName")
        self._DatabaseId = params.get("DatabaseId")
        self._InstanceId = params.get("InstanceId")
        self._DatasourceType = params.get("DatasourceType")
        self._OriginDatabaseName = params.get("OriginDatabaseName")
        self._OriginSchemaName = params.get("OriginSchemaName")
        self._DsEnvType = params.get("DsEnvType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatabaseMeta(AbstractModel):
    """Data Source Metadata

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _MetastoreType: Technology Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatasourceId: Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: int
        :param _ProjectName: Project English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _Category: Data Source Category: Binding Engine, Binding Database, Available Values: DB, ENGINE
Note: This field may return null, indicating that no valid value can be obtained.
        :type Category: str
        :param _Description: Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Instance: Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Instance: str
        :param _Region: Data Source Engine Region
Note: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        :param _Status: Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        :param _DatabaseName: Database Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _ProjectDisplayName: Project Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectDisplayName: str
        :param _OwnerAccountName: Person in Charge Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerAccountName: str
        :param _DisplayName: Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DisplayName: str
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _Catalog: Data Source Type: hive/mysql/hbase, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type Catalog: str
        :param _StorageSize: Storage Size in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSize: int
        :param _StorageSizeWithUnit: Formatted Storage Size, with unit, e.g., 12B
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSizeWithUnit: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        """
        self._ProjectId = None
        self._MetastoreType = None
        self._DatasourceName = None
        self._DatasourceId = None
        self._ProjectName = None
        self._Category = None
        self._Description = None
        self._Instance = None
        self._Region = None
        self._Status = None
        self._DatabaseName = None
        self._ProjectDisplayName = None
        self._OwnerAccountName = None
        self._DisplayName = None
        self._DatabaseId = None
        self._Catalog = None
        self._StorageSize = None
        self._StorageSizeWithUnit = None
        self._CreateTime = None

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def MetastoreType(self):
        """Technology Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatasourceId(self):
        """Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ProjectName(self):
        """Project English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Category(self):
        """Data Source Category: Binding Engine, Binding Database, Available Values: DB, ENGINE
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Description(self):
        """Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Instance(self):
        """Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Region(self):
        """Data Source Engine Region
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Status(self):
        """Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def DatabaseName(self):
        """Database Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def ProjectDisplayName(self):
        """Project Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectDisplayName

    @ProjectDisplayName.setter
    def ProjectDisplayName(self, ProjectDisplayName):
        self._ProjectDisplayName = ProjectDisplayName

    @property
    def OwnerAccountName(self):
        """Person in Charge Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerAccountName

    @OwnerAccountName.setter
    def OwnerAccountName(self, OwnerAccountName):
        self._OwnerAccountName = OwnerAccountName

    @property
    def DisplayName(self):
        """Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def Catalog(self):
        """Data Source Type: hive/mysql/hbase, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Catalog

    @Catalog.setter
    def Catalog(self, Catalog):
        self._Catalog = Catalog

    @property
    def StorageSize(self):
        """Storage Size in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StorageSize

    @StorageSize.setter
    def StorageSize(self, StorageSize):
        self._StorageSize = StorageSize

    @property
    def StorageSizeWithUnit(self):
        """Formatted Storage Size, with unit, e.g., 12B
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageSizeWithUnit

    @StorageSizeWithUnit.setter
    def StorageSizeWithUnit(self, StorageSizeWithUnit):
        self._StorageSizeWithUnit = StorageSizeWithUnit

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._MetastoreType = params.get("MetastoreType")
        self._DatasourceName = params.get("DatasourceName")
        self._DatasourceId = params.get("DatasourceId")
        self._ProjectName = params.get("ProjectName")
        self._Category = params.get("Category")
        self._Description = params.get("Description")
        self._Instance = params.get("Instance")
        self._Region = params.get("Region")
        self._Status = params.get("Status")
        self._DatabaseName = params.get("DatabaseName")
        self._ProjectDisplayName = params.get("ProjectDisplayName")
        self._OwnerAccountName = params.get("OwnerAccountName")
        self._DisplayName = params.get("DisplayName")
        self._DatabaseId = params.get("DatabaseId")
        self._Catalog = params.get("Catalog")
        self._StorageSize = params.get("StorageSize")
        self._StorageSizeWithUnit = params.get("StorageSizeWithUnit")
        self._CreateTime = params.get("CreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasourceBaseInfo(AbstractModel):
    """Data Source Object

    """

    def __init__(self):
        r"""
        :param _DatabaseNames: If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseNames: list of str
        :param _Description: Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _ID: Data Source ID
        :type ID: int
        :param _Instance: Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Instance: str
        :param _Name: Data Source Name, cannot be empty under the same SpaceName
        :type Name: str
        :param _Region: Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        :param _Type: Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _ClusterId: Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterId: str
        :param _Version: Version information of the data source
Note: This field may return null, indicating that no valid value can be obtained.
        :type Version: str
        :param _ParamsString: Attached parameter information of the data source Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParamsString: str
        :param _Category: Distinguish whether the data source type is a custom Definition source or a system source
Note: This field may return null, indicating that no valid value can be obtained.
        :type Category: str
        """
        self._DatabaseNames = None
        self._Description = None
        self._ID = None
        self._Instance = None
        self._Name = None
        self._Region = None
        self._Type = None
        self._ClusterId = None
        self._Version = None
        self._ParamsString = None
        self._Category = None

    @property
    def DatabaseNames(self):
        """If the data source list is bound to a database, then it is the database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._DatabaseNames

    @DatabaseNames.setter
    def DatabaseNames(self, DatabaseNames):
        self._DatabaseNames = DatabaseNames

    @property
    def Description(self):
        """Data source description informationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ID(self):
        """Data Source ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def Instance(self):
        """Instance ID of the data source engine, e.g., CDB Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Name(self):
        """Data Source Name, cannot be empty under the same SpaceName
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Region(self):
        """Region to which the data source engine belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Type(self):
        """Data Source Type: enumerated valuesNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ClusterId(self):
        """Cluster ID to which the data source belongs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Version(self):
        """Version information of the data source
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def ParamsString(self):
        """Attached parameter information of the data source Params JSON string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParamsString

    @ParamsString.setter
    def ParamsString(self, ParamsString):
        self._ParamsString = ParamsString

    @property
    def Category(self):
        """Distinguish whether the data source type is a custom Definition source or a system source
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category


    def _deserialize(self, params):
        self._DatabaseNames = params.get("DatabaseNames")
        self._Description = params.get("Description")
        self._ID = params.get("ID")
        self._Instance = params.get("Instance")
        self._Name = params.get("Name")
        self._Region = params.get("Region")
        self._Type = params.get("Type")
        self._ClusterId = params.get("ClusterId")
        self._Version = params.get("Version")
        self._ParamsString = params.get("ParamsString")
        self._Category = params.get("Category")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteCustomFunctionRequest(AbstractModel):
    """DeleteCustomFunction request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterIdentifier: Cluster Instance ID
        :type ClusterIdentifier: str
        :param _FunctionId: Function ID
        :type FunctionId: str
        :param _ProjectId: Project ID, required
        :type ProjectId: str
        :param _FunctionName: Function Name
        :type FunctionName: str
        :param _FunctionType: Function Type, HIVE, SPARK, DLC, CDW_POSTGRESQL
        :type FunctionType: str
        :param _DatabaseName: Database name
        :type DatabaseName: str
        :param _SchemaName: Pattern name
        :type SchemaName: str
        :param _CommandFormat: Function Command Format
        :type CommandFormat: str
        """
        self._ClusterIdentifier = None
        self._FunctionId = None
        self._ProjectId = None
        self._FunctionName = None
        self._FunctionType = None
        self._DatabaseName = None
        self._SchemaName = None
        self._CommandFormat = None

    @property
    def ClusterIdentifier(self):
        """Cluster Instance ID
        :rtype: str
        """
        return self._ClusterIdentifier

    @ClusterIdentifier.setter
    def ClusterIdentifier(self, ClusterIdentifier):
        self._ClusterIdentifier = ClusterIdentifier

    @property
    def FunctionId(self):
        """Function ID
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ProjectId(self):
        """Project ID, required
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FunctionName(self):
        """Function Name
        :rtype: str
        """
        return self._FunctionName

    @FunctionName.setter
    def FunctionName(self, FunctionName):
        self._FunctionName = FunctionName

    @property
    def FunctionType(self):
        """Function Type, HIVE, SPARK, DLC, CDW_POSTGRESQL
        :rtype: str
        """
        return self._FunctionType

    @FunctionType.setter
    def FunctionType(self, FunctionType):
        self._FunctionType = FunctionType

    @property
    def DatabaseName(self):
        """Database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def SchemaName(self):
        """Pattern name
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName

    @property
    def CommandFormat(self):
        """Function Command Format
        :rtype: str
        """
        return self._CommandFormat

    @CommandFormat.setter
    def CommandFormat(self, CommandFormat):
        self._CommandFormat = CommandFormat


    def _deserialize(self, params):
        self._ClusterIdentifier = params.get("ClusterIdentifier")
        self._FunctionId = params.get("FunctionId")
        self._ProjectId = params.get("ProjectId")
        self._FunctionName = params.get("FunctionName")
        self._FunctionType = params.get("FunctionType")
        self._DatabaseName = params.get("DatabaseName")
        self._SchemaName = params.get("SchemaName")
        self._CommandFormat = params.get("CommandFormat")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteCustomFunctionResponse(AbstractModel):
    """DeleteCustomFunction response structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type FunctionId: str
        :param _ErrorMessage: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FunctionId = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def FunctionId(self):
        """Function ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ErrorMessage(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class DeleteDataSourcesRequest(AbstractModel):
    """DeleteDataSources request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID List
        :type Ids: list of int non-negative
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Ids = None
        self._ProjectId = None

    @property
    def Ids(self):
        """ID List
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteDataSourcesResponse(AbstractModel):
    """DeleteDataSources response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteDsFolderRequest(AbstractModel):
    """DeleteDsFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderId: Folder ID
        :type FolderId: str
        """
        self._ProjectId = None
        self._FolderId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderId(self):
        """Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderId = params.get("FolderId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteDsFolderResponse(AbstractModel):
    """DeleteDsFolder response structure.

    """

    def __init__(self):
        r"""
        :param _Data: true means deletion successful, false means deletion failed
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """true means deletion successful, false means deletion failed
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteFilePathRequest(AbstractModel):
    """DeleteFilePath request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ResourceIds: Resource ID
        :type ResourceIds: list of str
        :param _UseStatus: Usage Status- true
- false
        :type UseStatus: str
        :param _FilePaths: File path
        :type FilePaths: list of str
        """
        self._ProjectId = None
        self._ResourceIds = None
        self._UseStatus = None
        self._FilePaths = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ResourceIds(self):
        """Resource ID
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def UseStatus(self):
        """Usage Status- true
- false
        :rtype: str
        """
        return self._UseStatus

    @UseStatus.setter
    def UseStatus(self, UseStatus):
        self._UseStatus = UseStatus

    @property
    def FilePaths(self):
        """File path
        :rtype: list of str
        """
        return self._FilePaths

    @FilePaths.setter
    def FilePaths(self, FilePaths):
        self._FilePaths = FilePaths


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ResourceIds = params.get("ResourceIds")
        self._UseStatus = params.get("UseStatus")
        self._FilePaths = params.get("FilePaths")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteFilePathResponse(AbstractModel):
    """DeleteFilePath response structure.

    """

    def __init__(self):
        r"""
        :param _UserFileList: File ListNote: This field may return null, indicating that no valid value can be obtained.
        :type UserFileList: list of UserFileInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UserFileList = None
        self._RequestId = None

    @property
    def UserFileList(self):
        """File ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of UserFileInfo
        """
        return self._UserFileList

    @UserFileList.setter
    def UserFileList(self, UserFileList):
        self._UserFileList = UserFileList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("UserFileList") is not None:
            self._UserFileList = []
            for item in params.get("UserFileList"):
                obj = UserFileInfo()
                obj._deserialize(item)
                self._UserFileList.append(obj)
        self._RequestId = params.get("RequestId")


class DeleteFileRequest(AbstractModel):
    """DeleteFile request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ResourceId: Resource ID
        :type ResourceId: str
        """
        self._ProjectId = None
        self._ResourceId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteFileResponse(AbstractModel):
    """DeleteFile response structure.

    """

    def __init__(self):
        r"""
        :param _Result: Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type Result: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Result = None
        self._RequestId = None

    @property
    def Result(self):
        """Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class DeleteIntegrationNodeRequest(AbstractModel):
    """DeleteIntegrationNode request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Node ID
        :type Id: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Id = None
        self._ProjectId = None

    @property
    def Id(self):
        """Node ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteIntegrationNodeResponse(AbstractModel):
    """DeleteIntegrationNode response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Indication of whether the deletion was successful
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Indication of whether the deletion was successful
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteIntegrationTaskRequest(AbstractModel):
    """DeleteIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteIntegrationTaskResponse(AbstractModel):
    """DeleteIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task Deletion Success or Failure Indicator
        :type Data: bool
        :param _DeleteFlag: Task Deletion Success or Failure Indicator
0 indicates deletion was successful
1 indicates failure, see DeleteErrInfo for the reason
100 indicates running or suspend task can't be deleted, the reason will also be written in DeleteErrInfo
Note: This field may return null, indicating that no valid value can be obtained.
        :type DeleteFlag: int
        :param _DeleteErrInfo: Reason for Deletion Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type DeleteErrInfo: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._DeleteFlag = None
        self._DeleteErrInfo = None
        self._RequestId = None

    @property
    def Data(self):
        """Task Deletion Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def DeleteFlag(self):
        """Task Deletion Success or Failure Indicator
0 indicates deletion was successful
1 indicates failure, see DeleteErrInfo for the reason
100 indicates running or suspend task can't be deleted, the reason will also be written in DeleteErrInfo
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DeleteFlag

    @DeleteFlag.setter
    def DeleteFlag(self, DeleteFlag):
        self._DeleteFlag = DeleteFlag

    @property
    def DeleteErrInfo(self):
        """Reason for Deletion Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DeleteErrInfo

    @DeleteErrInfo.setter
    def DeleteErrInfo(self, DeleteErrInfo):
        self._DeleteErrInfo = DeleteErrInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._DeleteFlag = params.get("DeleteFlag")
        self._DeleteErrInfo = params.get("DeleteErrInfo")
        self._RequestId = params.get("RequestId")


class DeleteOfflineTaskRequest(AbstractModel):
    """DeleteOfflineTask request structure.

    """

    def __init__(self):
        r"""
        :param _OperatorName: Operator's name
        :type OperatorName: str
        :param _ProjectId: Project/workspace ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _VirtualFlag: Virtual task marker (defaults to false, consistent with previous scheduling interfaces)
        :type VirtualFlag: bool
        """
        self._OperatorName = None
        self._ProjectId = None
        self._TaskId = None
        self._VirtualFlag = None

    @property
    def OperatorName(self):
        """Operator's name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def ProjectId(self):
        """Project/workspace ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VirtualFlag(self):
        """Virtual task marker (defaults to false, consistent with previous scheduling interfaces)
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag


    def _deserialize(self, params):
        self._OperatorName = params.get("OperatorName")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._VirtualFlag = params.get("VirtualFlag")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteOfflineTaskResponse(AbstractModel):
    """DeleteOfflineTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteProjectParamDsRequest(AbstractModel):
    """DeleteProjectParamDs request structure.

    """

    def __init__(self):
        r"""
        :param _ParamKey: Parameter Name
        :type ParamKey: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._ParamKey = None
        self._ProjectId = None

    @property
    def ParamKey(self):
        """Parameter Name
        :rtype: str
        """
        return self._ParamKey

    @ParamKey.setter
    def ParamKey(self, ParamKey):
        self._ParamKey = ParamKey

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._ParamKey = params.get("ParamKey")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteProjectParamDsResponse(AbstractModel):
    """DeleteProjectParamDs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result true Deleted Successfully
false Deletion Failed
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result true Deleted Successfully
false Deletion Failed
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteProjectUsersRequest(AbstractModel):
    """DeleteProjectUsers request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _UserIds: User ID list
        :type UserIds: list of str
        """
        self._ProjectId = None
        self._UserIds = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UserIds(self):
        """User ID list
        :rtype: list of str
        """
        return self._UserIds

    @UserIds.setter
    def UserIds(self, UserIds):
        self._UserIds = UserIds


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._UserIds = params.get("UserIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteProjectUsersResponse(AbstractModel):
    """DeleteProjectUsers response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteResourceFileRequest(AbstractModel):
    """DeleteResourceFile request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ResourceId: Resource ID
        :type ResourceId: str
        """
        self._ProjectId = None
        self._ResourceId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteResourceFileResponse(AbstractModel):
    """DeleteResourceFile response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Resource Deletion Result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Resource Deletion Result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteResourceFilesRequest(AbstractModel):
    """DeleteResourceFiles request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _UseStatus: Usage Status
        :type UseStatus: bool
        :param _ResourceIds: Resource ID List
        :type ResourceIds: list of str
        :param _FilePaths: Resource Path List
        :type FilePaths: list of str
        """
        self._ProjectId = None
        self._UseStatus = None
        self._ResourceIds = None
        self._FilePaths = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UseStatus(self):
        """Usage Status
        :rtype: bool
        """
        return self._UseStatus

    @UseStatus.setter
    def UseStatus(self, UseStatus):
        self._UseStatus = UseStatus

    @property
    def ResourceIds(self):
        """Resource ID List
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def FilePaths(self):
        """Resource Path List
        :rtype: list of str
        """
        return self._FilePaths

    @FilePaths.setter
    def FilePaths(self, FilePaths):
        self._FilePaths = FilePaths


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._UseStatus = params.get("UseStatus")
        self._ResourceIds = params.get("ResourceIds")
        self._FilePaths = params.get("FilePaths")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteResourceFilesResponse(AbstractModel):
    """DeleteResourceFiles response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Resource Batch Deletion Result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Resource Batch Deletion Result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteResourceRequest(AbstractModel):
    """DeleteResource request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ResourceId: Resource ID
        :type ResourceId: str
        """
        self._ProjectId = None
        self._ResourceId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteResourceResponse(AbstractModel):
    """DeleteResource response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteRuleRequest(AbstractModel):
    """DeleteRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Quality Rule ID
        :type RuleId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._RuleId = None
        self._ProjectId = None

    @property
    def RuleId(self):
        """Quality Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRuleResponse(AbstractModel):
    """DeleteRule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Whether Deletion is Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Whether Deletion is Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteRuleTemplateRequest(AbstractModel):
    """DeleteRuleTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Ids: Template ID List
        :type Ids: list of int non-negative
        """
        self._ProjectId = None
        self._Ids = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Ids(self):
        """Template ID List
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRuleTemplateResponse(AbstractModel):
    """DeleteRuleTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Deleted successfully
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Deleted successfully
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteTaskAlarmRegularRequest(AbstractModel):
    """DeleteTaskAlarmRegular request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Primary key ID
        :type Id: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _TaskType: Task Type (201 represents Real-time task, 202 represents Offline task)
        :type TaskType: int
        """
        self._Id = None
        self._ProjectId = None
        self._TaskId = None
        self._TaskType = None

    @property
    def Id(self):
        """Primary key ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskType(self):
        """Task Type (201 represents Real-time task, 202 represents Offline task)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTaskAlarmRegularResponse(AbstractModel):
    """DeleteTaskAlarmRegular response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Delete Result (true for success, false for failure)
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Delete Result (true for success, false for failure)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteTaskDsRequest(AbstractModel):
    """DeleteTaskDs request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DeleteScript: Delete script?
true: delete
false: do not delete
Default false if not passed
        :type DeleteScript: bool
        :param _OperateInform: Task operation: Notify downstream task owners?
true: notify
false: do not notify
Default false if not passed
        :type OperateInform: bool
        :param _TaskId: Task IDChoose either VirtualTaskId or
        :type TaskId: str
        :param _VirtualTaskId: Virtual task id
Either TaskId or this field is optional

        :type VirtualTaskId: str
        :param _VirtualFlag: Virtual task flag
true: It is a virtual task
false: It is not a virtual task
Default false if not passed
        :type VirtualFlag: bool
        :param _DeleteMode: Task deletion method
true: Do not force fail downstream task instances
false: Force fail downstream task instances
If not specified, the default is false

        :type DeleteMode: bool
        """
        self._ProjectId = None
        self._DeleteScript = None
        self._OperateInform = None
        self._TaskId = None
        self._VirtualTaskId = None
        self._VirtualFlag = None
        self._DeleteMode = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DeleteScript(self):
        """Delete script?
true: delete
false: do not delete
Default false if not passed
        :rtype: bool
        """
        return self._DeleteScript

    @DeleteScript.setter
    def DeleteScript(self, DeleteScript):
        self._DeleteScript = DeleteScript

    @property
    def OperateInform(self):
        """Task operation: Notify downstream task owners?
true: notify
false: do not notify
Default false if not passed
        :rtype: bool
        """
        return self._OperateInform

    @OperateInform.setter
    def OperateInform(self, OperateInform):
        self._OperateInform = OperateInform

    @property
    def TaskId(self):
        """Task IDChoose either VirtualTaskId or
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VirtualTaskId(self):
        """Virtual task id
Either TaskId or this field is optional

        :rtype: str
        """
        return self._VirtualTaskId

    @VirtualTaskId.setter
    def VirtualTaskId(self, VirtualTaskId):
        self._VirtualTaskId = VirtualTaskId

    @property
    def VirtualFlag(self):
        """Virtual task flag
true: It is a virtual task
false: It is not a virtual task
Default false if not passed
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag

    @property
    def DeleteMode(self):
        """Task deletion method
true: Do not force fail downstream task instances
false: Force fail downstream task instances
If not specified, the default is false

        :rtype: bool
        """
        return self._DeleteMode

    @DeleteMode.setter
    def DeleteMode(self, DeleteMode):
        self._DeleteMode = DeleteMode


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._DeleteScript = params.get("DeleteScript")
        self._OperateInform = params.get("OperateInform")
        self._TaskId = params.get("TaskId")
        self._VirtualTaskId = params.get("VirtualTaskId")
        self._VirtualFlag = params.get("VirtualFlag")
        self._DeleteMode = params.get("DeleteMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTaskDsResponse(AbstractModel):
    """DeleteTaskDs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Delete successful?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DeleteWorkflowByIdRequest(AbstractModel):
    """DeleteWorkflowById request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DeleteMode: Handling method for downstream tasks after deletion, true: all downstream tasks run normally false: all downstream tasks fail
        :type DeleteMode: bool
        :param _EnableNotify: Notify downstream task owners after task deletion, true: notify false: do not notify
        :type EnableNotify: bool
        """
        self._WorkflowId = None
        self._ProjectId = None
        self._DeleteMode = None
        self._EnableNotify = None

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DeleteMode(self):
        """Handling method for downstream tasks after deletion, true: all downstream tasks run normally false: all downstream tasks fail
        :rtype: bool
        """
        return self._DeleteMode

    @DeleteMode.setter
    def DeleteMode(self, DeleteMode):
        self._DeleteMode = DeleteMode

    @property
    def EnableNotify(self):
        """Notify downstream task owners after task deletion, true: notify false: do not notify
        :rtype: bool
        """
        return self._EnableNotify

    @EnableNotify.setter
    def EnableNotify(self, EnableNotify):
        self._EnableNotify = EnableNotify


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._ProjectId = params.get("ProjectId")
        self._DeleteMode = params.get("DeleteMode")
        self._EnableNotify = params.get("EnableNotify")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteWorkflowByIdResponse(AbstractModel):
    """DeleteWorkflowById response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DependencyConfig(AbstractModel):
    """Dependency Configuration

    """

    def __init__(self):
        r"""
        :param _DependConfType: Only five types of periodic execution dependency configurations: HOUR, DAY, WEEK, MONTH, YEAR, CRONTAB, MINUTE
        :type DependConfType: str
        :param _SubordinateCyclicType: Dependency Configuration Subordinate Period Type, CURRENT_HOUR, PREVIOUS_HOUR, CURRENT_DAY, PREVIOUS_DAY, PREVIOUS_WEEK, PREVIOUS_FRIDAY, PREVIOUS_WEEKEND, CURRENT_MONTH, PREVIOUS_MONTH, PREVIOUS_END_OF_MONTH
     * PREVIOUS_BEGIN_OF_MONTH,ALL_MONTH_OF_YEAR,ALL_DAY_OF_YEAR,CURRENT_YEAR,CURRENT,CURRENT_MINUTE,PREVIOUS_MINUTE_CYCLE,PREVIOUS_HOUR_CYCLE
        :type SubordinateCyclicType: str
        :param _DependencyStrategy: WAITING, waiting (default policy) EXECUTING: executing
        :type DependencyStrategy: str
        :param _ParentTask: Parent Task Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentTask: :class:`tencentcloud.wedata.v20210820.models.TaskInnerInfo`
        :param _SonTask: Subtask Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type SonTask: :class:`tencentcloud.wedata.v20210820.models.TaskInnerInfo`
        """
        self._DependConfType = None
        self._SubordinateCyclicType = None
        self._DependencyStrategy = None
        self._ParentTask = None
        self._SonTask = None

    @property
    def DependConfType(self):
        """Only five types of periodic execution dependency configurations: HOUR, DAY, WEEK, MONTH, YEAR, CRONTAB, MINUTE
        :rtype: str
        """
        return self._DependConfType

    @DependConfType.setter
    def DependConfType(self, DependConfType):
        self._DependConfType = DependConfType

    @property
    def SubordinateCyclicType(self):
        """Dependency Configuration Subordinate Period Type, CURRENT_HOUR, PREVIOUS_HOUR, CURRENT_DAY, PREVIOUS_DAY, PREVIOUS_WEEK, PREVIOUS_FRIDAY, PREVIOUS_WEEKEND, CURRENT_MONTH, PREVIOUS_MONTH, PREVIOUS_END_OF_MONTH
     * PREVIOUS_BEGIN_OF_MONTH,ALL_MONTH_OF_YEAR,ALL_DAY_OF_YEAR,CURRENT_YEAR,CURRENT,CURRENT_MINUTE,PREVIOUS_MINUTE_CYCLE,PREVIOUS_HOUR_CYCLE
        :rtype: str
        """
        return self._SubordinateCyclicType

    @SubordinateCyclicType.setter
    def SubordinateCyclicType(self, SubordinateCyclicType):
        self._SubordinateCyclicType = SubordinateCyclicType

    @property
    def DependencyStrategy(self):
        """WAITING, waiting (default policy) EXECUTING: executing
        :rtype: str
        """
        return self._DependencyStrategy

    @DependencyStrategy.setter
    def DependencyStrategy(self, DependencyStrategy):
        self._DependencyStrategy = DependencyStrategy

    @property
    def ParentTask(self):
        """Parent Task Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskInnerInfo`
        """
        return self._ParentTask

    @ParentTask.setter
    def ParentTask(self, ParentTask):
        self._ParentTask = ParentTask

    @property
    def SonTask(self):
        """Subtask Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskInnerInfo`
        """
        return self._SonTask

    @SonTask.setter
    def SonTask(self, SonTask):
        self._SonTask = SonTask


    def _deserialize(self, params):
        self._DependConfType = params.get("DependConfType")
        self._SubordinateCyclicType = params.get("SubordinateCyclicType")
        self._DependencyStrategy = params.get("DependencyStrategy")
        if params.get("ParentTask") is not None:
            self._ParentTask = TaskInnerInfo()
            self._ParentTask._deserialize(params.get("ParentTask"))
        if params.get("SonTask") is not None:
            self._SonTask = TaskInnerInfo()
            self._SonTask._deserialize(params.get("SonTask"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlarmEventsRequest(AbstractModel):
    """DescribeAlarmEvents request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Current Page
        :type PageNumber: int
        :param _PageSize: Number of records per page
        :type PageSize: int
        :param _Filters: Filter criteria (key can be: AlarmLevel, AlarmIndicator, KeyWord)
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields (AlarmTime)
        :type OrderFields: list of OrderField
        :param _TaskType: Type (201 for real-time, 202 for offline)
        :type TaskType: int
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _MonitorType: Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :type MonitorType: int
        """
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._TaskType = None
        self._StartTime = None
        self._EndTime = None
        self._MonitorType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Current Page
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of records per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter criteria (key can be: AlarmLevel, AlarmIndicator, KeyWord)
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields (AlarmTime)
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def TaskType(self):
        """Type (201 for real-time, 202 for offline)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def MonitorType(self):
        """Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._TaskType = params.get("TaskType")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._MonitorType = params.get("MonitorType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlarmEventsResponse(AbstractModel):
    """DescribeAlarmEvents response structure.

    """

    def __init__(self):
        r"""
        :param _AlarmEventInfoList: Alert event listNote: This field may return null, indicating that no valid value can be obtained.
        :type AlarmEventInfoList: list of AlarmEventInfo
        :param _TotalCount: Number of records
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AlarmEventInfoList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AlarmEventInfoList(self):
        """Alert event listNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of AlarmEventInfo
        """
        return self._AlarmEventInfoList

    @AlarmEventInfoList.setter
    def AlarmEventInfoList(self, AlarmEventInfoList):
        self._AlarmEventInfoList = AlarmEventInfoList

    @property
    def TotalCount(self):
        """Number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AlarmEventInfoList") is not None:
            self._AlarmEventInfoList = []
            for item in params.get("AlarmEventInfoList"):
                obj = AlarmEventInfo()
                obj._deserialize(item)
                self._AlarmEventInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAlarmReceiverRequest(AbstractModel):
    """DescribeAlarmReceiver request structure.

    """

    def __init__(self):
        r"""
        :param _AlarmId: Alert ID
        :type AlarmId: str
        :param _PageNumber: Current Page
        :type PageNumber: int
        :param _PageSize: Number of records per page
        :type PageSize: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Type
        :type TaskType: int
        :param _AlarmRecipient: Alarm Recipient ID (comma-separated)
        :type AlarmRecipient: str
        :param _AlarmRecipientName: Name of alarm recipient (comma-separated)
        :type AlarmRecipientName: str
        :param _AlarmTime: Alarm Time
        :type AlarmTime: str
        :param _MessageId: Message ID
        :type MessageId: str
        :param _RecordId: Alert Record ID
        :type RecordId: int
        :param _MonitorType: Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :type MonitorType: int
        """
        self._AlarmId = None
        self._PageNumber = None
        self._PageSize = None
        self._ProjectId = None
        self._TaskType = None
        self._AlarmRecipient = None
        self._AlarmRecipientName = None
        self._AlarmTime = None
        self._MessageId = None
        self._RecordId = None
        self._MonitorType = None

    @property
    def AlarmId(self):
        """Alert ID
        :rtype: str
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def PageNumber(self):
        """Current Page
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of records per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Type
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def AlarmRecipient(self):
        """Alarm Recipient ID (comma-separated)
        :rtype: str
        """
        return self._AlarmRecipient

    @AlarmRecipient.setter
    def AlarmRecipient(self, AlarmRecipient):
        self._AlarmRecipient = AlarmRecipient

    @property
    def AlarmRecipientName(self):
        """Name of alarm recipient (comma-separated)
        :rtype: str
        """
        return self._AlarmRecipientName

    @AlarmRecipientName.setter
    def AlarmRecipientName(self, AlarmRecipientName):
        self._AlarmRecipientName = AlarmRecipientName

    @property
    def AlarmTime(self):
        """Alarm Time
        :rtype: str
        """
        return self._AlarmTime

    @AlarmTime.setter
    def AlarmTime(self, AlarmTime):
        self._AlarmTime = AlarmTime

    @property
    def MessageId(self):
        """Message ID
        :rtype: str
        """
        return self._MessageId

    @MessageId.setter
    def MessageId(self, MessageId):
        self._MessageId = MessageId

    @property
    def RecordId(self):
        """Alert Record ID
        :rtype: int
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def MonitorType(self):
        """Monitored Object Type (1: All Tasks, 2: Assigned Task, 3: Designated Responsible Person, 4: Specified Resource Group)
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType


    def _deserialize(self, params):
        self._AlarmId = params.get("AlarmId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        self._AlarmRecipient = params.get("AlarmRecipient")
        self._AlarmRecipientName = params.get("AlarmRecipientName")
        self._AlarmTime = params.get("AlarmTime")
        self._MessageId = params.get("MessageId")
        self._RecordId = params.get("RecordId")
        self._MonitorType = params.get("MonitorType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlarmReceiverResponse(AbstractModel):
    """DescribeAlarmReceiver response structure.

    """

    def __init__(self):
        r"""
        :param _AlarmReceiverInfoList: Alert Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmReceiverInfoList: list of AlarmReceiverInfo
        :param _TotalCount: Number of records
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AlarmReceiverInfoList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AlarmReceiverInfoList(self):
        """Alert Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of AlarmReceiverInfo
        """
        return self._AlarmReceiverInfoList

    @AlarmReceiverInfoList.setter
    def AlarmReceiverInfoList(self, AlarmReceiverInfoList):
        self._AlarmReceiverInfoList = AlarmReceiverInfoList

    @property
    def TotalCount(self):
        """Number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AlarmReceiverInfoList") is not None:
            self._AlarmReceiverInfoList = []
            for item in params.get("AlarmReceiverInfoList"):
                obj = AlarmReceiverInfo()
                obj._deserialize(item)
                self._AlarmReceiverInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAllByFolderNewRequest(AbstractModel):
    """DescribeAllByFolderNew request structure.

    """

    def __init__(self):
        r"""
        :param _Folder: Folder Attributes
        :type Folder: :class:`tencentcloud.wedata.v20210820.models.FolderOpsDto`
        :param _Workflows: Workflow List
        :type Workflows: list of WorkflowCanvasOpsDto
        :param _TargetFolderId: Target File ID
        :type TargetFolderId: str
        :param _KeyWords: Keyword
        :type KeyWords: str
        :param _ParentsFolderId: Parent File ID
        :type ParentsFolderId: str
        :param _IsAddWorkflow: Pull Folder List
        :type IsAddWorkflow: str
        :param _TaskStates: Task Status
        :type TaskStates: list of str
        :param _FindType: Search type
        :type FindType: str
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Folder = None
        self._Workflows = None
        self._TargetFolderId = None
        self._KeyWords = None
        self._ParentsFolderId = None
        self._IsAddWorkflow = None
        self._TaskStates = None
        self._FindType = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Folder(self):
        """Folder Attributes
        :rtype: :class:`tencentcloud.wedata.v20210820.models.FolderOpsDto`
        """
        return self._Folder

    @Folder.setter
    def Folder(self, Folder):
        self._Folder = Folder

    @property
    def Workflows(self):
        """Workflow List
        :rtype: list of WorkflowCanvasOpsDto
        """
        return self._Workflows

    @Workflows.setter
    def Workflows(self, Workflows):
        self._Workflows = Workflows

    @property
    def TargetFolderId(self):
        """Target File ID
        :rtype: str
        """
        return self._TargetFolderId

    @TargetFolderId.setter
    def TargetFolderId(self, TargetFolderId):
        self._TargetFolderId = TargetFolderId

    @property
    def KeyWords(self):
        """Keyword
        :rtype: str
        """
        return self._KeyWords

    @KeyWords.setter
    def KeyWords(self, KeyWords):
        self._KeyWords = KeyWords

    @property
    def ParentsFolderId(self):
        """Parent File ID
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId

    @property
    def IsAddWorkflow(self):
        """Pull Folder List
        :rtype: str
        """
        return self._IsAddWorkflow

    @IsAddWorkflow.setter
    def IsAddWorkflow(self, IsAddWorkflow):
        self._IsAddWorkflow = IsAddWorkflow

    @property
    def TaskStates(self):
        """Task Status
        :rtype: list of str
        """
        return self._TaskStates

    @TaskStates.setter
    def TaskStates(self, TaskStates):
        self._TaskStates = TaskStates

    @property
    def FindType(self):
        """Search type
        :rtype: str
        """
        return self._FindType

    @FindType.setter
    def FindType(self, FindType):
        self._FindType = FindType

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Folder") is not None:
            self._Folder = FolderOpsDto()
            self._Folder._deserialize(params.get("Folder"))
        if params.get("Workflows") is not None:
            self._Workflows = []
            for item in params.get("Workflows"):
                obj = WorkflowCanvasOpsDto()
                obj._deserialize(item)
                self._Workflows.append(obj)
        self._TargetFolderId = params.get("TargetFolderId")
        self._KeyWords = params.get("KeyWords")
        self._ParentsFolderId = params.get("ParentsFolderId")
        self._IsAddWorkflow = params.get("IsAddWorkflow")
        self._TaskStates = params.get("TaskStates")
        self._FindType = params.get("FindType")
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAllByFolderNewResponse(AbstractModel):
    """DescribeAllByFolderNew response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result Set
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CollectionFolderOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result Set
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CollectionFolderOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CollectionFolderOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeApply(AbstractModel):
    """Application List

    """

    def __init__(self):
        r"""
        :param _Rows: Application List Details
        :type Rows: list of Apply
        :param _TotalPageNumber: Total Pagination Pages
        :type TotalPageNumber: int
        :param _TotalCount: Total Count
        :type TotalCount: int
        :param _PageNumber: Page number
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        """
        self._Rows = None
        self._TotalPageNumber = None
        self._TotalCount = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def Rows(self):
        """Application List Details
        :rtype: list of Apply
        """
        return self._Rows

    @Rows.setter
    def Rows(self, Rows):
        self._Rows = Rows

    @property
    def TotalPageNumber(self):
        """Total Pagination Pages
        :rtype: int
        """
        return self._TotalPageNumber

    @TotalPageNumber.setter
    def TotalPageNumber(self, TotalPageNumber):
        self._TotalPageNumber = TotalPageNumber

    @property
    def TotalCount(self):
        """Total Count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PageNumber(self):
        """Page number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        if params.get("Rows") is not None:
            self._Rows = []
            for item in params.get("Rows"):
                obj = Apply()
                obj._deserialize(item)
                self._Rows.append(obj)
        self._TotalPageNumber = params.get("TotalPageNumber")
        self._TotalCount = params.get("TotalCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeApproveListRequest(AbstractModel):
    """DescribeApproveList request structure.

    """

    def __init__(self):
        r"""
        :param _ApproveClassification: Approval Category Key
        :type ApproveClassification: str
        :param _PageSize: Page size
        :type PageSize: int
        :param _PageNumber: Pagination Number
        :type PageNumber: int
        :param _Filters: Custom Definition condition query
        :type Filters: list of FilterOptional
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderFieldOptional
        """
        self._ApproveClassification = None
        self._PageSize = None
        self._PageNumber = None
        self._Filters = None
        self._OrderFields = None

    @property
    def ApproveClassification(self):
        """Approval Category Key
        :rtype: str
        """
        return self._ApproveClassification

    @ApproveClassification.setter
    def ApproveClassification(self, ApproveClassification):
        self._ApproveClassification = ApproveClassification

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def PageNumber(self):
        """Pagination Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def Filters(self):
        """Custom Definition condition query
        :rtype: list of FilterOptional
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderFieldOptional
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields


    def _deserialize(self, params):
        self._ApproveClassification = params.get("ApproveClassification")
        self._PageSize = params.get("PageSize")
        self._PageNumber = params.get("PageNumber")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = FilterOptional()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderFieldOptional()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeApproveListResponse(AbstractModel):
    """DescribeApproveList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Pending Approval List Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DescribeApply`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Pending Approval List Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DescribeApply`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DescribeApply()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeApproveTypeListRequest(AbstractModel):
    """DescribeApproveTypeList request structure.

    """

    def __init__(self):
        r"""
        :param _Classification: Type key
        :type Classification: str
        """
        self._Classification = None

    @property
    def Classification(self):
        """Type key
        :rtype: str
        """
        return self._Classification

    @Classification.setter
    def Classification(self, Classification):
        self._Classification = Classification


    def _deserialize(self, params):
        self._Classification = params.get("Classification")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeApproveTypeListResponse(AbstractModel):
    """DescribeApproveTypeList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Get Approval Category List
        :type Data: list of ApproveType
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Get Approval Category List
        :rtype: list of ApproveType
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ApproveType()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBatchOperateTaskDTO(AbstractModel):
    """Batch Operation Task List

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _WorkflowId: Workflow Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _WorkflowName: Workflow name
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowName: str
        :param _Status: StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _TaskTypeId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeId: int
        :param _TaskTypeDesc: Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeDesc: str
        :param _FolderName: Folder name
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderName: str
        :param _FolderId: Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _InCharge: Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _Submit: Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
        :type Submit: int
        :param _DataEngine: Engine:
presto\SparkJob\SparkSql
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataEngine: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _CycleUnit: Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _ScheduleDesc: Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScheduleDesc: str
        :param _DatasourceId: Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatasourceType: Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceType: str
        """
        self._TaskId = None
        self._TaskName = None
        self._WorkflowId = None
        self._WorkflowName = None
        self._Status = None
        self._TaskTypeId = None
        self._TaskTypeDesc = None
        self._FolderName = None
        self._FolderId = None
        self._InCharge = None
        self._Submit = None
        self._DataEngine = None
        self._UpdateTime = None
        self._CreateTime = None
        self._CycleUnit = None
        self._ScheduleDesc = None
        self._DatasourceId = None
        self._DatasourceType = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def WorkflowId(self):
        """Workflow Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def WorkflowName(self):
        """Workflow name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def Status(self):
        """StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def TaskTypeId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def TaskTypeDesc(self):
        """Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskTypeDesc

    @TaskTypeDesc.setter
    def TaskTypeDesc(self, TaskTypeDesc):
        self._TaskTypeDesc = TaskTypeDesc

    @property
    def FolderName(self):
        """Folder name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def FolderId(self):
        """Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def InCharge(self):
        """Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def Submit(self):
        """Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Submit

    @Submit.setter
    def Submit(self, Submit):
        self._Submit = Submit

    @property
    def DataEngine(self):
        """Engine:
presto\SparkJob\SparkSql
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataEngine

    @DataEngine.setter
    def DataEngine(self, DataEngine):
        self._DataEngine = DataEngine

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def CreateTime(self):
        """Creation time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def CycleUnit(self):
        """Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def ScheduleDesc(self):
        """Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScheduleDesc

    @ScheduleDesc.setter
    def ScheduleDesc(self, ScheduleDesc):
        self._ScheduleDesc = ScheduleDesc

    @property
    def DatasourceId(self):
        """Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceType(self):
        """Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._WorkflowId = params.get("WorkflowId")
        self._WorkflowName = params.get("WorkflowName")
        self._Status = params.get("Status")
        self._TaskTypeId = params.get("TaskTypeId")
        self._TaskTypeDesc = params.get("TaskTypeDesc")
        self._FolderName = params.get("FolderName")
        self._FolderId = params.get("FolderId")
        self._InCharge = params.get("InCharge")
        self._Submit = params.get("Submit")
        self._DataEngine = params.get("DataEngine")
        self._UpdateTime = params.get("UpdateTime")
        self._CreateTime = params.get("CreateTime")
        self._CycleUnit = params.get("CycleUnit")
        self._ScheduleDesc = params.get("ScheduleDesc")
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceType = params.get("DatasourceType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchOperateTaskPage(AbstractModel):
    """Batch Operation Task List Pagination

    """

    def __init__(self):
        r"""
        :param _PageCount: Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _Items: ContentNote: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of DescribeBatchOperateTaskDTO
        :param _TotalCount: Total count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        """
        self._PageCount = None
        self._Items = None
        self._TotalCount = None

    @property
    def PageCount(self):
        """Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def Items(self):
        """ContentNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DescribeBatchOperateTaskDTO
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def TotalCount(self):
        """Total count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount


    def _deserialize(self, params):
        self._PageCount = params.get("PageCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = DescribeBatchOperateTaskDTO()
                obj._deserialize(item)
                self._Items.append(obj)
        self._TotalCount = params.get("TotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchOperateTaskRequest(AbstractModel):
    """DescribeBatchOperateTask request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Page: Page Number
        :type Page: str
        :param _Size: Page Number
        :type Size: str
        :param _StatusList: Status ListDraft: 'NS','N','P','R'
Running: 'Y'
Stopped: 'F'
Frozen: 'O'
Stopping: 'T'
        :type StatusList: list of str
        :param _OwnerNameList: List of Responsible Persons
        :type OwnerNameList: list of str
        :param _WorkflowIdList: Workflow List
        :type WorkflowIdList: list of str
        :param _TaskNameFilter: Task Name Search
        :type TaskNameFilter: str
        :param _TaskTypeList: Task Type List
        :type TaskTypeList: list of str
        :param _FordIdList: Folder List
        :type FordIdList: list of str
        :param _TaskIdFilter: Task ID Search
        :type TaskIdFilter: str
        :param _OwnerNameFilter: Responsible Person Search
        :type OwnerNameFilter: str
        :param _SortItem: Sort Fields:
UpdateTime
CreateTime
        :type SortItem: str
        :param _SortType: asc: Ascending
desc: Descending
        :type SortType: str
        :param _DataEngineList: Engine Type List: Three Types
SparkJob
SparkSql
presto
        :type DataEngineList: list of str
        :param _UserId: Operator Name
        :type UserId: str
        :param _OwnerId: 1
        :type OwnerId: str
        :param _TenantId: 1
        :type TenantId: str
        :param _DatasourceIdList: Data Source ID List
        :type DatasourceIdList: list of str
        :param _DatasourceTypeList: Data Source Type List
        :type DatasourceTypeList: list of str
        :param _CycleUnitList: Scheduling Unit Type List
        :type CycleUnitList: list of str
        :param _CanSubmit: Filter out tasks that can be submitted?
        :type CanSubmit: bool
        """
        self._ProjectId = None
        self._Page = None
        self._Size = None
        self._StatusList = None
        self._OwnerNameList = None
        self._WorkflowIdList = None
        self._TaskNameFilter = None
        self._TaskTypeList = None
        self._FordIdList = None
        self._TaskIdFilter = None
        self._OwnerNameFilter = None
        self._SortItem = None
        self._SortType = None
        self._DataEngineList = None
        self._UserId = None
        self._OwnerId = None
        self._TenantId = None
        self._DatasourceIdList = None
        self._DatasourceTypeList = None
        self._CycleUnitList = None
        self._CanSubmit = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Page(self):
        """Page Number
        :rtype: str
        """
        return self._Page

    @Page.setter
    def Page(self, Page):
        self._Page = Page

    @property
    def Size(self):
        """Page Number
        :rtype: str
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def StatusList(self):
        """Status ListDraft: 'NS','N','P','R'
Running: 'Y'
Stopped: 'F'
Frozen: 'O'
Stopping: 'T'
        :rtype: list of str
        """
        return self._StatusList

    @StatusList.setter
    def StatusList(self, StatusList):
        self._StatusList = StatusList

    @property
    def OwnerNameList(self):
        """List of Responsible Persons
        :rtype: list of str
        """
        return self._OwnerNameList

    @OwnerNameList.setter
    def OwnerNameList(self, OwnerNameList):
        self._OwnerNameList = OwnerNameList

    @property
    def WorkflowIdList(self):
        """Workflow List
        :rtype: list of str
        """
        return self._WorkflowIdList

    @WorkflowIdList.setter
    def WorkflowIdList(self, WorkflowIdList):
        self._WorkflowIdList = WorkflowIdList

    @property
    def TaskNameFilter(self):
        """Task Name Search
        :rtype: str
        """
        return self._TaskNameFilter

    @TaskNameFilter.setter
    def TaskNameFilter(self, TaskNameFilter):
        self._TaskNameFilter = TaskNameFilter

    @property
    def TaskTypeList(self):
        """Task Type List
        :rtype: list of str
        """
        return self._TaskTypeList

    @TaskTypeList.setter
    def TaskTypeList(self, TaskTypeList):
        self._TaskTypeList = TaskTypeList

    @property
    def FordIdList(self):
        """Folder List
        :rtype: list of str
        """
        return self._FordIdList

    @FordIdList.setter
    def FordIdList(self, FordIdList):
        self._FordIdList = FordIdList

    @property
    def TaskIdFilter(self):
        """Task ID Search
        :rtype: str
        """
        return self._TaskIdFilter

    @TaskIdFilter.setter
    def TaskIdFilter(self, TaskIdFilter):
        self._TaskIdFilter = TaskIdFilter

    @property
    def OwnerNameFilter(self):
        """Responsible Person Search
        :rtype: str
        """
        return self._OwnerNameFilter

    @OwnerNameFilter.setter
    def OwnerNameFilter(self, OwnerNameFilter):
        self._OwnerNameFilter = OwnerNameFilter

    @property
    def SortItem(self):
        """Sort Fields:
UpdateTime
CreateTime
        :rtype: str
        """
        return self._SortItem

    @SortItem.setter
    def SortItem(self, SortItem):
        self._SortItem = SortItem

    @property
    def SortType(self):
        """asc: Ascending
desc: Descending
        :rtype: str
        """
        return self._SortType

    @SortType.setter
    def SortType(self, SortType):
        self._SortType = SortType

    @property
    def DataEngineList(self):
        """Engine Type List: Three Types
SparkJob
SparkSql
presto
        :rtype: list of str
        """
        return self._DataEngineList

    @DataEngineList.setter
    def DataEngineList(self, DataEngineList):
        self._DataEngineList = DataEngineList

    @property
    def UserId(self):
        """Operator Name
        :rtype: str
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def OwnerId(self):
        """1
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId

    @property
    def TenantId(self):
        """1
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def DatasourceIdList(self):
        """Data Source ID List
        :rtype: list of str
        """
        return self._DatasourceIdList

    @DatasourceIdList.setter
    def DatasourceIdList(self, DatasourceIdList):
        self._DatasourceIdList = DatasourceIdList

    @property
    def DatasourceTypeList(self):
        """Data Source Type List
        :rtype: list of str
        """
        return self._DatasourceTypeList

    @DatasourceTypeList.setter
    def DatasourceTypeList(self, DatasourceTypeList):
        self._DatasourceTypeList = DatasourceTypeList

    @property
    def CycleUnitList(self):
        """Scheduling Unit Type List
        :rtype: list of str
        """
        return self._CycleUnitList

    @CycleUnitList.setter
    def CycleUnitList(self, CycleUnitList):
        self._CycleUnitList = CycleUnitList

    @property
    def CanSubmit(self):
        """Filter out tasks that can be submitted?
        :rtype: bool
        """
        return self._CanSubmit

    @CanSubmit.setter
    def CanSubmit(self, CanSubmit):
        self._CanSubmit = CanSubmit


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Page = params.get("Page")
        self._Size = params.get("Size")
        self._StatusList = params.get("StatusList")
        self._OwnerNameList = params.get("OwnerNameList")
        self._WorkflowIdList = params.get("WorkflowIdList")
        self._TaskNameFilter = params.get("TaskNameFilter")
        self._TaskTypeList = params.get("TaskTypeList")
        self._FordIdList = params.get("FordIdList")
        self._TaskIdFilter = params.get("TaskIdFilter")
        self._OwnerNameFilter = params.get("OwnerNameFilter")
        self._SortItem = params.get("SortItem")
        self._SortType = params.get("SortType")
        self._DataEngineList = params.get("DataEngineList")
        self._UserId = params.get("UserId")
        self._OwnerId = params.get("OwnerId")
        self._TenantId = params.get("TenantId")
        self._DatasourceIdList = params.get("DatasourceIdList")
        self._DatasourceTypeList = params.get("DatasourceTypeList")
        self._CycleUnitList = params.get("CycleUnitList")
        self._CanSubmit = params.get("CanSubmit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchOperateTaskResponse(AbstractModel):
    """DescribeBatchOperateTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DescribeBatchOperateTaskPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DescribeBatchOperateTaskPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DescribeBatchOperateTaskPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeColumnLineageRequest(AbstractModel):
    """DescribeColumnLineage request structure.

    """

    def __init__(self):
        r"""
        :param _Direction: Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
        :type Direction: str
        :param _Data: Field Information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.ColumnLineageInfo`
        :param _InputDepth: Single Query Indegree
        :type InputDepth: int
        :param _OutputDepth: Single Query Outdegree
        :type OutputDepth: int
        :param _ExtParams: Additional Parameters (Pass Caller Information)
        :type ExtParams: list of RecordField
        :param _IgnoreTemp: Filter Temporary Tables with the default value true
        :type IgnoreTemp: bool
        """
        self._Direction = None
        self._Data = None
        self._InputDepth = None
        self._OutputDepth = None
        self._ExtParams = None
        self._IgnoreTemp = None

    @property
    def Direction(self):
        """Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction

    @property
    def Data(self):
        """Field Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ColumnLineageInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InputDepth(self):
        """Single Query Indegree
        :rtype: int
        """
        return self._InputDepth

    @InputDepth.setter
    def InputDepth(self, InputDepth):
        self._InputDepth = InputDepth

    @property
    def OutputDepth(self):
        """Single Query Outdegree
        :rtype: int
        """
        return self._OutputDepth

    @OutputDepth.setter
    def OutputDepth(self, OutputDepth):
        self._OutputDepth = OutputDepth

    @property
    def ExtParams(self):
        """Additional Parameters (Pass Caller Information)
        :rtype: list of RecordField
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def IgnoreTemp(self):
        """Filter Temporary Tables with the default value true
        :rtype: bool
        """
        return self._IgnoreTemp

    @IgnoreTemp.setter
    def IgnoreTemp(self, IgnoreTemp):
        self._IgnoreTemp = IgnoreTemp


    def _deserialize(self, params):
        self._Direction = params.get("Direction")
        if params.get("Data") is not None:
            self._Data = ColumnLineageInfo()
            self._Data._deserialize(params.get("Data"))
        self._InputDepth = params.get("InputDepth")
        self._OutputDepth = params.get("OutputDepth")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._IgnoreTemp = params.get("IgnoreTemp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeColumnLineageResponse(AbstractModel):
    """DescribeColumnLineage response structure.

    """

    def __init__(self):
        r"""
        :param _ColumnAggregationLineage: Field lineage information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnAggregationLineage: :class:`tencentcloud.wedata.v20210820.models.ColumnAggregationLineage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ColumnAggregationLineage = None
        self._RequestId = None

    @property
    def ColumnAggregationLineage(self):
        """Field lineage information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ColumnAggregationLineage`
        """
        return self._ColumnAggregationLineage

    @ColumnAggregationLineage.setter
    def ColumnAggregationLineage(self, ColumnAggregationLineage):
        self._ColumnAggregationLineage = ColumnAggregationLineage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ColumnAggregationLineage") is not None:
            self._ColumnAggregationLineage = ColumnAggregationLineage()
            self._ColumnAggregationLineage._deserialize(params.get("ColumnAggregationLineage"))
        self._RequestId = params.get("RequestId")


class DescribeColumnsMetaRequest(AbstractModel):
    """DescribeColumnsMeta request structure.

    """

    def __init__(self):
        r"""
        :param _TableId: Table ID
        :type TableId: str
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Page Size
        :type PageSize: int
        :param _FilterSet: Filter
        :type FilterSet: list of Filter
        :param _OrderFieldSet: Sort Fields
        :type OrderFieldSet: list of OrderField
        :param _IsPartitionQuery: Whether to Query Partition Field, Default false
        :type IsPartitionQuery: bool
        :param _ComplianceId: Compliance Group ID
        :type ComplianceId: int
        """
        self._TableId = None
        self._PageNumber = None
        self._PageSize = None
        self._FilterSet = None
        self._OrderFieldSet = None
        self._IsPartitionQuery = None
        self._ComplianceId = None

    @property
    def TableId(self):
        """Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def FilterSet(self):
        """Filter
        :rtype: list of Filter
        """
        return self._FilterSet

    @FilterSet.setter
    def FilterSet(self, FilterSet):
        self._FilterSet = FilterSet

    @property
    def OrderFieldSet(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFieldSet

    @OrderFieldSet.setter
    def OrderFieldSet(self, OrderFieldSet):
        self._OrderFieldSet = OrderFieldSet

    @property
    def IsPartitionQuery(self):
        """Whether to Query Partition Field, Default false
        :rtype: bool
        """
        return self._IsPartitionQuery

    @IsPartitionQuery.setter
    def IsPartitionQuery(self, IsPartitionQuery):
        self._IsPartitionQuery = IsPartitionQuery

    @property
    def ComplianceId(self):
        """Compliance Group ID
        :rtype: int
        """
        return self._ComplianceId

    @ComplianceId.setter
    def ComplianceId(self, ComplianceId):
        self._ComplianceId = ComplianceId


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("FilterSet") is not None:
            self._FilterSet = []
            for item in params.get("FilterSet"):
                obj = Filter()
                obj._deserialize(item)
                self._FilterSet.append(obj)
        if params.get("OrderFieldSet") is not None:
            self._OrderFieldSet = []
            for item in params.get("OrderFieldSet"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFieldSet.append(obj)
        self._IsPartitionQuery = params.get("IsPartitionQuery")
        self._ComplianceId = params.get("ComplianceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeColumnsMetaResponse(AbstractModel):
    """DescribeColumnsMeta response structure.

    """

    def __init__(self):
        r"""
        :param _ColumnMetaSet: Pagination return
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnMetaSet: list of ColumnMeta
        :param _TotalCount: Number of records
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ColumnMetaSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ColumnMetaSet(self):
        """Pagination return
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ColumnMeta
        """
        return self._ColumnMetaSet

    @ColumnMetaSet.setter
    def ColumnMetaSet(self, ColumnMetaSet):
        self._ColumnMetaSet = ColumnMetaSet

    @property
    def TotalCount(self):
        """Number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ColumnMetaSet") is not None:
            self._ColumnMetaSet = []
            for item in params.get("ColumnMetaSet"):
                obj = ColumnMeta()
                obj._deserialize(item)
                self._ColumnMetaSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeDataCheckStatRequest(AbstractModel):
    """DescribeDataCheckStat request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _BeginDate: Start time, timestamp to the second
        :type BeginDate: str
        :param _EndDate: End time, timestamp to the second
        :type EndDate: str
        """
        self._ProjectId = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def BeginDate(self):
        """Start time, timestamp to the second
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time, timestamp to the second
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataCheckStatResponse(AbstractModel):
    """DescribeDataCheckStat response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DataCheckStat`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DataCheckStat`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DataCheckStat()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDataSourceInfoListRequest(AbstractModel):
    """DescribeDataSourceInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Page number
        :type PageSize: int
        :param _Filters: Filter condition (not supported yet)
        :type Filters: :class:`tencentcloud.wedata.v20210820.models.Filter`
        :param _OrderFields: Sorting Configuration
        :type OrderFields: :class:`tencentcloud.wedata.v20210820.models.OrderField`
        :param _Type: Data Source Type, mandatory (e.g., MYSQL, DLC, etc.)
        :type Type: str
        :param _DatasourceName: Data Source Name Filter
        :type DatasourceName: str
        """
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._Type = None
        self._DatasourceName = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page number
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter condition (not supported yet)
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Filter`
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sorting Configuration
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OrderField`
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def Type(self):
        """Data Source Type, mandatory (e.g., MYSQL, DLC, etc.)
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def DatasourceName(self):
        """Data Source Name Filter
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = Filter()
            self._Filters._deserialize(params.get("Filters"))
        if params.get("OrderFields") is not None:
            self._OrderFields = OrderField()
            self._OrderFields._deserialize(params.get("OrderFields"))
        self._Type = params.get("Type")
        self._DatasourceName = params.get("DatasourceName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataSourceInfoListResponse(AbstractModel):
    """DescribeDataSourceInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of items.
        :type TotalCount: int
        :param _DatasourceSet: Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceSet: list of DatasourceBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._DatasourceSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of items.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def DatasourceSet(self):
        """Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DatasourceBaseInfo
        """
        return self._DatasourceSet

    @DatasourceSet.setter
    def DatasourceSet(self, DatasourceSet):
        self._DatasourceSet = DatasourceSet

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("DatasourceSet") is not None:
            self._DatasourceSet = []
            for item in params.get("DatasourceSet"):
                obj = DatasourceBaseInfo()
                obj._deserialize(item)
                self._DatasourceSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDataSourceListRequest(AbstractModel):
    """DescribeDataSourceList request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Number of returns
        :type PageSize: int
        :param _OrderFields: Sorting Configuration
        :type OrderFields: list of OrderField
        :param _Filters: Optional Filter Criteria, Filter optional configurations (reference): "Name": { "type": "string", "description": "Data Source Name" }, "Type": { "type": "string", "description": "Type" }, "ClusterId": { "type": "string", "description": "Cluster ID" }, "CategoryId": { "type": "string", "description": "Classification, Project or Space ID" }
        :type Filters: list of Filter
        """
        self._PageNumber = None
        self._PageSize = None
        self._OrderFields = None
        self._Filters = None

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of returns
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def OrderFields(self):
        """Sorting Configuration
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def Filters(self):
        """Optional Filter Criteria, Filter optional configurations (reference): "Name": { "type": "string", "description": "Data Source Name" }, "Type": { "type": "string", "description": "Type" }, "ClusterId": { "type": "string", "description": "Cluster ID" }, "CategoryId": { "type": "string", "description": "Classification, Project or Space ID" }
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataSourceListResponse(AbstractModel):
    """DescribeDataSourceList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: data source list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DataSourceInfoPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """data source list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DataSourceInfoPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DataSourceInfoPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDatabaseInfoListRequest(AbstractModel):
    """DescribeDatabaseInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Ignore Query String
        :type Filters: list of Filter
        :param _ConnectionType: Connection Type
        :type ConnectionType: str
        """
        self._Filters = None
        self._ConnectionType = None

    @property
    def Filters(self):
        """Ignore Query String
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ConnectionType(self):
        """Connection Type
        :rtype: str
        """
        return self._ConnectionType

    @ConnectionType.setter
    def ConnectionType(self, ConnectionType):
        self._ConnectionType = ConnectionType


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ConnectionType = params.get("ConnectionType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatabaseInfoListResponse(AbstractModel):
    """DescribeDatabaseInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _DatabaseInfo: Database List
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseInfo: list of DatabaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DatabaseInfo = None
        self._RequestId = None

    @property
    def DatabaseInfo(self):
        """Database List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DatabaseInfo
        """
        return self._DatabaseInfo

    @DatabaseInfo.setter
    def DatabaseInfo(self, DatabaseInfo):
        self._DatabaseInfo = DatabaseInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DatabaseInfo") is not None:
            self._DatabaseInfo = []
            for item in params.get("DatabaseInfo"):
                obj = DatabaseInfo()
                obj._deserialize(item)
                self._DatabaseInfo.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatabaseMetasRequest(AbstractModel):
    """DescribeDatabaseMetas request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter Fields, projectIds/msTypes/createTime/modifiedTime
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields, such as name
        :type OrderFields: list of OrderField
        """
        self._Filters = None
        self._OrderFields = None

    @property
    def Filters(self):
        """Filter Fields, projectIds/msTypes/createTime/modifiedTime
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields, such as name
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatabaseMetasResponse(AbstractModel):
    """DescribeDatabaseMetas response structure.

    """

    def __init__(self):
        r"""
        :param _DatabaseMeta: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseMeta: list of DatabaseMeta
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DatabaseMeta = None
        self._RequestId = None

    @property
    def DatabaseMeta(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DatabaseMeta
        """
        return self._DatabaseMeta

    @DatabaseMeta.setter
    def DatabaseMeta(self, DatabaseMeta):
        self._DatabaseMeta = DatabaseMeta

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DatabaseMeta") is not None:
            self._DatabaseMeta = []
            for item in params.get("DatabaseMeta"):
                obj = DatabaseMeta()
                obj._deserialize(item)
                self._DatabaseMeta.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasourceRequest(AbstractModel):
    """DescribeDatasource request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Unique Object ID
        :type Id: int
        :param _Env: production: production, development: development
        :type Env: str
        """
        self._Id = None
        self._Env = None

    @property
    def Id(self):
        """Unique Object ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Env(self):
        """production: production, development: development
        :rtype: str
        """
        return self._Env

    @Env.setter
    def Env(self, Env):
        self._Env = Env


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Env = params.get("Env")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasourceResponse(AbstractModel):
    """DescribeDatasource response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Data Source Object
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DataSourceInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Data Source Object
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DataSourceInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DataSourceInfo()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDependOpsTasksRequest(AbstractModel):
    """DescribeDependOpsTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _Deep: Upstream/Downstream Levels 1-6
        :type Deep: int
        :param _Up: 1: Indicates querying upstream nodes; 0: Indicates querying downstream nodes; 2: Indicates querying both upstream and downstream nodes
        :type Up: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Task Workflow ID
        :type WorkflowId: str
        """
        self._TaskId = None
        self._Deep = None
        self._Up = None
        self._ProjectId = None
        self._WorkflowId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Deep(self):
        """Upstream/Downstream Levels 1-6
        :rtype: int
        """
        return self._Deep

    @Deep.setter
    def Deep(self, Deep):
        self._Deep = Deep

    @property
    def Up(self):
        """1: Indicates querying upstream nodes; 0: Indicates querying downstream nodes; 2: Indicates querying both upstream and downstream nodes
        :rtype: int
        """
        return self._Up

    @Up.setter
    def Up(self, Up):
        self._Up = Up

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Task Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Deep = params.get("Deep")
        self._Up = params.get("Up")
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDependOpsTasksResponse(AbstractModel):
    """DescribeDependOpsTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Canvas Task and Link Information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OpsTaskCanvasInfoList`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Canvas Task and Link Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OpsTaskCanvasInfoList`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OpsTaskCanvasInfoList()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDependTaskListsRequest(AbstractModel):
    """DescribeDependTaskLists request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Task ID List
        :type TaskIds: list of str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskIds = None
        self._ProjectId = None

    @property
    def TaskIds(self):
        """Task ID List
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDependTaskListsResponse(AbstractModel):
    """DescribeDependTaskLists response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of TaskOpsDto
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Delete Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskOpsDto
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskOpsDto()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDimensionScoreRequest(AbstractModel):
    """DescribeDimensionScore request structure.

    """

    def __init__(self):
        r"""
        :param _StatisticsDate: Statistics Date Timestamp
        :type StatisticsDate: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _Filters: Ignore Query String
        :type Filters: list of Filter
        """
        self._StatisticsDate = None
        self._ProjectId = None
        self._DatasourceId = None
        self._Filters = None

    @property
    def StatisticsDate(self):
        """Statistics Date Timestamp
        :rtype: int
        """
        return self._StatisticsDate

    @StatisticsDate.setter
    def StatisticsDate(self, StatisticsDate):
        self._StatisticsDate = StatisticsDate

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Filters(self):
        """Ignore Query String
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._StatisticsDate = params.get("StatisticsDate")
        self._ProjectId = params.get("ProjectId")
        self._DatasourceId = params.get("DatasourceId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDimensionScoreResponse(AbstractModel):
    """DescribeDimensionScore response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Dimensional scoring
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DimensionScore`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Dimensional scoring
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DimensionScore`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DimensionScore()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDrInstancePageRequest(AbstractModel):
    """DescribeDrInstancePage request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskSource: Task Source ADHOC || WORKFLOW
        :type TaskSource: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _TaskName: Task Name
        :type TaskName: str
        :param _StartTime: Submission Start Time yyyy-MM-dd HH:mm:ss
        :type StartTime: str
        :param _EndTime: Submission End Time yyyy-MM-dd HH:mm:ss
        :type EndTime: str
        :param _FolderIds: Folder ID
        :type FolderIds: list of str
        :param _WorkflowIds: Workflow ID
        :type WorkflowIds: list of str
        :param _JustMe: View Only Mine
        :type JustMe: bool
        :param _TaskTypes: Task Type
        :type TaskTypes: list of str
        :param _SubmitUsers: Trial Run Submitter userId List
        :type SubmitUsers: list of str
        :param _StatusList: Trial Run Status
        :type StatusList: list of str
        """
        self._ProjectId = None
        self._TaskSource = None
        self._PageIndex = None
        self._PageSize = None
        self._TaskName = None
        self._StartTime = None
        self._EndTime = None
        self._FolderIds = None
        self._WorkflowIds = None
        self._JustMe = None
        self._TaskTypes = None
        self._SubmitUsers = None
        self._StatusList = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskSource(self):
        """Task Source ADHOC || WORKFLOW
        :rtype: str
        """
        return self._TaskSource

    @TaskSource.setter
    def TaskSource(self, TaskSource):
        self._TaskSource = TaskSource

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def StartTime(self):
        """Submission Start Time yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Submission End Time yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def FolderIds(self):
        """Folder ID
        :rtype: list of str
        """
        return self._FolderIds

    @FolderIds.setter
    def FolderIds(self, FolderIds):
        self._FolderIds = FolderIds

    @property
    def WorkflowIds(self):
        """Workflow ID
        :rtype: list of str
        """
        return self._WorkflowIds

    @WorkflowIds.setter
    def WorkflowIds(self, WorkflowIds):
        self._WorkflowIds = WorkflowIds

    @property
    def JustMe(self):
        """View Only Mine
        :rtype: bool
        """
        return self._JustMe

    @JustMe.setter
    def JustMe(self, JustMe):
        self._JustMe = JustMe

    @property
    def TaskTypes(self):
        """Task Type
        :rtype: list of str
        """
        return self._TaskTypes

    @TaskTypes.setter
    def TaskTypes(self, TaskTypes):
        self._TaskTypes = TaskTypes

    @property
    def SubmitUsers(self):
        """Trial Run Submitter userId List
        :rtype: list of str
        """
        return self._SubmitUsers

    @SubmitUsers.setter
    def SubmitUsers(self, SubmitUsers):
        self._SubmitUsers = SubmitUsers

    @property
    def StatusList(self):
        """Trial Run Status
        :rtype: list of str
        """
        return self._StatusList

    @StatusList.setter
    def StatusList(self, StatusList):
        self._StatusList = StatusList


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskSource = params.get("TaskSource")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._TaskName = params.get("TaskName")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._FolderIds = params.get("FolderIds")
        self._WorkflowIds = params.get("WorkflowIds")
        self._JustMe = params.get("JustMe")
        self._TaskTypes = params.get("TaskTypes")
        self._SubmitUsers = params.get("SubmitUsers")
        self._StatusList = params.get("StatusList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDrInstancePageResponse(AbstractModel):
    """DescribeDrInstancePage response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result Set
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DrInstanceOpsDtoPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result Set
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DrInstanceOpsDtoPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DrInstanceOpsDtoPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDsFolderTreeRequest(AbstractModel):
    """DescribeDsFolderTree request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FirstLevelPull: Whether to Pull at First Level true Yes 
false No
        :type FirstLevelPull: bool
        :param _FolderId: Folder ID
        :type FolderId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _Keyword: Keyword Search
        :type Keyword: str
        :param _IncludeWorkflow: Whether to Include Workflow true Yes 
false No
        :type IncludeWorkflow: bool
        :param _IncludeTask: Whether to Include Tasks true Yes 
false No
        :type IncludeTask: bool
        :param _IncludeVirtualTask: Does it include virtual tasks? This parameter is effective only when IncludeTask is true, default is true
        :type IncludeVirtualTask: bool
        :param _TaskFolderId: Task directory ID
        :type TaskFolderId: str
        :param _DisplayType: classification. Categorized Display  catalog. Directory Display
        :type DisplayType: str
        :param _IncludeTaskFolder: Does it include task directories? true means yes
false No
        :type IncludeTaskFolder: bool
        """
        self._ProjectId = None
        self._FirstLevelPull = None
        self._FolderId = None
        self._WorkflowId = None
        self._Keyword = None
        self._IncludeWorkflow = None
        self._IncludeTask = None
        self._IncludeVirtualTask = None
        self._TaskFolderId = None
        self._DisplayType = None
        self._IncludeTaskFolder = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FirstLevelPull(self):
        """Whether to Pull at First Level true Yes 
false No
        :rtype: bool
        """
        return self._FirstLevelPull

    @FirstLevelPull.setter
    def FirstLevelPull(self, FirstLevelPull):
        self._FirstLevelPull = FirstLevelPull

    @property
    def FolderId(self):
        """Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def Keyword(self):
        """Keyword Search
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def IncludeWorkflow(self):
        """Whether to Include Workflow true Yes 
false No
        :rtype: bool
        """
        return self._IncludeWorkflow

    @IncludeWorkflow.setter
    def IncludeWorkflow(self, IncludeWorkflow):
        self._IncludeWorkflow = IncludeWorkflow

    @property
    def IncludeTask(self):
        """Whether to Include Tasks true Yes 
false No
        :rtype: bool
        """
        return self._IncludeTask

    @IncludeTask.setter
    def IncludeTask(self, IncludeTask):
        self._IncludeTask = IncludeTask

    @property
    def IncludeVirtualTask(self):
        """Does it include virtual tasks? This parameter is effective only when IncludeTask is true, default is true
        :rtype: bool
        """
        return self._IncludeVirtualTask

    @IncludeVirtualTask.setter
    def IncludeVirtualTask(self, IncludeVirtualTask):
        self._IncludeVirtualTask = IncludeVirtualTask

    @property
    def TaskFolderId(self):
        """Task directory ID
        :rtype: str
        """
        return self._TaskFolderId

    @TaskFolderId.setter
    def TaskFolderId(self, TaskFolderId):
        self._TaskFolderId = TaskFolderId

    @property
    def DisplayType(self):
        """classification. Categorized Display  catalog. Directory Display
        :rtype: str
        """
        return self._DisplayType

    @DisplayType.setter
    def DisplayType(self, DisplayType):
        self._DisplayType = DisplayType

    @property
    def IncludeTaskFolder(self):
        """Does it include task directories? true means yes
false No
        :rtype: bool
        """
        return self._IncludeTaskFolder

    @IncludeTaskFolder.setter
    def IncludeTaskFolder(self, IncludeTaskFolder):
        self._IncludeTaskFolder = IncludeTaskFolder


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FirstLevelPull = params.get("FirstLevelPull")
        self._FolderId = params.get("FolderId")
        self._WorkflowId = params.get("WorkflowId")
        self._Keyword = params.get("Keyword")
        self._IncludeWorkflow = params.get("IncludeWorkflow")
        self._IncludeTask = params.get("IncludeTask")
        self._IncludeVirtualTask = params.get("IncludeVirtualTask")
        self._TaskFolderId = params.get("TaskFolderId")
        self._DisplayType = params.get("DisplayType")
        self._IncludeTaskFolder = params.get("IncludeTaskFolder")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDsFolderTreeResponse(AbstractModel):
    """DescribeDsFolderTree response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Unified Tree Structure Return Attribute List
        :type Data: list of PathNodeDsVO
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Unified Tree Structure Return Attribute List
        :rtype: list of PathNodeDsVO
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = PathNodeDsVO()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDsParentFolderTreeRequest(AbstractModel):
    """DescribeDsParentFolderTree request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderId: Folder ID
        :type FolderId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _DisplayType: Task Display Format, Example Values
-    classification: Categorized Display
-    catalog: Directory Display
        :type DisplayType: str
        """
        self._ProjectId = None
        self._FolderId = None
        self._WorkflowId = None
        self._TaskId = None
        self._DisplayType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderId(self):
        """Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DisplayType(self):
        """Task Display Format, Example Values
-    classification: Categorized Display
-    catalog: Directory Display
        :rtype: str
        """
        return self._DisplayType

    @DisplayType.setter
    def DisplayType(self, DisplayType):
        self._DisplayType = DisplayType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderId = params.get("FolderId")
        self._WorkflowId = params.get("WorkflowId")
        self._TaskId = params.get("TaskId")
        self._DisplayType = params.get("DisplayType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDsParentFolderTreeResponse(AbstractModel):
    """DescribeDsParentFolderTree response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Unified Tree Structure Return Attribute List
        :type Data: list of PathNodeDsVO
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Unified Tree Structure Return Attribute List
        :rtype: list of PathNodeDsVO
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = PathNodeDsVO()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEventCasesRequest(AbstractModel):
    """DescribeEventCases request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Category: Event Instance Catalog, Example Value:
- Expired: expired
- Not Expired: consuming
- All: all

        :type Category: str
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Number of items per page
        :type PageSize: int
        :param _EventName: Event name
        :type EventName: str
        :param _EventType: Event type
        :type EventType: str
        :param _EventSubType: Event Segmentation Type
        :type EventSubType: str
        :param _EventBroadcastType: Event Broadcast Type
        :type EventBroadcastType: str
        :param _Status: Event Instance Status, Example Value:
- Consumed: COMSUMED
- Expired: EXPIRED
- Pending Consumption: ACTIVE
- Consuming: CONSUMING
        :type Status: str
        :param _CreationTimeStart: Minimum Creation Time of Event Instance
        :type CreationTimeStart: str
        :param _CreationTimeEnd: Maximum Creation Time of Event Instance
        :type CreationTimeEnd: str
        :param _EventTriggeredTimeStart: Minimum Trigger Time of Event Instance
        :type EventTriggeredTimeStart: str
        :param _EventTriggeredTimeEnd: Maximum Trigger Time of Event Instance
        :type EventTriggeredTimeEnd: str
        :param _LogTimeStart: Minimum Consumption Time of Event Instance
        :type LogTimeStart: str
        :param _LogTimeEnd: Maximum Consumption Time of Event Instance
        :type LogTimeEnd: str
        :param _Dimension: Event Instance Data Timestamp
        :type Dimension: str
        :param _TimeToLive: Event Instance Validity Period
        :type TimeToLive: str
        :param _SortItem: Sort Fields
        :type SortItem: str
        :param _SortType: Sorting Order
        :type SortType: str
        """
        self._ProjectId = None
        self._Category = None
        self._PageNumber = None
        self._PageSize = None
        self._EventName = None
        self._EventType = None
        self._EventSubType = None
        self._EventBroadcastType = None
        self._Status = None
        self._CreationTimeStart = None
        self._CreationTimeEnd = None
        self._EventTriggeredTimeStart = None
        self._EventTriggeredTimeEnd = None
        self._LogTimeStart = None
        self._LogTimeEnd = None
        self._Dimension = None
        self._TimeToLive = None
        self._SortItem = None
        self._SortType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Category(self):
        """Event Instance Catalog, Example Value:
- Expired: expired
- Not Expired: consuming
- All: all

        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of items per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def EventName(self):
        """Event name
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def EventType(self):
        warnings.warn("parameter `EventType` is deprecated", DeprecationWarning) 

        """Event type
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        warnings.warn("parameter `EventType` is deprecated", DeprecationWarning) 

        self._EventType = EventType

    @property
    def EventSubType(self):
        """Event Segmentation Type
        :rtype: str
        """
        return self._EventSubType

    @EventSubType.setter
    def EventSubType(self, EventSubType):
        self._EventSubType = EventSubType

    @property
    def EventBroadcastType(self):
        warnings.warn("parameter `EventBroadcastType` is deprecated", DeprecationWarning) 

        """Event Broadcast Type
        :rtype: str
        """
        return self._EventBroadcastType

    @EventBroadcastType.setter
    def EventBroadcastType(self, EventBroadcastType):
        warnings.warn("parameter `EventBroadcastType` is deprecated", DeprecationWarning) 

        self._EventBroadcastType = EventBroadcastType

    @property
    def Status(self):
        warnings.warn("parameter `Status` is deprecated", DeprecationWarning) 

        """Event Instance Status, Example Value:
- Consumed: COMSUMED
- Expired: EXPIRED
- Pending Consumption: ACTIVE
- Consuming: CONSUMING
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        warnings.warn("parameter `Status` is deprecated", DeprecationWarning) 

        self._Status = Status

    @property
    def CreationTimeStart(self):
        """Minimum Creation Time of Event Instance
        :rtype: str
        """
        return self._CreationTimeStart

    @CreationTimeStart.setter
    def CreationTimeStart(self, CreationTimeStart):
        self._CreationTimeStart = CreationTimeStart

    @property
    def CreationTimeEnd(self):
        """Maximum Creation Time of Event Instance
        :rtype: str
        """
        return self._CreationTimeEnd

    @CreationTimeEnd.setter
    def CreationTimeEnd(self, CreationTimeEnd):
        self._CreationTimeEnd = CreationTimeEnd

    @property
    def EventTriggeredTimeStart(self):
        """Minimum Trigger Time of Event Instance
        :rtype: str
        """
        return self._EventTriggeredTimeStart

    @EventTriggeredTimeStart.setter
    def EventTriggeredTimeStart(self, EventTriggeredTimeStart):
        self._EventTriggeredTimeStart = EventTriggeredTimeStart

    @property
    def EventTriggeredTimeEnd(self):
        """Maximum Trigger Time of Event Instance
        :rtype: str
        """
        return self._EventTriggeredTimeEnd

    @EventTriggeredTimeEnd.setter
    def EventTriggeredTimeEnd(self, EventTriggeredTimeEnd):
        self._EventTriggeredTimeEnd = EventTriggeredTimeEnd

    @property
    def LogTimeStart(self):
        """Minimum Consumption Time of Event Instance
        :rtype: str
        """
        return self._LogTimeStart

    @LogTimeStart.setter
    def LogTimeStart(self, LogTimeStart):
        self._LogTimeStart = LogTimeStart

    @property
    def LogTimeEnd(self):
        """Maximum Consumption Time of Event Instance
        :rtype: str
        """
        return self._LogTimeEnd

    @LogTimeEnd.setter
    def LogTimeEnd(self, LogTimeEnd):
        self._LogTimeEnd = LogTimeEnd

    @property
    def Dimension(self):
        """Event Instance Data Timestamp
        :rtype: str
        """
        return self._Dimension

    @Dimension.setter
    def Dimension(self, Dimension):
        self._Dimension = Dimension

    @property
    def TimeToLive(self):
        """Event Instance Validity Period
        :rtype: str
        """
        return self._TimeToLive

    @TimeToLive.setter
    def TimeToLive(self, TimeToLive):
        self._TimeToLive = TimeToLive

    @property
    def SortItem(self):
        """Sort Fields
        :rtype: str
        """
        return self._SortItem

    @SortItem.setter
    def SortItem(self, SortItem):
        self._SortItem = SortItem

    @property
    def SortType(self):
        """Sorting Order
        :rtype: str
        """
        return self._SortType

    @SortType.setter
    def SortType(self, SortType):
        self._SortType = SortType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Category = params.get("Category")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._EventName = params.get("EventName")
        self._EventType = params.get("EventType")
        self._EventSubType = params.get("EventSubType")
        self._EventBroadcastType = params.get("EventBroadcastType")
        self._Status = params.get("Status")
        self._CreationTimeStart = params.get("CreationTimeStart")
        self._CreationTimeEnd = params.get("CreationTimeEnd")
        self._EventTriggeredTimeStart = params.get("EventTriggeredTimeStart")
        self._EventTriggeredTimeEnd = params.get("EventTriggeredTimeEnd")
        self._LogTimeStart = params.get("LogTimeStart")
        self._LogTimeEnd = params.get("LogTimeEnd")
        self._Dimension = params.get("Dimension")
        self._TimeToLive = params.get("TimeToLive")
        self._SortItem = params.get("SortItem")
        self._SortType = params.get("SortType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEventCasesResponse(AbstractModel):
    """DescribeEventCases response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Event Instance Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.EventCaseAuditLogVOCollection`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Event Instance Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.EventCaseAuditLogVOCollection`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = EventCaseAuditLogVOCollection()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeEventConsumeTasksRequest(AbstractModel):
    """DescribeEventConsumeTasks request structure.

    """

    def __init__(self):
        r"""
        :param _EventCaseId: Event Instance ID
        :type EventCaseId: str
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Number of items per page
        :type PageSize: int
        """
        self._EventCaseId = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def EventCaseId(self):
        """Event Instance ID
        :rtype: str
        """
        return self._EventCaseId

    @EventCaseId.setter
    def EventCaseId(self, EventCaseId):
        self._EventCaseId = EventCaseId

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of items per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._EventCaseId = params.get("EventCaseId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEventConsumeTasksResponse(AbstractModel):
    """DescribeEventConsumeTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Event Consumption Task Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.EventCaseConsumeLogOptDtoCollection`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Event Consumption Task Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.EventCaseConsumeLogOptDtoCollection`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = EventCaseConsumeLogOptDtoCollection()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeEventRequest(AbstractModel):
    """DescribeEvent request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _EventName: Event name
        :type EventName: str
        """
        self._ProjectId = None
        self._EventName = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def EventName(self):
        """Event name
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._EventName = params.get("EventName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEventResponse(AbstractModel):
    """DescribeEvent response structure.

    """

    def __init__(self):
        r"""
        :param _Data: EventNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.EventOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """EventNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.EventOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = EventOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeExecStrategyRequest(AbstractModel):
    """DescribeExecStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._RuleGroupId = None
        self._ProjectId = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExecStrategyResponse(AbstractModel):
    """DescribeExecStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group Execution Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group Execution Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupExecStrategy()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeFieldBasicInfoRequest(AbstractModel):
    """DescribeFieldBasicInfo request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Page Size
        :type PageSize: int
        :param _Filters: Filter field
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderField
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter field
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFieldBasicInfoResponse(AbstractModel):
    """DescribeFieldBasicInfo response structure.

    """

    def __init__(self):
        r"""
        :param _ColumnBasicInfoList: Field Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnBasicInfoList: list of ColumnBasicInfo
        :param _TotalCount: Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ColumnBasicInfoList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ColumnBasicInfoList(self):
        """Field Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ColumnBasicInfo
        """
        return self._ColumnBasicInfoList

    @ColumnBasicInfoList.setter
    def ColumnBasicInfoList(self, ColumnBasicInfoList):
        self._ColumnBasicInfoList = ColumnBasicInfoList

    @property
    def TotalCount(self):
        """Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ColumnBasicInfoList") is not None:
            self._ColumnBasicInfoList = []
            for item in params.get("ColumnBasicInfoList"):
                obj = ColumnBasicInfo()
                obj._deserialize(item)
                self._ColumnBasicInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeFolderWorkflowListData(AbstractModel):
    """Folder Pagination Information

    """

    def __init__(self):
        r"""
        :param _Items: Workflow Information List
        :type Items: list of Workflow
        :param _TotalCount: Total number of items
        :type TotalCount: int
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Page Size
        :type PageSize: int
        """
        self._Items = None
        self._TotalCount = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def Items(self):
        """Workflow Information List
        :rtype: list of Workflow
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def TotalCount(self):
        """Total number of items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = Workflow()
                obj._deserialize(item)
                self._Items.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFolderWorkflowListRequest(AbstractModel):
    """DescribeFolderWorkflowList request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ParentsFolderId: Parent Folder ID
        :type ParentsFolderId: str
        :param _KeyWords: Keyword
        :type KeyWords: str
        :param _PageNumber: Page number, default is 1
        :type PageNumber: int
        :param _PageSize: Page size, default is 10
        :type PageSize: int
        """
        self._ProjectId = None
        self._ParentsFolderId = None
        self._KeyWords = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ParentsFolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId

    @property
    def KeyWords(self):
        """Keyword
        :rtype: str
        """
        return self._KeyWords

    @KeyWords.setter
    def KeyWords(self, KeyWords):
        self._KeyWords = KeyWords

    @property
    def PageNumber(self):
        """Page number, default is 1
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size, default is 10
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ParentsFolderId = params.get("ParentsFolderId")
        self._KeyWords = params.get("KeyWords")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFolderWorkflowListResponse(AbstractModel):
    """DescribeFolderWorkflowList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DescribeFolderWorkflowListData`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DescribeFolderWorkflowListData`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DescribeFolderWorkflowListData()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeFunctionKindsRequest(AbstractModel):
    """DescribeFunctionKinds request structure.

    """


class DescribeFunctionKindsResponse(AbstractModel):
    """DescribeFunctionKinds response structure.

    """

    def __init__(self):
        r"""
        :param _Kinds: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Kinds: list of FunctionTypeOrKind
        :param _ErrorMessage: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Kinds = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def Kinds(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FunctionTypeOrKind
        """
        return self._Kinds

    @Kinds.setter
    def Kinds(self, Kinds):
        self._Kinds = Kinds

    @property
    def ErrorMessage(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Kinds") is not None:
            self._Kinds = []
            for item in params.get("Kinds"):
                obj = FunctionTypeOrKind()
                obj._deserialize(item)
                self._Kinds.append(obj)
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class DescribeFunctionTypesRequest(AbstractModel):
    """DescribeFunctionTypes request structure.

    """


class DescribeFunctionTypesResponse(AbstractModel):
    """DescribeFunctionTypes response structure.

    """

    def __init__(self):
        r"""
        :param _Types: TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Types: list of FunctionTypeOrKind
        :param _ErrorMessage: Error messageNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Types = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def Types(self):
        """TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FunctionTypeOrKind
        """
        return self._Types

    @Types.setter
    def Types(self, Types):
        self._Types = Types

    @property
    def ErrorMessage(self):
        """Error messageNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Types") is not None:
            self._Types = []
            for item in params.get("Types"):
                obj = FunctionTypeOrKind()
                obj._deserialize(item)
                self._Types.append(obj)
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class DescribeInstanceByCycleRequest(AbstractModel):
    """DescribeInstanceByCycle request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: 1
        :type ProjectId: str
        :param _TenantId: 1
        :type TenantId: str
        """
        self._ProjectId = None
        self._TenantId = None

    @property
    def ProjectId(self):
        """1
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TenantId(self):
        """1
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TenantId = params.get("TenantId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceByCycleResponse(AbstractModel):
    """DescribeInstanceByCycle response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Statistical Results
        :type Data: list of TaskByCycle
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Statistical Results
        :rtype: list of TaskByCycle
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskByCycle()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeInstanceLastLogRequest(AbstractModel):
    """DescribeInstanceLastLog request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        """
        self._TaskId = None
        self._CurRunDate = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceLastLogResponse(AbstractModel):
    """DescribeInstanceLastLog response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Log
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Log
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeInstanceListRequest(AbstractModel):
    """DescribeInstanceList request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project/workspace ID
        :type ProjectId: str
        :param _PageIndex: Page Number
        :type PageIndex: int
        :param _PageSize: Number of items displayed per page
        :type PageSize: int
        :param _CycleList: Cycle List (e.g., daily, one-time), optional
        :type CycleList: list of str
        :param _OwnerList: Person in Charge
        :type OwnerList: list of str
        :param _InstanceType: Keep consistent with previous
        :type InstanceType: str
        :param _Sort: Sorting Order (asc, desc)
        :type Sort: str
        :param _SortCol: Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :type SortCol: str
        :param _TaskTypeList: Type List (e.g., Python Task Type: 30
PySpark Task Type: 31
hivesql task type:34
shell task type:35
sparksql task type:36 jdbcsql task type:21 dlc task type:32), optional
        :type TaskTypeList: list of int
        :param _StateList: Status list (e.g., success 2, executing 1), optional
        :type StateList: list of int
        :param _Keyword: Task Name
        :type Keyword: str
        """
        self._ProjectId = None
        self._PageIndex = None
        self._PageSize = None
        self._CycleList = None
        self._OwnerList = None
        self._InstanceType = None
        self._Sort = None
        self._SortCol = None
        self._TaskTypeList = None
        self._StateList = None
        self._Keyword = None

    @property
    def ProjectId(self):
        """Project/workspace ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageIndex(self):
        """Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Number of items displayed per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def CycleList(self):
        """Cycle List (e.g., daily, one-time), optional
        :rtype: list of str
        """
        return self._CycleList

    @CycleList.setter
    def CycleList(self, CycleList):
        self._CycleList = CycleList

    @property
    def OwnerList(self):
        """Person in Charge
        :rtype: list of str
        """
        return self._OwnerList

    @OwnerList.setter
    def OwnerList(self, OwnerList):
        self._OwnerList = OwnerList

    @property
    def InstanceType(self):
        """Keep consistent with previous
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def Sort(self):
        """Sorting Order (asc, desc)
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def SortCol(self):
        """Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :rtype: str
        """
        return self._SortCol

    @SortCol.setter
    def SortCol(self, SortCol):
        self._SortCol = SortCol

    @property
    def TaskTypeList(self):
        """Type List (e.g., Python Task Type: 30
PySpark Task Type: 31
hivesql task type:34
shell task type:35
sparksql task type:36 jdbcsql task type:21 dlc task type:32), optional
        :rtype: list of int
        """
        return self._TaskTypeList

    @TaskTypeList.setter
    def TaskTypeList(self, TaskTypeList):
        self._TaskTypeList = TaskTypeList

    @property
    def StateList(self):
        """Status list (e.g., success 2, executing 1), optional
        :rtype: list of int
        """
        return self._StateList

    @StateList.setter
    def StateList(self, StateList):
        self._StateList = StateList

    @property
    def Keyword(self):
        """Task Name
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._CycleList = params.get("CycleList")
        self._OwnerList = params.get("OwnerList")
        self._InstanceType = params.get("InstanceType")
        self._Sort = params.get("Sort")
        self._SortCol = params.get("SortCol")
        self._TaskTypeList = params.get("TaskTypeList")
        self._StateList = params.get("StateList")
        self._Keyword = params.get("Keyword")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceListResponse(AbstractModel):
    """DescribeInstanceList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: str
        :param _InstanceList: Instance ListNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceList: list of InstanceList
        :param _TotalCount: Total number of itemsNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._InstanceList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InstanceList(self):
        """Instance ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceList
        """
        return self._InstanceList

    @InstanceList.setter
    def InstanceList(self, InstanceList):
        self._InstanceList = InstanceList

    @property
    def TotalCount(self):
        """Total number of itemsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        if params.get("InstanceList") is not None:
            self._InstanceList = []
            for item in params.get("InstanceList"):
                obj = InstanceList()
                obj._deserialize(item)
                self._InstanceList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeInstanceLogDetailRequest(AbstractModel):
    """DescribeInstanceLogDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        :param _BrokerIp: Server Ip
        :type BrokerIp: str
        :param _OriginFileName: File Name
        :type OriginFileName: str
        :param _StartCount: Starting Row
        :type StartCount: int
        :param _LineCount: Number of Rows Per Query
        :type LineCount: int
        """
        self._ProjectId = None
        self._TaskId = None
        self._CurRunDate = None
        self._BrokerIp = None
        self._OriginFileName = None
        self._StartCount = None
        self._LineCount = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def BrokerIp(self):
        """Server Ip
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def OriginFileName(self):
        """File Name
        :rtype: str
        """
        return self._OriginFileName

    @OriginFileName.setter
    def OriginFileName(self, OriginFileName):
        self._OriginFileName = OriginFileName

    @property
    def StartCount(self):
        """Starting Row
        :rtype: int
        """
        return self._StartCount

    @StartCount.setter
    def StartCount(self, StartCount):
        self._StartCount = StartCount

    @property
    def LineCount(self):
        """Number of Rows Per Query
        :rtype: int
        """
        return self._LineCount

    @LineCount.setter
    def LineCount(self, LineCount):
        self._LineCount = LineCount


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._BrokerIp = params.get("BrokerIp")
        self._OriginFileName = params.get("OriginFileName")
        self._StartCount = params.get("StartCount")
        self._LineCount = params.get("LineCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceLogDetailResponse(AbstractModel):
    """DescribeInstanceLogDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Log results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.InstanceLogInfoOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Log results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceLogInfoOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = InstanceLogInfoOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeInstanceLogFileRequest(AbstractModel):
    """DescribeInstanceLogFile request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Instance data time
        :type CurRunDate: str
        :param _BrokerIp: Executor IP
        :type BrokerIp: str
        :param _OriginFileName: Log file name
        :type OriginFileName: str
        """
        self._ProjectId = None
        self._TaskId = None
        self._CurRunDate = None
        self._BrokerIp = None
        self._OriginFileName = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Instance data time
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def BrokerIp(self):
        """Executor IP
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def OriginFileName(self):
        """Log file name
        :rtype: str
        """
        return self._OriginFileName

    @OriginFileName.setter
    def OriginFileName(self, OriginFileName):
        self._OriginFileName = OriginFileName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._BrokerIp = params.get("BrokerIp")
        self._OriginFileName = params.get("OriginFileName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceLogFileResponse(AbstractModel):
    """DescribeInstanceLogFile response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Download File Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.InstanceDownloadLogInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Download File Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceDownloadLogInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = InstanceDownloadLogInfo()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeInstanceLogListRequest(AbstractModel):
    """DescribeInstanceLogList request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        """
        self._TaskId = None
        self._CurRunDate = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceLogListResponse(AbstractModel):
    """DescribeInstanceLogList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Log list
        :type Data: str
        :param _InstanceLogList: Log listNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLogList: list of InstanceLogList
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._InstanceLogList = None
        self._RequestId = None

    @property
    def Data(self):
        """Log list
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InstanceLogList(self):
        """Log listNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceLogList
        """
        return self._InstanceLogList

    @InstanceLogList.setter
    def InstanceLogList(self, InstanceLogList):
        self._InstanceLogList = InstanceLogList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        if params.get("InstanceLogList") is not None:
            self._InstanceLogList = []
            for item in params.get("InstanceLogList"):
                obj = InstanceLogList()
                obj._deserialize(item)
                self._InstanceLogList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeInstanceLogRequest(AbstractModel):
    """DescribeInstanceLog request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        :param _BrokerIp: Server Ip
        :type BrokerIp: str
        :param _OriginFileName: File Name
        :type OriginFileName: str
        """
        self._TaskId = None
        self._CurRunDate = None
        self._BrokerIp = None
        self._OriginFileName = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def BrokerIp(self):
        """Server Ip
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def OriginFileName(self):
        """File Name
        :rtype: str
        """
        return self._OriginFileName

    @OriginFileName.setter
    def OriginFileName(self, OriginFileName):
        self._OriginFileName = OriginFileName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._BrokerIp = params.get("BrokerIp")
        self._OriginFileName = params.get("OriginFileName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceLogResponse(AbstractModel):
    """DescribeInstanceLog response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Returned result
        :type Data: str
        :param _InstanceLogInfo: Return results
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLogInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationInstanceLog`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._InstanceLogInfo = None
        self._RequestId = None

    @property
    def Data(self):
        """Returned result
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InstanceLogInfo(self):
        """Return results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationInstanceLog`
        """
        return self._InstanceLogInfo

    @InstanceLogInfo.setter
    def InstanceLogInfo(self, InstanceLogInfo):
        self._InstanceLogInfo = InstanceLogInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        if params.get("InstanceLogInfo") is not None:
            self._InstanceLogInfo = IntegrationInstanceLog()
            self._InstanceLogInfo._deserialize(params.get("InstanceLogInfo"))
        self._RequestId = params.get("RequestId")


class DescribeIntegrationNodeRequest(AbstractModel):
    """DescribeIntegrationNode request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Node ID
        :type Id: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type, 201 for Real-time Task, 202 for Offline Task
        :type TaskType: int
        """
        self._Id = None
        self._ProjectId = None
        self._TaskType = None

    @property
    def Id(self):
        """Node ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type, 201 for Real-time Task, 202 for Offline Task
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationNodeResponse(AbstractModel):
    """DescribeIntegrationNode response structure.

    """

    def __init__(self):
        r"""
        :param _NodeInfo: Node information\nNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        :param _SourceCheckFlag: Has the upstream node been modified? true Modified, needs to be prompted; false Not modified\nNote: This field may return null, indicating that no valid value can be obtained.
        :type SourceCheckFlag: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NodeInfo = None
        self._SourceCheckFlag = None
        self._RequestId = None

    @property
    def NodeInfo(self):
        """Node information\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        """
        return self._NodeInfo

    @NodeInfo.setter
    def NodeInfo(self, NodeInfo):
        self._NodeInfo = NodeInfo

    @property
    def SourceCheckFlag(self):
        """Has the upstream node been modified? true Modified, needs to be prompted; false Not modified\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._SourceCheckFlag

    @SourceCheckFlag.setter
    def SourceCheckFlag(self, SourceCheckFlag):
        self._SourceCheckFlag = SourceCheckFlag

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NodeInfo") is not None:
            self._NodeInfo = IntegrationNodeInfo()
            self._NodeInfo._deserialize(params.get("NodeInfo"))
        self._SourceCheckFlag = params.get("SourceCheckFlag")
        self._RequestId = params.get("RequestId")


class DescribeIntegrationStatisticsInstanceTrendRequest(AbstractModel):
    """DescribeIntegrationStatisticsInstanceTrend request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type (Real-time: 201, Offline: 202)
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _QueryDate: Query Date
        :type QueryDate: str
        :param _ExecutorGroupId: Resource Group ID
        :type ExecutorGroupId: str
        """
        self._TaskType = None
        self._ProjectId = None
        self._QueryDate = None
        self._ExecutorGroupId = None

    @property
    def TaskType(self):
        """Task Type (Real-time: 201, Offline: 202)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def QueryDate(self):
        """Query Date
        :rtype: str
        """
        return self._QueryDate

    @QueryDate.setter
    def QueryDate(self, QueryDate):
        self._QueryDate = QueryDate

    @property
    def ExecutorGroupId(self):
        """Resource Group ID
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._QueryDate = params.get("QueryDate")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationStatisticsInstanceTrendResponse(AbstractModel):
    """DescribeIntegrationStatisticsInstanceTrend response structure.

    """

    def __init__(self):
        r"""
        :param _TrendsData: Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :type TrendsData: list of IntegrationStatisticsTrendResult
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TrendsData = None
        self._RequestId = None

    @property
    def TrendsData(self):
        """Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationStatisticsTrendResult
        """
        return self._TrendsData

    @TrendsData.setter
    def TrendsData(self, TrendsData):
        self._TrendsData = TrendsData

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrendsData") is not None:
            self._TrendsData = []
            for item in params.get("TrendsData"):
                obj = IntegrationStatisticsTrendResult()
                obj._deserialize(item)
                self._TrendsData.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIntegrationStatisticsRecordsTrendRequest(AbstractModel):
    """DescribeIntegrationStatisticsRecordsTrend request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type (Real-time: 201, Offline: 202)
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _QueryDate: Query Date
        :type QueryDate: str
        """
        self._TaskType = None
        self._ProjectId = None
        self._QueryDate = None

    @property
    def TaskType(self):
        """Task Type (Real-time: 201, Offline: 202)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def QueryDate(self):
        """Query Date
        :rtype: str
        """
        return self._QueryDate

    @QueryDate.setter
    def QueryDate(self, QueryDate):
        self._QueryDate = QueryDate


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._QueryDate = params.get("QueryDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationStatisticsRecordsTrendResponse(AbstractModel):
    """DescribeIntegrationStatisticsRecordsTrend response structure.

    """

    def __init__(self):
        r"""
        :param _TrendsData: Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :type TrendsData: list of IntegrationStatisticsTrendResult
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TrendsData = None
        self._RequestId = None

    @property
    def TrendsData(self):
        """Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationStatisticsTrendResult
        """
        return self._TrendsData

    @TrendsData.setter
    def TrendsData(self, TrendsData):
        self._TrendsData = TrendsData

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrendsData") is not None:
            self._TrendsData = []
            for item in params.get("TrendsData"):
                obj = IntegrationStatisticsTrendResult()
                obj._deserialize(item)
                self._TrendsData.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIntegrationStatisticsRequest(AbstractModel):
    """DescribeIntegrationStatistics request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type (Real-time: 201, Offline: 202)
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _QueryDate: Query Date
        :type QueryDate: str
        """
        self._TaskType = None
        self._ProjectId = None
        self._QueryDate = None

    @property
    def TaskType(self):
        """Task Type (Real-time: 201, Offline: 202)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def QueryDate(self):
        """Query Date
        :rtype: str
        """
        return self._QueryDate

    @QueryDate.setter
    def QueryDate(self, QueryDate):
        self._QueryDate = QueryDate


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._QueryDate = params.get("QueryDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationStatisticsResponse(AbstractModel):
    """DescribeIntegrationStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _TotalTask: Total Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalTask: int
        :param _ProdTask: Number of Production Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProdTask: int
        :param _DevTask: Number of Development Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type DevTask: int
        :param _TotalReadRecords: Total Number of Reads
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalReadRecords: int
        :param _TotalWriteRecords: Total Number of Writes
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalWriteRecords: int
        :param _TotalErrorRecords: Total Number of Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalErrorRecords: int
        :param _TotalAlarmEvent: Total Number of Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalAlarmEvent: int
        :param _IncreaseReadRecords: Daily Increase in Reads
Note: This field may return null, indicating that no valid value can be obtained.
        :type IncreaseReadRecords: int
        :param _IncreaseWriteRecords: Daily Increase in Writes
Note: This field may return null, indicating that no valid value can be obtained.
        :type IncreaseWriteRecords: int
        :param _IncreaseErrorRecords: Daily Increase in Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
        :type IncreaseErrorRecords: int
        :param _IncreaseAlarmEvent: Daily Increase in Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
        :type IncreaseAlarmEvent: int
        :param _AlarmEvent: Alarm Event Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmEvent: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalTask = None
        self._ProdTask = None
        self._DevTask = None
        self._TotalReadRecords = None
        self._TotalWriteRecords = None
        self._TotalErrorRecords = None
        self._TotalAlarmEvent = None
        self._IncreaseReadRecords = None
        self._IncreaseWriteRecords = None
        self._IncreaseErrorRecords = None
        self._IncreaseAlarmEvent = None
        self._AlarmEvent = None
        self._RequestId = None

    @property
    def TotalTask(self):
        """Total Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalTask

    @TotalTask.setter
    def TotalTask(self, TotalTask):
        self._TotalTask = TotalTask

    @property
    def ProdTask(self):
        """Number of Production Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ProdTask

    @ProdTask.setter
    def ProdTask(self, ProdTask):
        self._ProdTask = ProdTask

    @property
    def DevTask(self):
        """Number of Development Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DevTask

    @DevTask.setter
    def DevTask(self, DevTask):
        self._DevTask = DevTask

    @property
    def TotalReadRecords(self):
        """Total Number of Reads
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalReadRecords

    @TotalReadRecords.setter
    def TotalReadRecords(self, TotalReadRecords):
        self._TotalReadRecords = TotalReadRecords

    @property
    def TotalWriteRecords(self):
        """Total Number of Writes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalWriteRecords

    @TotalWriteRecords.setter
    def TotalWriteRecords(self, TotalWriteRecords):
        self._TotalWriteRecords = TotalWriteRecords

    @property
    def TotalErrorRecords(self):
        """Total Number of Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalErrorRecords

    @TotalErrorRecords.setter
    def TotalErrorRecords(self, TotalErrorRecords):
        self._TotalErrorRecords = TotalErrorRecords

    @property
    def TotalAlarmEvent(self):
        """Total Number of Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalAlarmEvent

    @TotalAlarmEvent.setter
    def TotalAlarmEvent(self, TotalAlarmEvent):
        self._TotalAlarmEvent = TotalAlarmEvent

    @property
    def IncreaseReadRecords(self):
        """Daily Increase in Reads
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IncreaseReadRecords

    @IncreaseReadRecords.setter
    def IncreaseReadRecords(self, IncreaseReadRecords):
        self._IncreaseReadRecords = IncreaseReadRecords

    @property
    def IncreaseWriteRecords(self):
        """Daily Increase in Writes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IncreaseWriteRecords

    @IncreaseWriteRecords.setter
    def IncreaseWriteRecords(self, IncreaseWriteRecords):
        self._IncreaseWriteRecords = IncreaseWriteRecords

    @property
    def IncreaseErrorRecords(self):
        """Daily Increase in Dirty Data Entries
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IncreaseErrorRecords

    @IncreaseErrorRecords.setter
    def IncreaseErrorRecords(self, IncreaseErrorRecords):
        self._IncreaseErrorRecords = IncreaseErrorRecords

    @property
    def IncreaseAlarmEvent(self):
        """Daily Increase in Alarm Events
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IncreaseAlarmEvent

    @IncreaseAlarmEvent.setter
    def IncreaseAlarmEvent(self, IncreaseAlarmEvent):
        self._IncreaseAlarmEvent = IncreaseAlarmEvent

    @property
    def AlarmEvent(self):
        """Alarm Event Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmEvent

    @AlarmEvent.setter
    def AlarmEvent(self, AlarmEvent):
        self._AlarmEvent = AlarmEvent

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalTask = params.get("TotalTask")
        self._ProdTask = params.get("ProdTask")
        self._DevTask = params.get("DevTask")
        self._TotalReadRecords = params.get("TotalReadRecords")
        self._TotalWriteRecords = params.get("TotalWriteRecords")
        self._TotalErrorRecords = params.get("TotalErrorRecords")
        self._TotalAlarmEvent = params.get("TotalAlarmEvent")
        self._IncreaseReadRecords = params.get("IncreaseReadRecords")
        self._IncreaseWriteRecords = params.get("IncreaseWriteRecords")
        self._IncreaseErrorRecords = params.get("IncreaseErrorRecords")
        self._IncreaseAlarmEvent = params.get("IncreaseAlarmEvent")
        self._AlarmEvent = params.get("AlarmEvent")
        self._RequestId = params.get("RequestId")


class DescribeIntegrationStatisticsTaskStatusRequest(AbstractModel):
    """DescribeIntegrationStatisticsTaskStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type (Real-time: 201, Offline: 202)
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _QueryDate: Query Date
        :type QueryDate: str
        :param _ExecutorGroupId: Resource Group ID
        :type ExecutorGroupId: str
        """
        self._TaskType = None
        self._ProjectId = None
        self._QueryDate = None
        self._ExecutorGroupId = None

    @property
    def TaskType(self):
        """Task Type (Real-time: 201, Offline: 202)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def QueryDate(self):
        """Query Date
        :rtype: str
        """
        return self._QueryDate

    @QueryDate.setter
    def QueryDate(self, QueryDate):
        self._QueryDate = QueryDate

    @property
    def ExecutorGroupId(self):
        """Resource Group ID
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._QueryDate = params.get("QueryDate")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationStatisticsTaskStatusResponse(AbstractModel):
    """DescribeIntegrationStatisticsTaskStatus response structure.

    """

    def __init__(self):
        r"""
        :param _StatusData: Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :type StatusData: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._StatusData = None
        self._RequestId = None

    @property
    def StatusData(self):
        """Statistical ResultsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StatusData

    @StatusData.setter
    def StatusData(self, StatusData):
        self._StatusData = StatusData

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._StatusData = params.get("StatusData")
        self._RequestId = params.get("RequestId")


class DescribeIntegrationStatisticsTaskStatusTrendRequest(AbstractModel):
    """DescribeIntegrationStatisticsTaskStatusTrend request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: Task Type (Real-time:201, Offline:202)
        :type TaskType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _QueryDate: Query Date
        :type QueryDate: str
        :param _ExecutorGroupId: Resource Group ID
        :type ExecutorGroupId: str
        """
        self._TaskType = None
        self._ProjectId = None
        self._QueryDate = None
        self._ExecutorGroupId = None

    @property
    def TaskType(self):
        """Task Type (Real-time:201, Offline:202)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def QueryDate(self):
        """Query Date
        :rtype: str
        """
        return self._QueryDate

    @QueryDate.setter
    def QueryDate(self, QueryDate):
        self._QueryDate = QueryDate

    @property
    def ExecutorGroupId(self):
        """Resource Group ID
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._ProjectId = params.get("ProjectId")
        self._QueryDate = params.get("QueryDate")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationStatisticsTaskStatusTrendResponse(AbstractModel):
    """DescribeIntegrationStatisticsTaskStatusTrend response structure.

    """

    def __init__(self):
        r"""
        :param _TrendsData: Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type TrendsData: list of IntegrationStatisticsTrendResult
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TrendsData = None
        self._RequestId = None

    @property
    def TrendsData(self):
        """Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationStatisticsTrendResult
        """
        return self._TrendsData

    @TrendsData.setter
    def TrendsData(self, TrendsData):
        self._TrendsData = TrendsData

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrendsData") is not None:
            self._TrendsData = []
            for item in params.get("TrendsData"):
                obj = IntegrationStatisticsTrendResult()
                obj._deserialize(item)
                self._TrendsData.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIntegrationTaskRequest(AbstractModel):
    """DescribeIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type, 201: Real-time Integration Task, 202: Offline Integration Task, default value is 201 for real-time task if not specified
        :type TaskType: int
        :param _InstanceVersion: Submit version number
        :type InstanceVersion: int
        """
        self._TaskId = None
        self._ProjectId = None
        self._TaskType = None
        self._InstanceVersion = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type, 201: Real-time Integration Task, 202: Offline Integration Task, default value is 201 for real-time task if not specified
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def InstanceVersion(self):
        """Submit version number
        :rtype: int
        """
        return self._InstanceVersion

    @InstanceVersion.setter
    def InstanceVersion(self, InstanceVersion):
        self._InstanceVersion = InstanceVersion


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        self._InstanceVersion = params.get("InstanceVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationTaskResponse(AbstractModel):
    """DescribeIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskInfo: Task InformationNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        :param _AgentStatus: Collector statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type AgentStatus: :class:`tencentcloud.wedata.v20210820.models.AgentStatus`
        :param _TaskVersion: Task version information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskVersion: :class:`tencentcloud.wedata.v20210820.models.TaskVersionInstance`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskInfo = None
        self._AgentStatus = None
        self._TaskVersion = None
        self._RequestId = None

    @property
    def TaskInfo(self):
        """Task InformationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        """
        return self._TaskInfo

    @TaskInfo.setter
    def TaskInfo(self, TaskInfo):
        self._TaskInfo = TaskInfo

    @property
    def AgentStatus(self):
        """Collector statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.AgentStatus`
        """
        return self._AgentStatus

    @AgentStatus.setter
    def AgentStatus(self, AgentStatus):
        self._AgentStatus = AgentStatus

    @property
    def TaskVersion(self):
        """Task version information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskVersionInstance`
        """
        return self._TaskVersion

    @TaskVersion.setter
    def TaskVersion(self, TaskVersion):
        self._TaskVersion = TaskVersion

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskInfo") is not None:
            self._TaskInfo = IntegrationTaskInfo()
            self._TaskInfo._deserialize(params.get("TaskInfo"))
        if params.get("AgentStatus") is not None:
            self._AgentStatus = AgentStatus()
            self._AgentStatus._deserialize(params.get("AgentStatus"))
        if params.get("TaskVersion") is not None:
            self._TaskVersion = TaskVersionInstance()
            self._TaskVersion._deserialize(params.get("TaskVersion"))
        self._RequestId = params.get("RequestId")


class DescribeIntegrationTasksRequest(AbstractModel):
    """DescribeIntegrationTasks request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Page n of Pagination
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Query Filter
        :type Filters: list of Filter
        :param _OrderFields: Sorting Field Information
        :type OrderFields: list of OrderField
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _TaskType: 201. Real-time synchronization, 202. Offline Synchronization Default is real-time
        :type TaskType: int
        """
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._StartTime = None
        self._EndTime = None
        self._TaskType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Page n of Pagination
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Query Filter
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sorting Field Information
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TaskType(self):
        """201. Real-time synchronization, 202. Offline Synchronization Default is real-time
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationTasksResponse(AbstractModel):
    """DescribeIntegrationTasks response structure.

    """

    def __init__(self):
        r"""
        :param _TaskInfoSet: Task ListNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskInfoSet: list of IntegrationTaskInfo
        :param _TotalCount: Total Number of Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskInfoSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TaskInfoSet(self):
        """Task ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationTaskInfo
        """
        return self._TaskInfoSet

    @TaskInfoSet.setter
    def TaskInfoSet(self, TaskInfoSet):
        self._TaskInfoSet = TaskInfoSet

    @property
    def TotalCount(self):
        """Total Number of Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskInfoSet") is not None:
            self._TaskInfoSet = []
            for item in params.get("TaskInfoSet"):
                obj = IntegrationTaskInfo()
                obj._deserialize(item)
                self._TaskInfoSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeIntegrationVersionNodesInfoRequest(AbstractModel):
    """DescribeIntegrationVersionNodesInfo request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskVersionPath: The selected version's storage path for the task:
The value of Base64.encode($region | $bucket | $ftp.file.name) under TaskInfo.TaskExt.Properties returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
        :type TaskVersionPath: str
        :param _TaskVersion: The selected version ID for the task:
The value of VersionId returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
        :type TaskVersion: str
        """
        self._TaskId = None
        self._ProjectId = None
        self._TaskVersionPath = None
        self._TaskVersion = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskVersionPath(self):
        """The selected version's storage path for the task:
The value of Base64.encode($region | $bucket | $ftp.file.name) under TaskInfo.TaskExt.Properties returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
        :rtype: str
        """
        return self._TaskVersionPath

    @TaskVersionPath.setter
    def TaskVersionPath(self, TaskVersionPath):
        self._TaskVersionPath = TaskVersionPath

    @property
    def TaskVersion(self):
        """The selected version ID for the task:
The value of VersionId returned by DescribeDsTaskVersionList or DescribeDsTaskVersionInfo
        :rtype: str
        """
        return self._TaskVersion

    @TaskVersion.setter
    def TaskVersion(self, TaskVersion):
        self._TaskVersion = TaskVersion


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._TaskVersionPath = params.get("TaskVersionPath")
        self._TaskVersion = params.get("TaskVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIntegrationVersionNodesInfoResponse(AbstractModel):
    """DescribeIntegrationVersionNodesInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Nodes: Task Node Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Nodes: list of IntegrationNodeInfo
        :param _Mappings: Task Mapping Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Mappings: list of IntegrationNodeMapping
        :param _TaskId: Task ID
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Nodes = None
        self._Mappings = None
        self._TaskId = None
        self._RequestId = None

    @property
    def Nodes(self):
        """Task Node Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeInfo
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Mappings(self):
        """Task Mapping Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeMapping
        """
        return self._Mappings

    @Mappings.setter
    def Mappings(self, Mappings):
        self._Mappings = Mappings

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = IntegrationNodeInfo()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Mappings") is not None:
            self._Mappings = []
            for item in params.get("Mappings"):
                obj = IntegrationNodeMapping()
                obj._deserialize(item)
                self._Mappings.append(obj)
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DescribeOfflineTaskTokenRequest(AbstractModel):
    """DescribeOfflineTaskToken request structure.

    """


class DescribeOfflineTaskTokenResponse(AbstractModel):
    """DescribeOfflineTaskToken response structure.

    """

    def __init__(self):
        r"""
        :param _Token: Long Connection Temporary Token
        :type Token: str
        :param _Data: Long Connection Temporary Token. Same meaning as Token, prioritize Data, if Data is null, then use Token.
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Token = None
        self._Data = None
        self._RequestId = None

    @property
    def Token(self):
        """Long Connection Temporary Token
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def Data(self):
        """Long Connection Temporary Token. Same meaning as Token, prioritize Data, if Data is null, then use Token.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Token = params.get("Token")
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeOperateOpsTasksRequest(AbstractModel):
    """DescribeOperateOpsTasks request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderIdList: Folder ID, multiple folders separated by commas
        :type FolderIdList: str
        :param _WorkFlowIdList: Workflow ID, multiple Workflow IDs separated by English commas
        :type WorkFlowIdList: str
        :param _WorkFlowNameList: Workflow name, multiple Workflow names separated by English commas
        :type WorkFlowNameList: str
        :param _TaskNameList: Task Name, multiple Task Names separated by English commas
        :type TaskNameList: str
        :param _TaskIdList: Task ID, multiple Task IDs separated by English commas
        :type TaskIdList: str
        :param _PageNumber: Page Number
        :type PageNumber: str
        :param _PageSize: Page size
        :type PageSize: str
        :param _SortItem: Sort Fields, supported fields are FirstSubmitTime and FirstRunTime, indicating the most recent submission and the first execution event
        :type SortItem: str
        :param _SortType: Sort Type. Two values DESC,ASC
        :type SortType: str
        :param _InChargeList: Person in Charge, multiple Persons in Charge separated by English commas
        :type InChargeList: str
        :param _TaskTypeIdList: Task Type ID String, multiple Task Type IDs separated by English commas
        :type TaskTypeIdList: str
        :param _StatusList: Task Status String, multiple Task Statuses separated by English commas
        :type StatusList: str
        :param _TaskCycleUnitList: Task Cycle Type String, multiple Task Cycles separated by English commas
        :type TaskCycleUnitList: str
        :param _ProductNameList: Task Belonging Product Type
        :type ProductNameList: str
        :param _SourceServiceId: Data Source ID or (only for offline sync tasks) Source Data Source ID
        :type SourceServiceId: str
        :param _SourceServiceType: Data Source Type or (only for offline sync tasks) Source Data Source Type
        :type SourceServiceType: str
        :param _TargetServiceId: (Only for offline sync tasks) Target Data Source ID
        :type TargetServiceId: str
        :param _TargetServiceType: (Only for offline sync tasks) Target Data Source Type
        :type TargetServiceType: str
        :param _AlarmType: Alarm Type, multiple types separated by commas
        :type AlarmType: str
        :param _ExecutorGroupIdList: Resource Group ID, multiple Resource Group IDs separated by English commas
        :type ExecutorGroupIdList: str
        :param _TaskTags: Task tag
        :type TaskTags: list of TaskTag
        :param _KeyWord: Query Keyword
        :type KeyWord: str
        :param _InitStrategy: Instance Generation Method
        :type InitStrategy: str
        :param _RequestResourceTypes: Additional Requested Resource Types
        :type RequestResourceTypes: list of str
        """
        self._ProjectId = None
        self._FolderIdList = None
        self._WorkFlowIdList = None
        self._WorkFlowNameList = None
        self._TaskNameList = None
        self._TaskIdList = None
        self._PageNumber = None
        self._PageSize = None
        self._SortItem = None
        self._SortType = None
        self._InChargeList = None
        self._TaskTypeIdList = None
        self._StatusList = None
        self._TaskCycleUnitList = None
        self._ProductNameList = None
        self._SourceServiceId = None
        self._SourceServiceType = None
        self._TargetServiceId = None
        self._TargetServiceType = None
        self._AlarmType = None
        self._ExecutorGroupIdList = None
        self._TaskTags = None
        self._KeyWord = None
        self._InitStrategy = None
        self._RequestResourceTypes = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderIdList(self):
        """Folder ID, multiple folders separated by commas
        :rtype: str
        """
        return self._FolderIdList

    @FolderIdList.setter
    def FolderIdList(self, FolderIdList):
        self._FolderIdList = FolderIdList

    @property
    def WorkFlowIdList(self):
        """Workflow ID, multiple Workflow IDs separated by English commas
        :rtype: str
        """
        return self._WorkFlowIdList

    @WorkFlowIdList.setter
    def WorkFlowIdList(self, WorkFlowIdList):
        self._WorkFlowIdList = WorkFlowIdList

    @property
    def WorkFlowNameList(self):
        """Workflow name, multiple Workflow names separated by English commas
        :rtype: str
        """
        return self._WorkFlowNameList

    @WorkFlowNameList.setter
    def WorkFlowNameList(self, WorkFlowNameList):
        self._WorkFlowNameList = WorkFlowNameList

    @property
    def TaskNameList(self):
        """Task Name, multiple Task Names separated by English commas
        :rtype: str
        """
        return self._TaskNameList

    @TaskNameList.setter
    def TaskNameList(self, TaskNameList):
        self._TaskNameList = TaskNameList

    @property
    def TaskIdList(self):
        """Task ID, multiple Task IDs separated by English commas
        :rtype: str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def PageNumber(self):
        """Page Number
        :rtype: str
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: str
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def SortItem(self):
        """Sort Fields, supported fields are FirstSubmitTime and FirstRunTime, indicating the most recent submission and the first execution event
        :rtype: str
        """
        return self._SortItem

    @SortItem.setter
    def SortItem(self, SortItem):
        self._SortItem = SortItem

    @property
    def SortType(self):
        """Sort Type. Two values DESC,ASC
        :rtype: str
        """
        return self._SortType

    @SortType.setter
    def SortType(self, SortType):
        self._SortType = SortType

    @property
    def InChargeList(self):
        """Person in Charge, multiple Persons in Charge separated by English commas
        :rtype: str
        """
        return self._InChargeList

    @InChargeList.setter
    def InChargeList(self, InChargeList):
        self._InChargeList = InChargeList

    @property
    def TaskTypeIdList(self):
        """Task Type ID String, multiple Task Type IDs separated by English commas
        :rtype: str
        """
        return self._TaskTypeIdList

    @TaskTypeIdList.setter
    def TaskTypeIdList(self, TaskTypeIdList):
        self._TaskTypeIdList = TaskTypeIdList

    @property
    def StatusList(self):
        """Task Status String, multiple Task Statuses separated by English commas
        :rtype: str
        """
        return self._StatusList

    @StatusList.setter
    def StatusList(self, StatusList):
        self._StatusList = StatusList

    @property
    def TaskCycleUnitList(self):
        """Task Cycle Type String, multiple Task Cycles separated by English commas
        :rtype: str
        """
        return self._TaskCycleUnitList

    @TaskCycleUnitList.setter
    def TaskCycleUnitList(self, TaskCycleUnitList):
        self._TaskCycleUnitList = TaskCycleUnitList

    @property
    def ProductNameList(self):
        """Task Belonging Product Type
        :rtype: str
        """
        return self._ProductNameList

    @ProductNameList.setter
    def ProductNameList(self, ProductNameList):
        self._ProductNameList = ProductNameList

    @property
    def SourceServiceId(self):
        """Data Source ID or (only for offline sync tasks) Source Data Source ID
        :rtype: str
        """
        return self._SourceServiceId

    @SourceServiceId.setter
    def SourceServiceId(self, SourceServiceId):
        self._SourceServiceId = SourceServiceId

    @property
    def SourceServiceType(self):
        """Data Source Type or (only for offline sync tasks) Source Data Source Type
        :rtype: str
        """
        return self._SourceServiceType

    @SourceServiceType.setter
    def SourceServiceType(self, SourceServiceType):
        self._SourceServiceType = SourceServiceType

    @property
    def TargetServiceId(self):
        """(Only for offline sync tasks) Target Data Source ID
        :rtype: str
        """
        return self._TargetServiceId

    @TargetServiceId.setter
    def TargetServiceId(self, TargetServiceId):
        self._TargetServiceId = TargetServiceId

    @property
    def TargetServiceType(self):
        """(Only for offline sync tasks) Target Data Source Type
        :rtype: str
        """
        return self._TargetServiceType

    @TargetServiceType.setter
    def TargetServiceType(self, TargetServiceType):
        self._TargetServiceType = TargetServiceType

    @property
    def AlarmType(self):
        """Alarm Type, multiple types separated by commas
        :rtype: str
        """
        return self._AlarmType

    @AlarmType.setter
    def AlarmType(self, AlarmType):
        self._AlarmType = AlarmType

    @property
    def ExecutorGroupIdList(self):
        """Resource Group ID, multiple Resource Group IDs separated by English commas
        :rtype: str
        """
        return self._ExecutorGroupIdList

    @ExecutorGroupIdList.setter
    def ExecutorGroupIdList(self, ExecutorGroupIdList):
        self._ExecutorGroupIdList = ExecutorGroupIdList

    @property
    def TaskTags(self):
        """Task tag
        :rtype: list of TaskTag
        """
        return self._TaskTags

    @TaskTags.setter
    def TaskTags(self, TaskTags):
        self._TaskTags = TaskTags

    @property
    def KeyWord(self):
        """Query Keyword
        :rtype: str
        """
        return self._KeyWord

    @KeyWord.setter
    def KeyWord(self, KeyWord):
        self._KeyWord = KeyWord

    @property
    def InitStrategy(self):
        """Instance Generation Method
        :rtype: str
        """
        return self._InitStrategy

    @InitStrategy.setter
    def InitStrategy(self, InitStrategy):
        self._InitStrategy = InitStrategy

    @property
    def RequestResourceTypes(self):
        """Additional Requested Resource Types
        :rtype: list of str
        """
        return self._RequestResourceTypes

    @RequestResourceTypes.setter
    def RequestResourceTypes(self, RequestResourceTypes):
        self._RequestResourceTypes = RequestResourceTypes


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderIdList = params.get("FolderIdList")
        self._WorkFlowIdList = params.get("WorkFlowIdList")
        self._WorkFlowNameList = params.get("WorkFlowNameList")
        self._TaskNameList = params.get("TaskNameList")
        self._TaskIdList = params.get("TaskIdList")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._SortItem = params.get("SortItem")
        self._SortType = params.get("SortType")
        self._InChargeList = params.get("InChargeList")
        self._TaskTypeIdList = params.get("TaskTypeIdList")
        self._StatusList = params.get("StatusList")
        self._TaskCycleUnitList = params.get("TaskCycleUnitList")
        self._ProductNameList = params.get("ProductNameList")
        self._SourceServiceId = params.get("SourceServiceId")
        self._SourceServiceType = params.get("SourceServiceType")
        self._TargetServiceId = params.get("TargetServiceId")
        self._TargetServiceType = params.get("TargetServiceType")
        self._AlarmType = params.get("AlarmType")
        self._ExecutorGroupIdList = params.get("ExecutorGroupIdList")
        if params.get("TaskTags") is not None:
            self._TaskTags = []
            for item in params.get("TaskTags"):
                obj = TaskTag()
                obj._deserialize(item)
                self._TaskTags.append(obj)
        self._KeyWord = params.get("KeyWord")
        self._InitStrategy = params.get("InitStrategy")
        self._RequestResourceTypes = params.get("RequestResourceTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOperateOpsTasksResponse(AbstractModel):
    """DescribeOperateOpsTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task List Information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OpsTaskInfoPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task List Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OpsTaskInfoPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OpsTaskInfoPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeOpsInstanceLogListRequest(AbstractModel):
    """DescribeOpsInstanceLogList request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        """
        self._TaskId = None
        self._CurRunDate = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpsInstanceLogListResponse(AbstractModel):
    """DescribeOpsInstanceLogList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Instance Log List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of InstanceLogInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Instance Log List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceLogInfo
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = InstanceLogInfo()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeOpsMakePlanInstancesRequest(AbstractModel):
    """DescribeOpsMakePlanInstances request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PlanId: Supplemental Plan ID
        :type PlanId: str
        :param _TaskId: Supplementary Task ID
        :type TaskId: str
        :param _PageNumber: Page number, default value 1
        :type PageNumber: int
        :param _PageSize: Page size, default value 10
        :type PageSize: int
        """
        self._ProjectId = None
        self._PlanId = None
        self._TaskId = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PlanId(self):
        """Supplemental Plan ID
        :rtype: str
        """
        return self._PlanId

    @PlanId.setter
    def PlanId(self, PlanId):
        self._PlanId = PlanId

    @property
    def TaskId(self):
        """Supplementary Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def PageNumber(self):
        """Page number, default value 1
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size, default value 10
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PlanId = params.get("PlanId")
        self._TaskId = params.get("TaskId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpsMakePlanInstancesResponse(AbstractModel):
    """DescribeOpsMakePlanInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Supplemental plan instance paged query results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.MakePlanInstanceOpsDtoCollection`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Supplemental plan instance paged query results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.MakePlanInstanceOpsDtoCollection`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = MakePlanInstanceOpsDtoCollection()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeOpsMakePlanTasksRequest(AbstractModel):
    """DescribeOpsMakePlanTasks request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PlanId: Supplemental Plan ID
        :type PlanId: str
        :param _PageNumber: Page number, default value 1
        :type PageNumber: int
        :param _PageSize: Page size, default value 10
        :type PageSize: int
        """
        self._ProjectId = None
        self._PlanId = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PlanId(self):
        """Supplemental Plan ID
        :rtype: str
        """
        return self._PlanId

    @PlanId.setter
    def PlanId(self, PlanId):
        self._PlanId = PlanId

    @property
    def PageNumber(self):
        """Page number, default value 1
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size, default value 10
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PlanId = params.get("PlanId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpsMakePlanTasksResponse(AbstractModel):
    """DescribeOpsMakePlanTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Supplementary plan task pagination query results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.MakePlanTaskOpsDtoCollection`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Supplementary plan task pagination query results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.MakePlanTaskOpsDtoCollection`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = MakePlanTaskOpsDtoCollection()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeOpsMakePlansRequest(AbstractModel):
    """DescribeOpsMakePlans request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Pagination number, default value: 1
        :type PageNumber: int
        :param _PageSize: Page size, default value 10
        :type PageSize: int
        :param _PlanId: Supplemental Plan ID
        :type PlanId: str
        :param _PlanName: Supplemental Plan Name
        :type PlanName: str
        :param _TaskName: Supplementary Task Name
        :type TaskName: str
        :param _TaskId: Supplementary Task ID
        :type TaskId: str
        :param _Creator: Supplementary Plan Creator
        :type Creator: str
        :param _MinCreateTime: Minimum Creation Time of Supplementary Plan
        :type MinCreateTime: str
        :param _MaxCreateTime: Maximum Creation Time of Supplementary Plan
        :type MaxCreateTime: str
        """
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._PlanId = None
        self._PlanName = None
        self._TaskName = None
        self._TaskId = None
        self._Creator = None
        self._MinCreateTime = None
        self._MaxCreateTime = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Pagination number, default value: 1
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size, default value 10
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def PlanId(self):
        """Supplemental Plan ID
        :rtype: str
        """
        return self._PlanId

    @PlanId.setter
    def PlanId(self, PlanId):
        self._PlanId = PlanId

    @property
    def PlanName(self):
        """Supplemental Plan Name
        :rtype: str
        """
        return self._PlanName

    @PlanName.setter
    def PlanName(self, PlanName):
        self._PlanName = PlanName

    @property
    def TaskName(self):
        """Supplementary Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskId(self):
        """Supplementary Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Creator(self):
        """Supplementary Plan Creator
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def MinCreateTime(self):
        """Minimum Creation Time of Supplementary Plan
        :rtype: str
        """
        return self._MinCreateTime

    @MinCreateTime.setter
    def MinCreateTime(self, MinCreateTime):
        self._MinCreateTime = MinCreateTime

    @property
    def MaxCreateTime(self):
        """Maximum Creation Time of Supplementary Plan
        :rtype: str
        """
        return self._MaxCreateTime

    @MaxCreateTime.setter
    def MaxCreateTime(self, MaxCreateTime):
        self._MaxCreateTime = MaxCreateTime


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._PlanId = params.get("PlanId")
        self._PlanName = params.get("PlanName")
        self._TaskName = params.get("TaskName")
        self._TaskId = params.get("TaskId")
        self._Creator = params.get("Creator")
        self._MinCreateTime = params.get("MinCreateTime")
        self._MaxCreateTime = params.get("MaxCreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpsMakePlansResponse(AbstractModel):
    """DescribeOpsMakePlans response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Supplemental Plan Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.MakePlanOpsDtoCollection`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Supplemental Plan Pagination Query Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.MakePlanOpsDtoCollection`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = MakePlanOpsDtoCollection()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeOpsWorkflowsRequest(AbstractModel):
    """DescribeOpsWorkflows request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProductNameList: Task Product Type Name List, separated by ','
        :type ProductNameList: str
        :param _FolderIdList: File ID list, separated by ','
        :type FolderIdList: str
        :param _WorkFlowIdList: Workflow ID, separated by ','
        :type WorkFlowIdList: str
        :param _WorkFlowNameList: Workflow Name List, separated by ','
        :type WorkFlowNameList: str
        :param _TaskNameList: Task Name List, separated by ','
        :type TaskNameList: str
        :param _TaskIdList: Task ID list, separated by ','
        :type TaskIdList: str
        :param _StatusList: Status List, separated by ','
        :type StatusList: str
        :param _InChargeList: Person in Charge List, separated by ','
        :type InChargeList: str
        :param _PageNumber: Page number
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _SortItem: Sorting Item
        :type SortItem: str
        :param _SortType: Sort Method, DESC or ASC
        :type SortType: str
        """
        self._ProjectId = None
        self._ProductNameList = None
        self._FolderIdList = None
        self._WorkFlowIdList = None
        self._WorkFlowNameList = None
        self._TaskNameList = None
        self._TaskIdList = None
        self._StatusList = None
        self._InChargeList = None
        self._PageNumber = None
        self._PageSize = None
        self._SortItem = None
        self._SortType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProductNameList(self):
        """Task Product Type Name List, separated by ','
        :rtype: str
        """
        return self._ProductNameList

    @ProductNameList.setter
    def ProductNameList(self, ProductNameList):
        self._ProductNameList = ProductNameList

    @property
    def FolderIdList(self):
        """File ID list, separated by ','
        :rtype: str
        """
        return self._FolderIdList

    @FolderIdList.setter
    def FolderIdList(self, FolderIdList):
        self._FolderIdList = FolderIdList

    @property
    def WorkFlowIdList(self):
        """Workflow ID, separated by ','
        :rtype: str
        """
        return self._WorkFlowIdList

    @WorkFlowIdList.setter
    def WorkFlowIdList(self, WorkFlowIdList):
        self._WorkFlowIdList = WorkFlowIdList

    @property
    def WorkFlowNameList(self):
        """Workflow Name List, separated by ','
        :rtype: str
        """
        return self._WorkFlowNameList

    @WorkFlowNameList.setter
    def WorkFlowNameList(self, WorkFlowNameList):
        self._WorkFlowNameList = WorkFlowNameList

    @property
    def TaskNameList(self):
        """Task Name List, separated by ','
        :rtype: str
        """
        return self._TaskNameList

    @TaskNameList.setter
    def TaskNameList(self, TaskNameList):
        self._TaskNameList = TaskNameList

    @property
    def TaskIdList(self):
        """Task ID list, separated by ','
        :rtype: str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def StatusList(self):
        """Status List, separated by ','
        :rtype: str
        """
        return self._StatusList

    @StatusList.setter
    def StatusList(self, StatusList):
        self._StatusList = StatusList

    @property
    def InChargeList(self):
        """Person in Charge List, separated by ','
        :rtype: str
        """
        return self._InChargeList

    @InChargeList.setter
    def InChargeList(self, InChargeList):
        self._InChargeList = InChargeList

    @property
    def PageNumber(self):
        """Page number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def SortItem(self):
        """Sorting Item
        :rtype: str
        """
        return self._SortItem

    @SortItem.setter
    def SortItem(self, SortItem):
        self._SortItem = SortItem

    @property
    def SortType(self):
        """Sort Method, DESC or ASC
        :rtype: str
        """
        return self._SortType

    @SortType.setter
    def SortType(self, SortType):
        self._SortType = SortType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ProductNameList = params.get("ProductNameList")
        self._FolderIdList = params.get("FolderIdList")
        self._WorkFlowIdList = params.get("WorkFlowIdList")
        self._WorkFlowNameList = params.get("WorkFlowNameList")
        self._TaskNameList = params.get("TaskNameList")
        self._TaskIdList = params.get("TaskIdList")
        self._StatusList = params.get("StatusList")
        self._InChargeList = params.get("InChargeList")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._SortItem = params.get("SortItem")
        self._SortType = params.get("SortType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpsWorkflowsResponse(AbstractModel):
    """DescribeOpsWorkflows response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.WorkflowExtOpsDtoPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.WorkflowExtOpsDtoPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WorkflowExtOpsDtoPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeOrganizationalFunctionsRequest(AbstractModel):
    """DescribeOrganizationalFunctions request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Scenario Type: Development, In Use
        :type Type: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Name: Function Name
        :type Name: str
        :param _DisplayName: Display Name
        :type DisplayName: str
        :param _EnvType: Standard Mode Development Environment: DEV
Standard Mode Production Environment: PROD
Simple Mode: ALL

        :type EnvType: str
        """
        self._Type = None
        self._ProjectId = None
        self._Name = None
        self._DisplayName = None
        self._EnvType = None

    @property
    def Type(self):
        """Scenario Type: Development, In Use
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Name(self):
        """Function Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def DisplayName(self):
        """Display Name
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def EnvType(self):
        """Standard Mode Development Environment: DEV
Standard Mode Production Environment: PROD
Simple Mode: ALL

        :rtype: str
        """
        return self._EnvType

    @EnvType.setter
    def EnvType(self, EnvType):
        self._EnvType = EnvType


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._ProjectId = params.get("ProjectId")
        self._Name = params.get("Name")
        self._DisplayName = params.get("DisplayName")
        self._EnvType = params.get("EnvType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOrganizationalFunctionsResponse(AbstractModel):
    """DescribeOrganizationalFunctions response structure.

    """

    def __init__(self):
        r"""
        :param _Content: Function information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Content: list of OrganizationalFunction
        :param _ErrorMessage: Operation failed
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Content = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def Content(self):
        """Function information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of OrganizationalFunction
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def ErrorMessage(self):
        """Operation failed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Content") is not None:
            self._Content = []
            for item in params.get("Content"):
                obj = OrganizationalFunction()
                obj._deserialize(item)
                self._Content.append(obj)
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class DescribeProjectRequest(AbstractModel):
    """DescribeProject request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID. It is common to use the Project ID for queries, and either this or projectName must be present.
        :type ProjectId: str
        :param _DescribeClusters: Whether to Display Associated Cluster Information
        :type DescribeClusters: bool
        :param _DescribeExecutors: Whether to Display Information of Associated Execution Group, only partial information.
        :type DescribeExecutors: bool
        :param _DescribeAdminUsers: Default not to display project administrator information
        :type DescribeAdminUsers: bool
        :param _DescribeMemberCount: Default not to count the number of project personnel
        :type DescribeMemberCount: bool
        :param _DescribeCreator: Default not to query creator's information
        :type DescribeCreator: bool
        :param _ProjectName: The project name is unique within a tenant, generally used for conversion to Project ID.
        :type ProjectName: str
        """
        self._ProjectId = None
        self._DescribeClusters = None
        self._DescribeExecutors = None
        self._DescribeAdminUsers = None
        self._DescribeMemberCount = None
        self._DescribeCreator = None
        self._ProjectName = None

    @property
    def ProjectId(self):
        """Project ID. It is common to use the Project ID for queries, and either this or projectName must be present.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DescribeClusters(self):
        """Whether to Display Associated Cluster Information
        :rtype: bool
        """
        return self._DescribeClusters

    @DescribeClusters.setter
    def DescribeClusters(self, DescribeClusters):
        self._DescribeClusters = DescribeClusters

    @property
    def DescribeExecutors(self):
        """Whether to Display Information of Associated Execution Group, only partial information.
        :rtype: bool
        """
        return self._DescribeExecutors

    @DescribeExecutors.setter
    def DescribeExecutors(self, DescribeExecutors):
        self._DescribeExecutors = DescribeExecutors

    @property
    def DescribeAdminUsers(self):
        """Default not to display project administrator information
        :rtype: bool
        """
        return self._DescribeAdminUsers

    @DescribeAdminUsers.setter
    def DescribeAdminUsers(self, DescribeAdminUsers):
        self._DescribeAdminUsers = DescribeAdminUsers

    @property
    def DescribeMemberCount(self):
        """Default not to count the number of project personnel
        :rtype: bool
        """
        return self._DescribeMemberCount

    @DescribeMemberCount.setter
    def DescribeMemberCount(self, DescribeMemberCount):
        self._DescribeMemberCount = DescribeMemberCount

    @property
    def DescribeCreator(self):
        """Default not to query creator's information
        :rtype: bool
        """
        return self._DescribeCreator

    @DescribeCreator.setter
    def DescribeCreator(self, DescribeCreator):
        self._DescribeCreator = DescribeCreator

    @property
    def ProjectName(self):
        """The project name is unique within a tenant, generally used for conversion to Project ID.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._DescribeClusters = params.get("DescribeClusters")
        self._DescribeExecutors = params.get("DescribeExecutors")
        self._DescribeAdminUsers = params.get("DescribeAdminUsers")
        self._DescribeMemberCount = params.get("DescribeMemberCount")
        self._DescribeCreator = params.get("DescribeCreator")
        self._ProjectName = params.get("ProjectName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeProjectResponse(AbstractModel):
    """DescribeProject response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Project Information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.Project`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Project Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Project`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = Project()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeQualityScoreRequest(AbstractModel):
    """DescribeQualityScore request structure.

    """

    def __init__(self):
        r"""
        :param _StatisticsDate: Statistics Date
        :type StatisticsDate: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _ScoreType: 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :type ScoreType: str
        :param _Filters: Ignore Query String
        :type Filters: list of Filter
        """
        self._StatisticsDate = None
        self._ProjectId = None
        self._DatasourceId = None
        self._ScoreType = None
        self._Filters = None

    @property
    def StatisticsDate(self):
        """Statistics Date
        :rtype: int
        """
        return self._StatisticsDate

    @StatisticsDate.setter
    def StatisticsDate(self, StatisticsDate):
        self._StatisticsDate = StatisticsDate

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ScoreType(self):
        """1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :rtype: str
        """
        return self._ScoreType

    @ScoreType.setter
    def ScoreType(self, ScoreType):
        self._ScoreType = ScoreType

    @property
    def Filters(self):
        """Ignore Query String
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._StatisticsDate = params.get("StatisticsDate")
        self._ProjectId = params.get("ProjectId")
        self._DatasourceId = params.get("DatasourceId")
        self._ScoreType = params.get("ScoreType")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeQualityScoreResponse(AbstractModel):
    """DescribeQualityScore response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Quality Score
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.QualityScore`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Quality Score
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.QualityScore`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = QualityScore()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeQualityScoreTrendRequest(AbstractModel):
    """DescribeQualityScoreTrend request structure.

    """

    def __init__(self):
        r"""
        :param _StatisticsStartDate: Start Date of Statistics
        :type StatisticsStartDate: int
        :param _StatisticsEndDate: Statistics End Date
        :type StatisticsEndDate: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _ScoreType: 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :type ScoreType: str
        :param _Filters: Ignore Query String
        :type Filters: list of Filter
        """
        self._StatisticsStartDate = None
        self._StatisticsEndDate = None
        self._ProjectId = None
        self._DatasourceId = None
        self._ScoreType = None
        self._Filters = None

    @property
    def StatisticsStartDate(self):
        """Start Date of Statistics
        :rtype: int
        """
        return self._StatisticsStartDate

    @StatisticsStartDate.setter
    def StatisticsStartDate(self, StatisticsStartDate):
        self._StatisticsStartDate = StatisticsStartDate

    @property
    def StatisticsEndDate(self):
        """Statistics End Date
        :rtype: int
        """
        return self._StatisticsEndDate

    @StatisticsEndDate.setter
    def StatisticsEndDate(self, StatisticsEndDate):
        self._StatisticsEndDate = StatisticsEndDate

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ScoreType(self):
        """1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :rtype: str
        """
        return self._ScoreType

    @ScoreType.setter
    def ScoreType(self, ScoreType):
        self._ScoreType = ScoreType

    @property
    def Filters(self):
        """Ignore Query String
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._StatisticsStartDate = params.get("StatisticsStartDate")
        self._StatisticsEndDate = params.get("StatisticsEndDate")
        self._ProjectId = params.get("ProjectId")
        self._DatasourceId = params.get("DatasourceId")
        self._ScoreType = params.get("ScoreType")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeQualityScoreTrendResponse(AbstractModel):
    """DescribeQualityScoreTrend response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Quality score trend view
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.QualityScoreTrend`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Quality score trend view
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.QualityScoreTrend`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = QualityScoreTrend()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRealTimeTaskInstanceNodeInfoRequest(AbstractModel):
    """DescribeRealTimeTaskInstanceNodeInfo request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Real-time Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Real-time Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRealTimeTaskInstanceNodeInfoResponse(AbstractModel):
    """DescribeRealTimeTaskInstanceNodeInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RealTimeTaskInstanceNodeInfo: Real-time task instance node related information
Note: This field may return null, indicating that no valid value can be obtained.
        :type RealTimeTaskInstanceNodeInfo: :class:`tencentcloud.wedata.v20210820.models.RealTimeTaskInstanceNodeInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RealTimeTaskInstanceNodeInfo = None
        self._RequestId = None

    @property
    def RealTimeTaskInstanceNodeInfo(self):
        """Real-time task instance node related information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RealTimeTaskInstanceNodeInfo`
        """
        return self._RealTimeTaskInstanceNodeInfo

    @RealTimeTaskInstanceNodeInfo.setter
    def RealTimeTaskInstanceNodeInfo(self, RealTimeTaskInstanceNodeInfo):
        self._RealTimeTaskInstanceNodeInfo = RealTimeTaskInstanceNodeInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RealTimeTaskInstanceNodeInfo") is not None:
            self._RealTimeTaskInstanceNodeInfo = RealTimeTaskInstanceNodeInfo()
            self._RealTimeTaskInstanceNodeInfo._deserialize(params.get("RealTimeTaskInstanceNodeInfo"))
        self._RequestId = params.get("RequestId")


class DescribeRealTimeTaskMetricOverviewRequest(AbstractModel):
    """DescribeRealTimeTaskMetricOverview request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID of the real-time task to be viewed, which can be obtained from the task list page
        :type TaskId: str
        :param _ProjectId: Project ID to be viewed
        :type ProjectId: str
        :param _StartTime: Start Time
        :type StartTime: int
        :param _EndTime: End time
        :type EndTime: int
        """
        self._TaskId = None
        self._ProjectId = None
        self._StartTime = None
        self._EndTime = None

    @property
    def TaskId(self):
        """Task ID of the real-time task to be viewed, which can be obtained from the task list page
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID to be viewed
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def StartTime(self):
        """Start Time
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRealTimeTaskMetricOverviewResponse(AbstractModel):
    """DescribeRealTimeTaskMetricOverview response structure.

    """

    def __init__(self):
        r"""
        :param _TotalRecordNumOfRead: Total Read Records
        :type TotalRecordNumOfRead: int
        :param _TotalRecordByteNumOfRead: Total Read Bytes
        :type TotalRecordByteNumOfRead: int
        :param _TotalRecordNumOfWrite: Total Write Records
        :type TotalRecordNumOfWrite: int
        :param _TotalRecordByteNumOfWrite: Total Write Bytes Unit: bytes
        :type TotalRecordByteNumOfWrite: int
        :param _TotalDirtyRecordNum: Total Dirty Record Data
        :type TotalDirtyRecordNum: int
        :param _TotalDirtyRecordByte: Total Dirty Bytes Unit: bytes
        :type TotalDirtyRecordByte: int
        :param _TotalDuration: Execution Duration Unit: s
        :type TotalDuration: int
        :param _BeginRunTime: Start Running Time
        :type BeginRunTime: str
        :param _EndRunTime: Current Running Time
        :type EndRunTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalRecordNumOfRead = None
        self._TotalRecordByteNumOfRead = None
        self._TotalRecordNumOfWrite = None
        self._TotalRecordByteNumOfWrite = None
        self._TotalDirtyRecordNum = None
        self._TotalDirtyRecordByte = None
        self._TotalDuration = None
        self._BeginRunTime = None
        self._EndRunTime = None
        self._RequestId = None

    @property
    def TotalRecordNumOfRead(self):
        """Total Read Records
        :rtype: int
        """
        return self._TotalRecordNumOfRead

    @TotalRecordNumOfRead.setter
    def TotalRecordNumOfRead(self, TotalRecordNumOfRead):
        self._TotalRecordNumOfRead = TotalRecordNumOfRead

    @property
    def TotalRecordByteNumOfRead(self):
        """Total Read Bytes
        :rtype: int
        """
        return self._TotalRecordByteNumOfRead

    @TotalRecordByteNumOfRead.setter
    def TotalRecordByteNumOfRead(self, TotalRecordByteNumOfRead):
        self._TotalRecordByteNumOfRead = TotalRecordByteNumOfRead

    @property
    def TotalRecordNumOfWrite(self):
        """Total Write Records
        :rtype: int
        """
        return self._TotalRecordNumOfWrite

    @TotalRecordNumOfWrite.setter
    def TotalRecordNumOfWrite(self, TotalRecordNumOfWrite):
        self._TotalRecordNumOfWrite = TotalRecordNumOfWrite

    @property
    def TotalRecordByteNumOfWrite(self):
        """Total Write Bytes Unit: bytes
        :rtype: int
        """
        return self._TotalRecordByteNumOfWrite

    @TotalRecordByteNumOfWrite.setter
    def TotalRecordByteNumOfWrite(self, TotalRecordByteNumOfWrite):
        self._TotalRecordByteNumOfWrite = TotalRecordByteNumOfWrite

    @property
    def TotalDirtyRecordNum(self):
        """Total Dirty Record Data
        :rtype: int
        """
        return self._TotalDirtyRecordNum

    @TotalDirtyRecordNum.setter
    def TotalDirtyRecordNum(self, TotalDirtyRecordNum):
        self._TotalDirtyRecordNum = TotalDirtyRecordNum

    @property
    def TotalDirtyRecordByte(self):
        """Total Dirty Bytes Unit: bytes
        :rtype: int
        """
        return self._TotalDirtyRecordByte

    @TotalDirtyRecordByte.setter
    def TotalDirtyRecordByte(self, TotalDirtyRecordByte):
        self._TotalDirtyRecordByte = TotalDirtyRecordByte

    @property
    def TotalDuration(self):
        """Execution Duration Unit: s
        :rtype: int
        """
        return self._TotalDuration

    @TotalDuration.setter
    def TotalDuration(self, TotalDuration):
        self._TotalDuration = TotalDuration

    @property
    def BeginRunTime(self):
        """Start Running Time
        :rtype: str
        """
        return self._BeginRunTime

    @BeginRunTime.setter
    def BeginRunTime(self, BeginRunTime):
        self._BeginRunTime = BeginRunTime

    @property
    def EndRunTime(self):
        """Current Running Time
        :rtype: str
        """
        return self._EndRunTime

    @EndRunTime.setter
    def EndRunTime(self, EndRunTime):
        self._EndRunTime = EndRunTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalRecordNumOfRead = params.get("TotalRecordNumOfRead")
        self._TotalRecordByteNumOfRead = params.get("TotalRecordByteNumOfRead")
        self._TotalRecordNumOfWrite = params.get("TotalRecordNumOfWrite")
        self._TotalRecordByteNumOfWrite = params.get("TotalRecordByteNumOfWrite")
        self._TotalDirtyRecordNum = params.get("TotalDirtyRecordNum")
        self._TotalDirtyRecordByte = params.get("TotalDirtyRecordByte")
        self._TotalDuration = params.get("TotalDuration")
        self._BeginRunTime = params.get("BeginRunTime")
        self._EndRunTime = params.get("EndRunTime")
        self._RequestId = params.get("RequestId")


class DescribeRealTimeTaskSpeedRequest(AbstractModel):
    """DescribeRealTimeTaskSpeed request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _StartTime: Timestamp with Milliseconds
        :type StartTime: int
        :param _EndTime: Timestamp with Milliseconds
        :type EndTime: int
        :param _Granularity: Granularity, 1 or 5
        :type Granularity: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._StartTime = None
        self._EndTime = None
        self._Granularity = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def StartTime(self):
        """Timestamp with Milliseconds
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Timestamp with Milliseconds
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Granularity(self):
        """Granularity, 1 or 5
        :rtype: int
        """
        return self._Granularity

    @Granularity.setter
    def Granularity(self, Granularity):
        self._Granularity = Granularity

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Granularity = params.get("Granularity")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRealTimeTaskSpeedResponse(AbstractModel):
    """DescribeRealTimeTaskSpeed response structure.

    """

    def __init__(self):
        r"""
        :param _RecordsSpeedList: Synchronous Speed Bar/s List
        :type RecordsSpeedList: list of RecordsSpeed
        :param _BytesSpeedList: Synchronous Speed Bytes/s List
        :type BytesSpeedList: list of BytesSpeed
        :param _Data: Synchronous Speed, including RecordsSpeedList and BytesSpeedList
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RealTimeTaskSpeed`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RecordsSpeedList = None
        self._BytesSpeedList = None
        self._Data = None
        self._RequestId = None

    @property
    def RecordsSpeedList(self):
        """Synchronous Speed Bar/s List
        :rtype: list of RecordsSpeed
        """
        return self._RecordsSpeedList

    @RecordsSpeedList.setter
    def RecordsSpeedList(self, RecordsSpeedList):
        self._RecordsSpeedList = RecordsSpeedList

    @property
    def BytesSpeedList(self):
        """Synchronous Speed Bytes/s List
        :rtype: list of BytesSpeed
        """
        return self._BytesSpeedList

    @BytesSpeedList.setter
    def BytesSpeedList(self, BytesSpeedList):
        self._BytesSpeedList = BytesSpeedList

    @property
    def Data(self):
        """Synchronous Speed, including RecordsSpeedList and BytesSpeedList
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RealTimeTaskSpeed`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RecordsSpeedList") is not None:
            self._RecordsSpeedList = []
            for item in params.get("RecordsSpeedList"):
                obj = RecordsSpeed()
                obj._deserialize(item)
                self._RecordsSpeedList.append(obj)
        if params.get("BytesSpeedList") is not None:
            self._BytesSpeedList = []
            for item in params.get("BytesSpeedList"):
                obj = BytesSpeed()
                obj._deserialize(item)
                self._BytesSpeedList.append(obj)
        if params.get("Data") is not None:
            self._Data = RealTimeTaskSpeed()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeReportTaskDetailRequest(AbstractModel):
    """DescribeReportTaskDetail request structure.

    """

    def __init__(self):
        r"""
        :param _TenantId: Tenant id.
        :type TenantId: str
        :param _EngineTaskId: Engine task id.
        :type EngineTaskId: str
        """
        self._TenantId = None
        self._EngineTaskId = None

    @property
    def TenantId(self):
        """Tenant id.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def EngineTaskId(self):
        """Engine task id.
        :rtype: str
        """
        return self._EngineTaskId

    @EngineTaskId.setter
    def EngineTaskId(self, EngineTaskId):
        self._EngineTaskId = EngineTaskId


    def _deserialize(self, params):
        self._TenantId = params.get("TenantId")
        self._EngineTaskId = params.get("EngineTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReportTaskDetailResponse(AbstractModel):
    """DescribeReportTaskDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Data: 1
Note: This field may return null, indicating that no valid values can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.ReportTaskDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """1
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ReportTaskDetail`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = ReportTaskDetail()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeReportTaskListRequest(AbstractModel):
    """DescribeReportTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _PageNum: Page number
        :type PageNum: int
        :param _PageSize: Entries per page.
        :type PageSize: int
        :param _TenantId: Tenant id.
        :type TenantId: str
        :param _ProjectId: Project ID.
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _JobId: Job id.
        :type JobId: str
        :param _EngineTaskId: Engine task id.
        :type EngineTaskId: str
        :param _ProductSource: DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
        :type ProductSource: str
        :param _OnwerUid: Root account.
        :type OnwerUid: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._PageNum = None
        self._PageSize = None
        self._TenantId = None
        self._ProjectId = None
        self._TaskId = None
        self._InstanceId = None
        self._JobId = None
        self._EngineTaskId = None
        self._ProductSource = None
        self._OnwerUid = None
        self._StartTime = None
        self._EndTime = None

    @property
    def PageNum(self):
        """Page number
        :rtype: int
        """
        return self._PageNum

    @PageNum.setter
    def PageNum(self, PageNum):
        self._PageNum = PageNum

    @property
    def PageSize(self):
        """Entries per page.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def TenantId(self):
        """Tenant id.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def ProjectId(self):
        """Project ID.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def InstanceId(self):
        """Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def JobId(self):
        """Job id.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def EngineTaskId(self):
        """Engine task id.
        :rtype: str
        """
        return self._EngineTaskId

    @EngineTaskId.setter
    def EngineTaskId(self, EngineTaskId):
        self._EngineTaskId = EngineTaskId

    @property
    def ProductSource(self):
        """DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
        :rtype: str
        """
        return self._ProductSource

    @ProductSource.setter
    def ProductSource(self, ProductSource):
        self._ProductSource = ProductSource

    @property
    def OnwerUid(self):
        """Root account.
        :rtype: str
        """
        return self._OnwerUid

    @OnwerUid.setter
    def OnwerUid(self, OnwerUid):
        self._OnwerUid = OnwerUid

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._PageNum = params.get("PageNum")
        self._PageSize = params.get("PageSize")
        self._TenantId = params.get("TenantId")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._InstanceId = params.get("InstanceId")
        self._JobId = params.get("JobId")
        self._EngineTaskId = params.get("EngineTaskId")
        self._ProductSource = params.get("ProductSource")
        self._OnwerUid = params.get("OnwerUid")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReportTaskListResponse(AbstractModel):
    """DescribeReportTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task list information.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.ReportTaskListInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task list information.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ReportTaskListInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = ReportTaskListInfo()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeResourceManagePathTreesRequest(AbstractModel):
    """DescribeResourceManagePathTrees request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Name: Name, for search
        :type Name: str
        :param _FileType: File Type
        :type FileType: str
        :param _FilePath: File path
        :type FilePath: str
        :param _DirType: Folder Type
personal individual
project Item
resource
        :type DirType: str
        """
        self._ProjectId = None
        self._Name = None
        self._FileType = None
        self._FilePath = None
        self._DirType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Name(self):
        """Name, for search
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def FileType(self):
        """File Type
        :rtype: str
        """
        return self._FileType

    @FileType.setter
    def FileType(self, FileType):
        self._FileType = FileType

    @property
    def FilePath(self):
        """File path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def DirType(self):
        """Folder Type
personal individual
project Item
resource
        :rtype: str
        """
        return self._DirType

    @DirType.setter
    def DirType(self, DirType):
        self._DirType = DirType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Name = params.get("Name")
        self._FileType = params.get("FileType")
        self._FilePath = params.get("FilePath")
        self._DirType = params.get("DirType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeResourceManagePathTreesResponse(AbstractModel):
    """DescribeResourceManagePathTrees response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of ResourcePathTree
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ResourcePathTree
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ResourcePathTree()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRuleDimStatRequest(AbstractModel):
    """DescribeRuleDimStat request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _BeginDate: Start time, timestamp to the second
        :type BeginDate: str
        :param _EndDate: End time, timestamp to the second
        :type EndDate: str
        """
        self._ProjectId = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def BeginDate(self):
        """Start time, timestamp to the second
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time, timestamp to the second
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleDimStatResponse(AbstractModel):
    """DescribeRuleDimStat response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleDimStat`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleDimStat`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleDimStat()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleExecDetailRequest(AbstractModel):
    """DescribeRuleExecDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleExecId: Rule Execution ID
        :type RuleExecId: int
        """
        self._ProjectId = None
        self._RuleExecId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleExecId(self):
        """Rule Execution ID
        :rtype: int
        """
        return self._RuleExecId

    @RuleExecId.setter
    def RuleExecId(self, RuleExecId):
        self._RuleExecId = RuleExecId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RuleExecId = params.get("RuleExecId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleExecDetailResponse(AbstractModel):
    """DescribeRuleExecDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Execution Result DetailsNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleExecResultDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Execution Result DetailsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecResultDetail`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleExecResultDetail()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleExecLogRequest(AbstractModel):
    """DescribeRuleExecLog request structure.

    """

    def __init__(self):
        r"""
        :param _RuleExecId: Rule Execution ID
        :type RuleExecId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleGroupExecId: Rule Group Execution ID
        :type RuleGroupExecId: int
        """
        self._RuleExecId = None
        self._ProjectId = None
        self._RuleGroupExecId = None

    @property
    def RuleExecId(self):
        """Rule Execution ID
        :rtype: int
        """
        return self._RuleExecId

    @RuleExecId.setter
    def RuleExecId(self, RuleExecId):
        self._RuleExecId = RuleExecId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleGroupExecId(self):
        """Rule Group Execution ID
        :rtype: int
        """
        return self._RuleGroupExecId

    @RuleGroupExecId.setter
    def RuleGroupExecId(self, RuleGroupExecId):
        self._RuleGroupExecId = RuleGroupExecId


    def _deserialize(self, params):
        self._RuleExecId = params.get("RuleExecId")
        self._ProjectId = params.get("ProjectId")
        self._RuleGroupExecId = params.get("RuleGroupExecId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleExecLogResponse(AbstractModel):
    """DescribeRuleExecLog response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Execution LogNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleExecLog`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Execution LogNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecLog`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleExecLog()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleExecResultsRequest(AbstractModel):
    """DescribeRuleExecResults request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupExecId: Rule Group Execution ID
        :type RuleGroupExecId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._RuleGroupExecId = None
        self._ProjectId = None

    @property
    def RuleGroupExecId(self):
        """Rule Group Execution ID
        :rtype: int
        """
        return self._RuleGroupExecId

    @RuleGroupExecId.setter
    def RuleGroupExecId(self, RuleGroupExecId):
        self._RuleGroupExecId = RuleGroupExecId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._RuleGroupExecId = params.get("RuleGroupExecId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleExecResultsResponse(AbstractModel):
    """DescribeRuleExecResults response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleExecResultPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecResultPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleExecResultPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleExecStatRequest(AbstractModel):
    """DescribeRuleExecStat request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _BeginDate: Start time, timestamp to the second
        :type BeginDate: str
        :param _EndDate: End time, timestamp to the second
        :type EndDate: str
        """
        self._ProjectId = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def BeginDate(self):
        """Start time, timestamp to the second
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time, timestamp to the second
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleExecStatResponse(AbstractModel):
    """DescribeRuleExecStat response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleExecStat`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecStat`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleExecStat()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleGroupExecResultsByPageRequest(AbstractModel):
    """DescribeRuleGroupExecResultsByPage request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Pagination Index
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter criteria
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderField
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._ProjectId = None

    @property
    def PageNumber(self):
        """Pagination Index
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter criteria
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleGroupExecResultsByPageResponse(AbstractModel):
    """DescribeRuleGroupExecResultsByPage response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecResultPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group Execution Result List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecResultPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupExecResultPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleGroupRequest(AbstractModel):
    """DescribeRuleGroup request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _DatasourceId: Data Source ID
        :type DatasourceId: str
        :param _TableId: Data Table ID
        :type TableId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatabaseId: Database ID
        :type DatabaseId: str
        """
        self._RuleGroupId = None
        self._DatasourceId = None
        self._TableId = None
        self._ProjectId = None
        self._DatabaseId = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def TableId(self):
        """Data Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatabaseId(self):
        """Database ID
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._DatasourceId = params.get("DatasourceId")
        self._TableId = params.get("TableId")
        self._ProjectId = params.get("ProjectId")
        self._DatabaseId = params.get("DatabaseId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleGroupResponse(AbstractModel):
    """DescribeRuleGroup response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Data quality rule group details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroup`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Data quality rule group details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroup`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroup()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleGroupSubscriptionRequest(AbstractModel):
    """DescribeRuleGroupSubscription request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._RuleGroupId = None
        self._ProjectId = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleGroupSubscriptionResponse(AbstractModel):
    """DescribeRuleGroupSubscription response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group Subscription Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group Subscription Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupSubscribe()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleGroupTableRequest(AbstractModel):
    """DescribeRuleGroupTable request structure.

    """

    def __init__(self):
        r"""
        :param _TableId: Table ID
        :type TableId: str
        """
        self._TableId = None

    @property
    def TableId(self):
        """Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleGroupTableResponse(AbstractModel):
    """DescribeRuleGroupTable response structure.

    """

    def __init__(self):
        r"""
        :param _Data: DataNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupTable`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """DataNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupTable`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupTable()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleGroupsByPageRequest(AbstractModel):
    """DescribeRuleGroupsByPage request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Pagination Index
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter criteria, each request's Filters limit is 10, Filter.Values limit is 5
        :type Filters: list of Filter
        :param _OrderFields: Sorting Method
        :type OrderFields: list of OrderField
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._ProjectId = None

    @property
    def PageNumber(self):
        """Pagination Index
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter criteria, each request's Filters limit is 10, Filter.Values limit is 5
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sorting Method
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleGroupsByPageResponse(AbstractModel):
    """DescribeRuleGroupsByPage response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleGroupPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleGroupPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleRequest(AbstractModel):
    """DescribeRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Quality Rule ID
        :type RuleId: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._RuleId = None
        self._ProjectId = None

    @property
    def RuleId(self):
        """Quality Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleResponse(AbstractModel):
    """DescribeRule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.Rule`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Rule`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = Rule()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleTemplateRequest(AbstractModel):
    """DescribeRuleTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TemplateId: Rule Template ID
        :type TemplateId: int
        """
        self._ProjectId = None
        self._TemplateId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TemplateId(self):
        """Rule Template ID
        :rtype: int
        """
        return self._TemplateId

    @TemplateId.setter
    def TemplateId(self, TemplateId):
        self._TemplateId = TemplateId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TemplateId = params.get("TemplateId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleTemplateResponse(AbstractModel):
    """DescribeRuleTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Template Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleTemplate`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Template Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleTemplate`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleTemplate()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleTemplatesByPageRequest(AbstractModel):
    """DescribeRuleTemplatesByPage request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Current Page
        :type PageNumber: int
        :param _PageSize: Number of records per page
        :type PageSize: int
        :param _ProjectId: Workspace ID
        :type ProjectId: str
        :param _OrderFields: Universal Sort Field
        :type OrderFields: list of OrderField
        :param _Filters: Universal Filter Criteria
        :type Filters: list of Filter
        """
        self._PageNumber = None
        self._PageSize = None
        self._ProjectId = None
        self._OrderFields = None
        self._Filters = None

    @property
    def PageNumber(self):
        """Current Page
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of records per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def ProjectId(self):
        """Workspace ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def OrderFields(self):
        """Universal Sort Field
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def Filters(self):
        """Universal Filter Criteria
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        self._ProjectId = params.get("ProjectId")
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleTemplatesByPageResponse(AbstractModel):
    """DescribeRuleTemplatesByPage response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RuleTemplatePage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleTemplatePage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RuleTemplatePage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRuleTemplatesRequest(AbstractModel):
    """DescribeRuleTemplates request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Template Type 1. System Template 2. Custom Definition Template
        :type Type: int
        :param _SourceObjectType: 1. Constant 2. Offline Table Level 2. Offline Field Level
        :type SourceObjectType: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _SourceEngineTypes: Corresponding Engine Type of the Source
        :type SourceEngineTypes: list of int non-negative
        """
        self._Type = None
        self._SourceObjectType = None
        self._ProjectId = None
        self._SourceEngineTypes = None

    @property
    def Type(self):
        """Template Type 1. System Template 2. Custom Definition Template
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def SourceObjectType(self):
        """1. Constant 2. Offline Table Level 2. Offline Field Level
        :rtype: int
        """
        return self._SourceObjectType

    @SourceObjectType.setter
    def SourceObjectType(self, SourceObjectType):
        self._SourceObjectType = SourceObjectType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def SourceEngineTypes(self):
        """Corresponding Engine Type of the Source
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._SourceObjectType = params.get("SourceObjectType")
        self._ProjectId = params.get("ProjectId")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRuleTemplatesResponse(AbstractModel):
    """DescribeRuleTemplates response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Template List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of RuleTemplate
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Template List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleTemplate
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = RuleTemplate()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRulesByPageRequest(AbstractModel):
    """DescribeRulesByPage request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Pagination Index
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter criteria
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderField
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._ProjectId = None

    @property
    def PageNumber(self):
        """Pagination Index
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter criteria
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRulesByPageResponse(AbstractModel):
    """DescribeRulesByPage response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Quality List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.RulePage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Quality List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RulePage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RulePage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeRulesRequest(AbstractModel):
    """DescribeRules request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _EngineType: The running execution engine, if not specified, the default execution engine under this data source will be requested
        :type EngineType: str
        """
        self._ProjectId = None
        self._RuleGroupId = None
        self._EngineType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def EngineType(self):
        """The running execution engine, if not specified, the default execution engine under this data source will be requested
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._EngineType = params.get("EngineType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRulesResponse(AbstractModel):
    """DescribeRules response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of Rule
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of Rule
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = Rule()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScheduleInstancesRequest(AbstractModel):
    """DescribeScheduleInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query conditions
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query conditions
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScheduleInstancesResponse(AbstractModel):
    """DescribeScheduleInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Instance Result Set
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CollectionInstanceOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Instance Result Set
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CollectionInstanceOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CollectionInstanceOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeSchedulerInstanceStatusRequest(AbstractModel):
    """DescribeSchedulerInstanceStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskTypeId: Task Type ID
        :type TaskTypeId: str
        :param _ExecutionGroupId: Execution Resource Group ID
        :type ExecutionGroupId: str
        :param _ExecutionGroupName: Execution Resource Group Name
        :type ExecutionGroupName: str
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _InCharge: Person in Charge
        :type InCharge: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        """
        self._ProjectId = None
        self._TaskTypeId = None
        self._ExecutionGroupId = None
        self._ExecutionGroupName = None
        self._StartTime = None
        self._EndTime = None
        self._InCharge = None
        self._WorkflowId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskTypeId(self):
        """Task Type ID
        :rtype: str
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def ExecutionGroupId(self):
        """Execution Resource Group ID
        :rtype: str
        """
        return self._ExecutionGroupId

    @ExecutionGroupId.setter
    def ExecutionGroupId(self, ExecutionGroupId):
        self._ExecutionGroupId = ExecutionGroupId

    @property
    def ExecutionGroupName(self):
        """Execution Resource Group Name
        :rtype: str
        """
        return self._ExecutionGroupName

    @ExecutionGroupName.setter
    def ExecutionGroupName(self, ExecutionGroupName):
        self._ExecutionGroupName = ExecutionGroupName

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def InCharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskTypeId = params.get("TaskTypeId")
        self._ExecutionGroupId = params.get("ExecutionGroupId")
        self._ExecutionGroupName = params.get("ExecutionGroupName")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._InCharge = params.get("InCharge")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSchedulerInstanceStatusResponse(AbstractModel):
    """DescribeSchedulerInstanceStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of ScreenInstanceInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ScreenInstanceInfo
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ScreenInstanceInfo()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSchedulerRunTimeInstanceCntByStatusRequest(AbstractModel):
    """DescribeSchedulerRunTimeInstanceCntByStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _CycleUnit: Cycle Type
        :type CycleUnit: str
        :param _TimeUnit: Time Unit e.g.: 12h
        :type TimeUnit: str
        :param _StartTime: Start Date: 2023-03-02
        :type StartTime: str
        :param _EndTime: Before End Date: 2023-03-20
        :type EndTime: str
        :param _TaskType: Task Type
        :type TaskType: int
        :param _InCharge: Person in Charge
        :type InCharge: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _SortItem: Sort Fields
        :type SortItem: str
        :param _SortType: Ascending/Descending Order
        :type SortType: str
        """
        self._ProjectId = None
        self._CycleUnit = None
        self._TimeUnit = None
        self._StartTime = None
        self._EndTime = None
        self._TaskType = None
        self._InCharge = None
        self._WorkflowId = None
        self._SortItem = None
        self._SortType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CycleUnit(self):
        """Cycle Type
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def TimeUnit(self):
        """Time Unit e.g.: 12h
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def StartTime(self):
        """Start Date: 2023-03-02
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Before End Date: 2023-03-20
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TaskType(self):
        """Task Type
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def InCharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def SortItem(self):
        """Sort Fields
        :rtype: str
        """
        return self._SortItem

    @SortItem.setter
    def SortItem(self, SortItem):
        self._SortItem = SortItem

    @property
    def SortType(self):
        """Ascending/Descending Order
        :rtype: str
        """
        return self._SortType

    @SortType.setter
    def SortType(self, SortType):
        self._SortType = SortType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._CycleUnit = params.get("CycleUnit")
        self._TimeUnit = params.get("TimeUnit")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._TaskType = params.get("TaskType")
        self._InCharge = params.get("InCharge")
        self._WorkflowId = params.get("WorkflowId")
        self._SortItem = params.get("SortItem")
        self._SortType = params.get("SortType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSchedulerRunTimeInstanceCntByStatusResponse(AbstractModel):
    """DescribeSchedulerRunTimeInstanceCntByStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of RuntimeInstanceCntTop
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuntimeInstanceCntTop
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = RuntimeInstanceCntTop()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSchedulerTaskCntByStatusRequest(AbstractModel):
    """DescribeSchedulerTaskCntByStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskType: 1
        :type TaskType: int
        :param _TypeName: Y
        :type TypeName: str
        :param _ProjectId: 111
        :type ProjectId: str
        :param _InCharge: 1
        :type InCharge: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        """
        self._TaskType = None
        self._TypeName = None
        self._ProjectId = None
        self._InCharge = None
        self._WorkflowId = None

    @property
    def TaskType(self):
        """1
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TypeName(self):
        """Y
        :rtype: str
        """
        return self._TypeName

    @TypeName.setter
    def TypeName(self, TypeName):
        self._TypeName = TypeName

    @property
    def ProjectId(self):
        """111
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def InCharge(self):
        """1
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._TypeName = params.get("TypeName")
        self._ProjectId = params.get("ProjectId")
        self._InCharge = params.get("InCharge")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSchedulerTaskCntByStatusResponse(AbstractModel):
    """DescribeSchedulerTaskCntByStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of ScreenTaskInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ScreenTaskInfo
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ScreenTaskInfo()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSchedulerTaskTypeCntRequest(AbstractModel):
    """DescribeSchedulerTaskTypeCnt request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _InCharge: Person in Charge
        :type InCharge: str
        """
        self._ProjectId = None
        self._InCharge = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def InCharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._InCharge = params.get("InCharge")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSchedulerTaskTypeCntResponse(AbstractModel):
    """DescribeSchedulerTaskTypeCnt response structure.

    """

    def __init__(self):
        r"""
        :param _Data: data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of TaskTypeCnt
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskTypeCnt
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskTypeCnt()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeStatisticInstanceStatusTrendOpsRequest(AbstractModel):
    """DescribeStatisticInstanceStatusTrendOps request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskTypeId: Task Type Id
        :type TaskTypeId: str
        :param _TimeType: Time Type
        :type TimeType: str
        :param _TypeName: Task Type Name
        :type TypeName: str
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _ExecutionGroupId: Resource Group ID
        :type ExecutionGroupId: str
        :param _ExecutionGroupName: Resource Group Name
        :type ExecutionGroupName: str
        :param _InCharge: 1
        :type InCharge: str
        :param _TaskType: 1
        :type TaskType: int
        :param _StateList: 1
        :type StateList: list of int
        :param _AggregationUnit: D represents days, H represents hours
        :type AggregationUnit: str
        :param _AverageWindowSize: 1
        :type AverageWindowSize: int
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        """
        self._ProjectId = None
        self._TaskTypeId = None
        self._TimeType = None
        self._TypeName = None
        self._StartTime = None
        self._EndTime = None
        self._ExecutionGroupId = None
        self._ExecutionGroupName = None
        self._InCharge = None
        self._TaskType = None
        self._StateList = None
        self._AggregationUnit = None
        self._AverageWindowSize = None
        self._WorkflowId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskTypeId(self):
        """Task Type Id
        :rtype: str
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def TimeType(self):
        """Time Type
        :rtype: str
        """
        return self._TimeType

    @TimeType.setter
    def TimeType(self, TimeType):
        self._TimeType = TimeType

    @property
    def TypeName(self):
        """Task Type Name
        :rtype: str
        """
        return self._TypeName

    @TypeName.setter
    def TypeName(self, TypeName):
        self._TypeName = TypeName

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ExecutionGroupId(self):
        """Resource Group ID
        :rtype: str
        """
        return self._ExecutionGroupId

    @ExecutionGroupId.setter
    def ExecutionGroupId(self, ExecutionGroupId):
        self._ExecutionGroupId = ExecutionGroupId

    @property
    def ExecutionGroupName(self):
        """Resource Group Name
        :rtype: str
        """
        return self._ExecutionGroupName

    @ExecutionGroupName.setter
    def ExecutionGroupName(self, ExecutionGroupName):
        self._ExecutionGroupName = ExecutionGroupName

    @property
    def InCharge(self):
        """1
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def TaskType(self):
        """1
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def StateList(self):
        """1
        :rtype: list of int
        """
        return self._StateList

    @StateList.setter
    def StateList(self, StateList):
        self._StateList = StateList

    @property
    def AggregationUnit(self):
        """D represents days, H represents hours
        :rtype: str
        """
        return self._AggregationUnit

    @AggregationUnit.setter
    def AggregationUnit(self, AggregationUnit):
        self._AggregationUnit = AggregationUnit

    @property
    def AverageWindowSize(self):
        """1
        :rtype: int
        """
        return self._AverageWindowSize

    @AverageWindowSize.setter
    def AverageWindowSize(self, AverageWindowSize):
        self._AverageWindowSize = AverageWindowSize

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskTypeId = params.get("TaskTypeId")
        self._TimeType = params.get("TimeType")
        self._TypeName = params.get("TypeName")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ExecutionGroupId = params.get("ExecutionGroupId")
        self._ExecutionGroupName = params.get("ExecutionGroupName")
        self._InCharge = params.get("InCharge")
        self._TaskType = params.get("TaskType")
        self._StateList = params.get("StateList")
        self._AggregationUnit = params.get("AggregationUnit")
        self._AverageWindowSize = params.get("AverageWindowSize")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeStatisticInstanceStatusTrendOpsResponse(AbstractModel):
    """DescribeStatisticInstanceStatusTrendOps response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Instance status statistics results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of InstanceStatisticInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Instance status statistics results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceStatisticInfo
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = InstanceStatisticInfo()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeStreamTaskLogListRequest(AbstractModel):
    """DescribeStreamTaskLogList request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _JobId: Job ID
        :type JobId: str
        :param _EndTime: End time
        :type EndTime: int
        :param _StartTime: Start Time
        :type StartTime: int
        :param _Container: container Name
        :type Container: str
        :param _Limit: Number of entries
        :type Limit: int
        :param _OrderType: Sort Type desc asc
        :type OrderType: str
        :param _RunningOrderId: Instance ID of Job Execution
        :type RunningOrderId: int
        :param _Keyword: Keyword
        :type Keyword: str
        """
        self._ProjectId = None
        self._TaskId = None
        self._JobId = None
        self._EndTime = None
        self._StartTime = None
        self._Container = None
        self._Limit = None
        self._OrderType = None
        self._RunningOrderId = None
        self._Keyword = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def JobId(self):
        """Job ID
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def EndTime(self):
        """End time
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def StartTime(self):
        """Start Time
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Container(self):
        """container Name
        :rtype: str
        """
        return self._Container

    @Container.setter
    def Container(self, Container):
        self._Container = Container

    @property
    def Limit(self):
        """Number of entries
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderType(self):
        """Sort Type desc asc
        :rtype: str
        """
        return self._OrderType

    @OrderType.setter
    def OrderType(self, OrderType):
        self._OrderType = OrderType

    @property
    def RunningOrderId(self):
        """Instance ID of Job Execution
        :rtype: int
        """
        return self._RunningOrderId

    @RunningOrderId.setter
    def RunningOrderId(self, RunningOrderId):
        self._RunningOrderId = RunningOrderId

    @property
    def Keyword(self):
        """Keyword
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._JobId = params.get("JobId")
        self._EndTime = params.get("EndTime")
        self._StartTime = params.get("StartTime")
        self._Container = params.get("Container")
        self._Limit = params.get("Limit")
        self._OrderType = params.get("OrderType")
        self._RunningOrderId = params.get("RunningOrderId")
        self._Keyword = params.get("Keyword")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeStreamTaskLogListResponse(AbstractModel):
    """DescribeStreamTaskLogList response structure.

    """

    def __init__(self):
        r"""
        :param _ListOver: Is it full
Note: This field may return null, indicating that no valid value can be obtained.
        :type ListOver: bool
        :param _LogContentList: Log Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type LogContentList: list of LogContentInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ListOver = None
        self._LogContentList = None
        self._RequestId = None

    @property
    def ListOver(self):
        """Is it full
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._ListOver

    @ListOver.setter
    def ListOver(self, ListOver):
        self._ListOver = ListOver

    @property
    def LogContentList(self):
        """Log Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of LogContentInfo
        """
        return self._LogContentList

    @LogContentList.setter
    def LogContentList(self, LogContentList):
        self._LogContentList = LogContentList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ListOver = params.get("ListOver")
        if params.get("LogContentList") is not None:
            self._LogContentList = []
            for item in params.get("LogContentList"):
                obj = LogContentInfo()
                obj._deserialize(item)
                self._LogContentList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSuccessorOpsTaskInfosRequest(AbstractModel):
    """DescribeSuccessorOpsTaskInfos request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSuccessorOpsTaskInfosResponse(AbstractModel):
    """DescribeSuccessorOpsTaskInfos response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Downstream Task List
        :type Data: list of TaskOpsDto
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Downstream Task List
        :rtype: list of TaskOpsDto
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskOpsDto()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTableBasicInfoRequest(AbstractModel):
    """DescribeTableBasicInfo request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Page number
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter field
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderField
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None

    @property
    def PageNumber(self):
        """Page number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter field
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableBasicInfoResponse(AbstractModel):
    """DescribeTableBasicInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TableBasicInfoList: Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableBasicInfoList: list of TableBasicInfo
        :param _TotalCount: Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableBasicInfoList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TableBasicInfoList(self):
        """Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableBasicInfo
        """
        return self._TableBasicInfoList

    @TableBasicInfoList.setter
    def TableBasicInfoList(self, TableBasicInfoList):
        self._TableBasicInfoList = TableBasicInfoList

    @property
    def TotalCount(self):
        """Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableBasicInfoList") is not None:
            self._TableBasicInfoList = []
            for item in params.get("TableBasicInfoList"):
                obj = TableBasicInfo()
                obj._deserialize(item)
                self._TableBasicInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTableInfoListRequest(AbstractModel):
    """DescribeTableInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Table name
        :type Filters: list of Filter
        :param _ConnectionType: If it is hive write rpc, if it is other types do not transmit
        :type ConnectionType: str
        :param _Catalog: Database source type
        :type Catalog: str
        """
        self._Filters = None
        self._ConnectionType = None
        self._Catalog = None

    @property
    def Filters(self):
        """Table name
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ConnectionType(self):
        """If it is hive write rpc, if it is other types do not transmit
        :rtype: str
        """
        return self._ConnectionType

    @ConnectionType.setter
    def ConnectionType(self, ConnectionType):
        self._ConnectionType = ConnectionType

    @property
    def Catalog(self):
        """Database source type
        :rtype: str
        """
        return self._Catalog

    @Catalog.setter
    def Catalog(self, Catalog):
        self._Catalog = Catalog


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ConnectionType = params.get("ConnectionType")
        self._Catalog = params.get("Catalog")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableInfoListResponse(AbstractModel):
    """DescribeTableInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _TableInfo: Table informationNote: This field may return null, indicating that no valid value can be obtained.
        :type TableInfo: list of TableInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableInfo = None
        self._RequestId = None

    @property
    def TableInfo(self):
        """Table informationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableInfo
        """
        return self._TableInfo

    @TableInfo.setter
    def TableInfo(self, TableInfo):
        self._TableInfo = TableInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableInfo") is not None:
            self._TableInfo = []
            for item in params.get("TableInfo"):
                obj = TableInfo()
                obj._deserialize(item)
                self._TableInfo.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTableLineageInfoRequest(AbstractModel):
    """DescribeTableLineageInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Direction: Query Direction, INPUT, OUTPUT, BOTH enumerated values
        :type Direction: str
        :param _Data: Table information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        :param _InputDepth: Single Query Indegree, default 1
        :type InputDepth: int
        :param _OutputDepth: Single Query Outdegree, default 1
        :type OutputDepth: int
        :param _ExtParams: Additional Parameters (Pass Caller Information)
        :type ExtParams: list of LineageParamRecord
        :param _IgnoreTemp: Filter Temporary Tables, default true
        :type IgnoreTemp: bool
        :param _RecursiveSecond: Recursively Query Number of Secondary Nodes, default is true
        :type RecursiveSecond: bool
        """
        self._Direction = None
        self._Data = None
        self._InputDepth = None
        self._OutputDepth = None
        self._ExtParams = None
        self._IgnoreTemp = None
        self._RecursiveSecond = None

    @property
    def Direction(self):
        """Query Direction, INPUT, OUTPUT, BOTH enumerated values
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction

    @property
    def Data(self):
        """Table information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InputDepth(self):
        """Single Query Indegree, default 1
        :rtype: int
        """
        return self._InputDepth

    @InputDepth.setter
    def InputDepth(self, InputDepth):
        self._InputDepth = InputDepth

    @property
    def OutputDepth(self):
        """Single Query Outdegree, default 1
        :rtype: int
        """
        return self._OutputDepth

    @OutputDepth.setter
    def OutputDepth(self, OutputDepth):
        self._OutputDepth = OutputDepth

    @property
    def ExtParams(self):
        """Additional Parameters (Pass Caller Information)
        :rtype: list of LineageParamRecord
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def IgnoreTemp(self):
        """Filter Temporary Tables, default true
        :rtype: bool
        """
        return self._IgnoreTemp

    @IgnoreTemp.setter
    def IgnoreTemp(self, IgnoreTemp):
        self._IgnoreTemp = IgnoreTemp

    @property
    def RecursiveSecond(self):
        """Recursively Query Number of Secondary Nodes, default is true
        :rtype: bool
        """
        return self._RecursiveSecond

    @RecursiveSecond.setter
    def RecursiveSecond(self, RecursiveSecond):
        self._RecursiveSecond = RecursiveSecond


    def _deserialize(self, params):
        self._Direction = params.get("Direction")
        if params.get("Data") is not None:
            self._Data = TableLineageInfo()
            self._Data._deserialize(params.get("Data"))
        self._InputDepth = params.get("InputDepth")
        self._OutputDepth = params.get("OutputDepth")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = LineageParamRecord()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._IgnoreTemp = params.get("IgnoreTemp")
        self._RecursiveSecond = params.get("RecursiveSecond")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableLineageInfoResponse(AbstractModel):
    """DescribeTableLineageInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TableLineageBasicInfo: Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableLineageBasicInfo: :class:`tencentcloud.wedata.v20210820.models.TableLineageBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableLineageBasicInfo = None
        self._RequestId = None

    @property
    def TableLineageBasicInfo(self):
        """Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableLineageBaseInfo`
        """
        return self._TableLineageBasicInfo

    @TableLineageBasicInfo.setter
    def TableLineageBasicInfo(self, TableLineageBasicInfo):
        self._TableLineageBasicInfo = TableLineageBasicInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableLineageBasicInfo") is not None:
            self._TableLineageBasicInfo = TableLineageBaseInfo()
            self._TableLineageBasicInfo._deserialize(params.get("TableLineageBasicInfo"))
        self._RequestId = params.get("RequestId")


class DescribeTableLineageRequest(AbstractModel):
    """DescribeTableLineage request structure.

    """

    def __init__(self):
        r"""
        :param _Direction: Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
        :type Direction: str
        :param _Data: Table information
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        :param _InputDepth: Single Query Indegree, default 1
        :type InputDepth: int
        :param _OutputDepth: Single Query Outdegree, default 1
        :type OutputDepth: int
        :param _ExtParams: Additional Parameters (Pass Caller Information)
        :type ExtParams: list of LineageParamRecord
        :param _IgnoreTemp: Filter Temporary Tables, default true
        :type IgnoreTemp: bool
        :param _RecursiveSecond: Recursively Query Number of Secondary Nodes, default is true
        :type RecursiveSecond: bool
        """
        self._Direction = None
        self._Data = None
        self._InputDepth = None
        self._OutputDepth = None
        self._ExtParams = None
        self._IgnoreTemp = None
        self._RecursiveSecond = None

    @property
    def Direction(self):
        """Enumeration value of query direction.

- INPUT
- OUTPUT
- BOTH
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction

    @property
    def Data(self):
        """Table information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def InputDepth(self):
        """Single Query Indegree, default 1
        :rtype: int
        """
        return self._InputDepth

    @InputDepth.setter
    def InputDepth(self, InputDepth):
        self._InputDepth = InputDepth

    @property
    def OutputDepth(self):
        """Single Query Outdegree, default 1
        :rtype: int
        """
        return self._OutputDepth

    @OutputDepth.setter
    def OutputDepth(self, OutputDepth):
        self._OutputDepth = OutputDepth

    @property
    def ExtParams(self):
        """Additional Parameters (Pass Caller Information)
        :rtype: list of LineageParamRecord
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def IgnoreTemp(self):
        """Filter Temporary Tables, default true
        :rtype: bool
        """
        return self._IgnoreTemp

    @IgnoreTemp.setter
    def IgnoreTemp(self, IgnoreTemp):
        self._IgnoreTemp = IgnoreTemp

    @property
    def RecursiveSecond(self):
        """Recursively Query Number of Secondary Nodes, default is true
        :rtype: bool
        """
        return self._RecursiveSecond

    @RecursiveSecond.setter
    def RecursiveSecond(self, RecursiveSecond):
        self._RecursiveSecond = RecursiveSecond


    def _deserialize(self, params):
        self._Direction = params.get("Direction")
        if params.get("Data") is not None:
            self._Data = TableLineageInfo()
            self._Data._deserialize(params.get("Data"))
        self._InputDepth = params.get("InputDepth")
        self._OutputDepth = params.get("OutputDepth")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = LineageParamRecord()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._IgnoreTemp = params.get("IgnoreTemp")
        self._RecursiveSecond = params.get("RecursiveSecond")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableLineageResponse(AbstractModel):
    """DescribeTableLineage response structure.

    """

    def __init__(self):
        r"""
        :param _TableLineage: Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableLineage: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableLineage = None
        self._RequestId = None

    @property
    def TableLineage(self):
        """Table Lineage Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableLineageInfo`
        """
        return self._TableLineage

    @TableLineage.setter
    def TableLineage(self, TableLineage):
        self._TableLineage = TableLineage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableLineage") is not None:
            self._TableLineage = TableLineageInfo()
            self._TableLineage._deserialize(params.get("TableLineage"))
        self._RequestId = params.get("RequestId")


class DescribeTableMetaRequest(AbstractModel):
    """DescribeTableMeta request structure.

    """

    def __init__(self):
        r"""
        :param _TableId: Unique Table ID
        :type TableId: str
        :param _TableNameFilter: Query conditions by Name
        :type TableNameFilter: :class:`tencentcloud.wedata.v20210820.models.TableNameFilter`
        :param _TableFilterType: Query condition type: 0 by ID, 1 by Name, default is 0
        :type TableFilterType: int
        """
        self._TableId = None
        self._TableNameFilter = None
        self._TableFilterType = None

    @property
    def TableId(self):
        """Unique Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableNameFilter(self):
        """Query conditions by Name
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableNameFilter`
        """
        return self._TableNameFilter

    @TableNameFilter.setter
    def TableNameFilter(self, TableNameFilter):
        self._TableNameFilter = TableNameFilter

    @property
    def TableFilterType(self):
        """Query condition type: 0 by ID, 1 by Name, default is 0
        :rtype: int
        """
        return self._TableFilterType

    @TableFilterType.setter
    def TableFilterType(self, TableFilterType):
        self._TableFilterType = TableFilterType


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        if params.get("TableNameFilter") is not None:
            self._TableNameFilter = TableNameFilter()
            self._TableNameFilter._deserialize(params.get("TableNameFilter"))
        self._TableFilterType = params.get("TableFilterType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableMetaResponse(AbstractModel):
    """DescribeTableMeta response structure.

    """

    def __init__(self):
        r"""
        :param _TableMeta: Table Metadata InformationNote: This field may return null, indicating that no valid value can be obtained.
        :type TableMeta: :class:`tencentcloud.wedata.v20210820.models.TableMeta`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableMeta = None
        self._RequestId = None

    @property
    def TableMeta(self):
        """Table Metadata InformationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableMeta`
        """
        return self._TableMeta

    @TableMeta.setter
    def TableMeta(self, TableMeta):
        self._TableMeta = TableMeta

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableMeta") is not None:
            self._TableMeta = TableMeta()
            self._TableMeta._deserialize(params.get("TableMeta"))
        self._RequestId = params.get("RequestId")


class DescribeTableMetasRequest(AbstractModel):
    """DescribeTableMetas request structure.

    """

    def __init__(self):
        r"""
        :param _PageNumber: Page number
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter field
        :type Filters: list of Filter
        :param _OrderFields: Sort Fields
        :type OrderFields: list of OrderField
        """
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None

    @property
    def PageNumber(self):
        """Page number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter field
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sort Fields
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableMetasResponse(AbstractModel):
    """DescribeTableMetas response structure.

    """

    def __init__(self):
        r"""
        :param _TableMetas: Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableMetas: list of TableMeta
        :param _TotalCount: Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TableMetas = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TableMetas(self):
        """Table Metadata
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableMeta
        """
        return self._TableMetas

    @TableMetas.setter
    def TableMetas(self, TableMetas):
        self._TableMetas = TableMetas

    @property
    def TotalCount(self):
        """Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TableMetas") is not None:
            self._TableMetas = []
            for item in params.get("TableMetas"):
                obj = TableMeta()
                obj._deserialize(item)
                self._TableMetas.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTableQualityDetailsRequest(AbstractModel):
    """DescribeTableQualityDetails request structure.

    """

    def __init__(self):
        r"""
        :param _StatisticsDate: Statistics Date
        :type StatisticsDate: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Pagination Index
        :type PageNumber: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Filters: Filter Parameters TableName, DatabaseId, DatabaseName, OwnerUserName
        :type Filters: list of Filter
        :param _OrderFields: Sorting Parameters Sort order DESC or ASC, Table score sorting TableScore
        :type OrderFields: list of OrderField
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _ScoreType: 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :type ScoreType: str
        """
        self._StatisticsDate = None
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._DatasourceId = None
        self._ScoreType = None

    @property
    def StatisticsDate(self):
        """Statistics Date
        :rtype: int
        """
        return self._StatisticsDate

    @StatisticsDate.setter
    def StatisticsDate(self, StatisticsDate):
        self._StatisticsDate = StatisticsDate

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Pagination Index
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter Parameters TableName, DatabaseId, DatabaseName, OwnerUserName
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sorting Parameters Sort order DESC or ASC, Table score sorting TableScore
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ScoreType(self):
        """1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :rtype: str
        """
        return self._ScoreType

    @ScoreType.setter
    def ScoreType(self, ScoreType):
        self._ScoreType = ScoreType


    def _deserialize(self, params):
        self._StatisticsDate = params.get("StatisticsDate")
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._DatasourceId = params.get("DatasourceId")
        self._ScoreType = params.get("ScoreType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableQualityDetailsResponse(AbstractModel):
    """DescribeTableQualityDetails response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Table quality score details result
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TableQualityDetailPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Table quality score details result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableQualityDetailPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = TableQualityDetailPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeTableSchemaInfoRequest(AbstractModel):
    """DescribeTableSchemaInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Table Name
        :type Name: str
        :param _DatabaseName: Database name
        :type DatabaseName: str
        :param _MsType: Data Source Types (e.g., MYSQL, HIVE, KAFKA, etc.)
        :type MsType: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _ConnectionType: Connection Type (example value: rpc)
        :type ConnectionType: str
        :param _SchemaName: Schema Name under Metadata Database
        :type SchemaName: str
        """
        self._Name = None
        self._DatabaseName = None
        self._MsType = None
        self._DatasourceId = None
        self._ConnectionType = None
        self._SchemaName = None

    @property
    def Name(self):
        """Table Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def DatabaseName(self):
        """Database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def MsType(self):
        """Data Source Types (e.g., MYSQL, HIVE, KAFKA, etc.)
        :rtype: str
        """
        return self._MsType

    @MsType.setter
    def MsType(self, MsType):
        self._MsType = MsType

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ConnectionType(self):
        """Connection Type (example value: rpc)
        :rtype: str
        """
        return self._ConnectionType

    @ConnectionType.setter
    def ConnectionType(self, ConnectionType):
        self._ConnectionType = ConnectionType

    @property
    def SchemaName(self):
        """Schema Name under Metadata Database
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._DatabaseName = params.get("DatabaseName")
        self._MsType = params.get("MsType")
        self._DatasourceId = params.get("DatasourceId")
        self._ConnectionType = params.get("ConnectionType")
        self._SchemaName = params.get("SchemaName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableSchemaInfoResponse(AbstractModel):
    """DescribeTableSchemaInfo response structure.

    """

    def __init__(self):
        r"""
        :param _SchemaInfoList: Retrieved SchemaInfo Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchemaInfoList: list of SchemaDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SchemaInfoList = None
        self._RequestId = None

    @property
    def SchemaInfoList(self):
        """Retrieved SchemaInfo Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SchemaDetail
        """
        return self._SchemaInfoList

    @SchemaInfoList.setter
    def SchemaInfoList(self, SchemaInfoList):
        self._SchemaInfoList = SchemaInfoList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SchemaInfoList") is not None:
            self._SchemaInfoList = []
            for item in params.get("SchemaInfoList"):
                obj = SchemaDetail()
                obj._deserialize(item)
                self._SchemaInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTableScoreTrendRequest(AbstractModel):
    """DescribeTableScoreTrend request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _StatisticsStartDate: Start time Second-level Timestamp
        :type StatisticsStartDate: int
        :param _StatisticsEndDate: End time Second-level Timestamp
        :type StatisticsEndDate: int
        :param _TableId: Table ID
        :type TableId: str
        :param _ScoreType: 1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :type ScoreType: str
        """
        self._ProjectId = None
        self._StatisticsStartDate = None
        self._StatisticsEndDate = None
        self._TableId = None
        self._ScoreType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def StatisticsStartDate(self):
        """Start time Second-level Timestamp
        :rtype: int
        """
        return self._StatisticsStartDate

    @StatisticsStartDate.setter
    def StatisticsStartDate(self, StatisticsStartDate):
        self._StatisticsStartDate = StatisticsStartDate

    @property
    def StatisticsEndDate(self):
        """End time Second-level Timestamp
        :rtype: int
        """
        return self._StatisticsEndDate

    @StatisticsEndDate.setter
    def StatisticsEndDate(self, StatisticsEndDate):
        self._StatisticsEndDate = StatisticsEndDate

    @property
    def TableId(self):
        """Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def ScoreType(self):
        """1: Calculate by full dimension weight, 2: Calculate by configured dimension weight, 3: Do not calculate by dimension weight, default is 1
        :rtype: str
        """
        return self._ScoreType

    @ScoreType.setter
    def ScoreType(self, ScoreType):
        self._ScoreType = ScoreType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._StatisticsStartDate = params.get("StatisticsStartDate")
        self._StatisticsEndDate = params.get("StatisticsEndDate")
        self._TableId = params.get("TableId")
        self._ScoreType = params.get("ScoreType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTableScoreTrendResponse(AbstractModel):
    """DescribeTableScoreTrend response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Table Scoring Trend
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.QualityScoreTrend`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Table Scoring Trend
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.QualityScoreTrend`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = QualityScoreTrend()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeTaskAlarmRegulationsRequest(AbstractModel):
    """DescribeTaskAlarmRegulations request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PageNumber: Current Page
        :type PageNumber: int
        :param _PageSize: Number of records per page
        :type PageSize: int
        :param _Filters: Filter criteria (name includes RegularStatus, AlarmLevel, AlarmIndicator, RegularName)
        :type Filters: list of Filter
        :param _OrderFields: Sorting criteria (RegularId)
        :type OrderFields: list of OrderField
        :param _TaskId: Task ID
        :type TaskId: str
        :param _TaskType: Task Type (201 for real-time task, 202 for offline task)
        :type TaskType: int
        """
        self._ProjectId = None
        self._PageNumber = None
        self._PageSize = None
        self._Filters = None
        self._OrderFields = None
        self._TaskId = None
        self._TaskType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PageNumber(self):
        """Current Page
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of records per page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Filters(self):
        """Filter criteria (name includes RegularStatus, AlarmLevel, AlarmIndicator, RegularName)
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderFields(self):
        """Sorting criteria (RegularId)
        :rtype: list of OrderField
        """
        return self._OrderFields

    @OrderFields.setter
    def OrderFields(self, OrderFields):
        self._OrderFields = OrderFields

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskType(self):
        """Task Type (201 for real-time task, 202 for offline task)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("OrderFields") is not None:
            self._OrderFields = []
            for item in params.get("OrderFields"):
                obj = OrderField()
                obj._deserialize(item)
                self._OrderFields.append(obj)
        self._TaskId = params.get("TaskId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskAlarmRegulationsResponse(AbstractModel):
    """DescribeTaskAlarmRegulations response structure.

    """

    def __init__(self):
        r"""
        :param _TaskAlarmInfos: Alert Rule Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAlarmInfos: list of TaskAlarmInfo
        :param _TotalCount: Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskAlarmInfos = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TaskAlarmInfos(self):
        """Alert Rule Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskAlarmInfo
        """
        return self._TaskAlarmInfos

    @TaskAlarmInfos.setter
    def TaskAlarmInfos(self, TaskAlarmInfos):
        self._TaskAlarmInfos = TaskAlarmInfos

    @property
    def TotalCount(self):
        """Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskAlarmInfos") is not None:
            self._TaskAlarmInfos = []
            for item in params.get("TaskAlarmInfos"):
                obj = TaskAlarmInfo()
                obj._deserialize(item)
                self._TaskAlarmInfos.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTaskByCycleReportRequest(AbstractModel):
    """DescribeTaskByCycleReport request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Type: Task Cycle Type
        :type Type: str
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._ProjectId = None
        self._Type = None
        self._StartTime = None
        self._EndTime = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Type(self):
        """Task Cycle Type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Type = params.get("Type")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskByCycleReportResponse(AbstractModel):
    """DescribeTaskByCycleReport response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task Cycle Growth Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of TaskByStatus
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task Cycle Growth Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskByStatus
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskByStatus()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskByCycleRequest(AbstractModel):
    """DescribeTaskByCycle request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _InCharge: 1
        :type InCharge: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        """
        self._ProjectId = None
        self._InCharge = None
        self._WorkflowId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def InCharge(self):
        """1
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._InCharge = params.get("InCharge")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskByCycleResponse(AbstractModel):
    """DescribeTaskByCycle response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Periodic Task Statistics
        :type Data: list of TaskByCycle
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Periodic Task Statistics
        :rtype: list of TaskByCycle
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskByCycle()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskByStatusReportRequest(AbstractModel):
    """DescribeTaskByStatusReport request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Type: Time Type
        :type Type: str
        :param _TaskType: Type
        :type TaskType: str
        :param _TypeName: Type Name
        :type TypeName: str
        :param _StartTime: Start Time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _AggregationUnit: Aggregation Unit, H Hours
        :type AggregationUnit: str
        :param _CycleUnit: Cycle
        :type CycleUnit: str
        :param _Status: Status
        :type Status: str
        :param _InCharge: Person in Charge
        :type InCharge: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        """
        self._ProjectId = None
        self._Type = None
        self._TaskType = None
        self._TypeName = None
        self._StartTime = None
        self._EndTime = None
        self._AggregationUnit = None
        self._CycleUnit = None
        self._Status = None
        self._InCharge = None
        self._WorkflowId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Type(self):
        """Time Type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def TaskType(self):
        """Type
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TypeName(self):
        """Type Name
        :rtype: str
        """
        return self._TypeName

    @TypeName.setter
    def TypeName(self, TypeName):
        self._TypeName = TypeName

    @property
    def StartTime(self):
        """Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def AggregationUnit(self):
        """Aggregation Unit, H Hours
        :rtype: str
        """
        return self._AggregationUnit

    @AggregationUnit.setter
    def AggregationUnit(self, AggregationUnit):
        self._AggregationUnit = AggregationUnit

    @property
    def CycleUnit(self):
        """Cycle
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def Status(self):
        """Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def InCharge(self):
        """Person in Charge
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Type = params.get("Type")
        self._TaskType = params.get("TaskType")
        self._TypeName = params.get("TypeName")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._AggregationUnit = params.get("AggregationUnit")
        self._CycleUnit = params.get("CycleUnit")
        self._Status = params.get("Status")
        self._InCharge = params.get("InCharge")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskByStatusReportResponse(AbstractModel):
    """DescribeTaskByStatusReport response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task reporting trend indicators
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of TaskByStatus
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task reporting trend indicators
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskByStatus
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = TaskByStatus()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskLockStatusRequest(AbstractModel):
    """DescribeTaskLockStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type: 201. stream, 202. offline
        :type TaskType: int
        """
        self._TaskId = None
        self._ProjectId = None
        self._TaskType = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type: 201. stream, 202. offline
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskLockStatusResponse(AbstractModel):
    """DescribeTaskLockStatus response structure.

    """

    def __init__(self):
        r"""
        :param _TaskLockStatus: Task lock status information
        :type TaskLockStatus: :class:`tencentcloud.wedata.v20210820.models.TaskLockStatus`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskLockStatus = None
        self._RequestId = None

    @property
    def TaskLockStatus(self):
        """Task lock status information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskLockStatus`
        """
        return self._TaskLockStatus

    @TaskLockStatus.setter
    def TaskLockStatus(self, TaskLockStatus):
        self._TaskLockStatus = TaskLockStatus

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskLockStatus") is not None:
            self._TaskLockStatus = TaskLockStatus()
            self._TaskLockStatus._deserialize(params.get("TaskLockStatus"))
        self._RequestId = params.get("RequestId")


class DescribeTaskRunHistoryRequest(AbstractModel):
    """DescribeTaskRunHistory request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _SearchCondition: Search Criteria
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceSearchCondition`
        :param _PageSize: Page Size
        :type PageSize: int
        :param _PageNumber: Page Number
        :type PageNumber: int
        """
        self._ProjectId = None
        self._SearchCondition = None
        self._PageSize = None
        self._PageNumber = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def SearchCondition(self):
        """Search Criteria
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceSearchCondition`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def PageSize(self):
        """Page Size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceSearchCondition()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._PageSize = params.get("PageSize")
        self._PageNumber = params.get("PageNumber")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskRunHistoryResponse(AbstractModel):
    """DescribeTaskRunHistory response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Paginated Query Task Run History Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.InstanceOpsInfoPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Paginated Query Task Run History Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceOpsInfoPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = InstanceOpsInfoPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeTaskScriptRequest(AbstractModel):
    """DescribeTaskScript request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        """
        self._ProjectId = None
        self._TaskId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskScriptResponse(AbstractModel):
    """DescribeTaskScript response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Task Script Content
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TaskScriptContent`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Task Script Content
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskScriptContent`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = TaskScriptContent()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeTemplateDimCountRequest(AbstractModel):
    """DescribeTemplateDimCount request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Template Type
        :type Type: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Type = None
        self._ProjectId = None

    @property
    def Type(self):
        """Template Type
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTemplateDimCountResponse(AbstractModel):
    """DescribeTemplateDimCount response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Dimensional statistics results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of DimensionCount
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Dimensional statistics results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DimensionCount
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = DimensionCount()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeThirdTaskRunLogRequest(AbstractModel):
    """DescribeThirdTaskRunLog request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Instance data time
        :type CurRunDate: str
        """
        self._TaskId = None
        self._CurRunDate = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Instance data time
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeThirdTaskRunLogResponse(AbstractModel):
    """DescribeThirdTaskRunLog response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Get third-party operation logsNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Get third-party operation logsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeTopTableStatRequest(AbstractModel):
    """DescribeTopTableStat request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _BeginDate: Start time, timestamp to the second
        :type BeginDate: str
        :param _EndDate: End time, timestamp to the second
        :type EndDate: str
        """
        self._ProjectId = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def BeginDate(self):
        """Start time, timestamp to the second
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time, timestamp to the second
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTopTableStatResponse(AbstractModel):
    """DescribeTopTableStat response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.TopTableStat`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TopTableStat`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = TopTableStat()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeTrendStatRequest(AbstractModel):
    """DescribeTrendStat request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _BeginDate: Start time, timestamp to the second
        :type BeginDate: str
        :param _EndDate: End time, timestamp to the second
        :type EndDate: str
        """
        self._ProjectId = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def BeginDate(self):
        """Start time, timestamp to the second
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time, timestamp to the second
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrendStatResponse(AbstractModel):
    """DescribeTrendStat response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: list of RuleExecDateStat
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: list of RuleExecDateStat
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = RuleExecDateStat()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeWorkflowCanvasInfoRequest(AbstractModel):
    """DescribeWorkflowCanvasInfo request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._WorkflowId = None
        self._ProjectId = None

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWorkflowCanvasInfoResponse(AbstractModel):
    """DescribeWorkflowCanvasInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.WorkflowCanvasOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.WorkflowCanvasOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WorkflowCanvasOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeWorkflowExecuteByIdRequest(AbstractModel):
    """DescribeWorkflowExecuteById request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkFlowIdList: Workflow ID
        :type WorkFlowIdList: str
        :param _PageNumber: Page size
        :type PageNumber: int
        :param _PageSize: Pagination index
        :type PageSize: int
        """
        self._ProjectId = None
        self._WorkFlowIdList = None
        self._PageNumber = None
        self._PageSize = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkFlowIdList(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkFlowIdList

    @WorkFlowIdList.setter
    def WorkFlowIdList(self, WorkFlowIdList):
        self._WorkFlowIdList = WorkFlowIdList

    @property
    def PageNumber(self):
        """Page size
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Pagination index
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkFlowIdList = params.get("WorkFlowIdList")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWorkflowExecuteByIdResponse(AbstractModel):
    """DescribeWorkflowExecuteById response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Workflow Runtime Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.WorkFlowExecuteDtoByPage`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Workflow Runtime Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.WorkFlowExecuteDtoByPage`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WorkFlowExecuteDtoByPage()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeWorkflowInfoByIdRequest(AbstractModel):
    """DescribeWorkflowInfoById request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._WorkflowId = None
        self._ProjectId = None

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWorkflowInfoByIdResponse(AbstractModel):
    """DescribeWorkflowInfoById response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.WorkflowSchedulerOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Workflow Scheduling Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.WorkflowSchedulerOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WorkflowSchedulerOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeWorkflowListByProjectIdRequest(AbstractModel):
    """DescribeWorkflowListByProjectId request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._ProjectId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWorkflowListByProjectIdResponse(AbstractModel):
    """DescribeWorkflowListByProjectId response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Obtain a list of all workflows under the project based on the project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of WorkflowCanvasOpsDto
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Obtain a list of all workflows under the project based on the project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of WorkflowCanvasOpsDto
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = WorkflowCanvasOpsDto()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeWorkflowTaskCountRequest(AbstractModel):
    """DescribeWorkflowTaskCount request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow List
        :type WorkflowId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._WorkflowId = None
        self._ProjectId = None

    @property
    def WorkflowId(self):
        """Workflow List
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWorkflowTaskCountResponse(AbstractModel):
    """DescribeWorkflowTaskCount response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.WorkflowTaskCountOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Statistical Results
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.WorkflowTaskCountOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WorkflowTaskCountOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DiagnoseProRequest(AbstractModel):
    """DiagnosePro request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query Conditions (TaskId and CurRunDate need to be filled in this field for diagnosis)
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query Conditions (TaskId and CurRunDate need to be filled in this field for diagnosis)
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DiagnoseProResponse(AbstractModel):
    """DiagnosePro response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.DiagnoseRep`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DiagnoseRep`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = DiagnoseRep()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DiagnoseRep(AbstractModel):
    """DiagnoseRep

    """

    def __init__(self):
        r"""
        :param _Content: Diagnostic information content
Note: This field may return null, indicating that no valid value can be obtained.
        :type Content: :class:`tencentcloud.wedata.v20210820.models.Content`
        :param _Table: List of diagnostic result-related information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Table: :class:`tencentcloud.wedata.v20210820.models.Table`
        """
        self._Content = None
        self._Table = None

    @property
    def Content(self):
        """Diagnostic information content
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Content`
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Table(self):
        """List of diagnostic result-related information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.Table`
        """
        return self._Table

    @Table.setter
    def Table(self, Table):
        self._Table = Table


    def _deserialize(self, params):
        if params.get("Content") is not None:
            self._Content = Content()
            self._Content._deserialize(params.get("Content"))
        if params.get("Table") is not None:
            self._Table = Table()
            self._Table._deserialize(params.get("Table"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DimensionCount(AbstractModel):
    """Dimension statistical business view

    """

    def __init__(self):
        r"""
        :param _DimType: Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :type DimType: int
        :param _Count: Statistics value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Count: int
        :param _QualityDim: Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualityDim: int
        """
        self._DimType = None
        self._Count = None
        self._QualityDim = None

    @property
    def DimType(self):
        warnings.warn("parameter `DimType` is deprecated", DeprecationWarning) 

        """Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DimType

    @DimType.setter
    def DimType(self, DimType):
        warnings.warn("parameter `DimType` is deprecated", DeprecationWarning) 

        self._DimType = DimType

    @property
    def Count(self):
        """Statistics value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def QualityDim(self):
        """Dimension types 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim


    def _deserialize(self, params):
        self._DimType = params.get("DimType")
        self._Count = params.get("Count")
        self._QualityDim = params.get("QualityDim")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DimensionScore(AbstractModel):
    """Dimension Scoring

    """

    def __init__(self):
        r"""
        :param _DimensionScoreList: Dimension Scoring List
Note: This field may return null, indicating that no valid value can be obtained.
        :type DimensionScoreList: list of DimensionScoreInfo
        """
        self._DimensionScoreList = None

    @property
    def DimensionScoreList(self):
        """Dimension Scoring List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DimensionScoreInfo
        """
        return self._DimensionScoreList

    @DimensionScoreList.setter
    def DimensionScoreList(self, DimensionScoreList):
        self._DimensionScoreList = DimensionScoreList


    def _deserialize(self, params):
        if params.get("DimensionScoreList") is not None:
            self._DimensionScoreList = []
            for item in params.get("DimensionScoreList"):
                obj = DimensionScoreInfo()
                obj._deserialize(item)
                self._DimensionScoreList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DimensionScoreInfo(AbstractModel):
    """Dimension Scoring Information

    """

    def __init__(self):
        r"""
        :param _Name: Dimension NameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Weight: WeightNote: This field may return null, indicating that no valid value can be obtained.
        :type Weight: float
        :param _UserId: Setter ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: int
        :param _UserName: Setter Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserName: str
        :param _UpdateTime: Update Time Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: int
        :param _JoinTableNumber: Number of Evaluation Forms Involved
        :type JoinTableNumber: int
        :param _Score: Scoring
        :type Score: float
        :param _UserIdStr: Set by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserIdStr: str
        """
        self._Name = None
        self._Weight = None
        self._UserId = None
        self._UserName = None
        self._UpdateTime = None
        self._JoinTableNumber = None
        self._Score = None
        self._UserIdStr = None

    @property
    def Name(self):
        """Dimension NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Weight(self):
        """WeightNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        self._Weight = Weight

    @property
    def UserId(self):
        """Setter ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def UserName(self):
        """Setter Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UpdateTime(self):
        """Update Time Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def JoinTableNumber(self):
        """Number of Evaluation Forms Involved
        :rtype: int
        """
        return self._JoinTableNumber

    @JoinTableNumber.setter
    def JoinTableNumber(self, JoinTableNumber):
        self._JoinTableNumber = JoinTableNumber

    @property
    def Score(self):
        """Scoring
        :rtype: float
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score

    @property
    def UserIdStr(self):
        """Set by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserIdStr

    @UserIdStr.setter
    def UserIdStr(self, UserIdStr):
        self._UserIdStr = UserIdStr


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Weight = params.get("Weight")
        self._UserId = params.get("UserId")
        self._UserName = params.get("UserName")
        self._UpdateTime = params.get("UpdateTime")
        self._JoinTableNumber = params.get("JoinTableNumber")
        self._Score = params.get("Score")
        self._UserIdStr = params.get("UserIdStr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DlcDataGovernPolicy(AbstractModel):
    """Data Governance Configuration Items

    """

    def __init__(self):
        r"""
        :param _RewriteDataPolicy: Data Layout Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type RewriteDataPolicy: :class:`tencentcloud.wedata.v20210820.models.DlcRewriteDataInfo`
        :param _ExpiredSnapshotsPolicy: Snapshot Expiration Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExpiredSnapshotsPolicy: :class:`tencentcloud.wedata.v20210820.models.DlcExpiredSnapshotsInfo`
        :param _RemoveOrphanFilesPolicy: Remove Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemoveOrphanFilesPolicy: :class:`tencentcloud.wedata.v20210820.models.DlcRemoveOrphanFilesInfo`
        :param _MergeManifestsPolicy: Merge Metadata Manifests Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type MergeManifestsPolicy: :class:`tencentcloud.wedata.v20210820.models.DlcMergeManifestsInfo`
        :param _InheritDataBase: Integration Library Rules: default (Default Inheritance), none (No Inheritance)
Note: This field may return null, indicating that no valid value can be obtained.
        :type InheritDataBase: str
        :param _RuleType: Governance Rule Types, Customize: Custom Definition; Intelligence: Intelligent Governance
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleType: str
        :param _GovernEngine: Governance Engine
Note: This field may return null, indicating that no valid value can be obtained.
        :type GovernEngine: str
        """
        self._RewriteDataPolicy = None
        self._ExpiredSnapshotsPolicy = None
        self._RemoveOrphanFilesPolicy = None
        self._MergeManifestsPolicy = None
        self._InheritDataBase = None
        self._RuleType = None
        self._GovernEngine = None

    @property
    def RewriteDataPolicy(self):
        """Data Layout Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DlcRewriteDataInfo`
        """
        return self._RewriteDataPolicy

    @RewriteDataPolicy.setter
    def RewriteDataPolicy(self, RewriteDataPolicy):
        self._RewriteDataPolicy = RewriteDataPolicy

    @property
    def ExpiredSnapshotsPolicy(self):
        """Snapshot Expiration Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DlcExpiredSnapshotsInfo`
        """
        return self._ExpiredSnapshotsPolicy

    @ExpiredSnapshotsPolicy.setter
    def ExpiredSnapshotsPolicy(self, ExpiredSnapshotsPolicy):
        self._ExpiredSnapshotsPolicy = ExpiredSnapshotsPolicy

    @property
    def RemoveOrphanFilesPolicy(self):
        """Remove Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DlcRemoveOrphanFilesInfo`
        """
        return self._RemoveOrphanFilesPolicy

    @RemoveOrphanFilesPolicy.setter
    def RemoveOrphanFilesPolicy(self, RemoveOrphanFilesPolicy):
        self._RemoveOrphanFilesPolicy = RemoveOrphanFilesPolicy

    @property
    def MergeManifestsPolicy(self):
        """Merge Metadata Manifests Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DlcMergeManifestsInfo`
        """
        return self._MergeManifestsPolicy

    @MergeManifestsPolicy.setter
    def MergeManifestsPolicy(self, MergeManifestsPolicy):
        self._MergeManifestsPolicy = MergeManifestsPolicy

    @property
    def InheritDataBase(self):
        """Integration Library Rules: default (Default Inheritance), none (No Inheritance)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InheritDataBase

    @InheritDataBase.setter
    def InheritDataBase(self, InheritDataBase):
        self._InheritDataBase = InheritDataBase

    @property
    def RuleType(self):
        """Governance Rule Types, Customize: Custom Definition; Intelligence: Intelligent Governance
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def GovernEngine(self):
        """Governance Engine
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._GovernEngine

    @GovernEngine.setter
    def GovernEngine(self, GovernEngine):
        self._GovernEngine = GovernEngine


    def _deserialize(self, params):
        if params.get("RewriteDataPolicy") is not None:
            self._RewriteDataPolicy = DlcRewriteDataInfo()
            self._RewriteDataPolicy._deserialize(params.get("RewriteDataPolicy"))
        if params.get("ExpiredSnapshotsPolicy") is not None:
            self._ExpiredSnapshotsPolicy = DlcExpiredSnapshotsInfo()
            self._ExpiredSnapshotsPolicy._deserialize(params.get("ExpiredSnapshotsPolicy"))
        if params.get("RemoveOrphanFilesPolicy") is not None:
            self._RemoveOrphanFilesPolicy = DlcRemoveOrphanFilesInfo()
            self._RemoveOrphanFilesPolicy._deserialize(params.get("RemoveOrphanFilesPolicy"))
        if params.get("MergeManifestsPolicy") is not None:
            self._MergeManifestsPolicy = DlcMergeManifestsInfo()
            self._MergeManifestsPolicy._deserialize(params.get("MergeManifestsPolicy"))
        self._InheritDataBase = params.get("InheritDataBase")
        self._RuleType = params.get("RuleType")
        self._GovernEngine = params.get("GovernEngine")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DlcExpiredSnapshotsInfo(AbstractModel):
    """Snapshot Expiration Governance Item

    """

    def __init__(self):
        r"""
        :param _ExpiredSnapshotsEnable: Whether to enable snapshot expiration governance: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExpiredSnapshotsEnable: str
        :param _Engine: Name of the engine used to run snapshot expiration governance
Note: This field may return null, indicating that no valid value can be obtained.
        :type Engine: str
        :param _RetainLast: Number of recent snapshots to retain
Note: This field may return null, indicating that no valid value can be obtained.
        :type RetainLast: int
        :param _BeforeDays: Snapshots expired before specified days
Note: This field may return null, indicating that no valid value can be obtained.
        :type BeforeDays: int
        :param _MaxConcurrentDeletes: Number of parallel processes for cleaning up expired snapshots
Note: This field may return null, indicating that no valid value can be obtained.
        :type MaxConcurrentDeletes: int
        :param _IntervalMin: Snapshot expiration governance run cycle, unit: minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntervalMin: int
        """
        self._ExpiredSnapshotsEnable = None
        self._Engine = None
        self._RetainLast = None
        self._BeforeDays = None
        self._MaxConcurrentDeletes = None
        self._IntervalMin = None

    @property
    def ExpiredSnapshotsEnable(self):
        """Whether to enable snapshot expiration governance: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExpiredSnapshotsEnable

    @ExpiredSnapshotsEnable.setter
    def ExpiredSnapshotsEnable(self, ExpiredSnapshotsEnable):
        self._ExpiredSnapshotsEnable = ExpiredSnapshotsEnable

    @property
    def Engine(self):
        """Name of the engine used to run snapshot expiration governance
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Engine

    @Engine.setter
    def Engine(self, Engine):
        self._Engine = Engine

    @property
    def RetainLast(self):
        """Number of recent snapshots to retain
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RetainLast

    @RetainLast.setter
    def RetainLast(self, RetainLast):
        self._RetainLast = RetainLast

    @property
    def BeforeDays(self):
        """Snapshots expired before specified days
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._BeforeDays

    @BeforeDays.setter
    def BeforeDays(self, BeforeDays):
        self._BeforeDays = BeforeDays

    @property
    def MaxConcurrentDeletes(self):
        """Number of parallel processes for cleaning up expired snapshots
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MaxConcurrentDeletes

    @MaxConcurrentDeletes.setter
    def MaxConcurrentDeletes(self, MaxConcurrentDeletes):
        self._MaxConcurrentDeletes = MaxConcurrentDeletes

    @property
    def IntervalMin(self):
        """Snapshot expiration governance run cycle, unit: minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IntervalMin

    @IntervalMin.setter
    def IntervalMin(self, IntervalMin):
        self._IntervalMin = IntervalMin


    def _deserialize(self, params):
        self._ExpiredSnapshotsEnable = params.get("ExpiredSnapshotsEnable")
        self._Engine = params.get("Engine")
        self._RetainLast = params.get("RetainLast")
        self._BeforeDays = params.get("BeforeDays")
        self._MaxConcurrentDeletes = params.get("MaxConcurrentDeletes")
        self._IntervalMin = params.get("IntervalMin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DlcMergeManifestsInfo(AbstractModel):
    """Merge metadata Manifests governance items

    """

    def __init__(self):
        r"""
        :param _MergeManifestsEnable: Whether to enable merging metadata Manifests file governance items: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :type MergeManifestsEnable: str
        :param _Engine: Engine name used to run merging metadata Manifests file governance items
Note: This field may return null, indicating that no valid value can be obtained.
        :type Engine: str
        :param _IntervalMin: Merge Metadata Manifests file governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntervalMin: int
        """
        self._MergeManifestsEnable = None
        self._Engine = None
        self._IntervalMin = None

    @property
    def MergeManifestsEnable(self):
        """Whether to enable merging metadata Manifests file governance items: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MergeManifestsEnable

    @MergeManifestsEnable.setter
    def MergeManifestsEnable(self, MergeManifestsEnable):
        self._MergeManifestsEnable = MergeManifestsEnable

    @property
    def Engine(self):
        """Engine name used to run merging metadata Manifests file governance items
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Engine

    @Engine.setter
    def Engine(self, Engine):
        self._Engine = Engine

    @property
    def IntervalMin(self):
        """Merge Metadata Manifests file governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IntervalMin

    @IntervalMin.setter
    def IntervalMin(self, IntervalMin):
        self._IntervalMin = IntervalMin


    def _deserialize(self, params):
        self._MergeManifestsEnable = params.get("MergeManifestsEnable")
        self._Engine = params.get("Engine")
        self._IntervalMin = params.get("IntervalMin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DlcRemoveOrphanFilesInfo(AbstractModel):
    """Remove Isolated Files Governance Item

    """

    def __init__(self):
        r"""
        :param _RemoveOrphanFilesEnable: Enable Removal of Isolated Files Governance Item: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemoveOrphanFilesEnable: str
        :param _Engine: Engine Name for Running Removal of Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type Engine: str
        :param _BeforeDays: Remove Isolated Files Older Than Specified Days
Note: This field may return null, indicating that no valid value can be obtained.
        :type BeforeDays: int
        :param _MaxConcurrentDeletes: Number of Concurrent Processes for Removing Isolated Files
Note: This field may return null, indicating that no valid value can be obtained.
        :type MaxConcurrentDeletes: int
        :param _IntervalMin: Isolated Files Governance Run Cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntervalMin: int
        """
        self._RemoveOrphanFilesEnable = None
        self._Engine = None
        self._BeforeDays = None
        self._MaxConcurrentDeletes = None
        self._IntervalMin = None

    @property
    def RemoveOrphanFilesEnable(self):
        """Enable Removal of Isolated Files Governance Item: enable, none
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RemoveOrphanFilesEnable

    @RemoveOrphanFilesEnable.setter
    def RemoveOrphanFilesEnable(self, RemoveOrphanFilesEnable):
        self._RemoveOrphanFilesEnable = RemoveOrphanFilesEnable

    @property
    def Engine(self):
        """Engine Name for Running Removal of Isolated Files Governance Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Engine

    @Engine.setter
    def Engine(self, Engine):
        self._Engine = Engine

    @property
    def BeforeDays(self):
        """Remove Isolated Files Older Than Specified Days
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._BeforeDays

    @BeforeDays.setter
    def BeforeDays(self, BeforeDays):
        self._BeforeDays = BeforeDays

    @property
    def MaxConcurrentDeletes(self):
        """Number of Concurrent Processes for Removing Isolated Files
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MaxConcurrentDeletes

    @MaxConcurrentDeletes.setter
    def MaxConcurrentDeletes(self, MaxConcurrentDeletes):
        self._MaxConcurrentDeletes = MaxConcurrentDeletes

    @property
    def IntervalMin(self):
        """Isolated Files Governance Run Cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IntervalMin

    @IntervalMin.setter
    def IntervalMin(self, IntervalMin):
        self._IntervalMin = IntervalMin


    def _deserialize(self, params):
        self._RemoveOrphanFilesEnable = params.get("RemoveOrphanFilesEnable")
        self._Engine = params.get("Engine")
        self._BeforeDays = params.get("BeforeDays")
        self._MaxConcurrentDeletes = params.get("MaxConcurrentDeletes")
        self._IntervalMin = params.get("IntervalMin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DlcRewriteDataInfo(AbstractModel):
    """Data Layout Governance Item

    """

    def __init__(self):
        r"""
        :param _RewriteDataEnable: Whether to enable data layout governance item: enable (start), disable (do not enable, default)
Note: This field may return null, indicating that no valid value can be obtained.
        :type RewriteDataEnable: str
        :param _Engine: Engine name used to run data layout governance item
Note: This field may return null, indicating that no valid value can be obtained.
        :type Engine: str
        :param _MinInputFiles: Number of files executed by the rearrangement task
Note: This field may return null, indicating that no valid value can be obtained.
        :type MinInputFiles: int
        :param _TargetFileSizeBytes: Data file size after data rearrangement, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetFileSizeBytes: int
        :param _IntervalMin: Data layout governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntervalMin: int
        """
        self._RewriteDataEnable = None
        self._Engine = None
        self._MinInputFiles = None
        self._TargetFileSizeBytes = None
        self._IntervalMin = None

    @property
    def RewriteDataEnable(self):
        """Whether to enable data layout governance item: enable (start), disable (do not enable, default)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RewriteDataEnable

    @RewriteDataEnable.setter
    def RewriteDataEnable(self, RewriteDataEnable):
        self._RewriteDataEnable = RewriteDataEnable

    @property
    def Engine(self):
        """Engine name used to run data layout governance item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Engine

    @Engine.setter
    def Engine(self, Engine):
        self._Engine = Engine

    @property
    def MinInputFiles(self):
        """Number of files executed by the rearrangement task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MinInputFiles

    @MinInputFiles.setter
    def MinInputFiles(self, MinInputFiles):
        self._MinInputFiles = MinInputFiles

    @property
    def TargetFileSizeBytes(self):
        """Data file size after data rearrangement, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TargetFileSizeBytes

    @TargetFileSizeBytes.setter
    def TargetFileSizeBytes(self, TargetFileSizeBytes):
        self._TargetFileSizeBytes = TargetFileSizeBytes

    @property
    def IntervalMin(self):
        """Data layout governance runtime cycle, in minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IntervalMin

    @IntervalMin.setter
    def IntervalMin(self, IntervalMin):
        self._IntervalMin = IntervalMin


    def _deserialize(self, params):
        self._RewriteDataEnable = params.get("RewriteDataEnable")
        self._Engine = params.get("Engine")
        self._MinInputFiles = params.get("MinInputFiles")
        self._TargetFileSizeBytes = params.get("TargetFileSizeBytes")
        self._IntervalMin = params.get("IntervalMin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DrInstanceOpsDto(AbstractModel):
    """Trial Run Record

    """

    def __init__(self):
        r"""
        :param _TaskSource: Task Source
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskSource: str
        :param _JobId: Orchestration Space jobId
Note: This field may return null, indicating that no valid value can be obtained.
        :type JobId: str
        :param _RecordId: Task Submission Record Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type RecordId: int
        :param _SonRecordId: Subtask record id
Note: This field may return null, indicating that no valid value can be obtained.
        :type SonRecordId: int
        :param _InstanceId: Task instance Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _TaskId: For orchestration space, the task id; for development space, the script id
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _RemotePath: Script COS address
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemotePath: str
        :param _ScriptContent: Trial run content
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScriptContent: str
        :param _CreateTime: Task submission time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _StartTime: Task start time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _Duration: Running duration (seconds)
Note: This field may return null, indicating that no valid value can be obtained.
        :type Duration: str
        :param _Status: Trial run status
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _TaskName: For orchestration space, the task name; for development space, the script name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _SubmitUserName: Trial run submitter
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubmitUserName: str
        :param _SubmitUserId: Trial run submitter userId
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubmitUserId: str
        :param _TaskType: Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskType: str
        :param _HasResultSet: Contains result set
Note: This field may return null, indicating that no valid value can be obtained.
        :type HasResultSet: bool
        """
        self._TaskSource = None
        self._JobId = None
        self._RecordId = None
        self._SonRecordId = None
        self._InstanceId = None
        self._TaskId = None
        self._RemotePath = None
        self._ScriptContent = None
        self._CreateTime = None
        self._StartTime = None
        self._Duration = None
        self._Status = None
        self._TaskName = None
        self._SubmitUserName = None
        self._SubmitUserId = None
        self._TaskType = None
        self._HasResultSet = None

    @property
    def TaskSource(self):
        """Task Source
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskSource

    @TaskSource.setter
    def TaskSource(self, TaskSource):
        self._TaskSource = TaskSource

    @property
    def JobId(self):
        """Orchestration Space jobId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RecordId(self):
        """Task Submission Record Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def SonRecordId(self):
        """Subtask record id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SonRecordId

    @SonRecordId.setter
    def SonRecordId(self, SonRecordId):
        self._SonRecordId = SonRecordId

    @property
    def InstanceId(self):
        """Task instance Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def TaskId(self):
        """For orchestration space, the task id; for development space, the script id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RemotePath(self):
        """Script COS address
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RemotePath

    @RemotePath.setter
    def RemotePath(self, RemotePath):
        self._RemotePath = RemotePath

    @property
    def ScriptContent(self):
        """Trial run content
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def CreateTime(self):
        """Task submission time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """Task start time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Duration(self):
        """Running duration (seconds)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Duration

    @Duration.setter
    def Duration(self, Duration):
        self._Duration = Duration

    @property
    def Status(self):
        """Trial run status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def TaskName(self):
        """For orchestration space, the task name; for development space, the script name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def SubmitUserName(self):
        """Trial run submitter
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SubmitUserName

    @SubmitUserName.setter
    def SubmitUserName(self, SubmitUserName):
        self._SubmitUserName = SubmitUserName

    @property
    def SubmitUserId(self):
        """Trial run submitter userId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SubmitUserId

    @SubmitUserId.setter
    def SubmitUserId(self, SubmitUserId):
        self._SubmitUserId = SubmitUserId

    @property
    def TaskType(self):
        """Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def HasResultSet(self):
        """Contains result set
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._HasResultSet

    @HasResultSet.setter
    def HasResultSet(self, HasResultSet):
        self._HasResultSet = HasResultSet


    def _deserialize(self, params):
        self._TaskSource = params.get("TaskSource")
        self._JobId = params.get("JobId")
        self._RecordId = params.get("RecordId")
        self._SonRecordId = params.get("SonRecordId")
        self._InstanceId = params.get("InstanceId")
        self._TaskId = params.get("TaskId")
        self._RemotePath = params.get("RemotePath")
        self._ScriptContent = params.get("ScriptContent")
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._Duration = params.get("Duration")
        self._Status = params.get("Status")
        self._TaskName = params.get("TaskName")
        self._SubmitUserName = params.get("SubmitUserName")
        self._SubmitUserId = params.get("SubmitUserId")
        self._TaskType = params.get("TaskType")
        self._HasResultSet = params.get("HasResultSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DrInstanceOpsDtoPage(AbstractModel):
    """Trial Run Record

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of DrInstanceOpsDto
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DrInstanceOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = DrInstanceOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DryRunDIOfflineTaskRequest(AbstractModel):
    """DryRunDIOfflineTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ResourceGroup: Resource Group ID
        :type ResourceGroup: str
        :param _TaskTypeId: Default 27
        :type TaskTypeId: int
        """
        self._TaskId = None
        self._ProjectId = None
        self._ResourceGroup = None
        self._TaskTypeId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ResourceGroup(self):
        """Resource Group ID
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup

    @property
    def TaskTypeId(self):
        """Default 27
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._ResourceGroup = params.get("ResourceGroup")
        self._TaskTypeId = params.get("TaskTypeId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DryRunDIOfflineTaskResponse(AbstractModel):
    """DryRunDIOfflineTask response structure.

    """

    def __init__(self):
        r"""
        :param _CurrentRunDate: Data Timestamp
        :type CurrentRunDate: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Status: Task Status
        :type Status: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _TaskInstanceKey: Unique Key for Task Instance
        :type TaskInstanceKey: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._CurrentRunDate = None
        self._ProjectId = None
        self._Status = None
        self._TaskId = None
        self._TaskInstanceKey = None
        self._RequestId = None

    @property
    def CurrentRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurrentRunDate

    @CurrentRunDate.setter
    def CurrentRunDate(self, CurrentRunDate):
        self._CurrentRunDate = CurrentRunDate

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Status(self):
        """Task Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskInstanceKey(self):
        """Unique Key for Task Instance
        :rtype: str
        """
        return self._TaskInstanceKey

    @TaskInstanceKey.setter
    def TaskInstanceKey(self, TaskInstanceKey):
        self._TaskInstanceKey = TaskInstanceKey

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CurrentRunDate = params.get("CurrentRunDate")
        self._ProjectId = params.get("ProjectId")
        self._Status = params.get("Status")
        self._TaskId = params.get("TaskId")
        self._TaskInstanceKey = params.get("TaskInstanceKey")
        self._RequestId = params.get("RequestId")


class EngineTaskInfo(AbstractModel):
    """Engine task information.

    """

    def __init__(self):
        r"""
        :param _EngineSubmitTime: Engine submission time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineSubmitTime: str
        :param _EngineExeTime: Engine execution time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeTime: str
        :param _EngineExeTimes: Total execution time of the engine.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeTimes: int
        :param _CuConsume: cu consumption.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CuConsume: int
        :param _ResourceUsage: Resource consumption.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ResourceUsage: int
        :param _EngineName: Engine name.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineName: str
        :param _EngineExeStatus: Engine execution status.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeStatus: str
        :param _TaskKind: Task type.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskKind: str
        :param _TaskType: Task type

Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskType: str
        :param _TaskContent: Task SQL statement.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskContent: str
        :param _InputBytesSum: Total bytes of data scanning.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :type InputBytesSum: int
        :param _ShuffleReadBytesSum: Total shuffle read bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :type ShuffleReadBytesSum: int
        :param _ShuffleReadRecordsSum: Total number of shuffle read lines.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :type ShuffleReadRecordsSum: int
        :param _OutputRecordsSum: Total number of outputs.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :type OutputRecordsSum: int
        :param _OutputBytesSum: Total output in bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :type OutputBytesSum: int
        :param _OutputFilesNum: Number of output files.
Note: This field may return null, indicating that no valid values can be obtained.
        :type OutputFilesNum: int
        :param _OutputSmallFilesNum: Number of small files output.
Note: This field may return null, indicating that no valid values can be obtained.
        :type OutputSmallFilesNum: int
        :param _WaitTime: Execution wait time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type WaitTime: int
        :param _QueryResultTime: Query result time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type QueryResultTime: int
        :param _CmdArgs: Input parameters.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CmdArgs: str
        """
        self._EngineSubmitTime = None
        self._EngineExeTime = None
        self._EngineExeTimes = None
        self._CuConsume = None
        self._ResourceUsage = None
        self._EngineName = None
        self._EngineExeStatus = None
        self._TaskKind = None
        self._TaskType = None
        self._TaskContent = None
        self._InputBytesSum = None
        self._ShuffleReadBytesSum = None
        self._ShuffleReadRecordsSum = None
        self._OutputRecordsSum = None
        self._OutputBytesSum = None
        self._OutputFilesNum = None
        self._OutputSmallFilesNum = None
        self._WaitTime = None
        self._QueryResultTime = None
        self._CmdArgs = None

    @property
    def EngineSubmitTime(self):
        """Engine submission time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineSubmitTime

    @EngineSubmitTime.setter
    def EngineSubmitTime(self, EngineSubmitTime):
        self._EngineSubmitTime = EngineSubmitTime

    @property
    def EngineExeTime(self):
        """Engine execution time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeTime

    @EngineExeTime.setter
    def EngineExeTime(self, EngineExeTime):
        self._EngineExeTime = EngineExeTime

    @property
    def EngineExeTimes(self):
        """Total execution time of the engine.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EngineExeTimes

    @EngineExeTimes.setter
    def EngineExeTimes(self, EngineExeTimes):
        self._EngineExeTimes = EngineExeTimes

    @property
    def CuConsume(self):
        """cu consumption.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CuConsume

    @CuConsume.setter
    def CuConsume(self, CuConsume):
        self._CuConsume = CuConsume

    @property
    def ResourceUsage(self):
        """Resource consumption.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ResourceUsage

    @ResourceUsage.setter
    def ResourceUsage(self, ResourceUsage):
        self._ResourceUsage = ResourceUsage

    @property
    def EngineName(self):
        """Engine name.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineName

    @EngineName.setter
    def EngineName(self, EngineName):
        self._EngineName = EngineName

    @property
    def EngineExeStatus(self):
        """Engine execution status.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeStatus

    @EngineExeStatus.setter
    def EngineExeStatus(self, EngineExeStatus):
        self._EngineExeStatus = EngineExeStatus

    @property
    def TaskKind(self):
        """Task type.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskKind

    @TaskKind.setter
    def TaskKind(self, TaskKind):
        self._TaskKind = TaskKind

    @property
    def TaskType(self):
        """Task type

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskContent(self):
        """Task SQL statement.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskContent

    @TaskContent.setter
    def TaskContent(self, TaskContent):
        self._TaskContent = TaskContent

    @property
    def InputBytesSum(self):
        """Total bytes of data scanning.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._InputBytesSum

    @InputBytesSum.setter
    def InputBytesSum(self, InputBytesSum):
        self._InputBytesSum = InputBytesSum

    @property
    def ShuffleReadBytesSum(self):
        """Total shuffle read bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ShuffleReadBytesSum

    @ShuffleReadBytesSum.setter
    def ShuffleReadBytesSum(self, ShuffleReadBytesSum):
        self._ShuffleReadBytesSum = ShuffleReadBytesSum

    @property
    def ShuffleReadRecordsSum(self):
        """Total number of shuffle read lines.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ShuffleReadRecordsSum

    @ShuffleReadRecordsSum.setter
    def ShuffleReadRecordsSum(self, ShuffleReadRecordsSum):
        self._ShuffleReadRecordsSum = ShuffleReadRecordsSum

    @property
    def OutputRecordsSum(self):
        """Total number of outputs.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._OutputRecordsSum

    @OutputRecordsSum.setter
    def OutputRecordsSum(self, OutputRecordsSum):
        self._OutputRecordsSum = OutputRecordsSum

    @property
    def OutputBytesSum(self):
        """Total output in bytes.
Note: This field may return null, indicating that no valid values can be obtained.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._OutputBytesSum

    @OutputBytesSum.setter
    def OutputBytesSum(self, OutputBytesSum):
        self._OutputBytesSum = OutputBytesSum

    @property
    def OutputFilesNum(self):
        """Number of output files.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._OutputFilesNum

    @OutputFilesNum.setter
    def OutputFilesNum(self, OutputFilesNum):
        self._OutputFilesNum = OutputFilesNum

    @property
    def OutputSmallFilesNum(self):
        """Number of small files output.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._OutputSmallFilesNum

    @OutputSmallFilesNum.setter
    def OutputSmallFilesNum(self, OutputSmallFilesNum):
        self._OutputSmallFilesNum = OutputSmallFilesNum

    @property
    def WaitTime(self):
        """Execution wait time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._WaitTime

    @WaitTime.setter
    def WaitTime(self, WaitTime):
        self._WaitTime = WaitTime

    @property
    def QueryResultTime(self):
        """Query result time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._QueryResultTime

    @QueryResultTime.setter
    def QueryResultTime(self, QueryResultTime):
        self._QueryResultTime = QueryResultTime

    @property
    def CmdArgs(self):
        """Input parameters.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CmdArgs

    @CmdArgs.setter
    def CmdArgs(self, CmdArgs):
        self._CmdArgs = CmdArgs


    def _deserialize(self, params):
        self._EngineSubmitTime = params.get("EngineSubmitTime")
        self._EngineExeTime = params.get("EngineExeTime")
        self._EngineExeTimes = params.get("EngineExeTimes")
        self._CuConsume = params.get("CuConsume")
        self._ResourceUsage = params.get("ResourceUsage")
        self._EngineName = params.get("EngineName")
        self._EngineExeStatus = params.get("EngineExeStatus")
        self._TaskKind = params.get("TaskKind")
        self._TaskType = params.get("TaskType")
        self._TaskContent = params.get("TaskContent")
        self._InputBytesSum = params.get("InputBytesSum")
        self._ShuffleReadBytesSum = params.get("ShuffleReadBytesSum")
        self._ShuffleReadRecordsSum = params.get("ShuffleReadRecordsSum")
        self._OutputRecordsSum = params.get("OutputRecordsSum")
        self._OutputBytesSum = params.get("OutputBytesSum")
        self._OutputFilesNum = params.get("OutputFilesNum")
        self._OutputSmallFilesNum = params.get("OutputSmallFilesNum")
        self._WaitTime = params.get("WaitTime")
        self._QueryResultTime = params.get("QueryResultTime")
        self._CmdArgs = params.get("CmdArgs")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventBatchCaseDTO(AbstractModel):
    """Event Continuous Time Instance Information

    """

    def __init__(self):
        r"""
        :param _CaseId: Event Instance ID
        :type CaseId: str
        :param _Name: Event
        :type Name: str
        :param _StartDimension: Event Trigger Start Time
        :type StartDimension: str
        :param _CreationTs: Creation Time
        :type CreationTs: str
        :param _ConsumerId: Consumer ID
        :type ConsumerId: str
        :param _Description: Description
        :type Description: str
        :param _EndDimension: Event Trigger End Time
        :type EndDimension: str
        :param _EventSubType: Event Cycle
        :type EventSubType: str
        """
        self._CaseId = None
        self._Name = None
        self._StartDimension = None
        self._CreationTs = None
        self._ConsumerId = None
        self._Description = None
        self._EndDimension = None
        self._EventSubType = None

    @property
    def CaseId(self):
        """Event Instance ID
        :rtype: str
        """
        return self._CaseId

    @CaseId.setter
    def CaseId(self, CaseId):
        self._CaseId = CaseId

    @property
    def Name(self):
        """Event
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def StartDimension(self):
        """Event Trigger Start Time
        :rtype: str
        """
        return self._StartDimension

    @StartDimension.setter
    def StartDimension(self, StartDimension):
        self._StartDimension = StartDimension

    @property
    def CreationTs(self):
        """Creation Time
        :rtype: str
        """
        return self._CreationTs

    @CreationTs.setter
    def CreationTs(self, CreationTs):
        self._CreationTs = CreationTs

    @property
    def ConsumerId(self):
        """Consumer ID
        :rtype: str
        """
        return self._ConsumerId

    @ConsumerId.setter
    def ConsumerId(self, ConsumerId):
        self._ConsumerId = ConsumerId

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def EndDimension(self):
        """Event Trigger End Time
        :rtype: str
        """
        return self._EndDimension

    @EndDimension.setter
    def EndDimension(self, EndDimension):
        self._EndDimension = EndDimension

    @property
    def EventSubType(self):
        """Event Cycle
        :rtype: str
        """
        return self._EventSubType

    @EventSubType.setter
    def EventSubType(self, EventSubType):
        self._EventSubType = EventSubType


    def _deserialize(self, params):
        self._CaseId = params.get("CaseId")
        self._Name = params.get("Name")
        self._StartDimension = params.get("StartDimension")
        self._CreationTs = params.get("CreationTs")
        self._ConsumerId = params.get("ConsumerId")
        self._Description = params.get("Description")
        self._EndDimension = params.get("EndDimension")
        self._EventSubType = params.get("EventSubType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseAuditLogOptDto(AbstractModel):
    """Event Instance

    """

    def __init__(self):
        r"""
        :param _CaseId: Event Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type CaseId: str
        :param _EventName: Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :type EventName: str
        :param _EventType: Event typeNote: This field may return null, indicating that no valid value can be obtained.
        :type EventType: str
        :param _EventSubType: Event Split Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventSubType: str
        :param _EventBroadcastType: Event Broadcast Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventBroadcastType: str
        :param _TTL: Event Instance TTL
Note: This field may return null, indicating that no valid value can be obtained.
        :type TTL: int
        :param _TimeUnit: Event Instance TTL Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type TimeUnit: str
        :param _Dimension: Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type Dimension: str
        :param _Status: Event Instance Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _EventTriggerTimestamp: Event Instance Trigger Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventTriggerTimestamp: str
        :param _LogTimestamp: Event Instance Consumption Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :type LogTimestamp: str
        :param _Description: Event Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        """
        self._CaseId = None
        self._EventName = None
        self._EventType = None
        self._EventSubType = None
        self._EventBroadcastType = None
        self._TTL = None
        self._TimeUnit = None
        self._Dimension = None
        self._Status = None
        self._EventTriggerTimestamp = None
        self._LogTimestamp = None
        self._Description = None

    @property
    def CaseId(self):
        """Event Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CaseId

    @CaseId.setter
    def CaseId(self, CaseId):
        self._CaseId = CaseId

    @property
    def EventName(self):
        """Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def EventType(self):
        """Event typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def EventSubType(self):
        """Event Split Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventSubType

    @EventSubType.setter
    def EventSubType(self, EventSubType):
        self._EventSubType = EventSubType

    @property
    def EventBroadcastType(self):
        """Event Broadcast Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventBroadcastType

    @EventBroadcastType.setter
    def EventBroadcastType(self, EventBroadcastType):
        self._EventBroadcastType = EventBroadcastType

    @property
    def TTL(self):
        """Event Instance TTL
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TTL

    @TTL.setter
    def TTL(self, TTL):
        self._TTL = TTL

    @property
    def TimeUnit(self):
        """Event Instance TTL Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def Dimension(self):
        """Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Dimension

    @Dimension.setter
    def Dimension(self, Dimension):
        self._Dimension = Dimension

    @property
    def Status(self):
        """Event Instance Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventTriggerTimestamp(self):
        """Event Instance Trigger Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventTriggerTimestamp

    @EventTriggerTimestamp.setter
    def EventTriggerTimestamp(self, EventTriggerTimestamp):
        self._EventTriggerTimestamp = EventTriggerTimestamp

    @property
    def LogTimestamp(self):
        """Event Instance Consumption Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LogTimestamp

    @LogTimestamp.setter
    def LogTimestamp(self, LogTimestamp):
        self._LogTimestamp = LogTimestamp

    @property
    def Description(self):
        """Event Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._CaseId = params.get("CaseId")
        self._EventName = params.get("EventName")
        self._EventType = params.get("EventType")
        self._EventSubType = params.get("EventSubType")
        self._EventBroadcastType = params.get("EventBroadcastType")
        self._TTL = params.get("TTL")
        self._TimeUnit = params.get("TimeUnit")
        self._Dimension = params.get("Dimension")
        self._Status = params.get("Status")
        self._EventTriggerTimestamp = params.get("EventTriggerTimestamp")
        self._LogTimestamp = params.get("LogTimestamp")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseAuditLogVOCollection(AbstractModel):
    """Event Instance Pagination Query Results

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total PagesNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Page sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of EventCaseAuditLogOptDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total PagesNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of EventCaseAuditLogOptDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = EventCaseAuditLogOptDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseConsumeLogOptDto(AbstractModel):
    """Event Consumption Record

    """

    def __init__(self):
        r"""
        :param _ConsumeLogId: Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :type ConsumeLogId: str
        :param _EventCaseId: Event Case ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :type EventCaseId: str
        :param _ConsumerId: Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :type ConsumerId: str
        :param _CreationTimestamp: Consumption Timestamp\nNote: This field may return null, indicating that no valid value can be obtained.
        :type CreationTimestamp: str
        :param _ConsumerDetail: Task DetailsNote: This field may return null, indicating that no valid value can be obtained.
        :type ConsumerDetail: :class:`tencentcloud.wedata.v20210820.models.TaskOpsDto`
        """
        self._ConsumeLogId = None
        self._EventCaseId = None
        self._ConsumerId = None
        self._CreationTimestamp = None
        self._ConsumerDetail = None

    @property
    def ConsumeLogId(self):
        """Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ConsumeLogId

    @ConsumeLogId.setter
    def ConsumeLogId(self, ConsumeLogId):
        self._ConsumeLogId = ConsumeLogId

    @property
    def EventCaseId(self):
        """Event Case ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventCaseId

    @EventCaseId.setter
    def EventCaseId(self, EventCaseId):
        self._EventCaseId = EventCaseId

    @property
    def ConsumerId(self):
        """Consumer ID\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ConsumerId

    @ConsumerId.setter
    def ConsumerId(self, ConsumerId):
        self._ConsumerId = ConsumerId

    @property
    def CreationTimestamp(self):
        """Consumption Timestamp\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreationTimestamp

    @CreationTimestamp.setter
    def CreationTimestamp(self, CreationTimestamp):
        self._CreationTimestamp = CreationTimestamp

    @property
    def ConsumerDetail(self):
        """Task DetailsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskOpsDto`
        """
        return self._ConsumerDetail

    @ConsumerDetail.setter
    def ConsumerDetail(self, ConsumerDetail):
        self._ConsumerDetail = ConsumerDetail


    def _deserialize(self, params):
        self._ConsumeLogId = params.get("ConsumeLogId")
        self._EventCaseId = params.get("EventCaseId")
        self._ConsumerId = params.get("ConsumerId")
        self._CreationTimestamp = params.get("CreationTimestamp")
        if params.get("ConsumerDetail") is not None:
            self._ConsumerDetail = TaskOpsDto()
            self._ConsumerDetail._deserialize(params.get("ConsumerDetail"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseConsumeLogOptDtoCollection(AbstractModel):
    """Event Consumption Task Record List

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Number of Results on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Number of items per pageNote: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of EventCaseConsumeLogOptDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total number of resultsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Number of Results on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Number of items per pageNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Pagination Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of EventCaseConsumeLogOptDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = EventCaseConsumeLogOptDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseDTO(AbstractModel):
    """Event Instance Information

    """

    def __init__(self):
        r"""
        :param _CaseId: Event Instance ID
        :type CaseId: str
        :param _Name: Event
        :type Name: str
        :param _Dimension: Event Format
        :type Dimension: str
        :param _CreationTs: Creation Time
        :type CreationTs: str
        :param _ConsumerId: Consumer ID
        :type ConsumerId: str
        :param _Description: Description
        :type Description: str
        """
        self._CaseId = None
        self._Name = None
        self._Dimension = None
        self._CreationTs = None
        self._ConsumerId = None
        self._Description = None

    @property
    def CaseId(self):
        """Event Instance ID
        :rtype: str
        """
        return self._CaseId

    @CaseId.setter
    def CaseId(self, CaseId):
        self._CaseId = CaseId

    @property
    def Name(self):
        """Event
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Dimension(self):
        """Event Format
        :rtype: str
        """
        return self._Dimension

    @Dimension.setter
    def Dimension(self, Dimension):
        self._Dimension = Dimension

    @property
    def CreationTs(self):
        """Creation Time
        :rtype: str
        """
        return self._CreationTs

    @CreationTs.setter
    def CreationTs(self, CreationTs):
        self._CreationTs = CreationTs

    @property
    def ConsumerId(self):
        """Consumer ID
        :rtype: str
        """
        return self._ConsumerId

    @ConsumerId.setter
    def ConsumerId(self, ConsumerId):
        self._ConsumerId = ConsumerId

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._CaseId = params.get("CaseId")
        self._Name = params.get("Name")
        self._Dimension = params.get("Dimension")
        self._CreationTs = params.get("CreationTs")
        self._ConsumerId = params.get("ConsumerId")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventCaseOpsDto(AbstractModel):
    """EventCaseOpsDto

    """

    def __init__(self):
        r"""
        :param _CaseId: Case ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type CaseId: str
        :param _Name: Case Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Dimension: time format
Note: This field may return null, indicating that no valid value can be obtained.
        :type Dimension: str
        :param _CreationTimestamp: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreationTimestamp: str
        :param _ConsumerId: Consumer ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ConsumerId: str
        :param _Description: DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        """
        self._CaseId = None
        self._Name = None
        self._Dimension = None
        self._CreationTimestamp = None
        self._ConsumerId = None
        self._Description = None

    @property
    def CaseId(self):
        """Case ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CaseId

    @CaseId.setter
    def CaseId(self, CaseId):
        self._CaseId = CaseId

    @property
    def Name(self):
        """Case Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Dimension(self):
        """time format
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Dimension

    @Dimension.setter
    def Dimension(self, Dimension):
        self._Dimension = Dimension

    @property
    def CreationTimestamp(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreationTimestamp

    @CreationTimestamp.setter
    def CreationTimestamp(self, CreationTimestamp):
        self._CreationTimestamp = CreationTimestamp

    @property
    def ConsumerId(self):
        """Consumer ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ConsumerId

    @ConsumerId.setter
    def ConsumerId(self, ConsumerId):
        self._ConsumerId = ConsumerId

    @property
    def Description(self):
        """DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._CaseId = params.get("CaseId")
        self._Name = params.get("Name")
        self._Dimension = params.get("Dimension")
        self._CreationTimestamp = params.get("CreationTimestamp")
        self._ConsumerId = params.get("ConsumerId")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventListenerOpsDto(AbstractModel):
    """Event Listener

    """

    def __init__(self):
        r"""
        :param _EventName: Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :type EventName: str
        :param _Key: Keyword, if it is a task, then it is the Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Key: str
        :param _Type: Trigger methodNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Properties: Event Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :type Properties: str
        :param _CreationTimestamp: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreationTimestamp: str
        """
        self._EventName = None
        self._Key = None
        self._Type = None
        self._Properties = None
        self._CreationTimestamp = None

    @property
    def EventName(self):
        """Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def Key(self):
        """Keyword, if it is a task, then it is the Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Type(self):
        """Trigger methodNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Properties(self):
        """Event Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Properties

    @Properties.setter
    def Properties(self, Properties):
        self._Properties = Properties

    @property
    def CreationTimestamp(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreationTimestamp

    @CreationTimestamp.setter
    def CreationTimestamp(self, CreationTimestamp):
        self._CreationTimestamp = CreationTimestamp


    def _deserialize(self, params):
        self._EventName = params.get("EventName")
        self._Key = params.get("Key")
        self._Type = params.get("Type")
        self._Properties = params.get("Properties")
        self._CreationTimestamp = params.get("CreationTimestamp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventOpsDto(AbstractModel):
    """Event details

    """

    def __init__(self):
        r"""
        :param _Name: Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _EventType: Event typeNote: This field may return null, indicating that no valid value can be obtained.
        :type EventType: str
        :param _EventSubType: Event Segmentation TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type EventSubType: str
        :param _EventBroadcastType: Event Broadcast TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type EventBroadcastType: str
        :param _DimensionFormat: Data Time Format
Note: This field may return null, indicating that no valid value can be obtained.
        :type DimensionFormat: str
        :param _TimeToLive: UptimeNote: This field may return null, indicating that no valid value can be obtained.
        :type TimeToLive: int
        :param _TimeUnit: Lifetime Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type TimeUnit: str
        :param _CreationTimestamp: Creation Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreationTimestamp: str
        :param _Owner: Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _Properties: AttributeNote: This field may return null, indicating that no valid value can be obtained.
        :type Properties: str
        :param _Description: DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Listeners: Listener
Note: This field may return null, indicating that no valid value can be obtained.
        :type Listeners: list of EventListenerOpsDto
        :param _EventCases: Incident Case
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventCases: list of EventCaseOpsDto
        """
        self._Name = None
        self._EventType = None
        self._EventSubType = None
        self._EventBroadcastType = None
        self._DimensionFormat = None
        self._TimeToLive = None
        self._TimeUnit = None
        self._CreationTimestamp = None
        self._Owner = None
        self._Properties = None
        self._Description = None
        self._Listeners = None
        self._EventCases = None

    @property
    def Name(self):
        """Event nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def EventType(self):
        """Event typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def EventSubType(self):
        """Event Segmentation TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventSubType

    @EventSubType.setter
    def EventSubType(self, EventSubType):
        self._EventSubType = EventSubType

    @property
    def EventBroadcastType(self):
        """Event Broadcast TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventBroadcastType

    @EventBroadcastType.setter
    def EventBroadcastType(self, EventBroadcastType):
        self._EventBroadcastType = EventBroadcastType

    @property
    def DimensionFormat(self):
        """Data Time Format
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DimensionFormat

    @DimensionFormat.setter
    def DimensionFormat(self, DimensionFormat):
        self._DimensionFormat = DimensionFormat

    @property
    def TimeToLive(self):
        """UptimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TimeToLive

    @TimeToLive.setter
    def TimeToLive(self, TimeToLive):
        self._TimeToLive = TimeToLive

    @property
    def TimeUnit(self):
        """Lifetime Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def CreationTimestamp(self):
        """Creation Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreationTimestamp

    @CreationTimestamp.setter
    def CreationTimestamp(self, CreationTimestamp):
        self._CreationTimestamp = CreationTimestamp

    @property
    def Owner(self):
        """Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def Properties(self):
        """AttributeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Properties

    @Properties.setter
    def Properties(self, Properties):
        self._Properties = Properties

    @property
    def Description(self):
        """DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Listeners(self):
        """Listener
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of EventListenerOpsDto
        """
        return self._Listeners

    @Listeners.setter
    def Listeners(self, Listeners):
        self._Listeners = Listeners

    @property
    def EventCases(self):
        """Incident Case
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of EventCaseOpsDto
        """
        return self._EventCases

    @EventCases.setter
    def EventCases(self, EventCases):
        self._EventCases = EventCases


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._EventType = params.get("EventType")
        self._EventSubType = params.get("EventSubType")
        self._EventBroadcastType = params.get("EventBroadcastType")
        self._DimensionFormat = params.get("DimensionFormat")
        self._TimeToLive = params.get("TimeToLive")
        self._TimeUnit = params.get("TimeUnit")
        self._CreationTimestamp = params.get("CreationTimestamp")
        self._Owner = params.get("Owner")
        self._Properties = params.get("Properties")
        self._Description = params.get("Description")
        if params.get("Listeners") is not None:
            self._Listeners = []
            for item in params.get("Listeners"):
                obj = EventListenerOpsDto()
                obj._deserialize(item)
                self._Listeners.append(obj)
        if params.get("EventCases") is not None:
            self._EventCases = []
            for item in params.get("EventCases"):
                obj = EventCaseOpsDto()
                obj._deserialize(item)
                self._EventCases.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FailMessage(AbstractModel):
    """Error Handling Result Information

    """

    def __init__(self):
        r"""
        :param _Key: Unique Data Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type Key: str
        :param _ErrorMessage: Failure Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        """
        self._Key = None
        self._ErrorMessage = None

    @property
    def Key(self):
        """Unique Data Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def ErrorMessage(self):
        """Failure Reason
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._ErrorMessage = params.get("ErrorMessage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FieldConfig(AbstractModel):
    """Field Variable

    """

    def __init__(self):
        r"""
        :param _FieldKey: Field key
Note: This field may return null, indicating that no valid value can be obtained.
        :type FieldKey: str
        :param _FieldValue: Field valueNote: This field may return null, indicating that no valid value can be obtained.
        :type FieldValue: str
        :param _FieldDataType: Field Value Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type FieldDataType: str
        """
        self._FieldKey = None
        self._FieldValue = None
        self._FieldDataType = None

    @property
    def FieldKey(self):
        """Field key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FieldKey

    @FieldKey.setter
    def FieldKey(self, FieldKey):
        self._FieldKey = FieldKey

    @property
    def FieldValue(self):
        """Field valueNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FieldValue

    @FieldValue.setter
    def FieldValue(self, FieldValue):
        self._FieldValue = FieldValue

    @property
    def FieldDataType(self):
        """Field Value Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FieldDataType

    @FieldDataType.setter
    def FieldDataType(self, FieldDataType):
        self._FieldDataType = FieldDataType


    def _deserialize(self, params):
        self._FieldKey = params.get("FieldKey")
        self._FieldValue = params.get("FieldValue")
        self._FieldDataType = params.get("FieldDataType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Filter(AbstractModel):
    """Universal Filter

    """

    def __init__(self):
        r"""
        :param _Name: Filter Field Name
        :type Name: str
        :param _Values: Filter Value List
        :type Values: list of str
        """
        self._Name = None
        self._Values = None

    @property
    def Name(self):
        """Filter Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """Filter Value List
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FilterOptional(AbstractModel):
    """Universal Filter

    """

    def __init__(self):
        r"""
        :param _Name: Filter Field Name
        :type Name: str
        :param _Values: Filter Value List
        :type Values: list of str
        """
        self._Name = None
        self._Values = None

    @property
    def Name(self):
        """Filter Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """Filter Value List
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FindAllFolderRequest(AbstractModel):
    """FindAllFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._ProjectId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FindAllFolderResponse(AbstractModel):
    """FindAllFolder response structure.

    """

    def __init__(self):
        r"""
        :param _FolderList: Folder ListNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderList: list of FolderDsDto
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FolderList = None
        self._RequestId = None

    @property
    def FolderList(self):
        """Folder ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FolderDsDto
        """
        return self._FolderList

    @FolderList.setter
    def FolderList(self, FolderList):
        self._FolderList = FolderList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FolderList") is not None:
            self._FolderList = []
            for item in params.get("FolderList"):
                obj = FolderDsDto()
                obj._deserialize(item)
                self._FolderList.append(obj)
        self._RequestId = params.get("RequestId")


class FolderDsDto(AbstractModel):
    """Folder Attributes

    """

    def __init__(self):
        r"""
        :param _Id: Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _Name: Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _ParentsFolderId: Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentsFolderId: str
        :param _Total: Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
        :type Total: int
        :param _Workflows: Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :type Workflows: list of WorkflowCanvasOpsDto
        :param _TotalFolders: Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalFolders: int
        :param _Folders: Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Folders: list of FolderDsDto
        :param _FindType: Search typeNote: This field may return null, indicating that no valid value can be obtained.
        :type FindType: str
        """
        self._Id = None
        self._CreateTime = None
        self._Name = None
        self._ProjectId = None
        self._UpdateTime = None
        self._ParentsFolderId = None
        self._Total = None
        self._Workflows = None
        self._TotalFolders = None
        self._Folders = None
        self._FindType = None

    @property
    def Id(self):
        """Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Name(self):
        """Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def ParentsFolderId(self):
        """Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId

    @property
    def Total(self):
        """Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Workflows(self):
        """Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of WorkflowCanvasOpsDto
        """
        return self._Workflows

    @Workflows.setter
    def Workflows(self, Workflows):
        self._Workflows = Workflows

    @property
    def TotalFolders(self):
        """Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalFolders

    @TotalFolders.setter
    def TotalFolders(self, TotalFolders):
        self._TotalFolders = TotalFolders

    @property
    def Folders(self):
        """Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FolderDsDto
        """
        return self._Folders

    @Folders.setter
    def Folders(self, Folders):
        self._Folders = Folders

    @property
    def FindType(self):
        """Search typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FindType

    @FindType.setter
    def FindType(self, FindType):
        self._FindType = FindType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._CreateTime = params.get("CreateTime")
        self._Name = params.get("Name")
        self._ProjectId = params.get("ProjectId")
        self._UpdateTime = params.get("UpdateTime")
        self._ParentsFolderId = params.get("ParentsFolderId")
        self._Total = params.get("Total")
        if params.get("Workflows") is not None:
            self._Workflows = []
            for item in params.get("Workflows"):
                obj = WorkflowCanvasOpsDto()
                obj._deserialize(item)
                self._Workflows.append(obj)
        self._TotalFolders = params.get("TotalFolders")
        if params.get("Folders") is not None:
            self._Folders = []
            for item in params.get("Folders"):
                obj = FolderDsDto()
                obj._deserialize(item)
                self._Folders.append(obj)
        self._FindType = params.get("FindType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FolderOpsDto(AbstractModel):
    """Folder Attributes

    """

    def __init__(self):
        r"""
        :param _Id: Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _Name: Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _ParentsFolderId: Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentsFolderId: str
        :param _Total: Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
        :type Total: int
        :param _Workflows: Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :type Workflows: list of WorkflowCanvasOpsDto
        :param _TotalFolders: Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalFolders: int
        :param _FoldersList: Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
        :type FoldersList: str
        :param _FindType: Search typeNote: This field may return null, indicating that no valid value can be obtained.
        :type FindType: str
        """
        self._Id = None
        self._CreateTime = None
        self._Name = None
        self._ProjectId = None
        self._UpdateTime = None
        self._ParentsFolderId = None
        self._Total = None
        self._Workflows = None
        self._TotalFolders = None
        self._FoldersList = None
        self._FindType = None

    @property
    def Id(self):
        """Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Name(self):
        """Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def ParentsFolderId(self):
        """Parent Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId

    @property
    def Total(self):
        """Total Workflows
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Workflows(self):
        """Workflow ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of WorkflowCanvasOpsDto
        """
        return self._Workflows

    @Workflows.setter
    def Workflows(self, Workflows):
        self._Workflows = Workflows

    @property
    def TotalFolders(self):
        """Total Subfolders
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalFolders

    @TotalFolders.setter
    def TotalFolders(self, TotalFolders):
        self._TotalFolders = TotalFolders

    @property
    def FoldersList(self):
        """Subfolder List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FoldersList

    @FoldersList.setter
    def FoldersList(self, FoldersList):
        self._FoldersList = FoldersList

    @property
    def FindType(self):
        """Search typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FindType

    @FindType.setter
    def FindType(self, FindType):
        self._FindType = FindType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._CreateTime = params.get("CreateTime")
        self._Name = params.get("Name")
        self._ProjectId = params.get("ProjectId")
        self._UpdateTime = params.get("UpdateTime")
        self._ParentsFolderId = params.get("ParentsFolderId")
        self._Total = params.get("Total")
        if params.get("Workflows") is not None:
            self._Workflows = []
            for item in params.get("Workflows"):
                obj = WorkflowCanvasOpsDto()
                obj._deserialize(item)
                self._Workflows.append(obj)
        self._TotalFolders = params.get("TotalFolders")
        self._FoldersList = params.get("FoldersList")
        self._FindType = params.get("FindType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FreezeOpsTasksRequest(AbstractModel):
    """FreezeOpsTasks request structure.

    """

    def __init__(self):
        r"""
        :param _Tasks: Task List
        :type Tasks: list of SimpleTaskInfo
        :param _OperateIsInform: Whether Task Operation Notifies Downstream Task Owners
        :type OperateIsInform: bool
        :param _KillInstance: Whether to terminate the generated instance
        :type KillInstance: bool
        """
        self._Tasks = None
        self._OperateIsInform = None
        self._KillInstance = None

    @property
    def Tasks(self):
        """Task List
        :rtype: list of SimpleTaskInfo
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def OperateIsInform(self):
        """Whether Task Operation Notifies Downstream Task Owners
        :rtype: bool
        """
        return self._OperateIsInform

    @OperateIsInform.setter
    def OperateIsInform(self, OperateIsInform):
        self._OperateIsInform = OperateIsInform

    @property
    def KillInstance(self):
        """Whether to terminate the generated instance
        :rtype: bool
        """
        return self._KillInstance

    @KillInstance.setter
    def KillInstance(self, KillInstance):
        self._KillInstance = KillInstance


    def _deserialize(self, params):
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = SimpleTaskInfo()
                obj._deserialize(item)
                self._Tasks.append(obj)
        self._OperateIsInform = params.get("OperateIsInform")
        self._KillInstance = params.get("KillInstance")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FreezeOpsTasksResponse(AbstractModel):
    """FreezeOpsTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class FreezeTasksByWorkflowIdsRequest(AbstractModel):
    """FreezeTasksByWorkflowIds request structure.

    """

    def __init__(self):
        r"""
        :param _WorkflowIds: Workflow ID List
        :type WorkflowIds: list of str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _KillInstance: Whether to terminate the generated instance
        :type KillInstance: bool
        """
        self._WorkflowIds = None
        self._ProjectId = None
        self._KillInstance = None

    @property
    def WorkflowIds(self):
        """Workflow ID List
        :rtype: list of str
        """
        return self._WorkflowIds

    @WorkflowIds.setter
    def WorkflowIds(self, WorkflowIds):
        self._WorkflowIds = WorkflowIds

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def KillInstance(self):
        """Whether to terminate the generated instance
        :rtype: bool
        """
        return self._KillInstance

    @KillInstance.setter
    def KillInstance(self, KillInstance):
        self._KillInstance = KillInstance


    def _deserialize(self, params):
        self._WorkflowIds = params.get("WorkflowIds")
        self._ProjectId = params.get("ProjectId")
        self._KillInstance = params.get("KillInstance")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FreezeTasksByWorkflowIdsResponse(AbstractModel):
    """FreezeTasksByWorkflowIds response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class FunctionResource(AbstractModel):
    """Function Resource Information

    """

    def __init__(self):
        r"""
        :param _Path: Resource PathNote: This field may return null, indicating that no valid value can be obtained.
        :type Path: str
        :param _Name: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Id: Resource Unique Identifier
        :type Id: str
        :param _Md5: Resource MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Md5: str
        :param _Type: Default is HDFS
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        """
        self._Path = None
        self._Name = None
        self._Id = None
        self._Md5 = None
        self._Type = None

    @property
    def Path(self):
        """Resource PathNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Name(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Id(self):
        """Resource Unique Identifier
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Md5(self):
        """Resource MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def Type(self):
        """Default is HDFS
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Path = params.get("Path")
        self._Name = params.get("Name")
        self._Id = params.get("Id")
        self._Md5 = params.get("Md5")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FunctionTypeOrKind(AbstractModel):
    """Function Type or Function Classification

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _ZhName: Function Classification English Name
        :type ZhName: str
        :param _EnName: Function Classification Chinese Name
        :type EnName: str
        """
        self._Name = None
        self._ZhName = None
        self._EnName = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ZhName(self):
        """Function Classification English Name
        :rtype: str
        """
        return self._ZhName

    @ZhName.setter
    def ZhName(self, ZhName):
        self._ZhName = ZhName

    @property
    def EnName(self):
        """Function Classification Chinese Name
        :rtype: str
        """
        return self._EnName

    @EnName.setter
    def EnName(self, EnName):
        self._EnName = EnName


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ZhName = params.get("ZhName")
        self._EnName = params.get("EnName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FunctionVersion(AbstractModel):
    """Function Submission Version Information

    """

    def __init__(self):
        r"""
        :param _Tag: Version number: V0 V1 V2
        :type Tag: str
        :param _UserId: Submitter ID
        :type UserId: str
        :param _Type: Change Type: ADD, MODIFY
        :type Type: str
        :param _Comment: Remarks
        :type Comment: str
        :param _Timestamp: Submission Time: UTC Seconds
        :type Timestamp: str
        :param _UserName: Submitter Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserName: str
        :param _Content: Version Information: json string format
Note: This field may return null, indicating that no valid value can be obtained.
        :type Content: str
        """
        self._Tag = None
        self._UserId = None
        self._Type = None
        self._Comment = None
        self._Timestamp = None
        self._UserName = None
        self._Content = None

    @property
    def Tag(self):
        """Version number: V0 V1 V2
        :rtype: str
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def UserId(self):
        """Submitter ID
        :rtype: str
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def Type(self):
        """Change Type: ADD, MODIFY
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Comment(self):
        """Remarks
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment

    @property
    def Timestamp(self):
        """Submission Time: UTC Seconds
        :rtype: str
        """
        return self._Timestamp

    @Timestamp.setter
    def Timestamp(self, Timestamp):
        self._Timestamp = Timestamp

    @property
    def UserName(self):
        """Submitter Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def Content(self):
        """Version Information: json string format
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content


    def _deserialize(self, params):
        self._Tag = params.get("Tag")
        self._UserId = params.get("UserId")
        self._Type = params.get("Type")
        self._Comment = params.get("Comment")
        self._Timestamp = params.get("Timestamp")
        self._UserName = params.get("UserName")
        self._Content = params.get("Content")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GenHiveTableDDLSqlRequest(AbstractModel):
    """GenHiveTableDDLSql request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _SinkDatabase: Target Database
        :type SinkDatabase: str
        :param _Id: Node ID
        :type Id: str
        :param _MsType: Metadata Type (MYSQL,ORACLE)
        :type MsType: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: str
        :param _SourceDatabase: Source Library Name
        :type SourceDatabase: str
        :param _TableName: Source Table Name
        :type TableName: str
        :param _SinkType: Target Table Metadata Type (HIVE,GBASE)
        :type SinkType: str
        :param _SchemaName: Source Schema Name
        :type SchemaName: str
        :param _SourceFieldInfoList: Field Information of Upstream Node
        :type SourceFieldInfoList: list of SourceFieldInfo
        :param _Partitions: Partition Field
        :type Partitions: list of Partition
        :param _Properties: Table Creation Attributes
        :type Properties: list of Property
        :param _TableMode: Table Creation Mode,0: Wizard Mode,1: ddl
        :type TableMode: int
        :param _TableVersion: DLC Table Version, v1/v2
        :type TableVersion: str
        :param _UpsertFlag: Whether to Upsert Writes
        :type UpsertFlag: bool
        :param _TableComment: Table Description Information
        :type TableComment: str
        :param _AddDataFiles: Threshold for Increased Number of Files, Exceeding Value Will Trigger Small File Merge
        :type AddDataFiles: int
        :param _AddEqualityDeletes: Threshold for Increased Number of Equality Deletes, Exceeding Value Will Trigger Small File Merge
        :type AddEqualityDeletes: int
        :param _AddPositionDeletes: Threshold for Increased Number of Position Deletes, Exceeding Value Will Trigger Small File Merge
        :type AddPositionDeletes: int
        :param _AddDeleteFiles: Threshold for Increased Number of Delete Files
        :type AddDeleteFiles: int
        :param _TargetDatasourceId: Downstream Node Data Source ID
        :type TargetDatasourceId: str
        :param _UpsertKeys: DLC Upsert Primary Key
        :type UpsertKeys: list of str
        :param _TableBaseInfo: DLC Table Governance Information
        :type TableBaseInfo: :class:`tencentcloud.wedata.v20210820.models.TableBaseInfo`
        :param _SinkSchemaName: Target Schema Name
        :type SinkSchemaName: str
        """
        self._ProjectId = None
        self._SinkDatabase = None
        self._Id = None
        self._MsType = None
        self._DatasourceId = None
        self._SourceDatabase = None
        self._TableName = None
        self._SinkType = None
        self._SchemaName = None
        self._SourceFieldInfoList = None
        self._Partitions = None
        self._Properties = None
        self._TableMode = None
        self._TableVersion = None
        self._UpsertFlag = None
        self._TableComment = None
        self._AddDataFiles = None
        self._AddEqualityDeletes = None
        self._AddPositionDeletes = None
        self._AddDeleteFiles = None
        self._TargetDatasourceId = None
        self._UpsertKeys = None
        self._TableBaseInfo = None
        self._SinkSchemaName = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def SinkDatabase(self):
        """Target Database
        :rtype: str
        """
        return self._SinkDatabase

    @SinkDatabase.setter
    def SinkDatabase(self, SinkDatabase):
        self._SinkDatabase = SinkDatabase

    @property
    def Id(self):
        """Node ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MsType(self):
        """Metadata Type (MYSQL,ORACLE)
        :rtype: str
        """
        return self._MsType

    @MsType.setter
    def MsType(self, MsType):
        self._MsType = MsType

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def SourceDatabase(self):
        """Source Library Name
        :rtype: str
        """
        return self._SourceDatabase

    @SourceDatabase.setter
    def SourceDatabase(self, SourceDatabase):
        self._SourceDatabase = SourceDatabase

    @property
    def TableName(self):
        """Source Table Name
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def SinkType(self):
        """Target Table Metadata Type (HIVE,GBASE)
        :rtype: str
        """
        return self._SinkType

    @SinkType.setter
    def SinkType(self, SinkType):
        self._SinkType = SinkType

    @property
    def SchemaName(self):
        """Source Schema Name
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName

    @property
    def SourceFieldInfoList(self):
        """Field Information of Upstream Node
        :rtype: list of SourceFieldInfo
        """
        return self._SourceFieldInfoList

    @SourceFieldInfoList.setter
    def SourceFieldInfoList(self, SourceFieldInfoList):
        self._SourceFieldInfoList = SourceFieldInfoList

    @property
    def Partitions(self):
        """Partition Field
        :rtype: list of Partition
        """
        return self._Partitions

    @Partitions.setter
    def Partitions(self, Partitions):
        self._Partitions = Partitions

    @property
    def Properties(self):
        """Table Creation Attributes
        :rtype: list of Property
        """
        return self._Properties

    @Properties.setter
    def Properties(self, Properties):
        self._Properties = Properties

    @property
    def TableMode(self):
        """Table Creation Mode,0: Wizard Mode,1: ddl
        :rtype: int
        """
        return self._TableMode

    @TableMode.setter
    def TableMode(self, TableMode):
        self._TableMode = TableMode

    @property
    def TableVersion(self):
        """DLC Table Version, v1/v2
        :rtype: str
        """
        return self._TableVersion

    @TableVersion.setter
    def TableVersion(self, TableVersion):
        self._TableVersion = TableVersion

    @property
    def UpsertFlag(self):
        """Whether to Upsert Writes
        :rtype: bool
        """
        return self._UpsertFlag

    @UpsertFlag.setter
    def UpsertFlag(self, UpsertFlag):
        self._UpsertFlag = UpsertFlag

    @property
    def TableComment(self):
        """Table Description Information
        :rtype: str
        """
        return self._TableComment

    @TableComment.setter
    def TableComment(self, TableComment):
        self._TableComment = TableComment

    @property
    def AddDataFiles(self):
        """Threshold for Increased Number of Files, Exceeding Value Will Trigger Small File Merge
        :rtype: int
        """
        return self._AddDataFiles

    @AddDataFiles.setter
    def AddDataFiles(self, AddDataFiles):
        self._AddDataFiles = AddDataFiles

    @property
    def AddEqualityDeletes(self):
        """Threshold for Increased Number of Equality Deletes, Exceeding Value Will Trigger Small File Merge
        :rtype: int
        """
        return self._AddEqualityDeletes

    @AddEqualityDeletes.setter
    def AddEqualityDeletes(self, AddEqualityDeletes):
        self._AddEqualityDeletes = AddEqualityDeletes

    @property
    def AddPositionDeletes(self):
        """Threshold for Increased Number of Position Deletes, Exceeding Value Will Trigger Small File Merge
        :rtype: int
        """
        return self._AddPositionDeletes

    @AddPositionDeletes.setter
    def AddPositionDeletes(self, AddPositionDeletes):
        self._AddPositionDeletes = AddPositionDeletes

    @property
    def AddDeleteFiles(self):
        """Threshold for Increased Number of Delete Files
        :rtype: int
        """
        return self._AddDeleteFiles

    @AddDeleteFiles.setter
    def AddDeleteFiles(self, AddDeleteFiles):
        self._AddDeleteFiles = AddDeleteFiles

    @property
    def TargetDatasourceId(self):
        """Downstream Node Data Source ID
        :rtype: str
        """
        return self._TargetDatasourceId

    @TargetDatasourceId.setter
    def TargetDatasourceId(self, TargetDatasourceId):
        self._TargetDatasourceId = TargetDatasourceId

    @property
    def UpsertKeys(self):
        """DLC Upsert Primary Key
        :rtype: list of str
        """
        return self._UpsertKeys

    @UpsertKeys.setter
    def UpsertKeys(self, UpsertKeys):
        self._UpsertKeys = UpsertKeys

    @property
    def TableBaseInfo(self):
        """DLC Table Governance Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableBaseInfo`
        """
        return self._TableBaseInfo

    @TableBaseInfo.setter
    def TableBaseInfo(self, TableBaseInfo):
        self._TableBaseInfo = TableBaseInfo

    @property
    def SinkSchemaName(self):
        """Target Schema Name
        :rtype: str
        """
        return self._SinkSchemaName

    @SinkSchemaName.setter
    def SinkSchemaName(self, SinkSchemaName):
        self._SinkSchemaName = SinkSchemaName


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._SinkDatabase = params.get("SinkDatabase")
        self._Id = params.get("Id")
        self._MsType = params.get("MsType")
        self._DatasourceId = params.get("DatasourceId")
        self._SourceDatabase = params.get("SourceDatabase")
        self._TableName = params.get("TableName")
        self._SinkType = params.get("SinkType")
        self._SchemaName = params.get("SchemaName")
        if params.get("SourceFieldInfoList") is not None:
            self._SourceFieldInfoList = []
            for item in params.get("SourceFieldInfoList"):
                obj = SourceFieldInfo()
                obj._deserialize(item)
                self._SourceFieldInfoList.append(obj)
        if params.get("Partitions") is not None:
            self._Partitions = []
            for item in params.get("Partitions"):
                obj = Partition()
                obj._deserialize(item)
                self._Partitions.append(obj)
        if params.get("Properties") is not None:
            self._Properties = []
            for item in params.get("Properties"):
                obj = Property()
                obj._deserialize(item)
                self._Properties.append(obj)
        self._TableMode = params.get("TableMode")
        self._TableVersion = params.get("TableVersion")
        self._UpsertFlag = params.get("UpsertFlag")
        self._TableComment = params.get("TableComment")
        self._AddDataFiles = params.get("AddDataFiles")
        self._AddEqualityDeletes = params.get("AddEqualityDeletes")
        self._AddPositionDeletes = params.get("AddPositionDeletes")
        self._AddDeleteFiles = params.get("AddDeleteFiles")
        self._TargetDatasourceId = params.get("TargetDatasourceId")
        self._UpsertKeys = params.get("UpsertKeys")
        if params.get("TableBaseInfo") is not None:
            self._TableBaseInfo = TableBaseInfo()
            self._TableBaseInfo._deserialize(params.get("TableBaseInfo"))
        self._SinkSchemaName = params.get("SinkSchemaName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GenHiveTableDDLSqlResponse(AbstractModel):
    """GenHiveTableDDLSql response structure.

    """

    def __init__(self):
        r"""
        :param _DDLSql: Generated DDL Statement
        :type DDLSql: str
        :param _Data: Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DDLSql = None
        self._Data = None
        self._RequestId = None

    @property
    def DDLSql(self):
        """Generated DDL Statement
        :rtype: str
        """
        return self._DDLSql

    @DDLSql.setter
    def DDLSql(self, DDLSql):
        self._DDLSql = DDLSql

    @property
    def Data(self):
        """Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DDLSql = params.get("DDLSql")
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class GeneralTaskParam(AbstractModel):
    """Spark SQL Configuration Parameters

    """

    def __init__(self):
        r"""
        :param _Type: Common Task Parameter Type, for example: SPARK_SQL
        :type Type: str
        :param _Value: Common Task Parameter Content, parameters that directly apply to the task. Separate different parameters with;
Split
        :type Value: str
        """
        self._Type = None
        self._Value = None

    @property
    def Type(self):
        """Common Task Parameter Type, for example: SPARK_SQL
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Value(self):
        """Common Task Parameter Content, parameters that directly apply to the task. Separate different parameters with;
Split
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetFileInfoRequest(AbstractModel):
    """GetFileInfo request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FilePath: File pathProject Area 1470575647377821696 project, in directory f1: /datastudio/project/1470575647377821696/f1/sql1234.sql Personal Area: /datastudio/personal/sqlTTT.sql
        :type FilePath: str
        """
        self._ProjectId = None
        self._FilePath = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FilePath(self):
        """File pathProject Area 1470575647377821696 project, in directory f1: /datastudio/project/1470575647377821696/f1/sql1234.sql Personal Area: /datastudio/personal/sqlTTT.sql
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FilePath = params.get("FilePath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetFileInfoResponse(AbstractModel):
    """GetFileInfo response structure.

    """

    def __init__(self):
        r"""
        :param _UserFileInfo: Current Script Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserFileInfo: :class:`tencentcloud.wedata.v20210820.models.UserFileInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UserFileInfo = None
        self._RequestId = None

    @property
    def UserFileInfo(self):
        """Current Script Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.UserFileInfo`
        """
        return self._UserFileInfo

    @UserFileInfo.setter
    def UserFileInfo(self, UserFileInfo):
        self._UserFileInfo = UserFileInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("UserFileInfo") is not None:
            self._UserFileInfo = UserFileInfo()
            self._UserFileInfo._deserialize(params.get("UserFileInfo"))
        self._RequestId = params.get("RequestId")


class GetIntegrationNodeColumnSchemaRequest(AbstractModel):
    """GetIntegrationNodeColumnSchema request structure.

    """

    def __init__(self):
        r"""
        :param _ColumnContent: Field Example (JSON Format)
        :type ColumnContent: str
        :param _DatasourceType: Data Source Type MYSQL|HIVE|KAFKA|ES|MONGODB|REST_API|SYBASE|TIDB|DORIS|DM|
        :type DatasourceType: str
        """
        self._ColumnContent = None
        self._DatasourceType = None

    @property
    def ColumnContent(self):
        """Field Example (JSON Format)
        :rtype: str
        """
        return self._ColumnContent

    @ColumnContent.setter
    def ColumnContent(self, ColumnContent):
        self._ColumnContent = ColumnContent

    @property
    def DatasourceType(self):
        """Data Source Type MYSQL|HIVE|KAFKA|ES|MONGODB|REST_API|SYBASE|TIDB|DORIS|DM|
        :rtype: str
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType


    def _deserialize(self, params):
        self._ColumnContent = params.get("ColumnContent")
        self._DatasourceType = params.get("DatasourceType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetIntegrationNodeColumnSchemaResponse(AbstractModel):
    """GetIntegrationNodeColumnSchema response structure.

    """

    def __init__(self):
        r"""
        :param _Schemas: Field List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Schemas: list of IntegrationNodeSchema
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Schemas = None
        self._RequestId = None

    @property
    def Schemas(self):
        """Field List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeSchema
        """
        return self._Schemas

    @Schemas.setter
    def Schemas(self, Schemas):
        self._Schemas = Schemas

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Schemas") is not None:
            self._Schemas = []
            for item in params.get("Schemas"):
                obj = IntegrationNodeSchema()
                obj._deserialize(item)
                self._Schemas.append(obj)
        self._RequestId = params.get("RequestId")


class GetOfflineDIInstanceListRequest(AbstractModel):
    """GetOfflineDIInstanceList request structure.

    """

    def __init__(self):
        r"""
        :param _PageIndex: Which Page
        :type PageIndex: int
        :param _PageSize: Number of Items per Page
        :type PageSize: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _SearchCondition: No
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.SearchConditionNew`
        """
        self._PageIndex = None
        self._PageSize = None
        self._ProjectId = None
        self._SearchCondition = None

    @property
    def PageIndex(self):
        """Which Page
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Number of Items per Page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def SearchCondition(self):
        """No
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SearchConditionNew`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition


    def _deserialize(self, params):
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._ProjectId = params.get("ProjectId")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = SearchConditionNew()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetOfflineDIInstanceListResponse(AbstractModel):
    """GetOfflineDIInstanceList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of items
        :type Total: int
        :param _List: Instance details
        :type List: list of OfflineInstance
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._List = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of items
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def List(self):
        """Instance details
        :rtype: list of OfflineInstance
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = OfflineInstance()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class GetOfflineInstanceListRequest(AbstractModel):
    """GetOfflineInstanceList request structure.

    """

    def __init__(self):
        r"""
        :param _PageIndex: Which Page
        :type PageIndex: str
        :param _PageSize: Number of Items per Page
        :type PageSize: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _SearchCondition: No
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.SearchCondition`
        """
        self._PageIndex = None
        self._PageSize = None
        self._ProjectId = None
        self._SearchCondition = None

    @property
    def PageIndex(self):
        """Which Page
        :rtype: str
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Number of Items per Page
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def SearchCondition(self):
        """No
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SearchCondition`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition


    def _deserialize(self, params):
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._ProjectId = params.get("ProjectId")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = SearchCondition()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetOfflineInstanceListResponse(AbstractModel):
    """GetOfflineInstanceList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of items
        :type Total: int
        :param _List: Instance details
        :type List: list of OfflineInstance
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._List = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of items
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def List(self):
        """Instance details
        :rtype: list of OfflineInstance
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = OfflineInstance()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class InstanceApiOpsRequest(AbstractModel):
    """Instance Query Type

    """

    def __init__(self):
        r"""
        :param _Instance: Single Query Condition
        :type Instance: :class:`tencentcloud.wedata.v20210820.models.InstanceOpsDto`
        :param _SortCol: Sort fields, currently includes: Retry Count, Instance Data Time, Runtime Duration
        :type SortCol: str
        :param _TaskIdList: Task ID list
        :type TaskIdList: list of str
        :param _TaskNameList: Fuzzy search by taskName
        :type TaskNameList: list of str
        :param _FolderList: Folder List
        :type FolderList: list of str
        :param _Sort: Ascending or Descending
        :type Sort: str
        :param _StateList: Instance Status List
        :type StateList: list of int
        :param _TaskTypeList: Instance Type List
        :type TaskTypeList: list of int
        :param _CycleList: Cycle Type
        :type CycleList: list of str
        :param _OwnerList: Person in Charge
        :type OwnerList: list of str
        :param _DateFrom: Data Timestamp
        :type DateFrom: str
        :param _DateTo: Data Timestamp
        :type DateTo: str
        :param _CreateTimeFrom: Instance Storage Time
        :type CreateTimeFrom: str
        :param _CreateTimeTo: Instance Storage Time
        :type CreateTimeTo: str
        :param _StartFrom: Start Execution Time
        :type StartFrom: str
        :param _StartTo: Start Execution Time
        :type StartTo: str
        :param _WorkflowIdList: Belongs to Workflow
        :type WorkflowIdList: list of str
        :param _WorkflowNameList: Fuzzy search by workflowName
        :type WorkflowNameList: list of str
        :param _Keyword: Keyword Fuzzy Search
        :type Keyword: str
        :param _SearchColumns: searchColumns are the list of field names to search
        :type SearchColumns: list of str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Limit: Limit
        :type Limit: int
        :param _TaskTypeMap: Task Type Mapping Relationship, storing Task Type ID and Task Type Description Information
        :type TaskTypeMap: list of TaskTypeMap
        :param _InstanceType: 0 Supplementary Entry Type 1 Periodic Instance 2 Non-periodic Instance
        :type InstanceType: str
        :param _DagDeal: Whether it is DAG
        :type DagDeal: bool
        :param _DagType: 1 Parent instance 2 Child instance
        :type DagType: str
        :param _DagDependent: 1 Self-Dependency 2 Task Dependency 3 All Dependencies
        :type DagDependent: str
        :param _DagDepth: DAG Depth Default to 1, value range 1-6
        :type DagDepth: int
        :param _TenantId: Tenant ID
        :type TenantId: str
        :param _DataTimeCycle: Inquiry based on Current Data Time or Next Data Time, default to Current Data Time
        :type DataTimeCycle: str
        :param _ExecutorGroupIdList: Resource Group ID, multiple Resource Group IDs separated by English commas
        :type ExecutorGroupIdList: list of str
        """
        self._Instance = None
        self._SortCol = None
        self._TaskIdList = None
        self._TaskNameList = None
        self._FolderList = None
        self._Sort = None
        self._StateList = None
        self._TaskTypeList = None
        self._CycleList = None
        self._OwnerList = None
        self._DateFrom = None
        self._DateTo = None
        self._CreateTimeFrom = None
        self._CreateTimeTo = None
        self._StartFrom = None
        self._StartTo = None
        self._WorkflowIdList = None
        self._WorkflowNameList = None
        self._Keyword = None
        self._SearchColumns = None
        self._ProjectId = None
        self._Limit = None
        self._TaskTypeMap = None
        self._InstanceType = None
        self._DagDeal = None
        self._DagType = None
        self._DagDependent = None
        self._DagDepth = None
        self._TenantId = None
        self._DataTimeCycle = None
        self._ExecutorGroupIdList = None

    @property
    def Instance(self):
        """Single Query Condition
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceOpsDto`
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def SortCol(self):
        """Sort fields, currently includes: Retry Count, Instance Data Time, Runtime Duration
        :rtype: str
        """
        return self._SortCol

    @SortCol.setter
    def SortCol(self, SortCol):
        self._SortCol = SortCol

    @property
    def TaskIdList(self):
        """Task ID list
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def TaskNameList(self):
        """Fuzzy search by taskName
        :rtype: list of str
        """
        return self._TaskNameList

    @TaskNameList.setter
    def TaskNameList(self, TaskNameList):
        self._TaskNameList = TaskNameList

    @property
    def FolderList(self):
        """Folder List
        :rtype: list of str
        """
        return self._FolderList

    @FolderList.setter
    def FolderList(self, FolderList):
        self._FolderList = FolderList

    @property
    def Sort(self):
        """Ascending or Descending
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def StateList(self):
        """Instance Status List
        :rtype: list of int
        """
        return self._StateList

    @StateList.setter
    def StateList(self, StateList):
        self._StateList = StateList

    @property
    def TaskTypeList(self):
        """Instance Type List
        :rtype: list of int
        """
        return self._TaskTypeList

    @TaskTypeList.setter
    def TaskTypeList(self, TaskTypeList):
        self._TaskTypeList = TaskTypeList

    @property
    def CycleList(self):
        """Cycle Type
        :rtype: list of str
        """
        return self._CycleList

    @CycleList.setter
    def CycleList(self, CycleList):
        self._CycleList = CycleList

    @property
    def OwnerList(self):
        """Person in Charge
        :rtype: list of str
        """
        return self._OwnerList

    @OwnerList.setter
    def OwnerList(self, OwnerList):
        self._OwnerList = OwnerList

    @property
    def DateFrom(self):
        """Data Timestamp
        :rtype: str
        """
        return self._DateFrom

    @DateFrom.setter
    def DateFrom(self, DateFrom):
        self._DateFrom = DateFrom

    @property
    def DateTo(self):
        """Data Timestamp
        :rtype: str
        """
        return self._DateTo

    @DateTo.setter
    def DateTo(self, DateTo):
        self._DateTo = DateTo

    @property
    def CreateTimeFrom(self):
        """Instance Storage Time
        :rtype: str
        """
        return self._CreateTimeFrom

    @CreateTimeFrom.setter
    def CreateTimeFrom(self, CreateTimeFrom):
        self._CreateTimeFrom = CreateTimeFrom

    @property
    def CreateTimeTo(self):
        """Instance Storage Time
        :rtype: str
        """
        return self._CreateTimeTo

    @CreateTimeTo.setter
    def CreateTimeTo(self, CreateTimeTo):
        self._CreateTimeTo = CreateTimeTo

    @property
    def StartFrom(self):
        """Start Execution Time
        :rtype: str
        """
        return self._StartFrom

    @StartFrom.setter
    def StartFrom(self, StartFrom):
        self._StartFrom = StartFrom

    @property
    def StartTo(self):
        """Start Execution Time
        :rtype: str
        """
        return self._StartTo

    @StartTo.setter
    def StartTo(self, StartTo):
        self._StartTo = StartTo

    @property
    def WorkflowIdList(self):
        """Belongs to Workflow
        :rtype: list of str
        """
        return self._WorkflowIdList

    @WorkflowIdList.setter
    def WorkflowIdList(self, WorkflowIdList):
        self._WorkflowIdList = WorkflowIdList

    @property
    def WorkflowNameList(self):
        """Fuzzy search by workflowName
        :rtype: list of str
        """
        return self._WorkflowNameList

    @WorkflowNameList.setter
    def WorkflowNameList(self, WorkflowNameList):
        self._WorkflowNameList = WorkflowNameList

    @property
    def Keyword(self):
        """Keyword Fuzzy Search
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def SearchColumns(self):
        """searchColumns are the list of field names to search
        :rtype: list of str
        """
        return self._SearchColumns

    @SearchColumns.setter
    def SearchColumns(self, SearchColumns):
        self._SearchColumns = SearchColumns

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Limit(self):
        """Limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TaskTypeMap(self):
        """Task Type Mapping Relationship, storing Task Type ID and Task Type Description Information
        :rtype: list of TaskTypeMap
        """
        return self._TaskTypeMap

    @TaskTypeMap.setter
    def TaskTypeMap(self, TaskTypeMap):
        self._TaskTypeMap = TaskTypeMap

    @property
    def InstanceType(self):
        """0 Supplementary Entry Type 1 Periodic Instance 2 Non-periodic Instance
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def DagDeal(self):
        """Whether it is DAG
        :rtype: bool
        """
        return self._DagDeal

    @DagDeal.setter
    def DagDeal(self, DagDeal):
        self._DagDeal = DagDeal

    @property
    def DagType(self):
        """1 Parent instance 2 Child instance
        :rtype: str
        """
        return self._DagType

    @DagType.setter
    def DagType(self, DagType):
        self._DagType = DagType

    @property
    def DagDependent(self):
        """1 Self-Dependency 2 Task Dependency 3 All Dependencies
        :rtype: str
        """
        return self._DagDependent

    @DagDependent.setter
    def DagDependent(self, DagDependent):
        self._DagDependent = DagDependent

    @property
    def DagDepth(self):
        """DAG Depth Default to 1, value range 1-6
        :rtype: int
        """
        return self._DagDepth

    @DagDepth.setter
    def DagDepth(self, DagDepth):
        self._DagDepth = DagDepth

    @property
    def TenantId(self):
        """Tenant ID
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def DataTimeCycle(self):
        """Inquiry based on Current Data Time or Next Data Time, default to Current Data Time
        :rtype: str
        """
        return self._DataTimeCycle

    @DataTimeCycle.setter
    def DataTimeCycle(self, DataTimeCycle):
        self._DataTimeCycle = DataTimeCycle

    @property
    def ExecutorGroupIdList(self):
        """Resource Group ID, multiple Resource Group IDs separated by English commas
        :rtype: list of str
        """
        return self._ExecutorGroupIdList

    @ExecutorGroupIdList.setter
    def ExecutorGroupIdList(self, ExecutorGroupIdList):
        self._ExecutorGroupIdList = ExecutorGroupIdList


    def _deserialize(self, params):
        if params.get("Instance") is not None:
            self._Instance = InstanceOpsDto()
            self._Instance._deserialize(params.get("Instance"))
        self._SortCol = params.get("SortCol")
        self._TaskIdList = params.get("TaskIdList")
        self._TaskNameList = params.get("TaskNameList")
        self._FolderList = params.get("FolderList")
        self._Sort = params.get("Sort")
        self._StateList = params.get("StateList")
        self._TaskTypeList = params.get("TaskTypeList")
        self._CycleList = params.get("CycleList")
        self._OwnerList = params.get("OwnerList")
        self._DateFrom = params.get("DateFrom")
        self._DateTo = params.get("DateTo")
        self._CreateTimeFrom = params.get("CreateTimeFrom")
        self._CreateTimeTo = params.get("CreateTimeTo")
        self._StartFrom = params.get("StartFrom")
        self._StartTo = params.get("StartTo")
        self._WorkflowIdList = params.get("WorkflowIdList")
        self._WorkflowNameList = params.get("WorkflowNameList")
        self._Keyword = params.get("Keyword")
        self._SearchColumns = params.get("SearchColumns")
        self._ProjectId = params.get("ProjectId")
        self._Limit = params.get("Limit")
        if params.get("TaskTypeMap") is not None:
            self._TaskTypeMap = []
            for item in params.get("TaskTypeMap"):
                obj = TaskTypeMap()
                obj._deserialize(item)
                self._TaskTypeMap.append(obj)
        self._InstanceType = params.get("InstanceType")
        self._DagDeal = params.get("DagDeal")
        self._DagType = params.get("DagType")
        self._DagDependent = params.get("DagDependent")
        self._DagDepth = params.get("DagDepth")
        self._TenantId = params.get("TenantId")
        self._DataTimeCycle = params.get("DataTimeCycle")
        self._ExecutorGroupIdList = params.get("ExecutorGroupIdList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceCondition(AbstractModel):
    """Instance Retrieval Criteria

    """

    def __init__(self):
        r"""
        :param _ExecutionSpace: Execution Type
        :type ExecutionSpace: str
        :param _ProductName: Task Product Type
        :type ProductName: str
        """
        self._ExecutionSpace = None
        self._ProductName = None

    @property
    def ExecutionSpace(self):
        """Execution Type
        :rtype: str
        """
        return self._ExecutionSpace

    @ExecutionSpace.setter
    def ExecutionSpace(self, ExecutionSpace):
        self._ExecutionSpace = ExecutionSpace

    @property
    def ProductName(self):
        """Task Product Type
        :rtype: str
        """
        return self._ProductName

    @ProductName.setter
    def ProductName(self, ProductName):
        self._ProductName = ProductName


    def _deserialize(self, params):
        self._ExecutionSpace = params.get("ExecutionSpace")
        self._ProductName = params.get("ProductName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceDownloadLogInfo(AbstractModel):
    """Download Log Details

    """

    def __init__(self):
        r"""
        :param _FileName: File NameNote: This field may return null, indicating that no valid value can be obtained.
        :type FileName: str
        :param _FileUrl: File URL
Note: This field may return null, indicating that no valid value can be obtained.
        :type FileUrl: str
        """
        self._FileName = None
        self._FileUrl = None

    @property
    def FileName(self):
        """File NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileUrl(self):
        """File URL
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileUrl

    @FileUrl.setter
    def FileUrl(self, FileUrl):
        self._FileUrl = FileUrl


    def _deserialize(self, params):
        self._FileName = params.get("FileName")
        self._FileUrl = params.get("FileUrl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceLifeCycleOpsDto(AbstractModel):
    """Instance Lifecycle Details

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _LifeRound: Instance Lifecycle Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type LifeRound: int
        :param _RunType: Run Type Rerun/Supplement/Periodic/Non-periodic
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunType: str
        :param _Tries: Number of Reruns
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tries: int
        :param _InstanceLifeDetailDtoList: Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLifeDetailDtoList: list of InstanceLifeDetailDto
        :param _RunnerState: Runner Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunnerState: str
        :param _ErrorDesc: Error codeNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        :param _ErrorCodeLevel: Error Alert Level
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorCodeLevel: str
        :param _InstanceLogListOpsDto: Instance Log Summary
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLogListOpsDto: :class:`tencentcloud.wedata.v20210820.models.InstanceLogInfo`
        :param _InstanceState: Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceState: str
        """
        self._TaskId = None
        self._CurRunDate = None
        self._LifeRound = None
        self._RunType = None
        self._Tries = None
        self._InstanceLifeDetailDtoList = None
        self._RunnerState = None
        self._ErrorDesc = None
        self._ErrorCodeLevel = None
        self._InstanceLogListOpsDto = None
        self._InstanceState = None

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def LifeRound(self):
        """Instance Lifecycle Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LifeRound

    @LifeRound.setter
    def LifeRound(self, LifeRound):
        self._LifeRound = LifeRound

    @property
    def RunType(self):
        """Run Type Rerun/Supplement/Periodic/Non-periodic
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RunType

    @RunType.setter
    def RunType(self, RunType):
        self._RunType = RunType

    @property
    def Tries(self):
        """Number of Reruns
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Tries

    @Tries.setter
    def Tries(self, Tries):
        self._Tries = Tries

    @property
    def InstanceLifeDetailDtoList(self):
        """Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceLifeDetailDto
        """
        return self._InstanceLifeDetailDtoList

    @InstanceLifeDetailDtoList.setter
    def InstanceLifeDetailDtoList(self, InstanceLifeDetailDtoList):
        self._InstanceLifeDetailDtoList = InstanceLifeDetailDtoList

    @property
    def RunnerState(self):
        """Runner Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RunnerState

    @RunnerState.setter
    def RunnerState(self, RunnerState):
        self._RunnerState = RunnerState

    @property
    def ErrorDesc(self):
        """Error codeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc

    @property
    def ErrorCodeLevel(self):
        """Error Alert Level
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorCodeLevel

    @ErrorCodeLevel.setter
    def ErrorCodeLevel(self, ErrorCodeLevel):
        self._ErrorCodeLevel = ErrorCodeLevel

    @property
    def InstanceLogListOpsDto(self):
        """Instance Log Summary
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceLogInfo`
        """
        return self._InstanceLogListOpsDto

    @InstanceLogListOpsDto.setter
    def InstanceLogListOpsDto(self, InstanceLogListOpsDto):
        self._InstanceLogListOpsDto = InstanceLogListOpsDto

    @property
    def InstanceState(self):
        """Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceState

    @InstanceState.setter
    def InstanceState(self, InstanceState):
        self._InstanceState = InstanceState


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._LifeRound = params.get("LifeRound")
        self._RunType = params.get("RunType")
        self._Tries = params.get("Tries")
        if params.get("InstanceLifeDetailDtoList") is not None:
            self._InstanceLifeDetailDtoList = []
            for item in params.get("InstanceLifeDetailDtoList"):
                obj = InstanceLifeDetailDto()
                obj._deserialize(item)
                self._InstanceLifeDetailDtoList.append(obj)
        self._RunnerState = params.get("RunnerState")
        self._ErrorDesc = params.get("ErrorDesc")
        self._ErrorCodeLevel = params.get("ErrorCodeLevel")
        if params.get("InstanceLogListOpsDto") is not None:
            self._InstanceLogListOpsDto = InstanceLogInfo()
            self._InstanceLogListOpsDto._deserialize(params.get("InstanceLogListOpsDto"))
        self._InstanceState = params.get("InstanceState")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceLifeDetailDto(AbstractModel):
    """Instance Lifecycle Detail

    """

    def __init__(self):
        r"""
        :param _State: Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type State: str
        :param _StartTime: Start Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _DetailState: Instance Lifecycle Phase Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type DetailState: str
        :param _EndTime: End Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        """
        self._State = None
        self._StartTime = None
        self._DetailState = None
        self._EndTime = None

    @property
    def State(self):
        """Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def StartTime(self):
        """Start Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def DetailState(self):
        """Instance Lifecycle Phase Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DetailState

    @DetailState.setter
    def DetailState(self, DetailState):
        self._DetailState = DetailState

    @property
    def EndTime(self):
        """End Time of the State
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._State = params.get("State")
        self._StartTime = params.get("StartTime")
        self._DetailState = params.get("DetailState")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceList(AbstractModel):
    """Offline operation and maintenance instance list

    """

    def __init__(self):
        r"""
        :param _CostTime: Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :type CostTime: str
        :param _CurRunDate: Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _CycleType: Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _DoFlag: Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :type DoFlag: int
        :param _InCharge: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _LastLog: LogNote: This field may return null, indicating that no valid value can be obtained.
        :type LastLog: str
        :param _SchedulerDesc: Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerDesc: str
        :param _StartTime: Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _State: Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED| COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
Note: This field may return null, indicating that no valid value can be obtained.
        :type State: str
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _TryLimit: Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
        :type TryLimit: int
        """
        self._CostTime = None
        self._CurRunDate = None
        self._CycleType = None
        self._DoFlag = None
        self._InCharge = None
        self._LastLog = None
        self._SchedulerDesc = None
        self._StartTime = None
        self._State = None
        self._TaskId = None
        self._TaskName = None
        self._TryLimit = None

    @property
    def CostTime(self):
        """Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CostTime

    @CostTime.setter
    def CostTime(self, CostTime):
        self._CostTime = CostTime

    @property
    def CurRunDate(self):
        """Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def CycleType(self):
        """Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def DoFlag(self):
        """Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DoFlag

    @DoFlag.setter
    def DoFlag(self, DoFlag):
        self._DoFlag = DoFlag

    @property
    def InCharge(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def LastLog(self):
        """LogNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastLog

    @LastLog.setter
    def LastLog(self, LastLog):
        self._LastLog = LastLog

    @property
    def SchedulerDesc(self):
        """Scheduling plan
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerDesc

    @SchedulerDesc.setter
    def SchedulerDesc(self, SchedulerDesc):
        self._SchedulerDesc = SchedulerDesc

    @property
    def StartTime(self):
        """Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def State(self):
        """Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED| COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TryLimit(self):
        """Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TryLimit

    @TryLimit.setter
    def TryLimit(self, TryLimit):
        self._TryLimit = TryLimit


    def _deserialize(self, params):
        self._CostTime = params.get("CostTime")
        self._CurRunDate = params.get("CurRunDate")
        self._CycleType = params.get("CycleType")
        self._DoFlag = params.get("DoFlag")
        self._InCharge = params.get("InCharge")
        self._LastLog = params.get("LastLog")
        self._SchedulerDesc = params.get("SchedulerDesc")
        self._StartTime = params.get("StartTime")
        self._State = params.get("State")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._TryLimit = params.get("TryLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceLogInfo(AbstractModel):
    """Instance Log Summary Information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _CurRunDate: Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _Tries: Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tries: str
        :param _LastUpdate: Log Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastUpdate: str
        :param _BrokerIp: Log Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type BrokerIp: str
        :param _FileSize: File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type FileSize: str
        :param _OriginFileName: File Name including Full Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type OriginFileName: str
        :param _CreateTime: Log Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _InstanceLogType: Instance Log Type, run: running; kill: termination
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLogType: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _CostTime: Runtime Duration
Note: This field may return null, indicating that no valid value can be obtained.
        :type CostTime: str
        :param _InstanceStatus: Instance Status COMPLETED completed FAILED failed retry EXPIRED failed RUNNING running
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceStatus: str
        :param _CodeFileName: Instance Code File, absence indicates the corresponding code file does not exist, possibly due to the executor not being upgraded/certain types of tasks having no code.
Note: This field may return null, indicating that no valid value can be obtained.
        :type CodeFileName: str
        :param _ExtensionInfo: Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtensionInfo: list of AttributeItemDTO
        """
        self._TaskId = None
        self._CurRunDate = None
        self._Tries = None
        self._LastUpdate = None
        self._BrokerIp = None
        self._FileSize = None
        self._OriginFileName = None
        self._CreateTime = None
        self._InstanceLogType = None
        self._TaskName = None
        self._CostTime = None
        self._InstanceStatus = None
        self._CodeFileName = None
        self._ExtensionInfo = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def Tries(self):
        """Number of trial runs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Tries

    @Tries.setter
    def Tries(self, Tries):
        self._Tries = Tries

    @property
    def LastUpdate(self):
        """Log Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastUpdate

    @LastUpdate.setter
    def LastUpdate(self, LastUpdate):
        self._LastUpdate = LastUpdate

    @property
    def BrokerIp(self):
        """Log Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def FileSize(self):
        """File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def OriginFileName(self):
        """File Name including Full Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginFileName

    @OriginFileName.setter
    def OriginFileName(self, OriginFileName):
        self._OriginFileName = OriginFileName

    @property
    def CreateTime(self):
        """Log Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def InstanceLogType(self):
        """Instance Log Type, run: running; kill: termination
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceLogType

    @InstanceLogType.setter
    def InstanceLogType(self, InstanceLogType):
        self._InstanceLogType = InstanceLogType

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def CostTime(self):
        """Runtime Duration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CostTime

    @CostTime.setter
    def CostTime(self, CostTime):
        self._CostTime = CostTime

    @property
    def InstanceStatus(self):
        """Instance Status COMPLETED completed FAILED failed retry EXPIRED failed RUNNING running
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceStatus

    @InstanceStatus.setter
    def InstanceStatus(self, InstanceStatus):
        self._InstanceStatus = InstanceStatus

    @property
    def CodeFileName(self):
        """Instance Code File, absence indicates the corresponding code file does not exist, possibly due to the executor not being upgraded/certain types of tasks having no code.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CodeFileName

    @CodeFileName.setter
    def CodeFileName(self, CodeFileName):
        self._CodeFileName = CodeFileName

    @property
    def ExtensionInfo(self):
        """Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of AttributeItemDTO
        """
        return self._ExtensionInfo

    @ExtensionInfo.setter
    def ExtensionInfo(self, ExtensionInfo):
        self._ExtensionInfo = ExtensionInfo


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._Tries = params.get("Tries")
        self._LastUpdate = params.get("LastUpdate")
        self._BrokerIp = params.get("BrokerIp")
        self._FileSize = params.get("FileSize")
        self._OriginFileName = params.get("OriginFileName")
        self._CreateTime = params.get("CreateTime")
        self._InstanceLogType = params.get("InstanceLogType")
        self._TaskName = params.get("TaskName")
        self._CostTime = params.get("CostTime")
        self._InstanceStatus = params.get("InstanceStatus")
        self._CodeFileName = params.get("CodeFileName")
        if params.get("ExtensionInfo") is not None:
            self._ExtensionInfo = []
            for item in params.get("ExtensionInfo"):
                obj = AttributeItemDTO()
                obj._deserialize(item)
                self._ExtensionInfo.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceLogInfoOpsDto(AbstractModel):
    """Instance log information details

    """

    def __init__(self):
        r"""
        :param _LogInfo: Instance running log
Note: This field may return null, indicating that no valid value can be obtained.
        :type LogInfo: str
        :param _YarnLogInfo: The Yarn log address submitted by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
        :type YarnLogInfo: list of str
        :param _DataLogInfo: The datax log generated by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataLogInfo: str
        :param _ThirdTaskRunLogInfo: Third-party Task Execution Log
Note: This field may return null, indicating that no valid value can be obtained.
        :type ThirdTaskRunLogInfo: str
        :param _ThirdTaskLogUrlDesc: Third-party Task Log Link Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ThirdTaskLogUrlDesc: str
        :param _LineCount: Number of Log Lines
Note: This field may return null, indicating that no valid value can be obtained.
        :type LineCount: int
        """
        self._LogInfo = None
        self._YarnLogInfo = None
        self._DataLogInfo = None
        self._ThirdTaskRunLogInfo = None
        self._ThirdTaskLogUrlDesc = None
        self._LineCount = None

    @property
    def LogInfo(self):
        """Instance running log
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LogInfo

    @LogInfo.setter
    def LogInfo(self, LogInfo):
        self._LogInfo = LogInfo

    @property
    def YarnLogInfo(self):
        """The Yarn log address submitted by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._YarnLogInfo

    @YarnLogInfo.setter
    def YarnLogInfo(self, YarnLogInfo):
        self._YarnLogInfo = YarnLogInfo

    @property
    def DataLogInfo(self):
        """The datax log generated by the instance run
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataLogInfo

    @DataLogInfo.setter
    def DataLogInfo(self, DataLogInfo):
        self._DataLogInfo = DataLogInfo

    @property
    def ThirdTaskRunLogInfo(self):
        """Third-party Task Execution Log
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ThirdTaskRunLogInfo

    @ThirdTaskRunLogInfo.setter
    def ThirdTaskRunLogInfo(self, ThirdTaskRunLogInfo):
        self._ThirdTaskRunLogInfo = ThirdTaskRunLogInfo

    @property
    def ThirdTaskLogUrlDesc(self):
        """Third-party Task Log Link Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ThirdTaskLogUrlDesc

    @ThirdTaskLogUrlDesc.setter
    def ThirdTaskLogUrlDesc(self, ThirdTaskLogUrlDesc):
        self._ThirdTaskLogUrlDesc = ThirdTaskLogUrlDesc

    @property
    def LineCount(self):
        """Number of Log Lines
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LineCount

    @LineCount.setter
    def LineCount(self, LineCount):
        self._LineCount = LineCount


    def _deserialize(self, params):
        self._LogInfo = params.get("LogInfo")
        self._YarnLogInfo = params.get("YarnLogInfo")
        self._DataLogInfo = params.get("DataLogInfo")
        self._ThirdTaskRunLogInfo = params.get("ThirdTaskRunLogInfo")
        self._ThirdTaskLogUrlDesc = params.get("ThirdTaskLogUrlDesc")
        self._LineCount = params.get("LineCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceLogList(AbstractModel):
    """Instance log information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _CurRunDate: Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _Tries: Maximum number of retriesNote: This field may return null, indicating that no valid value can be obtained.
        :type Tries: str
        :param _LastUpdate: Last Updated TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type LastUpdate: str
        :param _BrokerIp: Node IP
Note: This field may return null, indicating that no valid value can be obtained.
        :type BrokerIp: str
        :param _FileSize: File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type FileSize: str
        :param _OriginFileName: Original File Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OriginFileName: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _InstanceLogType: Instance Log Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLogType: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _CostTime: Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :type CostTime: str
        """
        self._TaskId = None
        self._CurRunDate = None
        self._Tries = None
        self._LastUpdate = None
        self._BrokerIp = None
        self._FileSize = None
        self._OriginFileName = None
        self._CreateTime = None
        self._InstanceLogType = None
        self._TaskName = None
        self._CostTime = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def Tries(self):
        """Maximum number of retriesNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Tries

    @Tries.setter
    def Tries(self, Tries):
        self._Tries = Tries

    @property
    def LastUpdate(self):
        """Last Updated TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastUpdate

    @LastUpdate.setter
    def LastUpdate(self, LastUpdate):
        self._LastUpdate = LastUpdate

    @property
    def BrokerIp(self):
        """Node IP
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def FileSize(self):
        """File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def OriginFileName(self):
        """Original File Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginFileName

    @OriginFileName.setter
    def OriginFileName(self, OriginFileName):
        self._OriginFileName = OriginFileName

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def InstanceLogType(self):
        """Instance Log Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceLogType

    @InstanceLogType.setter
    def InstanceLogType(self, InstanceLogType):
        self._InstanceLogType = InstanceLogType

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def CostTime(self):
        """Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CostTime

    @CostTime.setter
    def CostTime(self, CostTime):
        self._CostTime = CostTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._Tries = params.get("Tries")
        self._LastUpdate = params.get("LastUpdate")
        self._BrokerIp = params.get("BrokerIp")
        self._FileSize = params.get("FileSize")
        self._OriginFileName = params.get("OriginFileName")
        self._CreateTime = params.get("CreateTime")
        self._InstanceLogType = params.get("InstanceLogType")
        self._TaskName = params.get("TaskName")
        self._CostTime = params.get("CostTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceNodeInfo(AbstractModel):
    """Query the current node information of the real-time task instance

    """

    def __init__(self):
        r"""
        :param _NodeType: Read from node SOURCE Write to node SINK
Note: This field may return null, indicating that no valid value can be obtained.
        :type NodeType: str
        :param _NodeId: Node IDNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeId: str
        :param _NodeName: Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeName: str
        """
        self._NodeType = None
        self._NodeId = None
        self._NodeName = None

    @property
    def NodeType(self):
        """Read from node SOURCE Write to node SINK
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeId(self):
        """Node IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeId

    @NodeId.setter
    def NodeId(self, NodeId):
        self._NodeId = NodeId

    @property
    def NodeName(self):
        """Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName


    def _deserialize(self, params):
        self._NodeType = params.get("NodeType")
        self._NodeId = params.get("NodeId")
        self._NodeName = params.get("NodeName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceOpsDto(AbstractModel):
    """Instance Operation Details

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _WorkflowId: Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _WorkflowName: Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowName: str
        :param _InCharge: Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _CycleType: Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _CurRunDate: Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CurRunDate: str
        :param _NextCurDate: Next Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type NextCurDate: str
        :param _RunPriority: Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunPriority: int
        :param _TryLimit: Number of Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :type TryLimit: int
        :param _Tries: Current Running Times
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tries: int
        :param _TotalRunNum: Total Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalRunNum: int
        :param _DoFlag: Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :type DoFlag: int
        :param _RedoFlag: Whether it is a Retry
Note: This field may return null, indicating that no valid value can be obtained.
        :type RedoFlag: int
        :param _State: Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type State: str
        :param _RuntimeBroker: Run Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuntimeBroker: str
        :param _ErrorDesc: Reason for Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        :param _TaskType: Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskType: :class:`tencentcloud.wedata.v20210820.models.TaskTypeOpsDto`
        :param _DependenceFulfillTime: Dependency Judgment Completion Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependenceFulfillTime: str
        :param _FirstDependenceFulfillTime: First Dependency Judgment Pass Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstDependenceFulfillTime: str
        :param _FirstStartTime: Initial startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstStartTime: str
        :param _StartTime: Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: Operation completion time
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _CostTime: Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :type CostTime: str
        :param _CostMillisecond: Elapsed time (ms)
Note: This field may return null, indicating that no valid value can be obtained.
        :type CostMillisecond: int
        :param _MaxCostTime: Maximum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :type MaxCostTime: int
        :param _MinCostTime: Minimum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :type MinCostTime: int
        :param _AvgCostTime: Average operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :type AvgCostTime: float
        :param _LastLog: Recent logs
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastLog: str
        :param _SchedulerDateTime: Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerDateTime: str
        :param _LastSchedulerDateTime: Last scheduling time
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastSchedulerDateTime: str
        :param _LastUpdate: Last update event
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastUpdate: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _DependencyRel: Branch, Dependency Relationship and,or
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependencyRel: str
        :param _ExecutionSpace: Execution space
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionSpace: str
        :param _IgnoreEvent: Ignore events
Note: This field may return null, indicating that no valid value can be obtained.
        :type IgnoreEvent: bool
        :param _VirtualFlag: Virtual Task Instance
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualFlag: bool
        :param _FolderId: Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _FolderName: Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderName: str
        :param _SonList: Recursive Instance Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type SonList: str
        :param _ProductName: Product Business Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProductName: str
        :param _ResourceGroup: Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceGroup: str
        :param _ResourceInstanceId: Resource Group Specified Execution Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceInstanceId: str
        :param _YarnQueue: Resource Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :type YarnQueue: str
        :param _SchedulerDesc: Scheduling Plan
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerDesc: str
        :param _FirstSubmitTime: Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstSubmitTime: str
        :param _FirstRunTime: First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstRunTime: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectIdent: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _TenantId: Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TenantId: str
        :param _InstanceKey: Instance Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceKey: str
        :param _ExecutorGroupId: Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupId: str
        :param _ExecutorGroupName: Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupName: str
        :param _RelatedInstanceList: Associated Instance Information.
Note: This field may return null, indicating that no valid value can be obtained.
        :type RelatedInstanceList: list of InstanceOpsDto
        :param _RelatedInstanceSize: Associated Instance Information Quantity, not strongly associated with RelatedInstanceList.
Note: This field may return null, indicating that no valid value can be obtained.
        :type RelatedInstanceSize: int
        :param _OwnerId: ownerId
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerId: str
        :param _UserId: User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: str
        :param _InstanceLifeCycleOpsDto: Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceLifeCycleOpsDto: :class:`tencentcloud.wedata.v20210820.models.InstanceLifeCycleOpsDto`
        :param _RetryAttempts: Automatic Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :type RetryAttempts: int
        :param _DeletedFatherList: Urgently Removed Dependency Parent Instance List
Note: This field may return null, indicating that no valid value can be obtained.
        :type DeletedFatherList: list of str
        :param _CirculateInstanceList: Cyclic Dependency Associated Instances
Note: This field may return null, indicating that no valid value can be obtained.
        :type CirculateInstanceList: list of InstanceOpsDto
        """
        self._TaskId = None
        self._TaskName = None
        self._WorkflowId = None
        self._WorkflowName = None
        self._InCharge = None
        self._CycleType = None
        self._CurRunDate = None
        self._NextCurDate = None
        self._RunPriority = None
        self._TryLimit = None
        self._Tries = None
        self._TotalRunNum = None
        self._DoFlag = None
        self._RedoFlag = None
        self._State = None
        self._RuntimeBroker = None
        self._ErrorDesc = None
        self._TaskType = None
        self._DependenceFulfillTime = None
        self._FirstDependenceFulfillTime = None
        self._FirstStartTime = None
        self._StartTime = None
        self._EndTime = None
        self._CostTime = None
        self._CostMillisecond = None
        self._MaxCostTime = None
        self._MinCostTime = None
        self._AvgCostTime = None
        self._LastLog = None
        self._SchedulerDateTime = None
        self._LastSchedulerDateTime = None
        self._LastUpdate = None
        self._CreateTime = None
        self._DependencyRel = None
        self._ExecutionSpace = None
        self._IgnoreEvent = None
        self._VirtualFlag = None
        self._FolderId = None
        self._FolderName = None
        self._SonList = None
        self._ProductName = None
        self._ResourceGroup = None
        self._ResourceInstanceId = None
        self._YarnQueue = None
        self._SchedulerDesc = None
        self._FirstSubmitTime = None
        self._FirstRunTime = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._TenantId = None
        self._InstanceKey = None
        self._ExecutorGroupId = None
        self._ExecutorGroupName = None
        self._RelatedInstanceList = None
        self._RelatedInstanceSize = None
        self._OwnerId = None
        self._UserId = None
        self._InstanceLifeCycleOpsDto = None
        self._RetryAttempts = None
        self._DeletedFatherList = None
        self._CirculateInstanceList = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def WorkflowId(self):
        """Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def WorkflowName(self):
        """Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def InCharge(self):
        """Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def CycleType(self):
        """Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CurRunDate(self):
        """Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def NextCurDate(self):
        """Next Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NextCurDate

    @NextCurDate.setter
    def NextCurDate(self, NextCurDate):
        self._NextCurDate = NextCurDate

    @property
    def RunPriority(self):
        """Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RunPriority

    @RunPriority.setter
    def RunPriority(self, RunPriority):
        self._RunPriority = RunPriority

    @property
    def TryLimit(self):
        """Number of Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TryLimit

    @TryLimit.setter
    def TryLimit(self, TryLimit):
        self._TryLimit = TryLimit

    @property
    def Tries(self):
        """Current Running Times
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Tries

    @Tries.setter
    def Tries(self, Tries):
        self._Tries = Tries

    @property
    def TotalRunNum(self):
        """Total Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalRunNum

    @TotalRunNum.setter
    def TotalRunNum(self, TotalRunNum):
        self._TotalRunNum = TotalRunNum

    @property
    def DoFlag(self):
        """Whether to Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DoFlag

    @DoFlag.setter
    def DoFlag(self, DoFlag):
        self._DoFlag = DoFlag

    @property
    def RedoFlag(self):
        """Whether it is a Retry
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RedoFlag

    @RedoFlag.setter
    def RedoFlag(self, RedoFlag):
        self._RedoFlag = RedoFlag

    @property
    def State(self):
        """Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def RuntimeBroker(self):
        """Run Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuntimeBroker

    @RuntimeBroker.setter
    def RuntimeBroker(self, RuntimeBroker):
        self._RuntimeBroker = RuntimeBroker

    @property
    def ErrorDesc(self):
        """Reason for Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc

    @property
    def TaskType(self):
        """Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskTypeOpsDto`
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def DependenceFulfillTime(self):
        """Dependency Judgment Completion Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DependenceFulfillTime

    @DependenceFulfillTime.setter
    def DependenceFulfillTime(self, DependenceFulfillTime):
        self._DependenceFulfillTime = DependenceFulfillTime

    @property
    def FirstDependenceFulfillTime(self):
        """First Dependency Judgment Pass Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstDependenceFulfillTime

    @FirstDependenceFulfillTime.setter
    def FirstDependenceFulfillTime(self, FirstDependenceFulfillTime):
        self._FirstDependenceFulfillTime = FirstDependenceFulfillTime

    @property
    def FirstStartTime(self):
        """Initial startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstStartTime

    @FirstStartTime.setter
    def FirstStartTime(self, FirstStartTime):
        self._FirstStartTime = FirstStartTime

    @property
    def StartTime(self):
        """Start startup time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Operation completion time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CostTime(self):
        """Time Consumed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CostTime

    @CostTime.setter
    def CostTime(self, CostTime):
        self._CostTime = CostTime

    @property
    def CostMillisecond(self):
        """Elapsed time (ms)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CostMillisecond

    @CostMillisecond.setter
    def CostMillisecond(self, CostMillisecond):
        self._CostMillisecond = CostMillisecond

    @property
    def MaxCostTime(self):
        """Maximum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MaxCostTime

    @MaxCostTime.setter
    def MaxCostTime(self, MaxCostTime):
        self._MaxCostTime = MaxCostTime

    @property
    def MinCostTime(self):
        """Minimum operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MinCostTime

    @MinCostTime.setter
    def MinCostTime(self, MinCostTime):
        self._MinCostTime = MinCostTime

    @property
    def AvgCostTime(self):
        """Average operation duration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._AvgCostTime

    @AvgCostTime.setter
    def AvgCostTime(self, AvgCostTime):
        self._AvgCostTime = AvgCostTime

    @property
    def LastLog(self):
        """Recent logs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastLog

    @LastLog.setter
    def LastLog(self, LastLog):
        self._LastLog = LastLog

    @property
    def SchedulerDateTime(self):
        """Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerDateTime

    @SchedulerDateTime.setter
    def SchedulerDateTime(self, SchedulerDateTime):
        self._SchedulerDateTime = SchedulerDateTime

    @property
    def LastSchedulerDateTime(self):
        """Last scheduling time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastSchedulerDateTime

    @LastSchedulerDateTime.setter
    def LastSchedulerDateTime(self, LastSchedulerDateTime):
        self._LastSchedulerDateTime = LastSchedulerDateTime

    @property
    def LastUpdate(self):
        """Last update event
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastUpdate

    @LastUpdate.setter
    def LastUpdate(self, LastUpdate):
        self._LastUpdate = LastUpdate

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def DependencyRel(self):
        """Branch, Dependency Relationship and,or
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DependencyRel

    @DependencyRel.setter
    def DependencyRel(self, DependencyRel):
        self._DependencyRel = DependencyRel

    @property
    def ExecutionSpace(self):
        """Execution space
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionSpace

    @ExecutionSpace.setter
    def ExecutionSpace(self, ExecutionSpace):
        self._ExecutionSpace = ExecutionSpace

    @property
    def IgnoreEvent(self):
        """Ignore events
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IgnoreEvent

    @IgnoreEvent.setter
    def IgnoreEvent(self, IgnoreEvent):
        self._IgnoreEvent = IgnoreEvent

    @property
    def VirtualFlag(self):
        """Virtual Task Instance
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag

    @property
    def FolderId(self):
        """Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def FolderName(self):
        """Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def SonList(self):
        """Recursive Instance Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SonList

    @SonList.setter
    def SonList(self, SonList):
        self._SonList = SonList

    @property
    def ProductName(self):
        """Product Business Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProductName

    @ProductName.setter
    def ProductName(self, ProductName):
        self._ProductName = ProductName

    @property
    def ResourceGroup(self):
        """Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup

    @property
    def ResourceInstanceId(self):
        """Resource Group Specified Execution Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId

    @property
    def YarnQueue(self):
        """Resource Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._YarnQueue

    @YarnQueue.setter
    def YarnQueue(self, YarnQueue):
        self._YarnQueue = YarnQueue

    @property
    def SchedulerDesc(self):
        """Scheduling Plan
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerDesc

    @SchedulerDesc.setter
    def SchedulerDesc(self, SchedulerDesc):
        self._SchedulerDesc = SchedulerDesc

    @property
    def FirstSubmitTime(self):
        """Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstSubmitTime

    @FirstSubmitTime.setter
    def FirstSubmitTime(self, FirstSubmitTime):
        self._FirstSubmitTime = FirstSubmitTime

    @property
    def FirstRunTime(self):
        """First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstRunTime

    @FirstRunTime.setter
    def FirstRunTime(self, FirstRunTime):
        self._FirstRunTime = FirstRunTime

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def TenantId(self):
        """Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def InstanceKey(self):
        """Instance Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceKey

    @InstanceKey.setter
    def InstanceKey(self, InstanceKey):
        self._InstanceKey = InstanceKey

    @property
    def ExecutorGroupId(self):
        """Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId

    @property
    def ExecutorGroupName(self):
        """Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupName

    @ExecutorGroupName.setter
    def ExecutorGroupName(self, ExecutorGroupName):
        self._ExecutorGroupName = ExecutorGroupName

    @property
    def RelatedInstanceList(self):
        """Associated Instance Information.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceOpsDto
        """
        return self._RelatedInstanceList

    @RelatedInstanceList.setter
    def RelatedInstanceList(self, RelatedInstanceList):
        self._RelatedInstanceList = RelatedInstanceList

    @property
    def RelatedInstanceSize(self):
        """Associated Instance Information Quantity, not strongly associated with RelatedInstanceList.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RelatedInstanceSize

    @RelatedInstanceSize.setter
    def RelatedInstanceSize(self, RelatedInstanceSize):
        self._RelatedInstanceSize = RelatedInstanceSize

    @property
    def OwnerId(self):
        """ownerId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId

    @property
    def UserId(self):
        """User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def InstanceLifeCycleOpsDto(self):
        """Instance LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceLifeCycleOpsDto`
        """
        return self._InstanceLifeCycleOpsDto

    @InstanceLifeCycleOpsDto.setter
    def InstanceLifeCycleOpsDto(self, InstanceLifeCycleOpsDto):
        self._InstanceLifeCycleOpsDto = InstanceLifeCycleOpsDto

    @property
    def RetryAttempts(self):
        """Automatic Retry Attempts
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RetryAttempts

    @RetryAttempts.setter
    def RetryAttempts(self, RetryAttempts):
        self._RetryAttempts = RetryAttempts

    @property
    def DeletedFatherList(self):
        """Urgently Removed Dependency Parent Instance List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._DeletedFatherList

    @DeletedFatherList.setter
    def DeletedFatherList(self, DeletedFatherList):
        self._DeletedFatherList = DeletedFatherList

    @property
    def CirculateInstanceList(self):
        """Cyclic Dependency Associated Instances
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceOpsDto
        """
        return self._CirculateInstanceList

    @CirculateInstanceList.setter
    def CirculateInstanceList(self, CirculateInstanceList):
        self._CirculateInstanceList = CirculateInstanceList


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._WorkflowId = params.get("WorkflowId")
        self._WorkflowName = params.get("WorkflowName")
        self._InCharge = params.get("InCharge")
        self._CycleType = params.get("CycleType")
        self._CurRunDate = params.get("CurRunDate")
        self._NextCurDate = params.get("NextCurDate")
        self._RunPriority = params.get("RunPriority")
        self._TryLimit = params.get("TryLimit")
        self._Tries = params.get("Tries")
        self._TotalRunNum = params.get("TotalRunNum")
        self._DoFlag = params.get("DoFlag")
        self._RedoFlag = params.get("RedoFlag")
        self._State = params.get("State")
        self._RuntimeBroker = params.get("RuntimeBroker")
        self._ErrorDesc = params.get("ErrorDesc")
        if params.get("TaskType") is not None:
            self._TaskType = TaskTypeOpsDto()
            self._TaskType._deserialize(params.get("TaskType"))
        self._DependenceFulfillTime = params.get("DependenceFulfillTime")
        self._FirstDependenceFulfillTime = params.get("FirstDependenceFulfillTime")
        self._FirstStartTime = params.get("FirstStartTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CostTime = params.get("CostTime")
        self._CostMillisecond = params.get("CostMillisecond")
        self._MaxCostTime = params.get("MaxCostTime")
        self._MinCostTime = params.get("MinCostTime")
        self._AvgCostTime = params.get("AvgCostTime")
        self._LastLog = params.get("LastLog")
        self._SchedulerDateTime = params.get("SchedulerDateTime")
        self._LastSchedulerDateTime = params.get("LastSchedulerDateTime")
        self._LastUpdate = params.get("LastUpdate")
        self._CreateTime = params.get("CreateTime")
        self._DependencyRel = params.get("DependencyRel")
        self._ExecutionSpace = params.get("ExecutionSpace")
        self._IgnoreEvent = params.get("IgnoreEvent")
        self._VirtualFlag = params.get("VirtualFlag")
        self._FolderId = params.get("FolderId")
        self._FolderName = params.get("FolderName")
        self._SonList = params.get("SonList")
        self._ProductName = params.get("ProductName")
        self._ResourceGroup = params.get("ResourceGroup")
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        self._YarnQueue = params.get("YarnQueue")
        self._SchedulerDesc = params.get("SchedulerDesc")
        self._FirstSubmitTime = params.get("FirstSubmitTime")
        self._FirstRunTime = params.get("FirstRunTime")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._TenantId = params.get("TenantId")
        self._InstanceKey = params.get("InstanceKey")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        self._ExecutorGroupName = params.get("ExecutorGroupName")
        if params.get("RelatedInstanceList") is not None:
            self._RelatedInstanceList = []
            for item in params.get("RelatedInstanceList"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._RelatedInstanceList.append(obj)
        self._RelatedInstanceSize = params.get("RelatedInstanceSize")
        self._OwnerId = params.get("OwnerId")
        self._UserId = params.get("UserId")
        if params.get("InstanceLifeCycleOpsDto") is not None:
            self._InstanceLifeCycleOpsDto = InstanceLifeCycleOpsDto()
            self._InstanceLifeCycleOpsDto._deserialize(params.get("InstanceLifeCycleOpsDto"))
        self._RetryAttempts = params.get("RetryAttempts")
        self._DeletedFatherList = params.get("DeletedFatherList")
        if params.get("CirculateInstanceList") is not None:
            self._CirculateInstanceList = []
            for item in params.get("CirculateInstanceList"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._CirculateInstanceList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceOpsInfoPage(AbstractModel):
    """Task Execution History Pagination Record

    """

    def __init__(self):
        r"""
        :param _TotalCount: Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Record list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of InstanceOpsDto
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Number of recordsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Record list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceSearchCondition(AbstractModel):
    """Instance Retrieval Criteria

    """

    def __init__(self):
        r"""
        :param _CycleList: Task Scheduling Cycle Type
        :type CycleList: list of str
        :param _DateFrom: Start time
        :type DateFrom: str
        :param _DateTo: Expire Time
        :type DateTo: str
        :param _Instance: Instance Filtering Conditions
        :type Instance: :class:`tencentcloud.wedata.v20210820.models.InstanceCondition`
        :param _Keyword: Fuzzy Query Keywords
        :type Keyword: str
        :param _Sort: Sorting Method
        :type Sort: str
        :param _SortCol: Sort Fields
        :type SortCol: str
        :param _StateList: Instance Status Type
        :type StateList: list of str
        """
        self._CycleList = None
        self._DateFrom = None
        self._DateTo = None
        self._Instance = None
        self._Keyword = None
        self._Sort = None
        self._SortCol = None
        self._StateList = None

    @property
    def CycleList(self):
        """Task Scheduling Cycle Type
        :rtype: list of str
        """
        return self._CycleList

    @CycleList.setter
    def CycleList(self, CycleList):
        self._CycleList = CycleList

    @property
    def DateFrom(self):
        """Start time
        :rtype: str
        """
        return self._DateFrom

    @DateFrom.setter
    def DateFrom(self, DateFrom):
        self._DateFrom = DateFrom

    @property
    def DateTo(self):
        """Expire Time
        :rtype: str
        """
        return self._DateTo

    @DateTo.setter
    def DateTo(self, DateTo):
        self._DateTo = DateTo

    @property
    def Instance(self):
        """Instance Filtering Conditions
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceCondition`
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Keyword(self):
        """Fuzzy Query Keywords
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def Sort(self):
        """Sorting Method
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def SortCol(self):
        """Sort Fields
        :rtype: str
        """
        return self._SortCol

    @SortCol.setter
    def SortCol(self, SortCol):
        self._SortCol = SortCol

    @property
    def StateList(self):
        """Instance Status Type
        :rtype: list of str
        """
        return self._StateList

    @StateList.setter
    def StateList(self, StateList):
        self._StateList = StateList


    def _deserialize(self, params):
        self._CycleList = params.get("CycleList")
        self._DateFrom = params.get("DateFrom")
        self._DateTo = params.get("DateTo")
        if params.get("Instance") is not None:
            self._Instance = InstanceCondition()
            self._Instance._deserialize(params.get("Instance"))
        self._Keyword = params.get("Keyword")
        self._Sort = params.get("Sort")
        self._SortCol = params.get("SortCol")
        self._StateList = params.get("StateList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceStatisticInfo(AbstractModel):
    """Operation and Maintenance Dashboard Instance Status Statistics and Instance Status Trend

    """

    def __init__(self):
        r"""
        :param _CountList: Instance Status Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type CountList: list of int non-negative
        :param _TimeList: Instance Status Trend Time Segmentation
Note: This field may return null, indicating that no valid value can be obtained.
        :type TimeList: list of str
        :param _InstanceStatus: Instance Status Identification: WAITING_RUNNING, KILLING, FAILED, FAILED_TRYING, SUCCEED, respectively indicate waiting for execution, terminating, failed, trying again, successful, used for Instance Status Distribution and Instance Status Trend
        :type InstanceStatus: str
        :param _InstanceCount: Used for Instance Status Distribution Count
        :type InstanceCount: int
        :param _ShowTime: Current Display Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ShowTime: str
        :param _ReportTime: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReportTime: str
        :param _Count: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type Count: int
        """
        self._CountList = None
        self._TimeList = None
        self._InstanceStatus = None
        self._InstanceCount = None
        self._ShowTime = None
        self._ReportTime = None
        self._Count = None

    @property
    def CountList(self):
        """Instance Status Trend Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int non-negative
        """
        return self._CountList

    @CountList.setter
    def CountList(self, CountList):
        self._CountList = CountList

    @property
    def TimeList(self):
        """Instance Status Trend Time Segmentation
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TimeList

    @TimeList.setter
    def TimeList(self, TimeList):
        self._TimeList = TimeList

    @property
    def InstanceStatus(self):
        """Instance Status Identification: WAITING_RUNNING, KILLING, FAILED, FAILED_TRYING, SUCCEED, respectively indicate waiting for execution, terminating, failed, trying again, successful, used for Instance Status Distribution and Instance Status Trend
        :rtype: str
        """
        return self._InstanceStatus

    @InstanceStatus.setter
    def InstanceStatus(self, InstanceStatus):
        self._InstanceStatus = InstanceStatus

    @property
    def InstanceCount(self):
        """Used for Instance Status Distribution Count
        :rtype: int
        """
        return self._InstanceCount

    @InstanceCount.setter
    def InstanceCount(self, InstanceCount):
        self._InstanceCount = InstanceCount

    @property
    def ShowTime(self):
        """Current Display Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ShowTime

    @ShowTime.setter
    def ShowTime(self, ShowTime):
        self._ShowTime = ShowTime

    @property
    def ReportTime(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ReportTime

    @ReportTime.setter
    def ReportTime(self, ReportTime):
        self._ReportTime = ReportTime

    @property
    def Count(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._CountList = params.get("CountList")
        self._TimeList = params.get("TimeList")
        self._InstanceStatus = params.get("InstanceStatus")
        self._InstanceCount = params.get("InstanceCount")
        self._ShowTime = params.get("ShowTime")
        self._ReportTime = params.get("ReportTime")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationInstanceLog(AbstractModel):
    """Instance log information

    """

    def __init__(self):
        r"""
        :param _LogInfo: Task log information
Note: This field may return null, indicating that no valid value can be obtained.
        :type LogInfo: str
        """
        self._LogInfo = None

    @property
    def LogInfo(self):
        """Task log information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LogInfo

    @LogInfo.setter
    def LogInfo(self, LogInfo):
        self._LogInfo = LogInfo


    def _deserialize(self, params):
        self._LogInfo = params.get("LogInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationNodeDetail(AbstractModel):
    """Integration Node Details

    """

    def __init__(self):
        r"""
        :param _Name: Integration Node Name
        :type Name: str
        :param _NodeType: Integration Node Type
        :type NodeType: str
        :param _DataSourceType: Node Data Source Type
        :type DataSourceType: str
        :param _Description: Node Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _Config: Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Config: list of RecordField
        :param _ExtConfig: Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtConfig: list of RecordField
        :param _Schema: Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :type Schema: list of IntegrationNodeSchema
        :param _NodeMapping: Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :type NodeMapping: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeMapping`
        :param _OwnerUin: owner uin
        :type OwnerUin: str
        """
        self._Name = None
        self._NodeType = None
        self._DataSourceType = None
        self._Description = None
        self._DatasourceId = None
        self._Config = None
        self._ExtConfig = None
        self._Schema = None
        self._NodeMapping = None
        self._OwnerUin = None

    @property
    def Name(self):
        """Integration Node Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def NodeType(self):
        """Integration Node Type
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def DataSourceType(self):
        """Node Data Source Type
        :rtype: str
        """
        return self._DataSourceType

    @DataSourceType.setter
    def DataSourceType(self, DataSourceType):
        self._DataSourceType = DataSourceType

    @property
    def Description(self):
        """Node Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Config(self):
        """Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def ExtConfig(self):
        """Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def Schema(self):
        """Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeSchema
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def NodeMapping(self):
        """Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeMapping`
        """
        return self._NodeMapping

    @NodeMapping.setter
    def NodeMapping(self, NodeMapping):
        self._NodeMapping = NodeMapping

    @property
    def OwnerUin(self):
        """owner uin
        :rtype: str
        """
        return self._OwnerUin

    @OwnerUin.setter
    def OwnerUin(self, OwnerUin):
        self._OwnerUin = OwnerUin


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._NodeType = params.get("NodeType")
        self._DataSourceType = params.get("DataSourceType")
        self._Description = params.get("Description")
        self._DatasourceId = params.get("DatasourceId")
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = RecordField()
                obj._deserialize(item)
                self._Config.append(obj)
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        if params.get("Schema") is not None:
            self._Schema = []
            for item in params.get("Schema"):
                obj = IntegrationNodeSchema()
                obj._deserialize(item)
                self._Schema.append(obj)
        if params.get("NodeMapping") is not None:
            self._NodeMapping = IntegrationNodeMapping()
            self._NodeMapping._deserialize(params.get("NodeMapping"))
        self._OwnerUin = params.get("OwnerUin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationNodeInfo(AbstractModel):
    """Integrated Task Node

    """

    def __init__(self):
        r"""
        :param _Id: Integration Node ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _TaskId: Task ID of the Integrated Node
        :type TaskId: str
        :param _Name: Integration Node Name
        :type Name: str
        :param _NodeType: Integration Node Type, INPUT: Input Node, OUTPUT: Output Node
        :type NodeType: str
        :param _DataSourceType: Node Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
        :type DataSourceType: str
        :param _Description: Node Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _DatasourceId: Data source IDNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _Config: Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Config: list of RecordField
        :param _ExtConfig: Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtConfig: list of RecordField
        :param _Schema: Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :type Schema: list of IntegrationNodeSchema
        :param _NodeMapping: Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :type NodeMapping: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeMapping`
        :param _AppId: Belonging User AppId, Display Fields Non-passed
        :type AppId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _CreatorUin: Creator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreatorUin: str
        :param _OperatorUin: Operator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUin: str
        :param _OwnerUin: owner uin Display Fields Non-passed
        :type OwnerUin: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        """
        self._Id = None
        self._TaskId = None
        self._Name = None
        self._NodeType = None
        self._DataSourceType = None
        self._Description = None
        self._DatasourceId = None
        self._Config = None
        self._ExtConfig = None
        self._Schema = None
        self._NodeMapping = None
        self._AppId = None
        self._ProjectId = None
        self._CreatorUin = None
        self._OperatorUin = None
        self._OwnerUin = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def Id(self):
        """Integration Node ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TaskId(self):
        """Task ID of the Integrated Node
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Name(self):
        """Integration Node Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def NodeType(self):
        """Integration Node Type, INPUT: Input Node, OUTPUT: Output Node
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def DataSourceType(self):
        """Node Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
        :rtype: str
        """
        return self._DataSourceType

    @DataSourceType.setter
    def DataSourceType(self, DataSourceType):
        self._DataSourceType = DataSourceType

    @property
    def Description(self):
        """Node Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def DatasourceId(self):
        """Data source IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Config(self):
        """Node Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def ExtConfig(self):
        """Node Extension Configuration Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def Schema(self):
        """Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeSchema
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def NodeMapping(self):
        """Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeMapping`
        """
        return self._NodeMapping

    @NodeMapping.setter
    def NodeMapping(self, NodeMapping):
        self._NodeMapping = NodeMapping

    @property
    def AppId(self):
        """Belonging User AppId, Display Fields Non-passed
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CreatorUin(self):
        """Creator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreatorUin

    @CreatorUin.setter
    def CreatorUin(self, CreatorUin):
        self._CreatorUin = CreatorUin

    @property
    def OperatorUin(self):
        """Operator UIN, Display Fields Non-passed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OperatorUin

    @OperatorUin.setter
    def OperatorUin(self, OperatorUin):
        self._OperatorUin = OperatorUin

    @property
    def OwnerUin(self):
        """owner uin Display Fields Non-passed
        :rtype: str
        """
        return self._OwnerUin

    @OwnerUin.setter
    def OwnerUin(self, OwnerUin):
        self._OwnerUin = OwnerUin

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._TaskId = params.get("TaskId")
        self._Name = params.get("Name")
        self._NodeType = params.get("NodeType")
        self._DataSourceType = params.get("DataSourceType")
        self._Description = params.get("Description")
        self._DatasourceId = params.get("DatasourceId")
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = RecordField()
                obj._deserialize(item)
                self._Config.append(obj)
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        if params.get("Schema") is not None:
            self._Schema = []
            for item in params.get("Schema"):
                obj = IntegrationNodeSchema()
                obj._deserialize(item)
                self._Schema.append(obj)
        if params.get("NodeMapping") is not None:
            self._NodeMapping = IntegrationNodeMapping()
            self._NodeMapping._deserialize(params.get("NodeMapping"))
        self._AppId = params.get("AppId")
        self._ProjectId = params.get("ProjectId")
        self._CreatorUin = params.get("CreatorUin")
        self._OperatorUin = params.get("OperatorUin")
        self._OwnerUin = params.get("OwnerUin")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationNodeMapping(AbstractModel):
    """Integrated Node Mapping

    """

    def __init__(self):
        r"""
        :param _SourceId: Source Node ID
        :type SourceId: str
        :param _SinkId: Target Node ID
        :type SinkId: str
        :param _SourceSchema: Source Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceSchema: list of IntegrationNodeSchema
        :param _SchemaMappings: Node Schema Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchemaMappings: list of IntegrationNodeSchemaMapping
        :param _ExtConfig: Node Mapping Extended Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtConfig: list of RecordField
        """
        self._SourceId = None
        self._SinkId = None
        self._SourceSchema = None
        self._SchemaMappings = None
        self._ExtConfig = None

    @property
    def SourceId(self):
        """Source Node ID
        :rtype: str
        """
        return self._SourceId

    @SourceId.setter
    def SourceId(self, SourceId):
        self._SourceId = SourceId

    @property
    def SinkId(self):
        """Target Node ID
        :rtype: str
        """
        return self._SinkId

    @SinkId.setter
    def SinkId(self, SinkId):
        self._SinkId = SinkId

    @property
    def SourceSchema(self):
        """Source Node Schema
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeSchema
        """
        return self._SourceSchema

    @SourceSchema.setter
    def SourceSchema(self, SourceSchema):
        self._SourceSchema = SourceSchema

    @property
    def SchemaMappings(self):
        """Node Schema Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeSchemaMapping
        """
        return self._SchemaMappings

    @SchemaMappings.setter
    def SchemaMappings(self, SchemaMappings):
        self._SchemaMappings = SchemaMappings

    @property
    def ExtConfig(self):
        """Node Mapping Extended Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig


    def _deserialize(self, params):
        self._SourceId = params.get("SourceId")
        self._SinkId = params.get("SinkId")
        if params.get("SourceSchema") is not None:
            self._SourceSchema = []
            for item in params.get("SourceSchema"):
                obj = IntegrationNodeSchema()
                obj._deserialize(item)
                self._SourceSchema.append(obj)
        if params.get("SchemaMappings") is not None:
            self._SchemaMappings = []
            for item in params.get("SchemaMappings"):
                obj = IntegrationNodeSchemaMapping()
                obj._deserialize(item)
                self._SchemaMappings.append(obj)
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationNodeSchema(AbstractModel):
    """Integrated Node Schema

    """

    def __init__(self):
        r"""
        :param _Id: Schema ID Random Unique
        :type Id: str
        :param _Name: Schema Name
        :type Name: str
        :param _Type: Schema Type
        :type Type: str
        :param _Value: Schema Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        :param _Properties: Schema Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :type Properties: list of RecordField
        :param _Alias: Schema Alias
Note: This field may return null, indicating that no valid value can be obtained.
        :type Alias: str
        :param _Comment: Field Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :type Comment: str
        """
        self._Id = None
        self._Name = None
        self._Type = None
        self._Value = None
        self._Properties = None
        self._Alias = None
        self._Comment = None

    @property
    def Id(self):
        """Schema ID Random Unique
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Schema Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Schema Type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Value(self):
        """Schema Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Properties(self):
        """Schema Extended Attributes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._Properties

    @Properties.setter
    def Properties(self, Properties):
        self._Properties = Properties

    @property
    def Alias(self):
        """Schema Alias
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def Comment(self):
        """Field Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._Value = params.get("Value")
        if params.get("Properties") is not None:
            self._Properties = []
            for item in params.get("Properties"):
                obj = RecordField()
                obj._deserialize(item)
                self._Properties.append(obj)
        self._Alias = params.get("Alias")
        self._Comment = params.get("Comment")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationNodeSchemaMapping(AbstractModel):
    """Integrated Node Schema Mapping

    """

    def __init__(self):
        r"""
        :param _SourceSchemaId: Task Node Source Schema ID
        :type SourceSchemaId: str
        :param _SinkSchemaId: Task Node Target Schema ID
        :type SinkSchemaId: str
        """
        self._SourceSchemaId = None
        self._SinkSchemaId = None

    @property
    def SourceSchemaId(self):
        """Task Node Source Schema ID
        :rtype: str
        """
        return self._SourceSchemaId

    @SourceSchemaId.setter
    def SourceSchemaId(self, SourceSchemaId):
        self._SourceSchemaId = SourceSchemaId

    @property
    def SinkSchemaId(self):
        """Task Node Target Schema ID
        :rtype: str
        """
        return self._SinkSchemaId

    @SinkSchemaId.setter
    def SinkSchemaId(self, SinkSchemaId):
        self._SinkSchemaId = SinkSchemaId


    def _deserialize(self, params):
        self._SourceSchemaId = params.get("SourceSchemaId")
        self._SinkSchemaId = params.get("SinkSchemaId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationStatisticsTrendResult(AbstractModel):
    """DataInLong Dashboard trend chart statistical results

    """

    def __init__(self):
        r"""
        :param _StatisticName: Statistical Attribute Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type StatisticName: list of str
        :param _StatisticValue: Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type StatisticValue: list of int
        :param _StatisticType: Statistical Item
Note: This field may return null, indicating that no valid value can be obtained.
        :type StatisticType: str
        """
        self._StatisticName = None
        self._StatisticValue = None
        self._StatisticType = None

    @property
    def StatisticName(self):
        """Statistical Attribute Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._StatisticName

    @StatisticName.setter
    def StatisticName(self, StatisticName):
        self._StatisticName = StatisticName

    @property
    def StatisticValue(self):
        """Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int
        """
        return self._StatisticValue

    @StatisticValue.setter
    def StatisticValue(self, StatisticValue):
        self._StatisticValue = StatisticValue

    @property
    def StatisticType(self):
        """Statistical Item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StatisticType

    @StatisticType.setter
    def StatisticType(self, StatisticType):
        self._StatisticType = StatisticType


    def _deserialize(self, params):
        self._StatisticName = params.get("StatisticName")
        self._StatisticValue = params.get("StatisticValue")
        self._StatisticType = params.get("StatisticType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntegrationTaskInfo(AbstractModel):
    """Integration Tasks

    """

    def __init__(self):
        r"""
        :param _TaskName: Task Name
        :type TaskName: str
        :param _Description: Task Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _SyncType: Synchronization Type 1. Solution (Whole Database Migration), 2. Single Table Synchronization
        :type SyncType: int
        :param _TaskType: 201. Real-time, 202. Offline
        :type TaskType: int
        :param _WorkflowId: Workflow ID of Task
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _ScheduleTaskId: Task Scheduling ID (oceanus or us etc. Job ID), not a mandatory field
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScheduleTaskId: str
        :param _TaskGroupId: InLong Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskGroupId: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _CreatorUin: Creator UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreatorUin: str
        :param _OperatorUin: Operator UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUin: str
        :param _OwnerUin: owner uin
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUin: str
        :param _AppId: Application ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type AppId: str
        :param _Status: 1: not started | 2: In operation | 3: Running | 4: Suspension | 5: Task Stopping | 6: Stop | 7: Execution Failure | 20: Abnormal | 21: Unknown |
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        :param _Nodes: Node list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Nodes: list of IntegrationNodeInfo
        :param _ExecutorId: Execution Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorId: str
        :param _Config: Task configuration information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Config: list of RecordField
        :param _ExtConfig: Task extension configuration information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtConfig: list of RecordField
        :param _ExecuteContext: Task execution context information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecuteContext: list of RecordField
        :param _Mappings: Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :type Mappings: list of IntegrationNodeMapping
        :param _TaskMode: Task configuration mode, 0: Canvas 1: Form 3: Script
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskMode: str
        :param _Incharge: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type Incharge: str
        :param _OfflineTaskAddEntity: Offline new parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type OfflineTaskAddEntity: :class:`tencentcloud.wedata.v20210820.models.OfflineTaskAddParam`
        :param _ExecutorGroupName: group name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupName: str
        :param _InLongManagerUrl: inlong manager url
Note: This field may return null, indicating that no valid value can be obtained.
        :type InLongManagerUrl: str
        :param _InLongStreamId: stream id
Note: This field may return null, indicating that no valid value can be obtained.
        :type InLongStreamId: str
        :param _InLongManagerVersion: version
Note: This field may return null, indicating that no valid value can be obtained.
        :type InLongManagerVersion: str
        :param _DataProxyUrl: inlong dataproxy url
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataProxyUrl: list of str
        :param _Submit: Whether the task version has been submitted for operation and maintenance
Note: This field may return null, indicating that no valid value can be obtained.
        :type Submit: bool
        :param _InputDatasourceType: Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
        :type InputDatasourceType: str
        :param _OutputDatasourceType: Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
        :type OutputDatasourceType: str
        :param _NumRecordsIn: Number of reads
Note: This field may return null, indicating that no valid value can be obtained.
        :type NumRecordsIn: int
        :param _NumRecordsOut: Number of writes
Note: This field may return null, indicating that no valid value can be obtained.
        :type NumRecordsOut: int
        :param _ReaderDelay: Read latency
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReaderDelay: float
        :param _NumRestarts: Restart Times
Note: This field may return null, indicating that no valid value can be obtained.
        :type NumRestarts: int
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Task Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _LastRunTime: Last task run time
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastRunTime: str
        :param _StopTime: Task stop time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StopTime: str
        :param _HasVersion: Job Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
        :type HasVersion: bool
        :param _Locked: Is the task locked?
Note: This field may return null, indicating that no valid value can be obtained.
        :type Locked: bool
        :param _Locker: Task Locked By
Note: This field may return null, indicating that no valid value can be obtained.
        :type Locker: str
        :param _RunningCu: Resource Consumption
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunningCu: float
        :param _TaskAlarmRegularList: Associated Alert Rules for the Task
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAlarmRegularList: list of str
        :param _SwitchResource: Real-time task resource layering status: 0:Ongoing,1:Success,2:Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :type SwitchResource: int
        :param _ReadPhase: Real-time task reading phase: 0:Full Full,1:Partial Full,2:Full Incremental
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReadPhase: int
        :param _InstanceVersion: Real-time Task Version Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceVersion: int
        :param _ArrangeSpaceTaskId: Offline task imported into orchestration space Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ArrangeSpaceTaskId: str
        :param _OfflineTaskStatus: Offline Task Status Differentiation 1.Not Submitted 2.Submitted 3.Exported
Note: This field may return null, indicating that no valid value can be obtained.
        :type OfflineTaskStatus: int
        """
        self._TaskName = None
        self._Description = None
        self._SyncType = None
        self._TaskType = None
        self._WorkflowId = None
        self._TaskId = None
        self._ScheduleTaskId = None
        self._TaskGroupId = None
        self._ProjectId = None
        self._CreatorUin = None
        self._OperatorUin = None
        self._OwnerUin = None
        self._AppId = None
        self._Status = None
        self._Nodes = None
        self._ExecutorId = None
        self._Config = None
        self._ExtConfig = None
        self._ExecuteContext = None
        self._Mappings = None
        self._TaskMode = None
        self._Incharge = None
        self._OfflineTaskAddEntity = None
        self._ExecutorGroupName = None
        self._InLongManagerUrl = None
        self._InLongStreamId = None
        self._InLongManagerVersion = None
        self._DataProxyUrl = None
        self._Submit = None
        self._InputDatasourceType = None
        self._OutputDatasourceType = None
        self._NumRecordsIn = None
        self._NumRecordsOut = None
        self._ReaderDelay = None
        self._NumRestarts = None
        self._CreateTime = None
        self._UpdateTime = None
        self._LastRunTime = None
        self._StopTime = None
        self._HasVersion = None
        self._Locked = None
        self._Locker = None
        self._RunningCu = None
        self._TaskAlarmRegularList = None
        self._SwitchResource = None
        self._ReadPhase = None
        self._InstanceVersion = None
        self._ArrangeSpaceTaskId = None
        self._OfflineTaskStatus = None

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Description(self):
        """Task Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def SyncType(self):
        """Synchronization Type 1. Solution (Whole Database Migration), 2. Single Table Synchronization
        :rtype: int
        """
        return self._SyncType

    @SyncType.setter
    def SyncType(self, SyncType):
        self._SyncType = SyncType

    @property
    def TaskType(self):
        """201. Real-time, 202. Offline
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def WorkflowId(self):
        """Workflow ID of Task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ScheduleTaskId(self):
        """Task Scheduling ID (oceanus or us etc. Job ID), not a mandatory field
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScheduleTaskId

    @ScheduleTaskId.setter
    def ScheduleTaskId(self, ScheduleTaskId):
        self._ScheduleTaskId = ScheduleTaskId

    @property
    def TaskGroupId(self):
        """InLong Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskGroupId

    @TaskGroupId.setter
    def TaskGroupId(self, TaskGroupId):
        self._TaskGroupId = TaskGroupId

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CreatorUin(self):
        """Creator UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreatorUin

    @CreatorUin.setter
    def CreatorUin(self, CreatorUin):
        self._CreatorUin = CreatorUin

    @property
    def OperatorUin(self):
        """Operator UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OperatorUin

    @OperatorUin.setter
    def OperatorUin(self, OperatorUin):
        self._OperatorUin = OperatorUin

    @property
    def OwnerUin(self):
        """owner uin
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerUin

    @OwnerUin.setter
    def OwnerUin(self, OwnerUin):
        self._OwnerUin = OwnerUin

    @property
    def AppId(self):
        """Application ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def Status(self):
        """1: not started | 2: In operation | 3: Running | 4: Suspension | 5: Task Stopping | 6: Stop | 7: Execution Failure | 20: Abnormal | 21: Unknown |
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Nodes(self):
        """Node list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeInfo
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def ExecutorId(self):
        """Execution Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorId

    @ExecutorId.setter
    def ExecutorId(self, ExecutorId):
        self._ExecutorId = ExecutorId

    @property
    def Config(self):
        """Task configuration information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def ExtConfig(self):
        """Task extension configuration information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def ExecuteContext(self):
        """Task execution context information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExecuteContext

    @ExecuteContext.setter
    def ExecuteContext(self, ExecuteContext):
        self._ExecuteContext = ExecuteContext

    @property
    def Mappings(self):
        """Node Mapping
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of IntegrationNodeMapping
        """
        return self._Mappings

    @Mappings.setter
    def Mappings(self, Mappings):
        self._Mappings = Mappings

    @property
    def TaskMode(self):
        """Task configuration mode, 0: Canvas 1: Form 3: Script
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskMode

    @TaskMode.setter
    def TaskMode(self, TaskMode):
        self._TaskMode = TaskMode

    @property
    def Incharge(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Incharge

    @Incharge.setter
    def Incharge(self, Incharge):
        self._Incharge = Incharge

    @property
    def OfflineTaskAddEntity(self):
        """Offline new parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OfflineTaskAddParam`
        """
        return self._OfflineTaskAddEntity

    @OfflineTaskAddEntity.setter
    def OfflineTaskAddEntity(self, OfflineTaskAddEntity):
        self._OfflineTaskAddEntity = OfflineTaskAddEntity

    @property
    def ExecutorGroupName(self):
        """group name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupName

    @ExecutorGroupName.setter
    def ExecutorGroupName(self, ExecutorGroupName):
        self._ExecutorGroupName = ExecutorGroupName

    @property
    def InLongManagerUrl(self):
        """inlong manager url
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InLongManagerUrl

    @InLongManagerUrl.setter
    def InLongManagerUrl(self, InLongManagerUrl):
        self._InLongManagerUrl = InLongManagerUrl

    @property
    def InLongStreamId(self):
        """stream id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InLongStreamId

    @InLongStreamId.setter
    def InLongStreamId(self, InLongStreamId):
        self._InLongStreamId = InLongStreamId

    @property
    def InLongManagerVersion(self):
        """version
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InLongManagerVersion

    @InLongManagerVersion.setter
    def InLongManagerVersion(self, InLongManagerVersion):
        self._InLongManagerVersion = InLongManagerVersion

    @property
    def DataProxyUrl(self):
        """inlong dataproxy url
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._DataProxyUrl

    @DataProxyUrl.setter
    def DataProxyUrl(self, DataProxyUrl):
        self._DataProxyUrl = DataProxyUrl

    @property
    def Submit(self):
        """Whether the task version has been submitted for operation and maintenance
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Submit

    @Submit.setter
    def Submit(self, Submit):
        self._Submit = Submit

    @property
    def InputDatasourceType(self):
        """Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InputDatasourceType

    @InputDatasourceType.setter
    def InputDatasourceType(self, InputDatasourceType):
        self._InputDatasourceType = InputDatasourceType

    @property
    def OutputDatasourceType(self):
        """Data Source Type: MYSQL|POSTGRE|ORACLE|SQLSERVER|FTP|HIVE|HDFS|ICEBERG|KAFKA|HBASE|SPARK|VIRTUAL|TBASE|DB2|DM|GAUSSDB|GBASE|IMPALA|ES|S3_DATAINSIGHT|GREENPLUM|PHOENIX|SAP_HANA|SFTP|OCEANBASE|CLICKHOUSE|KUDU|VERTICA|REDIS|COS|DLC|DLCV1|DORIS|CKAFKA|DTS_KAFKA|S3|CDW|LOCAL|TDSQLC|TDSQL|TDSQL_MYSQL|MONGODB|INFORMIX|SYBASE|REST_API|SuperSQL|PRESTO|DR_SUM|TiDB|StarRocks|Trino|Kyuubi|GDB|TCHOUSE_X|TCHOUSE_P|TDSQL_POSTGRE
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OutputDatasourceType

    @OutputDatasourceType.setter
    def OutputDatasourceType(self, OutputDatasourceType):
        self._OutputDatasourceType = OutputDatasourceType

    @property
    def NumRecordsIn(self):
        """Number of reads
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._NumRecordsIn

    @NumRecordsIn.setter
    def NumRecordsIn(self, NumRecordsIn):
        self._NumRecordsIn = NumRecordsIn

    @property
    def NumRecordsOut(self):
        """Number of writes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._NumRecordsOut

    @NumRecordsOut.setter
    def NumRecordsOut(self, NumRecordsOut):
        self._NumRecordsOut = NumRecordsOut

    @property
    def ReaderDelay(self):
        """Read latency
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._ReaderDelay

    @ReaderDelay.setter
    def ReaderDelay(self, ReaderDelay):
        self._ReaderDelay = ReaderDelay

    @property
    def NumRestarts(self):
        """Restart Times
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._NumRestarts

    @NumRestarts.setter
    def NumRestarts(self, NumRestarts):
        self._NumRestarts = NumRestarts

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Task Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def LastRunTime(self):
        """Last task run time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastRunTime

    @LastRunTime.setter
    def LastRunTime(self, LastRunTime):
        self._LastRunTime = LastRunTime

    @property
    def StopTime(self):
        """Task stop time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StopTime

    @StopTime.setter
    def StopTime(self, StopTime):
        self._StopTime = StopTime

    @property
    def HasVersion(self):
        """Job Submitted?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._HasVersion

    @HasVersion.setter
    def HasVersion(self, HasVersion):
        self._HasVersion = HasVersion

    @property
    def Locked(self):
        """Is the task locked?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Locked

    @Locked.setter
    def Locked(self, Locked):
        self._Locked = Locked

    @property
    def Locker(self):
        """Task Locked By
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Locker

    @Locker.setter
    def Locker(self, Locker):
        self._Locker = Locker

    @property
    def RunningCu(self):
        """Resource Consumption
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._RunningCu

    @RunningCu.setter
    def RunningCu(self, RunningCu):
        self._RunningCu = RunningCu

    @property
    def TaskAlarmRegularList(self):
        """Associated Alert Rules for the Task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TaskAlarmRegularList

    @TaskAlarmRegularList.setter
    def TaskAlarmRegularList(self, TaskAlarmRegularList):
        self._TaskAlarmRegularList = TaskAlarmRegularList

    @property
    def SwitchResource(self):
        """Real-time task resource layering status: 0:Ongoing,1:Success,2:Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SwitchResource

    @SwitchResource.setter
    def SwitchResource(self, SwitchResource):
        self._SwitchResource = SwitchResource

    @property
    def ReadPhase(self):
        """Real-time task reading phase: 0:Full Full,1:Partial Full,2:Full Incremental
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ReadPhase

    @ReadPhase.setter
    def ReadPhase(self, ReadPhase):
        self._ReadPhase = ReadPhase

    @property
    def InstanceVersion(self):
        """Real-time Task Version Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InstanceVersion

    @InstanceVersion.setter
    def InstanceVersion(self, InstanceVersion):
        self._InstanceVersion = InstanceVersion

    @property
    def ArrangeSpaceTaskId(self):
        """Offline task imported into orchestration space Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ArrangeSpaceTaskId

    @ArrangeSpaceTaskId.setter
    def ArrangeSpaceTaskId(self, ArrangeSpaceTaskId):
        self._ArrangeSpaceTaskId = ArrangeSpaceTaskId

    @property
    def OfflineTaskStatus(self):
        """Offline Task Status Differentiation 1.Not Submitted 2.Submitted 3.Exported
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._OfflineTaskStatus

    @OfflineTaskStatus.setter
    def OfflineTaskStatus(self, OfflineTaskStatus):
        self._OfflineTaskStatus = OfflineTaskStatus


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        self._Description = params.get("Description")
        self._SyncType = params.get("SyncType")
        self._TaskType = params.get("TaskType")
        self._WorkflowId = params.get("WorkflowId")
        self._TaskId = params.get("TaskId")
        self._ScheduleTaskId = params.get("ScheduleTaskId")
        self._TaskGroupId = params.get("TaskGroupId")
        self._ProjectId = params.get("ProjectId")
        self._CreatorUin = params.get("CreatorUin")
        self._OperatorUin = params.get("OperatorUin")
        self._OwnerUin = params.get("OwnerUin")
        self._AppId = params.get("AppId")
        self._Status = params.get("Status")
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = IntegrationNodeInfo()
                obj._deserialize(item)
                self._Nodes.append(obj)
        self._ExecutorId = params.get("ExecutorId")
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = RecordField()
                obj._deserialize(item)
                self._Config.append(obj)
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        if params.get("ExecuteContext") is not None:
            self._ExecuteContext = []
            for item in params.get("ExecuteContext"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExecuteContext.append(obj)
        if params.get("Mappings") is not None:
            self._Mappings = []
            for item in params.get("Mappings"):
                obj = IntegrationNodeMapping()
                obj._deserialize(item)
                self._Mappings.append(obj)
        self._TaskMode = params.get("TaskMode")
        self._Incharge = params.get("Incharge")
        if params.get("OfflineTaskAddEntity") is not None:
            self._OfflineTaskAddEntity = OfflineTaskAddParam()
            self._OfflineTaskAddEntity._deserialize(params.get("OfflineTaskAddEntity"))
        self._ExecutorGroupName = params.get("ExecutorGroupName")
        self._InLongManagerUrl = params.get("InLongManagerUrl")
        self._InLongStreamId = params.get("InLongStreamId")
        self._InLongManagerVersion = params.get("InLongManagerVersion")
        self._DataProxyUrl = params.get("DataProxyUrl")
        self._Submit = params.get("Submit")
        self._InputDatasourceType = params.get("InputDatasourceType")
        self._OutputDatasourceType = params.get("OutputDatasourceType")
        self._NumRecordsIn = params.get("NumRecordsIn")
        self._NumRecordsOut = params.get("NumRecordsOut")
        self._ReaderDelay = params.get("ReaderDelay")
        self._NumRestarts = params.get("NumRestarts")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._LastRunTime = params.get("LastRunTime")
        self._StopTime = params.get("StopTime")
        self._HasVersion = params.get("HasVersion")
        self._Locked = params.get("Locked")
        self._Locker = params.get("Locker")
        self._RunningCu = params.get("RunningCu")
        self._TaskAlarmRegularList = params.get("TaskAlarmRegularList")
        self._SwitchResource = params.get("SwitchResource")
        self._ReadPhase = params.get("ReadPhase")
        self._InstanceVersion = params.get("InstanceVersion")
        self._ArrangeSpaceTaskId = params.get("ArrangeSpaceTaskId")
        self._OfflineTaskStatus = params.get("OfflineTaskStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KillOpsMakePlanInstancesRequest(AbstractModel):
    """KillOpsMakePlanInstances request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _PlanId: Supplemental Plan ID
        :type PlanId: str
        """
        self._ProjectId = None
        self._PlanId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def PlanId(self):
        """Supplemental Plan ID
        :rtype: str
        """
        return self._PlanId

    @PlanId.setter
    def PlanId(self, PlanId):
        self._PlanId = PlanId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._PlanId = params.get("PlanId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KillOpsMakePlanInstancesResponse(AbstractModel):
    """KillOpsMakePlanInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Batch Operation Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Batch Operation Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperateResultOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class KillScheduleInstancesRequest(AbstractModel):
    """KillScheduleInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query conditions
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query conditions
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KillScheduleInstancesResponse(AbstractModel):
    """KillScheduleInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperateResultOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class LineageParamRecord(AbstractModel):
    """Lineage Parameter Record

    """

    def __init__(self):
        r"""
        :param _Name: Field name
        :type Name: str
        :param _Value: Field valueNote: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """Field name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """Field valueNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LinkOpsDto(AbstractModel):
    """Details of the task dependency edge

    """

    def __init__(self):
        r"""
        :param _Id: Edge ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _LinkKey: Edge key
Note: This field may return null, indicating that no valid value can be obtained.
        :type LinkKey: str
        :param _TaskFrom: Source node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskFrom: str
        :param _TaskTo: Target node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskTo: str
        :param _InCharge: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _LinkDependencyType: Dependency Relationship Between Parent and Child TasksNote: This field may return null, indicating that no valid value can be obtained.
        :type LinkDependencyType: str
        :param _Offset: Dependency offset between parent and child tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type Offset: str
        :param _LinkType: Type of edge
Note: This field may return null, indicating that no valid value can be obtained.
        :type LinkType: str
        :param _WorkflowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        """
        self._Id = None
        self._LinkKey = None
        self._TaskFrom = None
        self._TaskTo = None
        self._InCharge = None
        self._LinkDependencyType = None
        self._Offset = None
        self._LinkType = None
        self._WorkflowId = None

    @property
    def Id(self):
        """Edge ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def LinkKey(self):
        """Edge key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LinkKey

    @LinkKey.setter
    def LinkKey(self, LinkKey):
        self._LinkKey = LinkKey

    @property
    def TaskFrom(self):
        """Source node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskFrom

    @TaskFrom.setter
    def TaskFrom(self, TaskFrom):
        self._TaskFrom = TaskFrom

    @property
    def TaskTo(self):
        """Target node of the edge
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskTo

    @TaskTo.setter
    def TaskTo(self, TaskTo):
        self._TaskTo = TaskTo

    @property
    def InCharge(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def LinkDependencyType(self):
        """Dependency Relationship Between Parent and Child TasksNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LinkDependencyType

    @LinkDependencyType.setter
    def LinkDependencyType(self, LinkDependencyType):
        self._LinkDependencyType = LinkDependencyType

    @property
    def Offset(self):
        """Dependency offset between parent and child tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def LinkType(self):
        """Type of edge
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LinkType

    @LinkType.setter
    def LinkType(self, LinkType):
        self._LinkType = LinkType

    @property
    def WorkflowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._LinkKey = params.get("LinkKey")
        self._TaskFrom = params.get("TaskFrom")
        self._TaskTo = params.get("TaskTo")
        self._InCharge = params.get("InCharge")
        self._LinkDependencyType = params.get("LinkDependencyType")
        self._Offset = params.get("Offset")
        self._LinkType = params.get("LinkType")
        self._WorkflowId = params.get("WorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LockIntegrationTaskRequest(AbstractModel):
    """LockIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LockIntegrationTaskResponse(AbstractModel):
    """LockIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class LogContent(AbstractModel):
    """Real-time Task Log Content

    """

    def __init__(self):
        r"""
        :param _Time: Log Timestamp, in milliseconds
Note: This field may return null, indicating that no valid value can be obtained.
        :type Time: int
        :param _PkgId: Log Package ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type PkgId: str
        :param _Log: Log content
        :type Log: str
        """
        self._Time = None
        self._PkgId = None
        self._Log = None

    @property
    def Time(self):
        """Log Timestamp, in milliseconds
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Time

    @Time.setter
    def Time(self, Time):
        self._Time = Time

    @property
    def PkgId(self):
        """Log Package ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PkgId

    @PkgId.setter
    def PkgId(self, PkgId):
        self._PkgId = PkgId

    @property
    def Log(self):
        """Log content
        :rtype: str
        """
        return self._Log

    @Log.setter
    def Log(self, Log):
        self._Log = Log


    def _deserialize(self, params):
        self._Time = params.get("Time")
        self._PkgId = params.get("PkgId")
        self._Log = params.get("Log")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogContentInfo(AbstractModel):
    """Log Content Entity

    """

    def __init__(self):
        r"""
        :param _Log: Log contentNote: This field may return null, indicating that no valid value can be obtained.
        :type Log: str
        :param _PkgId: Log group Id\nNote: This field may return null, indicating that no valid value can be obtained.
        :type PkgId: str
        :param _PkgLogId: Log ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type PkgLogId: str
        :param _Time: TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type Time: int
        :param _ContainerName: Container Name the Log Belongs To
Note: This field may return null, indicating that no valid value can be obtained.
        :type ContainerName: str
        """
        self._Log = None
        self._PkgId = None
        self._PkgLogId = None
        self._Time = None
        self._ContainerName = None

    @property
    def Log(self):
        """Log contentNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Log

    @Log.setter
    def Log(self, Log):
        self._Log = Log

    @property
    def PkgId(self):
        """Log group Id\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PkgId

    @PkgId.setter
    def PkgId(self, PkgId):
        self._PkgId = PkgId

    @property
    def PkgLogId(self):
        """Log ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PkgLogId

    @PkgLogId.setter
    def PkgLogId(self, PkgLogId):
        self._PkgLogId = PkgLogId

    @property
    def Time(self):
        """TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Time

    @Time.setter
    def Time(self, Time):
        self._Time = Time

    @property
    def ContainerName(self):
        """Container Name the Log Belongs To
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName


    def _deserialize(self, params):
        self._Log = params.get("Log")
        self._PkgId = params.get("PkgId")
        self._PkgLogId = params.get("PkgLogId")
        self._Time = params.get("Time")
        self._ContainerName = params.get("ContainerName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MakePlanInstanceOpsDtoCollection(AbstractModel):
    """Supplementary Plan Instance Collection

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Page SizeNote: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of InstanceOpsDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page NumberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page SizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MakePlanOpsDto(AbstractModel):
    """Supplemental Plan

    """

    def __init__(self):
        r"""
        :param _PlanId: Supplement Plan ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type PlanId: str
        :param _MakeName: Supplement Plan Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type MakeName: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _CheckParent: Check Parent Task Status for Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :type CheckParent: bool
        :param _SameSelfDependType: Use Original Task Self-Dependency Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :type SameSelfDependType: bool
        :param _ParallelNum: Concurrency, effective when SameSelfDependType is false
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParallelNum: int
        :param _SameCycle: Modify Supplement Instance Generation Period
Note: This field may return null, indicating that no valid value can be obtained.
        :type SameCycle: bool
        :param _SourceTaskCycle: Scheduling Cycle Conversion Method - Original Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceTaskCycle: str
        :param _TargetTaskCycle: Scheduling Cycle Conversion Method - Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetTaskCycle: str
        :param _TargetTaskAction: Scheduling Cycle Conversion Method - Specific Time for Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetTaskAction: int
        :param _MapParamList: Supplement Instance From Definition Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type MapParamList: list of StrToStrMap
        :param _CreatorId: Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreatorId: str
        :param _Creator: Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :type Creator: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _TaskIdList: Supplementary Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskIdList: list of str
        :param _MakeDatetimeList: Supplementary Plan Date Range
Note: This field may return null, indicating that no valid value can be obtained.
        :type MakeDatetimeList: list of CreateMakeDatetimeInfo
        :param _Remark: Supplementary Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Remark: str
        :param _SchedulerResourceGroup: Supplementary Designated Scheduling Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerResourceGroup: str
        :param _SchedulerResourceGroupName: Supplementary Scheduled Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerResourceGroupName: str
        :param _IntegrationResourceGroup: Supplementary Designated Integration Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntegrationResourceGroup: str
        :param _IntegrationResourceGroupName: Supplementary Integrated Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type IntegrationResourceGroupName: str
        :param _TaskCount: Number of Supplementary Plan Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskCount: int
        :param _CompletePercent: Percentage of Supplementary Plan Instances Completed
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompletePercent: int
        :param _SuccessPercent: Percentage of Supplementary Plan Instances Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessPercent: int
        :param _CheckParentType: Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
Note: This field may return null, indicating that no valid value can be obtained.
        :type CheckParentType: str
        """
        self._PlanId = None
        self._MakeName = None
        self._ProjectId = None
        self._CheckParent = None
        self._SameSelfDependType = None
        self._ParallelNum = None
        self._SameCycle = None
        self._SourceTaskCycle = None
        self._TargetTaskCycle = None
        self._TargetTaskAction = None
        self._MapParamList = None
        self._CreatorId = None
        self._Creator = None
        self._CreateTime = None
        self._TaskIdList = None
        self._MakeDatetimeList = None
        self._Remark = None
        self._SchedulerResourceGroup = None
        self._SchedulerResourceGroupName = None
        self._IntegrationResourceGroup = None
        self._IntegrationResourceGroupName = None
        self._TaskCount = None
        self._CompletePercent = None
        self._SuccessPercent = None
        self._CheckParentType = None

    @property
    def PlanId(self):
        """Supplement Plan ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PlanId

    @PlanId.setter
    def PlanId(self, PlanId):
        self._PlanId = PlanId

    @property
    def MakeName(self):
        """Supplement Plan Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MakeName

    @MakeName.setter
    def MakeName(self, MakeName):
        self._MakeName = MakeName

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CheckParent(self):
        """Check Parent Task Status for Supplement
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._CheckParent

    @CheckParent.setter
    def CheckParent(self, CheckParent):
        self._CheckParent = CheckParent

    @property
    def SameSelfDependType(self):
        """Use Original Task Self-Dependency Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._SameSelfDependType

    @SameSelfDependType.setter
    def SameSelfDependType(self, SameSelfDependType):
        self._SameSelfDependType = SameSelfDependType

    @property
    def ParallelNum(self):
        """Concurrency, effective when SameSelfDependType is false
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ParallelNum

    @ParallelNum.setter
    def ParallelNum(self, ParallelNum):
        self._ParallelNum = ParallelNum

    @property
    def SameCycle(self):
        """Modify Supplement Instance Generation Period
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._SameCycle

    @SameCycle.setter
    def SameCycle(self, SameCycle):
        self._SameCycle = SameCycle

    @property
    def SourceTaskCycle(self):
        """Scheduling Cycle Conversion Method - Original Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceTaskCycle

    @SourceTaskCycle.setter
    def SourceTaskCycle(self, SourceTaskCycle):
        self._SourceTaskCycle = SourceTaskCycle

    @property
    def TargetTaskCycle(self):
        """Scheduling Cycle Conversion Method - Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetTaskCycle

    @TargetTaskCycle.setter
    def TargetTaskCycle(self, TargetTaskCycle):
        self._TargetTaskCycle = TargetTaskCycle

    @property
    def TargetTaskAction(self):
        """Scheduling Cycle Conversion Method - Specific Time for Target Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TargetTaskAction

    @TargetTaskAction.setter
    def TargetTaskAction(self, TargetTaskAction):
        self._TargetTaskAction = TargetTaskAction

    @property
    def MapParamList(self):
        """Supplement Instance From Definition Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of StrToStrMap
        """
        return self._MapParamList

    @MapParamList.setter
    def MapParamList(self, MapParamList):
        self._MapParamList = MapParamList

    @property
    def CreatorId(self):
        """Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreatorId

    @CreatorId.setter
    def CreatorId(self, CreatorId):
        self._CreatorId = CreatorId

    @property
    def Creator(self):
        """Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TaskIdList(self):
        """Supplementary Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TaskIdList

    @TaskIdList.setter
    def TaskIdList(self, TaskIdList):
        self._TaskIdList = TaskIdList

    @property
    def MakeDatetimeList(self):
        """Supplementary Plan Date Range
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of CreateMakeDatetimeInfo
        """
        return self._MakeDatetimeList

    @MakeDatetimeList.setter
    def MakeDatetimeList(self, MakeDatetimeList):
        self._MakeDatetimeList = MakeDatetimeList

    @property
    def Remark(self):
        """Supplementary Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def SchedulerResourceGroup(self):
        """Supplementary Designated Scheduling Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerResourceGroup

    @SchedulerResourceGroup.setter
    def SchedulerResourceGroup(self, SchedulerResourceGroup):
        self._SchedulerResourceGroup = SchedulerResourceGroup

    @property
    def SchedulerResourceGroupName(self):
        """Supplementary Scheduled Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerResourceGroupName

    @SchedulerResourceGroupName.setter
    def SchedulerResourceGroupName(self, SchedulerResourceGroupName):
        self._SchedulerResourceGroupName = SchedulerResourceGroupName

    @property
    def IntegrationResourceGroup(self):
        """Supplementary Designated Integration Resource Group (ID)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._IntegrationResourceGroup

    @IntegrationResourceGroup.setter
    def IntegrationResourceGroup(self, IntegrationResourceGroup):
        self._IntegrationResourceGroup = IntegrationResourceGroup

    @property
    def IntegrationResourceGroupName(self):
        """Supplementary Integrated Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._IntegrationResourceGroupName

    @IntegrationResourceGroupName.setter
    def IntegrationResourceGroupName(self, IntegrationResourceGroupName):
        self._IntegrationResourceGroupName = IntegrationResourceGroupName

    @property
    def TaskCount(self):
        """Number of Supplementary Plan Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskCount

    @TaskCount.setter
    def TaskCount(self, TaskCount):
        self._TaskCount = TaskCount

    @property
    def CompletePercent(self):
        """Percentage of Supplementary Plan Instances Completed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CompletePercent

    @CompletePercent.setter
    def CompletePercent(self, CompletePercent):
        self._CompletePercent = CompletePercent

    @property
    def SuccessPercent(self):
        """Percentage of Supplementary Plan Instances Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessPercent

    @SuccessPercent.setter
    def SuccessPercent(self, SuccessPercent):
        self._SuccessPercent = SuccessPercent

    @property
    def CheckParentType(self):
        """Check Parent Task Type for Supplementary. Value range:
<li> NONE: Do not check any </li>
<li> ALL: Check all upstream parent tasks </li>
<li> MAKE_SCOPE: Check only within the selected tasks of (the current supplementary plan) </li>
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CheckParentType

    @CheckParentType.setter
    def CheckParentType(self, CheckParentType):
        self._CheckParentType = CheckParentType


    def _deserialize(self, params):
        self._PlanId = params.get("PlanId")
        self._MakeName = params.get("MakeName")
        self._ProjectId = params.get("ProjectId")
        self._CheckParent = params.get("CheckParent")
        self._SameSelfDependType = params.get("SameSelfDependType")
        self._ParallelNum = params.get("ParallelNum")
        self._SameCycle = params.get("SameCycle")
        self._SourceTaskCycle = params.get("SourceTaskCycle")
        self._TargetTaskCycle = params.get("TargetTaskCycle")
        self._TargetTaskAction = params.get("TargetTaskAction")
        if params.get("MapParamList") is not None:
            self._MapParamList = []
            for item in params.get("MapParamList"):
                obj = StrToStrMap()
                obj._deserialize(item)
                self._MapParamList.append(obj)
        self._CreatorId = params.get("CreatorId")
        self._Creator = params.get("Creator")
        self._CreateTime = params.get("CreateTime")
        self._TaskIdList = params.get("TaskIdList")
        if params.get("MakeDatetimeList") is not None:
            self._MakeDatetimeList = []
            for item in params.get("MakeDatetimeList"):
                obj = CreateMakeDatetimeInfo()
                obj._deserialize(item)
                self._MakeDatetimeList.append(obj)
        self._Remark = params.get("Remark")
        self._SchedulerResourceGroup = params.get("SchedulerResourceGroup")
        self._SchedulerResourceGroupName = params.get("SchedulerResourceGroupName")
        self._IntegrationResourceGroup = params.get("IntegrationResourceGroup")
        self._IntegrationResourceGroupName = params.get("IntegrationResourceGroupName")
        self._TaskCount = params.get("TaskCount")
        self._CompletePercent = params.get("CompletePercent")
        self._SuccessPercent = params.get("SuccessPercent")
        self._CheckParentType = params.get("CheckParentType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MakePlanOpsDtoCollection(AbstractModel):
    """Supplementary plan collection

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total number of records
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Page Size
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of MakePlanOpsDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total number of records
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Number of records on current page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of MakePlanOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = MakePlanOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MakePlanTaskOpsDto(AbstractModel):
    """Supplemental Plan Tasks

    """

    def __init__(self):
        r"""
        :param _TaskBaseInfo: Basic task informationNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskBaseInfo: :class:`tencentcloud.wedata.v20210820.models.TaskOpsDto`
        :param _InstanceCount: Supplemental instances already generated for this task
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceCount: int
        :param _CompletePercent: Supplementary Task Instance Completion Percentage
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompletePercent: int
        :param _SuccessPercent: Supplementary Task Instance Success Percentage
Note: This field may return null, indicating that no valid value can be obtained.
        :type SuccessPercent: int
        :param _InstanceTotalCount: Estimated Total Number of Instances Generated, as generation is asynchronous, -1 indicates instances are not fully generated yet
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceTotalCount: int
        """
        self._TaskBaseInfo = None
        self._InstanceCount = None
        self._CompletePercent = None
        self._SuccessPercent = None
        self._InstanceTotalCount = None

    @property
    def TaskBaseInfo(self):
        """Basic task informationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskOpsDto`
        """
        return self._TaskBaseInfo

    @TaskBaseInfo.setter
    def TaskBaseInfo(self, TaskBaseInfo):
        self._TaskBaseInfo = TaskBaseInfo

    @property
    def InstanceCount(self):
        """Supplemental instances already generated for this task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InstanceCount

    @InstanceCount.setter
    def InstanceCount(self, InstanceCount):
        self._InstanceCount = InstanceCount

    @property
    def CompletePercent(self):
        """Supplementary Task Instance Completion Percentage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CompletePercent

    @CompletePercent.setter
    def CompletePercent(self, CompletePercent):
        self._CompletePercent = CompletePercent

    @property
    def SuccessPercent(self):
        """Supplementary Task Instance Success Percentage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SuccessPercent

    @SuccessPercent.setter
    def SuccessPercent(self, SuccessPercent):
        self._SuccessPercent = SuccessPercent

    @property
    def InstanceTotalCount(self):
        """Estimated Total Number of Instances Generated, as generation is asynchronous, -1 indicates instances are not fully generated yet
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InstanceTotalCount

    @InstanceTotalCount.setter
    def InstanceTotalCount(self, InstanceTotalCount):
        self._InstanceTotalCount = InstanceTotalCount


    def _deserialize(self, params):
        if params.get("TaskBaseInfo") is not None:
            self._TaskBaseInfo = TaskOpsDto()
            self._TaskBaseInfo._deserialize(params.get("TaskBaseInfo"))
        self._InstanceCount = params.get("InstanceCount")
        self._CompletePercent = params.get("CompletePercent")
        self._SuccessPercent = params.get("SuccessPercent")
        self._InstanceTotalCount = params.get("InstanceTotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MakePlanTaskOpsDtoCollection(AbstractModel):
    """Supplementary Plan Task Collection

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _TotalPage: Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalPage: int
        :param _PageCount: Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageCount: int
        :param _PageNumber: Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageNumber: int
        :param _PageSize: Page Size
Note: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        :param _Items: Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of MakePlanTaskOpsDto
        """
        self._TotalCount = None
        self._TotalPage = None
        self._PageCount = None
        self._PageNumber = None
        self._PageSize = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPage(self):
        """Total Number of Pages
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Number of Records on Current Page
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def PageNumber(self):
        """Page Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of MakePlanTaskOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = MakePlanTaskOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyApproveStatusRequest(AbstractModel):
    """ModifyApproveStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ApproveIds: Approval Form IDs
        :type ApproveIds: list of str
        :param _Remark: Approval Remarks
        :type Remark: str
        :param _Status: Status
        :type Status: str
        """
        self._ApproveIds = None
        self._Remark = None
        self._Status = None

    @property
    def ApproveIds(self):
        """Approval Form IDs
        :rtype: list of str
        """
        return self._ApproveIds

    @ApproveIds.setter
    def ApproveIds(self, ApproveIds):
        self._ApproveIds = ApproveIds

    @property
    def Remark(self):
        """Approval Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def Status(self):
        """Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._ApproveIds = params.get("ApproveIds")
        self._Remark = params.get("Remark")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyApproveStatusResponse(AbstractModel):
    """ModifyApproveStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Modify Approval Form Status
        :type Data: list of ApproveModify
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Modify Approval Form Status
        :rtype: list of ApproveModify
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ApproveModify()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class ModifyDataSourceRequest(AbstractModel):
    """ModifyDataSource request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Data Source Name, cannot be empty under the same SpaceName
        :type Name: str
        :param _Category: Data Source Category: Binding Engine, Binding Database
        :type Category: str
        :param _Type: Data Source Type: enumerated values
        :type Type: str
        :param _ID: Data Source ID
        :type ID: int
        :param _BizParams: Configuration Information Extension of Business Data Source
        :type BizParams: str
        :param _Params: Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
        :type Params: str
        :param _Description: Data source description information
        :type Description: str
        :param _Display: Data Source Display Name, for visual inspection
        :type Display: str
        :param _DatabaseName: If the data source list is bound to a database, then it is the database name
        :type DatabaseName: str
        :param _Instance: Instance ID of the data source engine, e.g., CDB Instance ID
        :type Instance: str
        :param _Status: Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
        :type Status: int
        :param _ClusterId: Name of the business space to which the data source belongs
        :type ClusterId: str
        :param _Collect: Collection Status
        :type Collect: str
        :param _OwnerProjectId: Project ID
        :type OwnerProjectId: str
        :param _OwnerProjectName: Project name
        :type OwnerProjectName: str
        :param _OwnerProjectIdent: Project Chinese Name
        :type OwnerProjectIdent: str
        :param _COSBucket: cos bucket
        :type COSBucket: str
        :param _COSRegion: cos region
        :type COSRegion: str
        :param _ProjectId: Operation Item ID
        :type ProjectId: str
        :param _DevelopmentParams: Data Source Development Environment Configuration
        :type DevelopmentParams: str
        """
        self._Name = None
        self._Category = None
        self._Type = None
        self._ID = None
        self._BizParams = None
        self._Params = None
        self._Description = None
        self._Display = None
        self._DatabaseName = None
        self._Instance = None
        self._Status = None
        self._ClusterId = None
        self._Collect = None
        self._OwnerProjectId = None
        self._OwnerProjectName = None
        self._OwnerProjectIdent = None
        self._COSBucket = None
        self._COSRegion = None
        self._ProjectId = None
        self._DevelopmentParams = None

    @property
    def Name(self):
        """Data Source Name, cannot be empty under the same SpaceName
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Category(self):
        """Data Source Category: Binding Engine, Binding Database
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Type(self):
        """Data Source Type: enumerated values
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ID(self):
        """Data Source ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def BizParams(self):
        """Configuration Information Extension of Business Data Source
        :rtype: str
        """
        return self._BizParams

    @BizParams.setter
    def BizParams(self, BizParams):
        self._BizParams = BizParams

    @property
    def Params(self):
        """Data source configuration information, stored as JSON KV. The KV storage information varies according to the data source type
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def Description(self):
        """Data source description information
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Display(self):
        """Data Source Display Name, for visual inspection
        :rtype: str
        """
        return self._Display

    @Display.setter
    def Display(self, Display):
        self._Display = Display

    @property
    def DatabaseName(self):
        """If the data source list is bound to a database, then it is the database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def Instance(self):
        """Instance ID of the data source engine, e.g., CDB Instance ID
        :rtype: str
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Status(self):
        """Visibility of the data source, where 1 is visible and 0 is not visible. Default is 1
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ClusterId(self):
        """Name of the business space to which the data source belongs
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Collect(self):
        """Collection Status
        :rtype: str
        """
        return self._Collect

    @Collect.setter
    def Collect(self, Collect):
        self._Collect = Collect

    @property
    def OwnerProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._OwnerProjectId

    @OwnerProjectId.setter
    def OwnerProjectId(self, OwnerProjectId):
        self._OwnerProjectId = OwnerProjectId

    @property
    def OwnerProjectName(self):
        """Project name
        :rtype: str
        """
        return self._OwnerProjectName

    @OwnerProjectName.setter
    def OwnerProjectName(self, OwnerProjectName):
        self._OwnerProjectName = OwnerProjectName

    @property
    def OwnerProjectIdent(self):
        """Project Chinese Name
        :rtype: str
        """
        return self._OwnerProjectIdent

    @OwnerProjectIdent.setter
    def OwnerProjectIdent(self, OwnerProjectIdent):
        self._OwnerProjectIdent = OwnerProjectIdent

    @property
    def COSBucket(self):
        """cos bucket
        :rtype: str
        """
        return self._COSBucket

    @COSBucket.setter
    def COSBucket(self, COSBucket):
        self._COSBucket = COSBucket

    @property
    def COSRegion(self):
        """cos region
        :rtype: str
        """
        return self._COSRegion

    @COSRegion.setter
    def COSRegion(self, COSRegion):
        self._COSRegion = COSRegion

    @property
    def ProjectId(self):
        """Operation Item ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DevelopmentParams(self):
        """Data Source Development Environment Configuration
        :rtype: str
        """
        return self._DevelopmentParams

    @DevelopmentParams.setter
    def DevelopmentParams(self, DevelopmentParams):
        self._DevelopmentParams = DevelopmentParams


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Category = params.get("Category")
        self._Type = params.get("Type")
        self._ID = params.get("ID")
        self._BizParams = params.get("BizParams")
        self._Params = params.get("Params")
        self._Description = params.get("Description")
        self._Display = params.get("Display")
        self._DatabaseName = params.get("DatabaseName")
        self._Instance = params.get("Instance")
        self._Status = params.get("Status")
        self._ClusterId = params.get("ClusterId")
        self._Collect = params.get("Collect")
        self._OwnerProjectId = params.get("OwnerProjectId")
        self._OwnerProjectName = params.get("OwnerProjectName")
        self._OwnerProjectIdent = params.get("OwnerProjectIdent")
        self._COSBucket = params.get("COSBucket")
        self._COSRegion = params.get("COSRegion")
        self._ProjectId = params.get("ProjectId")
        self._DevelopmentParams = params.get("DevelopmentParams")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDataSourceResponse(AbstractModel):
    """ModifyDataSource response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Was it successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Was it successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyDimensionWeightRequest(AbstractModel):
    """ModifyDimensionWeight request structure.

    """

    def __init__(self):
        r"""
        :param _WeightInfoList: Weight Information List
        :type WeightInfoList: list of WeightInfo
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Refresh: Whether to Refresh Historical Data
        :type Refresh: bool
        """
        self._WeightInfoList = None
        self._ProjectId = None
        self._Refresh = None

    @property
    def WeightInfoList(self):
        """Weight Information List
        :rtype: list of WeightInfo
        """
        return self._WeightInfoList

    @WeightInfoList.setter
    def WeightInfoList(self, WeightInfoList):
        self._WeightInfoList = WeightInfoList

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Refresh(self):
        """Whether to Refresh Historical Data
        :rtype: bool
        """
        return self._Refresh

    @Refresh.setter
    def Refresh(self, Refresh):
        self._Refresh = Refresh


    def _deserialize(self, params):
        if params.get("WeightInfoList") is not None:
            self._WeightInfoList = []
            for item in params.get("WeightInfoList"):
                obj = WeightInfo()
                obj._deserialize(item)
                self._WeightInfoList.append(obj)
        self._ProjectId = params.get("ProjectId")
        self._Refresh = params.get("Refresh")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDimensionWeightResponse(AbstractModel):
    """ModifyDimensionWeight response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Update Weight Successfully?
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Update Weight Successfully?
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyDsFolderRequest(AbstractModel):
    """ModifyDsFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _FolderName: Folder Name
        :type FolderName: str
        :param _FolderId: Folder ID
        :type FolderId: str
        :param _ParentsFolderId: Parent Folder ID
        :type ParentsFolderId: str
        """
        self._ProjectId = None
        self._FolderName = None
        self._FolderId = None
        self._ParentsFolderId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderName(self):
        """Folder Name
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def FolderId(self):
        """Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def ParentsFolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._ParentsFolderId

    @ParentsFolderId.setter
    def ParentsFolderId(self, ParentsFolderId):
        self._ParentsFolderId = ParentsFolderId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FolderName = params.get("FolderName")
        self._FolderId = params.get("FolderId")
        self._ParentsFolderId = params.get("ParentsFolderId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDsFolderResponse(AbstractModel):
    """ModifyDsFolder response structure.

    """

    def __init__(self):
        r"""
        :param _Data: true indicates success, false indicates failure
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """true indicates success, false indicates failure
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyExecStrategyRequest(AbstractModel):
    """ModifyExecStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _MonitorType: Monitoring Type 1. Not Configured, 2. Associated Production Scheduling, 3. Offline Cycle Detection
        :type MonitorType: int
        :param _ExecQueue: Compute Queue
        :type ExecQueue: str
        :param _ExecutorGroupId: Execution Resource Group ID
        :type ExecutorGroupId: str
        :param _ExecutorGroupName: Execution Resource Group Name
        :type ExecutorGroupName: str
        :param _Tasks: Associated Production Scheduling Task List
        :type Tasks: list of ProdSchedulerTask
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _StartTime: Offline Cycle Mode, Effective Date - Start Time
        :type StartTime: str
        :param _EndTime: Offline Cycle Mode, Effective Date - End Time
        :type EndTime: str
        :param _CycleType: Offline Cycle Mode, Scheduling Period 
MINUTE_CYCLE:I,
HOUR_CYCLE:H,
DAY_CYCLE:D,
WEEK_CYCLE:W,
MONTH_CYCLE:M
        :type CycleType: str
        :param _CycleStep: Offline Cycle Mode, Scheduling Step
        :type CycleStep: int
        :param _TaskAction: Offline Cycle Mode, Specified Time
        :type TaskAction: str
        :param _DelayTime: Delayed Execution Time, Unit: Minute, Optional: <0-1439
        :type DelayTime: int
        :param _DatabaseId: Database ID
        :type DatabaseId: str
        :param _DatasourceId: Data Source ID
        :type DatasourceId: str
        :param _TableId: Data Table ID
        :type TableId: str
        :param _ExecEngineType: Running Execution Engine, Requests Default Execution Engine of the Data Source if Not Specified
        :type ExecEngineType: str
        :param _TriggerTypes: Trigger scenario
        :type TriggerTypes: list of str
        """
        self._RuleGroupId = None
        self._MonitorType = None
        self._ExecQueue = None
        self._ExecutorGroupId = None
        self._ExecutorGroupName = None
        self._Tasks = None
        self._ProjectId = None
        self._StartTime = None
        self._EndTime = None
        self._CycleType = None
        self._CycleStep = None
        self._TaskAction = None
        self._DelayTime = None
        self._DatabaseId = None
        self._DatasourceId = None
        self._TableId = None
        self._ExecEngineType = None
        self._TriggerTypes = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def MonitorType(self):
        """Monitoring Type 1. Not Configured, 2. Associated Production Scheduling, 3. Offline Cycle Detection
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType

    @property
    def ExecQueue(self):
        """Compute Queue
        :rtype: str
        """
        return self._ExecQueue

    @ExecQueue.setter
    def ExecQueue(self, ExecQueue):
        self._ExecQueue = ExecQueue

    @property
    def ExecutorGroupId(self):
        """Execution Resource Group ID
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId

    @property
    def ExecutorGroupName(self):
        """Execution Resource Group Name
        :rtype: str
        """
        return self._ExecutorGroupName

    @ExecutorGroupName.setter
    def ExecutorGroupName(self, ExecutorGroupName):
        self._ExecutorGroupName = ExecutorGroupName

    @property
    def Tasks(self):
        """Associated Production Scheduling Task List
        :rtype: list of ProdSchedulerTask
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def StartTime(self):
        """Offline Cycle Mode, Effective Date - Start Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Offline Cycle Mode, Effective Date - End Time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CycleType(self):
        """Offline Cycle Mode, Scheduling Period 
MINUTE_CYCLE:I,
HOUR_CYCLE:H,
DAY_CYCLE:D,
WEEK_CYCLE:W,
MONTH_CYCLE:M
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Offline Cycle Mode, Scheduling Step
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def TaskAction(self):
        """Offline Cycle Mode, Specified Time
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def DelayTime(self):
        """Delayed Execution Time, Unit: Minute, Optional: <0-1439
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def DatabaseId(self):
        """Database ID
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def TableId(self):
        """Data Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def ExecEngineType(self):
        """Running Execution Engine, Requests Default Execution Engine of the Data Source if Not Specified
        :rtype: str
        """
        return self._ExecEngineType

    @ExecEngineType.setter
    def ExecEngineType(self, ExecEngineType):
        self._ExecEngineType = ExecEngineType

    @property
    def TriggerTypes(self):
        """Trigger scenario
        :rtype: list of str
        """
        return self._TriggerTypes

    @TriggerTypes.setter
    def TriggerTypes(self, TriggerTypes):
        self._TriggerTypes = TriggerTypes


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._MonitorType = params.get("MonitorType")
        self._ExecQueue = params.get("ExecQueue")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        self._ExecutorGroupName = params.get("ExecutorGroupName")
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = ProdSchedulerTask()
                obj._deserialize(item)
                self._Tasks.append(obj)
        self._ProjectId = params.get("ProjectId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._TaskAction = params.get("TaskAction")
        self._DelayTime = params.get("DelayTime")
        self._DatabaseId = params.get("DatabaseId")
        self._DatasourceId = params.get("DatasourceId")
        self._TableId = params.get("TableId")
        self._ExecEngineType = params.get("ExecEngineType")
        self._TriggerTypes = params.get("TriggerTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyExecStrategyResponse(AbstractModel):
    """ModifyExecStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyIntegrationNodeRequest(AbstractModel):
    """ModifyIntegrationNode request structure.

    """

    def __init__(self):
        r"""
        :param _NodeInfo: Integrated Node Information
        :type NodeInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type "201. stream, 202. offline"
        :type TaskType: int
        :param _TaskMode: Distinguish Canvas Mode and Form "1. Canvas, 2. Form" mode
        :type TaskMode: int
        """
        self._NodeInfo = None
        self._ProjectId = None
        self._TaskType = None
        self._TaskMode = None

    @property
    def NodeInfo(self):
        """Integrated Node Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationNodeInfo`
        """
        return self._NodeInfo

    @NodeInfo.setter
    def NodeInfo(self, NodeInfo):
        self._NodeInfo = NodeInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type "201. stream, 202. offline"
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskMode(self):
        """Distinguish Canvas Mode and Form "1. Canvas, 2. Form" mode
        :rtype: int
        """
        return self._TaskMode

    @TaskMode.setter
    def TaskMode(self, TaskMode):
        self._TaskMode = TaskMode


    def _deserialize(self, params):
        if params.get("NodeInfo") is not None:
            self._NodeInfo = IntegrationNodeInfo()
            self._NodeInfo._deserialize(params.get("NodeInfo"))
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        self._TaskMode = params.get("TaskMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyIntegrationNodeResponse(AbstractModel):
    """ModifyIntegrationNode response structure.

    """

    def __init__(self):
        r"""
        :param _Id: Node ID
        :type Id: str
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Id = None
        self._TaskId = None
        self._RequestId = None

    @property
    def Id(self):
        """Node ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyIntegrationTaskRequest(AbstractModel):
    """ModifyIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskInfo: Task Information
        :type TaskInfo: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RollbackFlag: Default is false. When true, it indicates rolling back to the node logic
        :type RollbackFlag: bool
        """
        self._TaskInfo = None
        self._ProjectId = None
        self._RollbackFlag = None

    @property
    def TaskInfo(self):
        """Task Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.IntegrationTaskInfo`
        """
        return self._TaskInfo

    @TaskInfo.setter
    def TaskInfo(self, TaskInfo):
        self._TaskInfo = TaskInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RollbackFlag(self):
        """Default is false. When true, it indicates rolling back to the node logic
        :rtype: bool
        """
        return self._RollbackFlag

    @RollbackFlag.setter
    def RollbackFlag(self, RollbackFlag):
        self._RollbackFlag = RollbackFlag


    def _deserialize(self, params):
        if params.get("TaskInfo") is not None:
            self._TaskInfo = IntegrationTaskInfo()
            self._TaskInfo._deserialize(params.get("TaskInfo"))
        self._ProjectId = params.get("ProjectId")
        self._RollbackFlag = params.get("RollbackFlag")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyIntegrationTaskResponse(AbstractModel):
    """ModifyIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyMonitorStatusRequest(AbstractModel):
    """ModifyMonitorStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _MonitorStatus: Monitor switch status
        :type MonitorStatus: bool
        """
        self._ProjectId = None
        self._RuleGroupId = None
        self._MonitorStatus = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def MonitorStatus(self):
        """Monitor switch status
        :rtype: bool
        """
        return self._MonitorStatus

    @MonitorStatus.setter
    def MonitorStatus(self, MonitorStatus):
        self._MonitorStatus = MonitorStatus


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._MonitorStatus = params.get("MonitorStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyMonitorStatusResponse(AbstractModel):
    """ModifyMonitorStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Monitoring Status Modified Successfully
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Monitoring Status Modified Successfully
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyRuleGroupSubscriptionRequest(AbstractModel):
    """ModifyRuleGroupSubscription request structure.

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _Receivers: Subscriber Information
        :type Receivers: list of SubscribeReceiver
        :param _SubscribeType: Data Subscription Type
        :type SubscribeType: list of int non-negative
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatabaseId: Database ID
        :type DatabaseId: str
        :param _DatasourceId: Data Source ID
        :type DatasourceId: str
        :param _TableId: Data Table ID
        :type TableId: str
        :param _WebHooks: Group Robot Webhook Information
        :type WebHooks: list of SubscribeWebHook
        """
        self._RuleGroupId = None
        self._Receivers = None
        self._SubscribeType = None
        self._ProjectId = None
        self._DatabaseId = None
        self._DatasourceId = None
        self._TableId = None
        self._WebHooks = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def Receivers(self):
        """Subscriber Information
        :rtype: list of SubscribeReceiver
        """
        return self._Receivers

    @Receivers.setter
    def Receivers(self, Receivers):
        self._Receivers = Receivers

    @property
    def SubscribeType(self):
        """Data Subscription Type
        :rtype: list of int non-negative
        """
        return self._SubscribeType

    @SubscribeType.setter
    def SubscribeType(self, SubscribeType):
        self._SubscribeType = SubscribeType

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatabaseId(self):
        """Database ID
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def TableId(self):
        """Data Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def WebHooks(self):
        """Group Robot Webhook Information
        :rtype: list of SubscribeWebHook
        """
        return self._WebHooks

    @WebHooks.setter
    def WebHooks(self, WebHooks):
        self._WebHooks = WebHooks


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        if params.get("Receivers") is not None:
            self._Receivers = []
            for item in params.get("Receivers"):
                obj = SubscribeReceiver()
                obj._deserialize(item)
                self._Receivers.append(obj)
        self._SubscribeType = params.get("SubscribeType")
        self._ProjectId = params.get("ProjectId")
        self._DatabaseId = params.get("DatabaseId")
        self._DatasourceId = params.get("DatasourceId")
        self._TableId = params.get("TableId")
        if params.get("WebHooks") is not None:
            self._WebHooks = []
            for item in params.get("WebHooks"):
                obj = SubscribeWebHook()
                obj._deserialize(item)
                self._WebHooks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRuleGroupSubscriptionResponse(AbstractModel):
    """ModifyRuleGroupSubscription response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyRuleRequest(AbstractModel):
    """ModifyRule request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleGroupId: Rule Group ID
        :type RuleGroupId: int
        :param _Name: Rule name
        :type Name: str
        :param _TableId: Data Table ID
        :type TableId: str
        :param _RuleTemplateId: Rule Template ID
        :type RuleTemplateId: int
        :param _Type: Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
        :type Type: int
        :param _QualityDim: Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
        :type QualityDim: int
        :param _SourceObjectDataTypeName: Source Field Detailed Type, int, string
        :type SourceObjectDataTypeName: str
        :param _SourceObjectValue: Source Field Name
        :type SourceObjectValue: str
        :param _ConditionType: Detection Range 1.Whole Table 2.Conditional Scan
        :type ConditionType: int
        :param _ConditionExpression: Conditional Scan WHERE Condition Expression
        :type ConditionExpression: str
        :param _CustomSql: Custom Definition SQL
        :type CustomSql: str
        :param _CompareRule: Alert Trigger Condition
        :type CompareRule: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        :param _AlarmLevel: Alert Trigger Level 1.Low, 2.Medium, 3.High
        :type AlarmLevel: int
        :param _Description: Rule Description
        :type Description: str
        :param _TargetDatabaseId: Target Database Id
        :type TargetDatabaseId: str
        :param _TargetTableId: Target Table Id
        :type TargetTableId: str
        :param _TargetConditionExpr: Target Filter Condition Expression
        :type TargetConditionExpr: str
        :param _RelConditionExpr: Source Field and Target Field Association Condition ON Expression
        :type RelConditionExpr: str
        :param _FieldConfig: Custom Definition Template SQL Expression Field Replacement Parameter
        :type FieldConfig: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        :param _TargetObjectValue: Target Field Name CITY
        :type TargetObjectValue: str
        :param _SourceEngineTypes: Execution engine adapted to the rule
        :type SourceEngineTypes: list of int non-negative
        """
        self._ProjectId = None
        self._RuleId = None
        self._RuleGroupId = None
        self._Name = None
        self._TableId = None
        self._RuleTemplateId = None
        self._Type = None
        self._QualityDim = None
        self._SourceObjectDataTypeName = None
        self._SourceObjectValue = None
        self._ConditionType = None
        self._ConditionExpression = None
        self._CustomSql = None
        self._CompareRule = None
        self._AlarmLevel = None
        self._Description = None
        self._TargetDatabaseId = None
        self._TargetTableId = None
        self._TargetConditionExpr = None
        self._RelConditionExpr = None
        self._FieldConfig = None
        self._TargetObjectValue = None
        self._SourceEngineTypes = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleGroupId(self):
        """Rule Group ID
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def Name(self):
        """Rule name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TableId(self):
        """Data Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def RuleTemplateId(self):
        """Rule Template ID
        :rtype: int
        """
        return self._RuleTemplateId

    @RuleTemplateId.setter
    def RuleTemplateId(self, RuleTemplateId):
        self._RuleTemplateId = RuleTemplateId

    @property
    def Type(self):
        """Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQL
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def QualityDim(self):
        """Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity)
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def SourceObjectDataTypeName(self):
        """Source Field Detailed Type, int, string
        :rtype: str
        """
        return self._SourceObjectDataTypeName

    @SourceObjectDataTypeName.setter
    def SourceObjectDataTypeName(self, SourceObjectDataTypeName):
        self._SourceObjectDataTypeName = SourceObjectDataTypeName

    @property
    def SourceObjectValue(self):
        """Source Field Name
        :rtype: str
        """
        return self._SourceObjectValue

    @SourceObjectValue.setter
    def SourceObjectValue(self, SourceObjectValue):
        self._SourceObjectValue = SourceObjectValue

    @property
    def ConditionType(self):
        """Detection Range 1.Whole Table 2.Conditional Scan
        :rtype: int
        """
        return self._ConditionType

    @ConditionType.setter
    def ConditionType(self, ConditionType):
        self._ConditionType = ConditionType

    @property
    def ConditionExpression(self):
        """Conditional Scan WHERE Condition Expression
        :rtype: str
        """
        return self._ConditionExpression

    @ConditionExpression.setter
    def ConditionExpression(self, ConditionExpression):
        self._ConditionExpression = ConditionExpression

    @property
    def CustomSql(self):
        """Custom Definition SQL
        :rtype: str
        """
        return self._CustomSql

    @CustomSql.setter
    def CustomSql(self, CustomSql):
        self._CustomSql = CustomSql

    @property
    def CompareRule(self):
        """Alert Trigger Condition
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        """
        return self._CompareRule

    @CompareRule.setter
    def CompareRule(self, CompareRule):
        self._CompareRule = CompareRule

    @property
    def AlarmLevel(self):
        """Alert Trigger Level 1.Low, 2.Medium, 3.High
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel

    @property
    def Description(self):
        """Rule Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def TargetDatabaseId(self):
        """Target Database Id
        :rtype: str
        """
        return self._TargetDatabaseId

    @TargetDatabaseId.setter
    def TargetDatabaseId(self, TargetDatabaseId):
        self._TargetDatabaseId = TargetDatabaseId

    @property
    def TargetTableId(self):
        """Target Table Id
        :rtype: str
        """
        return self._TargetTableId

    @TargetTableId.setter
    def TargetTableId(self, TargetTableId):
        self._TargetTableId = TargetTableId

    @property
    def TargetConditionExpr(self):
        """Target Filter Condition Expression
        :rtype: str
        """
        return self._TargetConditionExpr

    @TargetConditionExpr.setter
    def TargetConditionExpr(self, TargetConditionExpr):
        self._TargetConditionExpr = TargetConditionExpr

    @property
    def RelConditionExpr(self):
        """Source Field and Target Field Association Condition ON Expression
        :rtype: str
        """
        return self._RelConditionExpr

    @RelConditionExpr.setter
    def RelConditionExpr(self, RelConditionExpr):
        self._RelConditionExpr = RelConditionExpr

    @property
    def FieldConfig(self):
        """Custom Definition Template SQL Expression Field Replacement Parameter
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        """
        return self._FieldConfig

    @FieldConfig.setter
    def FieldConfig(self, FieldConfig):
        self._FieldConfig = FieldConfig

    @property
    def TargetObjectValue(self):
        """Target Field Name CITY
        :rtype: str
        """
        return self._TargetObjectValue

    @TargetObjectValue.setter
    def TargetObjectValue(self, TargetObjectValue):
        self._TargetObjectValue = TargetObjectValue

    @property
    def SourceEngineTypes(self):
        """Execution engine adapted to the rule
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RuleId = params.get("RuleId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._Name = params.get("Name")
        self._TableId = params.get("TableId")
        self._RuleTemplateId = params.get("RuleTemplateId")
        self._Type = params.get("Type")
        self._QualityDim = params.get("QualityDim")
        self._SourceObjectDataTypeName = params.get("SourceObjectDataTypeName")
        self._SourceObjectValue = params.get("SourceObjectValue")
        self._ConditionType = params.get("ConditionType")
        self._ConditionExpression = params.get("ConditionExpression")
        self._CustomSql = params.get("CustomSql")
        if params.get("CompareRule") is not None:
            self._CompareRule = CompareRule()
            self._CompareRule._deserialize(params.get("CompareRule"))
        self._AlarmLevel = params.get("AlarmLevel")
        self._Description = params.get("Description")
        self._TargetDatabaseId = params.get("TargetDatabaseId")
        self._TargetTableId = params.get("TargetTableId")
        self._TargetConditionExpr = params.get("TargetConditionExpr")
        self._RelConditionExpr = params.get("RelConditionExpr")
        if params.get("FieldConfig") is not None:
            self._FieldConfig = RuleFieldConfig()
            self._FieldConfig._deserialize(params.get("FieldConfig"))
        self._TargetObjectValue = params.get("TargetObjectValue")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRuleResponse(AbstractModel):
    """ModifyRule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Whether Update Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Whether Update Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyRuleTemplateRequest(AbstractModel):
    """ModifyRuleTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _TemplateId: Template ID
        :type TemplateId: int
        :param _Type: Template Type 1. System Template 2. Custom Definition Template
        :type Type: int
        :param _Name: Template Name
        :type Name: str
        :param _QualityDim: Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
        :type QualityDim: int
        :param _SourceObjectType: Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
        :type SourceObjectType: int
        :param _Description: Description
        :type Description: str
        :param _SourceEngineTypes: Corresponding Engine Type of the Source
        :type SourceEngineTypes: list of int non-negative
        :param _MultiSourceFlag: Whether to Associate with Other Databases and Tables
        :type MultiSourceFlag: bool
        :param _SqlExpression: SQL Expression
        :type SqlExpression: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WhereFlag: Whether to add where parameter
        :type WhereFlag: bool
        """
        self._TemplateId = None
        self._Type = None
        self._Name = None
        self._QualityDim = None
        self._SourceObjectType = None
        self._Description = None
        self._SourceEngineTypes = None
        self._MultiSourceFlag = None
        self._SqlExpression = None
        self._ProjectId = None
        self._WhereFlag = None

    @property
    def TemplateId(self):
        """Template ID
        :rtype: int
        """
        return self._TemplateId

    @TemplateId.setter
    def TemplateId(self, TemplateId):
        self._TemplateId = TemplateId

    @property
    def Type(self):
        """Template Type 1. System Template 2. Custom Definition Template
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Name(self):
        """Template Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def QualityDim(self):
        """Quality Inspection Dimension 1. Accuracy 2. Uniqueness 3. Integrity 4. Consistency 5. Timeliness 6. Validity
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def SourceObjectType(self):
        """Source Data Object Type 1. Constant 2. Offline Table Level 2. Offline Field Level
        :rtype: int
        """
        return self._SourceObjectType

    @SourceObjectType.setter
    def SourceObjectType(self, SourceObjectType):
        self._SourceObjectType = SourceObjectType

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def SourceEngineTypes(self):
        """Corresponding Engine Type of the Source
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes

    @property
    def MultiSourceFlag(self):
        """Whether to Associate with Other Databases and Tables
        :rtype: bool
        """
        return self._MultiSourceFlag

    @MultiSourceFlag.setter
    def MultiSourceFlag(self, MultiSourceFlag):
        self._MultiSourceFlag = MultiSourceFlag

    @property
    def SqlExpression(self):
        """SQL Expression
        :rtype: str
        """
        return self._SqlExpression

    @SqlExpression.setter
    def SqlExpression(self, SqlExpression):
        self._SqlExpression = SqlExpression

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WhereFlag(self):
        """Whether to add where parameter
        :rtype: bool
        """
        return self._WhereFlag

    @WhereFlag.setter
    def WhereFlag(self, WhereFlag):
        self._WhereFlag = WhereFlag


    def _deserialize(self, params):
        self._TemplateId = params.get("TemplateId")
        self._Type = params.get("Type")
        self._Name = params.get("Name")
        self._QualityDim = params.get("QualityDim")
        self._SourceObjectType = params.get("SourceObjectType")
        self._Description = params.get("Description")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        self._MultiSourceFlag = params.get("MultiSourceFlag")
        self._SqlExpression = params.get("SqlExpression")
        self._ProjectId = params.get("ProjectId")
        self._WhereFlag = params.get("WhereFlag")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRuleTemplateResponse(AbstractModel):
    """ModifyRuleTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Modification successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Modification successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyTaskAlarmRegularRequest(AbstractModel):
    """ModifyTaskAlarmRegular request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: str
        :param _TaskAlarmInfo: Rule Information
        :type TaskAlarmInfo: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._Id = None
        self._TaskAlarmInfo = None
        self._ProjectId = None

    @property
    def Id(self):
        """Rule ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TaskAlarmInfo(self):
        """Rule Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskAlarmInfo`
        """
        return self._TaskAlarmInfo

    @TaskAlarmInfo.setter
    def TaskAlarmInfo(self, TaskAlarmInfo):
        self._TaskAlarmInfo = TaskAlarmInfo

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        if params.get("TaskAlarmInfo") is not None:
            self._TaskAlarmInfo = TaskAlarmInfo()
            self._TaskAlarmInfo._deserialize(params.get("TaskAlarmInfo"))
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskAlarmRegularResponse(AbstractModel):
    """ModifyTaskAlarmRegular response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Modify Successfully Determined?
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Modify Successfully Determined?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyTaskInfoRequest(AbstractModel):
    """ModifyTaskInfo request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _DelayTime: Execution time, in minutes, applicable to daily/weekly/monthly/yearly scheduling. For example, with daily scheduling, executing once at 02:00 AM every day, delayTime is 120 minutes
        :type DelayTime: int
        :param _StartupTime: Start Time
        :type StartupTime: int
        :param _SelfDepend: Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
        :type SelfDepend: int
        :param _StartTime: Effective Start Time, format yyyy-MM-dd HH:mm:ss
        :type StartTime: str
        :param _EndTime: Effective End Time, format yyyy-MM-dd HH:mm:ss
        :type EndTime: str
        :param _TaskAction: Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
        :type TaskAction: str
        :param _CycleType: "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
        :type CycleType: int
        :param _CycleStep: Step Length, Interval Time, minimum of 1
        :type CycleStep: int
        :param _CrontabExpression: Cron Expression is required only for Cron Tab Scheduling
        :type CrontabExpression: str
        :param _ExecutionStartTime: Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :type ExecutionStartTime: str
        :param _ExecutionEndTime: Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :type ExecutionEndTime: str
        :param _TaskName: New Task Name
        :type TaskName: str
        :param _RetryWait: Failure Retry Interval, in minutes, a default value has already been provided during task creation
        :type RetryWait: int
        :param _TryLimit: Number of Retry Attempts on Failure, a default value has already been provided during task creation
        :type TryLimit: int
        :param _Retriable: Whether to Retry, 1 for yes
        :type Retriable: int
        :param _RunPriority: Running Priority, 4 for High, 5 for Medium, 6 for Low
        :type RunPriority: int
        :param _TaskExt: Extended Task Configuration
        :type TaskExt: list of TaskExtInfo
        :param _ResourceGroup: Execution Resource Group ID, needs to be created on the Resource Management Service and bind to a CVM machine
        :type ResourceGroup: str
        :param _YarnQueue: Resource Pool Queue Name
        :type YarnQueue: str
        :param _BrokerIp: Specific Execution Machine under Resource Group, 'any' means it can run on any machine.
        :type BrokerIp: str
        :param _InCharge: Person in Charge
        :type InCharge: str
        :param _Notes: Task notes
        :type Notes: str
        :param _TaskParamInfos: Task Parameters
        :type TaskParamInfos: list of ParamInfo
        :param _SourceServer: Source Data Source
        :type SourceServer: str
        :param _TargetServer: Target Data Source
        :type TargetServer: str
        :param _DependencyWorkflow: Supports Workflow Dependencies yes/no, default no
        :type DependencyWorkflow: str
        :param _DependencyConfigDTOs: Dependency Configuration
        :type DependencyConfigDTOs: list of DependencyConfig
        :param _ExecutionTTL: Execution Duration
        :type ExecutionTTL: int
        :param _ScriptChange: Whether the Script has Changed
        :type ScriptChange: bool
        :param _InChargeIds: Responsible Person ID
        :type InChargeIds: list of str
        """
        self._ProjectId = None
        self._TaskId = None
        self._DelayTime = None
        self._StartupTime = None
        self._SelfDepend = None
        self._StartTime = None
        self._EndTime = None
        self._TaskAction = None
        self._CycleType = None
        self._CycleStep = None
        self._CrontabExpression = None
        self._ExecutionStartTime = None
        self._ExecutionEndTime = None
        self._TaskName = None
        self._RetryWait = None
        self._TryLimit = None
        self._Retriable = None
        self._RunPriority = None
        self._TaskExt = None
        self._ResourceGroup = None
        self._YarnQueue = None
        self._BrokerIp = None
        self._InCharge = None
        self._Notes = None
        self._TaskParamInfos = None
        self._SourceServer = None
        self._TargetServer = None
        self._DependencyWorkflow = None
        self._DependencyConfigDTOs = None
        self._ExecutionTTL = None
        self._ScriptChange = None
        self._InChargeIds = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DelayTime(self):
        """Execution time, in minutes, applicable to daily/weekly/monthly/yearly scheduling. For example, with daily scheduling, executing once at 02:00 AM every day, delayTime is 120 minutes
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def StartupTime(self):
        """Start Time
        :rtype: int
        """
        return self._StartupTime

    @StartupTime.setter
    def StartupTime(self, StartupTime):
        self._StartupTime = StartupTime

    @property
    def SelfDepend(self):
        """Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
        :rtype: int
        """
        return self._SelfDepend

    @SelfDepend.setter
    def SelfDepend(self, SelfDepend):
        self._SelfDepend = SelfDepend

    @property
    def StartTime(self):
        """Effective Start Time, format yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Effective End Time, format yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TaskAction(self):
        """Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def CycleType(self):
        """"Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
        :rtype: int
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Step Length, Interval Time, minimum of 1
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def CrontabExpression(self):
        """Cron Expression is required only for Cron Tab Scheduling
        :rtype: str
        """
        return self._CrontabExpression

    @CrontabExpression.setter
    def CrontabExpression(self, CrontabExpression):
        self._CrontabExpression = CrontabExpression

    @property
    def ExecutionStartTime(self):
        """Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def ExecutionEndTime(self):
        """Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def TaskName(self):
        """New Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def RetryWait(self):
        """Failure Retry Interval, in minutes, a default value has already been provided during task creation
        :rtype: int
        """
        return self._RetryWait

    @RetryWait.setter
    def RetryWait(self, RetryWait):
        self._RetryWait = RetryWait

    @property
    def TryLimit(self):
        """Number of Retry Attempts on Failure, a default value has already been provided during task creation
        :rtype: int
        """
        return self._TryLimit

    @TryLimit.setter
    def TryLimit(self, TryLimit):
        self._TryLimit = TryLimit

    @property
    def Retriable(self):
        """Whether to Retry, 1 for yes
        :rtype: int
        """
        return self._Retriable

    @Retriable.setter
    def Retriable(self, Retriable):
        self._Retriable = Retriable

    @property
    def RunPriority(self):
        """Running Priority, 4 for High, 5 for Medium, 6 for Low
        :rtype: int
        """
        return self._RunPriority

    @RunPriority.setter
    def RunPriority(self, RunPriority):
        self._RunPriority = RunPriority

    @property
    def TaskExt(self):
        """Extended Task Configuration
        :rtype: list of TaskExtInfo
        """
        return self._TaskExt

    @TaskExt.setter
    def TaskExt(self, TaskExt):
        self._TaskExt = TaskExt

    @property
    def ResourceGroup(self):
        """Execution Resource Group ID, needs to be created on the Resource Management Service and bind to a CVM machine
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup

    @property
    def YarnQueue(self):
        """Resource Pool Queue Name
        :rtype: str
        """
        return self._YarnQueue

    @YarnQueue.setter
    def YarnQueue(self, YarnQueue):
        self._YarnQueue = YarnQueue

    @property
    def BrokerIp(self):
        """Specific Execution Machine under Resource Group, 'any' means it can run on any machine.
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def InCharge(self):
        warnings.warn("parameter `InCharge` is deprecated", DeprecationWarning) 

        """Person in Charge
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        warnings.warn("parameter `InCharge` is deprecated", DeprecationWarning) 

        self._InCharge = InCharge

    @property
    def Notes(self):
        """Task notes
        :rtype: str
        """
        return self._Notes

    @Notes.setter
    def Notes(self, Notes):
        self._Notes = Notes

    @property
    def TaskParamInfos(self):
        """Task Parameters
        :rtype: list of ParamInfo
        """
        return self._TaskParamInfos

    @TaskParamInfos.setter
    def TaskParamInfos(self, TaskParamInfos):
        self._TaskParamInfos = TaskParamInfos

    @property
    def SourceServer(self):
        """Source Data Source
        :rtype: str
        """
        return self._SourceServer

    @SourceServer.setter
    def SourceServer(self, SourceServer):
        self._SourceServer = SourceServer

    @property
    def TargetServer(self):
        """Target Data Source
        :rtype: str
        """
        return self._TargetServer

    @TargetServer.setter
    def TargetServer(self, TargetServer):
        self._TargetServer = TargetServer

    @property
    def DependencyWorkflow(self):
        """Supports Workflow Dependencies yes/no, default no
        :rtype: str
        """
        return self._DependencyWorkflow

    @DependencyWorkflow.setter
    def DependencyWorkflow(self, DependencyWorkflow):
        self._DependencyWorkflow = DependencyWorkflow

    @property
    def DependencyConfigDTOs(self):
        """Dependency Configuration
        :rtype: list of DependencyConfig
        """
        return self._DependencyConfigDTOs

    @DependencyConfigDTOs.setter
    def DependencyConfigDTOs(self, DependencyConfigDTOs):
        self._DependencyConfigDTOs = DependencyConfigDTOs

    @property
    def ExecutionTTL(self):
        """Execution Duration
        :rtype: int
        """
        return self._ExecutionTTL

    @ExecutionTTL.setter
    def ExecutionTTL(self, ExecutionTTL):
        self._ExecutionTTL = ExecutionTTL

    @property
    def ScriptChange(self):
        """Whether the Script has Changed
        :rtype: bool
        """
        return self._ScriptChange

    @ScriptChange.setter
    def ScriptChange(self, ScriptChange):
        self._ScriptChange = ScriptChange

    @property
    def InChargeIds(self):
        """Responsible Person ID
        :rtype: list of str
        """
        return self._InChargeIds

    @InChargeIds.setter
    def InChargeIds(self, InChargeIds):
        self._InChargeIds = InChargeIds


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._DelayTime = params.get("DelayTime")
        self._StartupTime = params.get("StartupTime")
        self._SelfDepend = params.get("SelfDepend")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._TaskAction = params.get("TaskAction")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._CrontabExpression = params.get("CrontabExpression")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._TaskName = params.get("TaskName")
        self._RetryWait = params.get("RetryWait")
        self._TryLimit = params.get("TryLimit")
        self._Retriable = params.get("Retriable")
        self._RunPriority = params.get("RunPriority")
        if params.get("TaskExt") is not None:
            self._TaskExt = []
            for item in params.get("TaskExt"):
                obj = TaskExtInfo()
                obj._deserialize(item)
                self._TaskExt.append(obj)
        self._ResourceGroup = params.get("ResourceGroup")
        self._YarnQueue = params.get("YarnQueue")
        self._BrokerIp = params.get("BrokerIp")
        self._InCharge = params.get("InCharge")
        self._Notes = params.get("Notes")
        if params.get("TaskParamInfos") is not None:
            self._TaskParamInfos = []
            for item in params.get("TaskParamInfos"):
                obj = ParamInfo()
                obj._deserialize(item)
                self._TaskParamInfos.append(obj)
        self._SourceServer = params.get("SourceServer")
        self._TargetServer = params.get("TargetServer")
        self._DependencyWorkflow = params.get("DependencyWorkflow")
        if params.get("DependencyConfigDTOs") is not None:
            self._DependencyConfigDTOs = []
            for item in params.get("DependencyConfigDTOs"):
                obj = DependencyConfig()
                obj._deserialize(item)
                self._DependencyConfigDTOs.append(obj)
        self._ExecutionTTL = params.get("ExecutionTTL")
        self._ScriptChange = params.get("ScriptChange")
        self._InChargeIds = params.get("InChargeIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskInfoResponse(AbstractModel):
    """ModifyTaskInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Execution Result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Execution Result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyTaskLinksRequest(AbstractModel):
    """ModifyTaskLinks request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskFrom: Parent Task ID
        :type TaskFrom: str
        :param _TaskTo: Subtask ID
        :type TaskTo: str
        :param _WorkflowId: Subtask Workflow
        :type WorkflowId: str
        :param _RealFromWorkflowId: Parent Task Workflow
        :type RealFromWorkflowId: str
        :param _LinkDependencyType: Dependency Relationship Between Parent and Child Tasks
        :type LinkDependencyType: str
        """
        self._ProjectId = None
        self._TaskFrom = None
        self._TaskTo = None
        self._WorkflowId = None
        self._RealFromWorkflowId = None
        self._LinkDependencyType = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskFrom(self):
        """Parent Task ID
        :rtype: str
        """
        return self._TaskFrom

    @TaskFrom.setter
    def TaskFrom(self, TaskFrom):
        self._TaskFrom = TaskFrom

    @property
    def TaskTo(self):
        """Subtask ID
        :rtype: str
        """
        return self._TaskTo

    @TaskTo.setter
    def TaskTo(self, TaskTo):
        self._TaskTo = TaskTo

    @property
    def WorkflowId(self):
        """Subtask Workflow
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def RealFromWorkflowId(self):
        """Parent Task Workflow
        :rtype: str
        """
        return self._RealFromWorkflowId

    @RealFromWorkflowId.setter
    def RealFromWorkflowId(self, RealFromWorkflowId):
        self._RealFromWorkflowId = RealFromWorkflowId

    @property
    def LinkDependencyType(self):
        """Dependency Relationship Between Parent and Child Tasks
        :rtype: str
        """
        return self._LinkDependencyType

    @LinkDependencyType.setter
    def LinkDependencyType(self, LinkDependencyType):
        self._LinkDependencyType = LinkDependencyType


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskFrom = params.get("TaskFrom")
        self._TaskTo = params.get("TaskTo")
        self._WorkflowId = params.get("WorkflowId")
        self._RealFromWorkflowId = params.get("RealFromWorkflowId")
        self._LinkDependencyType = params.get("LinkDependencyType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskLinksResponse(AbstractModel):
    """ModifyTaskLinks response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyTaskNameRequest(AbstractModel):
    """ModifyTaskName request structure.

    """

    def __init__(self):
        r"""
        :param _TaskName: Name
        :type TaskName: str
        :param _TaskId: id
        :type TaskId: str
        :param _ProjectId: Project/workspace ID
        :type ProjectId: str
        :param _Notes: Remarks
        :type Notes: str
        """
        self._TaskName = None
        self._TaskId = None
        self._ProjectId = None
        self._Notes = None

    @property
    def TaskName(self):
        """Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskId(self):
        """id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project/workspace ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Notes(self):
        """Remarks
        :rtype: str
        """
        return self._Notes

    @Notes.setter
    def Notes(self, Notes):
        self._Notes = Notes


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._Notes = params.get("Notes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskNameResponse(AbstractModel):
    """ModifyTaskName response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyTaskScriptRequest(AbstractModel):
    """ModifyTaskScript request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ScriptContent: Script content Base64 encoded
        :type ScriptContent: str
        :param _IntegrationNodeDetails: Integrated Task Script Configuration
        :type IntegrationNodeDetails: list of IntegrationNodeDetail
        """
        self._ProjectId = None
        self._TaskId = None
        self._ScriptContent = None
        self._IntegrationNodeDetails = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ScriptContent(self):
        """Script content Base64 encoded
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def IntegrationNodeDetails(self):
        """Integrated Task Script Configuration
        :rtype: list of IntegrationNodeDetail
        """
        return self._IntegrationNodeDetails

    @IntegrationNodeDetails.setter
    def IntegrationNodeDetails(self, IntegrationNodeDetails):
        self._IntegrationNodeDetails = IntegrationNodeDetails


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._ScriptContent = params.get("ScriptContent")
        if params.get("IntegrationNodeDetails") is not None:
            self._IntegrationNodeDetails = []
            for item in params.get("IntegrationNodeDetails"):
                obj = IntegrationNodeDetail()
                obj._deserialize(item)
                self._IntegrationNodeDetails.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskScriptResponse(AbstractModel):
    """ModifyTaskScript response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.CommonContent`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CommonContent`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = CommonContent()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class ModifyWorkflowInfoRequest(AbstractModel):
    """ModifyWorkflowInfo request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _Owner: Person in Charge
        :type Owner: str
        :param _OwnerId: Responsible Person ID
        :type OwnerId: str
        :param _WorkflowDesc: Remarks
        :type WorkflowDesc: str
        :param _WorkflowName: Workflow name
        :type WorkflowName: str
        :param _FolderId: Parent Folder ID
        :type FolderId: str
        :param _UserGroupId: Workflow User Group ID If multiple, separated by semicolons: a;b;c
        :type UserGroupId: str
        :param _UserGroupName: Workflow User Group Name If multiple, separated by semicolons: a;b;c
        :type UserGroupName: str
        :param _WorkflowParams: Workflow Parameter List
        :type WorkflowParams: list of ParamInfo
        :param _GeneralTaskParams: Used to configure optimized parameters (Thread, Memory, CPU Core Count, etc.), applicable only to Spark SQL Node. Separate multiple parameters with English semicolons.
        :type GeneralTaskParams: list of GeneralTaskParam
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._Owner = None
        self._OwnerId = None
        self._WorkflowDesc = None
        self._WorkflowName = None
        self._FolderId = None
        self._UserGroupId = None
        self._UserGroupName = None
        self._WorkflowParams = None
        self._GeneralTaskParams = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def Owner(self):
        """Person in Charge
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def OwnerId(self):
        """Responsible Person ID
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId

    @property
    def WorkflowDesc(self):
        """Remarks
        :rtype: str
        """
        return self._WorkflowDesc

    @WorkflowDesc.setter
    def WorkflowDesc(self, WorkflowDesc):
        self._WorkflowDesc = WorkflowDesc

    @property
    def WorkflowName(self):
        """Workflow name
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def FolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def UserGroupId(self):
        """Workflow User Group ID If multiple, separated by semicolons: a;b;c
        :rtype: str
        """
        return self._UserGroupId

    @UserGroupId.setter
    def UserGroupId(self, UserGroupId):
        self._UserGroupId = UserGroupId

    @property
    def UserGroupName(self):
        """Workflow User Group Name If multiple, separated by semicolons: a;b;c
        :rtype: str
        """
        return self._UserGroupName

    @UserGroupName.setter
    def UserGroupName(self, UserGroupName):
        self._UserGroupName = UserGroupName

    @property
    def WorkflowParams(self):
        """Workflow Parameter List
        :rtype: list of ParamInfo
        """
        return self._WorkflowParams

    @WorkflowParams.setter
    def WorkflowParams(self, WorkflowParams):
        self._WorkflowParams = WorkflowParams

    @property
    def GeneralTaskParams(self):
        """Used to configure optimized parameters (Thread, Memory, CPU Core Count, etc.), applicable only to Spark SQL Node. Separate multiple parameters with English semicolons.
        :rtype: list of GeneralTaskParam
        """
        return self._GeneralTaskParams

    @GeneralTaskParams.setter
    def GeneralTaskParams(self, GeneralTaskParams):
        self._GeneralTaskParams = GeneralTaskParams


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._Owner = params.get("Owner")
        self._OwnerId = params.get("OwnerId")
        self._WorkflowDesc = params.get("WorkflowDesc")
        self._WorkflowName = params.get("WorkflowName")
        self._FolderId = params.get("FolderId")
        self._UserGroupId = params.get("UserGroupId")
        self._UserGroupName = params.get("UserGroupName")
        if params.get("WorkflowParams") is not None:
            self._WorkflowParams = []
            for item in params.get("WorkflowParams"):
                obj = ParamInfo()
                obj._deserialize(item)
                self._WorkflowParams.append(obj)
        if params.get("GeneralTaskParams") is not None:
            self._GeneralTaskParams = []
            for item in params.get("GeneralTaskParams"):
                obj = GeneralTaskParam()
                obj._deserialize(item)
                self._GeneralTaskParams.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWorkflowInfoResponse(AbstractModel):
    """ModifyWorkflowInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Data: true indicates success, false indicates failure
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """true indicates success, false indicates failure
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ModifyWorkflowScheduleRequest(AbstractModel):
    """ModifyWorkflowSchedule request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _DelayTime: Delay time, in minutes
        :type DelayTime: int
        :param _StartupTime: Start Time
        :type StartupTime: int
        :param _SelfDepend: Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
        :type SelfDepend: int
        :param _CycleType: "Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
        :type CycleType: int
        :param _CycleStep: Step Length, Interval Time, minimum of 1
        :type CycleStep: int
        :param _StartTime: Effective Start Time, format yyyy-MM-dd HH:mm:ss
        :type StartTime: str
        :param _EndTime: Effective End Time, format yyyy-MM-dd HH:mm:ss
        :type EndTime: str
        :param _TaskAction: Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
        :type TaskAction: str
        :param _CrontabExpression: Cron Expression is required only for Cron Tab Scheduling
        :type CrontabExpression: str
        :param _ExecutionStartTime: Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :type ExecutionStartTime: str
        :param _ExecutionEndTime: Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :type ExecutionEndTime: str
        :param _DependencyWorkflow: Workflow Dependency, yes or no
        :type DependencyWorkflow: str
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._DelayTime = None
        self._StartupTime = None
        self._SelfDepend = None
        self._CycleType = None
        self._CycleStep = None
        self._StartTime = None
        self._EndTime = None
        self._TaskAction = None
        self._CrontabExpression = None
        self._ExecutionStartTime = None
        self._ExecutionEndTime = None
        self._DependencyWorkflow = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def DelayTime(self):
        """Delay time, in minutes
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def StartupTime(self):
        """Start Time
        :rtype: int
        """
        return self._StartupTime

    @StartupTime.setter
    def StartupTime(self, StartupTime):
        self._StartupTime = StartupTime

    @property
    def SelfDepend(self):
        """Self-Dependency Type  1: Sequential serial, one at a time, queued, 2: Unordered serial, one at a time, not queued, 3: Parallel, multiple at once
        :rtype: int
        """
        return self._SelfDepend

    @SelfDepend.setter
    def SelfDepend(self, SelfDepend):
        self._SelfDepend = SelfDepend

    @property
    def CycleType(self):
        """"Cycle Type  0:crontab, 1:Minute,2:Hour,3:Day,4:Week,5:Month,6:One-time,7:User driven,10:Flexible cycle Week,11:Flexible cycle Month,12:Year,13:Immediate Trigger Instant type, isolated from normal cycle scheduling task logic
        :rtype: int
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Step Length, Interval Time, minimum of 1
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def StartTime(self):
        """Effective Start Time, format yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Effective End Time, format yyyy-MM-dd HH:mm:ss
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TaskAction(self):
        """Scheduling Configuration - Elastic Cycle Configuration, applicable to Hourly/Weekly/Monthly/Yearly schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def CrontabExpression(self):
        """Cron Expression is required only for Cron Tab Scheduling
        :rtype: str
        """
        return self._CrontabExpression

    @CrontabExpression.setter
    def CrontabExpression(self, CrontabExpression):
        self._CrontabExpression = CrontabExpression

    @property
    def ExecutionStartTime(self):
        """Execution Time Left Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def ExecutionEndTime(self):
        """Execution Time Right Closed Interval, format: HH:mm. Applicable only to hourly scheduling. For example, for hourly tasks, it specifies the effective interval every day
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def DependencyWorkflow(self):
        """Workflow Dependency, yes or no
        :rtype: str
        """
        return self._DependencyWorkflow

    @DependencyWorkflow.setter
    def DependencyWorkflow(self, DependencyWorkflow):
        self._DependencyWorkflow = DependencyWorkflow


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._DelayTime = params.get("DelayTime")
        self._StartupTime = params.get("StartupTime")
        self._SelfDepend = params.get("SelfDepend")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._TaskAction = params.get("TaskAction")
        self._CrontabExpression = params.get("CrontabExpression")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._DependencyWorkflow = params.get("DependencyWorkflow")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWorkflowScheduleResponse(AbstractModel):
    """ModifyWorkflowSchedule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Execution Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchResult`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Execution Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchResult`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchResult()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class MoveTasksToFolderRequest(AbstractModel):
    """MoveTasksToFolder request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _TaskFolderId: Task Folder ID
        :type TaskFolderId: str
        :param _TaskIds: Task ID
        :type TaskIds: list of str
        :param _VirtualTaskIds: Virtual Task ID
        :type VirtualTaskIds: list of str
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._TaskFolderId = None
        self._TaskIds = None
        self._VirtualTaskIds = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def TaskFolderId(self):
        """Task Folder ID
        :rtype: str
        """
        return self._TaskFolderId

    @TaskFolderId.setter
    def TaskFolderId(self, TaskFolderId):
        self._TaskFolderId = TaskFolderId

    @property
    def TaskIds(self):
        """Task ID
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def VirtualTaskIds(self):
        """Virtual Task ID
        :rtype: list of str
        """
        return self._VirtualTaskIds

    @VirtualTaskIds.setter
    def VirtualTaskIds(self, VirtualTaskIds):
        self._VirtualTaskIds = VirtualTaskIds


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._TaskFolderId = params.get("TaskFolderId")
        self._TaskIds = params.get("TaskIds")
        self._VirtualTaskIds = params.get("VirtualTaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MoveTasksToFolderResponse(AbstractModel):
    """MoveTasksToFolder response structure.

    """

    def __init__(self):
        r"""
        :param _Data: true represents success
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """true represents success
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class OfflineInstance(AbstractModel):
    """Offline Instance

    """

    def __init__(self):
        r"""
        :param _CreateUin: Create Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateUin: str
        :param _OperatorUin: Operate Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUin: str
        :param _OwnerUin: Primary AccountNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUin: str
        :param _AppId: AccountsNote: This field may return null, indicating that no valid value can be obtained.
        :type AppId: str
        :param _WorkspaceId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkspaceId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Data Timestamp
        :type CurRunDate: str
        :param _IssueId: Issuance time
        :type IssueId: str
        :param _InlongTaskId: Resource Group ID Issuance, not an input item
Note: This field may return null, indicating that no valid value can be obtained.
        :type InlongTaskId: str
        :param _ResourceGroup: Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceGroup: str
        :param _TaskRunType: Task Type (1 Debugging, 2 Scheduled Execution)
        :type TaskRunType: int
        :param _State: Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED|COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
        :type State: str
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Last Updated Time
        :type UpdateTime: str
        :param _InstanceKey: Unique Key
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceKey: str
        """
        self._CreateUin = None
        self._OperatorUin = None
        self._OwnerUin = None
        self._AppId = None
        self._WorkspaceId = None
        self._TaskId = None
        self._CurRunDate = None
        self._IssueId = None
        self._InlongTaskId = None
        self._ResourceGroup = None
        self._TaskRunType = None
        self._State = None
        self._StartTime = None
        self._EndTime = None
        self._CreateTime = None
        self._UpdateTime = None
        self._InstanceKey = None

    @property
    def CreateUin(self):
        """Create Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateUin

    @CreateUin.setter
    def CreateUin(self, CreateUin):
        self._CreateUin = CreateUin

    @property
    def OperatorUin(self):
        """Operate Account Sub UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OperatorUin

    @OperatorUin.setter
    def OperatorUin(self, OperatorUin):
        self._OperatorUin = OperatorUin

    @property
    def OwnerUin(self):
        """Primary AccountNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerUin

    @OwnerUin.setter
    def OwnerUin(self, OwnerUin):
        self._OwnerUin = OwnerUin

    @property
    def AppId(self):
        """AccountsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def WorkspaceId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkspaceId

    @WorkspaceId.setter
    def WorkspaceId(self, WorkspaceId):
        self._WorkspaceId = WorkspaceId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Data Timestamp
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate

    @property
    def IssueId(self):
        """Issuance time
        :rtype: str
        """
        return self._IssueId

    @IssueId.setter
    def IssueId(self, IssueId):
        self._IssueId = IssueId

    @property
    def InlongTaskId(self):
        """Resource Group ID Issuance, not an input item
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InlongTaskId

    @InlongTaskId.setter
    def InlongTaskId(self, InlongTaskId):
        self._InlongTaskId = InlongTaskId

    @property
    def ResourceGroup(self):
        """Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup

    @property
    def TaskRunType(self):
        """Task Type (1 Debugging, 2 Scheduled Execution)
        :rtype: int
        """
        return self._TaskRunType

    @TaskRunType.setter
    def TaskRunType(self, TaskRunType):
        self._TaskRunType = TaskRunType

    @property
    def State(self):
        """Instance status EVENT_LISTENING|DEPENDENCE|BEFORE_ASPECT|ALLOCATED|LAUNCHED|KILL|SNAP_STATE_SAVING|ISSUED|RUNNING|AFTER_ASPECT|PENDING|KILLING|FINAL_STATE_SAVING|FAILED|KILL_FAILED|COMPLETED|EXPIRED|KILL_EXPIRED|DELETED
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Last Updated Time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def InstanceKey(self):
        """Unique Key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceKey

    @InstanceKey.setter
    def InstanceKey(self, InstanceKey):
        self._InstanceKey = InstanceKey


    def _deserialize(self, params):
        self._CreateUin = params.get("CreateUin")
        self._OperatorUin = params.get("OperatorUin")
        self._OwnerUin = params.get("OwnerUin")
        self._AppId = params.get("AppId")
        self._WorkspaceId = params.get("WorkspaceId")
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        self._IssueId = params.get("IssueId")
        self._InlongTaskId = params.get("InlongTaskId")
        self._ResourceGroup = params.get("ResourceGroup")
        self._TaskRunType = params.get("TaskRunType")
        self._State = params.get("State")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._InstanceKey = params.get("InstanceKey")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OfflineTaskAddParam(AbstractModel):
    """New Parameter for Offline Task

    """

    def __init__(self):
        r"""
        :param _WorkflowName: Name
        :type WorkflowName: str
        :param _DependencyWorkflow: Dependencies: yes, no
        :type DependencyWorkflow: str
        :param _StartTime: Task Start Data Time. Not Empty. Default to Current Time
        :type StartTime: str
        :param _EndTime: Task End Data Time. Not Empty. Default to Current Time
        :type EndTime: str
        :param _CycleType: Cycle Type. One-time task: 6, Minute Task: 1, Hourly task: 2, Daily Task: 3, Weekly Task: 4, Monthly Task: 5, Cron task: 0
        :type CycleType: int
        :param _CycleStep: Interval, optional, default is 1. Not null. Default is 1
        :type CycleStep: int
        :param _DelayTime: Delayed Execution Time, in minutes
        :type DelayTime: int
        :param _CrontabExpression: Task cron expression, used only for cron tasks, else defaults to empty
Note: This field may return null, indicating that no valid value can be obtained.
        :type CrontabExpression: str
        :param _RetryWait: Retry Wait
        :type RetryWait: int
        :param _Retriable: Is Retry Allowed
        :type Retriable: int
        :param _TryLimit: Retry Limit
        :type TryLimit: int
        :param _RunPriority: Priority
        :type RunPriority: int
        :param _ProductName: Product
        :type ProductName: str
        :param _SelfDepend: 1 Ordered Serialization, one at a time, queued orderly
2 Unordered Serial, one at a time, not queued serial
3 Parallel, multiple at a time parallel
        :type SelfDepend: int
        :param _TaskAction: Time Specification, such as 1,3 for monthly tasks, enter 1,3. Not empty. Default ""
Monthly Task: for specific days like "1,3", specifying end of month as "L" alone, cannot be mixed with specific dates
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _ExecutionEndTime: Scheduled Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionEndTime: str
        :param _ExecutionStartTime: Scheduled Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionStartTime: str
        :param _TaskAutoSubmit: Is Auto-submit
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAutoSubmit: bool
        :param _InstanceInitStrategy: Instance Generation Method, T_PLUS_0 schedule task on the same day / T_PLUS_1 schedule task the next day
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceInitStrategy: str
        """
        self._WorkflowName = None
        self._DependencyWorkflow = None
        self._StartTime = None
        self._EndTime = None
        self._CycleType = None
        self._CycleStep = None
        self._DelayTime = None
        self._CrontabExpression = None
        self._RetryWait = None
        self._Retriable = None
        self._TryLimit = None
        self._RunPriority = None
        self._ProductName = None
        self._SelfDepend = None
        self._TaskAction = None
        self._ExecutionEndTime = None
        self._ExecutionStartTime = None
        self._TaskAutoSubmit = None
        self._InstanceInitStrategy = None

    @property
    def WorkflowName(self):
        """Name
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def DependencyWorkflow(self):
        """Dependencies: yes, no
        :rtype: str
        """
        return self._DependencyWorkflow

    @DependencyWorkflow.setter
    def DependencyWorkflow(self, DependencyWorkflow):
        self._DependencyWorkflow = DependencyWorkflow

    @property
    def StartTime(self):
        """Task Start Data Time. Not Empty. Default to Current Time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Task End Data Time. Not Empty. Default to Current Time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CycleType(self):
        """Cycle Type. One-time task: 6, Minute Task: 1, Hourly task: 2, Daily Task: 3, Weekly Task: 4, Monthly Task: 5, Cron task: 0
        :rtype: int
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Interval, optional, default is 1. Not null. Default is 1
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def DelayTime(self):
        """Delayed Execution Time, in minutes
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def CrontabExpression(self):
        """Task cron expression, used only for cron tasks, else defaults to empty
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CrontabExpression

    @CrontabExpression.setter
    def CrontabExpression(self, CrontabExpression):
        self._CrontabExpression = CrontabExpression

    @property
    def RetryWait(self):
        """Retry Wait
        :rtype: int
        """
        return self._RetryWait

    @RetryWait.setter
    def RetryWait(self, RetryWait):
        self._RetryWait = RetryWait

    @property
    def Retriable(self):
        """Is Retry Allowed
        :rtype: int
        """
        return self._Retriable

    @Retriable.setter
    def Retriable(self, Retriable):
        self._Retriable = Retriable

    @property
    def TryLimit(self):
        """Retry Limit
        :rtype: int
        """
        return self._TryLimit

    @TryLimit.setter
    def TryLimit(self, TryLimit):
        self._TryLimit = TryLimit

    @property
    def RunPriority(self):
        """Priority
        :rtype: int
        """
        return self._RunPriority

    @RunPriority.setter
    def RunPriority(self, RunPriority):
        self._RunPriority = RunPriority

    @property
    def ProductName(self):
        """Product
        :rtype: str
        """
        return self._ProductName

    @ProductName.setter
    def ProductName(self, ProductName):
        self._ProductName = ProductName

    @property
    def SelfDepend(self):
        """1 Ordered Serialization, one at a time, queued orderly
2 Unordered Serial, one at a time, not queued serial
3 Parallel, multiple at a time parallel
        :rtype: int
        """
        return self._SelfDepend

    @SelfDepend.setter
    def SelfDepend(self, SelfDepend):
        self._SelfDepend = SelfDepend

    @property
    def TaskAction(self):
        """Time Specification, such as 1,3 for monthly tasks, enter 1,3. Not empty. Default ""
Monthly Task: for specific days like "1,3", specifying end of month as "L" alone, cannot be mixed with specific dates
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def ExecutionEndTime(self):
        """Scheduled Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def ExecutionStartTime(self):
        """Scheduled Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def TaskAutoSubmit(self):
        """Is Auto-submit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._TaskAutoSubmit

    @TaskAutoSubmit.setter
    def TaskAutoSubmit(self, TaskAutoSubmit):
        self._TaskAutoSubmit = TaskAutoSubmit

    @property
    def InstanceInitStrategy(self):
        """Instance Generation Method, T_PLUS_0 schedule task on the same day / T_PLUS_1 schedule task the next day
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceInitStrategy

    @InstanceInitStrategy.setter
    def InstanceInitStrategy(self, InstanceInitStrategy):
        self._InstanceInitStrategy = InstanceInitStrategy


    def _deserialize(self, params):
        self._WorkflowName = params.get("WorkflowName")
        self._DependencyWorkflow = params.get("DependencyWorkflow")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._DelayTime = params.get("DelayTime")
        self._CrontabExpression = params.get("CrontabExpression")
        self._RetryWait = params.get("RetryWait")
        self._Retriable = params.get("Retriable")
        self._TryLimit = params.get("TryLimit")
        self._RunPriority = params.get("RunPriority")
        self._ProductName = params.get("ProductName")
        self._SelfDepend = params.get("SelfDepend")
        self._TaskAction = params.get("TaskAction")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._TaskAutoSubmit = params.get("TaskAutoSubmit")
        self._InstanceInitStrategy = params.get("InstanceInitStrategy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OperationOpsDto(AbstractModel):
    """Operation Result

    """

    def __init__(self):
        r"""
        :param _Result: Operation Success
Note: This field may return null, indicating that no valid value can be obtained.
        :type Result: bool
        :param _ResultMsg: Operation Result Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResultMsg: str
        :param _ErrorId: Operation Failure Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorId: str
        :param _ErrorDesc: Operation Failure Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        """
        self._Result = None
        self._ResultMsg = None
        self._ErrorId = None
        self._ErrorDesc = None

    @property
    def Result(self):
        """Operation Success
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def ResultMsg(self):
        """Operation Result Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResultMsg

    @ResultMsg.setter
    def ResultMsg(self, ResultMsg):
        self._ResultMsg = ResultMsg

    @property
    def ErrorId(self):
        """Operation Failure Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorId

    @ErrorId.setter
    def ErrorId(self, ErrorId):
        self._ErrorId = ErrorId

    @property
    def ErrorDesc(self):
        """Operation Failure Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc


    def _deserialize(self, params):
        self._Result = params.get("Result")
        self._ResultMsg = params.get("ResultMsg")
        self._ErrorId = params.get("ErrorId")
        self._ErrorDesc = params.get("ErrorDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpsTaskCanvasDto(AbstractModel):
    """Task Information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _WorkflowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _WorkflowName: Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowName: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _ProjectIdent: Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectIdent: str
        :param _Status: Task status, 'Y', 'F', 'O', 'T', 'INVALID' respectively indicate Scheduling In Progress, Stopped, Paused, Stopping, Expired
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _TaskTypeId: Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeId: int
        :param _TaskTypeDesc: Task Type Description, where the corresponding relationship between Task Type ID and Task Type Description is as follows
20	Universal Data Synchronization Task
21	JDBC SQL
22	Tbase
25	Data ETL
30	Python
31	PySpark
34	Hive SQL
35	Shell
36	Spark SQL
37	HDFS to HBase
38	SHELL
39	Spark
45	DATA_QUALITY
55	THIVE to MySQL
56	THIVE to PostgreSQL
66	HDFS to PostgreSQL
67	HDFS to Oracle
68	HDFS to MySQL
69	FTP to HDFS
70	HIVE SQL
72	HIVE to HDFS
75	HDFS to HIVE
81	Python SQL Script
82	Spark Scala Computation
83	Wormhole Task
84	Verify Reconciliation File
85	HDFS to THIVE
86	TDW to HDFS
87	HDFS to TDW
88	Verify Reconciliation File
91	FLINK Task
92	MapReduce
98	custom topology
99	kafkatoHDFS
100	kafkatoHbase
101	Import MYSQL to HIVE(DX)
104	MYSQL to HIVE
105	HIVE to MYSQL
106	SQL SERVER to HIVE
107	HIVE to SQL SERVER
108	ORACLE to HIVE
109	HIVE to ORACLE
111	HIVE to MYSQL (NEW)
112	HIVE to PG
113	HIVE to PHOENIX
118	MYSQL to HDFS
119	PG to HDFS
120	ORACLE to HDFS
121	Data Quality
10000	Custom Definition Business
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeDesc: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _FolderName: Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderName: str
        :param _FolderId: Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _FirstSubmitTime: Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstSubmitTime: str
        :param _FirstRunTime: First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstRunTime: str
        :param _ScheduleDesc: Scheduling Plan Display Description Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScheduleDesc: str
        :param _InCharge: Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _CycleUnit: Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _LeftCoordinate: Canvas X-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
        :type LeftCoordinate: float
        :param _TopCoordinate: Canvas Y-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
        :type TopCoordinate: float
        :param _VirtualFlag: Cross-Workflow Virtual Task Identifier; true indicates a cross-workflow task; false indicates an in-workflow task
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualFlag: bool
        :param _TaskAction: Elastic Cycle Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _DelayTime: DelayNote: This field may return null, indicating that no valid value can be obtained.
        :type DelayTime: int
        :param _ExecutionStartTime: Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionStartTime: str
        :param _ExecutionEndTime: Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionEndTime: str
        :param _Layer: Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
        :type Layer: str
        :param _SourceServiceId: Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceServiceId: str
        :param _SourceServiceType: Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceServiceType: str
        :param _TargetServiceId: Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetServiceId: str
        :param _TargetServiceType: Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetServiceType: str
        :param _AlarmType: Task Alert Types
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmType: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        """
        self._TaskId = None
        self._TaskName = None
        self._WorkflowId = None
        self._WorkflowName = None
        self._ProjectName = None
        self._ProjectIdent = None
        self._Status = None
        self._TaskTypeId = None
        self._TaskTypeDesc = None
        self._ProjectId = None
        self._FolderName = None
        self._FolderId = None
        self._FirstSubmitTime = None
        self._FirstRunTime = None
        self._ScheduleDesc = None
        self._InCharge = None
        self._CycleUnit = None
        self._LeftCoordinate = None
        self._TopCoordinate = None
        self._VirtualFlag = None
        self._TaskAction = None
        self._DelayTime = None
        self._ExecutionStartTime = None
        self._ExecutionEndTime = None
        self._Layer = None
        self._SourceServiceId = None
        self._SourceServiceType = None
        self._TargetServiceId = None
        self._TargetServiceType = None
        self._AlarmType = None
        self._CreateTime = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def WorkflowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def WorkflowName(self):
        """Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def ProjectIdent(self):
        """Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def Status(self):
        """Task status, 'Y', 'F', 'O', 'T', 'INVALID' respectively indicate Scheduling In Progress, Stopped, Paused, Stopping, Expired
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def TaskTypeId(self):
        """Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def TaskTypeDesc(self):
        """Task Type Description, where the corresponding relationship between Task Type ID and Task Type Description is as follows
20	Universal Data Synchronization Task
21	JDBC SQL
22	Tbase
25	Data ETL
30	Python
31	PySpark
34	Hive SQL
35	Shell
36	Spark SQL
37	HDFS to HBase
38	SHELL
39	Spark
45	DATA_QUALITY
55	THIVE to MySQL
56	THIVE to PostgreSQL
66	HDFS to PostgreSQL
67	HDFS to Oracle
68	HDFS to MySQL
69	FTP to HDFS
70	HIVE SQL
72	HIVE to HDFS
75	HDFS to HIVE
81	Python SQL Script
82	Spark Scala Computation
83	Wormhole Task
84	Verify Reconciliation File
85	HDFS to THIVE
86	TDW to HDFS
87	HDFS to TDW
88	Verify Reconciliation File
91	FLINK Task
92	MapReduce
98	custom topology
99	kafkatoHDFS
100	kafkatoHbase
101	Import MYSQL to HIVE(DX)
104	MYSQL to HIVE
105	HIVE to MYSQL
106	SQL SERVER to HIVE
107	HIVE to SQL SERVER
108	ORACLE to HIVE
109	HIVE to ORACLE
111	HIVE to MYSQL (NEW)
112	HIVE to PG
113	HIVE to PHOENIX
118	MYSQL to HDFS
119	PG to HDFS
120	ORACLE to HDFS
121	Data Quality
10000	Custom Definition Business
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskTypeDesc

    @TaskTypeDesc.setter
    def TaskTypeDesc(self, TaskTypeDesc):
        self._TaskTypeDesc = TaskTypeDesc

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FolderName(self):
        """Folder NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def FolderId(self):
        """Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def FirstSubmitTime(self):
        """Latest Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstSubmitTime

    @FirstSubmitTime.setter
    def FirstSubmitTime(self, FirstSubmitTime):
        self._FirstSubmitTime = FirstSubmitTime

    @property
    def FirstRunTime(self):
        """First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstRunTime

    @FirstRunTime.setter
    def FirstRunTime(self, FirstRunTime):
        self._FirstRunTime = FirstRunTime

    @property
    def ScheduleDesc(self):
        """Scheduling Plan Display Description Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScheduleDesc

    @ScheduleDesc.setter
    def ScheduleDesc(self, ScheduleDesc):
        self._ScheduleDesc = ScheduleDesc

    @property
    def InCharge(self):
        """Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def CycleUnit(self):
        """Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def LeftCoordinate(self):
        """Canvas X-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LeftCoordinate

    @LeftCoordinate.setter
    def LeftCoordinate(self, LeftCoordinate):
        self._LeftCoordinate = LeftCoordinate

    @property
    def TopCoordinate(self):
        """Canvas Y-axis Coordinate Point
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._TopCoordinate

    @TopCoordinate.setter
    def TopCoordinate(self, TopCoordinate):
        self._TopCoordinate = TopCoordinate

    @property
    def VirtualFlag(self):
        """Cross-Workflow Virtual Task Identifier; true indicates a cross-workflow task; false indicates an in-workflow task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag

    @property
    def TaskAction(self):
        """Elastic Cycle Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def DelayTime(self):
        """DelayNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def ExecutionStartTime(self):
        """Execution Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def ExecutionEndTime(self):
        """Execution End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def Layer(self):
        """Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Layer

    @Layer.setter
    def Layer(self, Layer):
        self._Layer = Layer

    @property
    def SourceServiceId(self):
        """Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceServiceId

    @SourceServiceId.setter
    def SourceServiceId(self, SourceServiceId):
        self._SourceServiceId = SourceServiceId

    @property
    def SourceServiceType(self):
        """Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceServiceType

    @SourceServiceType.setter
    def SourceServiceType(self, SourceServiceType):
        self._SourceServiceType = SourceServiceType

    @property
    def TargetServiceId(self):
        """Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetServiceId

    @TargetServiceId.setter
    def TargetServiceId(self, TargetServiceId):
        self._TargetServiceId = TargetServiceId

    @property
    def TargetServiceType(self):
        """Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetServiceType

    @TargetServiceType.setter
    def TargetServiceType(self, TargetServiceType):
        self._TargetServiceType = TargetServiceType

    @property
    def AlarmType(self):
        """Task Alert Types
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmType

    @AlarmType.setter
    def AlarmType(self, AlarmType):
        self._AlarmType = AlarmType

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._WorkflowId = params.get("WorkflowId")
        self._WorkflowName = params.get("WorkflowName")
        self._ProjectName = params.get("ProjectName")
        self._ProjectIdent = params.get("ProjectIdent")
        self._Status = params.get("Status")
        self._TaskTypeId = params.get("TaskTypeId")
        self._TaskTypeDesc = params.get("TaskTypeDesc")
        self._ProjectId = params.get("ProjectId")
        self._FolderName = params.get("FolderName")
        self._FolderId = params.get("FolderId")
        self._FirstSubmitTime = params.get("FirstSubmitTime")
        self._FirstRunTime = params.get("FirstRunTime")
        self._ScheduleDesc = params.get("ScheduleDesc")
        self._InCharge = params.get("InCharge")
        self._CycleUnit = params.get("CycleUnit")
        self._LeftCoordinate = params.get("LeftCoordinate")
        self._TopCoordinate = params.get("TopCoordinate")
        self._VirtualFlag = params.get("VirtualFlag")
        self._TaskAction = params.get("TaskAction")
        self._DelayTime = params.get("DelayTime")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._Layer = params.get("Layer")
        self._SourceServiceId = params.get("SourceServiceId")
        self._SourceServiceType = params.get("SourceServiceType")
        self._TargetServiceId = params.get("TargetServiceId")
        self._TargetServiceType = params.get("TargetServiceType")
        self._AlarmType = params.get("AlarmType")
        self._CreateTime = params.get("CreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpsTaskCanvasInfoList(AbstractModel):
    """Canvas Required Information

    """

    def __init__(self):
        r"""
        :param _TasksList: Canvas Task Information
        :type TasksList: list of OpsTaskCanvasDto
        :param _LinksList: Canvas Task Link Information
        :type LinksList: list of OpsTaskLinkInfoDto
        :param _CirculateTaskList: Canvas Cyclic Dependency Task Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type CirculateTaskList: list of OpsTaskCanvasDto
        """
        self._TasksList = None
        self._LinksList = None
        self._CirculateTaskList = None

    @property
    def TasksList(self):
        """Canvas Task Information
        :rtype: list of OpsTaskCanvasDto
        """
        return self._TasksList

    @TasksList.setter
    def TasksList(self, TasksList):
        self._TasksList = TasksList

    @property
    def LinksList(self):
        """Canvas Task Link Information
        :rtype: list of OpsTaskLinkInfoDto
        """
        return self._LinksList

    @LinksList.setter
    def LinksList(self, LinksList):
        self._LinksList = LinksList

    @property
    def CirculateTaskList(self):
        """Canvas Cyclic Dependency Task Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of OpsTaskCanvasDto
        """
        return self._CirculateTaskList

    @CirculateTaskList.setter
    def CirculateTaskList(self, CirculateTaskList):
        self._CirculateTaskList = CirculateTaskList


    def _deserialize(self, params):
        if params.get("TasksList") is not None:
            self._TasksList = []
            for item in params.get("TasksList"):
                obj = OpsTaskCanvasDto()
                obj._deserialize(item)
                self._TasksList.append(obj)
        if params.get("LinksList") is not None:
            self._LinksList = []
            for item in params.get("LinksList"):
                obj = OpsTaskLinkInfoDto()
                obj._deserialize(item)
                self._LinksList.append(obj)
        if params.get("CirculateTaskList") is not None:
            self._CirculateTaskList = []
            for item in params.get("CirculateTaskList"):
                obj = OpsTaskCanvasDto()
                obj._deserialize(item)
                self._CirculateTaskList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpsTaskInfoPage(AbstractModel):
    """Task Pagination Query

    """

    def __init__(self):
        r"""
        :param _PageNumber: Page Number
        :type PageNumber: int
        :param _PageSize: Page Size
        :type PageSize: int
        :param _Items: Task List Information
        :type Items: list of TaskOpsDto
        :param _TotalPage: Total Pages
        :type TotalPage: int
        :param _PageCount: Page Number
        :type PageCount: int
        :param _TotalCount: Total number of items
        :type TotalCount: int
        """
        self._PageNumber = None
        self._PageSize = None
        self._Items = None
        self._TotalPage = None
        self._PageCount = None
        self._TotalCount = None

    @property
    def PageNumber(self):
        """Page Number
        :rtype: int
        """
        return self._PageNumber

    @PageNumber.setter
    def PageNumber(self, PageNumber):
        self._PageNumber = PageNumber

    @property
    def PageSize(self):
        """Page Size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Items(self):
        """Task List Information
        :rtype: list of TaskOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def TotalPage(self):
        """Total Pages
        :rtype: int
        """
        return self._TotalPage

    @TotalPage.setter
    def TotalPage(self, TotalPage):
        self._TotalPage = TotalPage

    @property
    def PageCount(self):
        """Page Number
        :rtype: int
        """
        return self._PageCount

    @PageCount.setter
    def PageCount(self, PageCount):
        self._PageCount = PageCount

    @property
    def TotalCount(self):
        """Total number of items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount


    def _deserialize(self, params):
        self._PageNumber = params.get("PageNumber")
        self._PageSize = params.get("PageSize")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = TaskOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        self._TotalPage = params.get("TotalPage")
        self._PageCount = params.get("PageCount")
        self._TotalCount = params.get("TotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpsTaskLinkInfoDto(AbstractModel):
    """Dependency edge information of the task

    """

    def __init__(self):
        r"""
        :param _TaskTo: Downstream task ID
        :type TaskTo: str
        :param _TaskFrom: Upstream task ID
        :type TaskFrom: str
        :param _LinkType: Dependency Edge Type 1,"real_real" indicates task->task; 2, "virtual_real" crossed workflow task->task
        :type LinkType: str
        :param _LinkId: Dependency Edge ID
        :type LinkId: str
        :param _LinkStyle: To distinguish newly added cyclic dependency. Default is normal, for cyclic dependency it is circulate
Note: This field may return null, indicating that no valid value can be obtained.
        :type LinkStyle: str
        """
        self._TaskTo = None
        self._TaskFrom = None
        self._LinkType = None
        self._LinkId = None
        self._LinkStyle = None

    @property
    def TaskTo(self):
        """Downstream task ID
        :rtype: str
        """
        return self._TaskTo

    @TaskTo.setter
    def TaskTo(self, TaskTo):
        self._TaskTo = TaskTo

    @property
    def TaskFrom(self):
        """Upstream task ID
        :rtype: str
        """
        return self._TaskFrom

    @TaskFrom.setter
    def TaskFrom(self, TaskFrom):
        self._TaskFrom = TaskFrom

    @property
    def LinkType(self):
        """Dependency Edge Type 1,"real_real" indicates task->task; 2, "virtual_real" crossed workflow task->task
        :rtype: str
        """
        return self._LinkType

    @LinkType.setter
    def LinkType(self, LinkType):
        self._LinkType = LinkType

    @property
    def LinkId(self):
        """Dependency Edge ID
        :rtype: str
        """
        return self._LinkId

    @LinkId.setter
    def LinkId(self, LinkId):
        self._LinkId = LinkId

    @property
    def LinkStyle(self):
        """To distinguish newly added cyclic dependency. Default is normal, for cyclic dependency it is circulate
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LinkStyle

    @LinkStyle.setter
    def LinkStyle(self, LinkStyle):
        self._LinkStyle = LinkStyle


    def _deserialize(self, params):
        self._TaskTo = params.get("TaskTo")
        self._TaskFrom = params.get("TaskFrom")
        self._LinkType = params.get("LinkType")
        self._LinkId = params.get("LinkId")
        self._LinkStyle = params.get("LinkStyle")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OrderField(AbstractModel):
    """Universal Sort Field

    """

    def __init__(self):
        r"""
        :param _Name: Sorting Field Name
        :type Name: str
        :param _Direction: Sorting Direction: ASC|DESC
        :type Direction: str
        """
        self._Name = None
        self._Direction = None

    @property
    def Name(self):
        """Sorting Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Direction(self):
        """Sorting Direction: ASC|DESC
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Direction = params.get("Direction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OrderFieldOptional(AbstractModel):
    """Universal Sort Field

    """

    def __init__(self):
        r"""
        :param _Name: Sorting Field Name
        :type Name: str
        :param _Direction: Sorting Direction: ASC|DESC
        :type Direction: str
        """
        self._Name = None
        self._Direction = None

    @property
    def Name(self):
        """Sorting Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Direction(self):
        """Sorting Direction: ASC|DESC
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Direction = params.get("Direction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OrganizationalFunction(AbstractModel):
    """Function containing hierarchical information

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _DisplayName: Display Name
        :type DisplayName: str
        :param _LayerPath: Hierarchical Path
        :type LayerPath: str
        :param _ParentLayerPath: Parent Hierarchical Path
        :type ParentLayerPath: str
        :param _Type: Function Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Kind: Function Classification: Window functions, Aggregation functions, Date functions...
Note: This field may return null, indicating that no valid value can be obtained.
        :type Kind: str
        :param _Category: Function Category: System functions, Custom Definition functions
Note: This field may return null, indicating that no valid value can be obtained.
        :type Category: str
        :param _Status: Function Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _Description: Function DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Usage: Function Usage
Note: This field may return null, indicating that no valid value can be obtained.
        :type Usage: str
        :param _ParamDesc: Function Parameter Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParamDesc: str
        :param _ReturnDesc: Function Return Value Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReturnDesc: str
        :param _Example: Function Example
Note: This field may return null, indicating that no valid value can be obtained.
        :type Example: str
        :param _ClusterIdentifier: Cluster Instance Engine IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ClusterIdentifier: str
        :param _FuncId: Function IDNote: This field may return null, indicating that no valid value can be obtained.
        :type FuncId: str
        :param _ClassName: Function Class Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClassName: str
        :param _ResourceList: Function Resource List
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceList: list of FunctionVersion
        :param _OperatorUserIds: Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUserIds: list of int
        :param _OwnerUserIds: Public cloud Owner ID list
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUserIds: list of int
        :param _DbName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DbName: str
        :param _SubmitErrorMsg: Submission failed error message
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubmitErrorMsg: str
        :param _SchemaName: Pattern nameNote: This field may return null, indicating that no valid value can be obtained.
        :type SchemaName: str
        :param _CommandFormat: Function Command FormatNote: This field may return null, indicating that no valid value can be obtained.
        :type CommandFormat: str
        :param _OwnerName: NameNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerName: str
        :param _SubmitTimestamp: TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :type SubmitTimestamp: str
        :param _Tag: Function tag
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tag: str
        :param _OperatorUserIdsStr: Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUserIdsStr: list of str
        :param _OwnerUserIdsStr: Public Cloud Owner ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUserIdsStr: list of str
        """
        self._Name = None
        self._DisplayName = None
        self._LayerPath = None
        self._ParentLayerPath = None
        self._Type = None
        self._Kind = None
        self._Category = None
        self._Status = None
        self._Description = None
        self._Usage = None
        self._ParamDesc = None
        self._ReturnDesc = None
        self._Example = None
        self._ClusterIdentifier = None
        self._FuncId = None
        self._ClassName = None
        self._ResourceList = None
        self._OperatorUserIds = None
        self._OwnerUserIds = None
        self._DbName = None
        self._SubmitErrorMsg = None
        self._SchemaName = None
        self._CommandFormat = None
        self._OwnerName = None
        self._SubmitTimestamp = None
        self._Tag = None
        self._OperatorUserIdsStr = None
        self._OwnerUserIdsStr = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def DisplayName(self):
        """Display Name
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def LayerPath(self):
        """Hierarchical Path
        :rtype: str
        """
        return self._LayerPath

    @LayerPath.setter
    def LayerPath(self, LayerPath):
        self._LayerPath = LayerPath

    @property
    def ParentLayerPath(self):
        """Parent Hierarchical Path
        :rtype: str
        """
        return self._ParentLayerPath

    @ParentLayerPath.setter
    def ParentLayerPath(self, ParentLayerPath):
        self._ParentLayerPath = ParentLayerPath

    @property
    def Type(self):
        """Function Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Kind(self):
        """Function Classification: Window functions, Aggregation functions, Date functions...
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Kind

    @Kind.setter
    def Kind(self, Kind):
        self._Kind = Kind

    @property
    def Category(self):
        """Function Category: System functions, Custom Definition functions
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Status(self):
        """Function Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Description(self):
        """Function DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Usage(self):
        """Function Usage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Usage

    @Usage.setter
    def Usage(self, Usage):
        self._Usage = Usage

    @property
    def ParamDesc(self):
        """Function Parameter Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParamDesc

    @ParamDesc.setter
    def ParamDesc(self, ParamDesc):
        self._ParamDesc = ParamDesc

    @property
    def ReturnDesc(self):
        """Function Return Value Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ReturnDesc

    @ReturnDesc.setter
    def ReturnDesc(self, ReturnDesc):
        self._ReturnDesc = ReturnDesc

    @property
    def Example(self):
        """Function Example
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Example

    @Example.setter
    def Example(self, Example):
        self._Example = Example

    @property
    def ClusterIdentifier(self):
        """Cluster Instance Engine IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterIdentifier

    @ClusterIdentifier.setter
    def ClusterIdentifier(self, ClusterIdentifier):
        self._ClusterIdentifier = ClusterIdentifier

    @property
    def FuncId(self):
        """Function IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FuncId

    @FuncId.setter
    def FuncId(self, FuncId):
        self._FuncId = FuncId

    @property
    def ClassName(self):
        """Function Class Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClassName

    @ClassName.setter
    def ClassName(self, ClassName):
        self._ClassName = ClassName

    @property
    def ResourceList(self):
        """Function Resource List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FunctionVersion
        """
        return self._ResourceList

    @ResourceList.setter
    def ResourceList(self, ResourceList):
        self._ResourceList = ResourceList

    @property
    def OperatorUserIds(self):
        """Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int
        """
        return self._OperatorUserIds

    @OperatorUserIds.setter
    def OperatorUserIds(self, OperatorUserIds):
        self._OperatorUserIds = OperatorUserIds

    @property
    def OwnerUserIds(self):
        """Public cloud Owner ID list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int
        """
        return self._OwnerUserIds

    @OwnerUserIds.setter
    def OwnerUserIds(self, OwnerUserIds):
        self._OwnerUserIds = OwnerUserIds

    @property
    def DbName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DbName

    @DbName.setter
    def DbName(self, DbName):
        self._DbName = DbName

    @property
    def SubmitErrorMsg(self):
        """Submission failed error message
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SubmitErrorMsg

    @SubmitErrorMsg.setter
    def SubmitErrorMsg(self, SubmitErrorMsg):
        self._SubmitErrorMsg = SubmitErrorMsg

    @property
    def SchemaName(self):
        """Pattern nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName

    @property
    def CommandFormat(self):
        """Function Command FormatNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CommandFormat

    @CommandFormat.setter
    def CommandFormat(self, CommandFormat):
        self._CommandFormat = CommandFormat

    @property
    def OwnerName(self):
        """NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerName

    @OwnerName.setter
    def OwnerName(self, OwnerName):
        self._OwnerName = OwnerName

    @property
    def SubmitTimestamp(self):
        """TimestampNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SubmitTimestamp

    @SubmitTimestamp.setter
    def SubmitTimestamp(self, SubmitTimestamp):
        self._SubmitTimestamp = SubmitTimestamp

    @property
    def Tag(self):
        """Function tag
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def OperatorUserIdsStr(self):
        """Operator ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._OperatorUserIdsStr

    @OperatorUserIdsStr.setter
    def OperatorUserIdsStr(self, OperatorUserIdsStr):
        self._OperatorUserIdsStr = OperatorUserIdsStr

    @property
    def OwnerUserIdsStr(self):
        """Public Cloud Owner ID List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._OwnerUserIdsStr

    @OwnerUserIdsStr.setter
    def OwnerUserIdsStr(self, OwnerUserIdsStr):
        self._OwnerUserIdsStr = OwnerUserIdsStr


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._DisplayName = params.get("DisplayName")
        self._LayerPath = params.get("LayerPath")
        self._ParentLayerPath = params.get("ParentLayerPath")
        self._Type = params.get("Type")
        self._Kind = params.get("Kind")
        self._Category = params.get("Category")
        self._Status = params.get("Status")
        self._Description = params.get("Description")
        self._Usage = params.get("Usage")
        self._ParamDesc = params.get("ParamDesc")
        self._ReturnDesc = params.get("ReturnDesc")
        self._Example = params.get("Example")
        self._ClusterIdentifier = params.get("ClusterIdentifier")
        self._FuncId = params.get("FuncId")
        self._ClassName = params.get("ClassName")
        if params.get("ResourceList") is not None:
            self._ResourceList = []
            for item in params.get("ResourceList"):
                obj = FunctionVersion()
                obj._deserialize(item)
                self._ResourceList.append(obj)
        self._OperatorUserIds = params.get("OperatorUserIds")
        self._OwnerUserIds = params.get("OwnerUserIds")
        self._DbName = params.get("DbName")
        self._SubmitErrorMsg = params.get("SubmitErrorMsg")
        self._SchemaName = params.get("SchemaName")
        self._CommandFormat = params.get("CommandFormat")
        self._OwnerName = params.get("OwnerName")
        self._SubmitTimestamp = params.get("SubmitTimestamp")
        self._Tag = params.get("Tag")
        self._OperatorUserIdsStr = params.get("OperatorUserIdsStr")
        self._OwnerUserIdsStr = params.get("OwnerUserIdsStr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Pair(AbstractModel):
    """Key-Value Pair

    """

    def __init__(self):
        r"""
        :param _Key: Key Name
        :type Key: str
        :param _Value: Value
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Key Name
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PairDto(AbstractModel):
    """Key-Value Pair

    """

    def __init__(self):
        r"""
        :param _Key: Key Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type Key: str
        :param _Value: ValueNote: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Key Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """ValueNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ParamInfo(AbstractModel):
    """Parameters

    """

    def __init__(self):
        r"""
        :param _ParamKey: Parameter Name
        :type ParamKey: str
        :param _ParamValue: Parameter Value
        :type ParamValue: str
        """
        self._ParamKey = None
        self._ParamValue = None

    @property
    def ParamKey(self):
        """Parameter Name
        :rtype: str
        """
        return self._ParamKey

    @ParamKey.setter
    def ParamKey(self, ParamKey):
        self._ParamKey = ParamKey

    @property
    def ParamValue(self):
        """Parameter Value
        :rtype: str
        """
        return self._ParamValue

    @ParamValue.setter
    def ParamValue(self, ParamValue):
        self._ParamValue = ParamValue


    def _deserialize(self, params):
        self._ParamKey = params.get("ParamKey")
        self._ParamValue = params.get("ParamValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Partition(AbstractModel):
    """Partition Parameter

    """

    def __init__(self):
        r"""
        :param _Transform: Partition Conversion Strategy
        :type Transform: str
        :param _Name: Partition Field Name
        :type Name: str
        :param _TransformArgs: Policy Parameter
        :type TransformArgs: list of str
        """
        self._Transform = None
        self._Name = None
        self._TransformArgs = None

    @property
    def Transform(self):
        """Partition Conversion Strategy
        :rtype: str
        """
        return self._Transform

    @Transform.setter
    def Transform(self, Transform):
        self._Transform = Transform

    @property
    def Name(self):
        """Partition Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TransformArgs(self):
        """Policy Parameter
        :rtype: list of str
        """
        return self._TransformArgs

    @TransformArgs.setter
    def TransformArgs(self, TransformArgs):
        self._TransformArgs = TransformArgs


    def _deserialize(self, params):
        self._Transform = params.get("Transform")
        self._Name = params.get("Name")
        self._TransformArgs = params.get("TransformArgs")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PathNodeDsVO(AbstractModel):
    """Data Development - Unified Tree Structure Return Attributes

    """

    def __init__(self):
        r"""
        :param _Id: PathNode ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _Title: PathNode Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type Title: str
        :param _Type: PathNode Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _ParentId: Unique Identifier of Parent Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentId: str
        :param _IsLeaf: Is Leaf Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsLeaf: bool
        :param _Children: Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Children: list of PathNodeDsVO
        :param _Params: Business Parameters, base64 encoded JSON string, to obtain specific parameters, base64 decoding is required
Note: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        """
        self._Id = None
        self._Title = None
        self._Type = None
        self._ParentId = None
        self._IsLeaf = None
        self._Children = None
        self._Params = None

    @property
    def Id(self):
        """PathNode ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Title(self):
        """PathNode Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def Type(self):
        """PathNode Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ParentId(self):
        """Unique Identifier of Parent Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId

    @property
    def IsLeaf(self):
        """Is Leaf Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IsLeaf

    @IsLeaf.setter
    def IsLeaf(self, IsLeaf):
        self._IsLeaf = IsLeaf

    @property
    def Children(self):
        """Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of PathNodeDsVO
        """
        return self._Children

    @Children.setter
    def Children(self, Children):
        self._Children = Children

    @property
    def Params(self):
        """Business Parameters, base64 encoded JSON string, to obtain specific parameters, base64 decoding is required
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Title = params.get("Title")
        self._Type = params.get("Type")
        self._ParentId = params.get("ParentId")
        self._IsLeaf = params.get("IsLeaf")
        if params.get("Children") is not None:
            self._Children = []
            for item in params.get("Children"):
                obj = PathNodeDsVO()
                obj._deserialize(item)
                self._Children.append(obj)
        self._Params = params.get("Params")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProdSchedulerTask(AbstractModel):
    """Data Quality Production Scheduling Task Business Entity

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Production Scheduling Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _TaskId: Production Scheduling Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: Production Scheduling Task Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _CycleType: Production Scheduling Task Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: int
        """
        self._WorkflowId = None
        self._TaskId = None
        self._TaskName = None
        self._CycleType = None

    @property
    def WorkflowId(self):
        """Production Scheduling Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def TaskId(self):
        """Production Scheduling Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Production Scheduling Task Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def CycleType(self):
        """Production Scheduling Task Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._CycleType = params.get("CycleType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Project(AbstractModel):
    """Project Information

    """

    def __init__(self):
        r"""
        :param _TenantId: Tenant ID of the project
Note: This field may return null, indicating that no valid value can be obtained.
        :type TenantId: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectName: Project Identifier, English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _DisplayName: Project Display Name, can be Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DisplayName: str
        :param _Region: RegionNote: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        :param _Description: RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _Creator: Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :type Creator: :class:`tencentcloud.wedata.v20210820.models.BaseUser`
        :param _Tenant: Tenant Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tenant: :class:`tencentcloud.wedata.v20210820.models.BaseTenant`
        :param _AdminUsers: Project Administrator
Note: This field may return null, indicating that no valid value can be obtained.
        :type AdminUsers: list of BaseUser
        :param _Clusters: Project-related cluster information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Clusters: list of BaseClusterInfo
        :param _Params: Additional configuration parameters for the project
Note: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        :param _Status: Project Status: 0: disabled, 1: enabled, -3: disabling, 2: enabling
        :type Status: int
        :param _Model: Project Type, SIMPLE: simple mode STANDARD: standard mode
Note: This field may return null, indicating that no valid value can be obtained.
        :type Model: str
        """
        self._TenantId = None
        self._ProjectId = None
        self._ProjectName = None
        self._DisplayName = None
        self._Region = None
        self._Description = None
        self._CreateTime = None
        self._Creator = None
        self._Tenant = None
        self._AdminUsers = None
        self._Clusters = None
        self._Params = None
        self._Status = None
        self._Model = None

    @property
    def TenantId(self):
        """Tenant ID of the project
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectName(self):
        """Project Identifier, English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def DisplayName(self):
        """Project Display Name, can be Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DisplayName

    @DisplayName.setter
    def DisplayName(self, DisplayName):
        self._DisplayName = DisplayName

    @property
    def Region(self):
        """RegionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Description(self):
        """RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Creator(self):
        """Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BaseUser`
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def Tenant(self):
        """Tenant Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BaseTenant`
        """
        return self._Tenant

    @Tenant.setter
    def Tenant(self, Tenant):
        self._Tenant = Tenant

    @property
    def AdminUsers(self):
        """Project Administrator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of BaseUser
        """
        return self._AdminUsers

    @AdminUsers.setter
    def AdminUsers(self, AdminUsers):
        self._AdminUsers = AdminUsers

    @property
    def Clusters(self):
        """Project-related cluster information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of BaseClusterInfo
        """
        return self._Clusters

    @Clusters.setter
    def Clusters(self, Clusters):
        self._Clusters = Clusters

    @property
    def Params(self):
        """Additional configuration parameters for the project
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def Status(self):
        """Project Status: 0: disabled, 1: enabled, -3: disabling, 2: enabling
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Model(self):
        """Project Type, SIMPLE: simple mode STANDARD: standard mode
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model


    def _deserialize(self, params):
        self._TenantId = params.get("TenantId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectName = params.get("ProjectName")
        self._DisplayName = params.get("DisplayName")
        self._Region = params.get("Region")
        self._Description = params.get("Description")
        self._CreateTime = params.get("CreateTime")
        if params.get("Creator") is not None:
            self._Creator = BaseUser()
            self._Creator._deserialize(params.get("Creator"))
        if params.get("Tenant") is not None:
            self._Tenant = BaseTenant()
            self._Tenant._deserialize(params.get("Tenant"))
        if params.get("AdminUsers") is not None:
            self._AdminUsers = []
            for item in params.get("AdminUsers"):
                obj = BaseUser()
                obj._deserialize(item)
                self._AdminUsers.append(obj)
        if params.get("Clusters") is not None:
            self._Clusters = []
            for item in params.get("Clusters"):
                obj = BaseClusterInfo()
                obj._deserialize(item)
                self._Clusters.append(obj)
        self._Params = params.get("Params")
        self._Status = params.get("Status")
        self._Model = params.get("Model")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProjectBaseInfoOpsRequest(AbstractModel):
    """Basic Information

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _IsAdmin: Whether admin
        :type IsAdmin: bool
        """
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._IsAdmin = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def IsAdmin(self):
        """Whether admin
        :rtype: bool
        """
        return self._IsAdmin

    @IsAdmin.setter
    def IsAdmin(self, IsAdmin):
        self._IsAdmin = IsAdmin


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._IsAdmin = params.get("IsAdmin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Property(AbstractModel):
    """DLC table creation attribute

    """

    def __init__(self):
        r"""
        :param _Key: Key Value
        :type Key: str
        :param _Value: Value
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Key Value
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class QualityScore(AbstractModel):
    """Quality Score

    """

    def __init__(self):
        r"""
        :param _CompositeScore: Composite Score
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompositeScore: float
        :param _ScoringDistribution: Score Distribution
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScoringDistribution: list of TableScoreStatisticsInfo
        :param _TotalTableNumber: Total Number of Tables
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalTableNumber: int
        """
        self._CompositeScore = None
        self._ScoringDistribution = None
        self._TotalTableNumber = None

    @property
    def CompositeScore(self):
        """Composite Score
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._CompositeScore

    @CompositeScore.setter
    def CompositeScore(self, CompositeScore):
        self._CompositeScore = CompositeScore

    @property
    def ScoringDistribution(self):
        """Score Distribution
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableScoreStatisticsInfo
        """
        return self._ScoringDistribution

    @ScoringDistribution.setter
    def ScoringDistribution(self, ScoringDistribution):
        self._ScoringDistribution = ScoringDistribution

    @property
    def TotalTableNumber(self):
        """Total Number of Tables
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalTableNumber

    @TotalTableNumber.setter
    def TotalTableNumber(self, TotalTableNumber):
        self._TotalTableNumber = TotalTableNumber


    def _deserialize(self, params):
        self._CompositeScore = params.get("CompositeScore")
        if params.get("ScoringDistribution") is not None:
            self._ScoringDistribution = []
            for item in params.get("ScoringDistribution"):
                obj = TableScoreStatisticsInfo()
                obj._deserialize(item)
                self._ScoringDistribution.append(obj)
        self._TotalTableNumber = params.get("TotalTableNumber")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class QualityScoreTrend(AbstractModel):
    """Quality Score Trend

    """

    def __init__(self):
        r"""
        :param _AverageScore: Periodic Average Score
Note: This field may return null, indicating that no valid value can be obtained.
        :type AverageScore: float
        :param _DailyScoreList: Daily Score List
Note: This field may return null, indicating that no valid value can be obtained.
        :type DailyScoreList: list of DailyScoreInfo
        """
        self._AverageScore = None
        self._DailyScoreList = None

    @property
    def AverageScore(self):
        """Periodic Average Score
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._AverageScore

    @AverageScore.setter
    def AverageScore(self, AverageScore):
        self._AverageScore = AverageScore

    @property
    def DailyScoreList(self):
        """Daily Score List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of DailyScoreInfo
        """
        return self._DailyScoreList

    @DailyScoreList.setter
    def DailyScoreList(self, DailyScoreList):
        self._DailyScoreList = DailyScoreList


    def _deserialize(self, params):
        self._AverageScore = params.get("AverageScore")
        if params.get("DailyScoreList") is not None:
            self._DailyScoreList = []
            for item in params.get("DailyScoreList"):
                obj = DailyScoreInfo()
                obj._deserialize(item)
                self._DailyScoreList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class QuietPeriod(AbstractModel):
    """DataInLong - Alarm do-not-disturb time

    """

    def __init__(self):
        r"""
        :param _DaysOfWeek: Represents the days of the week, 1 for Monday, 7 for Sunday, and so on
Note: This field may return null, indicating that no valid value can be obtained.
        :type DaysOfWeek: list of int non-negative
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        """
        self._DaysOfWeek = None
        self._StartTime = None
        self._EndTime = None

    @property
    def DaysOfWeek(self):
        """Represents the days of the week, 1 for Monday, 7 for Sunday, and so on
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int non-negative
        """
        return self._DaysOfWeek

    @DaysOfWeek.setter
    def DaysOfWeek(self, DaysOfWeek):
        self._DaysOfWeek = DaysOfWeek

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._DaysOfWeek = params.get("DaysOfWeek")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RealTimeTaskInstanceNodeInfo(AbstractModel):
    """Current Node Information of Real-time Task Instance

    """

    def __init__(self):
        r"""
        :param _TaskName: Task Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _InstanceNodeInfoList: Real-time Task Instance Node Information List
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceNodeInfoList: list of InstanceNodeInfo
        """
        self._TaskName = None
        self._TaskId = None
        self._InstanceNodeInfoList = None

    @property
    def TaskName(self):
        """Task Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def InstanceNodeInfoList(self):
        """Real-time Task Instance Node Information List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of InstanceNodeInfo
        """
        return self._InstanceNodeInfoList

    @InstanceNodeInfoList.setter
    def InstanceNodeInfoList(self, InstanceNodeInfoList):
        self._InstanceNodeInfoList = InstanceNodeInfoList


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        self._TaskId = params.get("TaskId")
        if params.get("InstanceNodeInfoList") is not None:
            self._InstanceNodeInfoList = []
            for item in params.get("InstanceNodeInfoList"):
                obj = InstanceNodeInfo()
                obj._deserialize(item)
                self._InstanceNodeInfoList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RealTimeTaskSpeed(AbstractModel):
    """Real-time task synchronization speed trend

    """

    def __init__(self):
        r"""
        :param _RecordsSpeedList: Synchronous Speed Bar/s List
        :type RecordsSpeedList: list of RecordsSpeed
        :param _BytesSpeedList: Synchronous Speed Bytes/s List
        :type BytesSpeedList: list of BytesSpeed
        """
        self._RecordsSpeedList = None
        self._BytesSpeedList = None

    @property
    def RecordsSpeedList(self):
        """Synchronous Speed Bar/s List
        :rtype: list of RecordsSpeed
        """
        return self._RecordsSpeedList

    @RecordsSpeedList.setter
    def RecordsSpeedList(self, RecordsSpeedList):
        self._RecordsSpeedList = RecordsSpeedList

    @property
    def BytesSpeedList(self):
        """Synchronous Speed Bytes/s List
        :rtype: list of BytesSpeed
        """
        return self._BytesSpeedList

    @BytesSpeedList.setter
    def BytesSpeedList(self, BytesSpeedList):
        self._BytesSpeedList = BytesSpeedList


    def _deserialize(self, params):
        if params.get("RecordsSpeedList") is not None:
            self._RecordsSpeedList = []
            for item in params.get("RecordsSpeedList"):
                obj = RecordsSpeed()
                obj._deserialize(item)
                self._RecordsSpeedList.append(obj)
        if params.get("BytesSpeedList") is not None:
            self._BytesSpeedList = []
            for item in params.get("BytesSpeedList"):
                obj = BytesSpeed()
                obj._deserialize(item)
                self._BytesSpeedList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecordField(AbstractModel):
    """Common Record Fields, agreed with the server to pass in legitimate key-value pairs

    """

    def __init__(self):
        r"""
        :param _Name: Field Name, Extended Field Name
        :type Name: str
        :param _Value: Field Value, Extended Field Value
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """Field Name, Extended Field Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """Field Value, Extended Field Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecordsSpeed(AbstractModel):
    """Real-time task synchronization speed Bar/s

    """

    def __init__(self):
        r"""
        :param _NodeType: Node TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeType: str
        :param _NodeName: Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :type NodeName: str
        :param _Values: Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
        :type Values: list of SpeedValue
        """
        self._NodeType = None
        self._NodeName = None
        self._Values = None

    @property
    def NodeType(self):
        """Node TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeName(self):
        """Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def Values(self):
        """Speed value list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SpeedValue
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._NodeType = params.get("NodeType")
        self._NodeName = params.get("NodeName")
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = SpeedValue()
                obj._deserialize(item)
                self._Values.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegisterEventListenerRequest(AbstractModel):
    """RegisterEventListener request structure.

    """

    def __init__(self):
        r"""
        :param _Key: Keyword, if it refers to a task, then pass the Task ID
        :type Key: str
        :param _EventName: Event name
        :type EventName: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Type: Event type, default REST_API
        :type Type: str
        :param _Properties: Configuration information, for example, maximum waiting time 1 day configuration in json: {"maxWaitEventTime":1,"maxWaitEventTimeUnit":"DAYS"}
        :type Properties: str
        """
        self._Key = None
        self._EventName = None
        self._ProjectId = None
        self._Type = None
        self._Properties = None

    @property
    def Key(self):
        """Keyword, if it refers to a task, then pass the Task ID
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def EventName(self):
        """Event name
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Type(self):
        """Event type, default REST_API
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Properties(self):
        """Configuration information, for example, maximum waiting time 1 day configuration in json: {"maxWaitEventTime":1,"maxWaitEventTimeUnit":"DAYS"}
        :rtype: str
        """
        return self._Properties

    @Properties.setter
    def Properties(self, Properties):
        self._Properties = Properties


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._EventName = params.get("EventName")
        self._ProjectId = params.get("ProjectId")
        self._Type = params.get("Type")
        self._Properties = params.get("Properties")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegisterEventListenerResponse(AbstractModel):
    """RegisterEventListener response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success or Failure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchReturn()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class RegisterEventRequest(AbstractModel):
    """RegisterEvent request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Name: Event Name, supports English, numbers, and underscores, up to 20 characters long, cannot start with a number or underscore.
        :type Name: str
        :param _EventSubType: Event Segmentation Type, cycle types: DAY, HOUR, MIN, SECOND
        :type EventSubType: str
        :param _EventBroadcastType: Broadcast: BROADCAST, Unicast: SINGLE
        :type EventBroadcastType: str
        :param _TimeUnit: For cycle types of day and hour: HOURS, For minutes: MINUTES, For seconds: SECONDS
        :type TimeUnit: str
        :param _Owner: Event Owner
        :type Owner: str
        :param _EventType: Event Type, default value: TIME_SERIES
        :type EventType: str
        :param _DimensionFormat: Corresponding DAY: yyyyMMdd, Corresponding HOUR: yyyyMMddHH, Corresponding MIN: yyyyMMddHHmm, Corresponding SECOND: yyyyMMddHHmmss
        :type DimensionFormat: str
        :param _TimeToLive: Uptime
        :type TimeToLive: int
        :param _Description: Event Description
        :type Description: str
        """
        self._ProjectId = None
        self._Name = None
        self._EventSubType = None
        self._EventBroadcastType = None
        self._TimeUnit = None
        self._Owner = None
        self._EventType = None
        self._DimensionFormat = None
        self._TimeToLive = None
        self._Description = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Name(self):
        """Event Name, supports English, numbers, and underscores, up to 20 characters long, cannot start with a number or underscore.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def EventSubType(self):
        """Event Segmentation Type, cycle types: DAY, HOUR, MIN, SECOND
        :rtype: str
        """
        return self._EventSubType

    @EventSubType.setter
    def EventSubType(self, EventSubType):
        self._EventSubType = EventSubType

    @property
    def EventBroadcastType(self):
        """Broadcast: BROADCAST, Unicast: SINGLE
        :rtype: str
        """
        return self._EventBroadcastType

    @EventBroadcastType.setter
    def EventBroadcastType(self, EventBroadcastType):
        self._EventBroadcastType = EventBroadcastType

    @property
    def TimeUnit(self):
        """For cycle types of day and hour: HOURS, For minutes: MINUTES, For seconds: SECONDS
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def Owner(self):
        """Event Owner
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def EventType(self):
        """Event Type, default value: TIME_SERIES
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def DimensionFormat(self):
        """Corresponding DAY: yyyyMMdd, Corresponding HOUR: yyyyMMddHH, Corresponding MIN: yyyyMMddHHmm, Corresponding SECOND: yyyyMMddHHmmss
        :rtype: str
        """
        return self._DimensionFormat

    @DimensionFormat.setter
    def DimensionFormat(self, DimensionFormat):
        self._DimensionFormat = DimensionFormat

    @property
    def TimeToLive(self):
        """Uptime
        :rtype: int
        """
        return self._TimeToLive

    @TimeToLive.setter
    def TimeToLive(self, TimeToLive):
        self._TimeToLive = TimeToLive

    @property
    def Description(self):
        """Event Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Name = params.get("Name")
        self._EventSubType = params.get("EventSubType")
        self._EventBroadcastType = params.get("EventBroadcastType")
        self._TimeUnit = params.get("TimeUnit")
        self._Owner = params.get("Owner")
        self._EventType = params.get("EventType")
        self._DimensionFormat = params.get("DimensionFormat")
        self._TimeToLive = params.get("TimeToLive")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegisterEventResponse(AbstractModel):
    """RegisterEvent response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchReturn()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class RemoveWorkflowDsRequest(AbstractModel):
    """RemoveWorkflowDs request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _DeleteScript: Whether to delete the script
        :type DeleteScript: str
        :param _OperateIsInform: Notify downstream if deleted
        :type OperateIsInform: str
        :param _DeleteMode: Whether to terminate ongoing tasks
        :type DeleteMode: str
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._DeleteScript = None
        self._OperateIsInform = None
        self._DeleteMode = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def DeleteScript(self):
        """Whether to delete the script
        :rtype: str
        """
        return self._DeleteScript

    @DeleteScript.setter
    def DeleteScript(self, DeleteScript):
        self._DeleteScript = DeleteScript

    @property
    def OperateIsInform(self):
        """Notify downstream if deleted
        :rtype: str
        """
        return self._OperateIsInform

    @OperateIsInform.setter
    def OperateIsInform(self, OperateIsInform):
        self._OperateIsInform = OperateIsInform

    @property
    def DeleteMode(self):
        """Whether to terminate ongoing tasks
        :rtype: str
        """
        return self._DeleteMode

    @DeleteMode.setter
    def DeleteMode(self, DeleteMode):
        self._DeleteMode = DeleteMode


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._DeleteScript = params.get("DeleteScript")
        self._OperateIsInform = params.get("OperateIsInform")
        self._DeleteMode = params.get("DeleteMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveWorkflowDsResponse(AbstractModel):
    """RemoveWorkflowDs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Whether deletion was successful
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Whether deletion was successful
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class ReportTaskDetail(AbstractModel):
    """Task submission detail response parameters structure.

    """

    def __init__(self):
        r"""
        :param _EngineTaskId: Engine task id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineTaskId: str
        :param _EngineExeStatus: Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeStatus: str
        :param _EngineExeStartTime: Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeStartTime: str
        :param _EngineExeEndTime: Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeEndTime: str
        :param _TaskTypeId: Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskTypeId: int
        :param _BusinessInfo: Business information.
Note: This field may return null, indicating that no valid values can be obtained.
        :type BusinessInfo: str
        :param _EngineTaskInfo: Engine task information.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineTaskInfo: :class:`tencentcloud.wedata.v20210820.models.EngineTaskInfo`
        """
        self._EngineTaskId = None
        self._EngineExeStatus = None
        self._EngineExeStartTime = None
        self._EngineExeEndTime = None
        self._TaskTypeId = None
        self._BusinessInfo = None
        self._EngineTaskInfo = None

    @property
    def EngineTaskId(self):
        """Engine task id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineTaskId

    @EngineTaskId.setter
    def EngineTaskId(self, EngineTaskId):
        self._EngineTaskId = EngineTaskId

    @property
    def EngineExeStatus(self):
        """Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeStatus

    @EngineExeStatus.setter
    def EngineExeStatus(self, EngineExeStatus):
        self._EngineExeStatus = EngineExeStatus

    @property
    def EngineExeStartTime(self):
        """Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeStartTime

    @EngineExeStartTime.setter
    def EngineExeStartTime(self, EngineExeStartTime):
        self._EngineExeStartTime = EngineExeStartTime

    @property
    def EngineExeEndTime(self):
        """Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeEndTime

    @EngineExeEndTime.setter
    def EngineExeEndTime(self, EngineExeEndTime):
        self._EngineExeEndTime = EngineExeEndTime

    @property
    def TaskTypeId(self):
        """Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def BusinessInfo(self):
        """Business information.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._BusinessInfo

    @BusinessInfo.setter
    def BusinessInfo(self, BusinessInfo):
        self._BusinessInfo = BusinessInfo

    @property
    def EngineTaskInfo(self):
        """Engine task information.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.EngineTaskInfo`
        """
        return self._EngineTaskInfo

    @EngineTaskInfo.setter
    def EngineTaskInfo(self, EngineTaskInfo):
        self._EngineTaskInfo = EngineTaskInfo


    def _deserialize(self, params):
        self._EngineTaskId = params.get("EngineTaskId")
        self._EngineExeStatus = params.get("EngineExeStatus")
        self._EngineExeStartTime = params.get("EngineExeStartTime")
        self._EngineExeEndTime = params.get("EngineExeEndTime")
        self._TaskTypeId = params.get("TaskTypeId")
        self._BusinessInfo = params.get("BusinessInfo")
        if params.get("EngineTaskInfo") is not None:
            self._EngineTaskInfo = EngineTaskInfo()
            self._EngineTaskInfo._deserialize(params.get("EngineTaskInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReportTaskListInfo(AbstractModel):
    """Submit task information.

    """

    def __init__(self):
        r"""
        :param _Rows: Task list details.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Rows: list of TaskInfoVo
        :param _PageNum: Page number

Note: This field may return null, indicating that no valid values can be obtained.
        :type PageNum: int
        :param _PageSize: Entries per page.
Note: This field may return null, indicating that no valid values can be obtained.
        :type PageSize: int
        :param _TotalCount: Total number of records

Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _TotalPageNumber: Total pages

Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalPageNumber: int
        """
        self._Rows = None
        self._PageNum = None
        self._PageSize = None
        self._TotalCount = None
        self._TotalPageNumber = None

    @property
    def Rows(self):
        """Task list details.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of TaskInfoVo
        """
        return self._Rows

    @Rows.setter
    def Rows(self, Rows):
        self._Rows = Rows

    @property
    def PageNum(self):
        """Page number

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PageNum

    @PageNum.setter
    def PageNum(self, PageNum):
        self._PageNum = PageNum

    @property
    def PageSize(self):
        """Entries per page.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def TotalCount(self):
        """Total number of records

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TotalPageNumber(self):
        """Total pages

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalPageNumber

    @TotalPageNumber.setter
    def TotalPageNumber(self, TotalPageNumber):
        self._TotalPageNumber = TotalPageNumber


    def _deserialize(self, params):
        if params.get("Rows") is not None:
            self._Rows = []
            for item in params.get("Rows"):
                obj = TaskInfoVo()
                obj._deserialize(item)
                self._Rows.append(obj)
        self._PageNum = params.get("PageNum")
        self._PageSize = params.get("PageSize")
        self._TotalCount = params.get("TotalCount")
        self._TotalPageNumber = params.get("TotalPageNumber")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourcePathTree(AbstractModel):
    """Resource Management Directory Tree Node

    """

    def __init__(self):
        r"""
        :param _Name: Resource name
Note: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _IsLeaf: Is leaf node
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsLeaf: bool
        :param _ResourceId: Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceId: str
        :param _LocalPath: Local path
Note: This field may return null, indicating that no valid value can be obtained.
        :type LocalPath: str
        :param _RemotePath: Remote path
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemotePath: str
        :param _FileExtensionType: File TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type FileExtensionType: str
        :param _Size: File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type Size: int
        :param _Md5Value: File MD5 value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Md5Value: str
        :param _OwnerName: File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerName: str
        :param _UpdateUser: Updater
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateUser: str
        :param _UpdateUserId: File Updater UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateUserId: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: int
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: int
        :param _CosBucket: COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type CosBucket: str
        :param _CosRegion: COS Region
Note: This field may return null, indicating that no valid value can be obtained.
        :type CosRegion: str
        :param _ExtraInfo: Additional InformationNote: This field may return null, indicating that no valid value can be obtained.
        :type ExtraInfo: str
        """
        self._Name = None
        self._IsLeaf = None
        self._ResourceId = None
        self._LocalPath = None
        self._RemotePath = None
        self._FileExtensionType = None
        self._Size = None
        self._Md5Value = None
        self._OwnerName = None
        self._UpdateUser = None
        self._UpdateUserId = None
        self._CreateTime = None
        self._UpdateTime = None
        self._CosBucket = None
        self._CosRegion = None
        self._ExtraInfo = None

    @property
    def Name(self):
        """Resource name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def IsLeaf(self):
        """Is leaf node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IsLeaf

    @IsLeaf.setter
    def IsLeaf(self, IsLeaf):
        self._IsLeaf = IsLeaf

    @property
    def ResourceId(self):
        """Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def LocalPath(self):
        """Local path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LocalPath

    @LocalPath.setter
    def LocalPath(self, LocalPath):
        self._LocalPath = LocalPath

    @property
    def RemotePath(self):
        """Remote path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RemotePath

    @RemotePath.setter
    def RemotePath(self, RemotePath):
        self._RemotePath = RemotePath

    @property
    def FileExtensionType(self):
        """File TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileExtensionType

    @FileExtensionType.setter
    def FileExtensionType(self, FileExtensionType):
        self._FileExtensionType = FileExtensionType

    @property
    def Size(self):
        """File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def Md5Value(self):
        """File MD5 value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Md5Value

    @Md5Value.setter
    def Md5Value(self, Md5Value):
        self._Md5Value = Md5Value

    @property
    def OwnerName(self):
        """File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerName

    @OwnerName.setter
    def OwnerName(self, OwnerName):
        self._OwnerName = OwnerName

    @property
    def UpdateUser(self):
        """Updater
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateUser

    @UpdateUser.setter
    def UpdateUser(self, UpdateUser):
        self._UpdateUser = UpdateUser

    @property
    def UpdateUserId(self):
        """File Updater UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateUserId

    @UpdateUserId.setter
    def UpdateUserId(self, UpdateUserId):
        self._UpdateUserId = UpdateUserId

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def CosBucket(self):
        """COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CosBucket

    @CosBucket.setter
    def CosBucket(self, CosBucket):
        self._CosBucket = CosBucket

    @property
    def CosRegion(self):
        """COS Region
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CosRegion

    @CosRegion.setter
    def CosRegion(self, CosRegion):
        self._CosRegion = CosRegion

    @property
    def ExtraInfo(self):
        """Additional InformationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExtraInfo

    @ExtraInfo.setter
    def ExtraInfo(self, ExtraInfo):
        self._ExtraInfo = ExtraInfo


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._IsLeaf = params.get("IsLeaf")
        self._ResourceId = params.get("ResourceId")
        self._LocalPath = params.get("LocalPath")
        self._RemotePath = params.get("RemotePath")
        self._FileExtensionType = params.get("FileExtensionType")
        self._Size = params.get("Size")
        self._Md5Value = params.get("Md5Value")
        self._OwnerName = params.get("OwnerName")
        self._UpdateUser = params.get("UpdateUser")
        self._UpdateUserId = params.get("UpdateUserId")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._CosBucket = params.get("CosBucket")
        self._CosRegion = params.get("CosRegion")
        self._ExtraInfo = params.get("ExtraInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResumeIntegrationTaskRequest(AbstractModel):
    """ResumeIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Event: Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
        :type Event: str
        :param _ExtConfig: Additional parameters
        :type ExtConfig: list of RecordField
        :param _EventDesc: Describe the type of front-end operation
        :type EventDesc: str
        """
        self._TaskId = None
        self._ProjectId = None
        self._Event = None
        self._ExtConfig = None
        self._EventDesc = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Event(self):
        """Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
        :rtype: str
        """
        return self._Event

    @Event.setter
    def Event(self, Event):
        self._Event = Event

    @property
    def ExtConfig(self):
        """Additional parameters
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def EventDesc(self):
        """Describe the type of front-end operation
        :rtype: str
        """
        return self._EventDesc

    @EventDesc.setter
    def EventDesc(self, EventDesc):
        self._EventDesc = EventDesc


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._Event = params.get("Event")
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        self._EventDesc = params.get("EventDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResumeIntegrationTaskResponse(AbstractModel):
    """ResumeIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class RobAndLockIntegrationTaskRequest(AbstractModel):
    """RobAndLockIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskType: Task Type: 201. stream, 202. offline
        :type TaskType: int
        """
        self._TaskId = None
        self._ProjectId = None
        self._TaskType = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskType(self):
        """Task Type: 201. stream, 202. offline
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RobAndLockIntegrationTaskResponse(AbstractModel):
    """RobAndLockIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _RobLockState: Lock Acquisition Status
        :type RobLockState: :class:`tencentcloud.wedata.v20210820.models.RobLockState`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RobLockState = None
        self._RequestId = None

    @property
    def RobLockState(self):
        """Lock Acquisition Status
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RobLockState`
        """
        return self._RobLockState

    @RobLockState.setter
    def RobLockState(self, RobLockState):
        self._RobLockState = RobLockState

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RobLockState") is not None:
            self._RobLockState = RobLockState()
            self._RobLockState._deserialize(params.get("RobLockState"))
        self._RequestId = params.get("RequestId")


class RobLockState(AbstractModel):
    """Lock Acquisition Status: Whether to Grab the Lock and Current Lock Holder

    """

    def __init__(self):
        r"""
        :param _IsRob: Whether to Grab the Lock
        :type IsRob: bool
        :param _Locker: Current Lock Holder
        :type Locker: str
        """
        self._IsRob = None
        self._Locker = None

    @property
    def IsRob(self):
        """Whether to Grab the Lock
        :rtype: bool
        """
        return self._IsRob

    @IsRob.setter
    def IsRob(self, IsRob):
        self._IsRob = IsRob

    @property
    def Locker(self):
        """Current Lock Holder
        :rtype: str
        """
        return self._Locker

    @Locker.setter
    def Locker(self, Locker):
        self._Locker = Locker


    def _deserialize(self, params):
        self._IsRob = params.get("IsRob")
        self._Locker = params.get("Locker")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Rule(AbstractModel):
    """Data Quality Rules

    """

    def __init__(self):
        r"""
        :param _RuleId: Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleId: int
        :param _RuleGroupId: Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _TableId: Data Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _Name: Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Type: Rule Type 1. System Template, 2. Custom Definition Template, 3. Custom Definition SQL
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: int
        :param _RuleTemplateId: Rule Template ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleTemplateId: int
        :param _RuleTemplateContent: Rule Template Overview
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleTemplateContent: str
        :param _QualityDim: Quality Dimension of Rule 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualityDim: int
        :param _SourceObjectType: Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectType: int
        :param _SourceObjectDataType: Applicable Source Data Object Type (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectDataType: int
        :param _SourceObjectDataTypeName: Source Field Detailed Type, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectDataTypeName: str
        :param _SourceObjectValue: Source Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectValue: str
        :param _ConditionType: Detection Range 1. Whole Table, 2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
        :type ConditionType: int
        :param _ConditionExpression: Conditional Scan WHERE Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type ConditionExpression: str
        :param _CustomSql: Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
        :type CustomSql: str
        :param _CompareRule: Alert Trigger Condition
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompareRule: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        :param _AlarmLevel: Alert Trigger Level 1. Low, 2. Medium, 3. High
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmLevel: int
        :param _Description: Rule DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Operator: Rule Configurator
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: str
        :param _TargetDatabaseId: Target Database Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetDatabaseId: str
        :param _TargetDatabaseName: Target Database Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetDatabaseName: str
        :param _TargetTableId: Target Table Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetTableId: str
        :param _TargetTableName: Target Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetTableName: str
        :param _TargetConditionExpr: Target Field Filter Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetConditionExpr: str
        :param _RelConditionExpr: Source and target field association conditions in ON expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type RelConditionExpr: str
        :param _FieldConfig: From Definition template SQL expression parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type FieldConfig: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        :param _MultiSourceFlag: Whether to join multiple tables
Note: This field may return null, indicating that no valid value can be obtained.
        :type MultiSourceFlag: bool
        :param _WhereFlag: Whether WHERE parameters exist
Note: This field may return null, indicating that no valid value can be obtained.
        :type WhereFlag: bool
        :param _TemplateSql: Template original SQL
Note: This field may return null, indicating that no valid value can be obtained.
        :type TemplateSql: str
        :param _SubQualityDim: Template sub-dimensions: 0.Parent dimension type, 1.Consistency: Enum range consistency, 2.Consistency: Numeric range consistency, 3.Consistency: Field data correlation
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubQualityDim: int
        :param _TargetObjectType: Rule applicable target data object types (1: Constant, 2: Offline table level, 3: Offline field level)
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectType: int
        :param _TargetObjectDataType: Rule applicable target data object types (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectDataType: int
        :param _TargetObjectDataTypeName: Target field detailed types, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectDataTypeName: str
        :param _TargetObjectValue: Target field name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectValue: str
        :param _SourceEngineTypes: Source engine type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceEngineTypes: list of int non-negative
        :param _TableName: Table name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _TableOwnerName: Table manager name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerName: str
        :param _ExecStrategy: Execution strategy information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecStrategy: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        :param _Subscription: Subscription information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Subscription: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: int
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _MonitorStatus: Monitoring enabled. 0 false, 1 true
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorStatus: int
        :param _TriggerCondition: Trigger conditionNote: This field may return null, indicating that no valid value can be obtained.
        :type TriggerCondition: str
        :param _DsEnvType: 0, or not returned, or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
        :type DsEnvType: int
        """
        self._RuleId = None
        self._RuleGroupId = None
        self._TableId = None
        self._Name = None
        self._Type = None
        self._RuleTemplateId = None
        self._RuleTemplateContent = None
        self._QualityDim = None
        self._SourceObjectType = None
        self._SourceObjectDataType = None
        self._SourceObjectDataTypeName = None
        self._SourceObjectValue = None
        self._ConditionType = None
        self._ConditionExpression = None
        self._CustomSql = None
        self._CompareRule = None
        self._AlarmLevel = None
        self._Description = None
        self._Operator = None
        self._TargetDatabaseId = None
        self._TargetDatabaseName = None
        self._TargetTableId = None
        self._TargetTableName = None
        self._TargetConditionExpr = None
        self._RelConditionExpr = None
        self._FieldConfig = None
        self._MultiSourceFlag = None
        self._WhereFlag = None
        self._TemplateSql = None
        self._SubQualityDim = None
        self._TargetObjectType = None
        self._TargetObjectDataType = None
        self._TargetObjectDataTypeName = None
        self._TargetObjectValue = None
        self._SourceEngineTypes = None
        self._TableName = None
        self._TableOwnerName = None
        self._ExecStrategy = None
        self._Subscription = None
        self._CreateTime = None
        self._DatasourceId = None
        self._DatabaseId = None
        self._MonitorStatus = None
        self._TriggerCondition = None
        self._DsEnvType = None

    @property
    def RuleId(self):
        """Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleGroupId(self):
        """Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def TableId(self):
        """Data Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def Name(self):
        """Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Rule Type 1. System Template, 2. Custom Definition Template, 3. Custom Definition SQL
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def RuleTemplateId(self):
        """Rule Template ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleTemplateId

    @RuleTemplateId.setter
    def RuleTemplateId(self, RuleTemplateId):
        self._RuleTemplateId = RuleTemplateId

    @property
    def RuleTemplateContent(self):
        """Rule Template Overview
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuleTemplateContent

    @RuleTemplateContent.setter
    def RuleTemplateContent(self, RuleTemplateContent):
        self._RuleTemplateContent = RuleTemplateContent

    @property
    def QualityDim(self):
        """Quality Dimension of Rule 1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def SourceObjectType(self):
        """Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SourceObjectType

    @SourceObjectType.setter
    def SourceObjectType(self, SourceObjectType):
        self._SourceObjectType = SourceObjectType

    @property
    def SourceObjectDataType(self):
        """Applicable Source Data Object Type (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SourceObjectDataType

    @SourceObjectDataType.setter
    def SourceObjectDataType(self, SourceObjectDataType):
        self._SourceObjectDataType = SourceObjectDataType

    @property
    def SourceObjectDataTypeName(self):
        """Source Field Detailed Type, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceObjectDataTypeName

    @SourceObjectDataTypeName.setter
    def SourceObjectDataTypeName(self, SourceObjectDataTypeName):
        self._SourceObjectDataTypeName = SourceObjectDataTypeName

    @property
    def SourceObjectValue(self):
        """Source Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceObjectValue

    @SourceObjectValue.setter
    def SourceObjectValue(self, SourceObjectValue):
        self._SourceObjectValue = SourceObjectValue

    @property
    def ConditionType(self):
        """Detection Range 1. Whole Table, 2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ConditionType

    @ConditionType.setter
    def ConditionType(self, ConditionType):
        self._ConditionType = ConditionType

    @property
    def ConditionExpression(self):
        """Conditional Scan WHERE Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ConditionExpression

    @ConditionExpression.setter
    def ConditionExpression(self, ConditionExpression):
        self._ConditionExpression = ConditionExpression

    @property
    def CustomSql(self):
        """Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CustomSql

    @CustomSql.setter
    def CustomSql(self, CustomSql):
        self._CustomSql = CustomSql

    @property
    def CompareRule(self):
        """Alert Trigger Condition
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CompareRule`
        """
        return self._CompareRule

    @CompareRule.setter
    def CompareRule(self, CompareRule):
        self._CompareRule = CompareRule

    @property
    def AlarmLevel(self):
        """Alert Trigger Level 1. Low, 2. Medium, 3. High
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel

    @property
    def Description(self):
        """Rule DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Operator(self):
        """Rule Configurator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def TargetDatabaseId(self):
        """Target Database Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetDatabaseId

    @TargetDatabaseId.setter
    def TargetDatabaseId(self, TargetDatabaseId):
        self._TargetDatabaseId = TargetDatabaseId

    @property
    def TargetDatabaseName(self):
        """Target Database Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetDatabaseName

    @TargetDatabaseName.setter
    def TargetDatabaseName(self, TargetDatabaseName):
        self._TargetDatabaseName = TargetDatabaseName

    @property
    def TargetTableId(self):
        """Target Table Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetTableId

    @TargetTableId.setter
    def TargetTableId(self, TargetTableId):
        self._TargetTableId = TargetTableId

    @property
    def TargetTableName(self):
        """Target Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetTableName

    @TargetTableName.setter
    def TargetTableName(self, TargetTableName):
        self._TargetTableName = TargetTableName

    @property
    def TargetConditionExpr(self):
        """Target Field Filter Condition Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetConditionExpr

    @TargetConditionExpr.setter
    def TargetConditionExpr(self, TargetConditionExpr):
        self._TargetConditionExpr = TargetConditionExpr

    @property
    def RelConditionExpr(self):
        """Source and target field association conditions in ON expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RelConditionExpr

    @RelConditionExpr.setter
    def RelConditionExpr(self, RelConditionExpr):
        self._RelConditionExpr = RelConditionExpr

    @property
    def FieldConfig(self):
        """From Definition template SQL expression parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        """
        return self._FieldConfig

    @FieldConfig.setter
    def FieldConfig(self, FieldConfig):
        self._FieldConfig = FieldConfig

    @property
    def MultiSourceFlag(self):
        """Whether to join multiple tables
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._MultiSourceFlag

    @MultiSourceFlag.setter
    def MultiSourceFlag(self, MultiSourceFlag):
        self._MultiSourceFlag = MultiSourceFlag

    @property
    def WhereFlag(self):
        """Whether WHERE parameters exist
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._WhereFlag

    @WhereFlag.setter
    def WhereFlag(self, WhereFlag):
        self._WhereFlag = WhereFlag

    @property
    def TemplateSql(self):
        """Template original SQL
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TemplateSql

    @TemplateSql.setter
    def TemplateSql(self, TemplateSql):
        self._TemplateSql = TemplateSql

    @property
    def SubQualityDim(self):
        """Template sub-dimensions: 0.Parent dimension type, 1.Consistency: Enum range consistency, 2.Consistency: Numeric range consistency, 3.Consistency: Field data correlation
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SubQualityDim

    @SubQualityDim.setter
    def SubQualityDim(self, SubQualityDim):
        self._SubQualityDim = SubQualityDim

    @property
    def TargetObjectType(self):
        """Rule applicable target data object types (1: Constant, 2: Offline table level, 3: Offline field level)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TargetObjectType

    @TargetObjectType.setter
    def TargetObjectType(self, TargetObjectType):
        self._TargetObjectType = TargetObjectType

    @property
    def TargetObjectDataType(self):
        """Rule applicable target data object types (1: Numeric, 2: String)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TargetObjectDataType

    @TargetObjectDataType.setter
    def TargetObjectDataType(self, TargetObjectDataType):
        self._TargetObjectDataType = TargetObjectDataType

    @property
    def TargetObjectDataTypeName(self):
        """Target field detailed types, INT, STRING
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetObjectDataTypeName

    @TargetObjectDataTypeName.setter
    def TargetObjectDataTypeName(self, TargetObjectDataTypeName):
        self._TargetObjectDataTypeName = TargetObjectDataTypeName

    @property
    def TargetObjectValue(self):
        """Target field name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetObjectValue

    @TargetObjectValue.setter
    def TargetObjectValue(self, TargetObjectValue):
        self._TargetObjectValue = TargetObjectValue

    @property
    def SourceEngineTypes(self):
        """Source engine type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes

    @property
    def TableName(self):
        """Table name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def TableOwnerName(self):
        """Table manager name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerName

    @TableOwnerName.setter
    def TableOwnerName(self, TableOwnerName):
        self._TableOwnerName = TableOwnerName

    @property
    def ExecStrategy(self):
        """Execution strategy information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        """
        return self._ExecStrategy

    @ExecStrategy.setter
    def ExecStrategy(self, ExecStrategy):
        self._ExecStrategy = ExecStrategy

    @property
    def Subscription(self):
        """Subscription information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        """
        return self._Subscription

    @Subscription.setter
    def Subscription(self, Subscription):
        self._Subscription = Subscription

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def MonitorStatus(self):
        """Monitoring enabled. 0 false, 1 true
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonitorStatus

    @MonitorStatus.setter
    def MonitorStatus(self, MonitorStatus):
        self._MonitorStatus = MonitorStatus

    @property
    def TriggerCondition(self):
        """Trigger conditionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TriggerCondition

    @TriggerCondition.setter
    def TriggerCondition(self, TriggerCondition):
        self._TriggerCondition = TriggerCondition

    @property
    def DsEnvType(self):
        """0, or not returned, or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DsEnvType

    @DsEnvType.setter
    def DsEnvType(self, DsEnvType):
        self._DsEnvType = DsEnvType


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._TableId = params.get("TableId")
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._RuleTemplateId = params.get("RuleTemplateId")
        self._RuleTemplateContent = params.get("RuleTemplateContent")
        self._QualityDim = params.get("QualityDim")
        self._SourceObjectType = params.get("SourceObjectType")
        self._SourceObjectDataType = params.get("SourceObjectDataType")
        self._SourceObjectDataTypeName = params.get("SourceObjectDataTypeName")
        self._SourceObjectValue = params.get("SourceObjectValue")
        self._ConditionType = params.get("ConditionType")
        self._ConditionExpression = params.get("ConditionExpression")
        self._CustomSql = params.get("CustomSql")
        if params.get("CompareRule") is not None:
            self._CompareRule = CompareRule()
            self._CompareRule._deserialize(params.get("CompareRule"))
        self._AlarmLevel = params.get("AlarmLevel")
        self._Description = params.get("Description")
        self._Operator = params.get("Operator")
        self._TargetDatabaseId = params.get("TargetDatabaseId")
        self._TargetDatabaseName = params.get("TargetDatabaseName")
        self._TargetTableId = params.get("TargetTableId")
        self._TargetTableName = params.get("TargetTableName")
        self._TargetConditionExpr = params.get("TargetConditionExpr")
        self._RelConditionExpr = params.get("RelConditionExpr")
        if params.get("FieldConfig") is not None:
            self._FieldConfig = RuleFieldConfig()
            self._FieldConfig._deserialize(params.get("FieldConfig"))
        self._MultiSourceFlag = params.get("MultiSourceFlag")
        self._WhereFlag = params.get("WhereFlag")
        self._TemplateSql = params.get("TemplateSql")
        self._SubQualityDim = params.get("SubQualityDim")
        self._TargetObjectType = params.get("TargetObjectType")
        self._TargetObjectDataType = params.get("TargetObjectDataType")
        self._TargetObjectDataTypeName = params.get("TargetObjectDataTypeName")
        self._TargetObjectValue = params.get("TargetObjectValue")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        self._TableName = params.get("TableName")
        self._TableOwnerName = params.get("TableOwnerName")
        if params.get("ExecStrategy") is not None:
            self._ExecStrategy = RuleGroupExecStrategy()
            self._ExecStrategy._deserialize(params.get("ExecStrategy"))
        if params.get("Subscription") is not None:
            self._Subscription = RuleGroupSubscribe()
            self._Subscription._deserialize(params.get("Subscription"))
        self._CreateTime = params.get("CreateTime")
        self._DatasourceId = params.get("DatasourceId")
        self._DatabaseId = params.get("DatabaseId")
        self._MonitorStatus = params.get("MonitorStatus")
        self._TriggerCondition = params.get("TriggerCondition")
        self._DsEnvType = params.get("DsEnvType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleConfig(AbstractModel):
    """Rule Configuration

    """

    def __init__(self):
        r"""
        :param _RuleId: Rule IDNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleId: int
        :param _ConditionType: Rule Detection Range Type 1. Whole Table  2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
        :type ConditionType: int
        :param _Condition: Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type Condition: str
        :param _TargetCondition: Target Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetCondition: str
        """
        self._RuleId = None
        self._ConditionType = None
        self._Condition = None
        self._TargetCondition = None

    @property
    def RuleId(self):
        """Rule IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ConditionType(self):
        """Rule Detection Range Type 1. Whole Table  2. Conditional Scan
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ConditionType

    @ConditionType.setter
    def ConditionType(self, ConditionType):
        self._ConditionType = ConditionType

    @property
    def Condition(self):
        """Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Condition

    @Condition.setter
    def Condition(self, Condition):
        self._Condition = Condition

    @property
    def TargetCondition(self):
        """Target Detection Range Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetCondition

    @TargetCondition.setter
    def TargetCondition(self, TargetCondition):
        self._TargetCondition = TargetCondition


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._ConditionType = params.get("ConditionType")
        self._Condition = params.get("Condition")
        self._TargetCondition = params.get("TargetCondition")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleDimCnt(AbstractModel):
    """RuleDimCnt Rule Dimension Statistics

    """

    def __init__(self):
        r"""
        :param _Dim: 1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity
        :type Dim: int
        :param _Cnt: count Number
        :type Cnt: int
        """
        self._Dim = None
        self._Cnt = None

    @property
    def Dim(self):
        """1: Accuracy, 2: Uniqueness, 3: Integrity, 4: Consistency, 5: Timeliness, 6: Validity
        :rtype: int
        """
        return self._Dim

    @Dim.setter
    def Dim(self, Dim):
        self._Dim = Dim

    @property
    def Cnt(self):
        """count Number
        :rtype: int
        """
        return self._Cnt

    @Cnt.setter
    def Cnt(self, Cnt):
        self._Cnt = Cnt


    def _deserialize(self, params):
        self._Dim = params.get("Dim")
        self._Cnt = params.get("Cnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleDimStat(AbstractModel):
    """Rule Dimension Count Statistics

    """

    def __init__(self):
        r"""
        :param _TotalCnt: Total number
        :type TotalCnt: int
        :param _DimCntList: Dimension Count Statistics
        :type DimCntList: list of RuleDimCnt
        """
        self._TotalCnt = None
        self._DimCntList = None

    @property
    def TotalCnt(self):
        """Total number
        :rtype: int
        """
        return self._TotalCnt

    @TotalCnt.setter
    def TotalCnt(self, TotalCnt):
        self._TotalCnt = TotalCnt

    @property
    def DimCntList(self):
        """Dimension Count Statistics
        :rtype: list of RuleDimCnt
        """
        return self._DimCntList

    @DimCntList.setter
    def DimCntList(self, DimCntList):
        self._DimCntList = DimCntList


    def _deserialize(self, params):
        self._TotalCnt = params.get("TotalCnt")
        if params.get("DimCntList") is not None:
            self._DimCntList = []
            for item in params.get("DimCntList"):
                obj = RuleDimCnt()
                obj._deserialize(item)
                self._DimCntList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecConfig(AbstractModel):
    """Rule Execution Configuration

    """

    def __init__(self):
        r"""
        :param _QueueName: Compute Queue Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type QueueName: str
        :param _ExecutorGroupId: Execution Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupId: str
        :param _EngineType: The running execution engine, if not specified, the default execution engine under this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
        :type EngineType: str
        """
        self._QueueName = None
        self._ExecutorGroupId = None
        self._EngineType = None

    @property
    def QueueName(self):
        """Compute Queue Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._QueueName

    @QueueName.setter
    def QueueName(self, QueueName):
        self._QueueName = QueueName

    @property
    def ExecutorGroupId(self):
        """Execution Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId

    @property
    def EngineType(self):
        """The running execution engine, if not specified, the default execution engine under this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType


    def _deserialize(self, params):
        self._QueueName = params.get("QueueName")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        self._EngineType = params.get("EngineType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecDateStat(AbstractModel):
    """Overview Trend Results

    """

    def __init__(self):
        r"""
        :param _StatDate: Statistics Date
        :type StatDate: str
        :param _AlarmCnt: Number of Alerts
        :type AlarmCnt: int
        :param _PipelineCnt: Number of blocked processes
        :type PipelineCnt: int
        """
        self._StatDate = None
        self._AlarmCnt = None
        self._PipelineCnt = None

    @property
    def StatDate(self):
        """Statistics Date
        :rtype: str
        """
        return self._StatDate

    @StatDate.setter
    def StatDate(self, StatDate):
        self._StatDate = StatDate

    @property
    def AlarmCnt(self):
        """Number of Alerts
        :rtype: int
        """
        return self._AlarmCnt

    @AlarmCnt.setter
    def AlarmCnt(self, AlarmCnt):
        self._AlarmCnt = AlarmCnt

    @property
    def PipelineCnt(self):
        """Number of blocked processes
        :rtype: int
        """
        return self._PipelineCnt

    @PipelineCnt.setter
    def PipelineCnt(self, PipelineCnt):
        self._PipelineCnt = PipelineCnt


    def _deserialize(self, params):
        self._StatDate = params.get("StatDate")
        self._AlarmCnt = params.get("AlarmCnt")
        self._PipelineCnt = params.get("PipelineCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecLog(AbstractModel):
    """Rule Execution Log

    """

    def __init__(self):
        r"""
        :param _Finished: Completion Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type Finished: bool
        :param _Log: ContentNote: This field may return null, indicating that no valid value can be obtained.
        :type Log: str
        """
        self._Finished = None
        self._Log = None

    @property
    def Finished(self):
        """Completion Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Finished

    @Finished.setter
    def Finished(self, Finished):
        self._Finished = Finished

    @property
    def Log(self):
        """ContentNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Log

    @Log.setter
    def Log(self, Log):
        self._Log = Log


    def _deserialize(self, params):
        self._Finished = params.get("Finished")
        self._Log = params.get("Log")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecResult(AbstractModel):
    """Rule Execution Result

    """

    def __init__(self):
        r"""
        :param _RuleExecId: Rule Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleExecId: int
        :param _RuleGroupExecId: Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupExecId: int
        :param _RuleGroupId: Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _RuleId: Rule IDNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleId: int
        :param _RuleName: Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleName: str
        :param _RuleType: Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQLNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleType: int
        :param _SourceObjectDataTypeName: Source Field Detailed Type, int string
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectDataTypeName: str
        :param _SourceObjectValue: Source Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :type SourceObjectValue: str
        :param _ConditionExpression: Conditional Scan WHERE Condition ExpressionNote: This field may return null, indicating that no valid value can be obtained.
        :type ConditionExpression: str
        :param _ExecResultStatus: Test Results (1: Detection passed, 2: Trigger Rules, 3: Detection failed)
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecResultStatus: int
        :param _TriggerResult: Trigger Result, Alert Sent Successfully, Block Task Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerResult: str
        :param _CompareResult: Comparison Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompareResult: :class:`tencentcloud.wedata.v20210820.models.CompareResult`
        :param _TemplateName: Template name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TemplateName: str
        :param _QualityDim: Quality Dimension
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualityDim: int
        :param _TargetDBTableName: Target Table - Database Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetDBTableName: str
        :param _TargetObjectValue: Target Table - Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectValue: str
        :param _TargetObjectDataType: Target Table - Field Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetObjectDataType: str
        :param _FieldConfig: Custom Definition Template SQL Expression Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type FieldConfig: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        :param _RelConditionExpr: Source Field and Target Field Association Condition ON ExpressionNote: This field may return null, indicating that no valid value can be obtained.
        :type RelConditionExpr: str
        :param _StartTime: Execution timeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _AlarmLevel: 1/2/3: Low/Medium/High
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmLevel: int
        """
        self._RuleExecId = None
        self._RuleGroupExecId = None
        self._RuleGroupId = None
        self._RuleId = None
        self._RuleName = None
        self._RuleType = None
        self._SourceObjectDataTypeName = None
        self._SourceObjectValue = None
        self._ConditionExpression = None
        self._ExecResultStatus = None
        self._TriggerResult = None
        self._CompareResult = None
        self._TemplateName = None
        self._QualityDim = None
        self._TargetDBTableName = None
        self._TargetObjectValue = None
        self._TargetObjectDataType = None
        self._FieldConfig = None
        self._RelConditionExpr = None
        self._StartTime = None
        self._AlarmLevel = None

    @property
    def RuleExecId(self):
        """Rule Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleExecId

    @RuleExecId.setter
    def RuleExecId(self, RuleExecId):
        self._RuleExecId = RuleExecId

    @property
    def RuleGroupExecId(self):
        """Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupExecId

    @RuleGroupExecId.setter
    def RuleGroupExecId(self, RuleGroupExecId):
        self._RuleGroupExecId = RuleGroupExecId

    @property
    def RuleGroupId(self):
        """Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def RuleId(self):
        """Rule IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleType(self):
        """Rule type 1.System Template, 2.Custom Definition Template, 3.Custom Definition SQLNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def SourceObjectDataTypeName(self):
        """Source Field Detailed Type, int string
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceObjectDataTypeName

    @SourceObjectDataTypeName.setter
    def SourceObjectDataTypeName(self, SourceObjectDataTypeName):
        self._SourceObjectDataTypeName = SourceObjectDataTypeName

    @property
    def SourceObjectValue(self):
        """Source Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceObjectValue

    @SourceObjectValue.setter
    def SourceObjectValue(self, SourceObjectValue):
        self._SourceObjectValue = SourceObjectValue

    @property
    def ConditionExpression(self):
        """Conditional Scan WHERE Condition ExpressionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ConditionExpression

    @ConditionExpression.setter
    def ConditionExpression(self, ConditionExpression):
        self._ConditionExpression = ConditionExpression

    @property
    def ExecResultStatus(self):
        """Test Results (1: Detection passed, 2: Trigger Rules, 3: Detection failed)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ExecResultStatus

    @ExecResultStatus.setter
    def ExecResultStatus(self, ExecResultStatus):
        self._ExecResultStatus = ExecResultStatus

    @property
    def TriggerResult(self):
        """Trigger Result, Alert Sent Successfully, Block Task Successful
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TriggerResult

    @TriggerResult.setter
    def TriggerResult(self, TriggerResult):
        self._TriggerResult = TriggerResult

    @property
    def CompareResult(self):
        """Comparison Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.CompareResult`
        """
        return self._CompareResult

    @CompareResult.setter
    def CompareResult(self, CompareResult):
        self._CompareResult = CompareResult

    @property
    def TemplateName(self):
        """Template name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TemplateName

    @TemplateName.setter
    def TemplateName(self, TemplateName):
        self._TemplateName = TemplateName

    @property
    def QualityDim(self):
        """Quality Dimension
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def TargetDBTableName(self):
        """Target Table - Database Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetDBTableName

    @TargetDBTableName.setter
    def TargetDBTableName(self, TargetDBTableName):
        self._TargetDBTableName = TargetDBTableName

    @property
    def TargetObjectValue(self):
        """Target Table - Field Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetObjectValue

    @TargetObjectValue.setter
    def TargetObjectValue(self, TargetObjectValue):
        self._TargetObjectValue = TargetObjectValue

    @property
    def TargetObjectDataType(self):
        """Target Table - Field Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetObjectDataType

    @TargetObjectDataType.setter
    def TargetObjectDataType(self, TargetObjectDataType):
        self._TargetObjectDataType = TargetObjectDataType

    @property
    def FieldConfig(self):
        """Custom Definition Template SQL Expression Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleFieldConfig`
        """
        return self._FieldConfig

    @FieldConfig.setter
    def FieldConfig(self, FieldConfig):
        self._FieldConfig = FieldConfig

    @property
    def RelConditionExpr(self):
        """Source Field and Target Field Association Condition ON ExpressionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RelConditionExpr

    @RelConditionExpr.setter
    def RelConditionExpr(self, RelConditionExpr):
        self._RelConditionExpr = RelConditionExpr

    @property
    def StartTime(self):
        """Execution timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def AlarmLevel(self):
        """1/2/3: Low/Medium/High
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel


    def _deserialize(self, params):
        self._RuleExecId = params.get("RuleExecId")
        self._RuleGroupExecId = params.get("RuleGroupExecId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._RuleType = params.get("RuleType")
        self._SourceObjectDataTypeName = params.get("SourceObjectDataTypeName")
        self._SourceObjectValue = params.get("SourceObjectValue")
        self._ConditionExpression = params.get("ConditionExpression")
        self._ExecResultStatus = params.get("ExecResultStatus")
        self._TriggerResult = params.get("TriggerResult")
        if params.get("CompareResult") is not None:
            self._CompareResult = CompareResult()
            self._CompareResult._deserialize(params.get("CompareResult"))
        self._TemplateName = params.get("TemplateName")
        self._QualityDim = params.get("QualityDim")
        self._TargetDBTableName = params.get("TargetDBTableName")
        self._TargetObjectValue = params.get("TargetObjectValue")
        self._TargetObjectDataType = params.get("TargetObjectDataType")
        if params.get("FieldConfig") is not None:
            self._FieldConfig = RuleFieldConfig()
            self._FieldConfig._deserialize(params.get("FieldConfig"))
        self._RelConditionExpr = params.get("RelConditionExpr")
        self._StartTime = params.get("StartTime")
        self._AlarmLevel = params.get("AlarmLevel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecResultDetail(AbstractModel):
    """Rule Execution Result Details

    """

    def __init__(self):
        r"""
        :param _DatasourceId: Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: int
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatabaseId: Database GUID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _InstanceId: Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _TableId: table guid
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _RuleExecResult: rule execution record
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleExecResult: :class:`tencentcloud.wedata.v20210820.models.RuleExecResult`
        :param _TableOwnerUserId: table owner userId
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerUserId: int
        :param _DatasourceType: 2.HIVE 3.DLC
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceType: int
        """
        self._DatasourceId = None
        self._DatasourceName = None
        self._DatabaseId = None
        self._DatabaseName = None
        self._InstanceId = None
        self._TableId = None
        self._TableName = None
        self._RuleExecResult = None
        self._TableOwnerUserId = None
        self._DatasourceType = None

    @property
    def DatasourceId(self):
        """Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatabaseId(self):
        """Database GUID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def InstanceId(self):
        """Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def TableId(self):
        """table guid
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def RuleExecResult(self):
        """rule execution record
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleExecResult`
        """
        return self._RuleExecResult

    @RuleExecResult.setter
    def RuleExecResult(self, RuleExecResult):
        self._RuleExecResult = RuleExecResult

    @property
    def TableOwnerUserId(self):
        """table owner userId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TableOwnerUserId

    @TableOwnerUserId.setter
    def TableOwnerUserId(self, TableOwnerUserId):
        self._TableOwnerUserId = TableOwnerUserId

    @property
    def DatasourceType(self):
        """2.HIVE 3.DLC
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType


    def _deserialize(self, params):
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceName = params.get("DatasourceName")
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._InstanceId = params.get("InstanceId")
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        if params.get("RuleExecResult") is not None:
            self._RuleExecResult = RuleExecResult()
            self._RuleExecResult._deserialize(params.get("RuleExecResult"))
        self._TableOwnerUserId = params.get("TableOwnerUserId")
        self._DatasourceType = params.get("DatasourceType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecResultPage(AbstractModel):
    """Rule Execution Result Pagination

    """

    def __init__(self):
        r"""
        :param _TotalCount: Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Rule Execution Result
        :type Items: list of RuleExecResult
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Rule Execution Result
        :rtype: list of RuleExecResult
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = RuleExecResult()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleExecStat(AbstractModel):
    """Rule Execution Result

    """

    def __init__(self):
        r"""
        :param _TotalCnt: Total Rule Executions
        :type TotalCnt: int
        :param _LastTotalCnt: Quarter-over-quarter total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastTotalCnt: int
        :param _TotalCntRatio: Percentage of total rule executions
        :type TotalCntRatio: float
        :param _LastTotalCntRatio: Quarter-over-quarter change in total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastTotalCntRatio: float
        :param _TriggerCnt: Number of rule triggers
        :type TriggerCnt: int
        :param _LastTriggerCnt: Quarter-over-quarter number of rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastTriggerCnt: int
        :param _TriggerCntRatio: Percentage of triggers in total
        :type TriggerCntRatio: float
        :param _LastTriggerCntRatio: Quarter-over-quarter change in rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastTriggerCntRatio: float
        :param _AlarmCnt: Number of rule alerts
        :type AlarmCnt: int
        :param _LastAlarmCnt: Quarter-over-quarter number of rule alerts
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastAlarmCnt: int
        :param _AlarmCntRatio: Percentage of alerts in total
        :type AlarmCntRatio: float
        :param _LastAlarmCntRatio: Quarter-over-quarter change in alert numbers
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastAlarmCntRatio: float
        :param _PipelineCnt: Number of block occurrences
        :type PipelineCnt: int
        :param _LastPipelineCnt: Quarter-over-quarter number of block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastPipelineCnt: int
        :param _PipelineCntRatio: Percentage of blocks in total
        :type PipelineCntRatio: float
        :param _LastPipelineCntRatio: Quarter-over-quarter change in block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastPipelineCntRatio: float
        """
        self._TotalCnt = None
        self._LastTotalCnt = None
        self._TotalCntRatio = None
        self._LastTotalCntRatio = None
        self._TriggerCnt = None
        self._LastTriggerCnt = None
        self._TriggerCntRatio = None
        self._LastTriggerCntRatio = None
        self._AlarmCnt = None
        self._LastAlarmCnt = None
        self._AlarmCntRatio = None
        self._LastAlarmCntRatio = None
        self._PipelineCnt = None
        self._LastPipelineCnt = None
        self._PipelineCntRatio = None
        self._LastPipelineCntRatio = None

    @property
    def TotalCnt(self):
        """Total Rule Executions
        :rtype: int
        """
        return self._TotalCnt

    @TotalCnt.setter
    def TotalCnt(self, TotalCnt):
        self._TotalCnt = TotalCnt

    @property
    def LastTotalCnt(self):
        """Quarter-over-quarter total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LastTotalCnt

    @LastTotalCnt.setter
    def LastTotalCnt(self, LastTotalCnt):
        self._LastTotalCnt = LastTotalCnt

    @property
    def TotalCntRatio(self):
        """Percentage of total rule executions
        :rtype: float
        """
        return self._TotalCntRatio

    @TotalCntRatio.setter
    def TotalCntRatio(self, TotalCntRatio):
        self._TotalCntRatio = TotalCntRatio

    @property
    def LastTotalCntRatio(self):
        """Quarter-over-quarter change in total rule executions
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LastTotalCntRatio

    @LastTotalCntRatio.setter
    def LastTotalCntRatio(self, LastTotalCntRatio):
        self._LastTotalCntRatio = LastTotalCntRatio

    @property
    def TriggerCnt(self):
        """Number of rule triggers
        :rtype: int
        """
        return self._TriggerCnt

    @TriggerCnt.setter
    def TriggerCnt(self, TriggerCnt):
        self._TriggerCnt = TriggerCnt

    @property
    def LastTriggerCnt(self):
        """Quarter-over-quarter number of rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LastTriggerCnt

    @LastTriggerCnt.setter
    def LastTriggerCnt(self, LastTriggerCnt):
        self._LastTriggerCnt = LastTriggerCnt

    @property
    def TriggerCntRatio(self):
        """Percentage of triggers in total
        :rtype: float
        """
        return self._TriggerCntRatio

    @TriggerCntRatio.setter
    def TriggerCntRatio(self, TriggerCntRatio):
        self._TriggerCntRatio = TriggerCntRatio

    @property
    def LastTriggerCntRatio(self):
        """Quarter-over-quarter change in rule triggers
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LastTriggerCntRatio

    @LastTriggerCntRatio.setter
    def LastTriggerCntRatio(self, LastTriggerCntRatio):
        self._LastTriggerCntRatio = LastTriggerCntRatio

    @property
    def AlarmCnt(self):
        """Number of rule alerts
        :rtype: int
        """
        return self._AlarmCnt

    @AlarmCnt.setter
    def AlarmCnt(self, AlarmCnt):
        self._AlarmCnt = AlarmCnt

    @property
    def LastAlarmCnt(self):
        """Quarter-over-quarter number of rule alerts
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LastAlarmCnt

    @LastAlarmCnt.setter
    def LastAlarmCnt(self, LastAlarmCnt):
        self._LastAlarmCnt = LastAlarmCnt

    @property
    def AlarmCntRatio(self):
        """Percentage of alerts in total
        :rtype: float
        """
        return self._AlarmCntRatio

    @AlarmCntRatio.setter
    def AlarmCntRatio(self, AlarmCntRatio):
        self._AlarmCntRatio = AlarmCntRatio

    @property
    def LastAlarmCntRatio(self):
        """Quarter-over-quarter change in alert numbers
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LastAlarmCntRatio

    @LastAlarmCntRatio.setter
    def LastAlarmCntRatio(self, LastAlarmCntRatio):
        self._LastAlarmCntRatio = LastAlarmCntRatio

    @property
    def PipelineCnt(self):
        """Number of block occurrences
        :rtype: int
        """
        return self._PipelineCnt

    @PipelineCnt.setter
    def PipelineCnt(self, PipelineCnt):
        self._PipelineCnt = PipelineCnt

    @property
    def LastPipelineCnt(self):
        """Quarter-over-quarter number of block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LastPipelineCnt

    @LastPipelineCnt.setter
    def LastPipelineCnt(self, LastPipelineCnt):
        self._LastPipelineCnt = LastPipelineCnt

    @property
    def PipelineCntRatio(self):
        """Percentage of blocks in total
        :rtype: float
        """
        return self._PipelineCntRatio

    @PipelineCntRatio.setter
    def PipelineCntRatio(self, PipelineCntRatio):
        self._PipelineCntRatio = PipelineCntRatio

    @property
    def LastPipelineCntRatio(self):
        """Quarter-over-quarter change in block occurrences
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LastPipelineCntRatio

    @LastPipelineCntRatio.setter
    def LastPipelineCntRatio(self, LastPipelineCntRatio):
        self._LastPipelineCntRatio = LastPipelineCntRatio


    def _deserialize(self, params):
        self._TotalCnt = params.get("TotalCnt")
        self._LastTotalCnt = params.get("LastTotalCnt")
        self._TotalCntRatio = params.get("TotalCntRatio")
        self._LastTotalCntRatio = params.get("LastTotalCntRatio")
        self._TriggerCnt = params.get("TriggerCnt")
        self._LastTriggerCnt = params.get("LastTriggerCnt")
        self._TriggerCntRatio = params.get("TriggerCntRatio")
        self._LastTriggerCntRatio = params.get("LastTriggerCntRatio")
        self._AlarmCnt = params.get("AlarmCnt")
        self._LastAlarmCnt = params.get("LastAlarmCnt")
        self._AlarmCntRatio = params.get("AlarmCntRatio")
        self._LastAlarmCntRatio = params.get("LastAlarmCntRatio")
        self._PipelineCnt = params.get("PipelineCnt")
        self._LastPipelineCnt = params.get("LastPipelineCnt")
        self._PipelineCntRatio = params.get("PipelineCntRatio")
        self._LastPipelineCntRatio = params.get("LastPipelineCntRatio")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleFieldConfig(AbstractModel):
    """Rule Variable Replacement

    """

    def __init__(self):
        r"""
        :param _WhereConfig: Where Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :type WhereConfig: list of FieldConfig
        :param _TableConfig: Database Table Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableConfig: list of TableConfig
        """
        self._WhereConfig = None
        self._TableConfig = None

    @property
    def WhereConfig(self):
        """Where Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FieldConfig
        """
        return self._WhereConfig

    @WhereConfig.setter
    def WhereConfig(self, WhereConfig):
        self._WhereConfig = WhereConfig

    @property
    def TableConfig(self):
        """Database Table Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableConfig
        """
        return self._TableConfig

    @TableConfig.setter
    def TableConfig(self, TableConfig):
        self._TableConfig = TableConfig


    def _deserialize(self, params):
        if params.get("WhereConfig") is not None:
            self._WhereConfig = []
            for item in params.get("WhereConfig"):
                obj = FieldConfig()
                obj._deserialize(item)
                self._WhereConfig.append(obj)
        if params.get("TableConfig") is not None:
            self._TableConfig = []
            for item in params.get("TableConfig"):
                obj = TableConfig()
                obj._deserialize(item)
                self._TableConfig.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroup(AbstractModel):
    """Data Quality Rule Group

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _DatasourceId: Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatasourceType: Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceType: int
        :param _MonitorType: Monitoring Type: 1. Not Configured, 2. Associate Production Scheduling, 3. Offline Period Detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorType: int
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _TableName: Associated Data Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _TableId: Associated Data Table Id
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableOwnerName: Associated Data Table Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerName: str
        :param _ExecStrategy: Execution policyNote: This field may return null, indicating that no valid value can be obtained.
        :type ExecStrategy: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        :param _Subscription: Execution policyNote: This field may return null, indicating that no valid value can be obtained.
        :type Subscription: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _Permission: Permission Granted
Note: This field may return null, indicating that no valid value can be obtained.
        :type Permission: bool
        :param _RuleCount: Number of Rules Configured
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleCount: int
        :param _MonitorStatus: Monitoring Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorStatus: bool
        :param _TableOwnerUserId: Table Leader UserId
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerUserId: int
        :param _InstanceId: Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _StrategyConfig: Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
        :type StrategyConfig: bool
        :param _SubscribeConfig: Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubscribeConfig: bool
        :param _DsEnvType: Data Source Environment: 0 or not returned. Undefined, 1. Production, 2. Development
Note: This field may return null, indicating that no valid value can be obtained.
        :type DsEnvType: int
        """
        self._RuleGroupId = None
        self._DatasourceId = None
        self._DatasourceName = None
        self._DatasourceType = None
        self._MonitorType = None
        self._UpdateTime = None
        self._TableName = None
        self._TableId = None
        self._TableOwnerName = None
        self._ExecStrategy = None
        self._Subscription = None
        self._DatabaseId = None
        self._DatabaseName = None
        self._Permission = None
        self._RuleCount = None
        self._MonitorStatus = None
        self._TableOwnerUserId = None
        self._InstanceId = None
        self._CreateTime = None
        self._StrategyConfig = None
        self._SubscribeConfig = None
        self._DsEnvType = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def DatasourceId(self):
        """Data Source IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatasourceType(self):
        """Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType

    @property
    def MonitorType(self):
        """Monitoring Type: 1. Not Configured, 2. Associate Production Scheduling, 3. Offline Period Detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def TableName(self):
        """Associated Data Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def TableId(self):
        """Associated Data Table Id
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableOwnerName(self):
        """Associated Data Table Owner
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerName

    @TableOwnerName.setter
    def TableOwnerName(self, TableOwnerName):
        self._TableOwnerName = TableOwnerName

    @property
    def ExecStrategy(self):
        """Execution policyNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupExecStrategy`
        """
        return self._ExecStrategy

    @ExecStrategy.setter
    def ExecStrategy(self, ExecStrategy):
        self._ExecStrategy = ExecStrategy

    @property
    def Subscription(self):
        """Execution policyNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupSubscribe`
        """
        return self._Subscription

    @Subscription.setter
    def Subscription(self, Subscription):
        self._Subscription = Subscription

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def Permission(self):
        """Permission Granted
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission

    @property
    def RuleCount(self):
        """Number of Rules Configured
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleCount

    @RuleCount.setter
    def RuleCount(self, RuleCount):
        self._RuleCount = RuleCount

    @property
    def MonitorStatus(self):
        """Monitoring Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._MonitorStatus

    @MonitorStatus.setter
    def MonitorStatus(self, MonitorStatus):
        self._MonitorStatus = MonitorStatus

    @property
    def TableOwnerUserId(self):
        """Table Leader UserId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TableOwnerUserId

    @TableOwnerUserId.setter
    def TableOwnerUserId(self, TableOwnerUserId):
        self._TableOwnerUserId = TableOwnerUserId

    @property
    def InstanceId(self):
        """Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StrategyConfig(self):
        """Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._StrategyConfig

    @StrategyConfig.setter
    def StrategyConfig(self, StrategyConfig):
        self._StrategyConfig = StrategyConfig

    @property
    def SubscribeConfig(self):
        """Execution Strategy Configured?
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._SubscribeConfig

    @SubscribeConfig.setter
    def SubscribeConfig(self, SubscribeConfig):
        self._SubscribeConfig = SubscribeConfig

    @property
    def DsEnvType(self):
        """Data Source Environment: 0 or not returned. Undefined, 1. Production, 2. Development
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DsEnvType

    @DsEnvType.setter
    def DsEnvType(self, DsEnvType):
        self._DsEnvType = DsEnvType


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceName = params.get("DatasourceName")
        self._DatasourceType = params.get("DatasourceType")
        self._MonitorType = params.get("MonitorType")
        self._UpdateTime = params.get("UpdateTime")
        self._TableName = params.get("TableName")
        self._TableId = params.get("TableId")
        self._TableOwnerName = params.get("TableOwnerName")
        if params.get("ExecStrategy") is not None:
            self._ExecStrategy = RuleGroupExecStrategy()
            self._ExecStrategy._deserialize(params.get("ExecStrategy"))
        if params.get("Subscription") is not None:
            self._Subscription = RuleGroupSubscribe()
            self._Subscription._deserialize(params.get("Subscription"))
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._Permission = params.get("Permission")
        self._RuleCount = params.get("RuleCount")
        self._MonitorStatus = params.get("MonitorStatus")
        self._TableOwnerUserId = params.get("TableOwnerUserId")
        self._InstanceId = params.get("InstanceId")
        self._CreateTime = params.get("CreateTime")
        self._StrategyConfig = params.get("StrategyConfig")
        self._SubscribeConfig = params.get("SubscribeConfig")
        self._DsEnvType = params.get("DsEnvType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupExecResult(AbstractModel):
    """Rule Group Execution Result

    """

    def __init__(self):
        r"""
        :param _RuleGroupExecId: Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupExecId: int
        :param _RuleGroupId: Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _TriggerType: Execution Trigger Type (1: Manual Trigger, 2: In-process Scheduling Trigger, 3: Periodic Scheduling Trigger)
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerType: int
        :param _ExecTime: Execution time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecTime: str
        :param _Status: Execution Status (1. Submitted, 2. Under detection, 3. Normal, 4. Abnormal)
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        :param _AlarmRuleCount: Number of Exceptional Rules
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmRuleCount: int
        :param _TotalRuleCount: Total Number of Rules
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalRuleCount: int
        :param _TableOwnerName: Source Table Responsible Person
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerName: str
        :param _TableName: Source Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _Permission: Permission Availability
Note: This field may return null, indicating that no valid value can be obtained.
        :type Permission: bool
        :param _ExecDetail: Execution Details, Scheduling Plan, or Associated Production Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecDetail: str
        :param _EngineType: Actual Execution Engine
Note: This field may return null, indicating that no valid value can be obtained.
        :type EngineType: str
        :param _RuleExecResultVOList: Rule Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleExecResultVOList: list of RuleExecResult
        """
        self._RuleGroupExecId = None
        self._RuleGroupId = None
        self._TriggerType = None
        self._ExecTime = None
        self._Status = None
        self._AlarmRuleCount = None
        self._TotalRuleCount = None
        self._TableOwnerName = None
        self._TableName = None
        self._TableId = None
        self._DatabaseId = None
        self._DatasourceId = None
        self._Permission = None
        self._ExecDetail = None
        self._EngineType = None
        self._RuleExecResultVOList = None

    @property
    def RuleGroupExecId(self):
        """Rule Group Execution ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupExecId

    @RuleGroupExecId.setter
    def RuleGroupExecId(self, RuleGroupExecId):
        self._RuleGroupExecId = RuleGroupExecId

    @property
    def RuleGroupId(self):
        """Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def TriggerType(self):
        """Execution Trigger Type (1: Manual Trigger, 2: In-process Scheduling Trigger, 3: Periodic Scheduling Trigger)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def ExecTime(self):
        """Execution time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecTime

    @ExecTime.setter
    def ExecTime(self, ExecTime):
        self._ExecTime = ExecTime

    @property
    def Status(self):
        """Execution Status (1. Submitted, 2. Under detection, 3. Normal, 4. Abnormal)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def AlarmRuleCount(self):
        """Number of Exceptional Rules
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AlarmRuleCount

    @AlarmRuleCount.setter
    def AlarmRuleCount(self, AlarmRuleCount):
        self._AlarmRuleCount = AlarmRuleCount

    @property
    def TotalRuleCount(self):
        """Total Number of Rules
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalRuleCount

    @TotalRuleCount.setter
    def TotalRuleCount(self, TotalRuleCount):
        self._TotalRuleCount = TotalRuleCount

    @property
    def TableOwnerName(self):
        """Source Table Responsible Person
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerName

    @TableOwnerName.setter
    def TableOwnerName(self, TableOwnerName):
        self._TableOwnerName = TableOwnerName

    @property
    def TableName(self):
        """Source Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def Permission(self):
        """Permission Availability
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission

    @property
    def ExecDetail(self):
        """Execution Details, Scheduling Plan, or Associated Production Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecDetail

    @ExecDetail.setter
    def ExecDetail(self, ExecDetail):
        self._ExecDetail = ExecDetail

    @property
    def EngineType(self):
        """Actual Execution Engine
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def RuleExecResultVOList(self):
        """Rule Execution Result
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleExecResult
        """
        return self._RuleExecResultVOList

    @RuleExecResultVOList.setter
    def RuleExecResultVOList(self, RuleExecResultVOList):
        self._RuleExecResultVOList = RuleExecResultVOList


    def _deserialize(self, params):
        self._RuleGroupExecId = params.get("RuleGroupExecId")
        self._RuleGroupId = params.get("RuleGroupId")
        self._TriggerType = params.get("TriggerType")
        self._ExecTime = params.get("ExecTime")
        self._Status = params.get("Status")
        self._AlarmRuleCount = params.get("AlarmRuleCount")
        self._TotalRuleCount = params.get("TotalRuleCount")
        self._TableOwnerName = params.get("TableOwnerName")
        self._TableName = params.get("TableName")
        self._TableId = params.get("TableId")
        self._DatabaseId = params.get("DatabaseId")
        self._DatasourceId = params.get("DatasourceId")
        self._Permission = params.get("Permission")
        self._ExecDetail = params.get("ExecDetail")
        self._EngineType = params.get("EngineType")
        if params.get("RuleExecResultVOList") is not None:
            self._RuleExecResultVOList = []
            for item in params.get("RuleExecResultVOList"):
                obj = RuleExecResult()
                obj._deserialize(item)
                self._RuleExecResultVOList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupExecResultPage(AbstractModel):
    """Rule Group Execution Result Pagination

    """

    def __init__(self):
        r"""
        :param _TotalCount: Record CountNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Rule Group Execution ResultNote: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of RuleGroupExecResult
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Record CountNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Rule Group Execution ResultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleGroupExecResult
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = RuleGroupExecResult()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupExecStrategy(AbstractModel):
    """Quality Rule Execution Strategy

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _MonitorType: Monitoring Type 1. Not configured, 2. Associated with production scheduling, 3. Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorType: int
        :param _ExecQueue: Calculation Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecQueue: str
        :param _ExecutorGroupId: Execution Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupId: str
        :param _ExecutorGroupName: Execution Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupName: str
        :param _Tasks: Associated Production Scheduling Task List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of ProdSchedulerTask
        :param _StartTime: Cycle Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: Cycle End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _CycleType: Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _DelayTime: Delayed Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type DelayTime: int
        :param _CycleStep: Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleStep: int
        :param _TaskAction: Time Specification
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _ExecEngineType: Execution engine to run, if not provided, the default execution engine for this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecEngineType: str
        :param _ExecPlan: Execution planNote: This field may return null, indicating that no valid value can be obtained.
        :type ExecPlan: str
        :param _RuleId: Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleId: int
        :param _RuleName: Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleName: str
        :param _TriggerTypes: Trigger Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerTypes: list of str
        """
        self._RuleGroupId = None
        self._MonitorType = None
        self._ExecQueue = None
        self._ExecutorGroupId = None
        self._ExecutorGroupName = None
        self._Tasks = None
        self._StartTime = None
        self._EndTime = None
        self._CycleType = None
        self._DelayTime = None
        self._CycleStep = None
        self._TaskAction = None
        self._ExecEngineType = None
        self._ExecPlan = None
        self._RuleId = None
        self._RuleName = None
        self._TriggerTypes = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def MonitorType(self):
        """Monitoring Type 1. Not configured, 2. Associated with production scheduling, 3. Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType

    @property
    def ExecQueue(self):
        """Calculation Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecQueue

    @ExecQueue.setter
    def ExecQueue(self, ExecQueue):
        self._ExecQueue = ExecQueue

    @property
    def ExecutorGroupId(self):
        """Execution Resource Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId

    @property
    def ExecutorGroupName(self):
        """Execution Resource Group Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupName

    @ExecutorGroupName.setter
    def ExecutorGroupName(self, ExecutorGroupName):
        self._ExecutorGroupName = ExecutorGroupName

    @property
    def Tasks(self):
        """Associated Production Scheduling Task List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ProdSchedulerTask
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def StartTime(self):
        """Cycle Start Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Cycle End Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CycleType(self):
        """Scheduling Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def DelayTime(self):
        """Delayed Scheduling Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def CycleStep(self):
        """Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def TaskAction(self):
        """Time Specification
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def ExecEngineType(self):
        """Execution engine to run, if not provided, the default execution engine for this data source will be requested
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecEngineType

    @ExecEngineType.setter
    def ExecEngineType(self, ExecEngineType):
        self._ExecEngineType = ExecEngineType

    @property
    def ExecPlan(self):
        """Execution planNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecPlan

    @ExecPlan.setter
    def ExecPlan(self, ExecPlan):
        self._ExecPlan = ExecPlan

    @property
    def RuleId(self):
        """Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def TriggerTypes(self):
        """Trigger Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TriggerTypes

    @TriggerTypes.setter
    def TriggerTypes(self, TriggerTypes):
        self._TriggerTypes = TriggerTypes


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        self._MonitorType = params.get("MonitorType")
        self._ExecQueue = params.get("ExecQueue")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        self._ExecutorGroupName = params.get("ExecutorGroupName")
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = ProdSchedulerTask()
                obj._deserialize(item)
                self._Tasks.append(obj)
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CycleType = params.get("CycleType")
        self._DelayTime = params.get("DelayTime")
        self._CycleStep = params.get("CycleStep")
        self._TaskAction = params.get("TaskAction")
        self._ExecEngineType = params.get("ExecEngineType")
        self._ExecPlan = params.get("ExecPlan")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._TriggerTypes = params.get("TriggerTypes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupPage(AbstractModel):
    """Rule Group Pagination

    """

    def __init__(self):
        r"""
        :param _TotalCount: Record CountNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of RuleGroup
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Record CountNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Rule Group List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleGroup
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = RuleGroup()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupSchedulerInfo(AbstractModel):
    """Rule Group Scheduling Information

    """

    def __init__(self):
        r"""
        :param _Id: Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :type Id: int
        :param _MonitorType: 1: Unconfigured 2: Associated with production scheduling 3: Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorType: int
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _CycleType: Abbreviation for cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _CycleStep: Cycle step length
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleStep: int
        :param _CycleDesc: Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleDesc: str
        :param _TaskAction: Specified time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _DelayTime: Delay time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type DelayTime: int
        :param _CycleTaskId: Task ID registered to the task scheduler under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleTaskId: str
        :param _AssociateTaskIds: Associated task ID under associated production scheduling
Note: This field may return null, indicating that no valid value can be obtained.
        :type AssociateTaskIds: list of str
        """
        self._Id = None
        self._MonitorType = None
        self._StartTime = None
        self._EndTime = None
        self._CycleType = None
        self._CycleStep = None
        self._CycleDesc = None
        self._TaskAction = None
        self._DelayTime = None
        self._CycleTaskId = None
        self._AssociateTaskIds = None

    @property
    def Id(self):
        """Rule Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MonitorType(self):
        """1: Unconfigured 2: Associated with production scheduling 3: Offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CycleType(self):
        """Abbreviation for cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Cycle step length
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def CycleDesc(self):
        """Cycle type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleDesc

    @CycleDesc.setter
    def CycleDesc(self, CycleDesc):
        self._CycleDesc = CycleDesc

    @property
    def TaskAction(self):
        """Specified time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def DelayTime(self):
        """Delay time under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def CycleTaskId(self):
        """Task ID registered to the task scheduler under offline cycle detection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleTaskId

    @CycleTaskId.setter
    def CycleTaskId(self, CycleTaskId):
        self._CycleTaskId = CycleTaskId

    @property
    def AssociateTaskIds(self):
        """Associated task ID under associated production scheduling
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._AssociateTaskIds

    @AssociateTaskIds.setter
    def AssociateTaskIds(self, AssociateTaskIds):
        self._AssociateTaskIds = AssociateTaskIds


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._MonitorType = params.get("MonitorType")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._CycleDesc = params.get("CycleDesc")
        self._TaskAction = params.get("TaskAction")
        self._DelayTime = params.get("DelayTime")
        self._CycleTaskId = params.get("CycleTaskId")
        self._AssociateTaskIds = params.get("AssociateTaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupSubscribe(AbstractModel):
    """Data Quality Rule Group Subscription Information

    """

    def __init__(self):
        r"""
        :param _RuleGroupId: Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroupId: int
        :param _Receivers: Subscription Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Receivers: list of SubscribeReceiver
        :param _SubscribeType: Subscription Method 1. Email  2. SMS
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubscribeType: list of int non-negative
        :param _WebHooks: Group Robot Configuration's Webhook Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type WebHooks: list of SubscribeWebHook
        :param _RuleId: Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleId: int
        :param _RuleName: Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :type RuleName: str
        """
        self._RuleGroupId = None
        self._Receivers = None
        self._SubscribeType = None
        self._WebHooks = None
        self._RuleId = None
        self._RuleName = None

    @property
    def RuleGroupId(self):
        """Rule Group ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleGroupId

    @RuleGroupId.setter
    def RuleGroupId(self, RuleGroupId):
        self._RuleGroupId = RuleGroupId

    @property
    def Receivers(self):
        """Subscription Recipient List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SubscribeReceiver
        """
        return self._Receivers

    @Receivers.setter
    def Receivers(self, Receivers):
        self._Receivers = Receivers

    @property
    def SubscribeType(self):
        """Subscription Method 1. Email  2. SMS
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int non-negative
        """
        return self._SubscribeType

    @SubscribeType.setter
    def SubscribeType(self, SubscribeType):
        self._SubscribeType = SubscribeType

    @property
    def WebHooks(self):
        """Group Robot Configuration's Webhook Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SubscribeWebHook
        """
        return self._WebHooks

    @WebHooks.setter
    def WebHooks(self, WebHooks):
        self._WebHooks = WebHooks

    @property
    def RuleId(self):
        """Rule ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName


    def _deserialize(self, params):
        self._RuleGroupId = params.get("RuleGroupId")
        if params.get("Receivers") is not None:
            self._Receivers = []
            for item in params.get("Receivers"):
                obj = SubscribeReceiver()
                obj._deserialize(item)
                self._Receivers.append(obj)
        self._SubscribeType = params.get("SubscribeType")
        if params.get("WebHooks") is not None:
            self._WebHooks = []
            for item in params.get("WebHooks"):
                obj = SubscribeWebHook()
                obj._deserialize(item)
                self._WebHooks.append(obj)
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupTable(AbstractModel):
    """Table Binding Rule Group Information

    """

    def __init__(self):
        r"""
        :param _TableInfo: Table Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableInfo: :class:`tencentcloud.wedata.v20210820.models.RuleGroupTableInnerInfo`
        :param _RuleGroups: Rule Group Scheduling Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type RuleGroups: list of RuleGroupSchedulerInfo
        :param _Subscriptions: Subscriber Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Subscriptions: list of RuleGroupSubscribe
        """
        self._TableInfo = None
        self._RuleGroups = None
        self._Subscriptions = None

    @property
    def TableInfo(self):
        """Table Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.RuleGroupTableInnerInfo`
        """
        return self._TableInfo

    @TableInfo.setter
    def TableInfo(self, TableInfo):
        self._TableInfo = TableInfo

    @property
    def RuleGroups(self):
        """Rule Group Scheduling Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleGroupSchedulerInfo
        """
        return self._RuleGroups

    @RuleGroups.setter
    def RuleGroups(self, RuleGroups):
        self._RuleGroups = RuleGroups

    @property
    def Subscriptions(self):
        """Subscriber Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RuleGroupSubscribe
        """
        return self._Subscriptions

    @Subscriptions.setter
    def Subscriptions(self, Subscriptions):
        self._Subscriptions = Subscriptions


    def _deserialize(self, params):
        if params.get("TableInfo") is not None:
            self._TableInfo = RuleGroupTableInnerInfo()
            self._TableInfo._deserialize(params.get("TableInfo"))
        if params.get("RuleGroups") is not None:
            self._RuleGroups = []
            for item in params.get("RuleGroups"):
                obj = RuleGroupSchedulerInfo()
                obj._deserialize(item)
                self._RuleGroups.append(obj)
        if params.get("Subscriptions") is not None:
            self._Subscriptions = []
            for item in params.get("Subscriptions"):
                obj = RuleGroupSubscribe()
                obj._deserialize(item)
                self._Subscriptions.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleGroupTableInnerInfo(AbstractModel):
    """Rule Group Association Table Information

    """

    def __init__(self):
        r"""
        :param _TableId: Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _InstanceId: Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatasourceType: Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceType: int
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: int
        :param _UserId: Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: int
        """
        self._TableId = None
        self._TableName = None
        self._InstanceId = None
        self._DatasourceId = None
        self._DatasourceName = None
        self._DatasourceType = None
        self._DatabaseId = None
        self._DatabaseName = None
        self._ProjectId = None
        self._UserId = None

    @property
    def TableId(self):
        """Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def InstanceId(self):
        """Instance IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatasourceType(self):
        """Data source typeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UserId(self):
        """Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._InstanceId = params.get("InstanceId")
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceName = params.get("DatasourceName")
        self._DatasourceType = params.get("DatasourceType")
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._ProjectId = params.get("ProjectId")
        self._UserId = params.get("UserId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RulePage(AbstractModel):
    """Data Quality Rule Pagination

    """

    def __init__(self):
        r"""
        :param _TotalCount: Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Rule List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of Rule
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Rule List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of Rule
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = Rule()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleTemplate(AbstractModel):
    """Rule Template

    """

    def __init__(self):
        r"""
        :param _RuleTemplateId: Rule Template ID
        :type RuleTemplateId: int
        :param _Name: Rule Template Name
        :type Name: str
        :param _Description: Rule Template Description
        :type Description: str
        :param _Type: Template Type (1: System Template, 2: Self Definition)
        :type Type: int
        :param _SourceObjectType: Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
        :type SourceObjectType: int
        :param _SourceObjectDataType: Applicable Source Data Object Type (1: Numeric, 2: String)
        :type SourceObjectDataType: int
        :param _SourceContent: Rule Template Source Side Content, distinguish engine, JSON Structure
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceContent: str
        :param _SourceEngineTypes: Applicable Source Data Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceEngineTypes: list of int non-negative
        :param _QualityDim: Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity)
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualityDim: int
        :param _CompareType: Supported Comparison Types for Rule (1: Fixed Value Comparison, greater than, less than, greater than or equal, etc. 2: Fluctuation Value Comparison, absolute value, increase, decrease)
Note: This field may return null, indicating that no valid value can be obtained.
        :type CompareType: int
        :param _CitationCount: Number of References
Note: This field may return null, indicating that no valid value can be obtained.
        :type CitationCount: int
        :param _UserId: Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: int
        :param _UserName: Creator Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserName: str
        :param _UpdateTime: Update Time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _WhereFlag: Whether to add where parameter
Note: This field may return null, indicating that no valid value can be obtained.
        :type WhereFlag: bool
        :param _MultiSourceFlag: Whether to Associate Multiple Tables
Note: This field may return null, indicating that no valid value can be obtained.
        :type MultiSourceFlag: bool
        :param _SqlExpression: Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
        :type SqlExpression: str
        :param _SubQualityDim: Template Sub-dimension,0. Parent Dimension Type,1. Consistency: Enumeration Range Consistency,2. Consistency: Numeric Range Consistency,3. Consistency: Field Data Correlation
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubQualityDim: int
        :param _ResolvedSqlExpression: SQL Expression Parsing Object
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResolvedSqlExpression: :class:`tencentcloud.wedata.v20210820.models.SqlExpression`
        :param _DatasourceTypes: Supported Data Source Types
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceTypes: list of int
        :param _UserIdStr: Created by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserIdStr: str
        """
        self._RuleTemplateId = None
        self._Name = None
        self._Description = None
        self._Type = None
        self._SourceObjectType = None
        self._SourceObjectDataType = None
        self._SourceContent = None
        self._SourceEngineTypes = None
        self._QualityDim = None
        self._CompareType = None
        self._CitationCount = None
        self._UserId = None
        self._UserName = None
        self._UpdateTime = None
        self._WhereFlag = None
        self._MultiSourceFlag = None
        self._SqlExpression = None
        self._SubQualityDim = None
        self._ResolvedSqlExpression = None
        self._DatasourceTypes = None
        self._UserIdStr = None

    @property
    def RuleTemplateId(self):
        """Rule Template ID
        :rtype: int
        """
        return self._RuleTemplateId

    @RuleTemplateId.setter
    def RuleTemplateId(self, RuleTemplateId):
        self._RuleTemplateId = RuleTemplateId

    @property
    def Name(self):
        """Rule Template Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """Rule Template Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Type(self):
        """Template Type (1: System Template, 2: Self Definition)
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def SourceObjectType(self):
        """Applicable Source Data Object Type (1: Constant, 2: Offline Table Level, 3: Offline Field Level)
        :rtype: int
        """
        return self._SourceObjectType

    @SourceObjectType.setter
    def SourceObjectType(self, SourceObjectType):
        self._SourceObjectType = SourceObjectType

    @property
    def SourceObjectDataType(self):
        """Applicable Source Data Object Type (1: Numeric, 2: String)
        :rtype: int
        """
        return self._SourceObjectDataType

    @SourceObjectDataType.setter
    def SourceObjectDataType(self, SourceObjectDataType):
        self._SourceObjectDataType = SourceObjectDataType

    @property
    def SourceContent(self):
        """Rule Template Source Side Content, distinguish engine, JSON Structure
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceContent

    @SourceContent.setter
    def SourceContent(self, SourceContent):
        self._SourceContent = SourceContent

    @property
    def SourceEngineTypes(self):
        """Applicable Source Data Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int non-negative
        """
        return self._SourceEngineTypes

    @SourceEngineTypes.setter
    def SourceEngineTypes(self, SourceEngineTypes):
        self._SourceEngineTypes = SourceEngineTypes

    @property
    def QualityDim(self):
        """Quality Dimension of Rule (1: Accuracy, 2: Uniqueness, 3: Completeness, 4: Consistency, 5: Timeliness, 6: Validity)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim

    @property
    def CompareType(self):
        """Supported Comparison Types for Rule (1: Fixed Value Comparison, greater than, less than, greater than or equal, etc. 2: Fluctuation Value Comparison, absolute value, increase, decrease)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CompareType

    @CompareType.setter
    def CompareType(self, CompareType):
        self._CompareType = CompareType

    @property
    def CitationCount(self):
        """Number of References
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CitationCount

    @CitationCount.setter
    def CitationCount(self, CitationCount):
        self._CitationCount = CitationCount

    @property
    def UserId(self):
        """Creator ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def UserName(self):
        """Creator Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UpdateTime(self):
        """Update Time yyyy-MM-dd HH:mm:ss
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def WhereFlag(self):
        """Whether to add where parameter
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._WhereFlag

    @WhereFlag.setter
    def WhereFlag(self, WhereFlag):
        self._WhereFlag = WhereFlag

    @property
    def MultiSourceFlag(self):
        """Whether to Associate Multiple Tables
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._MultiSourceFlag

    @MultiSourceFlag.setter
    def MultiSourceFlag(self, MultiSourceFlag):
        self._MultiSourceFlag = MultiSourceFlag

    @property
    def SqlExpression(self):
        """Custom Template SQL Expression from Definition
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SqlExpression

    @SqlExpression.setter
    def SqlExpression(self, SqlExpression):
        self._SqlExpression = SqlExpression

    @property
    def SubQualityDim(self):
        """Template Sub-dimension,0. Parent Dimension Type,1. Consistency: Enumeration Range Consistency,2. Consistency: Numeric Range Consistency,3. Consistency: Field Data Correlation
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SubQualityDim

    @SubQualityDim.setter
    def SubQualityDim(self, SubQualityDim):
        self._SubQualityDim = SubQualityDim

    @property
    def ResolvedSqlExpression(self):
        """SQL Expression Parsing Object
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SqlExpression`
        """
        return self._ResolvedSqlExpression

    @ResolvedSqlExpression.setter
    def ResolvedSqlExpression(self, ResolvedSqlExpression):
        self._ResolvedSqlExpression = ResolvedSqlExpression

    @property
    def DatasourceTypes(self):
        """Supported Data Source Types
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of int
        """
        return self._DatasourceTypes

    @DatasourceTypes.setter
    def DatasourceTypes(self, DatasourceTypes):
        self._DatasourceTypes = DatasourceTypes

    @property
    def UserIdStr(self):
        """Created by User ID Str
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserIdStr

    @UserIdStr.setter
    def UserIdStr(self, UserIdStr):
        self._UserIdStr = UserIdStr


    def _deserialize(self, params):
        self._RuleTemplateId = params.get("RuleTemplateId")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Type = params.get("Type")
        self._SourceObjectType = params.get("SourceObjectType")
        self._SourceObjectDataType = params.get("SourceObjectDataType")
        self._SourceContent = params.get("SourceContent")
        self._SourceEngineTypes = params.get("SourceEngineTypes")
        self._QualityDim = params.get("QualityDim")
        self._CompareType = params.get("CompareType")
        self._CitationCount = params.get("CitationCount")
        self._UserId = params.get("UserId")
        self._UserName = params.get("UserName")
        self._UpdateTime = params.get("UpdateTime")
        self._WhereFlag = params.get("WhereFlag")
        self._MultiSourceFlag = params.get("MultiSourceFlag")
        self._SqlExpression = params.get("SqlExpression")
        self._SubQualityDim = params.get("SubQualityDim")
        if params.get("ResolvedSqlExpression") is not None:
            self._ResolvedSqlExpression = SqlExpression()
            self._ResolvedSqlExpression._deserialize(params.get("ResolvedSqlExpression"))
        self._DatasourceTypes = params.get("DatasourceTypes")
        self._UserIdStr = params.get("UserIdStr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleTemplatePage(AbstractModel):
    """RuleTemplatePage results

    """

    def __init__(self):
        r"""
        :param _TotalCount: Record Count
        :type TotalCount: int
        :param _Items: Template List
        :type Items: list of RuleTemplate
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Record Count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Template List
        :rtype: list of RuleTemplate
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = RuleTemplate()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunForceSucScheduleInstancesRequest(AbstractModel):
    """RunForceSucScheduleInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query conditions
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query conditions
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunForceSucScheduleInstancesResponse(AbstractModel):
    """RunForceSucScheduleInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperateResultOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class RunRerunScheduleInstancesRequest(AbstractModel):
    """RunRerunScheduleInstances request structure.

    """

    def __init__(self):
        r"""
        :param _Instances: Instance List
        :type Instances: list of InstanceOpsDto
        :param _CheckFather: Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :type CheckFather: bool
        :param _RerunType: Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :type RerunType: str
        :param _DependentWay: Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :type DependentWay: str
        :param _SkipEventListening: Rerun Ignore Event Listening or Not
        :type SkipEventListening: bool
        :param _SonInstanceType: Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :type SonInstanceType: str
        :param _SearchCondition: Query conditions
        :type SearchCondition: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        :param _OptType: Access type
        :type OptType: str
        :param _OperatorName: Operator Name
        :type OperatorName: str
        :param _OperatorId: Operator ID
        :type OperatorId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _PageIndex: Index Page Number
        :type PageIndex: int
        :param _PageSize: Page size
        :type PageSize: int
        :param _Count: Total Data
        :type Count: int
        :param _RequestBaseInfo: Basic Request Information
        :type RequestBaseInfo: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        :param _IsCount: Whether to Calculate Total
        :type IsCount: bool
        """
        self._Instances = None
        self._CheckFather = None
        self._RerunType = None
        self._DependentWay = None
        self._SkipEventListening = None
        self._SonInstanceType = None
        self._SearchCondition = None
        self._OptType = None
        self._OperatorName = None
        self._OperatorId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._PageIndex = None
        self._PageSize = None
        self._Count = None
        self._RequestBaseInfo = None
        self._IsCount = None

    @property
    def Instances(self):
        """Instance List
        :rtype: list of InstanceOpsDto
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def CheckFather(self):
        """Check Parent Task Type, true: Check parent task; false: Do not check parent task
        :rtype: bool
        """
        return self._CheckFather

    @CheckFather.setter
    def CheckFather(self, CheckFather):
        self._CheckFather = CheckFather

    @property
    def RerunType(self):
        """Rerun Type, 1: Self; 3: Child; 2: Self and Child
        :rtype: str
        """
        return self._RerunType

    @RerunType.setter
    def RerunType(self, RerunType):
        self._RerunType = RerunType

    @property
    def DependentWay(self):
        """Instance Dependency Mode, 1: Self-dependent; 2: Task-dependent; 3: Self and Parent-Child dependent
        :rtype: str
        """
        return self._DependentWay

    @DependentWay.setter
    def DependentWay(self, DependentWay):
        self._DependentWay = DependentWay

    @property
    def SkipEventListening(self):
        """Rerun Ignore Event Listening or Not
        :rtype: bool
        """
        return self._SkipEventListening

    @SkipEventListening.setter
    def SkipEventListening(self, SkipEventListening):
        self._SkipEventListening = SkipEventListening

    @property
    def SonInstanceType(self):
        """Downstream Instance Range 1: Within the workflow 2: Within the project 3: Across all workflows dependent on the project
        :rtype: str
        """
        return self._SonInstanceType

    @SonInstanceType.setter
    def SonInstanceType(self, SonInstanceType):
        self._SonInstanceType = SonInstanceType

    @property
    def SearchCondition(self):
        """Query conditions
        :rtype: :class:`tencentcloud.wedata.v20210820.models.InstanceApiOpsRequest`
        """
        return self._SearchCondition

    @SearchCondition.setter
    def SearchCondition(self, SearchCondition):
        self._SearchCondition = SearchCondition

    @property
    def OptType(self):
        """Access type
        :rtype: str
        """
        return self._OptType

    @OptType.setter
    def OptType(self, OptType):
        self._OptType = OptType

    @property
    def OperatorName(self):
        """Operator Name
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def OperatorId(self):
        """Operator ID
        :rtype: str
        """
        return self._OperatorId

    @OperatorId.setter
    def OperatorId(self, OperatorId):
        self._OperatorId = OperatorId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def PageIndex(self):
        """Index Page Number
        :rtype: int
        """
        return self._PageIndex

    @PageIndex.setter
    def PageIndex(self, PageIndex):
        self._PageIndex = PageIndex

    @property
    def PageSize(self):
        """Page size
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize

    @property
    def Count(self):
        """Total Data
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestBaseInfo(self):
        """Basic Request Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ProjectBaseInfoOpsRequest`
        """
        return self._RequestBaseInfo

    @RequestBaseInfo.setter
    def RequestBaseInfo(self, RequestBaseInfo):
        self._RequestBaseInfo = RequestBaseInfo

    @property
    def IsCount(self):
        """Whether to Calculate Total
        :rtype: bool
        """
        return self._IsCount

    @IsCount.setter
    def IsCount(self, IsCount):
        self._IsCount = IsCount


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceOpsDto()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._CheckFather = params.get("CheckFather")
        self._RerunType = params.get("RerunType")
        self._DependentWay = params.get("DependentWay")
        self._SkipEventListening = params.get("SkipEventListening")
        self._SonInstanceType = params.get("SonInstanceType")
        if params.get("SearchCondition") is not None:
            self._SearchCondition = InstanceApiOpsRequest()
            self._SearchCondition._deserialize(params.get("SearchCondition"))
        self._OptType = params.get("OptType")
        self._OperatorName = params.get("OperatorName")
        self._OperatorId = params.get("OperatorId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._PageIndex = params.get("PageIndex")
        self._PageSize = params.get("PageSize")
        self._Count = params.get("Count")
        if params.get("RequestBaseInfo") is not None:
            self._RequestBaseInfo = ProjectBaseInfoOpsRequest()
            self._RequestBaseInfo._deserialize(params.get("RequestBaseInfo"))
        self._IsCount = params.get("IsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunRerunScheduleInstancesResponse(AbstractModel):
    """RunRerunScheduleInstances response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResultOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperateResultOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class RunTasksByMultiWorkflowRequest(AbstractModel):
    """RunTasksByMultiWorkflow request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowIds: Workflow ID List
        :type WorkflowIds: list of str
        :param _EnableMakeUp: Whether to supplement intermediate instances 0. Do not supplement 1. Supplement instance
        :type EnableMakeUp: int
        """
        self._ProjectId = None
        self._WorkflowIds = None
        self._EnableMakeUp = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowIds(self):
        """Workflow ID List
        :rtype: list of str
        """
        return self._WorkflowIds

    @WorkflowIds.setter
    def WorkflowIds(self, WorkflowIds):
        self._WorkflowIds = WorkflowIds

    @property
    def EnableMakeUp(self):
        """Whether to supplement intermediate instances 0. Do not supplement 1. Supplement instance
        :rtype: int
        """
        return self._EnableMakeUp

    @EnableMakeUp.setter
    def EnableMakeUp(self, EnableMakeUp):
        self._EnableMakeUp = EnableMakeUp


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowIds = params.get("WorkflowIds")
        self._EnableMakeUp = params.get("EnableMakeUp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunTasksByMultiWorkflowResponse(AbstractModel):
    """RunTasksByMultiWorkflow response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation ResultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.OperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = OperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class RuntimeInstanceCntTop(AbstractModel):
    """Specify Time Window Instance Duration Ranking

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _TaskName: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _InCharge: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _CycleUnit: Task Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _State: Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type State: str
        :param _RunTime: Time Consumption
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunTime: int
        :param _CurRunTime: Instance Running TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CurRunTime: str
        :param _WaitScheduleTime: Waiting for Scheduling Duration
Note: This field may return null, indicating that no valid value can be obtained.
        :type WaitScheduleTime: int
        """
        self._TaskId = None
        self._TaskName = None
        self._InCharge = None
        self._CycleUnit = None
        self._State = None
        self._RunTime = None
        self._CurRunTime = None
        self._WaitScheduleTime = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def InCharge(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def CycleUnit(self):
        """Task Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def State(self):
        """Instance StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def RunTime(self):
        """Time Consumption
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RunTime

    @RunTime.setter
    def RunTime(self, RunTime):
        self._RunTime = RunTime

    @property
    def CurRunTime(self):
        """Instance Running TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CurRunTime

    @CurRunTime.setter
    def CurRunTime(self, CurRunTime):
        self._CurRunTime = CurRunTime

    @property
    def WaitScheduleTime(self):
        """Waiting for Scheduling Duration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._WaitScheduleTime

    @WaitScheduleTime.setter
    def WaitScheduleTime(self, WaitScheduleTime):
        self._WaitScheduleTime = WaitScheduleTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._InCharge = params.get("InCharge")
        self._CycleUnit = params.get("CycleUnit")
        self._State = params.get("State")
        self._RunTime = params.get("RunTime")
        self._CurRunTime = params.get("CurRunTime")
        self._WaitScheduleTime = params.get("WaitScheduleTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SaveCustomFunctionRequest(AbstractModel):
    """SaveCustomFunction request structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function Unique Identifier
        :type FunctionId: str
        :param _Kind: Classification: Window functions, Aggregation functions, Date functions...
        :type Kind: str
        :param _ClusterIdentifier: Cluster Engine Instance
        :type ClusterIdentifier: str
        :param _ClassName: Class
        :type ClassName: str
        :param _ResourceList: Resource list
        :type ResourceList: list of FunctionResource
        :param _Description: Function Description
        :type Description: str
        :param _Usage: Usage
        :type Usage: str
        :param _ParamDesc: Parameter description
        :type ParamDesc: str
        :param _ReturnDesc: Return value description
        :type ReturnDesc: str
        :param _Example: Sample code
        :type Example: str
        :param _ProjectId: Project ID, cannot be modified, used by DLC when saving the function
        :type ProjectId: str
        :param _DbName: Database Name, cannot be modified, used by DLC when saving the function
        :type DbName: str
        :param _Name: Function Name, cannot be modified, used by DLC when saving the function
        :type Name: str
        """
        self._FunctionId = None
        self._Kind = None
        self._ClusterIdentifier = None
        self._ClassName = None
        self._ResourceList = None
        self._Description = None
        self._Usage = None
        self._ParamDesc = None
        self._ReturnDesc = None
        self._Example = None
        self._ProjectId = None
        self._DbName = None
        self._Name = None

    @property
    def FunctionId(self):
        """Function Unique Identifier
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def Kind(self):
        """Classification: Window functions, Aggregation functions, Date functions...
        :rtype: str
        """
        return self._Kind

    @Kind.setter
    def Kind(self, Kind):
        self._Kind = Kind

    @property
    def ClusterIdentifier(self):
        """Cluster Engine Instance
        :rtype: str
        """
        return self._ClusterIdentifier

    @ClusterIdentifier.setter
    def ClusterIdentifier(self, ClusterIdentifier):
        self._ClusterIdentifier = ClusterIdentifier

    @property
    def ClassName(self):
        """Class
        :rtype: str
        """
        return self._ClassName

    @ClassName.setter
    def ClassName(self, ClassName):
        self._ClassName = ClassName

    @property
    def ResourceList(self):
        """Resource list
        :rtype: list of FunctionResource
        """
        return self._ResourceList

    @ResourceList.setter
    def ResourceList(self, ResourceList):
        self._ResourceList = ResourceList

    @property
    def Description(self):
        """Function Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Usage(self):
        """Usage
        :rtype: str
        """
        return self._Usage

    @Usage.setter
    def Usage(self, Usage):
        self._Usage = Usage

    @property
    def ParamDesc(self):
        """Parameter description
        :rtype: str
        """
        return self._ParamDesc

    @ParamDesc.setter
    def ParamDesc(self, ParamDesc):
        self._ParamDesc = ParamDesc

    @property
    def ReturnDesc(self):
        """Return value description
        :rtype: str
        """
        return self._ReturnDesc

    @ReturnDesc.setter
    def ReturnDesc(self, ReturnDesc):
        self._ReturnDesc = ReturnDesc

    @property
    def Example(self):
        """Sample code
        :rtype: str
        """
        return self._Example

    @Example.setter
    def Example(self, Example):
        self._Example = Example

    @property
    def ProjectId(self):
        """Project ID, cannot be modified, used by DLC when saving the function
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DbName(self):
        """Database Name, cannot be modified, used by DLC when saving the function
        :rtype: str
        """
        return self._DbName

    @DbName.setter
    def DbName(self, DbName):
        self._DbName = DbName

    @property
    def Name(self):
        """Function Name, cannot be modified, used by DLC when saving the function
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._Kind = params.get("Kind")
        self._ClusterIdentifier = params.get("ClusterIdentifier")
        self._ClassName = params.get("ClassName")
        if params.get("ResourceList") is not None:
            self._ResourceList = []
            for item in params.get("ResourceList"):
                obj = FunctionResource()
                obj._deserialize(item)
                self._ResourceList.append(obj)
        self._Description = params.get("Description")
        self._Usage = params.get("Usage")
        self._ParamDesc = params.get("ParamDesc")
        self._ReturnDesc = params.get("ReturnDesc")
        self._Example = params.get("Example")
        self._ProjectId = params.get("ProjectId")
        self._DbName = params.get("DbName")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SaveCustomFunctionResponse(AbstractModel):
    """SaveCustomFunction response structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type FunctionId: str
        :param _ErrorMessage: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FunctionId = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def FunctionId(self):
        """Function Unique IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ErrorMessage(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class SchedulerTaskInstanceInfo(AbstractModel):
    """Integrate Offline Task Instance Information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _CurRunDate: Instance Running Time
        :type CurRunDate: str
        """
        self._TaskId = None
        self._CurRunDate = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CurRunDate(self):
        """Instance Running Time
        :rtype: str
        """
        return self._CurRunDate

    @CurRunDate.setter
    def CurRunDate(self, CurRunDate):
        self._CurRunDate = CurRunDate


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CurRunDate = params.get("CurRunDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SchemaDetail(AbstractModel):
    """Metadata Field Information

    """

    def __init__(self):
        r"""
        :param _ColumnKey: Column
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnKey: str
        :param _Description: DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Name: NameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _Type: TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        """
        self._ColumnKey = None
        self._Description = None
        self._Name = None
        self._Type = None

    @property
    def ColumnKey(self):
        """Column
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnKey

    @ColumnKey.setter
    def ColumnKey(self, ColumnKey):
        self._ColumnKey = ColumnKey

    @property
    def Description(self):
        """DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Name(self):
        """NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._ColumnKey = params.get("ColumnKey")
        self._Description = params.get("Description")
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenInstanceInfo(AbstractModel):
    """Instance Statistics Display

    """

    def __init__(self):
        r"""
        :param _CountTag: Statistical Indicator 0: All Instances, 1: Current Day, 2: YesterdayNote: This field may return null, indicating that no valid value can be obtained.
        :type CountTag: int
        :param _TotalNum: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalNum: int
        :param _RunningNum: RunningNote: This field may return null, indicating that no valid value can be obtained.
        :type RunningNum: int
        :param _WaitRunningNum: Pending Execution
Note: This field may return null, indicating that no valid value can be obtained.
        :type WaitRunningNum: int
        :param _DependencyNum: Wait for Upstream
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependencyNum: int
        :param _WaitEventNum: Waiting for Event
Note: This field may return null, indicating that no valid value can be obtained.
        :type WaitEventNum: str
        :param _StoppingNum: Terminating
Note: This field may return null, indicating that no valid value can be obtained.
        :type StoppingNum: int
        :param _SucceedNum: SuccessNote: This field may return null, indicating that no valid value can be obtained.
        :type SucceedNum: int
        :param _FailedNum: Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :type FailedNum: int
        """
        self._CountTag = None
        self._TotalNum = None
        self._RunningNum = None
        self._WaitRunningNum = None
        self._DependencyNum = None
        self._WaitEventNum = None
        self._StoppingNum = None
        self._SucceedNum = None
        self._FailedNum = None

    @property
    def CountTag(self):
        """Statistical Indicator 0: All Instances, 1: Current Day, 2: YesterdayNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CountTag

    @CountTag.setter
    def CountTag(self, CountTag):
        self._CountTag = CountTag

    @property
    def TotalNum(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalNum

    @TotalNum.setter
    def TotalNum(self, TotalNum):
        self._TotalNum = TotalNum

    @property
    def RunningNum(self):
        """RunningNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RunningNum

    @RunningNum.setter
    def RunningNum(self, RunningNum):
        self._RunningNum = RunningNum

    @property
    def WaitRunningNum(self):
        """Pending Execution
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._WaitRunningNum

    @WaitRunningNum.setter
    def WaitRunningNum(self, WaitRunningNum):
        self._WaitRunningNum = WaitRunningNum

    @property
    def DependencyNum(self):
        """Wait for Upstream
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DependencyNum

    @DependencyNum.setter
    def DependencyNum(self, DependencyNum):
        self._DependencyNum = DependencyNum

    @property
    def WaitEventNum(self):
        """Waiting for Event
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WaitEventNum

    @WaitEventNum.setter
    def WaitEventNum(self, WaitEventNum):
        self._WaitEventNum = WaitEventNum

    @property
    def StoppingNum(self):
        """Terminating
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StoppingNum

    @StoppingNum.setter
    def StoppingNum(self, StoppingNum):
        self._StoppingNum = StoppingNum

    @property
    def SucceedNum(self):
        """SuccessNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._SucceedNum

    @SucceedNum.setter
    def SucceedNum(self, SucceedNum):
        self._SucceedNum = SucceedNum

    @property
    def FailedNum(self):
        """Failed
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FailedNum

    @FailedNum.setter
    def FailedNum(self, FailedNum):
        self._FailedNum = FailedNum


    def _deserialize(self, params):
        self._CountTag = params.get("CountTag")
        self._TotalNum = params.get("TotalNum")
        self._RunningNum = params.get("RunningNum")
        self._WaitRunningNum = params.get("WaitRunningNum")
        self._DependencyNum = params.get("DependencyNum")
        self._WaitEventNum = params.get("WaitEventNum")
        self._StoppingNum = params.get("StoppingNum")
        self._SucceedNum = params.get("SucceedNum")
        self._FailedNum = params.get("FailedNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenTaskInfo(AbstractModel):
    """Operations and Maintenance Dashboard Task Display

    """

    def __init__(self):
        r"""
        :param _CountTag: Statistical Indicator 0: All Instances, 1: Current Day, 2: Yesterday
        :type CountTag: int
        :param _TotalNum: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalNum: int
        :param _RunningNum: RunningNote: This field may return null, indicating that no valid value can be obtained.
        :type RunningNum: int
        :param _StoppingNum: StoppingNote: This field may return null, indicating that no valid value can be obtained.
        :type StoppingNum: int
        :param _StoppedNum: StoppedNote: This field may return null, indicating that no valid value can be obtained.
        :type StoppedNum: int
        :param _FrozenNum: Pause
Note: This field may return null, indicating that no valid value can be obtained.
        :type FrozenNum: int
        :param _YearNum: Annual task
Note: This field may return null, indicating that no valid value can be obtained.
        :type YearNum: int
        :param _MonthNum: Monthly task
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonthNum: int
        :param _WeekNum: Weekly task
Note: This field may return null, indicating that no valid value can be obtained.
        :type WeekNum: int
        :param _DayNum: Daily task
Note: This field may return null, indicating that no valid value can be obtained.
        :type DayNum: int
        :param _HourNum: Hourly task
Note: This field may return null, indicating that no valid value can be obtained.
        :type HourNum: int
        :param _MinuteNum: Minute Task
Note: This field may return null, indicating that no valid value can be obtained.
        :type MinuteNum: int
        """
        self._CountTag = None
        self._TotalNum = None
        self._RunningNum = None
        self._StoppingNum = None
        self._StoppedNum = None
        self._FrozenNum = None
        self._YearNum = None
        self._MonthNum = None
        self._WeekNum = None
        self._DayNum = None
        self._HourNum = None
        self._MinuteNum = None

    @property
    def CountTag(self):
        """Statistical Indicator 0: All Instances, 1: Current Day, 2: Yesterday
        :rtype: int
        """
        return self._CountTag

    @CountTag.setter
    def CountTag(self, CountTag):
        self._CountTag = CountTag

    @property
    def TotalNum(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalNum

    @TotalNum.setter
    def TotalNum(self, TotalNum):
        self._TotalNum = TotalNum

    @property
    def RunningNum(self):
        """RunningNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RunningNum

    @RunningNum.setter
    def RunningNum(self, RunningNum):
        self._RunningNum = RunningNum

    @property
    def StoppingNum(self):
        """StoppingNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StoppingNum

    @StoppingNum.setter
    def StoppingNum(self, StoppingNum):
        self._StoppingNum = StoppingNum

    @property
    def StoppedNum(self):
        """StoppedNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StoppedNum

    @StoppedNum.setter
    def StoppedNum(self, StoppedNum):
        self._StoppedNum = StoppedNum

    @property
    def FrozenNum(self):
        """Pause
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FrozenNum

    @FrozenNum.setter
    def FrozenNum(self, FrozenNum):
        self._FrozenNum = FrozenNum

    @property
    def YearNum(self):
        """Annual task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._YearNum

    @YearNum.setter
    def YearNum(self, YearNum):
        self._YearNum = YearNum

    @property
    def MonthNum(self):
        """Monthly task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonthNum

    @MonthNum.setter
    def MonthNum(self, MonthNum):
        self._MonthNum = MonthNum

    @property
    def WeekNum(self):
        """Weekly task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._WeekNum

    @WeekNum.setter
    def WeekNum(self, WeekNum):
        self._WeekNum = WeekNum

    @property
    def DayNum(self):
        """Daily task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DayNum

    @DayNum.setter
    def DayNum(self, DayNum):
        self._DayNum = DayNum

    @property
    def HourNum(self):
        """Hourly task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._HourNum

    @HourNum.setter
    def HourNum(self, HourNum):
        self._HourNum = HourNum

    @property
    def MinuteNum(self):
        """Minute Task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MinuteNum

    @MinuteNum.setter
    def MinuteNum(self, MinuteNum):
        self._MinuteNum = MinuteNum


    def _deserialize(self, params):
        self._CountTag = params.get("CountTag")
        self._TotalNum = params.get("TotalNum")
        self._RunningNum = params.get("RunningNum")
        self._StoppingNum = params.get("StoppingNum")
        self._StoppedNum = params.get("StoppedNum")
        self._FrozenNum = params.get("FrozenNum")
        self._YearNum = params.get("YearNum")
        self._MonthNum = params.get("MonthNum")
        self._WeekNum = params.get("WeekNum")
        self._DayNum = params.get("DayNum")
        self._HourNum = params.get("HourNum")
        self._MinuteNum = params.get("MinuteNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScriptInfoResponse(AbstractModel):
    """Development Space - Script-related Response

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ResourceId: str
        :param _FileName: Script Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type FileName: str
        :param _FileExtensionType: File Extension Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type FileExtensionType: str
        :param _Type: File TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Md5Value: md5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Md5Value: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _Size: File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type Size: float
        :param _LocalPath: Local Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type LocalPath: str
        :param _RemotePath: Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemotePath: str
        :param _OwnerName: UsernameNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerName: str
        :param _Owner: User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _PathDepth: Path Depth
Note: This field may return null, indicating that no valid value can be obtained.
        :type PathDepth: int
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ExtraInfo: Additional Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtraInfo: str
        :param _LocalTempPath: Local Temporary File Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type LocalTempPath: str
        :param _ZipPath: Local Compressed File Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type ZipPath: str
        :param _Bucket: COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type Bucket: str
        :param _Region: COS Region
Note: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        """
        self._ResourceId = None
        self._FileName = None
        self._FileExtensionType = None
        self._Type = None
        self._Md5Value = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Size = None
        self._LocalPath = None
        self._RemotePath = None
        self._OwnerName = None
        self._Owner = None
        self._PathDepth = None
        self._ProjectId = None
        self._ExtraInfo = None
        self._LocalTempPath = None
        self._ZipPath = None
        self._Bucket = None
        self._Region = None

    @property
    def ResourceId(self):
        """Resource IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def FileName(self):
        """Script Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileExtensionType(self):
        """File Extension Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileExtensionType

    @FileExtensionType.setter
    def FileExtensionType(self, FileExtensionType):
        self._FileExtensionType = FileExtensionType

    @property
    def Type(self):
        """File TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Md5Value(self):
        """md5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Md5Value

    @Md5Value.setter
    def Md5Value(self, Md5Value):
        self._Md5Value = Md5Value

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Size(self):
        """File sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def LocalPath(self):
        """Local Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LocalPath

    @LocalPath.setter
    def LocalPath(self, LocalPath):
        self._LocalPath = LocalPath

    @property
    def RemotePath(self):
        """Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RemotePath

    @RemotePath.setter
    def RemotePath(self, RemotePath):
        self._RemotePath = RemotePath

    @property
    def OwnerName(self):
        """UsernameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerName

    @OwnerName.setter
    def OwnerName(self, OwnerName):
        self._OwnerName = OwnerName

    @property
    def Owner(self):
        """User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def PathDepth(self):
        """Path Depth
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PathDepth

    @PathDepth.setter
    def PathDepth(self, PathDepth):
        self._PathDepth = PathDepth

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ExtraInfo(self):
        """Additional Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExtraInfo

    @ExtraInfo.setter
    def ExtraInfo(self, ExtraInfo):
        self._ExtraInfo = ExtraInfo

    @property
    def LocalTempPath(self):
        """Local Temporary File Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LocalTempPath

    @LocalTempPath.setter
    def LocalTempPath(self, LocalTempPath):
        self._LocalTempPath = LocalTempPath

    @property
    def ZipPath(self):
        """Local Compressed File Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ZipPath

    @ZipPath.setter
    def ZipPath(self, ZipPath):
        self._ZipPath = ZipPath

    @property
    def Bucket(self):
        """COS Bucket Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Bucket

    @Bucket.setter
    def Bucket(self, Bucket):
        self._Bucket = Bucket

    @property
    def Region(self):
        """COS Region
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._FileName = params.get("FileName")
        self._FileExtensionType = params.get("FileExtensionType")
        self._Type = params.get("Type")
        self._Md5Value = params.get("Md5Value")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Size = params.get("Size")
        self._LocalPath = params.get("LocalPath")
        self._RemotePath = params.get("RemotePath")
        self._OwnerName = params.get("OwnerName")
        self._Owner = params.get("Owner")
        self._PathDepth = params.get("PathDepth")
        self._ProjectId = params.get("ProjectId")
        self._ExtraInfo = params.get("ExtraInfo")
        self._LocalTempPath = params.get("LocalTempPath")
        self._ZipPath = params.get("ZipPath")
        self._Bucket = params.get("Bucket")
        self._Region = params.get("Region")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScriptRequestInfo(AbstractModel):
    """Development Space - Upload Script Request

    """

    def __init__(self):
        r"""
        :param _FilePath: Script path
Project area 1470575647377821696 project, under the f1 directory:
/datastudio/project/1470575647377821696/f1/sql1234.sql
Personal area:
/datastudio/personal/sqlTTT.sql
        :type FilePath: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Version: Script Version
        :type Version: str
        :param _Operation: Operation Type
        :type Operation: str
        :param _ExtraInfo: Additional Information
        :type ExtraInfo: str
        :param _BucketName: Bucket Name
        :type BucketName: str
        :param _Region: Region
        :type Region: str
        :param _FileExtensionType: File Extension Type
        :type FileExtensionType: str
        """
        self._FilePath = None
        self._ProjectId = None
        self._Version = None
        self._Operation = None
        self._ExtraInfo = None
        self._BucketName = None
        self._Region = None
        self._FileExtensionType = None

    @property
    def FilePath(self):
        """Script path
Project area 1470575647377821696 project, under the f1 directory:
/datastudio/project/1470575647377821696/f1/sql1234.sql
Personal area:
/datastudio/personal/sqlTTT.sql
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Version(self):
        """Script Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Operation(self):
        """Operation Type
        :rtype: str
        """
        return self._Operation

    @Operation.setter
    def Operation(self, Operation):
        self._Operation = Operation

    @property
    def ExtraInfo(self):
        """Additional Information
        :rtype: str
        """
        return self._ExtraInfo

    @ExtraInfo.setter
    def ExtraInfo(self, ExtraInfo):
        self._ExtraInfo = ExtraInfo

    @property
    def BucketName(self):
        """Bucket Name
        :rtype: str
        """
        return self._BucketName

    @BucketName.setter
    def BucketName(self, BucketName):
        self._BucketName = BucketName

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def FileExtensionType(self):
        """File Extension Type
        :rtype: str
        """
        return self._FileExtensionType

    @FileExtensionType.setter
    def FileExtensionType(self, FileExtensionType):
        self._FileExtensionType = FileExtensionType


    def _deserialize(self, params):
        self._FilePath = params.get("FilePath")
        self._ProjectId = params.get("ProjectId")
        self._Version = params.get("Version")
        self._Operation = params.get("Operation")
        self._ExtraInfo = params.get("ExtraInfo")
        self._BucketName = params.get("BucketName")
        self._Region = params.get("Region")
        self._FileExtensionType = params.get("FileExtensionType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchColumnDocVO(AbstractModel):
    """Table Field Information

    """

    def __init__(self):
        r"""
        :param _Name: Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :type Name: str
        :param _ChineseName: Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChineseName: str
        :param _Type: Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Length: Field Type Length
Note: This field may return null, indicating that no valid value can be obtained.
        :type Length: int
        :param _Precision: Field Type Precision
Note: This field may return null, indicating that no valid value can be obtained.
        :type Precision: int
        :param _Scale: Field Type scale
Note: This field may return null, indicating that no valid value can be obtained.
        :type Scale: int
        :param _DefaultValue: Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type DefaultValue: str
        :param _Description: Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _Position: Field Order
Note: This field may return null, indicating that no valid value can be obtained.
        :type Position: int
        :param _IsPartition: Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsPartition: bool
        :param _ColumnKey: Index Type on the column Primary Key: PRI, Unique Index: UNI, General Index: MUL
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnKey: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifiedTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifiedTime: str
        """
        self._Name = None
        self._ChineseName = None
        self._Type = None
        self._Length = None
        self._Precision = None
        self._Scale = None
        self._DefaultValue = None
        self._Description = None
        self._Position = None
        self._IsPartition = None
        self._ColumnKey = None
        self._CreateTime = None
        self._ModifiedTime = None

    @property
    def Name(self):
        """Field NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChineseName(self):
        """Field Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChineseName

    @ChineseName.setter
    def ChineseName(self, ChineseName):
        self._ChineseName = ChineseName

    @property
    def Type(self):
        """Field TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Length(self):
        """Field Type Length
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Length

    @Length.setter
    def Length(self, Length):
        self._Length = Length

    @property
    def Precision(self):
        """Field Type Precision
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Precision

    @Precision.setter
    def Precision(self, Precision):
        self._Precision = Precision

    @property
    def Scale(self):
        """Field Type scale
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Scale

    @Scale.setter
    def Scale(self, Scale):
        self._Scale = Scale

    @property
    def DefaultValue(self):
        """Field Default Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DefaultValue

    @DefaultValue.setter
    def DefaultValue(self, DefaultValue):
        self._DefaultValue = DefaultValue

    @property
    def Description(self):
        """Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Position(self):
        """Field Order
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Position

    @Position.setter
    def Position(self, Position):
        self._Position = Position

    @property
    def IsPartition(self):
        """Is Partition Field
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IsPartition

    @IsPartition.setter
    def IsPartition(self, IsPartition):
        self._IsPartition = IsPartition

    @property
    def ColumnKey(self):
        """Index Type on the column Primary Key: PRI, Unique Index: UNI, General Index: MUL
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnKey

    @ColumnKey.setter
    def ColumnKey(self, ColumnKey):
        self._ColumnKey = ColumnKey

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifiedTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifiedTime

    @ModifiedTime.setter
    def ModifiedTime(self, ModifiedTime):
        self._ModifiedTime = ModifiedTime


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ChineseName = params.get("ChineseName")
        self._Type = params.get("Type")
        self._Length = params.get("Length")
        self._Precision = params.get("Precision")
        self._Scale = params.get("Scale")
        self._DefaultValue = params.get("DefaultValue")
        self._Description = params.get("Description")
        self._Position = params.get("Position")
        self._IsPartition = params.get("IsPartition")
        self._ColumnKey = params.get("ColumnKey")
        self._CreateTime = params.get("CreateTime")
        self._ModifiedTime = params.get("ModifiedTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchCondition(AbstractModel):
    """Query Instance Criteria

    """

    def __init__(self):
        r"""
        :param _Instance: Query Framework, Required
        :type Instance: :class:`tencentcloud.wedata.v20210820.models.SearchConditionInstanceNew`
        :param _Keyword: Query Keyword (Task ID exact match, Task Name fuzzy match), Optional
        :type Keyword: str
        :param _Sort: Sorting Order (asc, desc)
        :type Sort: str
        :param _SortCol: Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :type SortCol: str
        """
        self._Instance = None
        self._Keyword = None
        self._Sort = None
        self._SortCol = None

    @property
    def Instance(self):
        """Query Framework, Required
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SearchConditionInstanceNew`
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Keyword(self):
        """Query Keyword (Task ID exact match, Task Name fuzzy match), Optional
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def Sort(self):
        """Sorting Order (asc, desc)
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def SortCol(self):
        """Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :rtype: str
        """
        return self._SortCol

    @SortCol.setter
    def SortCol(self, SortCol):
        self._SortCol = SortCol


    def _deserialize(self, params):
        if params.get("Instance") is not None:
            self._Instance = SearchConditionInstanceNew()
            self._Instance._deserialize(params.get("Instance"))
        self._Keyword = params.get("Keyword")
        self._Sort = params.get("Sort")
        self._SortCol = params.get("SortCol")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchConditionInstanceNew(AbstractModel):
    """Search condition

    """

    def __init__(self):
        r"""
        :param _ExecutionSpace: Execution space, optional 
 "DRY_RUN"
        :type ExecutionSpace: str
        :param _ProductName: Business Products, options: <DATA_DEV / DATA_QUALITY / DATA_INTEGRATION, default DATA_DEV. Non-empty. Default own project
        :type ProductName: str
        :param _ResourceGroup: Resource Group Information, optional
        :type ResourceGroup: str
        """
        self._ExecutionSpace = None
        self._ProductName = None
        self._ResourceGroup = None

    @property
    def ExecutionSpace(self):
        """Execution space, optional 
 "DRY_RUN"
        :rtype: str
        """
        return self._ExecutionSpace

    @ExecutionSpace.setter
    def ExecutionSpace(self, ExecutionSpace):
        self._ExecutionSpace = ExecutionSpace

    @property
    def ProductName(self):
        """Business Products, options: <DATA_DEV / DATA_QUALITY / DATA_INTEGRATION, default DATA_DEV. Non-empty. Default own project
        :rtype: str
        """
        return self._ProductName

    @ProductName.setter
    def ProductName(self, ProductName):
        self._ProductName = ProductName

    @property
    def ResourceGroup(self):
        """Resource Group Information, optional
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup


    def _deserialize(self, params):
        self._ExecutionSpace = params.get("ExecutionSpace")
        self._ProductName = params.get("ProductName")
        self._ResourceGroup = params.get("ResourceGroup")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchConditionNew(AbstractModel):
    """Query Instance Criteria (new)

    """

    def __init__(self):
        r"""
        :param _Instance: Query Framework, required
        :type Instance: :class:`tencentcloud.wedata.v20210820.models.SearchConditionInstanceNew`
        :param _Keyword: Query keyword (Task ID exact match, Task Name fuzzy match), optional
        :type Keyword: str
        :param _Sort: Sorting Order (asc, desc)
        :type Sort: str
        :param _SortCol: Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :type SortCol: str
        """
        self._Instance = None
        self._Keyword = None
        self._Sort = None
        self._SortCol = None

    @property
    def Instance(self):
        """Query Framework, required
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SearchConditionInstanceNew`
        """
        return self._Instance

    @Instance.setter
    def Instance(self, Instance):
        self._Instance = Instance

    @property
    def Keyword(self):
        """Query keyword (Task ID exact match, Task Name fuzzy match), optional
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def Sort(self):
        """Sorting Order (asc, desc)
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def SortCol(self):
        """Sort Column (costTime Runtime duration, startTime Start Time, state Instance status, curRunDate Data Timestamp)
        :rtype: str
        """
        return self._SortCol

    @SortCol.setter
    def SortCol(self, SortCol):
        self._SortCol = SortCol


    def _deserialize(self, params):
        if params.get("Instance") is not None:
            self._Instance = SearchConditionInstanceNew()
            self._Instance._deserialize(params.get("Instance"))
        self._Keyword = params.get("Keyword")
        self._Sort = params.get("Sort")
        self._SortCol = params.get("SortCol")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetTaskAlarmNewRequest(AbstractModel):
    """SetTaskAlarmNew request structure.

    """

    def __init__(self):
        r"""
        :param _AlarmInfoList: Setting Task Timeout Alert and Failure Alert Information
        :type AlarmInfoList: list of AlarmInfo
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._AlarmInfoList = None
        self._ProjectId = None

    @property
    def AlarmInfoList(self):
        """Setting Task Timeout Alert and Failure Alert Information
        :rtype: list of AlarmInfo
        """
        return self._AlarmInfoList

    @AlarmInfoList.setter
    def AlarmInfoList(self, AlarmInfoList):
        self._AlarmInfoList = AlarmInfoList

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("AlarmInfoList") is not None:
            self._AlarmInfoList = []
            for item in params.get("AlarmInfoList"):
                obj = AlarmInfo()
                obj._deserialize(item)
                self._AlarmInfoList.append(obj)
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetTaskAlarmNewResponse(AbstractModel):
    """SetTaskAlarmNew response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Returns the number of successful batch operations, the number of failures, and the total number of operations
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResult`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Returns the number of successful batch operations, the number of failures, and the total number of operations
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperateResult`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperateResult()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class SimpleColumnInfo(AbstractModel):
    """Lineage Column Description

    """

    def __init__(self):
        r"""
        :param _Id: Column ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _QualifiedName: Qualified Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualifiedName: str
        :param _ColumnName: Column nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ColumnName: str
        :param _ColumnNameCn: Column Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnNameCn: str
        :param _ColumnType: Column Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnType: str
        :param _Description: Column Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _PrefixPath: Prefix Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type PrefixPath: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _DatasourceId: Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DownStreamCount: Downstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type DownStreamCount: int
        :param _UpStreamCount: Upstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpStreamCount: int
        :param _RelationParams: Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type RelationParams: str
        :param _Params: ParameterNote: This field may return null, indicating that no valid value can be obtained.
        :type Params: str
        :param _Tasks: Task Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of str
        """
        self._Id = None
        self._QualifiedName = None
        self._ColumnName = None
        self._ColumnNameCn = None
        self._ColumnType = None
        self._Description = None
        self._PrefixPath = None
        self._CreateTime = None
        self._ModifyTime = None
        self._DatasourceId = None
        self._DownStreamCount = None
        self._UpStreamCount = None
        self._RelationParams = None
        self._Params = None
        self._Tasks = None

    @property
    def Id(self):
        """Column ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def QualifiedName(self):
        """Qualified Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._QualifiedName

    @QualifiedName.setter
    def QualifiedName(self, QualifiedName):
        self._QualifiedName = QualifiedName

    @property
    def ColumnName(self):
        """Column nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnName

    @ColumnName.setter
    def ColumnName(self, ColumnName):
        self._ColumnName = ColumnName

    @property
    def ColumnNameCn(self):
        """Column Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnNameCn

    @ColumnNameCn.setter
    def ColumnNameCn(self, ColumnNameCn):
        self._ColumnNameCn = ColumnNameCn

    @property
    def ColumnType(self):
        """Column Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnType

    @ColumnType.setter
    def ColumnType(self, ColumnType):
        self._ColumnType = ColumnType

    @property
    def Description(self):
        """Column Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PrefixPath(self):
        """Prefix Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PrefixPath

    @PrefixPath.setter
    def PrefixPath(self, PrefixPath):
        self._PrefixPath = PrefixPath

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def DatasourceId(self):
        """Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DownStreamCount(self):
        """Downstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DownStreamCount

    @DownStreamCount.setter
    def DownStreamCount(self, DownStreamCount):
        self._DownStreamCount = DownStreamCount

    @property
    def UpStreamCount(self):
        """Upstream Quantity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpStreamCount

    @UpStreamCount.setter
    def UpStreamCount(self, UpStreamCount):
        self._UpStreamCount = UpStreamCount

    @property
    def RelationParams(self):
        """Relationship Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RelationParams

    @RelationParams.setter
    def RelationParams(self, RelationParams):
        self._RelationParams = RelationParams

    @property
    def Params(self):
        """ParameterNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def Tasks(self):
        """Task Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._QualifiedName = params.get("QualifiedName")
        self._ColumnName = params.get("ColumnName")
        self._ColumnNameCn = params.get("ColumnNameCn")
        self._ColumnType = params.get("ColumnType")
        self._Description = params.get("Description")
        self._PrefixPath = params.get("PrefixPath")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._DatasourceId = params.get("DatasourceId")
        self._DownStreamCount = params.get("DownStreamCount")
        self._UpStreamCount = params.get("UpStreamCount")
        self._RelationParams = params.get("RelationParams")
        self._Params = params.get("Params")
        self._Tasks = params.get("Tasks")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SimpleTaskInfo(AbstractModel):
    """Simple Task Information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _TaskName: Task Name
        :type TaskName: str
        """
        self._TaskId = None
        self._TaskName = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SourceFieldInfo(AbstractModel):
    """Upstream Node Field Information

    """

    def __init__(self):
        r"""
        :param _FieldName: Field Name
        :type FieldName: str
        :param _FieldType: Field Type
        :type FieldType: str
        :param _Alias: Field Alias
        :type Alias: str
        :param _Comment: Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type Comment: str
        """
        self._FieldName = None
        self._FieldType = None
        self._Alias = None
        self._Comment = None

    @property
    def FieldName(self):
        """Field Name
        :rtype: str
        """
        return self._FieldName

    @FieldName.setter
    def FieldName(self, FieldName):
        self._FieldName = FieldName

    @property
    def FieldType(self):
        """Field Type
        :rtype: str
        """
        return self._FieldType

    @FieldType.setter
    def FieldType(self, FieldType):
        self._FieldType = FieldType

    @property
    def Alias(self):
        """Field Alias
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def Comment(self):
        """Field DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment


    def _deserialize(self, params):
        self._FieldName = params.get("FieldName")
        self._FieldType = params.get("FieldType")
        self._Alias = params.get("Alias")
        self._Comment = params.get("Comment")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SpeedValue(AbstractModel):
    """Speed Value Object

    """

    def __init__(self):
        r"""
        :param _Time: Timestamp with MillisecondsNote: This field may return null, indicating that no valid value can be obtained.
        :type Time: int
        :param _Speed: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Speed: float
        """
        self._Time = None
        self._Speed = None

    @property
    def Time(self):
        """Timestamp with MillisecondsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Time

    @Time.setter
    def Time(self, Time):
        self._Time = Time

    @property
    def Speed(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Speed

    @Speed.setter
    def Speed(self, Speed):
        self._Speed = Speed


    def _deserialize(self, params):
        self._Time = params.get("Time")
        self._Speed = params.get("Speed")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SqlExpression(AbstractModel):
    """Data Quality Custom Rule's SQL Expression Resolved Object

    """

    def __init__(self):
        r"""
        :param _TableExpressions: SQL Expression Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableExpressions: list of SqlExpressionTable
        :param _ParamExpressions: SQL Expression Column Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParamExpressions: list of str
        """
        self._TableExpressions = None
        self._ParamExpressions = None

    @property
    def TableExpressions(self):
        """SQL Expression Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SqlExpressionTable
        """
        return self._TableExpressions

    @TableExpressions.setter
    def TableExpressions(self, TableExpressions):
        self._TableExpressions = TableExpressions

    @property
    def ParamExpressions(self):
        """SQL Expression Column Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._ParamExpressions

    @ParamExpressions.setter
    def ParamExpressions(self, ParamExpressions):
        self._ParamExpressions = ParamExpressions


    def _deserialize(self, params):
        if params.get("TableExpressions") is not None:
            self._TableExpressions = []
            for item in params.get("TableExpressions"):
                obj = SqlExpressionTable()
                obj._deserialize(item)
                self._TableExpressions.append(obj)
        self._ParamExpressions = params.get("ParamExpressions")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SqlExpressionTable(AbstractModel):
    """Parsing table object for SQL expression when defining Data Quality Custom Rules

    """

    def __init__(self):
        r"""
        :param _TableExpression: SQL expression table name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableExpression: str
        :param _ColumnExpression: SQL expression column name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnExpression: list of str
        """
        self._TableExpression = None
        self._ColumnExpression = None

    @property
    def TableExpression(self):
        """SQL expression table name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableExpression

    @TableExpression.setter
    def TableExpression(self, TableExpression):
        self._TableExpression = TableExpression

    @property
    def ColumnExpression(self):
        """SQL expression column name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._ColumnExpression

    @ColumnExpression.setter
    def ColumnExpression(self, ColumnExpression):
        self._ColumnExpression = ColumnExpression


    def _deserialize(self, params):
        self._TableExpression = params.get("TableExpression")
        self._ColumnExpression = params.get("ColumnExpression")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StageCloudApiRequest(AbstractModel):
    """No

    """

    def __init__(self):
        r"""
        :param _ClusterId: No
        :type ClusterId: str
        :param _StageId: No
        :type StageId: str
        :param _JobId: No
        :type JobId: str
        :param _StageName: No
        :type StageName: str
        :param _Type: No
        :type Type: str
        :param _Mode: No
        :type Mode: str
        :param _Version: No
        :type Version: str
        :param _Queue: No
        :type Queue: str
        :param _Content: No
        :type Content: str
        :param _Parameters: No
        :type Parameters: list of Property
        :param _Description: No
        :type Description: str
        :param _ProjectId: No
        :type ProjectId: str
        :param _JobType: No
        :type JobType: str
        :param _WorkFlowId: No
        :type WorkFlowId: str
        """
        self._ClusterId = None
        self._StageId = None
        self._JobId = None
        self._StageName = None
        self._Type = None
        self._Mode = None
        self._Version = None
        self._Queue = None
        self._Content = None
        self._Parameters = None
        self._Description = None
        self._ProjectId = None
        self._JobType = None
        self._WorkFlowId = None

    @property
    def ClusterId(self):
        """No
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def StageId(self):
        """No
        :rtype: str
        """
        return self._StageId

    @StageId.setter
    def StageId(self, StageId):
        self._StageId = StageId

    @property
    def JobId(self):
        """No
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def StageName(self):
        """No
        :rtype: str
        """
        return self._StageName

    @StageName.setter
    def StageName(self, StageName):
        self._StageName = StageName

    @property
    def Type(self):
        """No
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Mode(self):
        """No
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def Version(self):
        """No
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Queue(self):
        """No
        :rtype: str
        """
        return self._Queue

    @Queue.setter
    def Queue(self, Queue):
        self._Queue = Queue

    @property
    def Content(self):
        """No
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Parameters(self):
        """No
        :rtype: list of Property
        """
        return self._Parameters

    @Parameters.setter
    def Parameters(self, Parameters):
        self._Parameters = Parameters

    @property
    def Description(self):
        """No
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ProjectId(self):
        """No
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def JobType(self):
        """No
        :rtype: str
        """
        return self._JobType

    @JobType.setter
    def JobType(self, JobType):
        self._JobType = JobType

    @property
    def WorkFlowId(self):
        """No
        :rtype: str
        """
        return self._WorkFlowId

    @WorkFlowId.setter
    def WorkFlowId(self, WorkFlowId):
        self._WorkFlowId = WorkFlowId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._StageId = params.get("StageId")
        self._JobId = params.get("JobId")
        self._StageName = params.get("StageName")
        self._Type = params.get("Type")
        self._Mode = params.get("Mode")
        self._Version = params.get("Version")
        self._Queue = params.get("Queue")
        self._Content = params.get("Content")
        if params.get("Parameters") is not None:
            self._Parameters = []
            for item in params.get("Parameters"):
                obj = Property()
                obj._deserialize(item)
                self._Parameters.append(obj)
        self._Description = params.get("Description")
        self._ProjectId = params.get("ProjectId")
        self._JobType = params.get("JobType")
        self._WorkFlowId = params.get("WorkFlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartIntegrationTaskRequest(AbstractModel):
    """StartIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Event: Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
        :type Event: str
        :param _ExtConfig: Additional parameters
        :type ExtConfig: list of RecordField
        :param _EventDesc: Operation Type Description
        :type EventDesc: str
        """
        self._TaskId = None
        self._ProjectId = None
        self._Event = None
        self._ExtConfig = None
        self._EventDesc = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Event(self):
        """Event type (START, STOP, SUSPEND, RESUME, COMMIT, TIMESTAMP)
        :rtype: str
        """
        return self._Event

    @Event.setter
    def Event(self, Event):
        self._Event = Event

    @property
    def ExtConfig(self):
        """Additional parameters
        :rtype: list of RecordField
        """
        return self._ExtConfig

    @ExtConfig.setter
    def ExtConfig(self, ExtConfig):
        self._ExtConfig = ExtConfig

    @property
    def EventDesc(self):
        """Operation Type Description
        :rtype: str
        """
        return self._EventDesc

    @EventDesc.setter
    def EventDesc(self, EventDesc):
        self._EventDesc = EventDesc


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._Event = params.get("Event")
        if params.get("ExtConfig") is not None:
            self._ExtConfig = []
            for item in params.get("ExtConfig"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtConfig.append(obj)
        self._EventDesc = params.get("EventDesc")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartIntegrationTaskResponse(AbstractModel):
    """StartIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class StartTaskInfo(AbstractModel):
    """Batch Run Integration Task Configuration

    """

    def __init__(self):
        r"""
        :param _Event: Batch task type, for example, START, TIMESTAMP, RESTORE, RESUME, etc.\nNote: This field may return null, indicating that no valid value can be obtained.
        :type Event: str
        :param _TaskIds: Task Id list\nNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskIds: list of str
        :param _Config: Batch task configuration, currently only used for real-time integration based on time point startup. For time point startup, a RecordField configuration with name=timestamp, value=specific timestamp needs to be set\nNote: This field may return null, indicating that no valid value can be obtained.
        :type Config: list of RecordField
        :param _Description: Operation TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        """
        self._Event = None
        self._TaskIds = None
        self._Config = None
        self._Description = None

    @property
    def Event(self):
        """Batch task type, for example, START, TIMESTAMP, RESTORE, RESUME, etc.\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Event

    @Event.setter
    def Event(self, Event):
        self._Event = Event

    @property
    def TaskIds(self):
        """Task Id list\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def Config(self):
        """Batch task configuration, currently only used for real-time integration based on time point startup. For time point startup, a RecordField configuration with name=timestamp, value=specific timestamp needs to be set\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def Description(self):
        """Operation TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Event = params.get("Event")
        self._TaskIds = params.get("TaskIds")
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = RecordField()
                obj._deserialize(item)
                self._Config.append(obj)
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopIntegrationTaskRequest(AbstractModel):
    """StopIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopIntegrationTaskResponse(AbstractModel):
    """StopIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class StrToStrMap(AbstractModel):
    """map

    """

    def __init__(self):
        r"""
        :param _K: k
Note: This field may return null, indicating that no valid value can be obtained.
        :type K: str
        :param _V: v
Note: This field may return null, indicating that no valid value can be obtained.
        :type V: str
        """
        self._K = None
        self._V = None

    @property
    def K(self):
        """k
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._K

    @K.setter
    def K(self, K):
        self._K = K

    @property
    def V(self):
        """v
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._V

    @V.setter
    def V(self, V):
        self._V = V


    def _deserialize(self, params):
        self._K = params.get("K")
        self._V = params.get("V")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitCustomFunctionRequest(AbstractModel):
    """SubmitCustomFunction request structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function Unique Identifier
        :type FunctionId: str
        :param _ClusterIdentifier: Cluster Instance ID
        :type ClusterIdentifier: str
        :param _Comment: Remark Information
        :type Comment: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._FunctionId = None
        self._ClusterIdentifier = None
        self._Comment = None
        self._ProjectId = None

    @property
    def FunctionId(self):
        """Function Unique Identifier
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ClusterIdentifier(self):
        """Cluster Instance ID
        :rtype: str
        """
        return self._ClusterIdentifier

    @ClusterIdentifier.setter
    def ClusterIdentifier(self, ClusterIdentifier):
        self._ClusterIdentifier = ClusterIdentifier

    @property
    def Comment(self):
        """Remark Information
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._ClusterIdentifier = params.get("ClusterIdentifier")
        self._Comment = params.get("Comment")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitCustomFunctionResponse(AbstractModel):
    """SubmitCustomFunction response structure.

    """

    def __init__(self):
        r"""
        :param _FunctionId: Function Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :type FunctionId: str
        :param _ErrorMessage: Error Prompt
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorMessage: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FunctionId = None
        self._ErrorMessage = None
        self._RequestId = None

    @property
    def FunctionId(self):
        """Function Unique Identifier
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FunctionId

    @FunctionId.setter
    def FunctionId(self, FunctionId):
        self._FunctionId = FunctionId

    @property
    def ErrorMessage(self):
        """Error Prompt
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FunctionId = params.get("FunctionId")
        self._ErrorMessage = params.get("ErrorMessage")
        self._RequestId = params.get("RequestId")


class SubmitSqlTaskRequest(AbstractModel):
    """SubmitSqlTask request structure.

    """

    def __init__(self):
        r"""
        :param _DatabaseType: Database Type
        :type DatabaseType: str
        :param _DatasourceId: Data Source ID
        :type DatasourceId: int
        :param _GroupId: Resource Group ID
        :type GroupId: str
        :param _ScriptId: Script File ID
        :type ScriptId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _DatabaseName: Database name
        :type DatabaseName: str
        :param _EngineId: Execution Engine Instance ID
        :type EngineId: str
        :param _ScriptContent: Script Content
        :type ScriptContent: str
        :param _ResourceQueue: Resource Queue
        :type ResourceQueue: str
        :param _DatasourceType: Database Type
        :type DatasourceType: str
        :param _ComputeResource: Compute Resource Name
        :type ComputeResource: str
        :param _RunParams: Advanced Running Parameters
        :type RunParams: str
        :param _ConfParams: Advanced Settings
        :type ConfParams: str
        :param _ScriptEncryption: Whether the script content is Base64 encrypted
        :type ScriptEncryption: bool
        """
        self._DatabaseType = None
        self._DatasourceId = None
        self._GroupId = None
        self._ScriptId = None
        self._ProjectId = None
        self._DatabaseName = None
        self._EngineId = None
        self._ScriptContent = None
        self._ResourceQueue = None
        self._DatasourceType = None
        self._ComputeResource = None
        self._RunParams = None
        self._ConfParams = None
        self._ScriptEncryption = None

    @property
    def DatabaseType(self):
        """Database Type
        :rtype: str
        """
        return self._DatabaseType

    @DatabaseType.setter
    def DatabaseType(self, DatabaseType):
        self._DatabaseType = DatabaseType

    @property
    def DatasourceId(self):
        """Data Source ID
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def GroupId(self):
        """Resource Group ID
        :rtype: str
        """
        return self._GroupId

    @GroupId.setter
    def GroupId(self, GroupId):
        self._GroupId = GroupId

    @property
    def ScriptId(self):
        """Script File ID
        :rtype: str
        """
        return self._ScriptId

    @ScriptId.setter
    def ScriptId(self, ScriptId):
        self._ScriptId = ScriptId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatabaseName(self):
        """Database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def EngineId(self):
        """Execution Engine Instance ID
        :rtype: str
        """
        return self._EngineId

    @EngineId.setter
    def EngineId(self, EngineId):
        self._EngineId = EngineId

    @property
    def ScriptContent(self):
        """Script Content
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def ResourceQueue(self):
        """Resource Queue
        :rtype: str
        """
        return self._ResourceQueue

    @ResourceQueue.setter
    def ResourceQueue(self, ResourceQueue):
        self._ResourceQueue = ResourceQueue

    @property
    def DatasourceType(self):
        """Database Type
        :rtype: str
        """
        return self._DatasourceType

    @DatasourceType.setter
    def DatasourceType(self, DatasourceType):
        self._DatasourceType = DatasourceType

    @property
    def ComputeResource(self):
        """Compute Resource Name
        :rtype: str
        """
        return self._ComputeResource

    @ComputeResource.setter
    def ComputeResource(self, ComputeResource):
        self._ComputeResource = ComputeResource

    @property
    def RunParams(self):
        """Advanced Running Parameters
        :rtype: str
        """
        return self._RunParams

    @RunParams.setter
    def RunParams(self, RunParams):
        self._RunParams = RunParams

    @property
    def ConfParams(self):
        """Advanced Settings
        :rtype: str
        """
        return self._ConfParams

    @ConfParams.setter
    def ConfParams(self, ConfParams):
        self._ConfParams = ConfParams

    @property
    def ScriptEncryption(self):
        """Whether the script content is Base64 encrypted
        :rtype: bool
        """
        return self._ScriptEncryption

    @ScriptEncryption.setter
    def ScriptEncryption(self, ScriptEncryption):
        self._ScriptEncryption = ScriptEncryption


    def _deserialize(self, params):
        self._DatabaseType = params.get("DatabaseType")
        self._DatasourceId = params.get("DatasourceId")
        self._GroupId = params.get("GroupId")
        self._ScriptId = params.get("ScriptId")
        self._ProjectId = params.get("ProjectId")
        self._DatabaseName = params.get("DatabaseName")
        self._EngineId = params.get("EngineId")
        self._ScriptContent = params.get("ScriptContent")
        self._ResourceQueue = params.get("ResourceQueue")
        self._DatasourceType = params.get("DatasourceType")
        self._ComputeResource = params.get("ComputeResource")
        self._RunParams = params.get("RunParams")
        self._ConfParams = params.get("ConfParams")
        self._ScriptEncryption = params.get("ScriptEncryption")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitSqlTaskResponse(AbstractModel):
    """SubmitSqlTask response structure.

    """

    def __init__(self):
        r"""
        :param _Record: Task Submission Record
        :type Record: :class:`tencentcloud.wedata.v20210820.models.AdhocRecord`
        :param _Details: Subtask Record List
        :type Details: list of AdhocDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Record = None
        self._Details = None
        self._RequestId = None

    @property
    def Record(self):
        """Task Submission Record
        :rtype: :class:`tencentcloud.wedata.v20210820.models.AdhocRecord`
        """
        return self._Record

    @Record.setter
    def Record(self, Record):
        self._Record = Record

    @property
    def Details(self):
        """Subtask Record List
        :rtype: list of AdhocDetail
        """
        return self._Details

    @Details.setter
    def Details(self, Details):
        self._Details = Details

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Record") is not None:
            self._Record = AdhocRecord()
            self._Record._deserialize(params.get("Record"))
        if params.get("Details") is not None:
            self._Details = []
            for item in params.get("Details"):
                obj = AdhocDetail()
                obj._deserialize(item)
                self._Details.append(obj)
        self._RequestId = params.get("RequestId")


class SubmitTaskRequest(AbstractModel):
    """SubmitTask request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _TaskId: Task ID
        :type TaskId: str
        :param _VersionRemark: Version Notes
        :type VersionRemark: str
        :param _StartScheduling: Whether to Enable Scheduling
        :type StartScheduling: bool
        """
        self._ProjectId = None
        self._TaskId = None
        self._VersionRemark = None
        self._StartScheduling = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VersionRemark(self):
        """Version Notes
        :rtype: str
        """
        return self._VersionRemark

    @VersionRemark.setter
    def VersionRemark(self, VersionRemark):
        self._VersionRemark = VersionRemark

    @property
    def StartScheduling(self):
        """Whether to Enable Scheduling
        :rtype: bool
        """
        return self._StartScheduling

    @StartScheduling.setter
    def StartScheduling(self, StartScheduling):
        self._StartScheduling = StartScheduling


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._VersionRemark = params.get("VersionRemark")
        self._StartScheduling = params.get("StartScheduling")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitTaskResponse(AbstractModel):
    """SubmitTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success or Failure
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success or Failure
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class SubmitTaskTestRunRequest(AbstractModel):
    """SubmitTaskTestRun request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: taskId list
        :type TaskIds: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkFlowId: Workflow ID
        :type WorkFlowId: str
        :param _Name: Workflow name
        :type Name: str
        :param _Tasks: Workflow Task List
        :type Tasks: list of StageCloudApiRequest
        :param _Description: Remarks
        :type Description: str
        :param _RunParams: Runtime Parameters, JSON format of map
        :type RunParams: str
        :param _ScriptContent: Script Content
        :type ScriptContent: str
        :param _VersionId: Version number
        :type VersionId: str
        """
        self._TaskIds = None
        self._ProjectId = None
        self._WorkFlowId = None
        self._Name = None
        self._Tasks = None
        self._Description = None
        self._RunParams = None
        self._ScriptContent = None
        self._VersionId = None

    @property
    def TaskIds(self):
        """taskId list
        :rtype: str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkFlowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkFlowId

    @WorkFlowId.setter
    def WorkFlowId(self, WorkFlowId):
        self._WorkFlowId = WorkFlowId

    @property
    def Name(self):
        """Workflow name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Tasks(self):
        """Workflow Task List
        :rtype: list of StageCloudApiRequest
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def Description(self):
        """Remarks
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def RunParams(self):
        """Runtime Parameters, JSON format of map
        :rtype: str
        """
        return self._RunParams

    @RunParams.setter
    def RunParams(self, RunParams):
        self._RunParams = RunParams

    @property
    def ScriptContent(self):
        """Script Content
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent

    @property
    def VersionId(self):
        """Version number
        :rtype: str
        """
        return self._VersionId

    @VersionId.setter
    def VersionId(self, VersionId):
        self._VersionId = VersionId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._ProjectId = params.get("ProjectId")
        self._WorkFlowId = params.get("WorkFlowId")
        self._Name = params.get("Name")
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = StageCloudApiRequest()
                obj._deserialize(item)
                self._Tasks.append(obj)
        self._Description = params.get("Description")
        self._RunParams = params.get("RunParams")
        self._ScriptContent = params.get("ScriptContent")
        self._VersionId = params.get("VersionId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitTaskTestRunResponse(AbstractModel):
    """SubmitTaskTestRun response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Submit Run jobid
        :type JobId: int
        :param _RecordId: Operation Record ID
        :type RecordId: list of int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RecordId = None
        self._RequestId = None

    @property
    def JobId(self):
        """Submit Run jobid
        :rtype: int
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RecordId(self):
        """Operation Record ID
        :rtype: list of int
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RecordId = params.get("RecordId")
        self._RequestId = params.get("RequestId")


class SubmitWorkflow(AbstractModel):
    """Submit Workflow Entity

    """

    def __init__(self):
        r"""
        :param _TaskIds: Submitted Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskIds: list of str
        :param _Result: Execution Result
        :type Result: bool
        :param _ErrorDesc: Execution Status Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorDesc: str
        :param _ErrorId: Execution Status ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ErrorId: str
        """
        self._TaskIds = None
        self._Result = None
        self._ErrorDesc = None
        self._ErrorId = None

    @property
    def TaskIds(self):
        """Submitted Task ID Collection
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def Result(self):
        """Execution Result
        :rtype: bool
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def ErrorDesc(self):
        """Execution Status Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorDesc

    @ErrorDesc.setter
    def ErrorDesc(self, ErrorDesc):
        self._ErrorDesc = ErrorDesc

    @property
    def ErrorId(self):
        """Execution Status ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ErrorId

    @ErrorId.setter
    def ErrorId(self, ErrorId):
        self._ErrorId = ErrorId


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        self._Result = params.get("Result")
        self._ErrorDesc = params.get("ErrorDesc")
        self._ErrorId = params.get("ErrorId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitWorkflowRequest(AbstractModel):
    """SubmitWorkflow request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _VersionRemark: Submitted Version Notes
        :type VersionRemark: str
        :param _StartScheduling: Whether to Enable Scheduling
        :type StartScheduling: bool
        """
        self._ProjectId = None
        self._WorkflowId = None
        self._VersionRemark = None
        self._StartScheduling = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def VersionRemark(self):
        """Submitted Version Notes
        :rtype: str
        """
        return self._VersionRemark

    @VersionRemark.setter
    def VersionRemark(self, VersionRemark):
        self._VersionRemark = VersionRemark

    @property
    def StartScheduling(self):
        """Whether to Enable Scheduling
        :rtype: bool
        """
        return self._StartScheduling

    @StartScheduling.setter
    def StartScheduling(self, StartScheduling):
        self._StartScheduling = StartScheduling


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowId = params.get("WorkflowId")
        self._VersionRemark = params.get("VersionRemark")
        self._StartScheduling = params.get("StartScheduling")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitWorkflowResponse(AbstractModel):
    """SubmitWorkflow response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Execution Result
        :type Data: :class:`tencentcloud.wedata.v20210820.models.SubmitWorkflow`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Execution Result
        :rtype: :class:`tencentcloud.wedata.v20210820.models.SubmitWorkflow`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = SubmitWorkflow()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class SubscribeReceiver(AbstractModel):
    """Subscription Recipient

    """

    def __init__(self):
        r"""
        :param _ReceiverUserId: Recipient Uin
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReceiverUserId: int
        :param _ReceiverName: Recipient Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReceiverName: str
        :param _ReceiverUserIdStr: Recipient UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReceiverUserIdStr: str
        """
        self._ReceiverUserId = None
        self._ReceiverName = None
        self._ReceiverUserIdStr = None

    @property
    def ReceiverUserId(self):
        """Recipient Uin
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ReceiverUserId

    @ReceiverUserId.setter
    def ReceiverUserId(self, ReceiverUserId):
        self._ReceiverUserId = ReceiverUserId

    @property
    def ReceiverName(self):
        """Recipient Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ReceiverName

    @ReceiverName.setter
    def ReceiverName(self, ReceiverName):
        self._ReceiverName = ReceiverName

    @property
    def ReceiverUserIdStr(self):
        """Recipient UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ReceiverUserIdStr

    @ReceiverUserIdStr.setter
    def ReceiverUserIdStr(self, ReceiverUserIdStr):
        self._ReceiverUserIdStr = ReceiverUserIdStr


    def _deserialize(self, params):
        self._ReceiverUserId = params.get("ReceiverUserId")
        self._ReceiverName = params.get("ReceiverName")
        self._ReceiverUserIdStr = params.get("ReceiverUserIdStr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubscribeWebHook(AbstractModel):
    """Group Robot Subscription Configuration

    """

    def __init__(self):
        r"""
        :param _HookType: Group Robot Type, currently supports Feishu
Note: This field may return null, indicating that no valid value can be obtained.
        :type HookType: str
        :param _HookAddress: Group Robot Webhook Address, configuration method refer to https://intl.cloud.tencent.com/document/product/1254/70736?from_cn_redirect=1
Note: This field may return null, indicating that no valid value can be obtained.
        :type HookAddress: str
        """
        self._HookType = None
        self._HookAddress = None

    @property
    def HookType(self):
        """Group Robot Type, currently supports Feishu
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._HookType

    @HookType.setter
    def HookType(self, HookType):
        self._HookType = HookType

    @property
    def HookAddress(self):
        """Group Robot Webhook Address, configuration method refer to https://intl.cloud.tencent.com/document/product/1254/70736?from_cn_redirect=1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._HookAddress

    @HookAddress.setter
    def HookAddress(self, HookAddress):
        self._HookAddress = HookAddress


    def _deserialize(self, params):
        self._HookType = params.get("HookType")
        self._HookAddress = params.get("HookAddress")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SuspendIntegrationTaskRequest(AbstractModel):
    """SuspendIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Event: Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
        :type Event: str
        """
        self._TaskId = None
        self._ProjectId = None
        self._Event = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Event(self):
        """Event Type (START, STOP, SUSPEND, SUSPEND_WITHOUT_SP, RESUME, COMMIT, TIMESTAMP)	
        :rtype: str
        """
        return self._Event

    @Event.setter
    def Event(self, Event):
        self._Event = Event


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        self._Event = params.get("Event")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SuspendIntegrationTaskResponse(AbstractModel):
    """SuspendIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class Table(AbstractModel):
    """Table

    """

    def __init__(self):
        r"""
        :param _Column: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type Column: list of ColumnItem
        :param _Data: 1
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: list of ColumnData
        """
        self._Column = None
        self._Data = None

    @property
    def Column(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ColumnItem
        """
        return self._Column

    @Column.setter
    def Column(self, Column):
        self._Column = Column

    @property
    def Data(self):
        """1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ColumnData
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        if params.get("Column") is not None:
            self._Column = []
            for item in params.get("Column"):
                obj = ColumnItem()
                obj._deserialize(item)
                self._Column.append(obj)
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = ColumnData()
                obj._deserialize(item)
                self._Data.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableBaseInfo(AbstractModel):
    """Information Required for Creating DLC Table

    """

    def __init__(self):
        r"""
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TableName: Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _DatasourceConnectionName: Data Table's Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceConnectionName: str
        :param _TableComment: Table Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableComment: str
        :param _Type: TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _TableFormat: Data Format Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableFormat: str
        :param _UserAlias: User Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserAlias: str
        :param _UserSubUin: Table Creation User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserSubUin: str
        :param _GovernPolicy: Data Governance Configuration ItemsNote: This field may return null, indicating that no valid value can be obtained.
        :type GovernPolicy: :class:`tencentcloud.wedata.v20210820.models.DlcDataGovernPolicy`
        :param _DbGovernPolicyIsDisable: Is Database Data Governance disabled, true for disabled, false for enabled
Note: This field may return null, indicating that no valid value can be obtained.
        :type DbGovernPolicyIsDisable: str
        """
        self._DatabaseName = None
        self._TableName = None
        self._DatasourceConnectionName = None
        self._TableComment = None
        self._Type = None
        self._TableFormat = None
        self._UserAlias = None
        self._UserSubUin = None
        self._GovernPolicy = None
        self._DbGovernPolicyIsDisable = None

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TableName(self):
        """Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def DatasourceConnectionName(self):
        """Data Table's Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceConnectionName

    @DatasourceConnectionName.setter
    def DatasourceConnectionName(self, DatasourceConnectionName):
        self._DatasourceConnectionName = DatasourceConnectionName

    @property
    def TableComment(self):
        """Table Remarks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableComment

    @TableComment.setter
    def TableComment(self, TableComment):
        self._TableComment = TableComment

    @property
    def Type(self):
        """TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def TableFormat(self):
        """Data Format Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableFormat

    @TableFormat.setter
    def TableFormat(self, TableFormat):
        self._TableFormat = TableFormat

    @property
    def UserAlias(self):
        """User Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserAlias

    @UserAlias.setter
    def UserAlias(self, UserAlias):
        self._UserAlias = UserAlias

    @property
    def UserSubUin(self):
        """Table Creation User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserSubUin

    @UserSubUin.setter
    def UserSubUin(self, UserSubUin):
        self._UserSubUin = UserSubUin

    @property
    def GovernPolicy(self):
        """Data Governance Configuration ItemsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.DlcDataGovernPolicy`
        """
        return self._GovernPolicy

    @GovernPolicy.setter
    def GovernPolicy(self, GovernPolicy):
        self._GovernPolicy = GovernPolicy

    @property
    def DbGovernPolicyIsDisable(self):
        """Is Database Data Governance disabled, true for disabled, false for enabled
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DbGovernPolicyIsDisable

    @DbGovernPolicyIsDisable.setter
    def DbGovernPolicyIsDisable(self, DbGovernPolicyIsDisable):
        self._DbGovernPolicyIsDisable = DbGovernPolicyIsDisable


    def _deserialize(self, params):
        self._DatabaseName = params.get("DatabaseName")
        self._TableName = params.get("TableName")
        self._DatasourceConnectionName = params.get("DatasourceConnectionName")
        self._TableComment = params.get("TableComment")
        self._Type = params.get("Type")
        self._TableFormat = params.get("TableFormat")
        self._UserAlias = params.get("UserAlias")
        self._UserSubUin = params.get("UserSubUin")
        if params.get("GovernPolicy") is not None:
            self._GovernPolicy = DlcDataGovernPolicy()
            self._GovernPolicy._deserialize(params.get("GovernPolicy"))
        self._DbGovernPolicyIsDisable = params.get("DbGovernPolicyIsDisable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableBasicInfo(AbstractModel):
    """Table Metadata Information

    """

    def __init__(self):
        r"""
        :param _TableId: Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _DatasourceId: Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TableName: Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _EngineType: Engine/Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type EngineType: str
        :param _TableType: Table Types, such as View, External Table, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableType: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectName: Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _ProjectDisplayName: Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectDisplayName: str
        :param _TableOwnerId: Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerId: str
        :param _TableOwnerName: Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerName: str
        :param _StorageLocation: Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :type StorageLocation: int
        :param _Description: Table Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _IsPartitionTable: Whether it is a partitioned table, 0-Full Table 1-Partition Table
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsPartitionTable: int
        :param _PartitionColumns: Partition field list
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionColumns: list of str
        :param _StorageFormat: Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageFormat: str
        :param _StorageSize: Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSize: int
        :param _StorageSizeWithUnit: Storage Volume, Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSizeWithUnit: str
        :param _TotalSizeMb: Cumulative storage [MB]
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalSizeMb: int
        :param _ReplicaCount: Replica quantityNote: This field may return null, indicating that no valid value can be obtained.
        :type ReplicaCount: int
        :param _FileCount: Number of Files
Note: This field may return null, indicating that no valid value can be obtained.
        :type FileCount: int
        :param _PartitionCount: Total Partitions (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionCount: int
        :param _PartitionFieldCount: Number of partition fields (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionFieldCount: int
        :param _PartitionExpireDays: Lifecycle - Partition Retention Days [Effective during Partition Retention Policy]
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionExpireDays: int
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _Location: Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :type Location: str
        """
        self._TableId = None
        self._DatasourceId = None
        self._DatasourceName = None
        self._DatabaseId = None
        self._DatabaseName = None
        self._TableName = None
        self._EngineType = None
        self._TableType = None
        self._ProjectId = None
        self._ProjectName = None
        self._ProjectDisplayName = None
        self._TableOwnerId = None
        self._TableOwnerName = None
        self._StorageLocation = None
        self._Description = None
        self._IsPartitionTable = None
        self._PartitionColumns = None
        self._StorageFormat = None
        self._StorageSize = None
        self._StorageSizeWithUnit = None
        self._TotalSizeMb = None
        self._ReplicaCount = None
        self._FileCount = None
        self._PartitionCount = None
        self._PartitionFieldCount = None
        self._PartitionExpireDays = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Location = None

    @property
    def TableId(self):
        """Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def DatasourceId(self):
        """Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TableName(self):
        """Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def EngineType(self):
        """Engine/Storage Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def TableType(self):
        """Table Types, such as View, External Table, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableType

    @TableType.setter
    def TableType(self, TableType):
        self._TableType = TableType

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectName(self):
        """Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def ProjectDisplayName(self):
        """Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectDisplayName

    @ProjectDisplayName.setter
    def ProjectDisplayName(self, ProjectDisplayName):
        self._ProjectDisplayName = ProjectDisplayName

    @property
    def TableOwnerId(self):
        """Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerId

    @TableOwnerId.setter
    def TableOwnerId(self, TableOwnerId):
        self._TableOwnerId = TableOwnerId

    @property
    def TableOwnerName(self):
        """Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerName

    @TableOwnerName.setter
    def TableOwnerName(self, TableOwnerName):
        self._TableOwnerName = TableOwnerName

    @property
    def StorageLocation(self):
        """Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StorageLocation

    @StorageLocation.setter
    def StorageLocation(self, StorageLocation):
        self._StorageLocation = StorageLocation

    @property
    def Description(self):
        """Table Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def IsPartitionTable(self):
        """Whether it is a partitioned table, 0-Full Table 1-Partition Table
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IsPartitionTable

    @IsPartitionTable.setter
    def IsPartitionTable(self, IsPartitionTable):
        self._IsPartitionTable = IsPartitionTable

    @property
    def PartitionColumns(self):
        """Partition field list
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._PartitionColumns

    @PartitionColumns.setter
    def PartitionColumns(self, PartitionColumns):
        self._PartitionColumns = PartitionColumns

    @property
    def StorageFormat(self):
        """Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageFormat

    @StorageFormat.setter
    def StorageFormat(self, StorageFormat):
        self._StorageFormat = StorageFormat

    @property
    def StorageSize(self):
        """Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StorageSize

    @StorageSize.setter
    def StorageSize(self, StorageSize):
        self._StorageSize = StorageSize

    @property
    def StorageSizeWithUnit(self):
        """Storage Volume, Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageSizeWithUnit

    @StorageSizeWithUnit.setter
    def StorageSizeWithUnit(self, StorageSizeWithUnit):
        self._StorageSizeWithUnit = StorageSizeWithUnit

    @property
    def TotalSizeMb(self):
        """Cumulative storage [MB]
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalSizeMb

    @TotalSizeMb.setter
    def TotalSizeMb(self, TotalSizeMb):
        self._TotalSizeMb = TotalSizeMb

    @property
    def ReplicaCount(self):
        """Replica quantityNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ReplicaCount

    @ReplicaCount.setter
    def ReplicaCount(self, ReplicaCount):
        self._ReplicaCount = ReplicaCount

    @property
    def FileCount(self):
        """Number of Files
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FileCount

    @FileCount.setter
    def FileCount(self, FileCount):
        self._FileCount = FileCount

    @property
    def PartitionCount(self):
        """Total Partitions (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PartitionCount

    @PartitionCount.setter
    def PartitionCount(self, PartitionCount):
        self._PartitionCount = PartitionCount

    @property
    def PartitionFieldCount(self):
        """Number of partition fields (including hive, iceberg)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PartitionFieldCount

    @PartitionFieldCount.setter
    def PartitionFieldCount(self, PartitionFieldCount):
        self._PartitionFieldCount = PartitionFieldCount

    @property
    def PartitionExpireDays(self):
        """Lifecycle - Partition Retention Days [Effective during Partition Retention Policy]
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PartitionExpireDays

    @PartitionExpireDays.setter
    def PartitionExpireDays(self, PartitionExpireDays):
        self._PartitionExpireDays = PartitionExpireDays

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Location(self):
        """Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._DatasourceId = params.get("DatasourceId")
        self._DatasourceName = params.get("DatasourceName")
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._TableName = params.get("TableName")
        self._EngineType = params.get("EngineType")
        self._TableType = params.get("TableType")
        self._ProjectId = params.get("ProjectId")
        self._ProjectName = params.get("ProjectName")
        self._ProjectDisplayName = params.get("ProjectDisplayName")
        self._TableOwnerId = params.get("TableOwnerId")
        self._TableOwnerName = params.get("TableOwnerName")
        self._StorageLocation = params.get("StorageLocation")
        self._Description = params.get("Description")
        self._IsPartitionTable = params.get("IsPartitionTable")
        self._PartitionColumns = params.get("PartitionColumns")
        self._StorageFormat = params.get("StorageFormat")
        self._StorageSize = params.get("StorageSize")
        self._StorageSizeWithUnit = params.get("StorageSizeWithUnit")
        self._TotalSizeMb = params.get("TotalSizeMb")
        self._ReplicaCount = params.get("ReplicaCount")
        self._FileCount = params.get("FileCount")
        self._PartitionCount = params.get("PartitionCount")
        self._PartitionFieldCount = params.get("PartitionFieldCount")
        self._PartitionExpireDays = params.get("PartitionExpireDays")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Location = params.get("Location")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableConfig(AbstractModel):
    """Rule Table Variable Replacement

    """

    def __init__(self):
        r"""
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _TableKey: Table Key
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableKey: str
        :param _FieldConfig: Field Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :type FieldConfig: list of FieldConfig
        """
        self._DatabaseId = None
        self._DatabaseName = None
        self._TableId = None
        self._TableName = None
        self._TableKey = None
        self._FieldConfig = None

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def TableKey(self):
        """Table Key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableKey

    @TableKey.setter
    def TableKey(self, TableKey):
        self._TableKey = TableKey

    @property
    def FieldConfig(self):
        """Field Variable
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of FieldConfig
        """
        return self._FieldConfig

    @FieldConfig.setter
    def FieldConfig(self, FieldConfig):
        self._FieldConfig = FieldConfig


    def _deserialize(self, params):
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._TableKey = params.get("TableKey")
        if params.get("FieldConfig") is not None:
            self._FieldConfig = []
            for item in params.get("FieldConfig"):
                obj = FieldConfig()
                obj._deserialize(item)
                self._FieldConfig.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableHeat(AbstractModel):
    """Heat value of the table in the past seven days (excluding today)

    """

    def __init__(self):
        r"""
        :param _TableId: Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _DayTime: Statistics DateNote: This field may return null, indicating that no valid value can be obtained.
        :type DayTime: str
        :param _Heat: Popularity
Note: This field may return null, indicating that no valid value can be obtained.
        :type Heat: float
        :param _MaxHeat: Maximum Popularity
Note: This field may return null, indicating that no valid value can be obtained.
        :type MaxHeat: float
        """
        self._TableId = None
        self._DayTime = None
        self._Heat = None
        self._MaxHeat = None

    @property
    def TableId(self):
        """Table IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def DayTime(self):
        """Statistics DateNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DayTime

    @DayTime.setter
    def DayTime(self, DayTime):
        self._DayTime = DayTime

    @property
    def Heat(self):
        """Popularity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._Heat

    @Heat.setter
    def Heat(self, Heat):
        self._Heat = Heat

    @property
    def MaxHeat(self):
        """Maximum Popularity
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._MaxHeat

    @MaxHeat.setter
    def MaxHeat(self, MaxHeat):
        self._MaxHeat = MaxHeat


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._DayTime = params.get("DayTime")
        self._Heat = params.get("Heat")
        self._MaxHeat = params.get("MaxHeat")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableInfo(AbstractModel):
    """Metadata Table Details

    """

    def __init__(self):
        r"""
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _OriginDatabaseName: Table databaseName
Note: This field may return null, indicating that no valid value can be obtained.
        :type OriginDatabaseName: str
        :param _OriginSchemaName: Table schemaName
Note: This field may return null, indicating that no valid value can be obtained.
        :type OriginSchemaName: str
        """
        self._TableId = None
        self._TableName = None
        self._OriginDatabaseName = None
        self._OriginSchemaName = None

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def OriginDatabaseName(self):
        """Table databaseName
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginDatabaseName

    @OriginDatabaseName.setter
    def OriginDatabaseName(self, OriginDatabaseName):
        self._OriginDatabaseName = OriginDatabaseName

    @property
    def OriginSchemaName(self):
        """Table schemaName
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OriginSchemaName

    @OriginSchemaName.setter
    def OriginSchemaName(self, OriginSchemaName):
        self._OriginSchemaName = OriginSchemaName


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._OriginDatabaseName = params.get("OriginDatabaseName")
        self._OriginSchemaName = params.get("OriginSchemaName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableLineageBaseInfo(AbstractModel):
    """Table Lineage Details

    """

    def __init__(self):
        r"""
        :param _MetastoreType: Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _PrefixPath: Path from Central Node to this Node
Note: This field may return null, indicating that no valid value can be obtained.
        :type PrefixPath: str
        :param _ProjectId: Space ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _DatasourceId: Data source IDNote: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _Params: Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type Params: list of LineageParamRecord
        :param _ParentSet: Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentSet: str
        :param _ChildSet: Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChildSet: str
        :param _ExtParams: Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtParams: list of RecordField
        :param _Id: Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _MetastoreTypeName: Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreTypeName: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _QualifiedName: Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualifiedName: str
        :param _DownStreamCount: Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :type DownStreamCount: int
        :param _UpStreamCount: Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpStreamCount: int
        :param _Description: Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _CreateTime: Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _Tasks: Modify the task ID list of lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of str
        """
        self._MetastoreType = None
        self._PrefixPath = None
        self._ProjectId = None
        self._DatasourceId = None
        self._TableId = None
        self._Params = None
        self._ParentSet = None
        self._ChildSet = None
        self._ExtParams = None
        self._Id = None
        self._MetastoreTypeName = None
        self._TableName = None
        self._QualifiedName = None
        self._DownStreamCount = None
        self._UpStreamCount = None
        self._Description = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Tasks = None

    @property
    def MetastoreType(self):
        """Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def PrefixPath(self):
        """Path from Central Node to this Node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PrefixPath

    @PrefixPath.setter
    def PrefixPath(self, PrefixPath):
        self._PrefixPath = PrefixPath

    @property
    def ProjectId(self):
        """Space ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatasourceId(self):
        """Data source IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def Params(self):
        """Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of LineageParamRecord
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def ParentSet(self):
        """Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentSet

    @ParentSet.setter
    def ParentSet(self, ParentSet):
        self._ParentSet = ParentSet

    @property
    def ChildSet(self):
        """Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChildSet

    @ChildSet.setter
    def ChildSet(self, ChildSet):
        self._ChildSet = ChildSet

    @property
    def ExtParams(self):
        """Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def Id(self):
        """Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MetastoreTypeName(self):
        """Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreTypeName

    @MetastoreTypeName.setter
    def MetastoreTypeName(self, MetastoreTypeName):
        self._MetastoreTypeName = MetastoreTypeName

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def QualifiedName(self):
        """Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._QualifiedName

    @QualifiedName.setter
    def QualifiedName(self, QualifiedName):
        self._QualifiedName = QualifiedName

    @property
    def DownStreamCount(self):
        """Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DownStreamCount

    @DownStreamCount.setter
    def DownStreamCount(self, DownStreamCount):
        self._DownStreamCount = DownStreamCount

    @property
    def UpStreamCount(self):
        """Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpStreamCount

    @UpStreamCount.setter
    def UpStreamCount(self, UpStreamCount):
        self._UpStreamCount = UpStreamCount

    @property
    def Description(self):
        """Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateTime(self):
        """Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Tasks(self):
        """Modify the task ID list of lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks


    def _deserialize(self, params):
        self._MetastoreType = params.get("MetastoreType")
        self._PrefixPath = params.get("PrefixPath")
        self._ProjectId = params.get("ProjectId")
        self._DatasourceId = params.get("DatasourceId")
        self._TableId = params.get("TableId")
        if params.get("Params") is not None:
            self._Params = []
            for item in params.get("Params"):
                obj = LineageParamRecord()
                obj._deserialize(item)
                self._Params.append(obj)
        self._ParentSet = params.get("ParentSet")
        self._ChildSet = params.get("ChildSet")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._Id = params.get("Id")
        self._MetastoreTypeName = params.get("MetastoreTypeName")
        self._TableName = params.get("TableName")
        self._QualifiedName = params.get("QualifiedName")
        self._DownStreamCount = params.get("DownStreamCount")
        self._UpStreamCount = params.get("UpStreamCount")
        self._Description = params.get("Description")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Tasks = params.get("Tasks")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableLineageInfo(AbstractModel):
    """Table Lineage Details

    """

    def __init__(self):
        r"""
        :param _MetastoreType: Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _ProjectId: Space ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _DatasourceId: Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: str
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _Params: Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type Params: list of LineageParamRecord
        :param _ParentSet: Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :type ParentSet: str
        :param _ChildSet: Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChildSet: str
        :param _ExtParams: Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtParams: list of RecordField
        :param _Id: Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _MetastoreTypeName: Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreTypeName: str
        :param _TableName: Table name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _QualifiedName: Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type QualifiedName: str
        :param _DownStreamCount: Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :type DownStreamCount: int
        :param _UpStreamCount: Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpStreamCount: int
        :param _Description: Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _PrefixPath: Path from the central node to this node
Note: This field may return null, indicating that no valid value can be obtained.
        :type PrefixPath: str
        :param _CreateTime: Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _Tasks: List of task IDs for modifying bloodline
Note: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of str
        :param _ChannelType: Module/Application Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChannelType: str
        :param _DisplayType: Display Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type DisplayType: str
        :param _EngineType: Table Types
Note: This field may return null, indicating that no valid value can be obtained.
        :type EngineType: str
        :param _TableType: Table Types
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableType: str
        :param _DatasourceName: datasourceName
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatabaseName: DatabaseName
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _DatabaseId: DatabaseId
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DataFromType: Data source.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DataFromType: str
        :param _CollectJobId: Collection id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CollectJobId: str
        """
        self._MetastoreType = None
        self._ProjectId = None
        self._DatasourceId = None
        self._TableId = None
        self._Params = None
        self._ParentSet = None
        self._ChildSet = None
        self._ExtParams = None
        self._Id = None
        self._MetastoreTypeName = None
        self._TableName = None
        self._QualifiedName = None
        self._DownStreamCount = None
        self._UpStreamCount = None
        self._Description = None
        self._PrefixPath = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Tasks = None
        self._ChannelType = None
        self._DisplayType = None
        self._EngineType = None
        self._TableType = None
        self._DatasourceName = None
        self._DatabaseName = None
        self._DatabaseId = None
        self._DataFromType = None
        self._CollectJobId = None

    @property
    def MetastoreType(self):
        """Metadata Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def ProjectId(self):
        """Space ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DatasourceId(self):
        """Data source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def Params(self):
        """Table Lineage Parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of LineageParamRecord
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def ParentSet(self):
        """Parent Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ParentSet

    @ParentSet.setter
    def ParentSet(self, ParentSet):
        self._ParentSet = ParentSet

    @property
    def ChildSet(self):
        """Child Node List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChildSet

    @ChildSet.setter
    def ChildSet(self, ChildSet):
        self._ChildSet = ChildSet

    @property
    def ExtParams(self):
        """Additional parameters
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of RecordField
        """
        return self._ExtParams

    @ExtParams.setter
    def ExtParams(self, ExtParams):
        self._ExtParams = ExtParams

    @property
    def Id(self):
        """Lineage ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MetastoreTypeName(self):
        """Metadata Type Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreTypeName

    @MetastoreTypeName.setter
    def MetastoreTypeName(self, MetastoreTypeName):
        self._MetastoreTypeName = MetastoreTypeName

    @property
    def TableName(self):
        """Table name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def QualifiedName(self):
        """Full Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._QualifiedName

    @QualifiedName.setter
    def QualifiedName(self, QualifiedName):
        self._QualifiedName = QualifiedName

    @property
    def DownStreamCount(self):
        """Number of Downstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DownStreamCount

    @DownStreamCount.setter
    def DownStreamCount(self, DownStreamCount):
        self._DownStreamCount = DownStreamCount

    @property
    def UpStreamCount(self):
        """Number of Upstream Nodes in Lineage
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._UpStreamCount

    @UpStreamCount.setter
    def UpStreamCount(self, UpStreamCount):
        self._UpStreamCount = UpStreamCount

    @property
    def Description(self):
        """Bloodline Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PrefixPath(self):
        """Path from the central node to this node
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._PrefixPath

    @PrefixPath.setter
    def PrefixPath(self, PrefixPath):
        self._PrefixPath = PrefixPath

    @property
    def CreateTime(self):
        """Bloodline Creation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Bloodline Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Tasks(self):
        """List of task IDs for modifying bloodline
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def ChannelType(self):
        """Module/Application Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ChannelType

    @ChannelType.setter
    def ChannelType(self, ChannelType):
        self._ChannelType = ChannelType

    @property
    def DisplayType(self):
        """Display Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DisplayType

    @DisplayType.setter
    def DisplayType(self, DisplayType):
        self._DisplayType = DisplayType

    @property
    def EngineType(self):
        """Table Types
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def TableType(self):
        """Table Types
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableType

    @TableType.setter
    def TableType(self, TableType):
        self._TableType = TableType

    @property
    def DatasourceName(self):
        """datasourceName
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatabaseName(self):
        """DatabaseName
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def DatabaseId(self):
        """DatabaseId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DataFromType(self):
        """Data source.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DataFromType

    @DataFromType.setter
    def DataFromType(self, DataFromType):
        self._DataFromType = DataFromType

    @property
    def CollectJobId(self):
        """Collection id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CollectJobId

    @CollectJobId.setter
    def CollectJobId(self, CollectJobId):
        self._CollectJobId = CollectJobId


    def _deserialize(self, params):
        self._MetastoreType = params.get("MetastoreType")
        self._ProjectId = params.get("ProjectId")
        self._DatasourceId = params.get("DatasourceId")
        self._TableId = params.get("TableId")
        if params.get("Params") is not None:
            self._Params = []
            for item in params.get("Params"):
                obj = LineageParamRecord()
                obj._deserialize(item)
                self._Params.append(obj)
        self._ParentSet = params.get("ParentSet")
        self._ChildSet = params.get("ChildSet")
        if params.get("ExtParams") is not None:
            self._ExtParams = []
            for item in params.get("ExtParams"):
                obj = RecordField()
                obj._deserialize(item)
                self._ExtParams.append(obj)
        self._Id = params.get("Id")
        self._MetastoreTypeName = params.get("MetastoreTypeName")
        self._TableName = params.get("TableName")
        self._QualifiedName = params.get("QualifiedName")
        self._DownStreamCount = params.get("DownStreamCount")
        self._UpStreamCount = params.get("UpStreamCount")
        self._Description = params.get("Description")
        self._PrefixPath = params.get("PrefixPath")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Tasks = params.get("Tasks")
        self._ChannelType = params.get("ChannelType")
        self._DisplayType = params.get("DisplayType")
        self._EngineType = params.get("EngineType")
        self._TableType = params.get("TableType")
        self._DatasourceName = params.get("DatasourceName")
        self._DatabaseName = params.get("DatabaseName")
        self._DatabaseId = params.get("DatabaseId")
        self._DataFromType = params.get("DataFromType")
        self._CollectJobId = params.get("CollectJobId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableMeta(AbstractModel):
    """Table Metadata Information

    """

    def __init__(self):
        r"""
        :param _TableId: Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _TableOwnerName: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerName: str
        :param _DatasourceId: Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceId: int
        :param _ClusterName: Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterName: str
        :param _DatasourceName: Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceName: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TablePath: Table Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type TablePath: str
        :param _TableNameCn: Chinese Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableNameCn: str
        :param _MetastoreId: Metadata Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreId: int
        :param _MetastoreType: Technology Type, available values: HIVE,MYSQL,KAFKA, HBASE
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetastoreType: str
        :param _Description: Table Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _ColumnSeparator: Column Separator
Note: This field may return null, indicating that no valid value can be obtained.
        :type ColumnSeparator: str
        :param _StorageFormat: Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageFormat: str
        :param _StorageSize: Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSize: int
        :param _TableType: Table Types, such as hive MANAGED_TABLE;EXTERNAL_TABLE
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableType: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Latest Data Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _DdlModifyTime: Latest DDL Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type DdlModifyTime: str
        :param _LastAccessTime: Last Access Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastAccessTime: str
        :param _ProjectName: Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _BizCatalogIds: Data Directory ID (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
        :type BizCatalogIds: list of str
        :param _BizCatalogNames: Data Directory (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
        :type BizCatalogNames: list of str
        :param _HasFavorite: true for Favorited/false indicates not favorited
Note: This field may return null, indicating that no valid value can be obtained.
        :type HasFavorite: bool
        :param _LifeCycleTime: LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :type LifeCycleTime: int
        :param _StorageSizeWithUnit: Storage Volume, displayed in appropriate units
Note: This field may return null, indicating that no valid value can be obtained.
        :type StorageSizeWithUnit: str
        :param _InstanceId: Instance ID of the Data Source Engine: e.g., EMR Cluster Instance ID/Data Source Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceId: str
        :param _TechnologyType: Data Source Technology Type: HIVE/MYSQL/HBASE/KAFKA etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type TechnologyType: str
        :param _TableNameEn: Table English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableNameEn: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _Partitions: Number of partitions in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
        :type Partitions: str
        :param _ReplicationFactor: Number of replicas in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
        :type ReplicationFactor: str
        :param _ProjectDisplayName: Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectDisplayName: str
        :param _DataModifyTime: Last Modified Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataModifyTime: str
        :param _ClusterId: Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterId: str
        :param _HasAdminAuthority: Current user has Administrator Privileges
Note: This field may return null, indicating that no valid value can be obtained.
        :type HasAdminAuthority: bool
        :param _DatasourceDisplayName: Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatasourceDisplayName: str
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _FavoriteCount: Total favorites on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
        :type FavoriteCount: int
        :param _LikeCount: Total likes on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
        :type LikeCount: int
        :param _HasLike: true for liked/false for not liked status
Note: This field may return null, indicating that no valid value can be obtained.
        :type HasLike: bool
        :param _TablePropertyScore: Asset score of the table
Note: This field may return null, indicating that no valid value can be obtained.
        :type TablePropertyScore: :class:`tencentcloud.wedata.v20210820.models.TablePropertyScore`
        :param _TableHeat: Heat value of the table
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableHeat: :class:`tencentcloud.wedata.v20210820.models.TableHeat`
        :param _OwnerProjectId: Data source ownerProjectId
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerProjectId: str
        :param _TableOwnerId: Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableOwnerId: str
        :param _DataSourceCategory: System Source -CLUSTER, DB - Self Definition Source
Note: This field may return null, indicating that no valid value can be obtained.
        :type DataSourceCategory: str
        :param _Columns: Table Field Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type Columns: list of SearchColumnDocVO
        :param _MetaCrawlType: Table Collection Type
TABLE, VIEW, MANAGED_TABLE (Hive managed table), EXTERNAL_TABLE (Hive external table), VIRTUAL_VIEW (virtual view), MATERIALIZED_VIEW (materialized view), LATERAL_VIEW, INDEX_TABLE (index table), END_SELECT (query structure), INSTANCE (intermediate temporary table type (data lineage)), CDW (CDW table type)
Note: This field may return null, indicating that no valid value can be obtained.
        :type MetaCrawlType: str
        :param _IsView: Is View
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsView: bool
        :param _Location: Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :type Location: str
        :param _IsPartitionTable: Determine if it is a partitioned table 1 Yes 0 No
Note: This field may return null, indicating that no valid value can be obtained.
        :type IsPartitionTable: int
        :param _PartitionColumns: Partition Field Key
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionColumns: list of str
        :param _PartitionExpireDays: Lifecycle - Partition Retention Days [Valid when Partition Retention Policy is applied]
Note: This field may return null, indicating that no valid value can be obtained.
        :type PartitionExpireDays: int
        :param _TableProperties: Table Ancillary Information
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableProperties: list of TableMetaProperty
        """
        self._TableId = None
        self._TableName = None
        self._TableOwnerName = None
        self._DatasourceId = None
        self._ClusterName = None
        self._DatasourceName = None
        self._DatabaseName = None
        self._TablePath = None
        self._TableNameCn = None
        self._MetastoreId = None
        self._MetastoreType = None
        self._Description = None
        self._ColumnSeparator = None
        self._StorageFormat = None
        self._StorageSize = None
        self._TableType = None
        self._CreateTime = None
        self._ModifyTime = None
        self._DdlModifyTime = None
        self._LastAccessTime = None
        self._ProjectName = None
        self._BizCatalogIds = None
        self._BizCatalogNames = None
        self._HasFavorite = None
        self._LifeCycleTime = None
        self._StorageSizeWithUnit = None
        self._InstanceId = None
        self._TechnologyType = None
        self._TableNameEn = None
        self._ProjectId = None
        self._Partitions = None
        self._ReplicationFactor = None
        self._ProjectDisplayName = None
        self._DataModifyTime = None
        self._ClusterId = None
        self._HasAdminAuthority = None
        self._DatasourceDisplayName = None
        self._DatabaseId = None
        self._FavoriteCount = None
        self._LikeCount = None
        self._HasLike = None
        self._TablePropertyScore = None
        self._TableHeat = None
        self._OwnerProjectId = None
        self._TableOwnerId = None
        self._DataSourceCategory = None
        self._Columns = None
        self._MetaCrawlType = None
        self._IsView = None
        self._Location = None
        self._IsPartitionTable = None
        self._PartitionColumns = None
        self._PartitionExpireDays = None
        self._TableProperties = None

    @property
    def TableId(self):
        """Global Unique ID of the Table
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def TableOwnerName(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerName

    @TableOwnerName.setter
    def TableOwnerName(self, TableOwnerName):
        self._TableOwnerName = TableOwnerName

    @property
    def DatasourceId(self):
        """Data Source Global Unique ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def ClusterName(self):
        """Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def DatasourceName(self):
        """Data Source Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceName

    @DatasourceName.setter
    def DatasourceName(self, DatasourceName):
        self._DatasourceName = DatasourceName

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TablePath(self):
        """Table Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TablePath

    @TablePath.setter
    def TablePath(self, TablePath):
        self._TablePath = TablePath

    @property
    def TableNameCn(self):
        """Chinese Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableNameCn

    @TableNameCn.setter
    def TableNameCn(self, TableNameCn):
        self._TableNameCn = TableNameCn

    @property
    def MetastoreId(self):
        """Metadata Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MetastoreId

    @MetastoreId.setter
    def MetastoreId(self, MetastoreId):
        self._MetastoreId = MetastoreId

    @property
    def MetastoreType(self):
        """Technology Type, available values: HIVE,MYSQL,KAFKA, HBASE
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetastoreType

    @MetastoreType.setter
    def MetastoreType(self, MetastoreType):
        self._MetastoreType = MetastoreType

    @property
    def Description(self):
        """Table Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ColumnSeparator(self):
        """Column Separator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ColumnSeparator

    @ColumnSeparator.setter
    def ColumnSeparator(self, ColumnSeparator):
        self._ColumnSeparator = ColumnSeparator

    @property
    def StorageFormat(self):
        """Storage Format
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageFormat

    @StorageFormat.setter
    def StorageFormat(self, StorageFormat):
        self._StorageFormat = StorageFormat

    @property
    def StorageSize(self):
        """Storage Volume, Byte Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StorageSize

    @StorageSize.setter
    def StorageSize(self, StorageSize):
        self._StorageSize = StorageSize

    @property
    def TableType(self):
        """Table Types, such as hive MANAGED_TABLE;EXTERNAL_TABLE
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableType

    @TableType.setter
    def TableType(self, TableType):
        self._TableType = TableType

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Latest Data Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def DdlModifyTime(self):
        """Latest DDL Modification Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DdlModifyTime

    @DdlModifyTime.setter
    def DdlModifyTime(self, DdlModifyTime):
        self._DdlModifyTime = DdlModifyTime

    @property
    def LastAccessTime(self):
        """Last Access Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastAccessTime

    @LastAccessTime.setter
    def LastAccessTime(self, LastAccessTime):
        self._LastAccessTime = LastAccessTime

    @property
    def ProjectName(self):
        """Project Name in English
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def BizCatalogIds(self):
        """Data Directory ID (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._BizCatalogIds

    @BizCatalogIds.setter
    def BizCatalogIds(self, BizCatalogIds):
        self._BizCatalogIds = BizCatalogIds

    @property
    def BizCatalogNames(self):
        """Data Directory (may be multiple)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._BizCatalogNames

    @BizCatalogNames.setter
    def BizCatalogNames(self, BizCatalogNames):
        self._BizCatalogNames = BizCatalogNames

    @property
    def HasFavorite(self):
        """true for Favorited/false indicates not favorited
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._HasFavorite

    @HasFavorite.setter
    def HasFavorite(self, HasFavorite):
        self._HasFavorite = HasFavorite

    @property
    def LifeCycleTime(self):
        """LifecycleNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LifeCycleTime

    @LifeCycleTime.setter
    def LifeCycleTime(self, LifeCycleTime):
        self._LifeCycleTime = LifeCycleTime

    @property
    def StorageSizeWithUnit(self):
        """Storage Volume, displayed in appropriate units
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StorageSizeWithUnit

    @StorageSizeWithUnit.setter
    def StorageSizeWithUnit(self, StorageSizeWithUnit):
        self._StorageSizeWithUnit = StorageSizeWithUnit

    @property
    def InstanceId(self):
        """Instance ID of the Data Source Engine: e.g., EMR Cluster Instance ID/Data Source Instance ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def TechnologyType(self):
        """Data Source Technology Type: HIVE/MYSQL/HBASE/KAFKA etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TechnologyType

    @TechnologyType.setter
    def TechnologyType(self, TechnologyType):
        self._TechnologyType = TechnologyType

    @property
    def TableNameEn(self):
        """Table English Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableNameEn

    @TableNameEn.setter
    def TableNameEn(self, TableNameEn):
        self._TableNameEn = TableNameEn

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Partitions(self):
        """Number of partitions in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Partitions

    @Partitions.setter
    def Partitions(self, Partitions):
        self._Partitions = Partitions

    @property
    def ReplicationFactor(self):
        """Number of replicas in Kafka Topic
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ReplicationFactor

    @ReplicationFactor.setter
    def ReplicationFactor(self, ReplicationFactor):
        self._ReplicationFactor = ReplicationFactor

    @property
    def ProjectDisplayName(self):
        """Project English and Chinese Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectDisplayName

    @ProjectDisplayName.setter
    def ProjectDisplayName(self, ProjectDisplayName):
        self._ProjectDisplayName = ProjectDisplayName

    @property
    def DataModifyTime(self):
        """Last Modified Time of Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataModifyTime

    @DataModifyTime.setter
    def DataModifyTime(self, DataModifyTime):
        self._DataModifyTime = DataModifyTime

    @property
    def ClusterId(self):
        """Cluster ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def HasAdminAuthority(self):
        """Current user has Administrator Privileges
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._HasAdminAuthority

    @HasAdminAuthority.setter
    def HasAdminAuthority(self, HasAdminAuthority):
        self._HasAdminAuthority = HasAdminAuthority

    @property
    def DatasourceDisplayName(self):
        """Data Source Display Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatasourceDisplayName

    @DatasourceDisplayName.setter
    def DatasourceDisplayName(self, DatasourceDisplayName):
        self._DatasourceDisplayName = DatasourceDisplayName

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def FavoriteCount(self):
        """Total favorites on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._FavoriteCount

    @FavoriteCount.setter
    def FavoriteCount(self, FavoriteCount):
        self._FavoriteCount = FavoriteCount

    @property
    def LikeCount(self):
        """Total likes on the table under the tenant
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._LikeCount

    @LikeCount.setter
    def LikeCount(self, LikeCount):
        self._LikeCount = LikeCount

    @property
    def HasLike(self):
        """true for liked/false for not liked status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._HasLike

    @HasLike.setter
    def HasLike(self, HasLike):
        self._HasLike = HasLike

    @property
    def TablePropertyScore(self):
        """Asset score of the table
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TablePropertyScore`
        """
        return self._TablePropertyScore

    @TablePropertyScore.setter
    def TablePropertyScore(self, TablePropertyScore):
        self._TablePropertyScore = TablePropertyScore

    @property
    def TableHeat(self):
        """Heat value of the table
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TableHeat`
        """
        return self._TableHeat

    @TableHeat.setter
    def TableHeat(self, TableHeat):
        self._TableHeat = TableHeat

    @property
    def OwnerProjectId(self):
        """Data source ownerProjectId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerProjectId

    @OwnerProjectId.setter
    def OwnerProjectId(self, OwnerProjectId):
        self._OwnerProjectId = OwnerProjectId

    @property
    def TableOwnerId(self):
        """Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableOwnerId

    @TableOwnerId.setter
    def TableOwnerId(self, TableOwnerId):
        self._TableOwnerId = TableOwnerId

    @property
    def DataSourceCategory(self):
        """System Source -CLUSTER, DB - Self Definition Source
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DataSourceCategory

    @DataSourceCategory.setter
    def DataSourceCategory(self, DataSourceCategory):
        self._DataSourceCategory = DataSourceCategory

    @property
    def Columns(self):
        """Table Field Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of SearchColumnDocVO
        """
        return self._Columns

    @Columns.setter
    def Columns(self, Columns):
        self._Columns = Columns

    @property
    def MetaCrawlType(self):
        """Table Collection Type
TABLE, VIEW, MANAGED_TABLE (Hive managed table), EXTERNAL_TABLE (Hive external table), VIRTUAL_VIEW (virtual view), MATERIALIZED_VIEW (materialized view), LATERAL_VIEW, INDEX_TABLE (index table), END_SELECT (query structure), INSTANCE (intermediate temporary table type (data lineage)), CDW (CDW table type)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MetaCrawlType

    @MetaCrawlType.setter
    def MetaCrawlType(self, MetaCrawlType):
        self._MetaCrawlType = MetaCrawlType

    @property
    def IsView(self):
        """Is View
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._IsView

    @IsView.setter
    def IsView(self, IsView):
        self._IsView = IsView

    @property
    def Location(self):
        """Storage locationNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location

    @property
    def IsPartitionTable(self):
        """Determine if it is a partitioned table 1 Yes 0 No
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._IsPartitionTable

    @IsPartitionTable.setter
    def IsPartitionTable(self, IsPartitionTable):
        self._IsPartitionTable = IsPartitionTable

    @property
    def PartitionColumns(self):
        """Partition Field Key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._PartitionColumns

    @PartitionColumns.setter
    def PartitionColumns(self, PartitionColumns):
        self._PartitionColumns = PartitionColumns

    @property
    def PartitionExpireDays(self):
        """Lifecycle - Partition Retention Days [Valid when Partition Retention Policy is applied]
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PartitionExpireDays

    @PartitionExpireDays.setter
    def PartitionExpireDays(self, PartitionExpireDays):
        self._PartitionExpireDays = PartitionExpireDays

    @property
    def TableProperties(self):
        """Table Ancillary Information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableMetaProperty
        """
        return self._TableProperties

    @TableProperties.setter
    def TableProperties(self, TableProperties):
        self._TableProperties = TableProperties


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._TableOwnerName = params.get("TableOwnerName")
        self._DatasourceId = params.get("DatasourceId")
        self._ClusterName = params.get("ClusterName")
        self._DatasourceName = params.get("DatasourceName")
        self._DatabaseName = params.get("DatabaseName")
        self._TablePath = params.get("TablePath")
        self._TableNameCn = params.get("TableNameCn")
        self._MetastoreId = params.get("MetastoreId")
        self._MetastoreType = params.get("MetastoreType")
        self._Description = params.get("Description")
        self._ColumnSeparator = params.get("ColumnSeparator")
        self._StorageFormat = params.get("StorageFormat")
        self._StorageSize = params.get("StorageSize")
        self._TableType = params.get("TableType")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._DdlModifyTime = params.get("DdlModifyTime")
        self._LastAccessTime = params.get("LastAccessTime")
        self._ProjectName = params.get("ProjectName")
        self._BizCatalogIds = params.get("BizCatalogIds")
        self._BizCatalogNames = params.get("BizCatalogNames")
        self._HasFavorite = params.get("HasFavorite")
        self._LifeCycleTime = params.get("LifeCycleTime")
        self._StorageSizeWithUnit = params.get("StorageSizeWithUnit")
        self._InstanceId = params.get("InstanceId")
        self._TechnologyType = params.get("TechnologyType")
        self._TableNameEn = params.get("TableNameEn")
        self._ProjectId = params.get("ProjectId")
        self._Partitions = params.get("Partitions")
        self._ReplicationFactor = params.get("ReplicationFactor")
        self._ProjectDisplayName = params.get("ProjectDisplayName")
        self._DataModifyTime = params.get("DataModifyTime")
        self._ClusterId = params.get("ClusterId")
        self._HasAdminAuthority = params.get("HasAdminAuthority")
        self._DatasourceDisplayName = params.get("DatasourceDisplayName")
        self._DatabaseId = params.get("DatabaseId")
        self._FavoriteCount = params.get("FavoriteCount")
        self._LikeCount = params.get("LikeCount")
        self._HasLike = params.get("HasLike")
        if params.get("TablePropertyScore") is not None:
            self._TablePropertyScore = TablePropertyScore()
            self._TablePropertyScore._deserialize(params.get("TablePropertyScore"))
        if params.get("TableHeat") is not None:
            self._TableHeat = TableHeat()
            self._TableHeat._deserialize(params.get("TableHeat"))
        self._OwnerProjectId = params.get("OwnerProjectId")
        self._TableOwnerId = params.get("TableOwnerId")
        self._DataSourceCategory = params.get("DataSourceCategory")
        if params.get("Columns") is not None:
            self._Columns = []
            for item in params.get("Columns"):
                obj = SearchColumnDocVO()
                obj._deserialize(item)
                self._Columns.append(obj)
        self._MetaCrawlType = params.get("MetaCrawlType")
        self._IsView = params.get("IsView")
        self._Location = params.get("Location")
        self._IsPartitionTable = params.get("IsPartitionTable")
        self._PartitionColumns = params.get("PartitionColumns")
        self._PartitionExpireDays = params.get("PartitionExpireDays")
        if params.get("TableProperties") is not None:
            self._TableProperties = []
            for item in params.get("TableProperties"):
                obj = TableMetaProperty()
                obj._deserialize(item)
                self._TableProperties.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableMetaProperty(AbstractModel):
    """Table Ancillary Information

    """

    def __init__(self):
        r"""
        :param _Key: Attribute Key
Note: This field may return null, indicating that no valid value can be obtained.
        :type Key: str
        :param _Value: Attribute Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Attribute Key
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Attribute Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableNameFilter(AbstractModel):
    """Query conditions by Table Name

    """

    def __init__(self):
        r"""
        :param _MsType: Data source type
        :type MsType: str
        :param _DatasourceId: Data source ID
        :type DatasourceId: int
        :param _DatabaseName: Database name
        :type DatabaseName: str
        :param _SchemaName: schema
        :type SchemaName: str
        :param _Name: Table name
        :type Name: str
        """
        self._MsType = None
        self._DatasourceId = None
        self._DatabaseName = None
        self._SchemaName = None
        self._Name = None

    @property
    def MsType(self):
        """Data source type
        :rtype: str
        """
        return self._MsType

    @MsType.setter
    def MsType(self, MsType):
        self._MsType = MsType

    @property
    def DatasourceId(self):
        """Data source ID
        :rtype: int
        """
        return self._DatasourceId

    @DatasourceId.setter
    def DatasourceId(self, DatasourceId):
        self._DatasourceId = DatasourceId

    @property
    def DatabaseName(self):
        """Database name
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def SchemaName(self):
        """schema
        :rtype: str
        """
        return self._SchemaName

    @SchemaName.setter
    def SchemaName(self, SchemaName):
        self._SchemaName = SchemaName

    @property
    def Name(self):
        """Table name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._MsType = params.get("MsType")
        self._DatasourceId = params.get("DatasourceId")
        self._DatabaseName = params.get("DatabaseName")
        self._SchemaName = params.get("SchemaName")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TablePropertyScore(AbstractModel):
    """Asset Rating of the table updated by day

    """

    def __init__(self):
        r"""
        :param _TableId: Table ID
        :type TableId: str
        :param _DayTime: Statistics Date
        :type DayTime: str
        :param _Integrity: Table Integrity Score
        :type Integrity: float
        :param _Safety: Table Assurance Score
        :type Safety: float
        :param _Timeliness: Table Timeliness Score
        :type Timeliness: float
        :param _Stability: Table Stability Score
        :type Stability: float
        :param _Normative: Table Normalization Score
        :type Normative: float
        :param _Average: Average Asset Score
        :type Average: float
        """
        self._TableId = None
        self._DayTime = None
        self._Integrity = None
        self._Safety = None
        self._Timeliness = None
        self._Stability = None
        self._Normative = None
        self._Average = None

    @property
    def TableId(self):
        """Table ID
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def DayTime(self):
        """Statistics Date
        :rtype: str
        """
        return self._DayTime

    @DayTime.setter
    def DayTime(self, DayTime):
        self._DayTime = DayTime

    @property
    def Integrity(self):
        """Table Integrity Score
        :rtype: float
        """
        return self._Integrity

    @Integrity.setter
    def Integrity(self, Integrity):
        self._Integrity = Integrity

    @property
    def Safety(self):
        """Table Assurance Score
        :rtype: float
        """
        return self._Safety

    @Safety.setter
    def Safety(self, Safety):
        self._Safety = Safety

    @property
    def Timeliness(self):
        """Table Timeliness Score
        :rtype: float
        """
        return self._Timeliness

    @Timeliness.setter
    def Timeliness(self, Timeliness):
        self._Timeliness = Timeliness

    @property
    def Stability(self):
        """Table Stability Score
        :rtype: float
        """
        return self._Stability

    @Stability.setter
    def Stability(self, Stability):
        self._Stability = Stability

    @property
    def Normative(self):
        """Table Normalization Score
        :rtype: float
        """
        return self._Normative

    @Normative.setter
    def Normative(self, Normative):
        self._Normative = Normative

    @property
    def Average(self):
        """Average Asset Score
        :rtype: float
        """
        return self._Average

    @Average.setter
    def Average(self, Average):
        self._Average = Average


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._DayTime = params.get("DayTime")
        self._Integrity = params.get("Integrity")
        self._Safety = params.get("Safety")
        self._Timeliness = params.get("Timeliness")
        self._Stability = params.get("Stability")
        self._Normative = params.get("Normative")
        self._Average = params.get("Average")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableQualityDetail(AbstractModel):
    """Table Quality Details

    """

    def __init__(self):
        r"""
        :param _DatabaseId: Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseId: str
        :param _DatabaseName: Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseName: str
        :param _TableId: Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableId: str
        :param _TableName: Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _OwnerUserId: Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUserId: int
        :param _OwnerUserName: Table Owner Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerUserName: str
        :param _DatabaseScore: Database Score
Note: This field may return null, indicating that no valid value can be obtained.
        :type DatabaseScore: float
        :param _TableScore: Table Score
Note: This field may return null, indicating that no valid value can be obtained.
        :type TableScore: float
        :param _LastPeriodRatio: Table Month-over-Month Growth
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastPeriodRatio: float
        :param _DsEnvType: 0 or not returned or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
        :type DsEnvType: int
        """
        self._DatabaseId = None
        self._DatabaseName = None
        self._TableId = None
        self._TableName = None
        self._OwnerUserId = None
        self._OwnerUserName = None
        self._DatabaseScore = None
        self._TableScore = None
        self._LastPeriodRatio = None
        self._DsEnvType = None

    @property
    def DatabaseId(self):
        """Database ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseId

    @DatabaseId.setter
    def DatabaseId(self, DatabaseId):
        self._DatabaseId = DatabaseId

    @property
    def DatabaseName(self):
        """Database nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DatabaseName

    @DatabaseName.setter
    def DatabaseName(self, DatabaseName):
        self._DatabaseName = DatabaseName

    @property
    def TableId(self):
        """Table ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def OwnerUserId(self):
        """Table Owner ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._OwnerUserId

    @OwnerUserId.setter
    def OwnerUserId(self, OwnerUserId):
        self._OwnerUserId = OwnerUserId

    @property
    def OwnerUserName(self):
        """Table Owner Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerUserName

    @OwnerUserName.setter
    def OwnerUserName(self, OwnerUserName):
        self._OwnerUserName = OwnerUserName

    @property
    def DatabaseScore(self):
        """Database Score
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._DatabaseScore

    @DatabaseScore.setter
    def DatabaseScore(self, DatabaseScore):
        self._DatabaseScore = DatabaseScore

    @property
    def TableScore(self):
        """Table Score
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._TableScore

    @TableScore.setter
    def TableScore(self, TableScore):
        self._TableScore = TableScore

    @property
    def LastPeriodRatio(self):
        """Table Month-over-Month Growth
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LastPeriodRatio

    @LastPeriodRatio.setter
    def LastPeriodRatio(self, LastPeriodRatio):
        self._LastPeriodRatio = LastPeriodRatio

    @property
    def DsEnvType(self):
        """0 or not returned or null: Undefined, 1: Production, 2: Development
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DsEnvType

    @DsEnvType.setter
    def DsEnvType(self, DsEnvType):
        self._DsEnvType = DsEnvType


    def _deserialize(self, params):
        self._DatabaseId = params.get("DatabaseId")
        self._DatabaseName = params.get("DatabaseName")
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._OwnerUserId = params.get("OwnerUserId")
        self._OwnerUserName = params.get("OwnerUserName")
        self._DatabaseScore = params.get("DatabaseScore")
        self._TableScore = params.get("TableScore")
        self._LastPeriodRatio = params.get("LastPeriodRatio")
        self._DsEnvType = params.get("DsEnvType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableQualityDetailPage(AbstractModel):
    """Table Quality Scoring Pagination Results

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Table Quality List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of TableQualityDetail
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total number of items
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Table Quality List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TableQualityDetail
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = TableQualityDetail()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TableScoreStatisticsInfo(AbstractModel):
    """Table Scoring Statistics

    """

    def __init__(self):
        r"""
        :param _Level: Levels 1,2,3,4,5
Note: This field may return null, indicating that no valid value can be obtained.
        :type Level: int
        :param _Scale: PercentageNote: This field may return null, indicating that no valid value can be obtained.
        :type Scale: int
        :param _TableNumber: Table quantityNote: This field may return null, indicating that no valid value can be obtained.
        :type TableNumber: int
        """
        self._Level = None
        self._Scale = None
        self._TableNumber = None

    @property
    def Level(self):
        """Levels 1,2,3,4,5
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Scale(self):
        """PercentageNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Scale

    @Scale.setter
    def Scale(self, Scale):
        self._Scale = Scale

    @property
    def TableNumber(self):
        """Table quantityNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TableNumber

    @TableNumber.setter
    def TableNumber(self, TableNumber):
        self._TableNumber = TableNumber


    def _deserialize(self, params):
        self._Level = params.get("Level")
        self._Scale = params.get("Scale")
        self._TableNumber = params.get("TableNumber")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskAlarmInfo(AbstractModel):
    """Task Alert Information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _RegularName: Rule name
        :type RegularName: str
        :param _RegularStatus: Rule Status (0 for off, 1 for on)
        :type RegularStatus: int
        :param _AlarmLevel: Alert Level (0 for general, 1 for critical, 2 for urgent)
        :type AlarmLevel: int
        :param _AlarmWay: Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
        :type AlarmWay: str
        :param _TaskType: Task Type (201 for real-time, 202 for offline)
        :type TaskType: int
        :param _Id: ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type Id: str
        :param _RegularId: Rule ID
        :type RegularId: str
        :param _AlarmIndicator: Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause,4 Write Speed, 5 Read Speed, 6 Read Throughput, 7 Write Throughput, 8 Dirty Data Byte Count, 9 Number of Dirty Data Entries
        :type AlarmIndicator: int
        :param _TriggerType: Metric Threshold (1 for the first run failure of an offline task, 2 for all retries failed of an offline task)
Note: This field may return null, indicating that no valid value can be obtained.
        :type TriggerType: int
        :param _EstimatedTime: Estimated Timeout Duration (Minute Level)
Note: This field may return null, indicating that no valid value can be obtained.
        :type EstimatedTime: int
        :param _AlarmRecipientId: Alert Recipient ID, separated by commas
        :type AlarmRecipientId: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _Creater: CreatorNote: This field may return null, indicating that no valid value can be obtained.
        :type Creater: str
        :param _AlarmRecipientName: Alert Recipient Nickname, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmRecipientName: str
        :param _AlarmIndicatorDesc: Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicatorDesc: str
        :param _Operator: Parameters needed for real-time task alerts, 1 is greater than, 2 is less than
Note: This field may return null, indicating that no valid value can be obtained.
        :type Operator: int
        :param _NodeId: Node ID, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type NodeId: str
        :param _NodeName: Node name, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type NodeName: str
        :param _AlarmIndicatorInfos: Metric List
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmIndicatorInfos: list of AlarmIndicatorInfo
        :param _AlarmRecipientType: Alert Recipient Type, 0 is designated person; 1 is task responsible person
Note: This field may return null, indicating that no valid value can be obtained.
        :type AlarmRecipientType: int
        :param _QuietPeriods: Do not disturb time
Note: This field may return null, indicating that no valid value can be obtained.
        :type QuietPeriods: list of QuietPeriod
        :param _WeComHook: Enterprise WeChat Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type WeComHook: str
        :param _UpdateTime: Last Operation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _OperatorUin: Last Operator Uin
Note: This field may return null, indicating that no valid value can be obtained.
        :type OperatorUin: str
        :param _TaskCount: Associated Task Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskCount: int
        :param _MonitorType: Monitored Object Type, 1: all tasks, 2: specified tasks, 3: specified responsible person
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorType: int
        :param _MonitorObjectIds: Monitoring Object List
Note: This field may return null, indicating that no valid value can be obtained.
        :type MonitorObjectIds: list of str
        :param _LatestAlarmInstanceId: Instance ID of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
        :type LatestAlarmInstanceId: str
        :param _LatestAlarmTime: Time of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
        :type LatestAlarmTime: str
        :param _Description: Alert Rule Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type Description: str
        :param _LarkWebHooks: FeiShu Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type LarkWebHooks: str
        :param _DingDingWebHooks: DingTalk Group Hook addresses, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :type DingDingWebHooks: str
        """
        self._TaskId = None
        self._RegularName = None
        self._RegularStatus = None
        self._AlarmLevel = None
        self._AlarmWay = None
        self._TaskType = None
        self._Id = None
        self._RegularId = None
        self._AlarmIndicator = None
        self._TriggerType = None
        self._EstimatedTime = None
        self._AlarmRecipientId = None
        self._ProjectId = None
        self._Creater = None
        self._AlarmRecipientName = None
        self._AlarmIndicatorDesc = None
        self._Operator = None
        self._NodeId = None
        self._NodeName = None
        self._AlarmIndicatorInfos = None
        self._AlarmRecipientType = None
        self._QuietPeriods = None
        self._WeComHook = None
        self._UpdateTime = None
        self._OperatorUin = None
        self._TaskCount = None
        self._MonitorType = None
        self._MonitorObjectIds = None
        self._LatestAlarmInstanceId = None
        self._LatestAlarmTime = None
        self._Description = None
        self._LarkWebHooks = None
        self._DingDingWebHooks = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RegularName(self):
        """Rule name
        :rtype: str
        """
        return self._RegularName

    @RegularName.setter
    def RegularName(self, RegularName):
        self._RegularName = RegularName

    @property
    def RegularStatus(self):
        """Rule Status (0 for off, 1 for on)
        :rtype: int
        """
        return self._RegularStatus

    @RegularStatus.setter
    def RegularStatus(self, RegularStatus):
        self._RegularStatus = RegularStatus

    @property
    def AlarmLevel(self):
        """Alert Level (0 for general, 1 for critical, 2 for urgent)
        :rtype: int
        """
        return self._AlarmLevel

    @AlarmLevel.setter
    def AlarmLevel(self, AlarmLevel):
        self._AlarmLevel = AlarmLevel

    @property
    def AlarmWay(self):
        """Alert Method, separated by commas (1: email, 2: SMS, 3: WeChat, 4: voice call, 5: represents WeCom, 6: http)
        :rtype: str
        """
        return self._AlarmWay

    @AlarmWay.setter
    def AlarmWay(self, AlarmWay):
        self._AlarmWay = AlarmWay

    @property
    def TaskType(self):
        """Task Type (201 for real-time, 202 for offline)
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def Id(self):
        """ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RegularId(self):
        """Rule ID
        :rtype: str
        """
        return self._RegularId

    @RegularId.setter
    def RegularId(self, RegularId):
        self._RegularId = RegularId

    @property
    def AlarmIndicator(self):
        """Alert Metrics, 0 for task failure, 1 for task run timeout, 2 for task stop, 3 for task pause,4 Write Speed, 5 Read Speed, 6 Read Throughput, 7 Write Throughput, 8 Dirty Data Byte Count, 9 Number of Dirty Data Entries
        :rtype: int
        """
        return self._AlarmIndicator

    @AlarmIndicator.setter
    def AlarmIndicator(self, AlarmIndicator):
        self._AlarmIndicator = AlarmIndicator

    @property
    def TriggerType(self):
        """Metric Threshold (1 for the first run failure of an offline task, 2 for all retries failed of an offline task)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TriggerType

    @TriggerType.setter
    def TriggerType(self, TriggerType):
        self._TriggerType = TriggerType

    @property
    def EstimatedTime(self):
        """Estimated Timeout Duration (Minute Level)
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._EstimatedTime

    @EstimatedTime.setter
    def EstimatedTime(self, EstimatedTime):
        self._EstimatedTime = EstimatedTime

    @property
    def AlarmRecipientId(self):
        """Alert Recipient ID, separated by commas
        :rtype: str
        """
        return self._AlarmRecipientId

    @AlarmRecipientId.setter
    def AlarmRecipientId(self, AlarmRecipientId):
        self._AlarmRecipientId = AlarmRecipientId

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Creater(self):
        """CreatorNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Creater

    @Creater.setter
    def Creater(self, Creater):
        self._Creater = Creater

    @property
    def AlarmRecipientName(self):
        """Alert Recipient Nickname, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmRecipientName

    @AlarmRecipientName.setter
    def AlarmRecipientName(self, AlarmRecipientName):
        self._AlarmRecipientName = AlarmRecipientName

    @property
    def AlarmIndicatorDesc(self):
        """Alert Metric Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._AlarmIndicatorDesc

    @AlarmIndicatorDesc.setter
    def AlarmIndicatorDesc(self, AlarmIndicatorDesc):
        self._AlarmIndicatorDesc = AlarmIndicatorDesc

    @property
    def Operator(self):
        """Parameters needed for real-time task alerts, 1 is greater than, 2 is less than
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def NodeId(self):
        """Node ID, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeId

    @NodeId.setter
    def NodeId(self, NodeId):
        self._NodeId = NodeId

    @property
    def NodeName(self):
        """Node name, separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def AlarmIndicatorInfos(self):
        """Metric List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of AlarmIndicatorInfo
        """
        return self._AlarmIndicatorInfos

    @AlarmIndicatorInfos.setter
    def AlarmIndicatorInfos(self, AlarmIndicatorInfos):
        self._AlarmIndicatorInfos = AlarmIndicatorInfos

    @property
    def AlarmRecipientType(self):
        """Alert Recipient Type, 0 is designated person; 1 is task responsible person
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._AlarmRecipientType

    @AlarmRecipientType.setter
    def AlarmRecipientType(self, AlarmRecipientType):
        self._AlarmRecipientType = AlarmRecipientType

    @property
    def QuietPeriods(self):
        """Do not disturb time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of QuietPeriod
        """
        return self._QuietPeriods

    @QuietPeriods.setter
    def QuietPeriods(self, QuietPeriods):
        self._QuietPeriods = QuietPeriods

    @property
    def WeComHook(self):
        """Enterprise WeChat Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WeComHook

    @WeComHook.setter
    def WeComHook(self, WeComHook):
        self._WeComHook = WeComHook

    @property
    def UpdateTime(self):
        """Last Operation Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def OperatorUin(self):
        """Last Operator Uin
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OperatorUin

    @OperatorUin.setter
    def OperatorUin(self, OperatorUin):
        self._OperatorUin = OperatorUin

    @property
    def TaskCount(self):
        """Associated Task Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskCount

    @TaskCount.setter
    def TaskCount(self, TaskCount):
        self._TaskCount = TaskCount

    @property
    def MonitorType(self):
        """Monitored Object Type, 1: all tasks, 2: specified tasks, 3: specified responsible person
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._MonitorType

    @MonitorType.setter
    def MonitorType(self, MonitorType):
        self._MonitorType = MonitorType

    @property
    def MonitorObjectIds(self):
        """Monitoring Object List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._MonitorObjectIds

    @MonitorObjectIds.setter
    def MonitorObjectIds(self, MonitorObjectIds):
        self._MonitorObjectIds = MonitorObjectIds

    @property
    def LatestAlarmInstanceId(self):
        """Instance ID of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LatestAlarmInstanceId

    @LatestAlarmInstanceId.setter
    def LatestAlarmInstanceId(self, LatestAlarmInstanceId):
        self._LatestAlarmInstanceId = LatestAlarmInstanceId

    @property
    def LatestAlarmTime(self):
        """Time of the Last Alert
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LatestAlarmTime

    @LatestAlarmTime.setter
    def LatestAlarmTime(self, LatestAlarmTime):
        self._LatestAlarmTime = LatestAlarmTime

    @property
    def Description(self):
        """Alert Rule Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def LarkWebHooks(self):
        """FeiShu Group Hook Address, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LarkWebHooks

    @LarkWebHooks.setter
    def LarkWebHooks(self, LarkWebHooks):
        self._LarkWebHooks = LarkWebHooks

    @property
    def DingDingWebHooks(self):
        """DingTalk Group Hook addresses, multiple hook addresses separated by commas
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DingDingWebHooks

    @DingDingWebHooks.setter
    def DingDingWebHooks(self, DingDingWebHooks):
        self._DingDingWebHooks = DingDingWebHooks


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RegularName = params.get("RegularName")
        self._RegularStatus = params.get("RegularStatus")
        self._AlarmLevel = params.get("AlarmLevel")
        self._AlarmWay = params.get("AlarmWay")
        self._TaskType = params.get("TaskType")
        self._Id = params.get("Id")
        self._RegularId = params.get("RegularId")
        self._AlarmIndicator = params.get("AlarmIndicator")
        self._TriggerType = params.get("TriggerType")
        self._EstimatedTime = params.get("EstimatedTime")
        self._AlarmRecipientId = params.get("AlarmRecipientId")
        self._ProjectId = params.get("ProjectId")
        self._Creater = params.get("Creater")
        self._AlarmRecipientName = params.get("AlarmRecipientName")
        self._AlarmIndicatorDesc = params.get("AlarmIndicatorDesc")
        self._Operator = params.get("Operator")
        self._NodeId = params.get("NodeId")
        self._NodeName = params.get("NodeName")
        if params.get("AlarmIndicatorInfos") is not None:
            self._AlarmIndicatorInfos = []
            for item in params.get("AlarmIndicatorInfos"):
                obj = AlarmIndicatorInfo()
                obj._deserialize(item)
                self._AlarmIndicatorInfos.append(obj)
        self._AlarmRecipientType = params.get("AlarmRecipientType")
        if params.get("QuietPeriods") is not None:
            self._QuietPeriods = []
            for item in params.get("QuietPeriods"):
                obj = QuietPeriod()
                obj._deserialize(item)
                self._QuietPeriods.append(obj)
        self._WeComHook = params.get("WeComHook")
        self._UpdateTime = params.get("UpdateTime")
        self._OperatorUin = params.get("OperatorUin")
        self._TaskCount = params.get("TaskCount")
        self._MonitorType = params.get("MonitorType")
        self._MonitorObjectIds = params.get("MonitorObjectIds")
        self._LatestAlarmInstanceId = params.get("LatestAlarmInstanceId")
        self._LatestAlarmTime = params.get("LatestAlarmTime")
        self._Description = params.get("Description")
        self._LarkWebHooks = params.get("LarkWebHooks")
        self._DingDingWebHooks = params.get("DingDingWebHooks")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskByCycle(AbstractModel):
    """Cycle Unit Statistics

    """

    def __init__(self):
        r"""
        :param _Number: num
Note: This field may return null, indicating that no valid value can be obtained.
        :type Number: int
        :param _CycleUnit: Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _ProjectId: Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        """
        self._Number = None
        self._CycleUnit = None
        self._ProjectId = None

    @property
    def Number(self):
        """num
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Number

    @Number.setter
    def Number(self, Number):
        self._Number = Number

    @property
    def CycleUnit(self):
        """Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def ProjectId(self):
        """Project ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._Number = params.get("Number")
        self._CycleUnit = params.get("CycleUnit")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskByStatus(AbstractModel):
    """Status Trend Statistics

    """

    def __init__(self):
        r"""
        :param _CountGroup: Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type CountGroup: str
        :param _ShowTimeGroup: DateNote: This field may return null, indicating that no valid value can be obtained.
        :type ShowTimeGroup: str
        :param _Status: StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _CycleUnit: Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _ReportTime: 1
        :type ReportTime: str
        :param _Count: 1
        :type Count: int
        """
        self._CountGroup = None
        self._ShowTimeGroup = None
        self._Status = None
        self._CycleUnit = None
        self._ReportTime = None
        self._Count = None

    @property
    def CountGroup(self):
        """Statistical Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CountGroup

    @CountGroup.setter
    def CountGroup(self, CountGroup):
        self._CountGroup = CountGroup

    @property
    def ShowTimeGroup(self):
        """DateNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ShowTimeGroup

    @ShowTimeGroup.setter
    def ShowTimeGroup(self, ShowTimeGroup):
        self._ShowTimeGroup = ShowTimeGroup

    @property
    def Status(self):
        """StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CycleUnit(self):
        """Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def ReportTime(self):
        """1
        :rtype: str
        """
        return self._ReportTime

    @ReportTime.setter
    def ReportTime(self, ReportTime):
        self._ReportTime = ReportTime

    @property
    def Count(self):
        """1
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._CountGroup = params.get("CountGroup")
        self._ShowTimeGroup = params.get("ShowTimeGroup")
        self._Status = params.get("Status")
        self._CycleUnit = params.get("CycleUnit")
        self._ReportTime = params.get("ReportTime")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskExtInfo(AbstractModel):
    """Task Extension Information

    """

    def __init__(self):
        r"""
        :param _Key: Key
        :type Key: str
        :param _Value: Value
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Key
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskInfoVo(AbstractModel):
    """Task information.

    """

    def __init__(self):
        r"""
        :param _AppID: Tenant id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type AppID: str
        :param _ProjectId: Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
        :type ProjectId: str
        :param _TaskId: Task ID

Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _TaskName: Task name.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskName: str
        :param _TaskTypeId: Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskTypeId: int
        :param _OnwerUid: Main account id.
Note: This field may return null, indicating that no valid values can be obtained.
        :type OnwerUid: str
        :param _InChargeId: Person in charge.
Note: This field may return null, indicating that no valid values can be obtained.
        :type InChargeId: str
        :param _InstanceId: Instance ID

Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        :param _JobId: jobId
Note: This field may return null, indicating that no valid values can be obtained.
        :type JobId: str
        :param _EngineType: Engine type, DLC, EMR.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineType: str
        :param _EngineName: Engine name

Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineName: str
        :param _EngineSubType: Engine sub-type.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineSubType: str
        :param _EngineTaskId: Engine taskId.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineTaskId: str
        :param _EngineExeStatus: Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeStatus: str
        :param _EngineExeUser: Engine execution user.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeUser: str
        :param _EngineExeStartTime: Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeStartTime: str
        :param _EngineExeEndTime: Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EngineExeEndTime: str
        :param _ProductSource: DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProductSource: str
        """
        self._AppID = None
        self._ProjectId = None
        self._TaskId = None
        self._TaskName = None
        self._TaskTypeId = None
        self._OnwerUid = None
        self._InChargeId = None
        self._InstanceId = None
        self._JobId = None
        self._EngineType = None
        self._EngineName = None
        self._EngineSubType = None
        self._EngineTaskId = None
        self._EngineExeStatus = None
        self._EngineExeUser = None
        self._EngineExeStartTime = None
        self._EngineExeEndTime = None
        self._ProductSource = None

    @property
    def AppID(self):
        """Tenant id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AppID

    @AppID.setter
    def AppID(self, AppID):
        self._AppID = AppID

    @property
    def ProjectId(self):
        """Project ID.

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task name.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskTypeId(self):
        """Task type id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def OnwerUid(self):
        """Main account id.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OnwerUid

    @OnwerUid.setter
    def OnwerUid(self, OnwerUid):
        self._OnwerUid = OnwerUid

    @property
    def InChargeId(self):
        """Person in charge.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InChargeId

    @InChargeId.setter
    def InChargeId(self, InChargeId):
        self._InChargeId = InChargeId

    @property
    def InstanceId(self):
        """Instance ID

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def JobId(self):
        """jobId
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def EngineType(self):
        """Engine type, DLC, EMR.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def EngineName(self):
        """Engine name

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineName

    @EngineName.setter
    def EngineName(self, EngineName):
        self._EngineName = EngineName

    @property
    def EngineSubType(self):
        """Engine sub-type.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineSubType

    @EngineSubType.setter
    def EngineSubType(self, EngineSubType):
        self._EngineSubType = EngineSubType

    @property
    def EngineTaskId(self):
        """Engine taskId.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineTaskId

    @EngineTaskId.setter
    def EngineTaskId(self, EngineTaskId):
        self._EngineTaskId = EngineTaskId

    @property
    def EngineExeStatus(self):
        """Engine execution status, enumerate.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeStatus

    @EngineExeStatus.setter
    def EngineExeStatus(self, EngineExeStatus):
        self._EngineExeStatus = EngineExeStatus

    @property
    def EngineExeUser(self):
        """Engine execution user.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeUser

    @EngineExeUser.setter
    def EngineExeUser(self, EngineExeUser):
        self._EngineExeUser = EngineExeUser

    @property
    def EngineExeStartTime(self):
        """Engine execution start time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeStartTime

    @EngineExeStartTime.setter
    def EngineExeStartTime(self, EngineExeStartTime):
        self._EngineExeStartTime = EngineExeStartTime

    @property
    def EngineExeEndTime(self):
        """Engine execution end time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EngineExeEndTime

    @EngineExeEndTime.setter
    def EngineExeEndTime(self, EngineExeEndTime):
        self._EngineExeEndTime = EngineExeEndTime

    @property
    def ProductSource(self):
        """DATA source, such as DATA_INTEGRATION, DATA_EXPLORATION, DATA_QUALITY, OM_CENTER.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProductSource

    @ProductSource.setter
    def ProductSource(self, ProductSource):
        self._ProductSource = ProductSource


    def _deserialize(self, params):
        self._AppID = params.get("AppID")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._TaskTypeId = params.get("TaskTypeId")
        self._OnwerUid = params.get("OnwerUid")
        self._InChargeId = params.get("InChargeId")
        self._InstanceId = params.get("InstanceId")
        self._JobId = params.get("JobId")
        self._EngineType = params.get("EngineType")
        self._EngineName = params.get("EngineName")
        self._EngineSubType = params.get("EngineSubType")
        self._EngineTaskId = params.get("EngineTaskId")
        self._EngineExeStatus = params.get("EngineExeStatus")
        self._EngineExeUser = params.get("EngineExeUser")
        self._EngineExeStartTime = params.get("EngineExeStartTime")
        self._EngineExeEndTime = params.get("EngineExeEndTime")
        self._ProductSource = params.get("ProductSource")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskInnerInfo(AbstractModel):
    """Task Attributes

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _TaskName: Task Name
        :type TaskName: str
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _CycleType: Cycle Type 0: Crontab Type, 1: minutes, 2: Hour, 3: Days, 4: Weekly, 5: Month, 6: One-time, 7: User-driven, 10: Elastic Cycle (Week), 11: Elastic Cycle (Month), 12: Year, 13: Instant Trigger (Instant Type), isolated from normal cyclic scheduling tasks
        :type CycleType: int
        :param _VirtualTaskId: Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualTaskId: str
        :param _VirtualFlag: Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualFlag: bool
        :param _RealWorkflowId: Real Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type RealWorkflowId: str
        """
        self._TaskId = None
        self._TaskName = None
        self._WorkflowId = None
        self._CycleType = None
        self._VirtualTaskId = None
        self._VirtualFlag = None
        self._RealWorkflowId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """Task Name
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def CycleType(self):
        """Cycle Type 0: Crontab Type, 1: minutes, 2: Hour, 3: Days, 4: Weekly, 5: Month, 6: One-time, 7: User-driven, 10: Elastic Cycle (Week), 11: Elastic Cycle (Month), 12: Year, 13: Instant Trigger (Instant Type), isolated from normal cyclic scheduling tasks
        :rtype: int
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def VirtualTaskId(self):
        """Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._VirtualTaskId

    @VirtualTaskId.setter
    def VirtualTaskId(self, VirtualTaskId):
        self._VirtualTaskId = VirtualTaskId

    @property
    def VirtualFlag(self):
        """Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag

    @property
    def RealWorkflowId(self):
        """Real Task Workflow ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RealWorkflowId

    @RealWorkflowId.setter
    def RealWorkflowId(self, RealWorkflowId):
        self._RealWorkflowId = RealWorkflowId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._WorkflowId = params.get("WorkflowId")
        self._CycleType = params.get("CycleType")
        self._VirtualTaskId = params.get("VirtualTaskId")
        self._VirtualFlag = params.get("VirtualFlag")
        self._RealWorkflowId = params.get("RealWorkflowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskInstanceCountDto(AbstractModel):
    """Task Instance Status Statistics

    """

    def __init__(self):
        r"""
        :param _Success: Number of Successful Instances
        :type Success: int
        :param _Running: Number of Instances in Execution
        :type Running: int
        :param _Waiting: Number of Instances Waiting
        :type Waiting: int
        :param _Depend: Number of Instances Waiting for Upstream
        :type Depend: int
        :param _Failed: Failed Instance Count
        :type Failed: int
        :param _Stopped: Permanently Terminated Instance Count
        :type Stopped: int
        """
        self._Success = None
        self._Running = None
        self._Waiting = None
        self._Depend = None
        self._Failed = None
        self._Stopped = None

    @property
    def Success(self):
        """Number of Successful Instances
        :rtype: int
        """
        return self._Success

    @Success.setter
    def Success(self, Success):
        self._Success = Success

    @property
    def Running(self):
        """Number of Instances in Execution
        :rtype: int
        """
        return self._Running

    @Running.setter
    def Running(self, Running):
        self._Running = Running

    @property
    def Waiting(self):
        """Number of Instances Waiting
        :rtype: int
        """
        return self._Waiting

    @Waiting.setter
    def Waiting(self, Waiting):
        self._Waiting = Waiting

    @property
    def Depend(self):
        """Number of Instances Waiting for Upstream
        :rtype: int
        """
        return self._Depend

    @Depend.setter
    def Depend(self, Depend):
        self._Depend = Depend

    @property
    def Failed(self):
        """Failed Instance Count
        :rtype: int
        """
        return self._Failed

    @Failed.setter
    def Failed(self, Failed):
        self._Failed = Failed

    @property
    def Stopped(self):
        """Permanently Terminated Instance Count
        :rtype: int
        """
        return self._Stopped

    @Stopped.setter
    def Stopped(self, Stopped):
        self._Stopped = Stopped


    def _deserialize(self, params):
        self._Success = params.get("Success")
        self._Running = params.get("Running")
        self._Waiting = params.get("Waiting")
        self._Depend = params.get("Depend")
        self._Failed = params.get("Failed")
        self._Stopped = params.get("Stopped")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskLockStatus(AbstractModel):
    """Task Lock Status

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _Locker: Lock Holder
        :type Locker: str
        :param _IsLocker: Is the current operating user the lock holder? 1 means yes, 0 means no
        :type IsLocker: int
        :param _IsRob: Is lock contention possible? 1 means yes, 0 means no
        :type IsRob: int
        """
        self._TaskId = None
        self._Locker = None
        self._IsLocker = None
        self._IsRob = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Locker(self):
        """Lock Holder
        :rtype: str
        """
        return self._Locker

    @Locker.setter
    def Locker(self, Locker):
        self._Locker = Locker

    @property
    def IsLocker(self):
        """Is the current operating user the lock holder? 1 means yes, 0 means no
        :rtype: int
        """
        return self._IsLocker

    @IsLocker.setter
    def IsLocker(self, IsLocker):
        self._IsLocker = IsLocker

    @property
    def IsRob(self):
        """Is lock contention possible? 1 means yes, 0 means no
        :rtype: int
        """
        return self._IsRob

    @IsRob.setter
    def IsRob(self, IsRob):
        self._IsRob = IsRob


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Locker = params.get("Locker")
        self._IsLocker = params.get("IsLocker")
        self._IsRob = params.get("IsRob")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskLogRequest(AbstractModel):
    """TaskLog request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _StartTime: Start timestamp, unit: milliseconds
        :type StartTime: int
        :param _EndTime: End timestamp, unit: milliseconds
        :type EndTime: int
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Limit: Number of log pulls, default 100
        :type Limit: int
        :param _OrderType: Log sorting, desc for descending, asc for ascending
        :type OrderType: str
        :param _TaskType: Real-time task 201 Offline task 202 Default is real-time task
        :type TaskType: int
        """
        self._TaskId = None
        self._StartTime = None
        self._EndTime = None
        self._ProjectId = None
        self._Limit = None
        self._OrderType = None
        self._TaskType = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def StartTime(self):
        """Start timestamp, unit: milliseconds
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timestamp, unit: milliseconds
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Limit(self):
        """Number of log pulls, default 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderType(self):
        """Log sorting, desc for descending, asc for ascending
        :rtype: str
        """
        return self._OrderType

    @OrderType.setter
    def OrderType(self, OrderType):
        self._OrderType = OrderType

    @property
    def TaskType(self):
        """Real-time task 201 Offline task 202 Default is real-time task
        :rtype: int
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ProjectId = params.get("ProjectId")
        self._Limit = params.get("Limit")
        self._OrderType = params.get("OrderType")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskLogResponse(AbstractModel):
    """TaskLog response structure.

    """

    def __init__(self):
        r"""
        :param _LogContentList: Detailed task logs
        :type LogContentList: list of LogContent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LogContentList = None
        self._RequestId = None

    @property
    def LogContentList(self):
        """Detailed task logs
        :rtype: list of LogContent
        """
        return self._LogContentList

    @LogContentList.setter
    def LogContentList(self, LogContentList):
        self._LogContentList = LogContentList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LogContentList") is not None:
            self._LogContentList = []
            for item in params.get("LogContentList"):
                obj = LogContent()
                obj._deserialize(item)
                self._LogContentList.append(obj)
        self._RequestId = params.get("RequestId")


class TaskOpsDto(AbstractModel):
    """Task Operation Details

    """

    def __init__(self):
        r"""
        :param _TaskId: Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskId: str
        :param _VirtualTaskId: Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualTaskId: str
        :param _VirtualFlag: Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualFlag: bool
        :param _TaskName: Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskName: str
        :param _WorkflowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _RealWorkflowId: Actual Workflow ID when the task is a virtual task
Note: This field may return null, indicating that no valid value can be obtained.
        :type RealWorkflowId: str
        :param _WorkflowName: Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowName: str
        :param _FolderId: Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _FolderName: Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderName: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _LastUpdate: Latest Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastUpdate: str
        :param _Status: Task StatusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _InCharge: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type InCharge: str
        :param _InChargeId: Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type InChargeId: str
        :param _StartTime: Scheduling Effective Date
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: Scheduling End Date
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _ExecutionStartTime: Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionStartTime: str
        :param _ExecutionEndTime: Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionEndTime: str
        :param _CycleType: Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _CycleStep: Step Length
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleStep: int
        :param _CrontabExpression: Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type CrontabExpression: str
        :param _DelayTime: Delayed Execution Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type DelayTime: int
        :param _StartupTime: Start Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartupTime: int
        :param _RetryWait: Retry Wait Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :type RetryWait: int
        :param _RetryAble: Whether to Retry, 1 represents retryable
Note: This field may return null, indicating that no valid value can be obtained.
        :type RetryAble: int
        :param _TaskAction: Scheduling Configuration - Elastic Cycle Configuration, available for Hour/Weekly/Month/Year schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _TryLimit: Limit on Number of Runs
Note: This field may return null, indicating that no valid value can be obtained.
        :type TryLimit: int
        :param _RunPriority: Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
        :type RunPriority: int
        :param _TaskType: Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskType: :class:`tencentcloud.wedata.v20210820.models.TaskTypeOpsDto`
        :param _BrokerIp: Specified Running Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :type BrokerIp: str
        :param _ClusterId: Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type ClusterId: str
        :param _MinDateTime: Minimum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type MinDateTime: str
        :param _MaxDateTime: Maximum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type MaxDateTime: str
        :param _ExecutionTTL: Runtime Timeout
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionTTL: int
        :param _SelfDepend: Self-Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SelfDepend: str
        :param _LeftCoordinate: Left Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
        :type LeftCoordinate: float
        :param _TopCoordinate: Top Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
        :type TopCoordinate: float
        :param _Notes: Task Remark
Note: This field may return null, indicating that no valid value can be obtained.
        :type Notes: str
        :param _InstanceInitStrategy: Task Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceInitStrategy: str
        :param _YarnQueue: Compute Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :type YarnQueue: str
        :param _LastSchedulerCommitTime: Latest Schedule Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type LastSchedulerCommitTime: str
        :param _NormalizedJobStartTime: Task Start Time Calculated by cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type NormalizedJobStartTime: str
        :param _SchedulerDesc: Scheduling Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerDesc: str
        :param _ResourceGroup: Compute Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceGroup: str
        :param _Creator: Task Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :type Creator: str
        :param _DependencyRel: Task Dependency Type: and, or
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependencyRel: str
        :param _DependencyWorkflow: Task Workflow Dependency: yes, no
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependencyWorkflow: str
        :param _EventListenerConfig: Event Listening Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventListenerConfig: str
        :param _EventPublisherConfig: Event-driven Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :type EventPublisherConfig: str
        :param _VirtualTaskStatus: Virtual Task Status
Note: This field may return null, indicating that no valid value can be obtained.
        :type VirtualTaskStatus: str
        :param _TaskLinkInfo: Task Dependency Edge Details
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskLinkInfo: :class:`tencentcloud.wedata.v20210820.models.LinkOpsDto`
        :param _ProductName: Task Product TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type ProductName: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectIdent: Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectIdent: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _OwnId: Main Account userId
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnId: str
        :param _UserId: User userId
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserId: str
        :param _TenantId: Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TenantId: str
        :param _UpdateUser: Updater's Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateUser: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _UpdateUserId: Updater's userId
Note: This field may return null, indicating that no valid value can be obtained.
        :type UpdateUserId: str
        :param _TaskTypeId: Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeId: int
        :param _TaskTypeDesc: Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskTypeDesc: str
        :param _ShowWorkflow: Whether to Display Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :type ShowWorkflow: bool
        :param _FirstSubmitTime: First Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstSubmitTime: str
        :param _FirstRunTime: First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstRunTime: str
        :param _ScheduleDesc: Scheduling Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScheduleDesc: str
        :param _CycleNum: CycleNote: This field may return null, indicating that no valid value can be obtained.
        :type CycleNum: int
        :param _Crontab: ExpressionsNote: This field may return null, indicating that no valid value can be obtained.
        :type Crontab: str
        :param _StartDate: Start Date
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartDate: str
        :param _EndDate: End Date
Note: This field may return null, indicating that no valid value can be obtained.
        :type EndDate: str
        :param _CycleUnit: Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleUnit: str
        :param _InitStrategy: Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :type InitStrategy: str
        :param _Layer: Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
        :type Layer: str
        :param _SourceServiceId: Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceServiceId: str
        :param _SourceServiceType: Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SourceServiceType: str
        :param _TargetServiceId: Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetServiceId: str
        :param _TargetServiceType: Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type TargetServiceType: str
        :param _TasksStr: Subtask List
Note: This field may return null, indicating that no valid value can be obtained.
        :type TasksStr: str
        :param _Submit: Whether the Task Version Has Been Submitted
Note: This field may return null, indicating that no valid value can be obtained.
        :type Submit: bool
        :param _ExecutorGroupId: Resource Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupId: str
        :param _ExecutorGroupName: Resource Group NameNote: This field may return null, indicating that no valid value can be obtained.
        :type ExecutorGroupName: str
        """
        self._TaskId = None
        self._VirtualTaskId = None
        self._VirtualFlag = None
        self._TaskName = None
        self._WorkflowId = None
        self._RealWorkflowId = None
        self._WorkflowName = None
        self._FolderId = None
        self._FolderName = None
        self._CreateTime = None
        self._LastUpdate = None
        self._Status = None
        self._InCharge = None
        self._InChargeId = None
        self._StartTime = None
        self._EndTime = None
        self._ExecutionStartTime = None
        self._ExecutionEndTime = None
        self._CycleType = None
        self._CycleStep = None
        self._CrontabExpression = None
        self._DelayTime = None
        self._StartupTime = None
        self._RetryWait = None
        self._RetryAble = None
        self._TaskAction = None
        self._TryLimit = None
        self._RunPriority = None
        self._TaskType = None
        self._BrokerIp = None
        self._ClusterId = None
        self._MinDateTime = None
        self._MaxDateTime = None
        self._ExecutionTTL = None
        self._SelfDepend = None
        self._LeftCoordinate = None
        self._TopCoordinate = None
        self._Notes = None
        self._InstanceInitStrategy = None
        self._YarnQueue = None
        self._LastSchedulerCommitTime = None
        self._NormalizedJobStartTime = None
        self._SchedulerDesc = None
        self._ResourceGroup = None
        self._Creator = None
        self._DependencyRel = None
        self._DependencyWorkflow = None
        self._EventListenerConfig = None
        self._EventPublisherConfig = None
        self._VirtualTaskStatus = None
        self._TaskLinkInfo = None
        self._ProductName = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._OwnId = None
        self._UserId = None
        self._TenantId = None
        self._UpdateUser = None
        self._UpdateTime = None
        self._UpdateUserId = None
        self._TaskTypeId = None
        self._TaskTypeDesc = None
        self._ShowWorkflow = None
        self._FirstSubmitTime = None
        self._FirstRunTime = None
        self._ScheduleDesc = None
        self._CycleNum = None
        self._Crontab = None
        self._StartDate = None
        self._EndDate = None
        self._CycleUnit = None
        self._InitStrategy = None
        self._Layer = None
        self._SourceServiceId = None
        self._SourceServiceType = None
        self._TargetServiceId = None
        self._TargetServiceType = None
        self._TasksStr = None
        self._Submit = None
        self._ExecutorGroupId = None
        self._ExecutorGroupName = None

    @property
    def TaskId(self):
        """Task IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VirtualTaskId(self):
        """Virtual Task ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._VirtualTaskId

    @VirtualTaskId.setter
    def VirtualTaskId(self, VirtualTaskId):
        self._VirtualTaskId = VirtualTaskId

    @property
    def VirtualFlag(self):
        """Virtual Task Marker
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._VirtualFlag

    @VirtualFlag.setter
    def VirtualFlag(self, VirtualFlag):
        self._VirtualFlag = VirtualFlag

    @property
    def TaskName(self):
        """Task NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def WorkflowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def RealWorkflowId(self):
        """Actual Workflow ID when the task is a virtual task
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RealWorkflowId

    @RealWorkflowId.setter
    def RealWorkflowId(self, RealWorkflowId):
        self._RealWorkflowId = RealWorkflowId

    @property
    def WorkflowName(self):
        """Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def FolderId(self):
        """Folder ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def FolderName(self):
        """Folder Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def LastUpdate(self):
        """Latest Update Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastUpdate

    @LastUpdate.setter
    def LastUpdate(self, LastUpdate):
        self._LastUpdate = LastUpdate

    @property
    def Status(self):
        """Task StatusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def InCharge(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InCharge

    @InCharge.setter
    def InCharge(self, InCharge):
        self._InCharge = InCharge

    @property
    def InChargeId(self):
        """Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InChargeId

    @InChargeId.setter
    def InChargeId(self, InChargeId):
        self._InChargeId = InChargeId

    @property
    def StartTime(self):
        """Scheduling Effective Date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Scheduling End Date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ExecutionStartTime(self):
        """Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def ExecutionEndTime(self):
        """Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def CycleType(self):
        """Cycle Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Step Length
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def CrontabExpression(self):
        """Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CrontabExpression

    @CrontabExpression.setter
    def CrontabExpression(self, CrontabExpression):
        self._CrontabExpression = CrontabExpression

    @property
    def DelayTime(self):
        """Delayed Execution Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def StartupTime(self):
        """Start Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StartupTime

    @StartupTime.setter
    def StartupTime(self, StartupTime):
        self._StartupTime = StartupTime

    @property
    def RetryWait(self):
        """Retry Wait Time, unit=minutes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RetryWait

    @RetryWait.setter
    def RetryWait(self, RetryWait):
        self._RetryWait = RetryWait

    @property
    def RetryAble(self):
        """Whether to Retry, 1 represents retryable
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RetryAble

    @RetryAble.setter
    def RetryAble(self, RetryAble):
        self._RetryAble = RetryAble

    @property
    def TaskAction(self):
        """Scheduling Configuration - Elastic Cycle Configuration, available for Hour/Weekly/Month/Year schedules. For hourly tasks scheduled at 0, 3, 4 o'clock, it would be '0,3,4'
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def TryLimit(self):
        """Limit on Number of Runs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TryLimit

    @TryLimit.setter
    def TryLimit(self, TryLimit):
        self._TryLimit = TryLimit

    @property
    def RunPriority(self):
        """Running Priority
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._RunPriority

    @RunPriority.setter
    def RunPriority(self, RunPriority):
        self._RunPriority = RunPriority

    @property
    def TaskType(self):
        """Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.TaskTypeOpsDto`
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def BrokerIp(self):
        """Specified Running Nodes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._BrokerIp

    @BrokerIp.setter
    def BrokerIp(self, BrokerIp):
        self._BrokerIp = BrokerIp

    @property
    def ClusterId(self):
        """Cluster Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def MinDateTime(self):
        """Minimum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MinDateTime

    @MinDateTime.setter
    def MinDateTime(self, MinDateTime):
        self._MinDateTime = MinDateTime

    @property
    def MaxDateTime(self):
        """Maximum Data Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._MaxDateTime

    @MaxDateTime.setter
    def MaxDateTime(self, MaxDateTime):
        self._MaxDateTime = MaxDateTime

    @property
    def ExecutionTTL(self):
        """Runtime Timeout
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ExecutionTTL

    @ExecutionTTL.setter
    def ExecutionTTL(self, ExecutionTTL):
        self._ExecutionTTL = ExecutionTTL

    @property
    def SelfDepend(self):
        """Self-Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SelfDepend

    @SelfDepend.setter
    def SelfDepend(self, SelfDepend):
        self._SelfDepend = SelfDepend

    @property
    def LeftCoordinate(self):
        """Left Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._LeftCoordinate

    @LeftCoordinate.setter
    def LeftCoordinate(self, LeftCoordinate):
        self._LeftCoordinate = LeftCoordinate

    @property
    def TopCoordinate(self):
        """Top Coordinate
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: float
        """
        return self._TopCoordinate

    @TopCoordinate.setter
    def TopCoordinate(self, TopCoordinate):
        self._TopCoordinate = TopCoordinate

    @property
    def Notes(self):
        """Task Remark
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Notes

    @Notes.setter
    def Notes(self, Notes):
        self._Notes = Notes

    @property
    def InstanceInitStrategy(self):
        """Task Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceInitStrategy

    @InstanceInitStrategy.setter
    def InstanceInitStrategy(self, InstanceInitStrategy):
        self._InstanceInitStrategy = InstanceInitStrategy

    @property
    def YarnQueue(self):
        """Compute Queue
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._YarnQueue

    @YarnQueue.setter
    def YarnQueue(self, YarnQueue):
        self._YarnQueue = YarnQueue

    @property
    def LastSchedulerCommitTime(self):
        """Latest Schedule Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LastSchedulerCommitTime

    @LastSchedulerCommitTime.setter
    def LastSchedulerCommitTime(self, LastSchedulerCommitTime):
        self._LastSchedulerCommitTime = LastSchedulerCommitTime

    @property
    def NormalizedJobStartTime(self):
        """Task Start Time Calculated by cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._NormalizedJobStartTime

    @NormalizedJobStartTime.setter
    def NormalizedJobStartTime(self, NormalizedJobStartTime):
        self._NormalizedJobStartTime = NormalizedJobStartTime

    @property
    def SchedulerDesc(self):
        """Scheduling Plan Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerDesc

    @SchedulerDesc.setter
    def SchedulerDesc(self, SchedulerDesc):
        self._SchedulerDesc = SchedulerDesc

    @property
    def ResourceGroup(self):
        """Compute Resource Group
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceGroup

    @ResourceGroup.setter
    def ResourceGroup(self, ResourceGroup):
        self._ResourceGroup = ResourceGroup

    @property
    def Creator(self):
        """Task Creator
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def DependencyRel(self):
        """Task Dependency Type: and, or
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DependencyRel

    @DependencyRel.setter
    def DependencyRel(self, DependencyRel):
        self._DependencyRel = DependencyRel

    @property
    def DependencyWorkflow(self):
        """Task Workflow Dependency: yes, no
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DependencyWorkflow

    @DependencyWorkflow.setter
    def DependencyWorkflow(self, DependencyWorkflow):
        self._DependencyWorkflow = DependencyWorkflow

    @property
    def EventListenerConfig(self):
        """Event Listening Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventListenerConfig

    @EventListenerConfig.setter
    def EventListenerConfig(self, EventListenerConfig):
        self._EventListenerConfig = EventListenerConfig

    @property
    def EventPublisherConfig(self):
        """Event-driven Configuration
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EventPublisherConfig

    @EventPublisherConfig.setter
    def EventPublisherConfig(self, EventPublisherConfig):
        self._EventPublisherConfig = EventPublisherConfig

    @property
    def VirtualTaskStatus(self):
        """Virtual Task Status
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._VirtualTaskStatus

    @VirtualTaskStatus.setter
    def VirtualTaskStatus(self, VirtualTaskStatus):
        self._VirtualTaskStatus = VirtualTaskStatus

    @property
    def TaskLinkInfo(self):
        """Task Dependency Edge Details
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.LinkOpsDto`
        """
        return self._TaskLinkInfo

    @TaskLinkInfo.setter
    def TaskLinkInfo(self, TaskLinkInfo):
        self._TaskLinkInfo = TaskLinkInfo

    @property
    def ProductName(self):
        """Task Product TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProductName

    @ProductName.setter
    def ProductName(self, ProductName):
        self._ProductName = ProductName

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def OwnId(self):
        """Main Account userId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnId

    @OwnId.setter
    def OwnId(self, OwnId):
        self._OwnId = OwnId

    @property
    def UserId(self):
        """User userId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserId

    @UserId.setter
    def UserId(self, UserId):
        self._UserId = UserId

    @property
    def TenantId(self):
        """Tenant ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TenantId

    @TenantId.setter
    def TenantId(self, TenantId):
        self._TenantId = TenantId

    @property
    def UpdateUser(self):
        """Updater's Nickname
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateUser

    @UpdateUser.setter
    def UpdateUser(self, UpdateUser):
        self._UpdateUser = UpdateUser

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def UpdateUserId(self):
        """Updater's userId
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateUserId

    @UpdateUserId.setter
    def UpdateUserId(self, UpdateUserId):
        self._UpdateUserId = UpdateUserId

    @property
    def TaskTypeId(self):
        """Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskTypeId

    @TaskTypeId.setter
    def TaskTypeId(self, TaskTypeId):
        self._TaskTypeId = TaskTypeId

    @property
    def TaskTypeDesc(self):
        """Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskTypeDesc

    @TaskTypeDesc.setter
    def TaskTypeDesc(self, TaskTypeDesc):
        self._TaskTypeDesc = TaskTypeDesc

    @property
    def ShowWorkflow(self):
        """Whether to Display Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._ShowWorkflow

    @ShowWorkflow.setter
    def ShowWorkflow(self, ShowWorkflow):
        self._ShowWorkflow = ShowWorkflow

    @property
    def FirstSubmitTime(self):
        """First Submission Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstSubmitTime

    @FirstSubmitTime.setter
    def FirstSubmitTime(self, FirstSubmitTime):
        self._FirstSubmitTime = FirstSubmitTime

    @property
    def FirstRunTime(self):
        """First Execution Time
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstRunTime

    @FirstRunTime.setter
    def FirstRunTime(self, FirstRunTime):
        self._FirstRunTime = FirstRunTime

    @property
    def ScheduleDesc(self):
        """Scheduling Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScheduleDesc

    @ScheduleDesc.setter
    def ScheduleDesc(self, ScheduleDesc):
        self._ScheduleDesc = ScheduleDesc

    @property
    def CycleNum(self):
        """CycleNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleNum

    @CycleNum.setter
    def CycleNum(self, CycleNum):
        self._CycleNum = CycleNum

    @property
    def Crontab(self):
        """ExpressionsNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Crontab

    @Crontab.setter
    def Crontab(self, Crontab):
        self._Crontab = Crontab

    @property
    def StartDate(self):
        """Start Date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartDate

    @StartDate.setter
    def StartDate(self, StartDate):
        self._StartDate = StartDate

    @property
    def EndDate(self):
        """End Date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate

    @property
    def CycleUnit(self):
        """Cycle Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleUnit

    @CycleUnit.setter
    def CycleUnit(self, CycleUnit):
        self._CycleUnit = CycleUnit

    @property
    def InitStrategy(self):
        """Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InitStrategy

    @InitStrategy.setter
    def InitStrategy(self, InitStrategy):
        self._InitStrategy = InitStrategy

    @property
    def Layer(self):
        """Hierarchy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Layer

    @Layer.setter
    def Layer(self, Layer):
        self._Layer = Layer

    @property
    def SourceServiceId(self):
        """Source Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceServiceId

    @SourceServiceId.setter
    def SourceServiceId(self, SourceServiceId):
        self._SourceServiceId = SourceServiceId

    @property
    def SourceServiceType(self):
        """Source Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SourceServiceType

    @SourceServiceType.setter
    def SourceServiceType(self, SourceServiceType):
        self._SourceServiceType = SourceServiceType

    @property
    def TargetServiceId(self):
        """Target Data Source ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetServiceId

    @TargetServiceId.setter
    def TargetServiceId(self, TargetServiceId):
        self._TargetServiceId = TargetServiceId

    @property
    def TargetServiceType(self):
        """Target Data Source Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TargetServiceType

    @TargetServiceType.setter
    def TargetServiceType(self, TargetServiceType):
        self._TargetServiceType = TargetServiceType

    @property
    def TasksStr(self):
        """Subtask List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TasksStr

    @TasksStr.setter
    def TasksStr(self, TasksStr):
        self._TasksStr = TasksStr

    @property
    def Submit(self):
        """Whether the Task Version Has Been Submitted
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: bool
        """
        return self._Submit

    @Submit.setter
    def Submit(self, Submit):
        self._Submit = Submit

    @property
    def ExecutorGroupId(self):
        """Resource Group IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupId

    @ExecutorGroupId.setter
    def ExecutorGroupId(self, ExecutorGroupId):
        self._ExecutorGroupId = ExecutorGroupId

    @property
    def ExecutorGroupName(self):
        """Resource Group NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutorGroupName

    @ExecutorGroupName.setter
    def ExecutorGroupName(self, ExecutorGroupName):
        self._ExecutorGroupName = ExecutorGroupName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._VirtualTaskId = params.get("VirtualTaskId")
        self._VirtualFlag = params.get("VirtualFlag")
        self._TaskName = params.get("TaskName")
        self._WorkflowId = params.get("WorkflowId")
        self._RealWorkflowId = params.get("RealWorkflowId")
        self._WorkflowName = params.get("WorkflowName")
        self._FolderId = params.get("FolderId")
        self._FolderName = params.get("FolderName")
        self._CreateTime = params.get("CreateTime")
        self._LastUpdate = params.get("LastUpdate")
        self._Status = params.get("Status")
        self._InCharge = params.get("InCharge")
        self._InChargeId = params.get("InChargeId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._CrontabExpression = params.get("CrontabExpression")
        self._DelayTime = params.get("DelayTime")
        self._StartupTime = params.get("StartupTime")
        self._RetryWait = params.get("RetryWait")
        self._RetryAble = params.get("RetryAble")
        self._TaskAction = params.get("TaskAction")
        self._TryLimit = params.get("TryLimit")
        self._RunPriority = params.get("RunPriority")
        if params.get("TaskType") is not None:
            self._TaskType = TaskTypeOpsDto()
            self._TaskType._deserialize(params.get("TaskType"))
        self._BrokerIp = params.get("BrokerIp")
        self._ClusterId = params.get("ClusterId")
        self._MinDateTime = params.get("MinDateTime")
        self._MaxDateTime = params.get("MaxDateTime")
        self._ExecutionTTL = params.get("ExecutionTTL")
        self._SelfDepend = params.get("SelfDepend")
        self._LeftCoordinate = params.get("LeftCoordinate")
        self._TopCoordinate = params.get("TopCoordinate")
        self._Notes = params.get("Notes")
        self._InstanceInitStrategy = params.get("InstanceInitStrategy")
        self._YarnQueue = params.get("YarnQueue")
        self._LastSchedulerCommitTime = params.get("LastSchedulerCommitTime")
        self._NormalizedJobStartTime = params.get("NormalizedJobStartTime")
        self._SchedulerDesc = params.get("SchedulerDesc")
        self._ResourceGroup = params.get("ResourceGroup")
        self._Creator = params.get("Creator")
        self._DependencyRel = params.get("DependencyRel")
        self._DependencyWorkflow = params.get("DependencyWorkflow")
        self._EventListenerConfig = params.get("EventListenerConfig")
        self._EventPublisherConfig = params.get("EventPublisherConfig")
        self._VirtualTaskStatus = params.get("VirtualTaskStatus")
        if params.get("TaskLinkInfo") is not None:
            self._TaskLinkInfo = LinkOpsDto()
            self._TaskLinkInfo._deserialize(params.get("TaskLinkInfo"))
        self._ProductName = params.get("ProductName")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._OwnId = params.get("OwnId")
        self._UserId = params.get("UserId")
        self._TenantId = params.get("TenantId")
        self._UpdateUser = params.get("UpdateUser")
        self._UpdateTime = params.get("UpdateTime")
        self._UpdateUserId = params.get("UpdateUserId")
        self._TaskTypeId = params.get("TaskTypeId")
        self._TaskTypeDesc = params.get("TaskTypeDesc")
        self._ShowWorkflow = params.get("ShowWorkflow")
        self._FirstSubmitTime = params.get("FirstSubmitTime")
        self._FirstRunTime = params.get("FirstRunTime")
        self._ScheduleDesc = params.get("ScheduleDesc")
        self._CycleNum = params.get("CycleNum")
        self._Crontab = params.get("Crontab")
        self._StartDate = params.get("StartDate")
        self._EndDate = params.get("EndDate")
        self._CycleUnit = params.get("CycleUnit")
        self._InitStrategy = params.get("InitStrategy")
        self._Layer = params.get("Layer")
        self._SourceServiceId = params.get("SourceServiceId")
        self._SourceServiceType = params.get("SourceServiceType")
        self._TargetServiceId = params.get("TargetServiceId")
        self._TargetServiceType = params.get("TargetServiceType")
        self._TasksStr = params.get("TasksStr")
        self._Submit = params.get("Submit")
        self._ExecutorGroupId = params.get("ExecutorGroupId")
        self._ExecutorGroupName = params.get("ExecutorGroupName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskScriptContent(AbstractModel):
    """Task execution script

    """

    def __init__(self):
        r"""
        :param _ScriptContent: Script content Base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScriptContent: str
        """
        self._ScriptContent = None

    @property
    def ScriptContent(self):
        """Script content Base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ScriptContent

    @ScriptContent.setter
    def ScriptContent(self, ScriptContent):
        self._ScriptContent = ScriptContent


    def _deserialize(self, params):
        self._ScriptContent = params.get("ScriptContent")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskTag(AbstractModel):
    """Task Tag, can be used as a condition for retrieving tasks

    """

    def __init__(self):
        r"""
        :param _TagName: Tag Name
        :type TagName: str
        :param _TagValues: Tag Value List
        :type TagValues: list of str
        """
        self._TagName = None
        self._TagValues = None

    @property
    def TagName(self):
        """Tag Name
        :rtype: str
        """
        return self._TagName

    @TagName.setter
    def TagName(self, TagName):
        self._TagName = TagName

    @property
    def TagValues(self):
        """Tag Value List
        :rtype: list of str
        """
        return self._TagValues

    @TagValues.setter
    def TagValues(self, TagValues):
        self._TagValues = TagValues


    def _deserialize(self, params):
        self._TagName = params.get("TagName")
        self._TagValues = params.get("TagValues")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskTypeCnt(AbstractModel):
    """TaskTypeCnt

    """

    def __init__(self):
        r"""
        :param _Number: Statistical value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Number: str
        :param _TaskType: Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :type TaskType: str
        :param _TypeName: Type name
Note: This field may return null, indicating that no valid value can be obtained.
        :type TypeName: str
        """
        self._Number = None
        self._TaskType = None
        self._TypeName = None

    @property
    def Number(self):
        """Statistical value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Number

    @Number.setter
    def Number(self, Number):
        self._Number = Number

    @property
    def TaskType(self):
        """Task TypeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TypeName(self):
        """Type name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TypeName

    @TypeName.setter
    def TypeName(self, TypeName):
        self._TypeName = TypeName


    def _deserialize(self, params):
        self._Number = params.get("Number")
        self._TaskType = params.get("TaskType")
        self._TypeName = params.get("TypeName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskTypeMap(AbstractModel):
    """Task Type Map

    """

    def __init__(self):
        r"""
        :param _Key: key
        :type Key: int
        :param _Value: value
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """key
        :rtype: int
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskTypeOpsDto(AbstractModel):
    """Basic Information of Task Type

    """

    def __init__(self):
        r"""
        :param _TypeDesc: Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type TypeDesc: str
        :param _TypeId: Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type TypeId: int
        :param _TypeSort: Task Type Categorization
Note: This field may return null, indicating that no valid value can be obtained.
        :type TypeSort: str
        """
        self._TypeDesc = None
        self._TypeId = None
        self._TypeSort = None

    @property
    def TypeDesc(self):
        """Task Type Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TypeDesc

    @TypeDesc.setter
    def TypeDesc(self, TypeDesc):
        self._TypeDesc = TypeDesc

    @property
    def TypeId(self):
        """Task Type ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TypeId

    @TypeId.setter
    def TypeId(self, TypeId):
        self._TypeId = TypeId

    @property
    def TypeSort(self):
        """Task Type Categorization
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TypeSort

    @TypeSort.setter
    def TypeSort(self, TypeSort):
        self._TypeSort = TypeSort


    def _deserialize(self, params):
        self._TypeDesc = params.get("TypeDesc")
        self._TypeId = params.get("TypeId")
        self._TypeSort = params.get("TypeSort")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskVersionInstance(AbstractModel):
    """Task Instance Basic Information

    """

    def __init__(self):
        r"""
        :param _InstanceVersion: Instance Version Number
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceVersion: int
        :param _VersionDesc: Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type VersionDesc: str
        :param _ChangeType: 0, "Add",1, "Modify"
Note: This field may return null, indicating that no valid value can be obtained.
        :type ChangeType: int
        :param _SubmitterUin: Version Submitter UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :type SubmitterUin: str
        :param _InstanceDate: Submission Date
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceDate: str
        :param _InstanceStatus: 0, "Disabled",1, "Enabled (Production)"
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceStatus: int
        """
        self._InstanceVersion = None
        self._VersionDesc = None
        self._ChangeType = None
        self._SubmitterUin = None
        self._InstanceDate = None
        self._InstanceStatus = None

    @property
    def InstanceVersion(self):
        """Instance Version Number
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InstanceVersion

    @InstanceVersion.setter
    def InstanceVersion(self, InstanceVersion):
        self._InstanceVersion = InstanceVersion

    @property
    def VersionDesc(self):
        """Instance Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._VersionDesc

    @VersionDesc.setter
    def VersionDesc(self, VersionDesc):
        self._VersionDesc = VersionDesc

    @property
    def ChangeType(self):
        """0, "Add",1, "Modify"
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ChangeType

    @ChangeType.setter
    def ChangeType(self, ChangeType):
        self._ChangeType = ChangeType

    @property
    def SubmitterUin(self):
        """Version Submitter UIN
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SubmitterUin

    @SubmitterUin.setter
    def SubmitterUin(self, SubmitterUin):
        self._SubmitterUin = SubmitterUin

    @property
    def InstanceDate(self):
        """Submission Date
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceDate

    @InstanceDate.setter
    def InstanceDate(self, InstanceDate):
        self._InstanceDate = InstanceDate

    @property
    def InstanceStatus(self):
        """0, "Disabled",1, "Enabled (Production)"
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._InstanceStatus

    @InstanceStatus.setter
    def InstanceStatus(self, InstanceStatus):
        self._InstanceStatus = InstanceStatus


    def _deserialize(self, params):
        self._InstanceVersion = params.get("InstanceVersion")
        self._VersionDesc = params.get("VersionDesc")
        self._ChangeType = params.get("ChangeType")
        self._SubmitterUin = params.get("SubmitterUin")
        self._InstanceDate = params.get("InstanceDate")
        self._InstanceStatus = params.get("InstanceStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ThresholdValue(AbstractModel):
    """Data quality threshold

    """

    def __init__(self):
        r"""
        :param _ValueType: Threshold type 1. Low threshold 2. High threshold 3. Normal threshold 4. Enumerated values
Note: This field may return null, indicating that no valid value can be obtained.
        :type ValueType: int
        :param _Value: ThresholdNote: This field may return null, indicating that no valid value can be obtained.
        :type Value: str
        """
        self._ValueType = None
        self._Value = None

    @property
    def ValueType(self):
        """Threshold type 1. Low threshold 2. High threshold 3. Normal threshold 4. Enumerated values
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._ValueType

    @ValueType.setter
    def ValueType(self, ValueType):
        self._ValueType = ValueType

    @property
    def Value(self):
        """ThresholdNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._ValueType = params.get("ValueType")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TopTableStat(AbstractModel):
    """Quality Overview Table Ranking Results

    """

    def __init__(self):
        r"""
        :param _AlarmTables: Alarm Table List
        :type AlarmTables: list of TopTableStatItem
        :param _PipelineTables: Block Table List
        :type PipelineTables: list of TopTableStatItem
        """
        self._AlarmTables = None
        self._PipelineTables = None

    @property
    def AlarmTables(self):
        """Alarm Table List
        :rtype: list of TopTableStatItem
        """
        return self._AlarmTables

    @AlarmTables.setter
    def AlarmTables(self, AlarmTables):
        self._AlarmTables = AlarmTables

    @property
    def PipelineTables(self):
        """Block Table List
        :rtype: list of TopTableStatItem
        """
        return self._PipelineTables

    @PipelineTables.setter
    def PipelineTables(self, PipelineTables):
        self._PipelineTables = PipelineTables


    def _deserialize(self, params):
        if params.get("AlarmTables") is not None:
            self._AlarmTables = []
            for item in params.get("AlarmTables"):
                obj = TopTableStatItem()
                obj._deserialize(item)
                self._AlarmTables.append(obj)
        if params.get("PipelineTables") is not None:
            self._PipelineTables = []
            for item in params.get("PipelineTables"):
                obj = TopTableStatItem()
                obj._deserialize(item)
                self._PipelineTables.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TopTableStatItem(AbstractModel):
    """Quality Overview Table Ranking Elements

    """

    def __init__(self):
        r"""
        :param _TableId: Table Id
        :type TableId: str
        :param _TableName: Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :type TableName: str
        :param _Cnt: Number
        :type Cnt: int
        """
        self._TableId = None
        self._TableName = None
        self._Cnt = None

    @property
    def TableId(self):
        """Table Id
        :rtype: str
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId

    @property
    def TableName(self):
        """Table nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def Cnt(self):
        """Number
        :rtype: int
        """
        return self._Cnt

    @Cnt.setter
    def Cnt(self, Cnt):
        self._Cnt = Cnt


    def _deserialize(self, params):
        self._TableId = params.get("TableId")
        self._TableName = params.get("TableName")
        self._Cnt = params.get("Cnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TriggerDsEventRequest(AbstractModel):
    """TriggerDsEvent request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _EventCaseList: Event Instance Information
        :type EventCaseList: list of EventCaseDTO
        :param _EventBatchCaseList: Event Instance Information (Continuous Time)
        :type EventBatchCaseList: list of EventBatchCaseDTO
        """
        self._ProjectId = None
        self._EventCaseList = None
        self._EventBatchCaseList = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def EventCaseList(self):
        """Event Instance Information
        :rtype: list of EventCaseDTO
        """
        return self._EventCaseList

    @EventCaseList.setter
    def EventCaseList(self, EventCaseList):
        self._EventCaseList = EventCaseList

    @property
    def EventBatchCaseList(self):
        """Event Instance Information (Continuous Time)
        :rtype: list of EventBatchCaseDTO
        """
        return self._EventBatchCaseList

    @EventBatchCaseList.setter
    def EventBatchCaseList(self, EventBatchCaseList):
        self._EventBatchCaseList = EventBatchCaseList


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        if params.get("EventCaseList") is not None:
            self._EventCaseList = []
            for item in params.get("EventCaseList"):
                obj = EventCaseDTO()
                obj._deserialize(item)
                self._EventCaseList.append(obj)
        if params.get("EventBatchCaseList") is not None:
            self._EventBatchCaseList = []
            for item in params.get("EventBatchCaseList"):
                obj = EventBatchCaseDTO()
                obj._deserialize(item)
                self._EventBatchCaseList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TriggerDsEventResponse(AbstractModel):
    """TriggerDsEvent response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation resultNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOpsDTO`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation resultNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOpsDTO`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOpsDTO()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class TriggerEventRequest(AbstractModel):
    """TriggerEvent request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _Name: Case Name
        :type Name: str
        :param _Dimension: Time format: If the trigger time is selected as June 21, 2022, it should be set to 20220621
        :type Dimension: str
        :param _Description: Description
        :type Description: str
        """
        self._ProjectId = None
        self._Name = None
        self._Dimension = None
        self._Description = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Name(self):
        """Case Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Dimension(self):
        """Time format: If the trigger time is selected as June 21, 2022, it should be set to 20220621
        :rtype: str
        """
        return self._Dimension

    @Dimension.setter
    def Dimension(self, Dimension):
        self._Dimension = Dimension

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._Name = params.get("Name")
        self._Dimension = params.get("Dimension")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TriggerEventResponse(AbstractModel):
    """TriggerEvent response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Success or FailureNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchReturn`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchReturn()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class UnlockIntegrationTaskRequest(AbstractModel):
    """UnlockIntegrationTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._TaskId = None
        self._ProjectId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UnlockIntegrationTaskResponse(AbstractModel):
    """UnlockIntegrationTask response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Operation Success or Failure Indicator
        :type Data: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Operation Success or Failure Indicator
        :rtype: bool
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class UpdateWorkflowOwnerRequest(AbstractModel):
    """UpdateWorkflowOwner request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _WorkflowIds: Workflow IDs
        :type WorkflowIds: list of str
        :param _Owner: Person in charge, separated by ';'
        :type Owner: str
        :param _OwnerId: Person in Charge UserId, separated by ';'
        :type OwnerId: str
        """
        self._ProjectId = None
        self._WorkflowIds = None
        self._Owner = None
        self._OwnerId = None

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def WorkflowIds(self):
        """Workflow IDs
        :rtype: list of str
        """
        return self._WorkflowIds

    @WorkflowIds.setter
    def WorkflowIds(self, WorkflowIds):
        self._WorkflowIds = WorkflowIds

    @property
    def Owner(self):
        """Person in charge, separated by ';'
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def OwnerId(self):
        """Person in Charge UserId, separated by ';'
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._WorkflowIds = params.get("WorkflowIds")
        self._Owner = params.get("Owner")
        self._OwnerId = params.get("OwnerId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateWorkflowOwnerResponse(AbstractModel):
    """UpdateWorkflowOwner response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Data: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Response Data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.BatchOperationOpsDto`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BatchOperationOpsDto()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class UploadContentRequest(AbstractModel):
    """UploadContent request structure.

    """

    def __init__(self):
        r"""
        :param _ScriptRequestInfo: Script Upload Information
        :type ScriptRequestInfo: :class:`tencentcloud.wedata.v20210820.models.ScriptRequestInfo`
        :param _RequestFromSource: Request Source, WEB frontend; CLIENT client
        :type RequestFromSource: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        """
        self._ScriptRequestInfo = None
        self._RequestFromSource = None
        self._ProjectId = None

    @property
    def ScriptRequestInfo(self):
        """Script Upload Information
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ScriptRequestInfo`
        """
        return self._ScriptRequestInfo

    @ScriptRequestInfo.setter
    def ScriptRequestInfo(self, ScriptRequestInfo):
        self._ScriptRequestInfo = ScriptRequestInfo

    @property
    def RequestFromSource(self):
        """Request Source, WEB frontend; CLIENT client
        :rtype: str
        """
        return self._RequestFromSource

    @RequestFromSource.setter
    def RequestFromSource(self, RequestFromSource):
        self._RequestFromSource = RequestFromSource

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        if params.get("ScriptRequestInfo") is not None:
            self._ScriptRequestInfo = ScriptRequestInfo()
            self._ScriptRequestInfo._deserialize(params.get("ScriptRequestInfo"))
        self._RequestFromSource = params.get("RequestFromSource")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UploadContentResponse(AbstractModel):
    """UploadContent response structure.

    """

    def __init__(self):
        r"""
        :param _ScriptInfo: Script Information Response
Note: This field may return null, indicating that no valid value can be obtained.
        :type ScriptInfo: :class:`tencentcloud.wedata.v20210820.models.ScriptInfoResponse`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ScriptInfo = None
        self._RequestId = None

    @property
    def ScriptInfo(self):
        """Script Information Response
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: :class:`tencentcloud.wedata.v20210820.models.ScriptInfoResponse`
        """
        return self._ScriptInfo

    @ScriptInfo.setter
    def ScriptInfo(self, ScriptInfo):
        self._ScriptInfo = ScriptInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ScriptInfo") is not None:
            self._ScriptInfo = ScriptInfoResponse()
            self._ScriptInfo._deserialize(params.get("ScriptInfo"))
        self._RequestId = params.get("RequestId")


class UserFileInfo(AbstractModel):
    """Development Space - Data Development Script Information Response Body

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type ResourceId: str
        :param _FileName: File NameNote: This field may return null, indicating that no valid value can be obtained.
        :type FileName: str
        :param _FileExtensionType: File Type, such as jar, zip, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :type FileExtensionType: str
        :param _Type: File Upload Type, Resource Management as resource
Note: This field may return null, indicating that no valid value can be obtained.
        :type Type: str
        :param _Md5Value: File MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :type Md5Value: str
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _UpdateTime: Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :type UpdateTime: str
        :param _Size: File Size, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :type Size: int
        :param _LocalPath: Local Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type LocalPath: str
        :param _LocalTempPath: Local Temporary Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type LocalTempPath: str
        :param _RemotePath: Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
        :type RemotePath: str
        :param _OwnerName: File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerName: str
        :param _Owner: File owner's uin
Note: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _PathDepth: File depth
Note: This field may return null, indicating that no valid value can be obtained.
        :type PathDepth: int
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ExtraInfo: Additional information
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExtraInfo: list of ParamInfo
        :param _ZipPath: Absolute path of local temporary compressed file
Note: This field may return null, indicating that no valid value can be obtained.
        :type ZipPath: str
        :param _Bucket: File's belonging bucket 
Note: This field may return null, indicating that no valid value can be obtained.
        :type Bucket: str
        :param _Region: Region of the file's belonging bucket
Note: This field may return null, indicating that no valid value can be obtained.
        :type Region: str
        :param _DeleteName: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type DeleteName: str
        :param _DeleteOwner: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type DeleteOwner: str
        :param _Operator: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type Operator: str
        :param _OperatorName: NoNote: This field may return null, indicating that no valid value can be obtained.
        :type OperatorName: str
        :param _EncodeExtraInfo: Additional information base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
        :type EncodeExtraInfo: str
        """
        self._ResourceId = None
        self._FileName = None
        self._FileExtensionType = None
        self._Type = None
        self._Md5Value = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Size = None
        self._LocalPath = None
        self._LocalTempPath = None
        self._RemotePath = None
        self._OwnerName = None
        self._Owner = None
        self._PathDepth = None
        self._ProjectId = None
        self._ExtraInfo = None
        self._ZipPath = None
        self._Bucket = None
        self._Region = None
        self._DeleteName = None
        self._DeleteOwner = None
        self._Operator = None
        self._OperatorName = None
        self._EncodeExtraInfo = None

    @property
    def ResourceId(self):
        """Resource ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def FileName(self):
        """File NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileExtensionType(self):
        """File Type, such as jar, zip, etc.
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FileExtensionType

    @FileExtensionType.setter
    def FileExtensionType(self, FileExtensionType):
        self._FileExtensionType = FileExtensionType

    @property
    def Type(self):
        """File Upload Type, Resource Management as resource
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Md5Value(self):
        """File MD5 Value
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Md5Value

    @Md5Value.setter
    def Md5Value(self, Md5Value):
        self._Md5Value = Md5Value

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Size(self):
        """File Size, in bytes
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def LocalPath(self):
        """Local Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LocalPath

    @LocalPath.setter
    def LocalPath(self, LocalPath):
        self._LocalPath = LocalPath

    @property
    def LocalTempPath(self):
        """Local Temporary Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LocalTempPath

    @LocalTempPath.setter
    def LocalTempPath(self, LocalTempPath):
        self._LocalTempPath = LocalTempPath

    @property
    def RemotePath(self):
        """Remote Path
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._RemotePath

    @RemotePath.setter
    def RemotePath(self, RemotePath):
        self._RemotePath = RemotePath

    @property
    def OwnerName(self):
        """File Owner's Name
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerName

    @OwnerName.setter
    def OwnerName(self, OwnerName):
        self._OwnerName = OwnerName

    @property
    def Owner(self):
        """File owner's uin
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def PathDepth(self):
        """File depth
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PathDepth

    @PathDepth.setter
    def PathDepth(self, PathDepth):
        self._PathDepth = PathDepth

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of ParamInfo
        """
        return self._ExtraInfo

    @ExtraInfo.setter
    def ExtraInfo(self, ExtraInfo):
        self._ExtraInfo = ExtraInfo

    @property
    def ZipPath(self):
        """Absolute path of local temporary compressed file
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ZipPath

    @ZipPath.setter
    def ZipPath(self, ZipPath):
        self._ZipPath = ZipPath

    @property
    def Bucket(self):
        """File's belonging bucket 
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Bucket

    @Bucket.setter
    def Bucket(self, Bucket):
        self._Bucket = Bucket

    @property
    def Region(self):
        """Region of the file's belonging bucket
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def DeleteName(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DeleteName

    @DeleteName.setter
    def DeleteName(self, DeleteName):
        self._DeleteName = DeleteName

    @property
    def DeleteOwner(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DeleteOwner

    @DeleteOwner.setter
    def DeleteOwner(self, DeleteOwner):
        self._DeleteOwner = DeleteOwner

    @property
    def Operator(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def OperatorName(self):
        """NoNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OperatorName

    @OperatorName.setter
    def OperatorName(self, OperatorName):
        self._OperatorName = OperatorName

    @property
    def EncodeExtraInfo(self):
        """Additional information base64 encoded
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EncodeExtraInfo

    @EncodeExtraInfo.setter
    def EncodeExtraInfo(self, EncodeExtraInfo):
        self._EncodeExtraInfo = EncodeExtraInfo


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._FileName = params.get("FileName")
        self._FileExtensionType = params.get("FileExtensionType")
        self._Type = params.get("Type")
        self._Md5Value = params.get("Md5Value")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Size = params.get("Size")
        self._LocalPath = params.get("LocalPath")
        self._LocalTempPath = params.get("LocalTempPath")
        self._RemotePath = params.get("RemotePath")
        self._OwnerName = params.get("OwnerName")
        self._Owner = params.get("Owner")
        self._PathDepth = params.get("PathDepth")
        self._ProjectId = params.get("ProjectId")
        if params.get("ExtraInfo") is not None:
            self._ExtraInfo = []
            for item in params.get("ExtraInfo"):
                obj = ParamInfo()
                obj._deserialize(item)
                self._ExtraInfo.append(obj)
        self._ZipPath = params.get("ZipPath")
        self._Bucket = params.get("Bucket")
        self._Region = params.get("Region")
        self._DeleteName = params.get("DeleteName")
        self._DeleteOwner = params.get("DeleteOwner")
        self._Operator = params.get("Operator")
        self._OperatorName = params.get("OperatorName")
        self._EncodeExtraInfo = params.get("EncodeExtraInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WeightInfo(AbstractModel):
    """Weight Information

    """

    def __init__(self):
        r"""
        :param _Weight: Weight
        :type Weight: int
        :param _QualityDim: Dimension Type 1:Accuracy, 2:Uniqueness, 3:Integrity, 4:Consistency, 5:Timeliness, 6:Validity
        :type QualityDim: int
        """
        self._Weight = None
        self._QualityDim = None

    @property
    def Weight(self):
        """Weight
        :rtype: int
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        self._Weight = Weight

    @property
    def QualityDim(self):
        """Dimension Type 1:Accuracy, 2:Uniqueness, 3:Integrity, 4:Consistency, 5:Timeliness, 6:Validity
        :rtype: int
        """
        return self._QualityDim

    @QualityDim.setter
    def QualityDim(self, QualityDim):
        self._QualityDim = QualityDim


    def _deserialize(self, params):
        self._Weight = params.get("Weight")
        self._QualityDim = params.get("QualityDim")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkFlowExecuteDto(AbstractModel):
    """Workflow Execution Information

    """

    def __init__(self):
        r"""
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _Status: Workflow Execution Status 0: Waiting to run, 1: Running, 2: Completed, 3: Error
Note: This field may return null, indicating that no valid value can be obtained.
        :type Status: int
        """
        self._StartTime = None
        self._EndTime = None
        self._Status = None

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Status(self):
        """Workflow Execution Status 0: Waiting to run, 1: Running, 2: Completed, 3: Error
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkFlowExecuteDtoByPage(AbstractModel):
    """Paging Query Workflow Canvas Run Start and End Time

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: data
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of WorkFlowExecuteDto
        :param _PageSize: Page sizeNote: This field may return null, indicating that no valid value can be obtained.
        :type PageSize: int
        """
        self._TotalCount = None
        self._Items = None
        self._PageSize = None

    @property
    def TotalCount(self):
        """Total numberNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """data
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of WorkFlowExecuteDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items

    @property
    def PageSize(self):
        """Page sizeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._PageSize

    @PageSize.setter
    def PageSize(self, PageSize):
        self._PageSize = PageSize


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = WorkFlowExecuteDto()
                obj._deserialize(item)
                self._Items.append(obj)
        self._PageSize = params.get("PageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Workflow(AbstractModel):
    """Workflow Information

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow ID
        :type WorkflowId: str
        :param _Owner: Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _OwnerId: Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerId: str
        :param _ProjectId: Project ID
        :type ProjectId: str
        :param _ProjectIdent: Project Identifier
        :type ProjectIdent: str
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _WorkflowDesc: RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowDesc: str
        :param _WorkflowName: Workflow name
        :type WorkflowName: str
        :param _FolderId: Parent Folder ID
        :type FolderId: str
        :param _UserGroupId: Workflow User Group ID If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserGroupId: str
        :param _UserGroupName: Workflow User Group Name If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserGroupName: str
        """
        self._WorkflowId = None
        self._Owner = None
        self._OwnerId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._WorkflowDesc = None
        self._WorkflowName = None
        self._FolderId = None
        self._UserGroupId = None
        self._UserGroupName = None

    @property
    def WorkflowId(self):
        """Workflow ID
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def Owner(self):
        """Person in Charge
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def OwnerId(self):
        """Responsible Person ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId

    @property
    def ProjectId(self):
        """Project ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project Identifier
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def WorkflowDesc(self):
        """RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowDesc

    @WorkflowDesc.setter
    def WorkflowDesc(self, WorkflowDesc):
        self._WorkflowDesc = WorkflowDesc

    @property
    def WorkflowName(self):
        """Workflow name
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def FolderId(self):
        """Parent Folder ID
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def UserGroupId(self):
        """Workflow User Group ID If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserGroupId

    @UserGroupId.setter
    def UserGroupId(self, UserGroupId):
        self._UserGroupId = UserGroupId

    @property
    def UserGroupName(self):
        """Workflow User Group Name If there are multiple, separate with semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserGroupName

    @UserGroupName.setter
    def UserGroupName(self, UserGroupName):
        self._UserGroupName = UserGroupName


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._Owner = params.get("Owner")
        self._OwnerId = params.get("OwnerId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._WorkflowDesc = params.get("WorkflowDesc")
        self._WorkflowName = params.get("WorkflowName")
        self._FolderId = params.get("FolderId")
        self._UserGroupId = params.get("UserGroupId")
        self._UserGroupName = params.get("UserGroupName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkflowCanvasOpsDto(AbstractModel):
    """Workflow Canvas Details

    """

    def __init__(self):
        r"""
        :param _WorkflowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _WorkflowDesc: Workflow Detail Description
Note: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowDesc: str
        :param _WorkflowName: Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowName: str
        :param _FolderId: Parent Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _FolderIds: Associated Folder IDs
Note: This field may return null, indicating that no valid value can be obtained.
        :type FolderIds: list of str
        :param _Tasks: Task ListNote: This field may return null, indicating that no valid value can be obtained.
        :type Tasks: list of TaskOpsDto
        :param _Links: Task Dependency Edge List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Links: list of LinkOpsDto
        :param _UserGroupId: Workflow User Group ID, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserGroupId: str
        :param _UserGroupName: Workflow User Group Name, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :type UserGroupName: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectIdent: Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectIdent: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _Owner: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _OwnerId: Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :type OwnerId: str
        """
        self._WorkflowId = None
        self._WorkflowDesc = None
        self._WorkflowName = None
        self._FolderId = None
        self._FolderIds = None
        self._Tasks = None
        self._Links = None
        self._UserGroupId = None
        self._UserGroupName = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._Owner = None
        self._OwnerId = None

    @property
    def WorkflowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def WorkflowDesc(self):
        """Workflow Detail Description
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowDesc

    @WorkflowDesc.setter
    def WorkflowDesc(self, WorkflowDesc):
        self._WorkflowDesc = WorkflowDesc

    @property
    def WorkflowName(self):
        """Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowName

    @WorkflowName.setter
    def WorkflowName(self, WorkflowName):
        self._WorkflowName = WorkflowName

    @property
    def FolderId(self):
        """Parent Folder IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def FolderIds(self):
        """Associated Folder IDs
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of str
        """
        return self._FolderIds

    @FolderIds.setter
    def FolderIds(self, FolderIds):
        self._FolderIds = FolderIds

    @property
    def Tasks(self):
        """Task ListNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of TaskOpsDto
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def Links(self):
        """Task Dependency Edge List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of LinkOpsDto
        """
        return self._Links

    @Links.setter
    def Links(self, Links):
        self._Links = Links

    @property
    def UserGroupId(self):
        """Workflow User Group ID, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserGroupId

    @UserGroupId.setter
    def UserGroupId(self, UserGroupId):
        self._UserGroupId = UserGroupId

    @property
    def UserGroupName(self):
        """Workflow User Group Name, if multiple, separated by semicolons: a;b;c
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._UserGroupName

    @UserGroupName.setter
    def UserGroupName(self, UserGroupName):
        self._UserGroupName = UserGroupName

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Owner(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def OwnerId(self):
        """Responsible User ID
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId


    def _deserialize(self, params):
        self._WorkflowId = params.get("WorkflowId")
        self._WorkflowDesc = params.get("WorkflowDesc")
        self._WorkflowName = params.get("WorkflowName")
        self._FolderId = params.get("FolderId")
        self._FolderIds = params.get("FolderIds")
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = TaskOpsDto()
                obj._deserialize(item)
                self._Tasks.append(obj)
        if params.get("Links") is not None:
            self._Links = []
            for item in params.get("Links"):
                obj = LinkOpsDto()
                obj._deserialize(item)
                self._Links.append(obj)
        self._UserGroupId = params.get("UserGroupId")
        self._UserGroupName = params.get("UserGroupName")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._Owner = params.get("Owner")
        self._OwnerId = params.get("OwnerId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkflowExtOpsDto(AbstractModel):
    """Workflow

    """

    def __init__(self):
        r"""
        :param _TaskCount: Number of Tasks Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskCount: int
        :param _FolderName: File NameNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderName: str
        :param _WorkFlowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkFlowId: str
        :param _Owner: Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :type Owner: str
        :param _OwnerId: Person in charge userId\nNote: This field may return null, indicating that no valid value can be obtained.
        :type OwnerId: str
        :param _ProjectId: Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectId: str
        :param _ProjectIdent: Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectIdent: str
        :param _ProjectName: Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :type ProjectName: str
        :param _WorkFlowDesc: Workflow DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkFlowDesc: str
        :param _WorkFlowName: Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkFlowName: str
        :param _FolderId: Workflow file id\nNote: This field may return null, indicating that no valid value can be obtained.
        :type FolderId: str
        :param _Status: Workflow statusNote: This field may return null, indicating that no valid value can be obtained.
        :type Status: str
        :param _CreateTime: Workflow creation time\nNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Last update time\nNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        """
        self._TaskCount = None
        self._FolderName = None
        self._WorkFlowId = None
        self._Owner = None
        self._OwnerId = None
        self._ProjectId = None
        self._ProjectIdent = None
        self._ProjectName = None
        self._WorkFlowDesc = None
        self._WorkFlowName = None
        self._FolderId = None
        self._Status = None
        self._CreateTime = None
        self._ModifyTime = None

    @property
    def TaskCount(self):
        """Number of Tasks Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TaskCount

    @TaskCount.setter
    def TaskCount(self, TaskCount):
        self._TaskCount = TaskCount

    @property
    def FolderName(self):
        """File NameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderName

    @FolderName.setter
    def FolderName(self, FolderName):
        self._FolderName = FolderName

    @property
    def WorkFlowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkFlowId

    @WorkFlowId.setter
    def WorkFlowId(self, WorkFlowId):
        self._WorkFlowId = WorkFlowId

    @property
    def Owner(self):
        """Person in ChargeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Owner

    @Owner.setter
    def Owner(self, Owner):
        self._Owner = Owner

    @property
    def OwnerId(self):
        """Person in charge userId\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._OwnerId

    @OwnerId.setter
    def OwnerId(self, OwnerId):
        self._OwnerId = OwnerId

    @property
    def ProjectId(self):
        """Project IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectIdent(self):
        """Project IdentifierNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectIdent

    @ProjectIdent.setter
    def ProjectIdent(self, ProjectIdent):
        self._ProjectIdent = ProjectIdent

    @property
    def ProjectName(self):
        """Project nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def WorkFlowDesc(self):
        """Workflow DescriptionNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkFlowDesc

    @WorkFlowDesc.setter
    def WorkFlowDesc(self, WorkFlowDesc):
        self._WorkFlowDesc = WorkFlowDesc

    @property
    def WorkFlowName(self):
        """Workflow nameNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkFlowName

    @WorkFlowName.setter
    def WorkFlowName(self, WorkFlowName):
        self._WorkFlowName = WorkFlowName

    @property
    def FolderId(self):
        """Workflow file id\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FolderId

    @FolderId.setter
    def FolderId(self, FolderId):
        self._FolderId = FolderId

    @property
    def Status(self):
        """Workflow statusNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Workflow creation time\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last update time\nNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._TaskCount = params.get("TaskCount")
        self._FolderName = params.get("FolderName")
        self._WorkFlowId = params.get("WorkFlowId")
        self._Owner = params.get("Owner")
        self._OwnerId = params.get("OwnerId")
        self._ProjectId = params.get("ProjectId")
        self._ProjectIdent = params.get("ProjectIdent")
        self._ProjectName = params.get("ProjectName")
        self._WorkFlowDesc = params.get("WorkFlowDesc")
        self._WorkFlowName = params.get("WorkFlowName")
        self._FolderId = params.get("FolderId")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkflowExtOpsDtoPage(AbstractModel):
    """User production workflow list pagination

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :type TotalCount: int
        :param _Items: Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :type Items: list of WorkflowExtOpsDto
        """
        self._TotalCount = None
        self._Items = None

    @property
    def TotalCount(self):
        """Total Record Count
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Items(self):
        """Record List
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of WorkflowExtOpsDto
        """
        return self._Items

    @Items.setter
    def Items(self, Items):
        self._Items = Items


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Items") is not None:
            self._Items = []
            for item in params.get("Items"):
                obj = WorkflowExtOpsDto()
                obj._deserialize(item)
                self._Items.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkflowSchedulerOpsDto(AbstractModel):
    """Workflow Scheduling Details

    """

    def __init__(self):
        r"""
        :param _CreateTime: Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type CreateTime: str
        :param _Creator: CreatorNote: This field may return null, indicating that no valid value can be obtained.
        :type Creator: str
        :param _ModifyTime: Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type ModifyTime: str
        :param _DelayTime: Latency, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :type DelayTime: int
        :param _StartupTime: Start Time, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :type StartupTime: int
        :param _SelfDepend: Task Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
        :type SelfDepend: str
        :param _StartTime: Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :type StartTime: str
        :param _EndTime: End timeNote: This field may return null, indicating that no valid value can be obtained.
        :type EndTime: str
        :param _TaskAction: Specified Running Time, Specified Time: e.g., Monday:1
Note: This field may return null, indicating that no valid value can be obtained.
        :type TaskAction: str
        :param _CycleType: Scheduling Cycle Type, Time Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleType: str
        :param _CycleStep: Scheduling Period, Interval Step unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleStep: int
        :param _CrontabExpression: Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :type CrontabExpression: str
        :param _ExecutionStartTime: Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionStartTime: str
        :param _ExecutionEndTime: Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :type ExecutionEndTime: str
        :param _InstanceInitStrategy: Task Instance Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :type InstanceInitStrategy: str
        :param _WorkflowId: Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :type WorkflowId: str
        :param _DependencyWorkflow: Workflow Self-Dependency
Note: This field may return null, indicating that no valid value can be obtained.
        :type DependencyWorkflow: str
        :param _SchedulerDesc: Scheduling Plan Interpretation
Note: This field may return null, indicating that no valid value can be obtained.
        :type SchedulerDesc: str
        :param _FirstSubmitTime: First Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :type FirstSubmitTime: str
        :param _LatestSubmitTime: Latest Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :type LatestSubmitTime: str
        """
        self._CreateTime = None
        self._Creator = None
        self._ModifyTime = None
        self._DelayTime = None
        self._StartupTime = None
        self._SelfDepend = None
        self._StartTime = None
        self._EndTime = None
        self._TaskAction = None
        self._CycleType = None
        self._CycleStep = None
        self._CrontabExpression = None
        self._ExecutionStartTime = None
        self._ExecutionEndTime = None
        self._InstanceInitStrategy = None
        self._WorkflowId = None
        self._DependencyWorkflow = None
        self._SchedulerDesc = None
        self._FirstSubmitTime = None
        self._LatestSubmitTime = None

    @property
    def CreateTime(self):
        """Creation TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Creator(self):
        """CreatorNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def ModifyTime(self):
        """Modification TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def DelayTime(self):
        """Latency, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._DelayTime

    @DelayTime.setter
    def DelayTime(self, DelayTime):
        self._DelayTime = DelayTime

    @property
    def StartupTime(self):
        """Start Time, unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._StartupTime

    @StartupTime.setter
    def StartupTime(self, StartupTime):
        self._StartupTime = StartupTime

    @property
    def SelfDepend(self):
        """Task Dependency Type
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SelfDepend

    @SelfDepend.setter
    def SelfDepend(self, SelfDepend):
        self._SelfDepend = SelfDepend

    @property
    def StartTime(self):
        """Start TimeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timeNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TaskAction(self):
        """Specified Running Time, Specified Time: e.g., Monday:1
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._TaskAction

    @TaskAction.setter
    def TaskAction(self, TaskAction):
        self._TaskAction = TaskAction

    @property
    def CycleType(self):
        """Scheduling Cycle Type, Time Unit
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CycleType

    @CycleType.setter
    def CycleType(self, CycleType):
        self._CycleType = CycleType

    @property
    def CycleStep(self):
        """Scheduling Period, Interval Step unit=minute
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._CycleStep

    @CycleStep.setter
    def CycleStep(self, CycleStep):
        self._CycleStep = CycleStep

    @property
    def CrontabExpression(self):
        """Scheduling Cron Expression
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._CrontabExpression

    @CrontabExpression.setter
    def CrontabExpression(self, CrontabExpression):
        self._CrontabExpression = CrontabExpression

    @property
    def ExecutionStartTime(self):
        """Execution Time Left Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionStartTime

    @ExecutionStartTime.setter
    def ExecutionStartTime(self, ExecutionStartTime):
        self._ExecutionStartTime = ExecutionStartTime

    @property
    def ExecutionEndTime(self):
        """Execution Time Right Closed Interval
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._ExecutionEndTime

    @ExecutionEndTime.setter
    def ExecutionEndTime(self, ExecutionEndTime):
        self._ExecutionEndTime = ExecutionEndTime

    @property
    def InstanceInitStrategy(self):
        """Task Instance Initialization Strategy
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._InstanceInitStrategy

    @InstanceInitStrategy.setter
    def InstanceInitStrategy(self, InstanceInitStrategy):
        self._InstanceInitStrategy = InstanceInitStrategy

    @property
    def WorkflowId(self):
        """Workflow IDNote: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._WorkflowId

    @WorkflowId.setter
    def WorkflowId(self, WorkflowId):
        self._WorkflowId = WorkflowId

    @property
    def DependencyWorkflow(self):
        """Workflow Self-Dependency
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._DependencyWorkflow

    @DependencyWorkflow.setter
    def DependencyWorkflow(self, DependencyWorkflow):
        self._DependencyWorkflow = DependencyWorkflow

    @property
    def SchedulerDesc(self):
        """Scheduling Plan Interpretation
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._SchedulerDesc

    @SchedulerDesc.setter
    def SchedulerDesc(self, SchedulerDesc):
        self._SchedulerDesc = SchedulerDesc

    @property
    def FirstSubmitTime(self):
        """First Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._FirstSubmitTime

    @FirstSubmitTime.setter
    def FirstSubmitTime(self, FirstSubmitTime):
        self._FirstSubmitTime = FirstSubmitTime

    @property
    def LatestSubmitTime(self):
        """Latest Submission Time of Workflow
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: str
        """
        return self._LatestSubmitTime

    @LatestSubmitTime.setter
    def LatestSubmitTime(self, LatestSubmitTime):
        self._LatestSubmitTime = LatestSubmitTime


    def _deserialize(self, params):
        self._CreateTime = params.get("CreateTime")
        self._Creator = params.get("Creator")
        self._ModifyTime = params.get("ModifyTime")
        self._DelayTime = params.get("DelayTime")
        self._StartupTime = params.get("StartupTime")
        self._SelfDepend = params.get("SelfDepend")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._TaskAction = params.get("TaskAction")
        self._CycleType = params.get("CycleType")
        self._CycleStep = params.get("CycleStep")
        self._CrontabExpression = params.get("CrontabExpression")
        self._ExecutionStartTime = params.get("ExecutionStartTime")
        self._ExecutionEndTime = params.get("ExecutionEndTime")
        self._InstanceInitStrategy = params.get("InstanceInitStrategy")
        self._WorkflowId = params.get("WorkflowId")
        self._DependencyWorkflow = params.get("DependencyWorkflow")
        self._SchedulerDesc = params.get("SchedulerDesc")
        self._FirstSubmitTime = params.get("FirstSubmitTime")
        self._LatestSubmitTime = params.get("LatestSubmitTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkflowTaskCountOpsDto(AbstractModel):
    """Workflow Task Statistics

    """

    def __init__(self):
        r"""
        :param _Count: Number of Workflow Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :type Count: int
        :param _TypeCount: Task Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type TypeCount: list of PairDto
        :param _CycleCount: Task Cycle Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :type CycleCount: list of PairDto
        """
        self._Count = None
        self._TypeCount = None
        self._CycleCount = None

    @property
    def Count(self):
        """Number of Workflow Tasks
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def TypeCount(self):
        """Task Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of PairDto
        """
        return self._TypeCount

    @TypeCount.setter
    def TypeCount(self, TypeCount):
        self._TypeCount = TypeCount

    @property
    def CycleCount(self):
        """Task Cycle Type Dimension Statistics
Note: This field may return null, indicating that no valid value can be obtained.
        :rtype: list of PairDto
        """
        return self._CycleCount

    @CycleCount.setter
    def CycleCount(self, CycleCount):
        self._CycleCount = CycleCount


    def _deserialize(self, params):
        self._Count = params.get("Count")
        if params.get("TypeCount") is not None:
            self._TypeCount = []
            for item in params.get("TypeCount"):
                obj = PairDto()
                obj._deserialize(item)
                self._TypeCount.append(obj)
        if params.get("CycleCount") is not None:
            self._CycleCount = []
            for item in params.get("CycleCount"):
                obj = PairDto()
                obj._deserialize(item)
                self._CycleCount.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        