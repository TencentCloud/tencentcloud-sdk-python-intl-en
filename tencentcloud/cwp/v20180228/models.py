# -*- coding: utf8 -*-
# Copyright (c) 2017-2025 Tencent. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings

from tencentcloud.common.abstract_model import AbstractModel


class ABTestConfig(AbstractModel):
    """Grayscale project configuration

    """

    def __init__(self):
        r"""
        :param _ProjectName: Greyscale project name
        :type ProjectName: str
        :param _Status: true: grayscale release in progress; false: grayscale release not in progress.
        :type Status: bool
        """
        self._ProjectName = None
        self._Status = None

    @property
    def ProjectName(self):
        """Greyscale project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Status(self):
        """true: grayscale release in progress; false: grayscale release not in progress.
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccountStatistics(AbstractModel):
    """Account statistics data

    """

    def __init__(self):
        r"""
        :param _Username: Username
        :type Username: str
        :param _MachineNum: Number of hosts
        :type MachineNum: int
        """
        self._Username = None
        self._MachineNum = None

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def MachineNum(self):
        """Number of hosts
        :rtype: int
        """
        return self._MachineNum

    @MachineNum.setter
    def MachineNum(self, MachineNum):
        self._MachineNum = MachineNum


    def _deserialize(self, params):
        self._Username = params.get("Username")
        self._MachineNum = params.get("MachineNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddLoginWhiteListsRequest(AbstractModel):
    """AddLoginWhiteLists request structure.

    """

    def __init__(self):
        r"""
        :param _HostLoginWhiteObj: Cross-region log-in allowlist entity
        :type HostLoginWhiteObj: :class:`tencentcloud.cwp.v20180228.models.HostLoginWhiteObj`
        :param _ProcessType: Synchronous event processing method:
"": do not process"All": add all events that match this configuration to the allowlist"Id": add the event corresponding to the event ID to the allowlist
        :type ProcessType: str
        :param _EventId: Cross-region log-in event ID. This parameter is required when ProcessType is set to Id.
        :type EventId: int
        """
        self._HostLoginWhiteObj = None
        self._ProcessType = None
        self._EventId = None

    @property
    def HostLoginWhiteObj(self):
        """Cross-region log-in allowlist entity
        :rtype: :class:`tencentcloud.cwp.v20180228.models.HostLoginWhiteObj`
        """
        return self._HostLoginWhiteObj

    @HostLoginWhiteObj.setter
    def HostLoginWhiteObj(self, HostLoginWhiteObj):
        self._HostLoginWhiteObj = HostLoginWhiteObj

    @property
    def ProcessType(self):
        """Synchronous event processing method:
"": do not process"All": add all events that match this configuration to the allowlist"Id": add the event corresponding to the event ID to the allowlist
        :rtype: str
        """
        return self._ProcessType

    @ProcessType.setter
    def ProcessType(self, ProcessType):
        self._ProcessType = ProcessType

    @property
    def EventId(self):
        """Cross-region log-in event ID. This parameter is required when ProcessType is set to Id.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        if params.get("HostLoginWhiteObj") is not None:
            self._HostLoginWhiteObj = HostLoginWhiteObj()
            self._HostLoginWhiteObj._deserialize(params.get("HostLoginWhiteObj"))
        self._ProcessType = params.get("ProcessType")
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddLoginWhiteListsResponse(AbstractModel):
    """AddLoginWhiteLists response structure.

    """

    def __init__(self):
        r"""
        :param _DuplicateHosts: Prompt list of duplicate addition
Note: This field may return null, indicating that no valid values can be obtained.
        :type DuplicateHosts: list of DuplicateHosts
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DuplicateHosts = None
        self._RequestId = None

    @property
    def DuplicateHosts(self):
        """Prompt list of duplicate addition
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of DuplicateHosts
        """
        return self._DuplicateHosts

    @DuplicateHosts.setter
    def DuplicateHosts(self, DuplicateHosts):
        self._DuplicateHosts = DuplicateHosts

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DuplicateHosts") is not None:
            self._DuplicateHosts = []
            for item in params.get("DuplicateHosts"):
                obj = DuplicateHosts()
                obj._deserialize(item)
                self._DuplicateHosts.append(obj)
        self._RequestId = params.get("RequestId")


class AlarmInfo(AbstractModel):
    """Information on alarms associated with the node

    """

    def __init__(self):
        r"""
        :param _AlarmId: Table names of IDs of alarms associated with the node. Separate multiple pairs with commas. Example: t1:id1,t2:id2
        :type AlarmId: str
        :param _Status: Alarm status. This parameter takes effect when this node is an alarm node.
        :type Status: int
        """
        self._AlarmId = None
        self._Status = None

    @property
    def AlarmId(self):
        """Table names of IDs of alarms associated with the node. Separate multiple pairs with commas. Example: t1:id1,t2:id2
        :rtype: str
        """
        return self._AlarmId

    @AlarmId.setter
    def AlarmId(self, AlarmId):
        self._AlarmId = AlarmId

    @property
    def Status(self):
        """Alarm status. This parameter takes effect when this node is an alarm node.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._AlarmId = params.get("AlarmId")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetAppBaseInfo(AbstractModel):
    """Basic information on the resource management process

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Application name
        :type Name: str
        :param _Type: Application type	
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other
        :type Type: int
        :param _BinPath: Binary path
        :type BinPath: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProcessCount: Number of associated processes
        :type ProcessCount: int
        :param _Desc: Application description
        :type Desc: str
        :param _Version: Version No.
        :type Version: str
        :param _ConfigPath: Configuration file path
        :type ConfigPath: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _IsNew: Whether the web service is newly added [0: no|1: yes]
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineName = None
        self._MachineWanIp = None
        self._Uuid = None
        self._Quuid = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Type = None
        self._BinPath = None
        self._OsInfo = None
        self._ProcessCount = None
        self._Desc = None
        self._Version = None
        self._ConfigPath = None
        self._FirstTime = None
        self._UpdateTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Application name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Application type	
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def BinPath(self):
        """Binary path
        :rtype: str
        """
        return self._BinPath

    @BinPath.setter
    def BinPath(self, BinPath):
        self._BinPath = BinPath

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProcessCount(self):
        """Number of associated processes
        :rtype: int
        """
        return self._ProcessCount

    @ProcessCount.setter
    def ProcessCount(self, ProcessCount):
        self._ProcessCount = ProcessCount

    @property
    def Desc(self):
        """Application description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Version(self):
        """Version No.
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def ConfigPath(self):
        """Configuration file path
        :rtype: str
        """
        return self._ConfigPath

    @ConfigPath.setter
    def ConfigPath(self, ConfigPath):
        self._ConfigPath = ConfigPath

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def IsNew(self):
        """Whether the web service is newly added [0: no|1: yes]
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._BinPath = params.get("BinPath")
        self._OsInfo = params.get("OsInfo")
        self._ProcessCount = params.get("ProcessCount")
        self._Desc = params.get("Desc")
        self._Version = params.get("Version")
        self._ConfigPath = params.get("ConfigPath")
        self._FirstTime = params.get("FirstTime")
        self._UpdateTime = params.get("UpdateTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetAppProcessInfo(AbstractModel):
    """Software application-related process information

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Status: Process status
        :type Status: str
        :param _Version: Process version
        :type Version: str
        :param _Path: Path
        :type Path: str
        :param _User: User
        :type User: str
        :param _StartTime: Startup time
        :type StartTime: str
        """
        self._Name = None
        self._Status = None
        self._Version = None
        self._Path = None
        self._User = None
        self._StartTime = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Status(self):
        """Process status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Version(self):
        """Process version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def User(self):
        """User
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def StartTime(self):
        """Startup time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Status = params.get("Status")
        self._Version = params.get("Version")
        self._Path = params.get("Path")
        self._User = params.get("User")
        self._StartTime = params.get("StartTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetCoreModuleBaseInfo(AbstractModel):
    """List of information on the asset management kernel module

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Desc: Description
        :type Desc: str
        :param _Path: Path
        :type Path: str
        :param _Version: Version
        :type Version: str
        :param _MachineIp: Server IP
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Size: Module size
        :type Size: int
        :param _ProcessCount: Number of dependent processes
        :type ProcessCount: int
        :param _ModuleCount: Number of dependent modules
        :type ModuleCount: int
        :param _Id: Module ID
        :type Id: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether new [0: no|1: yes]
        :type IsNew: int
        :param _MachineWanIp: Server Public IP
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Name = None
        self._Desc = None
        self._Path = None
        self._Version = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Size = None
        self._ProcessCount = None
        self._ModuleCount = None
        self._Id = None
        self._Quuid = None
        self._Uuid = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def MachineIp(self):
        """Server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Size(self):
        """Module size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def ProcessCount(self):
        """Number of dependent processes
        :rtype: int
        """
        return self._ProcessCount

    @ProcessCount.setter
    def ProcessCount(self, ProcessCount):
        self._ProcessCount = ProcessCount

    @property
    def ModuleCount(self):
        """Number of dependent modules
        :rtype: int
        """
        return self._ModuleCount

    @ModuleCount.setter
    def ModuleCount(self, ModuleCount):
        self._ModuleCount = ModuleCount

    @property
    def Id(self):
        """Module ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether new [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineWanIp(self):
        """Server Public IP
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Path = params.get("Path")
        self._Version = params.get("Version")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Size = params.get("Size")
        self._ProcessCount = params.get("ProcessCount")
        self._ModuleCount = params.get("ModuleCount")
        self._Id = params.get("Id")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetCoreModuleDetail(AbstractModel):
    """Details of the asset management kernel module

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Desc: Description
        :type Desc: str
        :param _Path: Path
        :type Path: str
        :param _Version: Version
        :type Version: str
        :param _Size: Size
        :type Size: int
        :param _Processes: Dependent processes
        :type Processes: str
        :param _Modules: Dependent modules
        :type Modules: str
        :param _Params: Parameter information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Params: list of AssetCoreModuleParam
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        """
        self._Name = None
        self._Desc = None
        self._Path = None
        self._Version = None
        self._Size = None
        self._Processes = None
        self._Modules = None
        self._Params = None
        self._UpdateTime = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Size(self):
        """Size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def Processes(self):
        """Dependent processes
        :rtype: str
        """
        return self._Processes

    @Processes.setter
    def Processes(self, Processes):
        self._Processes = Processes

    @property
    def Modules(self):
        """Dependent modules
        :rtype: str
        """
        return self._Modules

    @Modules.setter
    def Modules(self, Modules):
        self._Modules = Modules

    @property
    def Params(self):
        """Parameter information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetCoreModuleParam
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Path = params.get("Path")
        self._Version = params.get("Version")
        self._Size = params.get("Size")
        self._Processes = params.get("Processes")
        self._Modules = params.get("Modules")
        if params.get("Params") is not None:
            self._Params = []
            for item in params.get("Params"):
                obj = AssetCoreModuleParam()
                obj._deserialize(item)
                self._Params.append(obj)
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetCoreModuleParam(AbstractModel):
    """Parameters of the asset management kernel module

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Data: Data
        :type Data: str
        """
        self._Name = None
        self._Data = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Data(self):
        """Data
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Data = params.get("Data")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetDatabaseBaseInfo(AbstractModel):
    """Resource management database list information

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Database name
        :type Name: str
        :param _Version: Version
        :type Version: str
        :param _Port: Listening port
        :type Port: str
        :param _Proto: Protocol
        :type Proto: str
        :param _User: Running user
        :type User: str
        :param _Ip: Bound IP
        :type Ip: str
        :param _ConfigPath: Configuration file path
        :type ConfigPath: str
        :param _LogPath: Log file path
        :type LogPath: str
        :param _DataPath: Data path
        :type DataPath: str
        :param _Permission: Running permission
        :type Permission: str
        :param _ErrorLogPath: Error log path
        :type ErrorLogPath: str
        :param _PlugInPath: Plugin path
        :type PlugInPath: str
        :param _BinPath: Binary path
        :type BinPath: str
        :param _Param: Startup parameter
        :type Param: str
        :param _Id: Database ID
        :type Id: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether newly added [0: no|1: yes]
        :type IsNew: int
        :param _MachineName: Host name
        :type MachineName: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Version = None
        self._Port = None
        self._Proto = None
        self._User = None
        self._Ip = None
        self._ConfigPath = None
        self._LogPath = None
        self._DataPath = None
        self._Permission = None
        self._ErrorLogPath = None
        self._PlugInPath = None
        self._BinPath = None
        self._Param = None
        self._Id = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineName = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Database name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Port(self):
        """Listening port
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def Proto(self):
        """Protocol
        :rtype: str
        """
        return self._Proto

    @Proto.setter
    def Proto(self, Proto):
        self._Proto = Proto

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Ip(self):
        """Bound IP
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def ConfigPath(self):
        """Configuration file path
        :rtype: str
        """
        return self._ConfigPath

    @ConfigPath.setter
    def ConfigPath(self, ConfigPath):
        self._ConfigPath = ConfigPath

    @property
    def LogPath(self):
        """Log file path
        :rtype: str
        """
        return self._LogPath

    @LogPath.setter
    def LogPath(self, LogPath):
        self._LogPath = LogPath

    @property
    def DataPath(self):
        """Data path
        :rtype: str
        """
        return self._DataPath

    @DataPath.setter
    def DataPath(self, DataPath):
        self._DataPath = DataPath

    @property
    def Permission(self):
        """Running permission
        :rtype: str
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission

    @property
    def ErrorLogPath(self):
        """Error log path
        :rtype: str
        """
        return self._ErrorLogPath

    @ErrorLogPath.setter
    def ErrorLogPath(self, ErrorLogPath):
        self._ErrorLogPath = ErrorLogPath

    @property
    def PlugInPath(self):
        """Plugin path
        :rtype: str
        """
        return self._PlugInPath

    @PlugInPath.setter
    def PlugInPath(self, PlugInPath):
        self._PlugInPath = PlugInPath

    @property
    def BinPath(self):
        """Binary path
        :rtype: str
        """
        return self._BinPath

    @BinPath.setter
    def BinPath(self, BinPath):
        self._BinPath = BinPath

    @property
    def Param(self):
        """Startup parameter
        :rtype: str
        """
        return self._Param

    @Param.setter
    def Param(self, Param):
        self._Param = Param

    @property
    def Id(self):
        """Database ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether newly added [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._Port = params.get("Port")
        self._Proto = params.get("Proto")
        self._User = params.get("User")
        self._Ip = params.get("Ip")
        self._ConfigPath = params.get("ConfigPath")
        self._LogPath = params.get("LogPath")
        self._DataPath = params.get("DataPath")
        self._Permission = params.get("Permission")
        self._ErrorLogPath = params.get("ErrorLogPath")
        self._PlugInPath = params.get("PlugInPath")
        self._BinPath = params.get("BinPath")
        self._Param = params.get("Param")
        self._Id = params.get("Id")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineName = params.get("MachineName")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetDatabaseDetail(AbstractModel):
    """Resource management database list information

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _Name: Database name
        :type Name: str
        :param _Version: Version
        :type Version: str
        :param _Port: Listening port
        :type Port: str
        :param _Proto: Protocol
        :type Proto: str
        :param _User: Running user
        :type User: str
        :param _Ip: Bind IP
        :type Ip: str
        :param _ConfigPath: Configuration file path
        :type ConfigPath: str
        :param _LogPath: Log file path
        :type LogPath: str
        :param _DataPath: Data path
        :type DataPath: str
        :param _Permission: Running permission
        :type Permission: str
        :param _ErrorLogPath: Error log path
        :type ErrorLogPath: str
        :param _PlugInPath: Plugin path
        :type PlugInPath: str
        :param _BinPath: Binary path
        :type BinPath: str
        :param _Param: Startup parameter
        :type Param: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._Name = None
        self._Version = None
        self._Port = None
        self._Proto = None
        self._User = None
        self._Ip = None
        self._ConfigPath = None
        self._LogPath = None
        self._DataPath = None
        self._Permission = None
        self._ErrorLogPath = None
        self._PlugInPath = None
        self._BinPath = None
        self._Param = None
        self._UpdateTime = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Name(self):
        """Database name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Port(self):
        """Listening port
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def Proto(self):
        """Protocol
        :rtype: str
        """
        return self._Proto

    @Proto.setter
    def Proto(self, Proto):
        self._Proto = Proto

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Ip(self):
        """Bind IP
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def ConfigPath(self):
        """Configuration file path
        :rtype: str
        """
        return self._ConfigPath

    @ConfigPath.setter
    def ConfigPath(self, ConfigPath):
        self._ConfigPath = ConfigPath

    @property
    def LogPath(self):
        """Log file path
        :rtype: str
        """
        return self._LogPath

    @LogPath.setter
    def LogPath(self, LogPath):
        self._LogPath = LogPath

    @property
    def DataPath(self):
        """Data path
        :rtype: str
        """
        return self._DataPath

    @DataPath.setter
    def DataPath(self, DataPath):
        self._DataPath = DataPath

    @property
    def Permission(self):
        """Running permission
        :rtype: str
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission

    @property
    def ErrorLogPath(self):
        """Error log path
        :rtype: str
        """
        return self._ErrorLogPath

    @ErrorLogPath.setter
    def ErrorLogPath(self, ErrorLogPath):
        self._ErrorLogPath = ErrorLogPath

    @property
    def PlugInPath(self):
        """Plugin path
        :rtype: str
        """
        return self._PlugInPath

    @PlugInPath.setter
    def PlugInPath(self, PlugInPath):
        self._PlugInPath = PlugInPath

    @property
    def BinPath(self):
        """Binary path
        :rtype: str
        """
        return self._BinPath

    @BinPath.setter
    def BinPath(self, BinPath):
        self._BinPath = BinPath

    @property
    def Param(self):
        """Startup parameter
        :rtype: str
        """
        return self._Param

    @Param.setter
    def Param(self, Param):
        self._Param = Param

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._Port = params.get("Port")
        self._Proto = params.get("Proto")
        self._User = params.get("User")
        self._Ip = params.get("Ip")
        self._ConfigPath = params.get("ConfigPath")
        self._LogPath = params.get("LogPath")
        self._DataPath = params.get("DataPath")
        self._Permission = params.get("Permission")
        self._ErrorLogPath = params.get("ErrorLogPath")
        self._PlugInPath = params.get("PlugInPath")
        self._BinPath = params.get("BinPath")
        self._Param = params.get("Param")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetDiskPartitionInfo(AbstractModel):
    """Asset management disk partition information

    """

    def __init__(self):
        r"""
        :param _Name: Partition name
        :type Name: str
        :param _Size: Partition size (unit: G)
        :type Size: int
        :param _Percent: Partition utilization
        :type Percent: float
        :param _Type: File system type
        :type Type: str
        :param _Path: Mounting directory
        :type Path: str
        :param _Used: Used space (unit: G)
        :type Used: int
        """
        self._Name = None
        self._Size = None
        self._Percent = None
        self._Type = None
        self._Path = None
        self._Used = None

    @property
    def Name(self):
        """Partition name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Size(self):
        """Partition size (unit: G)
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def Percent(self):
        """Partition utilization
        :rtype: float
        """
        return self._Percent

    @Percent.setter
    def Percent(self, Percent):
        self._Percent = Percent

    @property
    def Type(self):
        """File system type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Path(self):
        """Mounting directory
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Used(self):
        """Used space (unit: G)
        :rtype: int
        """
        return self._Used

    @Used.setter
    def Used(self, Used):
        self._Used = Used


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Size = params.get("Size")
        self._Percent = params.get("Percent")
        self._Type = params.get("Type")
        self._Path = params.get("Path")
        self._Used = params.get("Used")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetEnvBaseInfo(AbstractModel):
    """List of asset management environment variables

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Type: Type:
0: user variable
1: system variable
        :type Type: int
        :param _User: Startup user
        :type User: str
        :param _Value: Environment variable value
        :type Value: str
        :param _MachineIp: Server IP
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether new [0: no|1: yes]
        :type IsNew: int
        :param _MachineWanIp: Server Public IP
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Name = None
        self._Type = None
        self._User = None
        self._Value = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Quuid = None
        self._Uuid = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Type:
0: user variable
1: system variable
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def User(self):
        """Startup user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Value(self):
        """Environment variable value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def MachineIp(self):
        """Server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether new [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineWanIp(self):
        """Server Public IP
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._User = params.get("User")
        self._Value = params.get("Value")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetFilters(AbstractModel):
    """Container security
    Description key-value pair filter, which is used for conditional filtering queries. For example, filter by ID, name, and status.
    If there are multiple Filters, the logical relationship between them is AND.
    If there are multiple Values in the same Filter, the logical relationship between the Values under the same Filter is OR.

    """

    def __init__(self):
        r"""
        :param _Name: Name of filter key
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Whether to use fuzzy query
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        """Name of filter key
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        """Whether to use fuzzy query
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetInitServiceBaseInfo(AbstractModel):
    """List of asset management startup services

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Type: Type:
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Print monitor
12: Resource manager
13: Driver service
14: Log-in
        :type Type: int
        :param _Status: Default enabling status: 0 - disabled; 1 - enabled
        :type Status: int
        :param _User: Startup user
        :type User: str
        :param _Path: Path
        :type Path: str
        :param _MachineIp: Server IP
        :type MachineIp: str
        :param _MachineName: Name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _UpdateTime: Data update time
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether newly added [0: no|1: yes]
        :type IsNew: int
        :param _MachineWanIp: Server Public IP
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _IsAutoRun: Start at boot [0: No|1: Yes]
        :type IsAutoRun: int
        """
        self._Name = None
        self._Type = None
        self._Status = None
        self._User = None
        self._Path = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Quuid = None
        self._Uuid = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None
        self._IsAutoRun = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Type:
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Print monitor
12: Resource manager
13: Driver service
14: Log-in
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Status(self):
        """Default enabling status: 0 - disabled; 1 - enabled
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def User(self):
        """Startup user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def MachineIp(self):
        """Server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def UpdateTime(self):
        """Data update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether newly added [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineWanIp(self):
        """Server Public IP
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def IsAutoRun(self):
        """Start at boot [0: No|1: Yes]
        :rtype: int
        """
        return self._IsAutoRun

    @IsAutoRun.setter
    def IsAutoRun(self, IsAutoRun):
        self._IsAutoRun = IsAutoRun


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._Status = params.get("Status")
        self._User = params.get("User")
        self._Path = params.get("Path")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._IsAutoRun = params.get("IsAutoRun")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetJarBaseInfo(AbstractModel):
    """List of asset management JAR packages

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Type: Type. 1: application; 2: system class library; 3: web service built-in library; 8: others.
        :type Type: int
        :param _Status: Whether it is executable. 0: unknown; 1: yes; 2: no.
        :type Status: int
        :param _Version: Version
        :type Version: str
        :param _Path: Path
        :type Path: str
        :param _MachineIp: Server IP address
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Id: JAR package ID
        :type Id: str
        :param _Md5: JAR package Md5
        :type Md5: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether it is newly added [0: no | 1: yes]
        :type IsNew: int
        :param _MachineWanIp: Server public IP
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Name = None
        self._Type = None
        self._Status = None
        self._Version = None
        self._Path = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Id = None
        self._Md5 = None
        self._Quuid = None
        self._Uuid = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Type. 1: application; 2: system class library; 3: web service built-in library; 8: others.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Status(self):
        """Whether it is executable. 0: unknown; 1: yes; 2: no.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def MachineIp(self):
        """Server IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Id(self):
        """JAR package ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Md5(self):
        """JAR package Md5
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether it is newly added [0: no | 1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineWanIp(self):
        """Server public IP
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._Status = params.get("Status")
        self._Version = params.get("Version")
        self._Path = params.get("Path")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Id = params.get("Id")
        self._Md5 = params.get("Md5")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetJarDetail(AbstractModel):
    """Asset management jar package details

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Type: Type: 1: application; 2: system library; 3: Web service built-in library; 8: other
        :type Type: int
        :param _Status: Whether executable: 0: unknown; 1: yes; 2: no
        :type Status: int
        :param _Version: Version
        :type Version: str
        :param _Path: Path
        :type Path: str
        :param _MachineIp: Server IP
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Process: Reference process list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetAppProcessInfo
        :param _Md5: Jar package Md5
Note: This field may return null, indicating that no valid values can be obtained.
        :type Md5: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        """
        self._Name = None
        self._Type = None
        self._Status = None
        self._Version = None
        self._Path = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Process = None
        self._Md5 = None
        self._UpdateTime = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """Type: 1: application; 2: system library; 3: Web service built-in library; 8: other
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Status(self):
        """Whether executable: 0: unknown; 1: yes; 2: no
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Path(self):
        """Path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def MachineIp(self):
        """Server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Process(self):
        """Reference process list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetAppProcessInfo
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def Md5(self):
        """Jar package Md5
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        self._Status = params.get("Status")
        self._Version = params.get("Version")
        self._Path = params.get("Path")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetAppProcessInfo()
                obj._deserialize(item)
                self._Process.append(obj)
        self._Md5 = params.get("Md5")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetKeyVal(AbstractModel):
    """Generic data structure of Key-val type

    """

    def __init__(self):
        r"""
        :param _Key: Tag
        :type Key: str
        :param _Value: Quantity
        :type Value: int
        :param _Desc: Description information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Desc: str
        :param _NewCount: Number of additions today
Note: This field may return null, indicating that no valid values can be obtained.
        :type NewCount: int
        """
        self._Key = None
        self._Value = None
        self._Desc = None
        self._NewCount = None

    @property
    def Key(self):
        """Tag
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Quantity
        :rtype: int
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Desc(self):
        """Description information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def NewCount(self):
        """Number of additions today
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NewCount

    @NewCount.setter
    def NewCount(self, NewCount):
        self._NewCount = NewCount


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        self._Desc = params.get("Desc")
        self._NewCount = params.get("NewCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetLoadDetail(AbstractModel):
    """Asset management load information

    """

    def __init__(self):
        r"""
        :param _MachineName: Host name
        :type MachineName: str
        :param _Desc: Description
        :type Desc: str
        :param _Value: Load
        :type Value: float
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._MachineName = None
        self._Desc = None
        self._Value = None
        self._Quuid = None
        self._Uuid = None

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Value(self):
        """Load
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._MachineName = params.get("MachineName")
        self._Desc = params.get("Desc")
        self._Value = params.get("Value")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetLoadSummary(AbstractModel):
    """Resource load overview

    """

    def __init__(self):
        r"""
        :param _Counts: Load amount array, in ascending order:
[
0% or unknown quantity
0%～20%
20%～50%
50%～80%
80%～100%
]
        :type Counts: list of int non-negative
        :param _Top5: Top 5 Load
Note: This field may return null, indicating that no valid values can be obtained.
        :type Top5: list of AssetLoadDetail
        """
        self._Counts = None
        self._Top5 = None

    @property
    def Counts(self):
        """Load amount array, in ascending order:
[
0% or unknown quantity
0%～20%
20%～50%
50%～80%
80%～100%
]
        :rtype: list of int non-negative
        """
        return self._Counts

    @Counts.setter
    def Counts(self, Counts):
        self._Counts = Counts

    @property
    def Top5(self):
        """Top 5 Load
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetLoadDetail
        """
        return self._Top5

    @Top5.setter
    def Top5(self, Top5):
        self._Top5 = Top5


    def _deserialize(self, params):
        self._Counts = params.get("Counts")
        if params.get("Top5") is not None:
            self._Top5 = []
            for item in params.get("Top5"):
                obj = AssetLoadDetail()
                obj._deserialize(item)
                self._Top5.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetMachineBaseInfo(AbstractModel):
    """Basic information on the server list in asset fingerprint

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _MachineIp: Private IP address of server
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system name
        :type OsInfo: str
        :param _Cpu: CPU information
        :type Cpu: str
        :param _MemSize: Memory capacity, in GB
        :type MemSize: int
        :param _MemLoad: Memory utilization, in percentage
        :type MemLoad: str
        :param _DiskSize: Hard disk capacity, in GB
        :type DiskSize: int
        :param _DiskLoad: Hard disk utilization, in percentage
        :type DiskLoad: str
        :param _PartitionCount: Number of partitions
        :type PartitionCount: int
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _ProjectId: Business group ID
        :type ProjectId: int
        :param _CpuSize: CPU count
        :type CpuSize: int
        :param _CpuLoad: CPU utilization, in percentage
        :type CpuLoad: str
        :param _Tag: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _IsNew: Whether it is newly added [0 - no;1 - yes]
        :type IsNew: int
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _CpuLoadNum: CPU load readings (only valid for Linux systems)
Note: This field may return null, indicating that no valid values can be obtained.
        :type CpuLoadNum: str
        """
        self._Quuid = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Cpu = None
        self._MemSize = None
        self._MemLoad = None
        self._DiskSize = None
        self._DiskLoad = None
        self._PartitionCount = None
        self._MachineWanIp = None
        self._ProjectId = None
        self._CpuSize = None
        self._CpuLoad = None
        self._Tag = None
        self._UpdateTime = None
        self._IsNew = None
        self._FirstTime = None
        self._MachineExtraInfo = None
        self._CpuLoadNum = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Private IP address of server
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system name
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Cpu(self):
        """CPU information
        :rtype: str
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def MemSize(self):
        """Memory capacity, in GB
        :rtype: int
        """
        return self._MemSize

    @MemSize.setter
    def MemSize(self, MemSize):
        self._MemSize = MemSize

    @property
    def MemLoad(self):
        """Memory utilization, in percentage
        :rtype: str
        """
        return self._MemLoad

    @MemLoad.setter
    def MemLoad(self, MemLoad):
        self._MemLoad = MemLoad

    @property
    def DiskSize(self):
        """Hard disk capacity, in GB
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def DiskLoad(self):
        """Hard disk utilization, in percentage
        :rtype: str
        """
        return self._DiskLoad

    @DiskLoad.setter
    def DiskLoad(self, DiskLoad):
        self._DiskLoad = DiskLoad

    @property
    def PartitionCount(self):
        """Number of partitions
        :rtype: int
        """
        return self._PartitionCount

    @PartitionCount.setter
    def PartitionCount(self, PartitionCount):
        self._PartitionCount = PartitionCount

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def ProjectId(self):
        """Business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CpuSize(self):
        """CPU count
        :rtype: int
        """
        return self._CpuSize

    @CpuSize.setter
    def CpuSize(self, CpuSize):
        self._CpuSize = CpuSize

    @property
    def CpuLoad(self):
        """CPU utilization, in percentage
        :rtype: str
        """
        return self._CpuLoad

    @CpuLoad.setter
    def CpuLoad(self, CpuLoad):
        self._CpuLoad = CpuLoad

    @property
    def Tag(self):
        """Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def IsNew(self):
        """Whether it is newly added [0 - no;1 - yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def CpuLoadNum(self):
        """CPU load readings (only valid for Linux systems)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CpuLoadNum

    @CpuLoadNum.setter
    def CpuLoadNum(self, CpuLoadNum):
        self._CpuLoadNum = CpuLoadNum


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Cpu = params.get("Cpu")
        self._MemSize = params.get("MemSize")
        self._MemLoad = params.get("MemLoad")
        self._DiskSize = params.get("DiskSize")
        self._DiskLoad = params.get("DiskLoad")
        self._PartitionCount = params.get("PartitionCount")
        self._MachineWanIp = params.get("MachineWanIp")
        self._ProjectId = params.get("ProjectId")
        self._CpuSize = params.get("CpuSize")
        self._CpuLoad = params.get("CpuLoad")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._UpdateTime = params.get("UpdateTime")
        self._IsNew = params.get("IsNew")
        self._FirstTime = params.get("FirstTime")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._CpuLoadNum = params.get("CpuLoadNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetMachineDetail(AbstractModel):
    """Basic information on the server list in asset fingerprint

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _MachineIp: Private IP address of server
        :type MachineIp: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _OsInfo: Operating system name
        :type OsInfo: str
        :param _Cpu: CPU information
        :type Cpu: str
        :param _MemSize: Memory capacity, in GB
        :type MemSize: int
        :param _MemLoad: Memory utilization, in percentage
        :type MemLoad: str
        :param _DiskSize: Hard disk capacity, in GB
        :type DiskSize: int
        :param _DiskLoad: Hard disk usage, in percentage
        :type DiskLoad: str
        :param _PartitionCount: Number of partitions
        :type PartitionCount: int
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _CpuSize: Number of CPU
        :type CpuSize: int
        :param _CpuLoad: CPU load
        :type CpuLoad: str
        :param _ProtectLevel: Protection Level. 0 Basic Edition; 1 Professional Edition; 2 Premium Edition; 3 General Discount Edition
        :type ProtectLevel: int
        :param _RiskStatus: Risk status: UNKNOW - unknown; RISK - risky; SAFT - Safe
        :type RiskStatus: str
        :param _ProtectDays: Days protected
        :type ProtectDays: int
        :param _BuyTime: Professional edition activation time
        :type BuyTime: str
        :param _EndTime: Professional edition expiration time
        :type EndTime: str
        :param _CoreVersion: Kernel version
        :type CoreVersion: str
        :param _OsType: linux/windows
        :type OsType: str
        :param _AgentVersion: Agent version
        :type AgentVersion: str
        :param _InstallTime: Installation time
        :type InstallTime: str
        :param _BootTime: System startup time
        :type BootTime: str
        :param _LastLiveTime: Last online time
        :type LastLiveTime: str
        :param _Producer: Manufacturer
        :type Producer: str
        :param _SerialNumber: Serial number
        :type SerialNumber: str
        :param _NetCards: Network interface

        :type NetCards: list of AssetNetworkCardInfo
        :param _Disks: Partition
        :type Disks: list of AssetDiskPartitionInfo
        :param _Status: 0: online; 1: offline
        :type Status: int
        :param _ProjectId: Business group ID
        :type ProjectId: int
        :param _DeviceVersion: Server model
        :type DeviceVersion: str
        :param _OfflineTime: Offline time
Note: This field may return null, indicating that no valid values can be obtained.
        :type OfflineTime: str
        :param _InstanceId: Host ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _CpuLoadVul: CpuLoadVul
Note: This field may return null, indicating that no valid values can be obtained.
        :type CpuLoadVul: str
        :param _FirstTime: Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstTime: str
        """
        self._Quuid = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Cpu = None
        self._MemSize = None
        self._MemLoad = None
        self._DiskSize = None
        self._DiskLoad = None
        self._PartitionCount = None
        self._MachineWanIp = None
        self._CpuSize = None
        self._CpuLoad = None
        self._ProtectLevel = None
        self._RiskStatus = None
        self._ProtectDays = None
        self._BuyTime = None
        self._EndTime = None
        self._CoreVersion = None
        self._OsType = None
        self._AgentVersion = None
        self._InstallTime = None
        self._BootTime = None
        self._LastLiveTime = None
        self._Producer = None
        self._SerialNumber = None
        self._NetCards = None
        self._Disks = None
        self._Status = None
        self._ProjectId = None
        self._DeviceVersion = None
        self._OfflineTime = None
        self._InstanceId = None
        self._UpdateTime = None
        self._MachineExtraInfo = None
        self._CpuLoadVul = None
        self._FirstTime = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Private IP address of server
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system name
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Cpu(self):
        """CPU information
        :rtype: str
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def MemSize(self):
        """Memory capacity, in GB
        :rtype: int
        """
        return self._MemSize

    @MemSize.setter
    def MemSize(self, MemSize):
        self._MemSize = MemSize

    @property
    def MemLoad(self):
        """Memory utilization, in percentage
        :rtype: str
        """
        return self._MemLoad

    @MemLoad.setter
    def MemLoad(self, MemLoad):
        self._MemLoad = MemLoad

    @property
    def DiskSize(self):
        """Hard disk capacity, in GB
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def DiskLoad(self):
        """Hard disk usage, in percentage
        :rtype: str
        """
        return self._DiskLoad

    @DiskLoad.setter
    def DiskLoad(self, DiskLoad):
        self._DiskLoad = DiskLoad

    @property
    def PartitionCount(self):
        """Number of partitions
        :rtype: int
        """
        return self._PartitionCount

    @PartitionCount.setter
    def PartitionCount(self, PartitionCount):
        self._PartitionCount = PartitionCount

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def CpuSize(self):
        """Number of CPU
        :rtype: int
        """
        return self._CpuSize

    @CpuSize.setter
    def CpuSize(self, CpuSize):
        self._CpuSize = CpuSize

    @property
    def CpuLoad(self):
        """CPU load
        :rtype: str
        """
        return self._CpuLoad

    @CpuLoad.setter
    def CpuLoad(self, CpuLoad):
        self._CpuLoad = CpuLoad

    @property
    def ProtectLevel(self):
        """Protection Level. 0 Basic Edition; 1 Professional Edition; 2 Premium Edition; 3 General Discount Edition
        :rtype: int
        """
        return self._ProtectLevel

    @ProtectLevel.setter
    def ProtectLevel(self, ProtectLevel):
        self._ProtectLevel = ProtectLevel

    @property
    def RiskStatus(self):
        """Risk status: UNKNOW - unknown; RISK - risky; SAFT - Safe
        :rtype: str
        """
        return self._RiskStatus

    @RiskStatus.setter
    def RiskStatus(self, RiskStatus):
        self._RiskStatus = RiskStatus

    @property
    def ProtectDays(self):
        """Days protected
        :rtype: int
        """
        return self._ProtectDays

    @ProtectDays.setter
    def ProtectDays(self, ProtectDays):
        self._ProtectDays = ProtectDays

    @property
    def BuyTime(self):
        """Professional edition activation time
        :rtype: str
        """
        return self._BuyTime

    @BuyTime.setter
    def BuyTime(self, BuyTime):
        self._BuyTime = BuyTime

    @property
    def EndTime(self):
        """Professional edition expiration time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CoreVersion(self):
        """Kernel version
        :rtype: str
        """
        return self._CoreVersion

    @CoreVersion.setter
    def CoreVersion(self, CoreVersion):
        self._CoreVersion = CoreVersion

    @property
    def OsType(self):
        """linux/windows
        :rtype: str
        """
        return self._OsType

    @OsType.setter
    def OsType(self, OsType):
        self._OsType = OsType

    @property
    def AgentVersion(self):
        """Agent version
        :rtype: str
        """
        return self._AgentVersion

    @AgentVersion.setter
    def AgentVersion(self, AgentVersion):
        self._AgentVersion = AgentVersion

    @property
    def InstallTime(self):
        """Installation time
        :rtype: str
        """
        return self._InstallTime

    @InstallTime.setter
    def InstallTime(self, InstallTime):
        self._InstallTime = InstallTime

    @property
    def BootTime(self):
        """System startup time
        :rtype: str
        """
        return self._BootTime

    @BootTime.setter
    def BootTime(self, BootTime):
        self._BootTime = BootTime

    @property
    def LastLiveTime(self):
        """Last online time
        :rtype: str
        """
        return self._LastLiveTime

    @LastLiveTime.setter
    def LastLiveTime(self, LastLiveTime):
        self._LastLiveTime = LastLiveTime

    @property
    def Producer(self):
        """Manufacturer
        :rtype: str
        """
        return self._Producer

    @Producer.setter
    def Producer(self, Producer):
        self._Producer = Producer

    @property
    def SerialNumber(self):
        """Serial number
        :rtype: str
        """
        return self._SerialNumber

    @SerialNumber.setter
    def SerialNumber(self, SerialNumber):
        self._SerialNumber = SerialNumber

    @property
    def NetCards(self):
        """Network interface

        :rtype: list of AssetNetworkCardInfo
        """
        return self._NetCards

    @NetCards.setter
    def NetCards(self, NetCards):
        self._NetCards = NetCards

    @property
    def Disks(self):
        """Partition
        :rtype: list of AssetDiskPartitionInfo
        """
        return self._Disks

    @Disks.setter
    def Disks(self, Disks):
        self._Disks = Disks

    @property
    def Status(self):
        """0: online; 1: offline
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ProjectId(self):
        """Business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def DeviceVersion(self):
        """Server model
        :rtype: str
        """
        return self._DeviceVersion

    @DeviceVersion.setter
    def DeviceVersion(self, DeviceVersion):
        self._DeviceVersion = DeviceVersion

    @property
    def OfflineTime(self):
        """Offline time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OfflineTime

    @OfflineTime.setter
    def OfflineTime(self, OfflineTime):
        self._OfflineTime = OfflineTime

    @property
    def InstanceId(self):
        """Host ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def CpuLoadVul(self):
        """CpuLoadVul
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CpuLoadVul

    @CpuLoadVul.setter
    def CpuLoadVul(self, CpuLoadVul):
        self._CpuLoadVul = CpuLoadVul

    @property
    def FirstTime(self):
        """Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Cpu = params.get("Cpu")
        self._MemSize = params.get("MemSize")
        self._MemLoad = params.get("MemLoad")
        self._DiskSize = params.get("DiskSize")
        self._DiskLoad = params.get("DiskLoad")
        self._PartitionCount = params.get("PartitionCount")
        self._MachineWanIp = params.get("MachineWanIp")
        self._CpuSize = params.get("CpuSize")
        self._CpuLoad = params.get("CpuLoad")
        self._ProtectLevel = params.get("ProtectLevel")
        self._RiskStatus = params.get("RiskStatus")
        self._ProtectDays = params.get("ProtectDays")
        self._BuyTime = params.get("BuyTime")
        self._EndTime = params.get("EndTime")
        self._CoreVersion = params.get("CoreVersion")
        self._OsType = params.get("OsType")
        self._AgentVersion = params.get("AgentVersion")
        self._InstallTime = params.get("InstallTime")
        self._BootTime = params.get("BootTime")
        self._LastLiveTime = params.get("LastLiveTime")
        self._Producer = params.get("Producer")
        self._SerialNumber = params.get("SerialNumber")
        if params.get("NetCards") is not None:
            self._NetCards = []
            for item in params.get("NetCards"):
                obj = AssetNetworkCardInfo()
                obj._deserialize(item)
                self._NetCards.append(obj)
        if params.get("Disks") is not None:
            self._Disks = []
            for item in params.get("Disks"):
                obj = AssetDiskPartitionInfo()
                obj._deserialize(item)
                self._Disks.append(obj)
        self._Status = params.get("Status")
        self._ProjectId = params.get("ProjectId")
        self._DeviceVersion = params.get("DeviceVersion")
        self._OfflineTime = params.get("OfflineTime")
        self._InstanceId = params.get("InstanceId")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._CpuLoadVul = params.get("CpuLoadVul")
        self._FirstTime = params.get("FirstTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetNetworkCardInfo(AbstractModel):
    """Asset management network interface information

    """

    def __init__(self):
        r"""
        :param _Name: Network interface name
        :type Name: str
        :param _Ip: IPv4 address
        :type Ip: str
        :param _GateWay: Gateway
        :type GateWay: str
        :param _Mac: MAC address
        :type Mac: str
        :param _Ipv6: IPv6 address
        :type Ipv6: str
        :param _DnsServer: DNS server
        :type DnsServer: str
        """
        self._Name = None
        self._Ip = None
        self._GateWay = None
        self._Mac = None
        self._Ipv6 = None
        self._DnsServer = None

    @property
    def Name(self):
        """Network interface name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Ip(self):
        """IPv4 address
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def GateWay(self):
        """Gateway
        :rtype: str
        """
        return self._GateWay

    @GateWay.setter
    def GateWay(self, GateWay):
        self._GateWay = GateWay

    @property
    def Mac(self):
        """MAC address
        :rtype: str
        """
        return self._Mac

    @Mac.setter
    def Mac(self, Mac):
        self._Mac = Mac

    @property
    def Ipv6(self):
        """IPv6 address
        :rtype: str
        """
        return self._Ipv6

    @Ipv6.setter
    def Ipv6(self, Ipv6):
        self._Ipv6 = Ipv6

    @property
    def DnsServer(self):
        """DNS server
        :rtype: str
        """
        return self._DnsServer

    @DnsServer.setter
    def DnsServer(self, DnsServer):
        self._DnsServer = DnsServer


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Ip = params.get("Ip")
        self._GateWay = params.get("GateWay")
        self._Mac = params.get("Mac")
        self._Ipv6 = params.get("Ipv6")
        self._DnsServer = params.get("DnsServer")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetPlanTask(AbstractModel):
    """List of asset management plan tasks

    """

    def __init__(self):
        r"""
        :param _Status: Default enabling status. 1 - enabled; 2 - not enabled
        :type Status: int
        :param _Cycle: Execution cycle
        :type Cycle: str
        :param _Command: Execute command or script
        :type Command: str
        :param _User: Startup user
        :type User: str
        :param _ConfigPath: Configuration file path
        :type ConfigPath: str
        :param _MachineIp: Server IP
        :type MachineIp: str
        :param _MachineName: Name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether newly added [0: no|1: yes]
        :type IsNew: int
        :param _MachineWanIp: Server Public IP
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Status = None
        self._Cycle = None
        self._Command = None
        self._User = None
        self._ConfigPath = None
        self._MachineIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Quuid = None
        self._Uuid = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None

    @property
    def Status(self):
        """Default enabling status. 1 - enabled; 2 - not enabled
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Cycle(self):
        """Execution cycle
        :rtype: str
        """
        return self._Cycle

    @Cycle.setter
    def Cycle(self, Cycle):
        self._Cycle = Cycle

    @property
    def Command(self):
        """Execute command or script
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def User(self):
        """Startup user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def ConfigPath(self):
        """Configuration file path
        :rtype: str
        """
        return self._ConfigPath

    @ConfigPath.setter
    def ConfigPath(self, ConfigPath):
        self._ConfigPath = ConfigPath

    @property
    def MachineIp(self):
        """Server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether newly added [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineWanIp(self):
        """Server Public IP
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Cycle = params.get("Cycle")
        self._Command = params.get("Command")
        self._User = params.get("User")
        self._ConfigPath = params.get("ConfigPath")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetPortBaseInfo(AbstractModel):
    """Basic information of resource management account

    """

    def __init__(self):
        r"""
        :param _MachineIp: Private IP address of the host
        :type MachineIp: str
        :param _MachineWanIp: Public IP address of the host
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessVersion: Process version
        :type ProcessVersion: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _Pid: Process ID
        :type Pid: str
        :param _User: Running user
        :type User: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _Param: Start parameter
        :type Param: str
        :param _Teletype: Process TTY
        :type Teletype: str
        :param _Port: Port
        :type Port: str
        :param _GroupName: User group
        :type GroupName: str
        :param _Md5: Process MD5
        :type Md5: str
        :param _Ppid: Parent process ID
        :type Ppid: str
        :param _ParentProcessName: Parent process name
        :type ParentProcessName: str
        :param _Proto: Port protocol
        :type Proto: str
        :param _BindIp: Bound IP
        :type BindIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether to add [0: no | 1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._ProcessName = None
        self._ProcessVersion = None
        self._ProcessPath = None
        self._Pid = None
        self._User = None
        self._StartTime = None
        self._Param = None
        self._Teletype = None
        self._Port = None
        self._GroupName = None
        self._Md5 = None
        self._Ppid = None
        self._ParentProcessName = None
        self._Proto = None
        self._BindIp = None
        self._MachineName = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Private IP address of the host
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address of the host
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessVersion(self):
        """Process version
        :rtype: str
        """
        return self._ProcessVersion

    @ProcessVersion.setter
    def ProcessVersion(self, ProcessVersion):
        self._ProcessVersion = ProcessVersion

    @property
    def ProcessPath(self):
        """Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def Pid(self):
        """Process ID
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Param(self):
        """Start parameter
        :rtype: str
        """
        return self._Param

    @Param.setter
    def Param(self, Param):
        self._Param = Param

    @property
    def Teletype(self):
        """Process TTY
        :rtype: str
        """
        return self._Teletype

    @Teletype.setter
    def Teletype(self, Teletype):
        self._Teletype = Teletype

    @property
    def Port(self):
        """Port
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def GroupName(self):
        """User group
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName

    @property
    def Md5(self):
        """Process MD5
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def Ppid(self):
        """Parent process ID
        :rtype: str
        """
        return self._Ppid

    @Ppid.setter
    def Ppid(self, Ppid):
        self._Ppid = Ppid

    @property
    def ParentProcessName(self):
        """Parent process name
        :rtype: str
        """
        return self._ParentProcessName

    @ParentProcessName.setter
    def ParentProcessName(self, ParentProcessName):
        self._ParentProcessName = ParentProcessName

    @property
    def Proto(self):
        """Port protocol
        :rtype: str
        """
        return self._Proto

    @Proto.setter
    def Proto(self, Proto):
        self._Proto = Proto

    @property
    def BindIp(self):
        """Bound IP
        :rtype: str
        """
        return self._BindIp

    @BindIp.setter
    def BindIp(self, BindIp):
        self._BindIp = BindIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether to add [0: no | 1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._ProcessName = params.get("ProcessName")
        self._ProcessVersion = params.get("ProcessVersion")
        self._ProcessPath = params.get("ProcessPath")
        self._Pid = params.get("Pid")
        self._User = params.get("User")
        self._StartTime = params.get("StartTime")
        self._Param = params.get("Param")
        self._Teletype = params.get("Teletype")
        self._Port = params.get("Port")
        self._GroupName = params.get("GroupName")
        self._Md5 = params.get("Md5")
        self._Ppid = params.get("Ppid")
        self._ParentProcessName = params.get("ParentProcessName")
        self._Proto = params.get("Proto")
        self._BindIp = params.get("BindIp")
        self._MachineName = params.get("MachineName")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetProcessBaseInfo(AbstractModel):
    """Basic information on the resource management process

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Process name
        :type Name: str
        :param _Desc: Process description
        :type Desc: str
        :param _Path: Process path
        :type Path: str
        :param _Pid: Process ID
        :type Pid: str
        :param _User: Running user
        :type User: str
        :param _StartTime: Startup time
        :type StartTime: str
        :param _Param: Startup parameter
        :type Param: str
        :param _Tty: Process TTY
        :type Tty: str
        :param _Version: Process version
        :type Version: str
        :param _GroupName: Process user group
        :type GroupName: str
        :param _Md5: Process MD5
        :type Md5: str
        :param _Ppid: Parent process ID
        :type Ppid: str
        :param _ParentProcessName: Parent process name
        :type ParentProcessName: str
        :param _Status: Process status
        :type Status: str
        :param _HasSign: Digital signature. 0: no; 1: yes; 999: null (Windows only).
        :type HasSign: int
        :param _InstallByPackage: Whether to install the package. 0: no; 1: yes; 999: null (Linux only).
        :type InstallByPackage: int
        :param _PackageName: Software package name
        :type PackageName: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether new [0: no|1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Desc = None
        self._Path = None
        self._Pid = None
        self._User = None
        self._StartTime = None
        self._Param = None
        self._Tty = None
        self._Version = None
        self._GroupName = None
        self._Md5 = None
        self._Ppid = None
        self._ParentProcessName = None
        self._Status = None
        self._HasSign = None
        self._InstallByPackage = None
        self._PackageName = None
        self._MachineName = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Process name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Process description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Path(self):
        """Process path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Pid(self):
        """Process ID
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def StartTime(self):
        """Startup time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Param(self):
        """Startup parameter
        :rtype: str
        """
        return self._Param

    @Param.setter
    def Param(self, Param):
        self._Param = Param

    @property
    def Tty(self):
        """Process TTY
        :rtype: str
        """
        return self._Tty

    @Tty.setter
    def Tty(self, Tty):
        self._Tty = Tty

    @property
    def Version(self):
        """Process version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def GroupName(self):
        """Process user group
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName

    @property
    def Md5(self):
        """Process MD5
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def Ppid(self):
        """Parent process ID
        :rtype: str
        """
        return self._Ppid

    @Ppid.setter
    def Ppid(self, Ppid):
        self._Ppid = Ppid

    @property
    def ParentProcessName(self):
        """Parent process name
        :rtype: str
        """
        return self._ParentProcessName

    @ParentProcessName.setter
    def ParentProcessName(self, ParentProcessName):
        self._ParentProcessName = ParentProcessName

    @property
    def Status(self):
        """Process status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def HasSign(self):
        """Digital signature. 0: no; 1: yes; 999: null (Windows only).
        :rtype: int
        """
        return self._HasSign

    @HasSign.setter
    def HasSign(self, HasSign):
        self._HasSign = HasSign

    @property
    def InstallByPackage(self):
        """Whether to install the package. 0: no; 1: yes; 999: null (Linux only).
        :rtype: int
        """
        return self._InstallByPackage

    @InstallByPackage.setter
    def InstallByPackage(self, InstallByPackage):
        self._InstallByPackage = InstallByPackage

    @property
    def PackageName(self):
        """Software package name
        :rtype: str
        """
        return self._PackageName

    @PackageName.setter
    def PackageName(self, PackageName):
        self._PackageName = PackageName

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether new [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information

Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Path = params.get("Path")
        self._Pid = params.get("Pid")
        self._User = params.get("User")
        self._StartTime = params.get("StartTime")
        self._Param = params.get("Param")
        self._Tty = params.get("Tty")
        self._Version = params.get("Version")
        self._GroupName = params.get("GroupName")
        self._Md5 = params.get("Md5")
        self._Ppid = params.get("Ppid")
        self._ParentProcessName = params.get("ParentProcessName")
        self._Status = params.get("Status")
        self._HasSign = params.get("HasSign")
        self._InstallByPackage = params.get("InstallByPackage")
        self._PackageName = params.get("PackageName")
        self._MachineName = params.get("MachineName")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetSystemPackageInfo(AbstractModel):
    """Information on resource management system installation package list

    """

    def __init__(self):
        r"""
        :param _Name: Database name
        :type Name: str
        :param _Desc: Description
        :type Desc: str
        :param _Version: Version
        :type Version: str
        :param _InstallTime: Installation time
        :type InstallTime: str
        :param _Type: Type
        :type Type: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _MachineIp: Host IP
        :type MachineIp: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether newly added [0: no|1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Quuid: Host ID
        :type Quuid: str
        :param _Uuid: Agent Id
        :type Uuid: str
        """
        self._Name = None
        self._Desc = None
        self._Version = None
        self._InstallTime = None
        self._Type = None
        self._MachineName = None
        self._MachineIp = None
        self._OsInfo = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None
        self._Quuid = None
        self._Uuid = None

    @property
    def Name(self):
        """Database name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def InstallTime(self):
        """Installation time
        :rtype: str
        """
        return self._InstallTime

    @InstallTime.setter
    def InstallTime(self, InstallTime):
        self._InstallTime = InstallTime

    @property
    def Type(self):
        """Type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineIp(self):
        """Host IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether newly added [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Agent Id
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Version = params.get("Version")
        self._InstallTime = params.get("InstallTime")
        self._Type = params.get("Type")
        self._MachineName = params.get("MachineName")
        self._MachineIp = params.get("MachineIp")
        self._OsInfo = params.get("OsInfo")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetType(AbstractModel):
    """Asset fingerprint type description

    """

    def __init__(self):
        r"""
        :param _Id: Type ID
        :type Id: int
        :param _Name: Type name
        :type Name: str
        """
        self._Id = None
        self._Name = None

    @property
    def Id(self):
        """Type ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Type name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetUserBaseInfo(AbstractModel):
    """Resource management account basic information

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uid: Account UID
        :type Uid: str
        :param _Gid: Account GID
        :type Gid: str
        :param _Status: Account status. 0: disabled; 1: enabled
        :type Status: int
        :param _IsRoot: Whether there is root permission. 0: no; 1: yes; 999: null (Linux only)
        :type IsRoot: int
        :param _LoginType: Log-in method. 0: log-in not allowed; 1: only key-based log-in allowed; 2: only password-based log-in allowed; 3: both key-based log-in and password-based log-in allowed; 999: null (Linux only)
        :type LoginType: int
        :param _LastLoginTime: Last log-in time
        :type LastLoginTime: str
        :param _Name: Account name
        :type Name: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _UserType: Account type. 0: guest user; 1: standard user; 2: administrator user; 999: null (Windows only)
        :type UserType: int
        :param _IsDomain: Whether a domain account. 0: no; 1: yes; 2: no; 999: null (Windows only)
        :type IsDomain: int
        :param _IsSudo: Whether there is sudo permissions: 1: yes; 0: No; 999: null (Linux only)
        :type IsSudo: int
        :param _IsSshLogin: Whether ssh log-in allowed. 1: yes; 0: no; 999: null (Linux only)
        :type IsSshLogin: int
        :param _HomePath: Home directory
        :type HomePath: str
        :param _Shell: Shell path (Linux only)
        :type Shell: str
        :param _ShellLoginStatus: Whether shell log-in allowed. 0: no; 1: yes (Linux only)
        :type ShellLoginStatus: int
        :param _PasswordChangeTime: Password modification time
        :type PasswordChangeTime: str
        :param _PasswordDueTime: Password expiration time (Linux only)
        :type PasswordDueTime: str
        :param _PasswordLockDays: Password locking time (unit: day): -1 - never locked; 999 - null (Linux only)
        :type PasswordLockDays: int
        :param _PasswordStatus: Password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked; 999 - null (Linux only)
        :type PasswordStatus: int
        :param _UpdateTime: Update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether new [0: no|1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Uuid = None
        self._Quuid = None
        self._Uid = None
        self._Gid = None
        self._Status = None
        self._IsRoot = None
        self._LoginType = None
        self._LastLoginTime = None
        self._Name = None
        self._ProjectId = None
        self._UserType = None
        self._IsDomain = None
        self._IsSudo = None
        self._IsSshLogin = None
        self._HomePath = None
        self._Shell = None
        self._ShellLoginStatus = None
        self._PasswordChangeTime = None
        self._PasswordDueTime = None
        self._PasswordLockDays = None
        self._PasswordStatus = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uid(self):
        """Account UID
        :rtype: str
        """
        return self._Uid

    @Uid.setter
    def Uid(self, Uid):
        self._Uid = Uid

    @property
    def Gid(self):
        """Account GID
        :rtype: str
        """
        return self._Gid

    @Gid.setter
    def Gid(self, Gid):
        self._Gid = Gid

    @property
    def Status(self):
        """Account status. 0: disabled; 1: enabled
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsRoot(self):
        """Whether there is root permission. 0: no; 1: yes; 999: null (Linux only)
        :rtype: int
        """
        return self._IsRoot

    @IsRoot.setter
    def IsRoot(self, IsRoot):
        self._IsRoot = IsRoot

    @property
    def LoginType(self):
        """Log-in method. 0: log-in not allowed; 1: only key-based log-in allowed; 2: only password-based log-in allowed; 3: both key-based log-in and password-based log-in allowed; 999: null (Linux only)
        :rtype: int
        """
        return self._LoginType

    @LoginType.setter
    def LoginType(self, LoginType):
        self._LoginType = LoginType

    @property
    def LastLoginTime(self):
        """Last log-in time
        :rtype: str
        """
        return self._LastLoginTime

    @LastLoginTime.setter
    def LastLoginTime(self, LastLoginTime):
        self._LastLoginTime = LastLoginTime

    @property
    def Name(self):
        """Account name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def UserType(self):
        """Account type. 0: guest user; 1: standard user; 2: administrator user; 999: null (Windows only)
        :rtype: int
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def IsDomain(self):
        """Whether a domain account. 0: no; 1: yes; 2: no; 999: null (Windows only)
        :rtype: int
        """
        return self._IsDomain

    @IsDomain.setter
    def IsDomain(self, IsDomain):
        self._IsDomain = IsDomain

    @property
    def IsSudo(self):
        """Whether there is sudo permissions: 1: yes; 0: No; 999: null (Linux only)
        :rtype: int
        """
        return self._IsSudo

    @IsSudo.setter
    def IsSudo(self, IsSudo):
        self._IsSudo = IsSudo

    @property
    def IsSshLogin(self):
        """Whether ssh log-in allowed. 1: yes; 0: no; 999: null (Linux only)
        :rtype: int
        """
        return self._IsSshLogin

    @IsSshLogin.setter
    def IsSshLogin(self, IsSshLogin):
        self._IsSshLogin = IsSshLogin

    @property
    def HomePath(self):
        """Home directory
        :rtype: str
        """
        return self._HomePath

    @HomePath.setter
    def HomePath(self, HomePath):
        self._HomePath = HomePath

    @property
    def Shell(self):
        """Shell path (Linux only)
        :rtype: str
        """
        return self._Shell

    @Shell.setter
    def Shell(self, Shell):
        self._Shell = Shell

    @property
    def ShellLoginStatus(self):
        """Whether shell log-in allowed. 0: no; 1: yes (Linux only)
        :rtype: int
        """
        return self._ShellLoginStatus

    @ShellLoginStatus.setter
    def ShellLoginStatus(self, ShellLoginStatus):
        self._ShellLoginStatus = ShellLoginStatus

    @property
    def PasswordChangeTime(self):
        """Password modification time
        :rtype: str
        """
        return self._PasswordChangeTime

    @PasswordChangeTime.setter
    def PasswordChangeTime(self, PasswordChangeTime):
        self._PasswordChangeTime = PasswordChangeTime

    @property
    def PasswordDueTime(self):
        """Password expiration time (Linux only)
        :rtype: str
        """
        return self._PasswordDueTime

    @PasswordDueTime.setter
    def PasswordDueTime(self, PasswordDueTime):
        self._PasswordDueTime = PasswordDueTime

    @property
    def PasswordLockDays(self):
        """Password locking time (unit: day): -1 - never locked; 999 - null (Linux only)
        :rtype: int
        """
        return self._PasswordLockDays

    @PasswordLockDays.setter
    def PasswordLockDays(self, PasswordLockDays):
        self._PasswordLockDays = PasswordLockDays

    @property
    def PasswordStatus(self):
        """Password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked; 999 - null (Linux only)
        :rtype: int
        """
        return self._PasswordStatus

    @PasswordStatus.setter
    def PasswordStatus(self, PasswordStatus):
        self._PasswordStatus = PasswordStatus

    @property
    def UpdateTime(self):
        """Update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether new [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Uid = params.get("Uid")
        self._Gid = params.get("Gid")
        self._Status = params.get("Status")
        self._IsRoot = params.get("IsRoot")
        self._LoginType = params.get("LoginType")
        self._LastLoginTime = params.get("LastLoginTime")
        self._Name = params.get("Name")
        self._ProjectId = params.get("ProjectId")
        self._UserType = params.get("UserType")
        self._IsDomain = params.get("IsDomain")
        self._IsSudo = params.get("IsSudo")
        self._IsSshLogin = params.get("IsSshLogin")
        self._HomePath = params.get("HomePath")
        self._Shell = params.get("Shell")
        self._ShellLoginStatus = params.get("ShellLoginStatus")
        self._PasswordChangeTime = params.get("PasswordChangeTime")
        self._PasswordDueTime = params.get("PasswordDueTime")
        self._PasswordLockDays = params.get("PasswordLockDays")
        self._PasswordStatus = params.get("PasswordStatus")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetUserDetail(AbstractModel):
    """Basic information for resource management account

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uid: Account UID
        :type Uid: str
        :param _Gid: Account GID
        :type Gid: str
        :param _Status: Account status. 0: disabled; 1: enabled.
        :type Status: int
        :param _IsRoot: Whether there is root permission. 0: no; 1: yes; 999: null (Linux only).
        :type IsRoot: int
        :param _LastLoginTime: Last log-in time
        :type LastLoginTime: str
        :param _Name: Account name
        :type Name: str
        :param _UserType: Account type. 0: guest user; 1: standard user; 2: administrator user; 999: null (Windows only).
        :type UserType: int
        :param _IsDomain: Whether the account is a domain account. 0: no; 1: yes; 999: null (Windows only).
        :type IsDomain: int
        :param _IsSshLogin: Whether SSH log-in allowed. 1: yes; 0: no; 999: null (Linux only).
        :type IsSshLogin: int
        :param _HomePath: Home directory
        :type HomePath: str
        :param _Shell: Shell path (Linux only)
        :type Shell: str
        :param _ShellLoginStatus: Whether shell log-in allowed. 0: no; 1: yes (Linux only).
        :type ShellLoginStatus: int
        :param _PasswordChangeTime: Password modification time
        :type PasswordChangeTime: str
        :param _PasswordDueTime: Password expiration time (Linux only)
        :type PasswordDueTime: str
        :param _PasswordLockDays: Password locking time (unit: day). -1: never locked; 999: null (Linux only).
        :type PasswordLockDays: int
        :param _Remark: Remarks
        :type Remark: str
        :param _GroupName: User group name
        :type GroupName: str
        :param _DisableTime: Account expiration time
        :type DisableTime: str
        :param _LastLoginTerminal: Last log-in terminal
        :type LastLoginTerminal: str
        :param _LastLoginLoc: Last log-in location
        :type LastLoginLoc: str
        :param _LastLoginIp: Last log-in IP address
        :type LastLoginIp: str
        :param _PasswordWarnDays: Password expiration reminder, in days
        :type PasswordWarnDays: int
        :param _PasswordChangeType: Password change settings. 0: not allowed; 1: allowed.
        :type PasswordChangeType: int
        :param _Keys: User public key listNote: This field may return null, indicating that no valid values can be obtained.
        :type Keys: list of AssetUserKeyInfo
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        """
        self._MachineIp = None
        self._MachineName = None
        self._Uuid = None
        self._Quuid = None
        self._Uid = None
        self._Gid = None
        self._Status = None
        self._IsRoot = None
        self._LastLoginTime = None
        self._Name = None
        self._UserType = None
        self._IsDomain = None
        self._IsSshLogin = None
        self._HomePath = None
        self._Shell = None
        self._ShellLoginStatus = None
        self._PasswordChangeTime = None
        self._PasswordDueTime = None
        self._PasswordLockDays = None
        self._Remark = None
        self._GroupName = None
        self._DisableTime = None
        self._LastLoginTerminal = None
        self._LastLoginLoc = None
        self._LastLoginIp = None
        self._PasswordWarnDays = None
        self._PasswordChangeType = None
        self._Keys = None
        self._UpdateTime = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uid(self):
        """Account UID
        :rtype: str
        """
        return self._Uid

    @Uid.setter
    def Uid(self, Uid):
        self._Uid = Uid

    @property
    def Gid(self):
        """Account GID
        :rtype: str
        """
        return self._Gid

    @Gid.setter
    def Gid(self, Gid):
        self._Gid = Gid

    @property
    def Status(self):
        """Account status. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsRoot(self):
        """Whether there is root permission. 0: no; 1: yes; 999: null (Linux only).
        :rtype: int
        """
        return self._IsRoot

    @IsRoot.setter
    def IsRoot(self, IsRoot):
        self._IsRoot = IsRoot

    @property
    def LastLoginTime(self):
        """Last log-in time
        :rtype: str
        """
        return self._LastLoginTime

    @LastLoginTime.setter
    def LastLoginTime(self, LastLoginTime):
        self._LastLoginTime = LastLoginTime

    @property
    def Name(self):
        """Account name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def UserType(self):
        """Account type. 0: guest user; 1: standard user; 2: administrator user; 999: null (Windows only).
        :rtype: int
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def IsDomain(self):
        """Whether the account is a domain account. 0: no; 1: yes; 999: null (Windows only).
        :rtype: int
        """
        return self._IsDomain

    @IsDomain.setter
    def IsDomain(self, IsDomain):
        self._IsDomain = IsDomain

    @property
    def IsSshLogin(self):
        """Whether SSH log-in allowed. 1: yes; 0: no; 999: null (Linux only).
        :rtype: int
        """
        return self._IsSshLogin

    @IsSshLogin.setter
    def IsSshLogin(self, IsSshLogin):
        self._IsSshLogin = IsSshLogin

    @property
    def HomePath(self):
        """Home directory
        :rtype: str
        """
        return self._HomePath

    @HomePath.setter
    def HomePath(self, HomePath):
        self._HomePath = HomePath

    @property
    def Shell(self):
        """Shell path (Linux only)
        :rtype: str
        """
        return self._Shell

    @Shell.setter
    def Shell(self, Shell):
        self._Shell = Shell

    @property
    def ShellLoginStatus(self):
        """Whether shell log-in allowed. 0: no; 1: yes (Linux only).
        :rtype: int
        """
        return self._ShellLoginStatus

    @ShellLoginStatus.setter
    def ShellLoginStatus(self, ShellLoginStatus):
        self._ShellLoginStatus = ShellLoginStatus

    @property
    def PasswordChangeTime(self):
        """Password modification time
        :rtype: str
        """
        return self._PasswordChangeTime

    @PasswordChangeTime.setter
    def PasswordChangeTime(self, PasswordChangeTime):
        self._PasswordChangeTime = PasswordChangeTime

    @property
    def PasswordDueTime(self):
        """Password expiration time (Linux only)
        :rtype: str
        """
        return self._PasswordDueTime

    @PasswordDueTime.setter
    def PasswordDueTime(self, PasswordDueTime):
        self._PasswordDueTime = PasswordDueTime

    @property
    def PasswordLockDays(self):
        """Password locking time (unit: day). -1: never locked; 999: null (Linux only).
        :rtype: int
        """
        return self._PasswordLockDays

    @PasswordLockDays.setter
    def PasswordLockDays(self, PasswordLockDays):
        self._PasswordLockDays = PasswordLockDays

    @property
    def Remark(self):
        """Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def GroupName(self):
        """User group name
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName

    @property
    def DisableTime(self):
        """Account expiration time
        :rtype: str
        """
        return self._DisableTime

    @DisableTime.setter
    def DisableTime(self, DisableTime):
        self._DisableTime = DisableTime

    @property
    def LastLoginTerminal(self):
        """Last log-in terminal
        :rtype: str
        """
        return self._LastLoginTerminal

    @LastLoginTerminal.setter
    def LastLoginTerminal(self, LastLoginTerminal):
        self._LastLoginTerminal = LastLoginTerminal

    @property
    def LastLoginLoc(self):
        """Last log-in location
        :rtype: str
        """
        return self._LastLoginLoc

    @LastLoginLoc.setter
    def LastLoginLoc(self, LastLoginLoc):
        self._LastLoginLoc = LastLoginLoc

    @property
    def LastLoginIp(self):
        """Last log-in IP address
        :rtype: str
        """
        return self._LastLoginIp

    @LastLoginIp.setter
    def LastLoginIp(self, LastLoginIp):
        self._LastLoginIp = LastLoginIp

    @property
    def PasswordWarnDays(self):
        """Password expiration reminder, in days
        :rtype: int
        """
        return self._PasswordWarnDays

    @PasswordWarnDays.setter
    def PasswordWarnDays(self, PasswordWarnDays):
        self._PasswordWarnDays = PasswordWarnDays

    @property
    def PasswordChangeType(self):
        """Password change settings. 0: not allowed; 1: allowed.
        :rtype: int
        """
        return self._PasswordChangeType

    @PasswordChangeType.setter
    def PasswordChangeType(self, PasswordChangeType):
        self._PasswordChangeType = PasswordChangeType

    @property
    def Keys(self):
        """User public key listNote: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetUserKeyInfo
        """
        return self._Keys

    @Keys.setter
    def Keys(self, Keys):
        self._Keys = Keys

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Uid = params.get("Uid")
        self._Gid = params.get("Gid")
        self._Status = params.get("Status")
        self._IsRoot = params.get("IsRoot")
        self._LastLoginTime = params.get("LastLoginTime")
        self._Name = params.get("Name")
        self._UserType = params.get("UserType")
        self._IsDomain = params.get("IsDomain")
        self._IsSshLogin = params.get("IsSshLogin")
        self._HomePath = params.get("HomePath")
        self._Shell = params.get("Shell")
        self._ShellLoginStatus = params.get("ShellLoginStatus")
        self._PasswordChangeTime = params.get("PasswordChangeTime")
        self._PasswordDueTime = params.get("PasswordDueTime")
        self._PasswordLockDays = params.get("PasswordLockDays")
        self._Remark = params.get("Remark")
        self._GroupName = params.get("GroupName")
        self._DisableTime = params.get("DisableTime")
        self._LastLoginTerminal = params.get("LastLoginTerminal")
        self._LastLoginLoc = params.get("LastLoginLoc")
        self._LastLoginIp = params.get("LastLoginIp")
        self._PasswordWarnDays = params.get("PasswordWarnDays")
        self._PasswordChangeType = params.get("PasswordChangeType")
        if params.get("Keys") is not None:
            self._Keys = []
            for item in params.get("Keys"):
                obj = AssetUserKeyInfo()
                obj._deserialize(item)
                self._Keys.append(obj)
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetUserKeyInfo(AbstractModel):
    """Details of the asset management account key

    """

    def __init__(self):
        r"""
        :param _Value: Public key value
        :type Value: str
        :param _Comment: Public key remarks
        :type Comment: str
        :param _EncryptType: Encryption method
        :type EncryptType: str
        """
        self._Value = None
        self._Comment = None
        self._EncryptType = None

    @property
    def Value(self):
        """Public key value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Comment(self):
        """Public key remarks
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment

    @property
    def EncryptType(self):
        """Encryption method
        :rtype: str
        """
        return self._EncryptType

    @EncryptType.setter
    def EncryptType(self, EncryptType):
        self._EncryptType = EncryptType


    def _deserialize(self, params):
        self._Value = params.get("Value")
        self._Comment = params.get("Comment")
        self._EncryptType = params.get("EncryptType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebAppBaseInfo(AbstractModel):
    """List of the information on the resource management web application

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating system information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Application name
        :type Name: str
        :param _Version: Version
        :type Version: str
        :param _RootPath: Root path
        :type RootPath: str
        :param _ServiceType: Service type
        :type ServiceType: str
        :param _Domain: Site domain name
        :type Domain: str
        :param _VirtualPath: Virtual path
        :type VirtualPath: str
        :param _PluginCount: Number of plugins
        :type PluginCount: int
        :param _Id: Application ID
        :type Id: str
        :param _Desc: Application description
        :type Desc: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether it is newly added [0: no | 1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Version = None
        self._RootPath = None
        self._ServiceType = None
        self._Domain = None
        self._VirtualPath = None
        self._PluginCount = None
        self._Id = None
        self._Desc = None
        self._MachineName = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating system information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Application name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def RootPath(self):
        """Root path
        :rtype: str
        """
        return self._RootPath

    @RootPath.setter
    def RootPath(self, RootPath):
        self._RootPath = RootPath

    @property
    def ServiceType(self):
        """Service type
        :rtype: str
        """
        return self._ServiceType

    @ServiceType.setter
    def ServiceType(self, ServiceType):
        self._ServiceType = ServiceType

    @property
    def Domain(self):
        """Site domain name
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def VirtualPath(self):
        """Virtual path
        :rtype: str
        """
        return self._VirtualPath

    @VirtualPath.setter
    def VirtualPath(self, VirtualPath):
        self._VirtualPath = VirtualPath

    @property
    def PluginCount(self):
        """Number of plugins
        :rtype: int
        """
        return self._PluginCount

    @PluginCount.setter
    def PluginCount(self, PluginCount):
        self._PluginCount = PluginCount

    @property
    def Id(self):
        """Application ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Desc(self):
        """Application description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether it is newly added [0: no | 1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._RootPath = params.get("RootPath")
        self._ServiceType = params.get("ServiceType")
        self._Domain = params.get("Domain")
        self._VirtualPath = params.get("VirtualPath")
        self._PluginCount = params.get("PluginCount")
        self._Id = params.get("Id")
        self._Desc = params.get("Desc")
        self._MachineName = params.get("MachineName")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebAppPluginInfo(AbstractModel):
    """Details of web application plugin for asset management

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Desc: Description
        :type Desc: str
        :param _Version: Version
        :type Version: str
        :param _Link: Link
        :type Link: str
        """
        self._Name = None
        self._Desc = None
        self._Version = None
        self._Link = None

    @property
    def Name(self):
        """Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Link(self):
        """Link
        :rtype: str
        """
        return self._Link

    @Link.setter
    def Link(self, Link):
        self._Link = Link


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Version = params.get("Version")
        self._Link = params.get("Link")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebFrameBaseInfo(AbstractModel):
    """Resource management Web application list information

    """

    def __init__(self):
        r"""
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Database name
        :type Name: str
        :param _Version: Version
        :type Version: str
        :param _Lang: Language
        :type Lang: str
        :param _ServiceType: Service type
        :type ServiceType: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _UpdateTime: Data update time
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether new [0: no|1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Path: Application path
        :type Path: str
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Version = None
        self._Lang = None
        self._ServiceType = None
        self._MachineName = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None
        self._Path = None

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Database name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Lang(self):
        """Language
        :rtype: str
        """
        return self._Lang

    @Lang.setter
    def Lang(self, Lang):
        self._Lang = Lang

    @property
    def ServiceType(self):
        """Service type
        :rtype: str
        """
        return self._ServiceType

    @ServiceType.setter
    def ServiceType(self, ServiceType):
        self._ServiceType = ServiceType

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UpdateTime(self):
        """Data update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether new [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Path(self):
        """Application path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._Lang = params.get("Lang")
        self._ServiceType = params.get("ServiceType")
        self._MachineName = params.get("MachineName")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebLocationBaseInfo(AbstractModel):
    """Asset management Web site list information

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _MachineIp: Private IP address
        :type MachineIp: str
        :param _MachineWanIp: Public IP address
        :type MachineWanIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _OsInfo: Operating system
        :type OsInfo: str
        :param _Name: Domain name
        :type Name: str
        :param _Port: Site port
        :type Port: str
        :param _Proto: Site protocol
        :type Proto: str
        :param _ServiceType: Service type
        :type ServiceType: str
        :param _PathCount: Number of site paths
        :type PathCount: int
        :param _User: Running user
        :type User: str
        :param _MainPath: Home directory
        :type MainPath: str
        :param _MainPathOwner: Home directory owner
        :type MainPathOwner: str
        :param _Permission: Owner permissions
        :type Permission: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
        :type Tag: list of MachineTag
        :param _Id: Web site ID
        :type Id: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether the web service is newly added [0 - no|1 - yes]
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Uuid = None
        self._Quuid = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._MachineName = None
        self._OsInfo = None
        self._Name = None
        self._Port = None
        self._Proto = None
        self._ServiceType = None
        self._PathCount = None
        self._User = None
        self._MainPath = None
        self._MainPathOwner = None
        self._Permission = None
        self._ProjectId = None
        self._Tag = None
        self._Id = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineIp(self):
        """Private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def OsInfo(self):
        """Operating system
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def Name(self):
        """Domain name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Port(self):
        """Site port
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def Proto(self):
        """Site protocol
        :rtype: str
        """
        return self._Proto

    @Proto.setter
    def Proto(self, Proto):
        self._Proto = Proto

    @property
    def ServiceType(self):
        """Service type
        :rtype: str
        """
        return self._ServiceType

    @ServiceType.setter
    def ServiceType(self, ServiceType):
        self._ServiceType = ServiceType

    @property
    def PathCount(self):
        """Number of site paths
        :rtype: int
        """
        return self._PathCount

    @PathCount.setter
    def PathCount(self, PathCount):
        self._PathCount = PathCount

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def MainPath(self):
        """Home directory
        :rtype: str
        """
        return self._MainPath

    @MainPath.setter
    def MainPath(self, MainPath):
        self._MainPath = MainPath

    @property
    def MainPathOwner(self):
        """Home directory owner
        :rtype: str
        """
        return self._MainPathOwner

    @MainPathOwner.setter
    def MainPathOwner(self, MainPathOwner):
        self._MainPathOwner = MainPathOwner

    @property
    def Permission(self):
        """Owner permissions
        :rtype: str
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Id(self):
        """Web site ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether the web service is newly added [0 - no|1 - yes]
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineName = params.get("MachineName")
        self._OsInfo = params.get("OsInfo")
        self._Name = params.get("Name")
        self._Port = params.get("Port")
        self._Proto = params.get("Proto")
        self._ServiceType = params.get("ServiceType")
        self._PathCount = params.get("PathCount")
        self._User = params.get("User")
        self._MainPath = params.get("MainPath")
        self._MainPathOwner = params.get("MainPathOwner")
        self._Permission = params.get("Permission")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Id = params.get("Id")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebLocationInfo(AbstractModel):
    """Asset management Web site list information

    """

    def __init__(self):
        r"""
        :param _Name: Domain name
        :type Name: str
        :param _Port: Site port
        :type Port: str
        :param _Proto: Site protocol
        :type Proto: str
        :param _ServiceType: Service type
        :type ServiceType: str
        :param _SafeStatus: Security module status. 0: not enabled; 1: enabled; 999: null (nginx only)
        :type SafeStatus: int
        :param _User: Running user
        :type User: str
        :param _MainPath: Home directory
        :type MainPath: str
        :param _Command: Startup command
        :type Command: str
        :param _Ip: Bind IP
        :type Ip: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        """
        self._Name = None
        self._Port = None
        self._Proto = None
        self._ServiceType = None
        self._SafeStatus = None
        self._User = None
        self._MainPath = None
        self._Command = None
        self._Ip = None
        self._UpdateTime = None

    @property
    def Name(self):
        """Domain name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Port(self):
        """Site port
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def Proto(self):
        """Site protocol
        :rtype: str
        """
        return self._Proto

    @Proto.setter
    def Proto(self, Proto):
        self._Proto = Proto

    @property
    def ServiceType(self):
        """Service type
        :rtype: str
        """
        return self._ServiceType

    @ServiceType.setter
    def ServiceType(self, ServiceType):
        self._ServiceType = ServiceType

    @property
    def SafeStatus(self):
        """Security module status. 0: not enabled; 1: enabled; 999: null (nginx only)
        :rtype: int
        """
        return self._SafeStatus

    @SafeStatus.setter
    def SafeStatus(self, SafeStatus):
        self._SafeStatus = SafeStatus

    @property
    def User(self):
        """Running user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def MainPath(self):
        """Home directory
        :rtype: str
        """
        return self._MainPath

    @MainPath.setter
    def MainPath(self, MainPath):
        self._MainPath = MainPath

    @property
    def Command(self):
        """Startup command
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def Ip(self):
        """Bind IP
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Port = params.get("Port")
        self._Proto = params.get("Proto")
        self._ServiceType = params.get("ServiceType")
        self._SafeStatus = params.get("SafeStatus")
        self._User = params.get("User")
        self._MainPath = params.get("MainPath")
        self._Command = params.get("Command")
        self._Ip = params.get("Ip")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebLocationPath(AbstractModel):
    """Virtual directory of the asset management web site

    """

    def __init__(self):
        r"""
        :param _VirtualPath: Virtual path
        :type VirtualPath: str
        :param _RealPath: Physical path
        :type RealPath: str
        :param _User: File owner
        :type User: str
        :param _Group: File group
        :type Group: str
        :param _Permission: File permission
        :type Permission: str
        """
        self._VirtualPath = None
        self._RealPath = None
        self._User = None
        self._Group = None
        self._Permission = None

    @property
    def VirtualPath(self):
        """Virtual path
        :rtype: str
        """
        return self._VirtualPath

    @VirtualPath.setter
    def VirtualPath(self, VirtualPath):
        self._VirtualPath = VirtualPath

    @property
    def RealPath(self):
        """Physical path
        :rtype: str
        """
        return self._RealPath

    @RealPath.setter
    def RealPath(self, RealPath):
        self._RealPath = RealPath

    @property
    def User(self):
        """File owner
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Group(self):
        """File group
        :rtype: str
        """
        return self._Group

    @Group.setter
    def Group(self, Group):
        self._Group = Group

    @property
    def Permission(self):
        """File permission
        :rtype: str
        """
        return self._Permission

    @Permission.setter
    def Permission(self, Permission):
        self._Permission = Permission


    def _deserialize(self, params):
        self._VirtualPath = params.get("VirtualPath")
        self._RealPath = params.get("RealPath")
        self._User = params.get("User")
        self._Group = params.get("Group")
        self._Permission = params.get("Permission")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetWebServiceBaseInfo(AbstractModel):
    """List information on resource management Web service

    """

    def __init__(self):
        r"""
        :param _MachineIp: Private IP address of a host
        :type MachineIp: str
        :param _MachineWanIp: Public IP address of a host
        :type MachineWanIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _OsInfo: Operating System Information
        :type OsInfo: str
        :param _ProjectId: Host business group ID
        :type ProjectId: int
        :param _Tag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Name: Database name
        :type Name: str
        :param _Version: Version
        :type Version: str
        :param _BinPath: Binary path
        :type BinPath: str
        :param _User: Startup user
        :type User: str
        :param _InstallPath: Installation path
        :type InstallPath: str
        :param _ConfigPath: Configuration path
        :type ConfigPath: str
        :param _ProcessCount: Number of associated processes
        :type ProcessCount: int
        :param _Id: Web Service ID
        :type Id: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Desc: Description
        :type Desc: str
        :param _UpdateTime: Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _FirstTime: First collection time
        :type FirstTime: str
        :param _IsNew: Whether newly added [0: no|1: yes]
        :type IsNew: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineIp = None
        self._MachineWanIp = None
        self._Quuid = None
        self._Uuid = None
        self._OsInfo = None
        self._ProjectId = None
        self._Tag = None
        self._Name = None
        self._Version = None
        self._BinPath = None
        self._User = None
        self._InstallPath = None
        self._ConfigPath = None
        self._ProcessCount = None
        self._Id = None
        self._MachineName = None
        self._Desc = None
        self._UpdateTime = None
        self._FirstTime = None
        self._IsNew = None
        self._MachineExtraInfo = None

    @property
    def MachineIp(self):
        """Private IP address of a host
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address of a host
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def OsInfo(self):
        """Operating System Information
        :rtype: str
        """
        return self._OsInfo

    @OsInfo.setter
    def OsInfo(self, OsInfo):
        self._OsInfo = OsInfo

    @property
    def ProjectId(self):
        """Host business group ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Tag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Name(self):
        """Database name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        """Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def BinPath(self):
        """Binary path
        :rtype: str
        """
        return self._BinPath

    @BinPath.setter
    def BinPath(self, BinPath):
        self._BinPath = BinPath

    @property
    def User(self):
        """Startup user
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def InstallPath(self):
        """Installation path
        :rtype: str
        """
        return self._InstallPath

    @InstallPath.setter
    def InstallPath(self, InstallPath):
        self._InstallPath = InstallPath

    @property
    def ConfigPath(self):
        """Configuration path
        :rtype: str
        """
        return self._ConfigPath

    @ConfigPath.setter
    def ConfigPath(self, ConfigPath):
        self._ConfigPath = ConfigPath

    @property
    def ProcessCount(self):
        """Number of associated processes
        :rtype: int
        """
        return self._ProcessCount

    @ProcessCount.setter
    def ProcessCount(self, ProcessCount):
        self._ProcessCount = ProcessCount

    @property
    def Id(self):
        """Web Service ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Desc(self):
        """Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def UpdateTime(self):
        """Data update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def FirstTime(self):
        """First collection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def IsNew(self):
        """Whether newly added [0: no|1: yes]
        :rtype: int
        """
        return self._IsNew

    @IsNew.setter
    def IsNew(self, IsNew):
        self._IsNew = IsNew

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._OsInfo = params.get("OsInfo")
        self._ProjectId = params.get("ProjectId")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._BinPath = params.get("BinPath")
        self._User = params.get("User")
        self._InstallPath = params.get("InstallPath")
        self._ConfigPath = params.get("ConfigPath")
        self._ProcessCount = params.get("ProcessCount")
        self._Id = params.get("Id")
        self._MachineName = params.get("MachineName")
        self._Desc = params.get("Desc")
        self._UpdateTime = params.get("UpdateTime")
        self._FirstTime = params.get("FirstTime")
        self._IsNew = params.get("IsNew")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttackSource(AbstractModel):
    """Attack backtracking

    """

    def __init__(self):
        r"""
        :param _Nodes: Attack backtracking node description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Nodes: list of AttackSourceNode
        :param _Edges: Attack backtracking node path
Note: This field may return null, indicating that no valid values can be obtained.
        :type Edges: list of AttackSourceEdge
        :param _EventInfoParam: Parameters for requesting details on node-related events
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventInfoParam: str
        """
        self._Nodes = None
        self._Edges = None
        self._EventInfoParam = None

    @property
    def Nodes(self):
        """Attack backtracking node description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AttackSourceNode
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Edges(self):
        """Attack backtracking node path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AttackSourceEdge
        """
        return self._Edges

    @Edges.setter
    def Edges(self, Edges):
        self._Edges = Edges

    @property
    def EventInfoParam(self):
        """Parameters for requesting details on node-related events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EventInfoParam

    @EventInfoParam.setter
    def EventInfoParam(self, EventInfoParam):
        self._EventInfoParam = EventInfoParam


    def _deserialize(self, params):
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = AttackSourceNode()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Edges") is not None:
            self._Edges = []
            for item in params.get("Edges"):
                obj = AttackSourceEdge()
                obj._deserialize(item)
                self._Edges.append(obj)
        self._EventInfoParam = params.get("EventInfoParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttackSourceEdge(AbstractModel):
    """Attack backtracking path description

    """

    def __init__(self):
        r"""
        :param _From: Starting node
        :type From: str
        :param _To: Target node
        :type To: str
        """
        self._From = None
        self._To = None

    @property
    def From(self):
        """Starting node
        :rtype: str
        """
        return self._From

    @From.setter
    def From(self, From):
        self._From = From

    @property
    def To(self):
        """Target node
        :rtype: str
        """
        return self._To

    @To.setter
    def To(self, To):
        self._To = To


    def _deserialize(self, params):
        self._From = params.get("From")
        self._To = params.get("To")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttackSourceEvent(AbstractModel):
    """Attack backtracking event

    """

    def __init__(self):
        r"""
        :param _EventType: Event type. 0: virus scanning; 1: abnormal log-in; 2: password cracking; 3: malicious request; 4: high-risk command.
        :type EventType: int
        :param _Content: [Virus scanning] Virus name: VirusName, file name: FileName, file path: FilePath, file size: FileSize, file MD5: MD5, first detection time: CreateTime, last detection time: LatestScanTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Abnormal log-in] Source IP: SrcIp, location: Location, log-in username: UserName, log-in time: LoginTime
[Password cracking] Source IP: SrcIp, location: City and Country, protocol: Protocol, log-in username: UserName, port: Port, attempt count: Count, first attack time: CreateTime, last attack time: ModifyTime
[Malicious request] Malicious request domain name: Url, process: ProcessName, MD5: ProcessMd5, PID: Pid, request count: AccessCount, last request time: MergeTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[High-risk command] Hit rule name: RuleName, rule category: RuleCategory, command content: BashCmd, data source: DetectBy, Log-in user: User, PID: Pid, occurrence time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
        :type Content: str
        :param _CreatedTime: Intrusion time
        :type CreatedTime: str
        :param _Level: Unified event risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.
        :type Level: int
        :param _LevelZh: Risk level string in Chinese
        :type LevelZh: str
        :param _Id: Event ID
        :type Id: int
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._EventType = None
        self._Content = None
        self._CreatedTime = None
        self._Level = None
        self._LevelZh = None
        self._Id = None
        self._Uuid = None

    @property
    def EventType(self):
        """Event type. 0: virus scanning; 1: abnormal log-in; 2: password cracking; 3: malicious request; 4: high-risk command.
        :rtype: int
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def Content(self):
        """[Virus scanning] Virus name: VirusName, file name: FileName, file path: FilePath, file size: FileSize, file MD5: MD5, first detection time: CreateTime, last detection time: LatestScanTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Abnormal log-in] Source IP: SrcIp, location: Location, log-in username: UserName, log-in time: LoginTime
[Password cracking] Source IP: SrcIp, location: City and Country, protocol: Protocol, log-in username: UserName, port: Port, attempt count: Count, first attack time: CreateTime, last attack time: ModifyTime
[Malicious request] Malicious request domain name: Url, process: ProcessName, MD5: ProcessMd5, PID: Pid, request count: AccessCount, last request time: MergeTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[High-risk command] Hit rule name: RuleName, rule category: RuleCategory, command content: BashCmd, data source: DetectBy, Log-in user: User, PID: Pid, occurrence time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def CreatedTime(self):
        """Intrusion time
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime

    @property
    def Level(self):
        """Unified event risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def LevelZh(self):
        """Risk level string in Chinese
        :rtype: str
        """
        return self._LevelZh

    @LevelZh.setter
    def LevelZh(self, LevelZh):
        self._LevelZh = LevelZh

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._EventType = params.get("EventType")
        self._Content = params.get("Content")
        self._CreatedTime = params.get("CreatedTime")
        self._Level = params.get("Level")
        self._LevelZh = params.get("LevelZh")
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttackSourceNode(AbstractModel):
    """Attack backtracking node

    """

    def __init__(self):
        r"""
        :param _EventId: Event ID. If this parameter is left blank, no corresponding event exists.
        :type EventId: int
        :param _EventType: BRUTEFORCE: password cracking; MALWARE: Trojan; BASH: high-risk command; RISK_DNS: malicious request; LOGIN: cross-region log-in; HOST: host node; TIME_ORDER: general node.
        :type EventType: str
        :param _Ip: Node IP address. When the node is HOST, the value is the IP address of this node.
        :type Ip: str
        :param _Level: Level. 0: prompt; 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :type Level: int
        :param _NodeId: Node ID
        :type NodeId: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _NodeDesc: General node description
        :type NodeDesc: str
        :param _TimeLineNum: Timeline number. Nodes with the same number belong to the same timeline.
        :type TimeLineNum: int
        :param _NodeDetail: Node details
        :type NodeDetail: str
        """
        self._EventId = None
        self._EventType = None
        self._Ip = None
        self._Level = None
        self._NodeId = None
        self._StartTime = None
        self._EndTime = None
        self._NodeDesc = None
        self._TimeLineNum = None
        self._NodeDetail = None

    @property
    def EventId(self):
        """Event ID. If this parameter is left blank, no corresponding event exists.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def EventType(self):
        """BRUTEFORCE: password cracking; MALWARE: Trojan; BASH: high-risk command; RISK_DNS: malicious request; LOGIN: cross-region log-in; HOST: host node; TIME_ORDER: general node.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def Ip(self):
        """Node IP address. When the node is HOST, the value is the IP address of this node.
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def Level(self):
        """Level. 0: prompt; 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def NodeId(self):
        """Node ID
        :rtype: str
        """
        return self._NodeId

    @NodeId.setter
    def NodeId(self, NodeId):
        self._NodeId = NodeId

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def NodeDesc(self):
        """General node description
        :rtype: str
        """
        return self._NodeDesc

    @NodeDesc.setter
    def NodeDesc(self, NodeDesc):
        self._NodeDesc = NodeDesc

    @property
    def TimeLineNum(self):
        """Timeline number. Nodes with the same number belong to the same timeline.
        :rtype: int
        """
        return self._TimeLineNum

    @TimeLineNum.setter
    def TimeLineNum(self, TimeLineNum):
        self._TimeLineNum = TimeLineNum

    @property
    def NodeDetail(self):
        """Node details
        :rtype: str
        """
        return self._NodeDetail

    @NodeDetail.setter
    def NodeDetail(self, NodeDetail):
        self._NodeDetail = NodeDetail


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        self._EventType = params.get("EventType")
        self._Ip = params.get("Ip")
        self._Level = params.get("Level")
        self._NodeId = params.get("NodeId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._NodeDesc = params.get("NodeDesc")
        self._TimeLineNum = params.get("TimeLineNum")
        self._NodeDetail = params.get("NodeDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BanWhiteList(AbstractModel):
    """Block allowlist rules

    """

    def __init__(self):
        r"""
        :param _Id: Allowlist IDs
        :type Id: str
        :param _Remark: Allowlist aliases
        :type Remark: str
        :param _SrcIp: Block source IP
        :type SrcIp: str
        :param _ModifyTime: Time of modifying allowlists
        :type ModifyTime: str
        :param _CreateTime: Time of creating allowlists
        :type CreateTime: str
        :param _Uuid: Machine associated with the allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _IsGlobal: Whether the allowlist is global
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsGlobal: bool
        :param _Quuids: Machine list associated with the allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        """
        self._Id = None
        self._Remark = None
        self._SrcIp = None
        self._ModifyTime = None
        self._CreateTime = None
        self._Uuid = None
        self._IsGlobal = None
        self._Quuids = None

    @property
    def Id(self):
        """Allowlist IDs
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Remark(self):
        """Allowlist aliases
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def SrcIp(self):
        """Block source IP
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def ModifyTime(self):
        """Time of modifying allowlists
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def CreateTime(self):
        """Time of creating allowlists
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Uuid(self):
        """Machine associated with the allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def IsGlobal(self):
        """Whether the allowlist is global
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Quuids(self):
        """Machine list associated with the allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Remark = params.get("Remark")
        self._SrcIp = params.get("SrcIp")
        self._ModifyTime = params.get("ModifyTime")
        self._CreateTime = params.get("CreateTime")
        self._Uuid = params.get("Uuid")
        self._IsGlobal = params.get("IsGlobal")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BanWhiteListDetail(AbstractModel):
    """List of displayed blocking allowlist information, including the machine information

    """

    def __init__(self):
        r"""
        :param _Id: Allowlist ID
        :type Id: str
        :param _Remark: Allowlist alias
        :type Remark: str
        :param _SrcIp: Blocking source IP address
        :type SrcIp: str
        :param _ModifyTime: Allowlist modification time
        :type ModifyTime: str
        :param _CreateTime: Allowlist creation time
        :type CreateTime: str
        :param _IsGlobal: Whether the allowlist takes effect globally
        :type IsGlobal: bool
        :param _Quuid: Machine UUID
        :type Quuid: str
        :param _Uuid: CWPP program UUID
        :type Uuid: str
        :param _MachineIp: Machine IP address
        :type MachineIp: str
        :param _MachineName: Machine name
        :type MachineName: str
        """
        self._Id = None
        self._Remark = None
        self._SrcIp = None
        self._ModifyTime = None
        self._CreateTime = None
        self._IsGlobal = None
        self._Quuid = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None

    @property
    def Id(self):
        """Allowlist ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Remark(self):
        """Allowlist alias
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def SrcIp(self):
        """Blocking source IP address
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def ModifyTime(self):
        """Allowlist modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def CreateTime(self):
        """Allowlist creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def IsGlobal(self):
        """Whether the allowlist takes effect globally
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Quuid(self):
        """Machine UUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """CWPP program UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Machine IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Machine name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Remark = params.get("Remark")
        self._SrcIp = params.get("SrcIp")
        self._ModifyTime = params.get("ModifyTime")
        self._CreateTime = params.get("CreateTime")
        self._IsGlobal = params.get("IsGlobal")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineBasicInfo(AbstractModel):
    """Basic baseline information

    """

    def __init__(self):
        r"""
        :param _Name: Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _BaselineId: Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineId: int
        :param _ParentId: Parent ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ParentId: int
        """
        self._Name = None
        self._BaselineId = None
        self._ParentId = None

    @property
    def Name(self):
        """Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def BaselineId(self):
        """Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BaselineId

    @BaselineId.setter
    def BaselineId(self, BaselineId):
        self._BaselineId = BaselineId

    @property
    def ParentId(self):
        """Parent ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._BaselineId = params.get("BaselineId")
        self._ParentId = params.get("ParentId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineCustomRuleIdName(AbstractModel):
    """Baseline Custom Rule ID and Name

    """

    def __init__(self):
        r"""
        :param _RuleId: Custom rule ID　
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        :param _RuleName: Custom Rule Name
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleName: str
        """
        self._RuleId = None
        self._RuleName = None

    @property
    def RuleId(self):
        """Custom rule ID　
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Custom Rule Name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineDetail(AbstractModel):
    """Baseline details

    """

    def __init__(self):
        r"""
        :param _Description: Baseline description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _Level: Severity level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _PackageName: Package name
Note: This field may return null, indicating that no valid values can be obtained.
        :type PackageName: str
        :param _ParentId: Parent ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ParentId: int
        :param _Name: Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        """
        self._Description = None
        self._Level = None
        self._PackageName = None
        self._ParentId = None
        self._Name = None

    @property
    def Description(self):
        """Baseline description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Level(self):
        """Severity level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def PackageName(self):
        """Package name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PackageName

    @PackageName.setter
    def PackageName(self, PackageName):
        self._PackageName = PackageName

    @property
    def ParentId(self):
        """Parent ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId

    @property
    def Name(self):
        """Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Level = params.get("Level")
        self._PackageName = params.get("PackageName")
        self._ParentId = params.get("ParentId")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineDetectParam(AbstractModel):
    """Baseline check parameters

    """

    def __init__(self):
        r"""
        :param _PolicyIds: Collection of check policies
        :type PolicyIds: list of int
        :param _RuleIds: Collection of check rules
        :type RuleIds: list of int
        :param _ItemIds: Collection of check items
        :type ItemIds: list of int
        :param _HostIds: Collection of checked server IDs
        :type HostIds: list of str
        """
        self._PolicyIds = None
        self._RuleIds = None
        self._ItemIds = None
        self._HostIds = None

    @property
    def PolicyIds(self):
        """Collection of check policies
        :rtype: list of int
        """
        return self._PolicyIds

    @PolicyIds.setter
    def PolicyIds(self, PolicyIds):
        self._PolicyIds = PolicyIds

    @property
    def RuleIds(self):
        """Collection of check rules
        :rtype: list of int
        """
        return self._RuleIds

    @RuleIds.setter
    def RuleIds(self, RuleIds):
        self._RuleIds = RuleIds

    @property
    def ItemIds(self):
        """Collection of check items
        :rtype: list of int
        """
        return self._ItemIds

    @ItemIds.setter
    def ItemIds(self, ItemIds):
        self._ItemIds = ItemIds

    @property
    def HostIds(self):
        """Collection of checked server IDs
        :rtype: list of str
        """
        return self._HostIds

    @HostIds.setter
    def HostIds(self, HostIds):
        self._HostIds = HostIds


    def _deserialize(self, params):
        self._PolicyIds = params.get("PolicyIds")
        self._RuleIds = params.get("RuleIds")
        self._ItemIds = params.get("ItemIds")
        self._HostIds = params.get("HostIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineEffectHost(AbstractModel):
    """Information on the host affected by baseline

    """

    def __init__(self):
        r"""
        :param _PassCount: Passed item
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassCount: int
        :param _FailCount: Risky item
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailCount: int
        :param _FirstScanTime: First check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstScanTime: str
        :param _LastScanTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastScanTime: str
        :param _Status: Risky item processing status. 0: failed; 1: passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _HostIp: Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _AliasName: Host alias
Note: This field may return null, indicating that no valid values can be obtained.
        :type AliasName: str
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MaxStatus: Check status
Note: This field may return null, indicating that no valid values can be obtained.
        :type MaxStatus: int
        """
        self._PassCount = None
        self._FailCount = None
        self._FirstScanTime = None
        self._LastScanTime = None
        self._Status = None
        self._Quuid = None
        self._HostIp = None
        self._AliasName = None
        self._Uuid = None
        self._MaxStatus = None

    @property
    def PassCount(self):
        """Passed item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassCount

    @PassCount.setter
    def PassCount(self, PassCount):
        self._PassCount = PassCount

    @property
    def FailCount(self):
        """Risky item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FailCount

    @FailCount.setter
    def FailCount(self, FailCount):
        self._FailCount = FailCount

    @property
    def FirstScanTime(self):
        """First check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstScanTime

    @FirstScanTime.setter
    def FirstScanTime(self, FirstScanTime):
        self._FirstScanTime = FirstScanTime

    @property
    def LastScanTime(self):
        """Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastScanTime

    @LastScanTime.setter
    def LastScanTime(self, LastScanTime):
        self._LastScanTime = LastScanTime

    @property
    def Status(self):
        """Risky item processing status. 0: failed; 1: passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def AliasName(self):
        """Host alias
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AliasName

    @AliasName.setter
    def AliasName(self, AliasName):
        self._AliasName = AliasName

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MaxStatus(self):
        """Check status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MaxStatus

    @MaxStatus.setter
    def MaxStatus(self, MaxStatus):
        self._MaxStatus = MaxStatus


    def _deserialize(self, params):
        self._PassCount = params.get("PassCount")
        self._FailCount = params.get("FailCount")
        self._FirstScanTime = params.get("FirstScanTime")
        self._LastScanTime = params.get("LastScanTime")
        self._Status = params.get("Status")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._AliasName = params.get("AliasName")
        self._Uuid = params.get("Uuid")
        self._MaxStatus = params.get("MaxStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineEventLevelInfo(AbstractModel):
    """Host information of Top server risks

    """

    def __init__(self):
        r"""
        :param _EventLevel: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventLevel: int
        :param _EventCount: Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventCount: int
        """
        self._EventLevel = None
        self._EventCount = None

    @property
    def EventLevel(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventLevel

    @EventLevel.setter
    def EventLevel(self, EventLevel):
        self._EventLevel = EventLevel

    @property
    def EventCount(self):
        """Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount


    def _deserialize(self, params):
        self._EventLevel = params.get("EventLevel")
        self._EventCount = params.get("EventCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineHost(AbstractModel):
    """Baseline host information

    """

    def __init__(self):
        r"""
        :param _HostId: Host ID
        :type HostId: str
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostTag: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostTag: str
        :param _HostIp: Private IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _WanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type WanIp: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._HostId = None
        self._HostName = None
        self._HostTag = None
        self._HostIp = None
        self._WanIp = None
        self._MachineExtraInfo = None

    @property
    def HostId(self):
        """Host ID
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostTag(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostTag

    @HostTag.setter
    def HostTag(self, HostTag):
        self._HostTag = HostTag

    @property
    def HostIp(self):
        """Private IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def WanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._HostId = params.get("HostId")
        self._HostName = params.get("HostName")
        self._HostTag = params.get("HostTag")
        self._HostIp = params.get("HostIp")
        self._WanIp = params.get("WanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineHostDetect(AbstractModel):
    """Baseline Host Detection

    """

    def __init__(self):
        r"""
        :param _HostId: Host ID
        :type HostId: str
        :param _HostIp: Private IP address
        :type HostIp: str
        :param _HostName: Host name
        :type HostName: str
        :param _WanIp: Public IP address
        :type WanIp: str
        :param _DetectStatus: 0: Failed; 1: Ignored; 3: Passed; 5: Under detection
        :type DetectStatus: int
        :param _PassedItemCount: Number of Passed Tasks in Detection
        :type PassedItemCount: int
        :param _ItemCount: Associated Detection Item Count
        :type ItemCount: int
        :param _NotPassedItemCount: Detection Failure Count
        :type NotPassedItemCount: int
        :param _FirstTime: First detection time
        :type FirstTime: str
        :param _LastTime: Last detection Time
        :type LastTime: str
        :param _Uuid: CWPP UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._HostId = None
        self._HostIp = None
        self._HostName = None
        self._WanIp = None
        self._DetectStatus = None
        self._PassedItemCount = None
        self._ItemCount = None
        self._NotPassedItemCount = None
        self._FirstTime = None
        self._LastTime = None
        self._Uuid = None
        self._MachineExtraInfo = None

    @property
    def HostId(self):
        """Host ID
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId

    @property
    def HostIp(self):
        """Private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def WanIp(self):
        """Public IP address
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def DetectStatus(self):
        """0: Failed; 1: Ignored; 3: Passed; 5: Under detection
        :rtype: int
        """
        return self._DetectStatus

    @DetectStatus.setter
    def DetectStatus(self, DetectStatus):
        self._DetectStatus = DetectStatus

    @property
    def PassedItemCount(self):
        """Number of Passed Tasks in Detection
        :rtype: int
        """
        return self._PassedItemCount

    @PassedItemCount.setter
    def PassedItemCount(self, PassedItemCount):
        self._PassedItemCount = PassedItemCount

    @property
    def ItemCount(self):
        """Associated Detection Item Count
        :rtype: int
        """
        return self._ItemCount

    @ItemCount.setter
    def ItemCount(self, ItemCount):
        self._ItemCount = ItemCount

    @property
    def NotPassedItemCount(self):
        """Detection Failure Count
        :rtype: int
        """
        return self._NotPassedItemCount

    @NotPassedItemCount.setter
    def NotPassedItemCount(self, NotPassedItemCount):
        self._NotPassedItemCount = NotPassedItemCount

    @property
    def FirstTime(self):
        """First detection time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def LastTime(self):
        """Last detection Time
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def Uuid(self):
        """CWPP UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._HostId = params.get("HostId")
        self._HostIp = params.get("HostIp")
        self._HostName = params.get("HostName")
        self._WanIp = params.get("WanIp")
        self._DetectStatus = params.get("DetectStatus")
        self._PassedItemCount = params.get("PassedItemCount")
        self._ItemCount = params.get("ItemCount")
        self._NotPassedItemCount = params.get("NotPassedItemCount")
        self._FirstTime = params.get("FirstTime")
        self._LastTime = params.get("LastTime")
        self._Uuid = params.get("Uuid")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineHostTopList(AbstractModel):
    """Baseline affected servers list data

    """

    def __init__(self):
        r"""
        :param _EventLevelList: List of event levels and occurrences
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventLevelList: list of BaselineEventLevelInfo
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _Score: Score for calculating weight
Note: This field may return null, indicating that no valid values can be obtained.
        :type Score: int
        """
        self._EventLevelList = None
        self._HostName = None
        self._Quuid = None
        self._Score = None

    @property
    def EventLevelList(self):
        """List of event levels and occurrences
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineEventLevelInfo
        """
        return self._EventLevelList

    @EventLevelList.setter
    def EventLevelList(self, EventLevelList):
        self._EventLevelList = EventLevelList

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Score(self):
        """Score for calculating weight
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        if params.get("EventLevelList") is not None:
            self._EventLevelList = []
            for item in params.get("EventLevelList"):
                obj = BaselineEventLevelInfo()
                obj._deserialize(item)
                self._EventLevelList.append(obj)
        self._HostName = params.get("HostName")
        self._Quuid = params.get("Quuid")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineInfo(AbstractModel):
    """Baseline Information

    """

    def __init__(self):
        r"""
        :param _Name: Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Level: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _RuleCount: Number of check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCount: int
        :param _HostCount: Number of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _Status: Pass status. 0: passed; 1: failed.Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _CategoryId: Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryId: int
        :param _LastScanTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastScanTime: str
        :param _MaxStatus: 5: checking
Note: This field may return null, indicating that no valid values can be obtained.
        :type MaxStatus: int
        :param _BaselineFailCount: Baseline check items with risks
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineFailCount: int
        """
        self._Name = None
        self._Level = None
        self._RuleCount = None
        self._HostCount = None
        self._Status = None
        self._CategoryId = None
        self._LastScanTime = None
        self._MaxStatus = None
        self._BaselineFailCount = None

    @property
    def Name(self):
        """Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Level(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def RuleCount(self):
        """Number of check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCount

    @RuleCount.setter
    def RuleCount(self, RuleCount):
        self._RuleCount = RuleCount

    @property
    def HostCount(self):
        """Number of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def Status(self):
        """Pass status. 0: passed; 1: failed.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CategoryId(self):
        """Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CategoryId

    @CategoryId.setter
    def CategoryId(self, CategoryId):
        self._CategoryId = CategoryId

    @property
    def LastScanTime(self):
        """Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastScanTime

    @LastScanTime.setter
    def LastScanTime(self, LastScanTime):
        self._LastScanTime = LastScanTime

    @property
    def MaxStatus(self):
        """5: checking
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MaxStatus

    @MaxStatus.setter
    def MaxStatus(self, MaxStatus):
        self._MaxStatus = MaxStatus

    @property
    def BaselineFailCount(self):
        """Baseline check items with risks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BaselineFailCount

    @BaselineFailCount.setter
    def BaselineFailCount(self, BaselineFailCount):
        self._BaselineFailCount = BaselineFailCount


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Level = params.get("Level")
        self._RuleCount = params.get("RuleCount")
        self._HostCount = params.get("HostCount")
        self._Status = params.get("Status")
        self._CategoryId = params.get("CategoryId")
        self._LastScanTime = params.get("LastScanTime")
        self._MaxStatus = params.get("MaxStatus")
        self._BaselineFailCount = params.get("BaselineFailCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineItem(AbstractModel):
    """Baseline Item

    """

    def __init__(self):
        r"""
        :param _ItemId: Item ID
        :type ItemId: int
        :param _ItemName: Item Name
        :type ItemName: str
        :param _CategoryId: Detection Item Classification
        :type CategoryId: int
        :param _ItemDesc: Item Description
        :type ItemDesc: str
        :param _FixMethod: Fixing Method
        :type FixMethod: str
        :param _RuleName: Rule
        :type RuleName: str
        :param _DetectResultDesc: Check result description
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectResultDesc: str
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _DetectStatus: Detection Status. 0: Failed; 1: Ignored; 3: Passed; 5: Under detection
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectStatus: int
        :param _HostId: Host ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostId: str
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostIp: Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _WanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type WanIp: str
        :param _FirstTime: First Occurrence Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstTime: str
        :param _LastTime: Last Occurrence Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastTime: str
        :param _CanBeFixed: Can Be Fixed or Not
Note: This field may return null, indicating that no valid values can be obtained.
        :type CanBeFixed: int
        :param _Uuid: Host Security UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._ItemId = None
        self._ItemName = None
        self._CategoryId = None
        self._ItemDesc = None
        self._FixMethod = None
        self._RuleName = None
        self._DetectResultDesc = None
        self._Level = None
        self._DetectStatus = None
        self._HostId = None
        self._HostName = None
        self._HostIp = None
        self._WanIp = None
        self._FirstTime = None
        self._LastTime = None
        self._CanBeFixed = None
        self._Uuid = None
        self._MachineExtraInfo = None

    @property
    def ItemId(self):
        """Item ID
        :rtype: int
        """
        return self._ItemId

    @ItemId.setter
    def ItemId(self, ItemId):
        self._ItemId = ItemId

    @property
    def ItemName(self):
        """Item Name
        :rtype: str
        """
        return self._ItemName

    @ItemName.setter
    def ItemName(self, ItemName):
        self._ItemName = ItemName

    @property
    def CategoryId(self):
        """Detection Item Classification
        :rtype: int
        """
        return self._CategoryId

    @CategoryId.setter
    def CategoryId(self, CategoryId):
        self._CategoryId = CategoryId

    @property
    def ItemDesc(self):
        """Item Description
        :rtype: str
        """
        return self._ItemDesc

    @ItemDesc.setter
    def ItemDesc(self, ItemDesc):
        self._ItemDesc = ItemDesc

    @property
    def FixMethod(self):
        """Fixing Method
        :rtype: str
        """
        return self._FixMethod

    @FixMethod.setter
    def FixMethod(self, FixMethod):
        self._FixMethod = FixMethod

    @property
    def RuleName(self):
        """Rule
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def DetectResultDesc(self):
        """Check result description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DetectResultDesc

    @DetectResultDesc.setter
    def DetectResultDesc(self, DetectResultDesc):
        self._DetectResultDesc = DetectResultDesc

    @property
    def Level(self):
        """Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def DetectStatus(self):
        """Detection Status. 0: Failed; 1: Ignored; 3: Passed; 5: Under detection
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DetectStatus

    @DetectStatus.setter
    def DetectStatus(self, DetectStatus):
        self._DetectStatus = DetectStatus

    @property
    def HostId(self):
        """Host ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def WanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def FirstTime(self):
        """First Occurrence Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def LastTime(self):
        """Last Occurrence Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def CanBeFixed(self):
        """Can Be Fixed or Not
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CanBeFixed

    @CanBeFixed.setter
    def CanBeFixed(self, CanBeFixed):
        self._CanBeFixed = CanBeFixed

    @property
    def Uuid(self):
        """Host Security UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._ItemId = params.get("ItemId")
        self._ItemName = params.get("ItemName")
        self._CategoryId = params.get("CategoryId")
        self._ItemDesc = params.get("ItemDesc")
        self._FixMethod = params.get("FixMethod")
        self._RuleName = params.get("RuleName")
        self._DetectResultDesc = params.get("DetectResultDesc")
        self._Level = params.get("Level")
        self._DetectStatus = params.get("DetectStatus")
        self._HostId = params.get("HostId")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._WanIp = params.get("WanIp")
        self._FirstTime = params.get("FirstTime")
        self._LastTime = params.get("LastTime")
        self._CanBeFixed = params.get("CanBeFixed")
        self._Uuid = params.get("Uuid")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineItemDetect(AbstractModel):
    """Baseline detection item

    """

    def __init__(self):
        r"""
        :param _ItemId: Item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemId: int
        :param _ItemName: Item Name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemName: str
        :param _ItemDesc: Item Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemDesc: str
        :param _FixMethod: Fixing Method
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixMethod: str
        :param _RuleName: Rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleName: str
        :param _DetectStatus: 0: Failed; 1: Ignored; 3: Passed; 5: Under detection
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectStatus: int
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _HostCount: Number of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _FirstTime: First detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstTime: str
        :param _LastTime: Last Detection Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastTime: str
        :param _DetectResult: Detection result, JSON string
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectResult: str
        :param _RuleId: Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        :param _PassedHostCount: Number of servers passed
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassedHostCount: int
        :param _NotPassedHostCount: Number of servers failed
Note: This field may return null, indicating that no valid values can be obtained.
        :type NotPassedHostCount: int
        """
        self._ItemId = None
        self._ItemName = None
        self._ItemDesc = None
        self._FixMethod = None
        self._RuleName = None
        self._DetectStatus = None
        self._Level = None
        self._HostCount = None
        self._FirstTime = None
        self._LastTime = None
        self._DetectResult = None
        self._RuleId = None
        self._PassedHostCount = None
        self._NotPassedHostCount = None

    @property
    def ItemId(self):
        """Item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ItemId

    @ItemId.setter
    def ItemId(self, ItemId):
        self._ItemId = ItemId

    @property
    def ItemName(self):
        """Item Name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ItemName

    @ItemName.setter
    def ItemName(self, ItemName):
        self._ItemName = ItemName

    @property
    def ItemDesc(self):
        """Item Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ItemDesc

    @ItemDesc.setter
    def ItemDesc(self, ItemDesc):
        self._ItemDesc = ItemDesc

    @property
    def FixMethod(self):
        """Fixing Method
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixMethod

    @FixMethod.setter
    def FixMethod(self, FixMethod):
        self._FixMethod = FixMethod

    @property
    def RuleName(self):
        """Rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def DetectStatus(self):
        """0: Failed; 1: Ignored; 3: Passed; 5: Under detection
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DetectStatus

    @DetectStatus.setter
    def DetectStatus(self, DetectStatus):
        self._DetectStatus = DetectStatus

    @property
    def Level(self):
        """Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def HostCount(self):
        """Number of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def FirstTime(self):
        """First detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def LastTime(self):
        """Last Detection Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def DetectResult(self):
        """Detection result, JSON string
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DetectResult

    @DetectResult.setter
    def DetectResult(self, DetectResult):
        self._DetectResult = DetectResult

    @property
    def RuleId(self):
        """Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def PassedHostCount(self):
        """Number of servers passed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassedHostCount

    @PassedHostCount.setter
    def PassedHostCount(self, PassedHostCount):
        self._PassedHostCount = PassedHostCount

    @property
    def NotPassedHostCount(self):
        """Number of servers failed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NotPassedHostCount

    @NotPassedHostCount.setter
    def NotPassedHostCount(self, NotPassedHostCount):
        self._NotPassedHostCount = NotPassedHostCount


    def _deserialize(self, params):
        self._ItemId = params.get("ItemId")
        self._ItemName = params.get("ItemName")
        self._ItemDesc = params.get("ItemDesc")
        self._FixMethod = params.get("FixMethod")
        self._RuleName = params.get("RuleName")
        self._DetectStatus = params.get("DetectStatus")
        self._Level = params.get("Level")
        self._HostCount = params.get("HostCount")
        self._FirstTime = params.get("FirstTime")
        self._LastTime = params.get("LastTime")
        self._DetectResult = params.get("DetectResult")
        self._RuleId = params.get("RuleId")
        self._PassedHostCount = params.get("PassedHostCount")
        self._NotPassedHostCount = params.get("NotPassedHostCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineItemInfo(AbstractModel):
    """Baseline Information

    """

    def __init__(self):
        r"""
        :param _ItemId: Baseline Detection Item ID
        :type ItemId: int
        :param _ItemName: Detection Item Name
        :type ItemName: str
        :param _RuleId: ID of the Rule to Which the Detection Item Belongs
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        :param _ItemDesc: Detection item description
        :type ItemDesc: str
        :param _FixMethod: Remediation Method for Inspection Items
        :type FixMethod: str
        :param _RuleName: Rule Name of Detection Item
        :type RuleName: str
        :param _Level: Risk level
        :type Level: int
        :param _SysRuleId: System Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type SysRuleId: int
        :param _RelatedCustomRuleInfo: Referenced Custom Rule Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type RelatedCustomRuleInfo: list of BaselineCustomRuleIdName
        """
        self._ItemId = None
        self._ItemName = None
        self._RuleId = None
        self._ItemDesc = None
        self._FixMethod = None
        self._RuleName = None
        self._Level = None
        self._SysRuleId = None
        self._RelatedCustomRuleInfo = None

    @property
    def ItemId(self):
        """Baseline Detection Item ID
        :rtype: int
        """
        return self._ItemId

    @ItemId.setter
    def ItemId(self, ItemId):
        self._ItemId = ItemId

    @property
    def ItemName(self):
        """Detection Item Name
        :rtype: str
        """
        return self._ItemName

    @ItemName.setter
    def ItemName(self, ItemName):
        self._ItemName = ItemName

    @property
    def RuleId(self):
        """ID of the Rule to Which the Detection Item Belongs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ItemDesc(self):
        """Detection item description
        :rtype: str
        """
        return self._ItemDesc

    @ItemDesc.setter
    def ItemDesc(self, ItemDesc):
        self._ItemDesc = ItemDesc

    @property
    def FixMethod(self):
        """Remediation Method for Inspection Items
        :rtype: str
        """
        return self._FixMethod

    @FixMethod.setter
    def FixMethod(self, FixMethod):
        self._FixMethod = FixMethod

    @property
    def RuleName(self):
        """Rule Name of Detection Item
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def Level(self):
        """Risk level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def SysRuleId(self):
        """System Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SysRuleId

    @SysRuleId.setter
    def SysRuleId(self, SysRuleId):
        self._SysRuleId = SysRuleId

    @property
    def RelatedCustomRuleInfo(self):
        """Referenced Custom Rule Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineCustomRuleIdName
        """
        return self._RelatedCustomRuleInfo

    @RelatedCustomRuleInfo.setter
    def RelatedCustomRuleInfo(self, RelatedCustomRuleInfo):
        self._RelatedCustomRuleInfo = RelatedCustomRuleInfo


    def _deserialize(self, params):
        self._ItemId = params.get("ItemId")
        self._ItemName = params.get("ItemName")
        self._RuleId = params.get("RuleId")
        self._ItemDesc = params.get("ItemDesc")
        self._FixMethod = params.get("FixMethod")
        self._RuleName = params.get("RuleName")
        self._Level = params.get("Level")
        self._SysRuleId = params.get("SysRuleId")
        if params.get("RelatedCustomRuleInfo") is not None:
            self._RelatedCustomRuleInfo = []
            for item in params.get("RelatedCustomRuleInfo"):
                obj = BaselineCustomRuleIdName()
                obj._deserialize(item)
                self._RelatedCustomRuleInfo.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselinePolicy(AbstractModel):
    """Baseline policy information

    """

    def __init__(self):
        r"""
        :param _PolicyName: Policy name, which is no more than 128 English characters in length.
        :type PolicyName: str
        :param _DetectInterval: Detection interval [1: 1 day|3: 3 days|5: 5 days|7: 7 days]
        :type DetectInterval: int
        :param _DetectTime: Detection time
        :type DetectTime: str
        :param _IsEnabled: Whether enabled [0: not enabled|1: enabled]
        :type IsEnabled: int
        :param _AssetType: Asset type [0: all Professional and Ultimate editions|1: ID | 2: IP]
        :type AssetType: int
        :param _PolicyId: Policy ID
        :type PolicyId: int
        :param _RuleCount: Number of associated baseline items
        :type RuleCount: int
        :param _ItemCount: Number of associated baseline items
        :type ItemCount: int
        :param _HostCount: Number of associated baseline hosts
        :type HostCount: int
        :param _RuleIds: Rule ID
        :type RuleIds: list of int
        :param _HostIds: Host ID
        :type HostIds: list of str
        :param _HostIps: Host IP
        :type HostIps: list of str
        :param _IsDefault: Whether the system default
        :type IsDefault: int
        """
        self._PolicyName = None
        self._DetectInterval = None
        self._DetectTime = None
        self._IsEnabled = None
        self._AssetType = None
        self._PolicyId = None
        self._RuleCount = None
        self._ItemCount = None
        self._HostCount = None
        self._RuleIds = None
        self._HostIds = None
        self._HostIps = None
        self._IsDefault = None

    @property
    def PolicyName(self):
        """Policy name, which is no more than 128 English characters in length.
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def DetectInterval(self):
        """Detection interval [1: 1 day|3: 3 days|5: 5 days|7: 7 days]
        :rtype: int
        """
        return self._DetectInterval

    @DetectInterval.setter
    def DetectInterval(self, DetectInterval):
        self._DetectInterval = DetectInterval

    @property
    def DetectTime(self):
        """Detection time
        :rtype: str
        """
        return self._DetectTime

    @DetectTime.setter
    def DetectTime(self, DetectTime):
        self._DetectTime = DetectTime

    @property
    def IsEnabled(self):
        """Whether enabled [0: not enabled|1: enabled]
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def AssetType(self):
        """Asset type [0: all Professional and Ultimate editions|1: ID | 2: IP]
        :rtype: int
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def PolicyId(self):
        """Policy ID
        :rtype: int
        """
        return self._PolicyId

    @PolicyId.setter
    def PolicyId(self, PolicyId):
        self._PolicyId = PolicyId

    @property
    def RuleCount(self):
        """Number of associated baseline items
        :rtype: int
        """
        return self._RuleCount

    @RuleCount.setter
    def RuleCount(self, RuleCount):
        self._RuleCount = RuleCount

    @property
    def ItemCount(self):
        """Number of associated baseline items
        :rtype: int
        """
        return self._ItemCount

    @ItemCount.setter
    def ItemCount(self, ItemCount):
        self._ItemCount = ItemCount

    @property
    def HostCount(self):
        """Number of associated baseline hosts
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def RuleIds(self):
        """Rule ID
        :rtype: list of int
        """
        return self._RuleIds

    @RuleIds.setter
    def RuleIds(self, RuleIds):
        self._RuleIds = RuleIds

    @property
    def HostIds(self):
        """Host ID
        :rtype: list of str
        """
        return self._HostIds

    @HostIds.setter
    def HostIds(self, HostIds):
        self._HostIds = HostIds

    @property
    def HostIps(self):
        """Host IP
        :rtype: list of str
        """
        return self._HostIps

    @HostIps.setter
    def HostIps(self, HostIps):
        self._HostIps = HostIps

    @property
    def IsDefault(self):
        """Whether the system default
        :rtype: int
        """
        return self._IsDefault

    @IsDefault.setter
    def IsDefault(self, IsDefault):
        self._IsDefault = IsDefault


    def _deserialize(self, params):
        self._PolicyName = params.get("PolicyName")
        self._DetectInterval = params.get("DetectInterval")
        self._DetectTime = params.get("DetectTime")
        self._IsEnabled = params.get("IsEnabled")
        self._AssetType = params.get("AssetType")
        self._PolicyId = params.get("PolicyId")
        self._RuleCount = params.get("RuleCount")
        self._ItemCount = params.get("ItemCount")
        self._HostCount = params.get("HostCount")
        self._RuleIds = params.get("RuleIds")
        self._HostIds = params.get("HostIds")
        self._HostIps = params.get("HostIps")
        self._IsDefault = params.get("IsDefault")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineRuleInfo(AbstractModel):
    """Baseline detection information

    """

    def __init__(self):
        r"""
        :param _RuleName: Detection item name
        :type RuleName: str
        :param _Description: Detection item description
        :type Description: str
        :param _FixMessage: Fixing suggestion
        :type FixMessage: str
        :param _Level: Severity level
        :type Level: int
        :param _Status: Status
        :type Status: int
        :param _RuleId: Detection Item ID
        :type RuleId: int
        :param _LastScanAt: Last detection Time
        :type LastScanAt: str
        :param _RuleRemark: Specific reason explanation
        :type RuleRemark: str
        :param _Uuid: Unique UUID
        :type Uuid: str
        :param _EventId: Unique event ID
        :type EventId: int
        """
        self._RuleName = None
        self._Description = None
        self._FixMessage = None
        self._Level = None
        self._Status = None
        self._RuleId = None
        self._LastScanAt = None
        self._RuleRemark = None
        self._Uuid = None
        self._EventId = None

    @property
    def RuleName(self):
        """Detection item name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def Description(self):
        """Detection item description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def FixMessage(self):
        """Fixing suggestion
        :rtype: str
        """
        return self._FixMessage

    @FixMessage.setter
    def FixMessage(self, FixMessage):
        self._FixMessage = FixMessage

    @property
    def Level(self):
        """Severity level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Status(self):
        """Status
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuleId(self):
        """Detection Item ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def LastScanAt(self):
        """Last detection Time
        :rtype: str
        """
        return self._LastScanAt

    @LastScanAt.setter
    def LastScanAt(self, LastScanAt):
        self._LastScanAt = LastScanAt

    @property
    def RuleRemark(self):
        """Specific reason explanation
        :rtype: str
        """
        return self._RuleRemark

    @RuleRemark.setter
    def RuleRemark(self, RuleRemark):
        self._RuleRemark = RuleRemark

    @property
    def Uuid(self):
        """Unique UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def EventId(self):
        """Unique event ID
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        self._Description = params.get("Description")
        self._FixMessage = params.get("FixMessage")
        self._Level = params.get("Level")
        self._Status = params.get("Status")
        self._RuleId = params.get("RuleId")
        self._LastScanAt = params.get("LastScanAt")
        self._RuleRemark = params.get("RuleRemark")
        self._Uuid = params.get("Uuid")
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineRuleTopInfo(AbstractModel):
    """Information on TOP baseline detection item

    """

    def __init__(self):
        r"""
        :param _RuleName: Baseline detection item name
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleName: str
        :param _Level: Detection item hazard level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _EventCount: Total number of events
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventCount: int
        :param _RuleId: Detection Item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        """
        self._RuleName = None
        self._Level = None
        self._EventCount = None
        self._RuleId = None

    @property
    def RuleName(self):
        """Baseline detection item name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def Level(self):
        """Detection item hazard level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def EventCount(self):
        """Total number of events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def RuleId(self):
        """Detection Item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        self._Level = params.get("Level")
        self._EventCount = params.get("EventCount")
        self._RuleId = params.get("RuleId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BaselineWeakPassword(AbstractModel):
    """Baseline weak password

    """

    def __init__(self):
        r"""
        :param _PasswordId: Password ID
        :type PasswordId: int
        :param _WeakPassword: Password
        :type WeakPassword: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        """
        self._PasswordId = None
        self._WeakPassword = None
        self._CreateTime = None
        self._ModifyTime = None

    @property
    def PasswordId(self):
        """Password ID
        :rtype: int
        """
        return self._PasswordId

    @PasswordId.setter
    def PasswordId(self, PasswordId):
        self._PasswordId = PasswordId

    @property
    def WeakPassword(self):
        """Password
        :rtype: str
        """
        return self._WeakPassword

    @WeakPassword.setter
    def WeakPassword(self, WeakPassword):
        self._WeakPassword = WeakPassword

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._PasswordId = params.get("PasswordId")
        self._WeakPassword = params.get("WeakPassword")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashEvent(AbstractModel):
    """High-risk command data

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _Uuid: CWPP ID
        :type Uuid: str
        :param _Quuid: Server ID
        :type Quuid: str
        :param _Hostip: Host private IP address
        :type Hostip: str
        :param _User: Username for execution
        :type User: str
        :param _Platform: Platform type
        :type Platform: int
        :param _BashCmd: Executed commands
        :type BashCmd: str
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _RuleLevel: Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :type RuleLevel: int
        :param _Status: Processing status: 0 - pending; 1 - processed; 2 - allowlisted; 3 - ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _DetectBy: 0: bash log; 1: real-time monitoring (thunder edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectBy: int
        :param _Pid: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: str
        :param _Exe: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Exe: str
        :param _ModifyTime: Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _RuleCategory: Rule category: 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCategory: int
        :param _RegexBashCmd: Automatically generated regular expression\nNote: This field may return null, indicating that no valid values can be obtained.
        :type RegexBashCmd: str
        :param _HostName: Host HostName
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._Hostip = None
        self._User = None
        self._Platform = None
        self._BashCmd = None
        self._RuleId = None
        self._RuleName = None
        self._RuleLevel = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._DetectBy = None
        self._Pid = None
        self._Exe = None
        self._ModifyTime = None
        self._RuleCategory = None
        self._RegexBashCmd = None
        self._HostName = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Hostip(self):
        """Host private IP address
        :rtype: str
        """
        return self._Hostip

    @Hostip.setter
    def Hostip(self, Hostip):
        self._Hostip = Hostip

    @property
    def User(self):
        """Username for execution
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Platform(self):
        """Platform type
        :rtype: int
        """
        return self._Platform

    @Platform.setter
    def Platform(self, Platform):
        self._Platform = Platform

    @property
    def BashCmd(self):
        """Executed commands
        :rtype: str
        """
        return self._BashCmd

    @BashCmd.setter
    def BashCmd(self, BashCmd):
        self._BashCmd = BashCmd

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleLevel(self):
        """Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :rtype: int
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel

    @property
    def Status(self):
        """Processing status: 0 - pending; 1 - processed; 2 - allowlisted; 3 - ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def DetectBy(self):
        """0: bash log; 1: real-time monitoring (thunder edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy

    @property
    def Pid(self):
        """Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def Exe(self):
        """Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def ModifyTime(self):
        """Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RuleCategory(self):
        """Rule category: 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def RegexBashCmd(self):
        """Automatically generated regular expression\nNote: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegexBashCmd

    @RegexBashCmd.setter
    def RegexBashCmd(self, RegexBashCmd):
        self._RegexBashCmd = RegexBashCmd

    @property
    def HostName(self):
        """Host HostName
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Hostip = params.get("Hostip")
        self._User = params.get("User")
        self._Platform = params.get("Platform")
        self._BashCmd = params.get("BashCmd")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._RuleLevel = params.get("RuleLevel")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._DetectBy = params.get("DetectBy")
        self._Pid = params.get("Pid")
        self._Exe = params.get("Exe")
        self._ModifyTime = params.get("ModifyTime")
        self._RuleCategory = params.get("RuleCategory")
        self._RegexBashCmd = params.get("RegexBashCmd")
        self._HostName = params.get("HostName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashEventNew(AbstractModel):
    """High-risk command data (new)

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _Uuid: CWPP ID
        :type Uuid: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _HostIp: Host private IP address
        :type HostIp: str
        :param _User: Username for execution
        :type User: str
        :param _Platform: Platform type
        :type Platform: int
        :param _BashCmd: Execute commands
        :type BashCmd: str
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _RuleLevel: Rule level: 1: high-risk 2: medium-risk; 3: low-risk
        :type RuleLevel: int
        :param _Status: Processing status: 0: pending; 1: processed; 2: allowlisted; 3: ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _DetectBy: 0: bash log; 1: real-time monitoring (Leiting edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectBy: int
        :param _Pid: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: str
        :param _Exe: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Exe: str
        :param _ModifyTime: Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _RuleCategory: Rule category. 0: system rule; 1: user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCategory: int
        :param _RegexBashCmd: Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegexBashCmd: str
        :param _MachineType: 0: normal; 1: Professional edition; 2: Ultimate edition
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineType: int
        :param _MachineExtraInfo: Additional Information on Machine
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostIp = None
        self._User = None
        self._Platform = None
        self._BashCmd = None
        self._RuleId = None
        self._RuleName = None
        self._RuleLevel = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._DetectBy = None
        self._Pid = None
        self._Exe = None
        self._ModifyTime = None
        self._RuleCategory = None
        self._RegexBashCmd = None
        self._MachineType = None
        self._MachineExtraInfo = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def User(self):
        """Username for execution
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Platform(self):
        """Platform type
        :rtype: int
        """
        return self._Platform

    @Platform.setter
    def Platform(self, Platform):
        self._Platform = Platform

    @property
    def BashCmd(self):
        """Execute commands
        :rtype: str
        """
        return self._BashCmd

    @BashCmd.setter
    def BashCmd(self, BashCmd):
        self._BashCmd = BashCmd

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleLevel(self):
        """Rule level: 1: high-risk 2: medium-risk; 3: low-risk
        :rtype: int
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel

    @property
    def Status(self):
        """Processing status: 0: pending; 1: processed; 2: allowlisted; 3: ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def DetectBy(self):
        """0: bash log; 1: real-time monitoring (Leiting edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy

    @property
    def Pid(self):
        """Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def Exe(self):
        """Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def ModifyTime(self):
        """Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RuleCategory(self):
        """Rule category. 0: system rule; 1: user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def RegexBashCmd(self):
        """Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegexBashCmd

    @RegexBashCmd.setter
    def RegexBashCmd(self, RegexBashCmd):
        self._RegexBashCmd = RegexBashCmd

    @property
    def MachineType(self):
        """0: normal; 1: Professional edition; 2: Ultimate edition
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineExtraInfo(self):
        """Additional Information on Machine
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._User = params.get("User")
        self._Platform = params.get("Platform")
        self._BashCmd = params.get("BashCmd")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._RuleLevel = params.get("RuleLevel")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._DetectBy = params.get("DetectBy")
        self._Pid = params.get("Pid")
        self._Exe = params.get("Exe")
        self._ModifyTime = params.get("ModifyTime")
        self._RuleCategory = params.get("RuleCategory")
        self._RegexBashCmd = params.get("RegexBashCmd")
        self._MachineType = params.get("MachineType")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashEventsInfo(AbstractModel):
    """Details of high-risk command data

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _Uuid: Yunjing ID
        :type Uuid: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _HostIp: Host private IP address
        :type HostIp: str
        :param _Platform: Platform type
        :type Platform: int
        :param _BashCmd: Executed commands
        :type BashCmd: str
        :param _RuleId: Rule ID equals 0 indicating that the rule has been deleted or the effective scope has been modified.
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _RuleLevel: Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :type RuleLevel: int
        :param _Status: Processing status. 0: Pending; 1: Processed; 2: Whitelisted; 3: Ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Exe: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Exe: str
        :param _ModifyTime: Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _RuleCategory: Rule category: 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCategory: int
        :param _RegexBashCmd: Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegexBashCmd: str
        :param _PsTree: Process tree json  pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: command execution; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :type PsTree: str
        :param _SuggestScheme: Recommended solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuggestScheme: str
        :param _HarmDescribe: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type HarmDescribe: str
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _References: Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :type References: list of str
        :param _MachineWanIp: Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _MachineStatus: Host online status: OFFLINE  ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineStatus: str
        :param _User: Log-in user
Note: This field may return null, indicating that no valid values can be obtained.
        :type User: str
        :param _Pid: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: str
        :param _DetectBy: Data source
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectBy: str
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostIp = None
        self._Platform = None
        self._BashCmd = None
        self._RuleId = None
        self._RuleName = None
        self._RuleLevel = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._Exe = None
        self._ModifyTime = None
        self._RuleCategory = None
        self._RegexBashCmd = None
        self._PsTree = None
        self._SuggestScheme = None
        self._HarmDescribe = None
        self._Tags = None
        self._References = None
        self._MachineWanIp = None
        self._MachineStatus = None
        self._User = None
        self._Pid = None
        self._DetectBy = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Yunjing ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Platform(self):
        """Platform type
        :rtype: int
        """
        return self._Platform

    @Platform.setter
    def Platform(self, Platform):
        self._Platform = Platform

    @property
    def BashCmd(self):
        """Executed commands
        :rtype: str
        """
        return self._BashCmd

    @BashCmd.setter
    def BashCmd(self, BashCmd):
        self._BashCmd = BashCmd

    @property
    def RuleId(self):
        """Rule ID equals 0 indicating that the rule has been deleted or the effective scope has been modified.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleLevel(self):
        """Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :rtype: int
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel

    @property
    def Status(self):
        """Processing status. 0: Pending; 1: Processed; 2: Whitelisted; 3: Ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Exe(self):
        """Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def ModifyTime(self):
        """Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RuleCategory(self):
        """Rule category: 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def RegexBashCmd(self):
        """Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegexBashCmd

    @RegexBashCmd.setter
    def RegexBashCmd(self, RegexBashCmd):
        self._RegexBashCmd = RegexBashCmd

    @property
    def PsTree(self):
        """Process tree json  pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: command execution; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def SuggestScheme(self):
        """Recommended solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def HarmDescribe(self):
        """Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def Tags(self):
        """Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def References(self):
        """Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._References

    @References.setter
    def References(self, References):
        self._References = References

    @property
    def MachineWanIp(self):
        """Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineStatus(self):
        """Host online status: OFFLINE  ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def User(self):
        """Log-in user
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Pid(self):
        """Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def DetectBy(self):
        """Data source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._Platform = params.get("Platform")
        self._BashCmd = params.get("BashCmd")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._RuleLevel = params.get("RuleLevel")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._Exe = params.get("Exe")
        self._ModifyTime = params.get("ModifyTime")
        self._RuleCategory = params.get("RuleCategory")
        self._RegexBashCmd = params.get("RegexBashCmd")
        self._PsTree = params.get("PsTree")
        self._SuggestScheme = params.get("SuggestScheme")
        self._HarmDescribe = params.get("HarmDescribe")
        self._Tags = params.get("Tags")
        self._References = params.get("References")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineStatus = params.get("MachineStatus")
        self._User = params.get("User")
        self._Pid = params.get("Pid")
        self._DetectBy = params.get("DetectBy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashEventsInfoNew(AbstractModel):
    """Details of high-risk command data (new)

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _Uuid: CWPP ID
        :type Uuid: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _HostIp: Host private IP address
        :type HostIp: str
        :param _Platform: Platform type
        :type Platform: int
        :param _BashCmd: Executed commands
        :type BashCmd: str
        :param _RuleId: Rule ID equals 0 indicating that the rule has been deleted or the effective scope has been modified.
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _RuleLevel: Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :type RuleLevel: int
        :param _Status: Processing status: 0: Pending; 1: Processed; 2: Whitelisted; 3: Ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Exe: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Exe: str
        :param _ModifyTime: Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _RuleCategory: Rule category. 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCategory: int
        :param _RegexBashCmd: Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegexBashCmd: str
        :param _PsTree: Process tree json  pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: command execution; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :type PsTree: str
        :param _SuggestScheme: Recommended solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuggestScheme: str
        :param _HarmDescribe: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type HarmDescribe: str
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _References: Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :type References: list of str
        :param _MachineWanIp: Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _MachineStatus: Host online status: OFFLINE; ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineStatus: str
        :param _User: Log-in user
Note: This field may return null, indicating that no valid values can be obtained.
        :type User: str
        :param _Pid: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: str
        :param _MachineType: 0: normal; 1: professional version; 2: ultimate edition
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineType: int
        :param _DetectBy: Source of Detection: 0: bash log; 1: real-time monitoring
Note: This field may return null, indicating that no valid values can be obtained.
        :type DetectBy: int
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostIp = None
        self._Platform = None
        self._BashCmd = None
        self._RuleId = None
        self._RuleName = None
        self._RuleLevel = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._Exe = None
        self._ModifyTime = None
        self._RuleCategory = None
        self._RegexBashCmd = None
        self._PsTree = None
        self._SuggestScheme = None
        self._HarmDescribe = None
        self._Tags = None
        self._References = None
        self._MachineWanIp = None
        self._MachineStatus = None
        self._User = None
        self._Pid = None
        self._MachineType = None
        self._DetectBy = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Platform(self):
        """Platform type
        :rtype: int
        """
        return self._Platform

    @Platform.setter
    def Platform(self, Platform):
        self._Platform = Platform

    @property
    def BashCmd(self):
        """Executed commands
        :rtype: str
        """
        return self._BashCmd

    @BashCmd.setter
    def BashCmd(self, BashCmd):
        self._BashCmd = BashCmd

    @property
    def RuleId(self):
        """Rule ID equals 0 indicating that the rule has been deleted or the effective scope has been modified.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleLevel(self):
        """Rule level: 1 - high-risk 2 - medium-risk; 3 - low-risk
        :rtype: int
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel

    @property
    def Status(self):
        """Processing status: 0: Pending; 1: Processed; 2: Whitelisted; 3: Ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Exe(self):
        """Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def ModifyTime(self):
        """Processing time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RuleCategory(self):
        """Rule category. 0 - system rule; 1 - user rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def RegexBashCmd(self):
        """Automatically generated regular expression
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegexBashCmd

    @RegexBashCmd.setter
    def RegexBashCmd(self, RegexBashCmd):
        self._RegexBashCmd = RegexBashCmd

    @property
    def PsTree(self):
        """Process tree json  pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: command execution; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def SuggestScheme(self):
        """Recommended solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def HarmDescribe(self):
        """Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def Tags(self):
        """Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def References(self):
        """Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._References

    @References.setter
    def References(self, References):
        self._References = References

    @property
    def MachineWanIp(self):
        """Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineStatus(self):
        """Host online status: OFFLINE; ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def User(self):
        """Log-in user
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Pid(self):
        """Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def MachineType(self):
        """0: normal; 1: professional version; 2: ultimate edition
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def DetectBy(self):
        """Source of Detection: 0: bash log; 1: real-time monitoring
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._Platform = params.get("Platform")
        self._BashCmd = params.get("BashCmd")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._RuleLevel = params.get("RuleLevel")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._Exe = params.get("Exe")
        self._ModifyTime = params.get("ModifyTime")
        self._RuleCategory = params.get("RuleCategory")
        self._RegexBashCmd = params.get("RegexBashCmd")
        self._PsTree = params.get("PsTree")
        self._SuggestScheme = params.get("SuggestScheme")
        self._HarmDescribe = params.get("HarmDescribe")
        self._Tags = params.get("Tags")
        self._References = params.get("References")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineStatus = params.get("MachineStatus")
        self._User = params.get("User")
        self._Pid = params.get("Pid")
        self._MachineType = params.get("MachineType")
        self._DetectBy = params.get("DetectBy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashPolicy(AbstractModel):
    """High-risk command policy

    """

    def __init__(self):
        r"""
        :param _Name: Policy name
        :type Name: str
        :param _Enable: 1: valid; 0: invalid
        :type Enable: int
        :param _White: 0: blocklist; 1: allowlist
        :type White: int
        :param _BashAction: 0: alarm; 1: allowlist; 2: intercept
        :type BashAction: int
        :param _Rule: Regular expression
        :type Rule: str
        :param _Level: Risk level (0: none; 1: high-risk; 2: medium-risk; 3: low-risk)
        :type Level: int
        :param _Scope: Effective scope (0: a group of QUUID; 1: all professional editions (including ultimate edition); 2: all ultimate editions; 3: all hosts)
        :type Scope: int
        :param _Id: Policy ID
        :type Id: int
        :param _Descript: Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Descript: str
        :param _EventId: When it is added to the allowlist, the EventId needs to be passed in.Note: This field may return null, indicating that no valid values can be obtained.
        :type EventId: int
        :param _DealOldEvents: Whether to process old events as allowlisted ones: 0 - no; 1 - yes
Note: This field may return null, indicating that no valid values can be obtained.
        :type DealOldEvents: int
        :param _Quuids: A collection of QUUIDs for effective hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        :param _Category: Policy type: 0 - system; 1 - user
        :type Category: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        :param _Uuids: Compatibility with older versions may be needed.
        :type Uuids: list of str
        """
        self._Name = None
        self._Enable = None
        self._White = None
        self._BashAction = None
        self._Rule = None
        self._Level = None
        self._Scope = None
        self._Id = None
        self._Descript = None
        self._EventId = None
        self._DealOldEvents = None
        self._Quuids = None
        self._Category = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Uuids = None

    @property
    def Name(self):
        """Policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Enable(self):
        """1: valid; 0: invalid
        :rtype: int
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def White(self):
        """0: blocklist; 1: allowlist
        :rtype: int
        """
        return self._White

    @White.setter
    def White(self, White):
        self._White = White

    @property
    def BashAction(self):
        """0: alarm; 1: allowlist; 2: intercept
        :rtype: int
        """
        return self._BashAction

    @BashAction.setter
    def BashAction(self, BashAction):
        self._BashAction = BashAction

    @property
    def Rule(self):
        """Regular expression
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Level(self):
        """Risk level (0: none; 1: high-risk; 2: medium-risk; 3: low-risk)
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Scope(self):
        """Effective scope (0: a group of QUUID; 1: all professional editions (including ultimate edition); 2: all ultimate editions; 3: all hosts)
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def Id(self):
        """Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Descript(self):
        """Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Descript

    @Descript.setter
    def Descript(self, Descript):
        self._Descript = Descript

    @property
    def EventId(self):
        """When it is added to the allowlist, the EventId needs to be passed in.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def DealOldEvents(self):
        """Whether to process old events as allowlisted ones: 0 - no; 1 - yes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents

    @property
    def Quuids(self):
        """A collection of QUUIDs for effective hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def Category(self):
        """Policy type: 0 - system; 1 - user
        :rtype: int
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Uuids(self):
        """Compatibility with older versions may be needed.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Enable = params.get("Enable")
        self._White = params.get("White")
        self._BashAction = params.get("BashAction")
        self._Rule = params.get("Rule")
        self._Level = params.get("Level")
        self._Scope = params.get("Scope")
        self._Id = params.get("Id")
        self._Descript = params.get("Descript")
        self._EventId = params.get("EventId")
        self._DealOldEvents = params.get("DealOldEvents")
        self._Quuids = params.get("Quuids")
        self._Category = params.get("Category")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Uuids = params.get("Uuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BashRule(AbstractModel):
    """High-risk command rules

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _Name: Rule name
        :type Name: str
        :param _Level: Risk level (0: none, 1: high-risk, 2: medium-risk, 3: low-risk)
        :type Level: int
        :param _Rule: Regular expression
        :type Rule: str
        :param _Decription: Rule description
        :type Decription: str
        :param _Operator: Operator
        :type Operator: str
        :param _IsGlobal: Whether a global rule
        :type IsGlobal: int
        :param _Status: Status (0: valid; 1: invalid)
        :type Status: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        :param _Hostip: Host IP
        :type Hostip: str
        :param _Uuids: Arrays of UUIDs for servers to be effective
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuids: list of str
        :param _White: 0= blocklist; 1= allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :type White: int
        :param _DealOldEvents: Whether to process previous events: 0: do not process; 1: process
Note: This field may return null, indicating that no valid values can be obtained.
        :type DealOldEvents: int
        :param _Description: Rule description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        """
        self._Id = None
        self._Uuid = None
        self._Name = None
        self._Level = None
        self._Rule = None
        self._Decription = None
        self._Operator = None
        self._IsGlobal = None
        self._Status = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Hostip = None
        self._Uuids = None
        self._White = None
        self._DealOldEvents = None
        self._Description = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Name(self):
        """Rule name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Level(self):
        """Risk level (0: none, 1: high-risk, 2: medium-risk, 3: low-risk)
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Rule(self):
        """Regular expression
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Decription(self):
        warnings.warn("parameter `Decription` is deprecated", DeprecationWarning) 

        """Rule description
        :rtype: str
        """
        return self._Decription

    @Decription.setter
    def Decription(self, Decription):
        warnings.warn("parameter `Decription` is deprecated", DeprecationWarning) 

        self._Decription = Decription

    @property
    def Operator(self):
        """Operator
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def IsGlobal(self):
        """Whether a global rule
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Status(self):
        """Status (0: valid; 1: invalid)
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Hostip(self):
        """Host IP
        :rtype: str
        """
        return self._Hostip

    @Hostip.setter
    def Hostip(self, Hostip):
        self._Hostip = Hostip

    @property
    def Uuids(self):
        """Arrays of UUIDs for servers to be effective
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def White(self):
        """0= blocklist; 1= allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._White

    @White.setter
    def White(self, White):
        self._White = White

    @property
    def DealOldEvents(self):
        """Whether to process previous events: 0: do not process; 1: process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents

    @property
    def Description(self):
        """Rule description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Name = params.get("Name")
        self._Level = params.get("Level")
        self._Rule = params.get("Rule")
        self._Decription = params.get("Decription")
        self._Operator = params.get("Operator")
        self._IsGlobal = params.get("IsGlobal")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Hostip = params.get("Hostip")
        self._Uuids = params.get("Uuids")
        self._White = params.get("White")
        self._DealOldEvents = params.get("DealOldEvents")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BroadcastInfo(AbstractModel):
    """Security report article details

    """

    def __init__(self):
        r"""
        :param _Title: Article name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Title: str
        :param _GotoType: Redirection location: 0: no redirection; 1: virus scanning; 2: vulnerability scan; 3: security baseline
Note: This field may return null, indicating that no valid values can be obtained.
        :type GotoType: int
        :param _Subtitle: Subtitle
        :type Subtitle: str
        :param _CreateTime: Release time
        :type CreateTime: str
        :param _Content: Rich text content information
        :type Content: str
        :param _Id: Article unique ID
        :type Id: int
        :param _Type: Type: 0: emergency notification; 1: feature update; 2: industry honor; 3: version release
        :type Type: int
        """
        self._Title = None
        self._GotoType = None
        self._Subtitle = None
        self._CreateTime = None
        self._Content = None
        self._Id = None
        self._Type = None

    @property
    def Title(self):
        """Article name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def GotoType(self):
        """Redirection location: 0: no redirection; 1: virus scanning; 2: vulnerability scan; 3: security baseline
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._GotoType

    @GotoType.setter
    def GotoType(self, GotoType):
        self._GotoType = GotoType

    @property
    def Subtitle(self):
        """Subtitle
        :rtype: str
        """
        return self._Subtitle

    @Subtitle.setter
    def Subtitle(self, Subtitle):
        self._Subtitle = Subtitle

    @property
    def CreateTime(self):
        """Release time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Content(self):
        """Rich text content information
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Id(self):
        """Article unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Type(self):
        """Type: 0: emergency notification; 1: feature update; 2: industry honor; 3: version release
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Title = params.get("Title")
        self._GotoType = params.get("GotoType")
        self._Subtitle = params.get("Subtitle")
        self._CreateTime = params.get("CreateTime")
        self._Content = params.get("Content")
        self._Id = params.get("Id")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Broadcasts(AbstractModel):
    """Security report list

    """

    def __init__(self):
        r"""
        :param _Title: Article name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Title: str
        :param _Type: Type: 0: emergency notification; 1: feature update; 2: industry honor; 3: version release
Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: int
        :param _Subtitle: Subtitle
        :type Subtitle: str
        :param _CreateTime: Release time
        :type CreateTime: str
        :param _Id: Article unique ID
        :type Id: int
        :param _Level: Severity level. 0: none; 1: critical; 2: high-risk; 3: medium-risk; 4: low-risk
        :type Level: int
        """
        self._Title = None
        self._Type = None
        self._Subtitle = None
        self._CreateTime = None
        self._Id = None
        self._Level = None

    @property
    def Title(self):
        """Article name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def Type(self):
        """Type: 0: emergency notification; 1: feature update; 2: industry honor; 3: version release
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Subtitle(self):
        """Subtitle
        :rtype: str
        """
        return self._Subtitle

    @Subtitle.setter
    def Subtitle(self, Subtitle):
        self._Subtitle = Subtitle

    @property
    def CreateTime(self):
        """Release time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Id(self):
        """Article unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Level(self):
        """Severity level. 0: none; 1: critical; 2: high-risk; 3: medium-risk; 4: low-risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level


    def _deserialize(self, params):
        self._Title = params.get("Title")
        self._Type = params.get("Type")
        self._Subtitle = params.get("Subtitle")
        self._CreateTime = params.get("CreateTime")
        self._Id = params.get("Id")
        self._Level = params.get("Level")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BruteAttackInfo(AbstractModel):
    """Password cracking list entity

    """

    def __init__(self):
        r"""
        :param _Id: Unique ID
        :type Id: int
        :param _Uuid: CWPP client UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MachineIp: Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineIp: str
        :param _MachineName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineName: str
        :param _UserName: Username
Note: This field may return null, indicating that no valid values can be obtained.
        :type UserName: str
        :param _SrcIp: Source IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type SrcIp: str
        :param _Status: SUCCESS: cracking successful; FAILED: cracking failed
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: str
        :param _Country: Country/Region ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Country: int
        :param _City: City ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type City: int
        :param _Province: Province ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Province: int
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _BanStatus: 0: no blocking (not supported for the client version)1: blocked
2: blocking failed (program exception)
3: no blocking (do not block for the private network)
4: availability zone does not support blocking
10: blocking
81: no blocking (blocking disabled)
82: no blocking (non-Pro Edition)
83: no blocking (added to the allowlist)
86: no blocking (system allowlist)
87: no blocking (client offline)
Note: This field may return null, indicating that no valid values can be obtained.
        :type BanStatus: int
        :param _EventType: Event type. 200: brute force cracking event; 300: event of successful brute force cracking (page display); 400: event of brute force cracking on a non-existent account.Note: This field may return null, indicating that no valid values can be obtained.
        :type EventType: int
        :param _Count: Occurrence count
Note: This field may return null, indicating that no valid values can be obtained.
        :type Count: int
        :param _Quuid: Machine UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _IsProVersion: Whether it is of the Pro Edition (true/false)
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsProVersion: bool
        :param _Protocol: Username of the attacked service
Note: This field may return null, indicating that no valid values can be obtained.
        :type Protocol: str
        :param _Port: Port
Note: This field may return null, indicating that no valid values can be obtained.
        :type Port: int
        :param _ModifyTime: Last attack time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _InstanceId: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        :param _DataStatus: 0: pending; 1: ignored; 5: fixed; 6: added to allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :type DataStatus: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Location: Geo-location in Chinese
Note: This field may return null, indicating that no valid values can be obtained.
        :type Location: str
        :param _RiskLevel: Threat level. 0: low-risk; 1: medium-risk; 2: high-risk.Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: int
        :param _DataFrom: Event source. 0: blocking rule; 1: threat intelligence.Note: This field may return null, indicating that no valid values can be obtained.
        :type DataFrom: int
        :param _AttackStatusDesc: Description of the brute force cracking status
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackStatusDesc: str
        :param _BanExpiredTime: Blocking expiration time (valid only for events in blocking status)
Note: This field may return null, indicating that no valid values can be obtained.
        :type BanExpiredTime: str
        """
        self._Id = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None
        self._UserName = None
        self._SrcIp = None
        self._Status = None
        self._Country = None
        self._City = None
        self._Province = None
        self._CreateTime = None
        self._BanStatus = None
        self._EventType = None
        self._Count = None
        self._Quuid = None
        self._IsProVersion = None
        self._Protocol = None
        self._Port = None
        self._ModifyTime = None
        self._InstanceId = None
        self._DataStatus = None
        self._MachineExtraInfo = None
        self._Location = None
        self._RiskLevel = None
        self._DataFrom = None
        self._AttackStatusDesc = None
        self._BanExpiredTime = None

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP client UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UserName(self):
        """Username
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def SrcIp(self):
        """Source IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def Status(self):
        """SUCCESS: cracking successful; FAILED: cracking failed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Country(self):
        """Country/Region ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Country

    @Country.setter
    def Country(self, Country):
        self._Country = Country

    @property
    def City(self):
        """City ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def Province(self):
        """Province ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Province

    @Province.setter
    def Province(self, Province):
        self._Province = Province

    @property
    def CreateTime(self):
        """Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def BanStatus(self):
        """0: no blocking (not supported for the client version)1: blocked
2: blocking failed (program exception)
3: no blocking (do not block for the private network)
4: availability zone does not support blocking
10: blocking
81: no blocking (blocking disabled)
82: no blocking (non-Pro Edition)
83: no blocking (added to the allowlist)
86: no blocking (system allowlist)
87: no blocking (client offline)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BanStatus

    @BanStatus.setter
    def BanStatus(self, BanStatus):
        self._BanStatus = BanStatus

    @property
    def EventType(self):
        """Event type. 200: brute force cracking event; 300: event of successful brute force cracking (page display); 400: event of brute force cracking on a non-existent account.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def Count(self):
        """Occurrence count
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Quuid(self):
        """Machine UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def IsProVersion(self):
        """Whether it is of the Pro Edition (true/false)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._IsProVersion

    @IsProVersion.setter
    def IsProVersion(self, IsProVersion):
        self._IsProVersion = IsProVersion

    @property
    def Protocol(self):
        """Username of the attacked service
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Protocol

    @Protocol.setter
    def Protocol(self, Protocol):
        self._Protocol = Protocol

    @property
    def Port(self):
        """Port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def ModifyTime(self):
        """Last attack time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def InstanceId(self):
        """Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def DataStatus(self):
        """0: pending; 1: ignored; 5: fixed; 6: added to allowlist
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DataStatus

    @DataStatus.setter
    def DataStatus(self, DataStatus):
        self._DataStatus = DataStatus

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Location(self):
        """Geo-location in Chinese
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location

    @property
    def RiskLevel(self):
        """Threat level. 0: low-risk; 1: medium-risk; 2: high-risk.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def DataFrom(self):
        """Event source. 0: blocking rule; 1: threat intelligence.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DataFrom

    @DataFrom.setter
    def DataFrom(self, DataFrom):
        self._DataFrom = DataFrom

    @property
    def AttackStatusDesc(self):
        """Description of the brute force cracking status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AttackStatusDesc

    @AttackStatusDesc.setter
    def AttackStatusDesc(self, AttackStatusDesc):
        self._AttackStatusDesc = AttackStatusDesc

    @property
    def BanExpiredTime(self):
        """Blocking expiration time (valid only for events in blocking status)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._BanExpiredTime

    @BanExpiredTime.setter
    def BanExpiredTime(self, BanExpiredTime):
        self._BanExpiredTime = BanExpiredTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._UserName = params.get("UserName")
        self._SrcIp = params.get("SrcIp")
        self._Status = params.get("Status")
        self._Country = params.get("Country")
        self._City = params.get("City")
        self._Province = params.get("Province")
        self._CreateTime = params.get("CreateTime")
        self._BanStatus = params.get("BanStatus")
        self._EventType = params.get("EventType")
        self._Count = params.get("Count")
        self._Quuid = params.get("Quuid")
        self._IsProVersion = params.get("IsProVersion")
        self._Protocol = params.get("Protocol")
        self._Port = params.get("Port")
        self._ModifyTime = params.get("ModifyTime")
        self._InstanceId = params.get("InstanceId")
        self._DataStatus = params.get("DataStatus")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Location = params.get("Location")
        self._RiskLevel = params.get("RiskLevel")
        self._DataFrom = params.get("DataFrom")
        self._AttackStatusDesc = params.get("AttackStatusDesc")
        self._BanExpiredTime = params.get("BanExpiredTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BruteAttackRule(AbstractModel):
    """Standard blocking mode rule

    """

    def __init__(self):
        r"""
        :param _TimeRange: Timeframe of the brute force event (unit: second)
        :type TimeRange: int
        :param _LoginFailTimes: Number of failed attempts during the brute force event
        :type LoginFailTimes: int
        """
        self._TimeRange = None
        self._LoginFailTimes = None

    @property
    def TimeRange(self):
        """Timeframe of the brute force event (unit: second)
        :rtype: int
        """
        return self._TimeRange

    @TimeRange.setter
    def TimeRange(self, TimeRange):
        self._TimeRange = TimeRange

    @property
    def LoginFailTimes(self):
        """Number of failed attempts during the brute force event
        :rtype: int
        """
        return self._LoginFailTimes

    @LoginFailTimes.setter
    def LoginFailTimes(self, LoginFailTimes):
        self._LoginFailTimes = LoginFailTimes


    def _deserialize(self, params):
        self._TimeRange = params.get("TimeRange")
        self._LoginFailTimes = params.get("LoginFailTimes")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BruteAttackRuleList(AbstractModel):
    """List of rules for determining brute force cracking

    """

    def __init__(self):
        r"""
        :param _TimeRange: Timeframe of the brute force cracking event (unit: second)
        :type TimeRange: int
        :param _LoginFailTimes: Number of failed attempts during the brute force cracking event
        :type LoginFailTimes: int
        :param _Enable: Whether the rule is empty. If yes, fill in the default rule.
        :type Enable: bool
        :param _TimeRangeDefault: Occurrence time range of brute force cracking events, in seconds (default rule)
        :type TimeRangeDefault: int
        :param _LoginFailTimesDefault: Number of failed brute force cracking events (default rule)
        :type LoginFailTimesDefault: int
        """
        self._TimeRange = None
        self._LoginFailTimes = None
        self._Enable = None
        self._TimeRangeDefault = None
        self._LoginFailTimesDefault = None

    @property
    def TimeRange(self):
        """Timeframe of the brute force cracking event (unit: second)
        :rtype: int
        """
        return self._TimeRange

    @TimeRange.setter
    def TimeRange(self, TimeRange):
        self._TimeRange = TimeRange

    @property
    def LoginFailTimes(self):
        """Number of failed attempts during the brute force cracking event
        :rtype: int
        """
        return self._LoginFailTimes

    @LoginFailTimes.setter
    def LoginFailTimes(self, LoginFailTimes):
        self._LoginFailTimes = LoginFailTimes

    @property
    def Enable(self):
        """Whether the rule is empty. If yes, fill in the default rule.
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def TimeRangeDefault(self):
        """Occurrence time range of brute force cracking events, in seconds (default rule)
        :rtype: int
        """
        return self._TimeRangeDefault

    @TimeRangeDefault.setter
    def TimeRangeDefault(self, TimeRangeDefault):
        self._TimeRangeDefault = TimeRangeDefault

    @property
    def LoginFailTimesDefault(self):
        """Number of failed brute force cracking events (default rule)
        :rtype: int
        """
        return self._LoginFailTimesDefault

    @LoginFailTimesDefault.setter
    def LoginFailTimesDefault(self, LoginFailTimesDefault):
        self._LoginFailTimesDefault = LoginFailTimesDefault


    def _deserialize(self, params):
        self._TimeRange = params.get("TimeRange")
        self._LoginFailTimes = params.get("LoginFailTimes")
        self._Enable = params.get("Enable")
        self._TimeRangeDefault = params.get("TimeRangeDefault")
        self._LoginFailTimesDefault = params.get("LoginFailTimesDefault")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CKafkaInstanceInfo(AbstractModel):
    """CKafka instance information

    """

    def __init__(self):
        r"""
        :param _InstanceID: Instance ID
        :type InstanceID: str
        :param _InstanceName: Instance name
        :type InstanceName: str
        :param _KafkaVersion: Version No.
        :type KafkaVersion: str
        :param _TopicList: Topic list
Note: This field may return null, indicating that no valid values can be obtained.
        :type TopicList: list of CKafkaTopicInfo
        :param _RouteList: Routing List
        :type RouteList: list of CKafkaRouteInfo
        :param _DiskSize: Disk capacity (unit: GB)
        :type DiskSize: int
        :param _VpcId: vpcId. Leaving it blank indicates a basic network.
        :type VpcId: str
        :param _SubnetId: Subnet ID
        :type SubnetId: str
        :param _Healthy: Status: 1 - healthy; 2 - alarm; 3 - abnormal instance status
        :type Healthy: int
        :param _Zone: Availability zone
        :type Zone: str
        :param _Az: Region
        :type Az: str
        :param _Bandwidth: Instance bandwidth (unit: Mbps)
        :type Bandwidth: int
        """
        self._InstanceID = None
        self._InstanceName = None
        self._KafkaVersion = None
        self._TopicList = None
        self._RouteList = None
        self._DiskSize = None
        self._VpcId = None
        self._SubnetId = None
        self._Healthy = None
        self._Zone = None
        self._Az = None
        self._Bandwidth = None

    @property
    def InstanceID(self):
        """Instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def InstanceName(self):
        """Instance name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def KafkaVersion(self):
        """Version No.
        :rtype: str
        """
        return self._KafkaVersion

    @KafkaVersion.setter
    def KafkaVersion(self, KafkaVersion):
        self._KafkaVersion = KafkaVersion

    @property
    def TopicList(self):
        """Topic list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of CKafkaTopicInfo
        """
        return self._TopicList

    @TopicList.setter
    def TopicList(self, TopicList):
        self._TopicList = TopicList

    @property
    def RouteList(self):
        """Routing List
        :rtype: list of CKafkaRouteInfo
        """
        return self._RouteList

    @RouteList.setter
    def RouteList(self, RouteList):
        self._RouteList = RouteList

    @property
    def DiskSize(self):
        """Disk capacity (unit: GB)
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def VpcId(self):
        """vpcId. Leaving it blank indicates a basic network.
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """Subnet ID
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Healthy(self):
        """Status: 1 - healthy; 2 - alarm; 3 - abnormal instance status
        :rtype: int
        """
        return self._Healthy

    @Healthy.setter
    def Healthy(self, Healthy):
        self._Healthy = Healthy

    @property
    def Zone(self):
        """Availability zone
        :rtype: str
        """
        return self._Zone

    @Zone.setter
    def Zone(self, Zone):
        self._Zone = Zone

    @property
    def Az(self):
        """Region
        :rtype: str
        """
        return self._Az

    @Az.setter
    def Az(self, Az):
        self._Az = Az

    @property
    def Bandwidth(self):
        """Instance bandwidth (unit: Mbps)
        :rtype: int
        """
        return self._Bandwidth

    @Bandwidth.setter
    def Bandwidth(self, Bandwidth):
        self._Bandwidth = Bandwidth


    def _deserialize(self, params):
        self._InstanceID = params.get("InstanceID")
        self._InstanceName = params.get("InstanceName")
        self._KafkaVersion = params.get("KafkaVersion")
        if params.get("TopicList") is not None:
            self._TopicList = []
            for item in params.get("TopicList"):
                obj = CKafkaTopicInfo()
                obj._deserialize(item)
                self._TopicList.append(obj)
        if params.get("RouteList") is not None:
            self._RouteList = []
            for item in params.get("RouteList"):
                obj = CKafkaRouteInfo()
                obj._deserialize(item)
                self._RouteList.append(obj)
        self._DiskSize = params.get("DiskSize")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._Healthy = params.get("Healthy")
        self._Zone = params.get("Zone")
        self._Az = params.get("Az")
        self._Bandwidth = params.get("Bandwidth")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CKafkaRouteInfo(AbstractModel):
    """CKafka domain name information

    """

    def __init__(self):
        r"""
        :param _RouteID: Routing ID
        :type RouteID: int
        :param _Domain: Domain name
        :type Domain: str
        :param _DomainPort: Domain Port
        :type DomainPort: int
        :param _Vip: Virtual IP
        :type Vip: str
        :param _VipType: Virtual IP Type
        :type VipType: int
        :param _AccessType: Access type
        :type AccessType: int
        """
        self._RouteID = None
        self._Domain = None
        self._DomainPort = None
        self._Vip = None
        self._VipType = None
        self._AccessType = None

    @property
    def RouteID(self):
        """Routing ID
        :rtype: int
        """
        return self._RouteID

    @RouteID.setter
    def RouteID(self, RouteID):
        self._RouteID = RouteID

    @property
    def Domain(self):
        """Domain name
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def DomainPort(self):
        """Domain Port
        :rtype: int
        """
        return self._DomainPort

    @DomainPort.setter
    def DomainPort(self, DomainPort):
        self._DomainPort = DomainPort

    @property
    def Vip(self):
        """Virtual IP
        :rtype: str
        """
        return self._Vip

    @Vip.setter
    def Vip(self, Vip):
        self._Vip = Vip

    @property
    def VipType(self):
        """Virtual IP Type
        :rtype: int
        """
        return self._VipType

    @VipType.setter
    def VipType(self, VipType):
        self._VipType = VipType

    @property
    def AccessType(self):
        """Access type
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType


    def _deserialize(self, params):
        self._RouteID = params.get("RouteID")
        self._Domain = params.get("Domain")
        self._DomainPort = params.get("DomainPort")
        self._Vip = params.get("Vip")
        self._VipType = params.get("VipType")
        self._AccessType = params.get("AccessType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CKafkaTopicInfo(AbstractModel):
    """CKafka topic name

    """

    def __init__(self):
        r"""
        :param _TopicID: Topic ID
        :type TopicID: str
        :param _TopicName: Topic name
        :type TopicName: str
        """
        self._TopicID = None
        self._TopicName = None

    @property
    def TopicID(self):
        """Topic ID
        :rtype: str
        """
        return self._TopicID

    @TopicID.setter
    def TopicID(self, TopicID):
        self._TopicID = TopicID

    @property
    def TopicName(self):
        """Topic name
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName


    def _deserialize(self, params):
        self._TopicID = params.get("TopicID")
        self._TopicName = params.get("TopicName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CanFixVulInfo(AbstractModel):
    """Host information for batch vulnerability fixing

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulId: int
        :param _VulName: Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulName: str
        :param _HostList: Information on hosts where this vulnerability can be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostList: list of VulInfoHostInfo
        :param _FixTag: Fixing prompt tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixTag: list of str
        :param _VulCategory: 
        :type VulCategory: int
        """
        self._VulId = None
        self._VulName = None
        self._HostList = None
        self._FixTag = None
        self._VulCategory = None

    @property
    def VulId(self):
        """Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def VulName(self):
        """Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def HostList(self):
        """Information on hosts where this vulnerability can be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulInfoHostInfo
        """
        return self._HostList

    @HostList.setter
    def HostList(self, HostList):
        self._HostList = HostList

    @property
    def FixTag(self):
        """Fixing prompt tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._FixTag

    @FixTag.setter
    def FixTag(self, FixTag):
        self._FixTag = FixTag

    @property
    def VulCategory(self):
        """
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._VulName = params.get("VulName")
        if params.get("HostList") is not None:
            self._HostList = []
            for item in params.get("HostList"):
                obj = VulInfoHostInfo()
                obj._deserialize(item)
                self._HostList.append(obj)
        self._FixTag = params.get("FixTag")
        self._VulCategory = params.get("VulCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CanNotSeparateInfo(AbstractModel):
    """Information on machine with non-isolatable Trojan

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Alias: Server name
        :type Alias: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _Reason: Reason for isolation failure: 1 - agent offline
        :type Reason: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Alias = None
        self._PrivateIp = None
        self._PublicIp = None
        self._Reason = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Alias(self):
        """Server name
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def PublicIp(self):
        """Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def Reason(self):
        """Reason for isolation failure: 1 - agent offline
        :rtype: int
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Alias = params.get("Alias")
        self._PrivateIp = params.get("PrivateIp")
        self._PublicIp = params.get("PublicIp")
        self._Reason = params.get("Reason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CancelIgnoreVulRequest(AbstractModel):
    """CancelIgnoreVul request structure.

    """

    def __init__(self):
        r"""
        :param _EventIds: Vulnerability event ID string (multiple entries are separated by comma)
        :type EventIds: str
        """
        self._EventIds = None

    @property
    def EventIds(self):
        """Vulnerability event ID string (multiple entries are separated by comma)
        :rtype: str
        """
        return self._EventIds

    @EventIds.setter
    def EventIds(self, EventIds):
        self._EventIds = EventIds


    def _deserialize(self, params):
        self._EventIds = params.get("EventIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CancelIgnoreVulResponse(AbstractModel):
    """CancelIgnoreVul response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ChangeRuleEventsIgnoreStatusRequest(AbstractModel):
    """ChangeRuleEventsIgnoreStatus request structure.

    """

    def __init__(self):
        r"""
        :param _IgnoreStatus: Ignore status: 0: unignore; 1: ignore
        :type IgnoreStatus: int
        :param _RuleIdList: Detection item ID array
        :type RuleIdList: list of int non-negative
        :param _EventIdList: Event ID array
        :type EventIdList: list of int non-negative
        """
        self._IgnoreStatus = None
        self._RuleIdList = None
        self._EventIdList = None

    @property
    def IgnoreStatus(self):
        """Ignore status: 0: unignore; 1: ignore
        :rtype: int
        """
        return self._IgnoreStatus

    @IgnoreStatus.setter
    def IgnoreStatus(self, IgnoreStatus):
        self._IgnoreStatus = IgnoreStatus

    @property
    def RuleIdList(self):
        """Detection item ID array
        :rtype: list of int non-negative
        """
        return self._RuleIdList

    @RuleIdList.setter
    def RuleIdList(self, RuleIdList):
        self._RuleIdList = RuleIdList

    @property
    def EventIdList(self):
        """Event ID array
        :rtype: list of int non-negative
        """
        return self._EventIdList

    @EventIdList.setter
    def EventIdList(self, EventIdList):
        self._EventIdList = EventIdList


    def _deserialize(self, params):
        self._IgnoreStatus = params.get("IgnoreStatus")
        self._RuleIdList = params.get("RuleIdList")
        self._EventIdList = params.get("EventIdList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ChangeRuleEventsIgnoreStatusResponse(AbstractModel):
    """ChangeRuleEventsIgnoreStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ChangeStrategyEnableStatusRequest(AbstractModel):
    """ChangeStrategyEnableStatus request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyId: Baseline policy ID
        :type StrategyId: int
        :param _Status: Enabling status
        :type Status: int
        """
        self._StrategyId = None
        self._Status = None

    @property
    def StrategyId(self):
        """Baseline policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def Status(self):
        """Enabling status
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._StrategyId = params.get("StrategyId")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ChangeStrategyEnableStatusResponse(AbstractModel):
    """ChangeStrategyEnableStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CheckBashPolicyParamsRequest(AbstractModel):
    """CheckBashPolicyParams request structure.

    """

    def __init__(self):
        r"""
        :param _CheckField: Verify content Name or Rule. (Use a comma to separate them if both need to be verified.)
        :type CheckField: str
        :param _EventId: Event ID needs to be submitted when allowlisting an event in the event list.
        :type EventId: int
        :param _Name: Name of rule to be entered
        :type Name: str
        :param _Rule: The regular expression to be entered by the user: It must match command content corresponding to the submitted EventId.
        :type Rule: str
        :param _Id: Rule ID passed during editing
        :type Id: int
        """
        self._CheckField = None
        self._EventId = None
        self._Name = None
        self._Rule = None
        self._Id = None

    @property
    def CheckField(self):
        """Verify content Name or Rule. (Use a comma to separate them if both need to be verified.)
        :rtype: str
        """
        return self._CheckField

    @CheckField.setter
    def CheckField(self, CheckField):
        self._CheckField = CheckField

    @property
    def EventId(self):
        """Event ID needs to be submitted when allowlisting an event in the event list.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def Name(self):
        """Name of rule to be entered
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Rule(self):
        """The regular expression to be entered by the user: It must match command content corresponding to the submitted EventId.
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Id(self):
        """Rule ID passed during editing
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._CheckField = params.get("CheckField")
        self._EventId = params.get("EventId")
        self._Name = params.get("Name")
        self._Rule = params.get("Rule")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckBashPolicyParamsResponse(AbstractModel):
    """CheckBashPolicyParams response structure.

    """

    def __init__(self):
        r"""
        :param _ErrCode: 0: verification passed; 1: rule name verification failed; 2: regular expression verification failed.
        :type ErrCode: int
        :param _ErrMsg: Verification information
        :type ErrMsg: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ErrCode = None
        self._ErrMsg = None
        self._RequestId = None

    @property
    def ErrCode(self):
        """0: verification passed; 1: rule name verification failed; 2: regular expression verification failed.
        :rtype: int
        """
        return self._ErrCode

    @ErrCode.setter
    def ErrCode(self, ErrCode):
        self._ErrCode = ErrCode

    @property
    def ErrMsg(self):
        """Verification information
        :rtype: str
        """
        return self._ErrMsg

    @ErrMsg.setter
    def ErrMsg(self, ErrMsg):
        self._ErrMsg = ErrMsg

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ErrCode = params.get("ErrCode")
        self._ErrMsg = params.get("ErrMsg")
        self._RequestId = params.get("RequestId")


class CheckBashRuleParamsRequest(AbstractModel):
    """CheckBashRuleParams request structure.

    """

    def __init__(self):
        r"""
        :param _CheckField: Verify content Name or Rule. (Use a comma to separate them if both need to be verified.)
        :type CheckField: str
        :param _EventId: Event ID needs to be submitted when allowlisting an event in the event list.
        :type EventId: int
        :param _Name: Name of rule to be entered
        :type Name: str
        :param _Rule: The regular expression to be entered by the user: It must match command content corresponding to the submitted EventId.
        :type Rule: str
        :param _Id: Rule ID passed during editing
        :type Id: int
        """
        self._CheckField = None
        self._EventId = None
        self._Name = None
        self._Rule = None
        self._Id = None

    @property
    def CheckField(self):
        """Verify content Name or Rule. (Use a comma to separate them if both need to be verified.)
        :rtype: str
        """
        return self._CheckField

    @CheckField.setter
    def CheckField(self, CheckField):
        self._CheckField = CheckField

    @property
    def EventId(self):
        """Event ID needs to be submitted when allowlisting an event in the event list.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def Name(self):
        """Name of rule to be entered
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Rule(self):
        """The regular expression to be entered by the user: It must match command content corresponding to the submitted EventId.
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Id(self):
        """Rule ID passed during editing
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._CheckField = params.get("CheckField")
        self._EventId = params.get("EventId")
        self._Name = params.get("Name")
        self._Rule = params.get("Rule")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckBashRuleParamsResponse(AbstractModel):
    """CheckBashRuleParams response structure.

    """

    def __init__(self):
        r"""
        :param _ErrCode: 0: verification passed; 1: rule name verification failed; 2: regular expression verification failed.
        :type ErrCode: int
        :param _ErrMsg: Verification information
        :type ErrMsg: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ErrCode = None
        self._ErrMsg = None
        self._RequestId = None

    @property
    def ErrCode(self):
        """0: verification passed; 1: rule name verification failed; 2: regular expression verification failed.
        :rtype: int
        """
        return self._ErrCode

    @ErrCode.setter
    def ErrCode(self, ErrCode):
        self._ErrCode = ErrCode

    @property
    def ErrMsg(self):
        """Verification information
        :rtype: str
        """
        return self._ErrMsg

    @ErrMsg.setter
    def ErrMsg(self, ErrMsg):
        self._ErrMsg = ErrMsg

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ErrCode = params.get("ErrCode")
        self._ErrMsg = params.get("ErrMsg")
        self._RequestId = params.get("RequestId")


class CheckFileTamperRuleRequest(AbstractModel):
    """CheckFileTamperRule request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Name of rule to be entered
        :type Name: str
        :param _Id: Rule ID passed during editing
        :type Id: int
        """
        self._Name = None
        self._Id = None

    @property
    def Name(self):
        """Name of rule to be entered
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Id(self):
        """Rule ID passed during editing
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckFileTamperRuleResponse(AbstractModel):
    """CheckFileTamperRule response structure.

    """

    def __init__(self):
        r"""
        :param _ErrCode: 0=verification passed; 1=rule name verification failed
        :type ErrCode: int
        :param _ErrMsg: Verification information
        :type ErrMsg: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ErrCode = None
        self._ErrMsg = None
        self._RequestId = None

    @property
    def ErrCode(self):
        """0=verification passed; 1=rule name verification failed
        :rtype: int
        """
        return self._ErrCode

    @ErrCode.setter
    def ErrCode(self, ErrCode):
        self._ErrCode = ErrCode

    @property
    def ErrMsg(self):
        """Verification information
        :rtype: str
        """
        return self._ErrMsg

    @ErrMsg.setter
    def ErrMsg(self, ErrMsg):
        self._ErrMsg = ErrMsg

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ErrCode = params.get("ErrCode")
        self._ErrMsg = params.get("ErrMsg")
        self._RequestId = params.get("RequestId")


class CheckFirstScanBaselineRequest(AbstractModel):
    """CheckFirstScanBaseline request structure.

    """


class CheckFirstScanBaselineResponse(AbstractModel):
    """CheckFirstScanBaseline response structure.

    """

    def __init__(self):
        r"""
        :param _FirstScan: Whether the first detection: 0 - no; 1 - yes
        :type FirstScan: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FirstScan = None
        self._RequestId = None

    @property
    def FirstScan(self):
        """Whether the first detection: 0 - no; 1 - yes
        :rtype: int
        """
        return self._FirstScan

    @FirstScan.setter
    def FirstScan(self, FirstScan):
        self._FirstScan = FirstScan

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FirstScan = params.get("FirstScan")
        self._RequestId = params.get("RequestId")


class CheckLogKafkaConnectionStateRequest(AbstractModel):
    """CheckLogKafkaConnectionState request structure.

    """

    def __init__(self):
        r"""
        :param _AccessType: Access method: 1 - public network domain name access; 2 - supported environment access
        :type AccessType: int
        :param _AccessAddr: Access address: domain name or IP, with port
        :type AccessAddr: str
        :param _Username: Username
        :type Username: str
        :param _HasPwd: 0 - without password; 1 - with password
        :type HasPwd: int
        :param _Pwd: Password, using AES encryption
        :type Pwd: str
        :param _KafkaId: Kafka instance ID
        :type KafkaId: str
        :param _InsVersion: Kafka version
        :type InsVersion: str
        """
        self._AccessType = None
        self._AccessAddr = None
        self._Username = None
        self._HasPwd = None
        self._Pwd = None
        self._KafkaId = None
        self._InsVersion = None

    @property
    def AccessType(self):
        """Access method: 1 - public network domain name access; 2 - supported environment access
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType

    @property
    def AccessAddr(self):
        """Access address: domain name or IP, with port
        :rtype: str
        """
        return self._AccessAddr

    @AccessAddr.setter
    def AccessAddr(self, AccessAddr):
        self._AccessAddr = AccessAddr

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def HasPwd(self):
        """0 - without password; 1 - with password
        :rtype: int
        """
        return self._HasPwd

    @HasPwd.setter
    def HasPwd(self, HasPwd):
        self._HasPwd = HasPwd

    @property
    def Pwd(self):
        """Password, using AES encryption
        :rtype: str
        """
        return self._Pwd

    @Pwd.setter
    def Pwd(self, Pwd):
        self._Pwd = Pwd

    @property
    def KafkaId(self):
        """Kafka instance ID
        :rtype: str
        """
        return self._KafkaId

    @KafkaId.setter
    def KafkaId(self, KafkaId):
        self._KafkaId = KafkaId

    @property
    def InsVersion(self):
        """Kafka version
        :rtype: str
        """
        return self._InsVersion

    @InsVersion.setter
    def InsVersion(self, InsVersion):
        self._InsVersion = InsVersion


    def _deserialize(self, params):
        self._AccessType = params.get("AccessType")
        self._AccessAddr = params.get("AccessAddr")
        self._Username = params.get("Username")
        self._HasPwd = params.get("HasPwd")
        self._Pwd = params.get("Pwd")
        self._KafkaId = params.get("KafkaId")
        self._InsVersion = params.get("InsVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckLogKafkaConnectionStateResponse(AbstractModel):
    """CheckLogKafkaConnectionState response structure.

    """

    def __init__(self):
        r"""
        :param _IsConnect: true: connected; false: not connected.
        :type IsConnect: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsConnect = None
        self._RequestId = None

    @property
    def IsConnect(self):
        """true: connected; false: not connected.
        :rtype: bool
        """
        return self._IsConnect

    @IsConnect.setter
    def IsConnect(self, IsConnect):
        self._IsConnect = IsConnect

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsConnect = params.get("IsConnect")
        self._RequestId = params.get("RequestId")


class ClearLocalStorageRequest(AbstractModel):
    """ClearLocalStorage request structure.

    """


class ClearLocalStorageResponse(AbstractModel):
    """ClearLocalStorage response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ComponentStatistics(AbstractModel):
    """Component statistics

    """

    def __init__(self):
        r"""
        :param _Id: Component ID
        :type Id: int
        :param _MachineNum: Number of hosts
        :type MachineNum: int
        :param _ComponentName: Component name
        :type ComponentName: str
        :param _ComponentType: Component type
<li>WEB: Web component</li>
<li>SYSTEM: system component</li>
        :type ComponentType: str
        :param _Description: Component description
        :type Description: str
        """
        self._Id = None
        self._MachineNum = None
        self._ComponentName = None
        self._ComponentType = None
        self._Description = None

    @property
    def Id(self):
        """Component ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MachineNum(self):
        """Number of hosts
        :rtype: int
        """
        return self._MachineNum

    @MachineNum.setter
    def MachineNum(self, MachineNum):
        self._MachineNum = MachineNum

    @property
    def ComponentName(self):
        """Component name
        :rtype: str
        """
        return self._ComponentName

    @ComponentName.setter
    def ComponentName(self, ComponentName):
        self._ComponentName = ComponentName

    @property
    def ComponentType(self):
        """Component type
<li>WEB: Web component</li>
<li>SYSTEM: system component</li>
        :rtype: str
        """
        return self._ComponentType

    @ComponentType.setter
    def ComponentType(self, ComponentType):
        self._ComponentType = ComponentType

    @property
    def Description(self):
        """Component description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._MachineNum = params.get("MachineNum")
        self._ComponentName = params.get("ComponentName")
        self._ComponentType = params.get("ComponentType")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBanWhiteListRequest(AbstractModel):
    """CreateBanWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Rules: Block rules
        :type Rules: :class:`tencentcloud.cwp.v20180228.models.BanWhiteList`
        :param _EventId: Event list ID, which is passed when the event list is allowlisted. After it is successfully allowlisted, the events in the list will be marked as whitelisted.
        :type EventId: int
        """
        self._Rules = None
        self._EventId = None

    @property
    def Rules(self):
        """Block rules
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BanWhiteList`
        """
        return self._Rules

    @Rules.setter
    def Rules(self, Rules):
        self._Rules = Rules

    @property
    def EventId(self):
        """Event list ID, which is passed when the event list is allowlisted. After it is successfully allowlisted, the events in the list will be marked as whitelisted.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        if params.get("Rules") is not None:
            self._Rules = BanWhiteList()
            self._Rules._deserialize(params.get("Rules"))
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBanWhiteListResponse(AbstractModel):
    """CreateBanWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _IsGlobal: Whether a global rule
        :type IsGlobal: bool
        :param _IsDuplicate: Whether the addition of a rule would result in a duplicate
        :type IsDuplicate: bool
        :param _DuplicateHosts: Information on duplicate machines
        :type DuplicateHosts: list of DuplicateHosts
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsGlobal = None
        self._IsDuplicate = None
        self._DuplicateHosts = None
        self._RequestId = None

    @property
    def IsGlobal(self):
        """Whether a global rule
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def IsDuplicate(self):
        """Whether the addition of a rule would result in a duplicate
        :rtype: bool
        """
        return self._IsDuplicate

    @IsDuplicate.setter
    def IsDuplicate(self, IsDuplicate):
        self._IsDuplicate = IsDuplicate

    @property
    def DuplicateHosts(self):
        """Information on duplicate machines
        :rtype: list of DuplicateHosts
        """
        return self._DuplicateHosts

    @DuplicateHosts.setter
    def DuplicateHosts(self, DuplicateHosts):
        self._DuplicateHosts = DuplicateHosts

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsGlobal = params.get("IsGlobal")
        self._IsDuplicate = params.get("IsDuplicate")
        if params.get("DuplicateHosts") is not None:
            self._DuplicateHosts = []
            for item in params.get("DuplicateHosts"):
                obj = DuplicateHosts()
                obj._deserialize(item)
                self._DuplicateHosts.append(obj)
        self._RequestId = params.get("RequestId")


class CreateBaselineStrategyRequest(AbstractModel):
    """CreateBaselineStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyName: Policy name
        :type StrategyName: str
        :param _ScanCycle: Check cycle, indicating the number of days between checks. Example: 2, indicating that the check is carried out every 2 days.
        :type ScanCycle: int
        :param _ScanAt: Time for a periodic check. The scan task is issued at this time. Example: "22:00", indicating that the task is issued at 22:00.
        :type ScanAt: str
        :param _CategoryIds: Array of selected baseline IDs under this policy. Example: [1,3,5,7]
        :type CategoryIds: list of int non-negative
        :param _IsGlobal: Whether all servers are scanned. 1: yes; 0: no. If the value is 1, all Professional Edition hosts are scanned.
        :type IsGlobal: int
        :param _MachineType: Cloud host type:
CVM: virtual machine
BM: bare metal server
ECM: edge computing machine
LH: Lighthouse 
Other: hybrid cloud machine
        :type MachineType: str
        :param _RegionCode: Host region. Example: "ap-guangzhou"
        :type RegionCode: str
        :param _Quuids: Host ID array. Example: ["quuid1","quuid2"]
        :type Quuids: list of str
        """
        self._StrategyName = None
        self._ScanCycle = None
        self._ScanAt = None
        self._CategoryIds = None
        self._IsGlobal = None
        self._MachineType = None
        self._RegionCode = None
        self._Quuids = None

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def ScanCycle(self):
        """Check cycle, indicating the number of days between checks. Example: 2, indicating that the check is carried out every 2 days.
        :rtype: int
        """
        return self._ScanCycle

    @ScanCycle.setter
    def ScanCycle(self, ScanCycle):
        self._ScanCycle = ScanCycle

    @property
    def ScanAt(self):
        """Time for a periodic check. The scan task is issued at this time. Example: "22:00", indicating that the task is issued at 22:00.
        :rtype: str
        """
        return self._ScanAt

    @ScanAt.setter
    def ScanAt(self, ScanAt):
        self._ScanAt = ScanAt

    @property
    def CategoryIds(self):
        """Array of selected baseline IDs under this policy. Example: [1,3,5,7]
        :rtype: list of int non-negative
        """
        return self._CategoryIds

    @CategoryIds.setter
    def CategoryIds(self, CategoryIds):
        self._CategoryIds = CategoryIds

    @property
    def IsGlobal(self):
        """Whether all servers are scanned. 1: yes; 0: no. If the value is 1, all Professional Edition hosts are scanned.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def MachineType(self):
        """Cloud host type:
CVM: virtual machine
BM: bare metal server
ECM: edge computing machine
LH: Lighthouse 
Other: hybrid cloud machine
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def RegionCode(self):
        """Host region. Example: "ap-guangzhou"
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def Quuids(self):
        """Host ID array. Example: ["quuid1","quuid2"]
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._StrategyName = params.get("StrategyName")
        self._ScanCycle = params.get("ScanCycle")
        self._ScanAt = params.get("ScanAt")
        self._CategoryIds = params.get("CategoryIds")
        self._IsGlobal = params.get("IsGlobal")
        self._MachineType = params.get("MachineType")
        self._RegionCode = params.get("RegionCode")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBaselineStrategyResponse(AbstractModel):
    """CreateBaselineStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateBuyBindTaskRequest(AbstractModel):
    """CreateBuyBindTask request structure.

    """

    def __init__(self):
        r"""
        :param _DealName: Order Number
        :type DealName: str
        :param _LicenseType: Optional parameters. 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription
        :type LicenseType: int
        :param _QuuidList: Machine list
        :type QuuidList: list of str
        :param _IsAll: Whether to select all machines
        :type IsAll: bool
        """
        self._DealName = None
        self._LicenseType = None
        self._QuuidList = None
        self._IsAll = None

    @property
    def DealName(self):
        """Order Number
        :rtype: str
        """
        return self._DealName

    @DealName.setter
    def DealName(self, DealName):
        self._DealName = DealName

    @property
    def LicenseType(self):
        """Optional parameters. 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def QuuidList(self):
        """Machine list
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def IsAll(self):
        """Whether to select all machines
        :rtype: bool
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll


    def _deserialize(self, params):
        self._DealName = params.get("DealName")
        self._LicenseType = params.get("LicenseType")
        self._QuuidList = params.get("QuuidList")
        self._IsAll = params.get("IsAll")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBuyBindTaskResponse(AbstractModel):
    """CreateBuyBindTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateEmergencyVulScanRequest(AbstractModel):
    """CreateEmergencyVulScan request structure.

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Uuids: Array of host UUID strings. This parameter is valid for specified servers.
        :type Uuids: list of str
        :param _TimeoutPeriod: Scan timeout duration, in seconds.
        :type TimeoutPeriod: int
        """
        self._VulId = None
        self._Uuids = None
        self._TimeoutPeriod = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Uuids(self):
        """Array of host UUID strings. This parameter is valid for specified servers.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def TimeoutPeriod(self):
        """Scan timeout duration, in seconds.
        :rtype: int
        """
        return self._TimeoutPeriod

    @TimeoutPeriod.setter
    def TimeoutPeriod(self, TimeoutPeriod):
        self._TimeoutPeriod = TimeoutPeriod


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._Uuids = params.get("Uuids")
        self._TimeoutPeriod = params.get("TimeoutPeriod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateEmergencyVulScanResponse(AbstractModel):
    """CreateEmergencyVulScan response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateIncidentBacktrackingRequest(AbstractModel):
    """CreateIncidentBacktracking request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: CWPP QUUID
        :type Quuid: str
        """
        self._Quuid = None

    @property
    def Quuid(self):
        """CWPP QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateIncidentBacktrackingResponse(AbstractModel):
    """CreateIncidentBacktracking response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateLicenseOrderRequest(AbstractModel):
    """CreateLicenseOrder request structure.

    """

    def __init__(self):
        r"""
        :param _Tags: Tag array. Leaving it blank indicates no tags need to be bound.
        :type Tags: list of Tags
        :param _LicenseType: Authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2 - Ultimate Edition-monthly subscriptionThe default is 0.
        :type LicenseType: int
        :param _LicenseNum: Authorization quantity: the number of units that need to be purchased
The default is 1.
        :type LicenseNum: int
        :param _RegionId: Region of purchase order. In this case, only 1 - Guangzhou and 9 - Singapore are supported. Guangzhou is recommended. Singapore region is reserved for allowlisted users.
The default is 1.
        :type RegionId: int
        :param _ProjectId: Project ID
The default is 0.
        :type ProjectId: int
        :param _TimeSpan: Purchase duration, with a default value of 1. The optional values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, and 36
This parameter is only valid for monthly subscription.
        :type TimeSpan: int
        :param _AutoRenewFlag: Whether to auto-renew. The default is not to auto-renew.
This parameter is only valid for monthly subscription.
        :type AutoRenewFlag: bool
        :param _AutoProtectOpenConfig: This field is deprecated.
        :type AutoProtectOpenConfig: str
        :param _ModifyConfig: Reconfiguration Parameters
        :type ModifyConfig: :class:`tencentcloud.cwp.v20180228.models.OrderModifyObject`
        """
        self._Tags = None
        self._LicenseType = None
        self._LicenseNum = None
        self._RegionId = None
        self._ProjectId = None
        self._TimeSpan = None
        self._AutoRenewFlag = None
        self._AutoProtectOpenConfig = None
        self._ModifyConfig = None

    @property
    def Tags(self):
        """Tag array. Leaving it blank indicates no tags need to be bound.
        :rtype: list of Tags
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def LicenseType(self):
        """Authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2 - Ultimate Edition-monthly subscriptionThe default is 0.
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def LicenseNum(self):
        """Authorization quantity: the number of units that need to be purchased
The default is 1.
        :rtype: int
        """
        return self._LicenseNum

    @LicenseNum.setter
    def LicenseNum(self, LicenseNum):
        self._LicenseNum = LicenseNum

    @property
    def RegionId(self):
        """Region of purchase order. In this case, only 1 - Guangzhou and 9 - Singapore are supported. Guangzhou is recommended. Singapore region is reserved for allowlisted users.
The default is 1.
        :rtype: int
        """
        return self._RegionId

    @RegionId.setter
    def RegionId(self, RegionId):
        self._RegionId = RegionId

    @property
    def ProjectId(self):
        """Project ID
The default is 0.
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TimeSpan(self):
        """Purchase duration, with a default value of 1. The optional values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, and 36
This parameter is only valid for monthly subscription.
        :rtype: int
        """
        return self._TimeSpan

    @TimeSpan.setter
    def TimeSpan(self, TimeSpan):
        self._TimeSpan = TimeSpan

    @property
    def AutoRenewFlag(self):
        """Whether to auto-renew. The default is not to auto-renew.
This parameter is only valid for monthly subscription.
        :rtype: bool
        """
        return self._AutoRenewFlag

    @AutoRenewFlag.setter
    def AutoRenewFlag(self, AutoRenewFlag):
        self._AutoRenewFlag = AutoRenewFlag

    @property
    def AutoProtectOpenConfig(self):
        """This field is deprecated.
        :rtype: str
        """
        return self._AutoProtectOpenConfig

    @AutoProtectOpenConfig.setter
    def AutoProtectOpenConfig(self, AutoProtectOpenConfig):
        self._AutoProtectOpenConfig = AutoProtectOpenConfig

    @property
    def ModifyConfig(self):
        """Reconfiguration Parameters
        :rtype: :class:`tencentcloud.cwp.v20180228.models.OrderModifyObject`
        """
        return self._ModifyConfig

    @ModifyConfig.setter
    def ModifyConfig(self, ModifyConfig):
        self._ModifyConfig = ModifyConfig


    def _deserialize(self, params):
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tags()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._LicenseType = params.get("LicenseType")
        self._LicenseNum = params.get("LicenseNum")
        self._RegionId = params.get("RegionId")
        self._ProjectId = params.get("ProjectId")
        self._TimeSpan = params.get("TimeSpan")
        self._AutoRenewFlag = params.get("AutoRenewFlag")
        self._AutoProtectOpenConfig = params.get("AutoProtectOpenConfig")
        if params.get("ModifyConfig") is not None:
            self._ModifyConfig = OrderModifyObject()
            self._ModifyConfig._deserialize(params.get("ModifyConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateLicenseOrderResponse(AbstractModel):
    """CreateLicenseOrder response structure.

    """

    def __init__(self):
        r"""
        :param _DealNames: Order ID list
        :type DealNames: list of str
        :param _ResourceIds: Resource ID list. This field needs to be left blank for prepaid orders.
        :type ResourceIds: list of str
        :param _BigDealId: Large order ID. This field needs to be left blank for postpaid orders.
        :type BigDealId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DealNames = None
        self._ResourceIds = None
        self._BigDealId = None
        self._RequestId = None

    @property
    def DealNames(self):
        """Order ID list
        :rtype: list of str
        """
        return self._DealNames

    @DealNames.setter
    def DealNames(self, DealNames):
        self._DealNames = DealNames

    @property
    def ResourceIds(self):
        """Resource ID list. This field needs to be left blank for prepaid orders.
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def BigDealId(self):
        """Large order ID. This field needs to be left blank for postpaid orders.
        :rtype: str
        """
        return self._BigDealId

    @BigDealId.setter
    def BigDealId(self, BigDealId):
        self._BigDealId = BigDealId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DealNames = params.get("DealNames")
        self._ResourceIds = params.get("ResourceIds")
        self._BigDealId = params.get("BigDealId")
        self._RequestId = params.get("RequestId")


class CreateLogExportRequest(AbstractModel):
    """CreateLogExport request structure.

    """

    def __init__(self):
        r"""
        :param _Count: Number of logs exported. The maximum value is 50 million.
        :type Count: int
        :param _StartTime: Start time of log export, with a timestamp in milliseconds
        :type StartTime: int
        :param _EndTime: End time of log export, with a timestamp in milliseconds
        :type EndTime: int
        :param _QueryString: Retrieval statements for log export, and [SQL statements] are not supported
        :type QueryString: str
        :param _Sort: Sorting for log export time. Valid values are asc and desc, and the default value is desc.
        :type Sort: str
        :param _Format: Data format for exported log. Valid values are json an csv, the default value is json.
        :type Format: str
        """
        self._Count = None
        self._StartTime = None
        self._EndTime = None
        self._QueryString = None
        self._Sort = None
        self._Format = None

    @property
    def Count(self):
        """Number of logs exported. The maximum value is 50 million.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def StartTime(self):
        """Start time of log export, with a timestamp in milliseconds
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time of log export, with a timestamp in milliseconds
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def QueryString(self):
        """Retrieval statements for log export, and [SQL statements] are not supported
        :rtype: str
        """
        return self._QueryString

    @QueryString.setter
    def QueryString(self, QueryString):
        self._QueryString = QueryString

    @property
    def Sort(self):
        """Sorting for log export time. Valid values are asc and desc, and the default value is desc.
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def Format(self):
        """Data format for exported log. Valid values are json an csv, the default value is json.
        :rtype: str
        """
        return self._Format

    @Format.setter
    def Format(self, Format):
        self._Format = Format


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._QueryString = params.get("QueryString")
        self._Sort = params.get("Sort")
        self._Format = params.get("Format")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateLogExportResponse(AbstractModel):
    """CreateLogExport response structure.

    """

    def __init__(self):
        r"""
        :param _ExportId: Task ID of exported logs
        :type ExportId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ExportId = None
        self._RequestId = None

    @property
    def ExportId(self):
        """Task ID of exported logs
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        self._RequestId = params.get("RequestId")


class CreateMaliciousRequestWhiteListRequest(AbstractModel):
    """CreateMaliciousRequestWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Domain: Allowlisted domain names
        :type Domain: str
        :param _Mark: Remarks
        :type Mark: str
        """
        self._Domain = None
        self._Mark = None

    @property
    def Domain(self):
        """Allowlisted domain names
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def Mark(self):
        """Remarks
        :rtype: str
        """
        return self._Mark

    @Mark.setter
    def Mark(self, Mark):
        self._Mark = Mark


    def _deserialize(self, params):
        self._Domain = params.get("Domain")
        self._Mark = params.get("Mark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateMaliciousRequestWhiteListResponse(AbstractModel):
    """CreateMaliciousRequestWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateMalwareWhiteListRequest(AbstractModel):
    """CreateMalwareWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Mode: Allowlist mode. 0: MD5 allowlist; 1: customization
        :type Mode: int
        :param _QuuidList: QUUID list
        :type QuuidList: list of str
        :param _IsGlobal: Whether applies all hosts. 0: no; 1: yes
        :type IsGlobal: int
        :param _MatchType: Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated).
        :type MatchType: int
        :param _FileName: File Name (regular expression); up to 200 characters in length
        :type FileName: list of str
        :param _FileDirectory: File Directory (regular expression); up to 200 characters in length, content base64 encoded.
        :type FileDirectory: list of str
        :param _FileExtension: File Suffix; Up to 200 characters in length, content base64 escaped (deprecated)
        :type FileExtension: list of str
        :param _Md5List: MD5 list
        :type Md5List: list of str
        :param _EventId: Trojan event ID
        :type EventId: int
        :param _IsHandleHistoryEvents: 
        :type IsHandleHistoryEvents: int
        """
        self._Mode = None
        self._QuuidList = None
        self._IsGlobal = None
        self._MatchType = None
        self._FileName = None
        self._FileDirectory = None
        self._FileExtension = None
        self._Md5List = None
        self._EventId = None
        self._IsHandleHistoryEvents = None

    @property
    def Mode(self):
        """Allowlist mode. 0: MD5 allowlist; 1: customization
        :rtype: int
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def QuuidList(self):
        """QUUID list
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def IsGlobal(self):
        """Whether applies all hosts. 0: no; 1: yes
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def MatchType(self):
        """Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated).
        :rtype: int
        """
        return self._MatchType

    @MatchType.setter
    def MatchType(self, MatchType):
        self._MatchType = MatchType

    @property
    def FileName(self):
        """File Name (regular expression); up to 200 characters in length
        :rtype: list of str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileDirectory(self):
        """File Directory (regular expression); up to 200 characters in length, content base64 encoded.
        :rtype: list of str
        """
        return self._FileDirectory

    @FileDirectory.setter
    def FileDirectory(self, FileDirectory):
        self._FileDirectory = FileDirectory

    @property
    def FileExtension(self):
        """File Suffix; Up to 200 characters in length, content base64 escaped (deprecated)
        :rtype: list of str
        """
        return self._FileExtension

    @FileExtension.setter
    def FileExtension(self, FileExtension):
        self._FileExtension = FileExtension

    @property
    def Md5List(self):
        """MD5 list
        :rtype: list of str
        """
        return self._Md5List

    @Md5List.setter
    def Md5List(self, Md5List):
        self._Md5List = Md5List

    @property
    def EventId(self):
        """Trojan event ID
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def IsHandleHistoryEvents(self):
        """
        :rtype: int
        """
        return self._IsHandleHistoryEvents

    @IsHandleHistoryEvents.setter
    def IsHandleHistoryEvents(self, IsHandleHistoryEvents):
        self._IsHandleHistoryEvents = IsHandleHistoryEvents


    def _deserialize(self, params):
        self._Mode = params.get("Mode")
        self._QuuidList = params.get("QuuidList")
        self._IsGlobal = params.get("IsGlobal")
        self._MatchType = params.get("MatchType")
        self._FileName = params.get("FileName")
        self._FileDirectory = params.get("FileDirectory")
        self._FileExtension = params.get("FileExtension")
        self._Md5List = params.get("Md5List")
        self._EventId = params.get("EventId")
        self._IsHandleHistoryEvents = params.get("IsHandleHistoryEvents")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateMalwareWhiteListResponse(AbstractModel):
    """CreateMalwareWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateNetAttackWhiteListRequest(AbstractModel):
    """CreateNetAttackWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Scope: Whether the allowlist applies to all hosts. 0: no; 1: yes.
        :type Scope: int
        :param _SrcIp: Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24 
        :type SrcIp: list of str
        :param _QuuidList: QUUID list
        :type QuuidList: list of str
        :param _EventId: Event ID
        :type EventId: int
        :param _DealOldEvents: Whether to allowlist all alarms that match this rule: 1: Yes, 0: No.
        :type DealOldEvents: int
        :param _Description: Description
        :type Description: str
        """
        self._Scope = None
        self._SrcIp = None
        self._QuuidList = None
        self._EventId = None
        self._DealOldEvents = None
        self._Description = None

    @property
    def Scope(self):
        """Whether the allowlist applies to all hosts. 0: no; 1: yes.
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def SrcIp(self):
        """Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24 
        :rtype: list of str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def QuuidList(self):
        """QUUID list
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def EventId(self):
        """Event ID
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def DealOldEvents(self):
        """Whether to allowlist all alarms that match this rule: 1: Yes, 0: No.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Scope = params.get("Scope")
        self._SrcIp = params.get("SrcIp")
        self._QuuidList = params.get("QuuidList")
        self._EventId = params.get("EventId")
        self._DealOldEvents = params.get("DealOldEvents")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNetAttackWhiteListResponse(AbstractModel):
    """CreateNetAttackWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateRansomDefenseStrategyRequest(AbstractModel):
    """CreateRansomDefenseStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Policy name
        :type Name: str
        :param _Hour: Scheduled snapshot execution time (0-23): 01:00; 23:00.
        :type Hour: str
        :param _Id: Policy ID: Modify the policy when filling in the ID. Otherwise, add a new policy.
        :type Id: int
        :param _Description: Policy Remarks
        :type Description: str
        :param _Status: Whether to enable: 0 Off, 1 On.
        :type Status: int
        :param _IsAll: Apply to all machines or not. 0: No; 1: Yes
        :type IsAll: int
        :param _IncludeDir: Include directories, separated by semicolons (;).
        :type IncludeDir: str
        :param _ExcludeDir: Exclude directories, separated by semicolons (;).
        :type ExcludeDir: str
        :param _BackupType: Backup pattern: 0 weekly, 1 daily.
        :type BackupType: int
        :param _Weekday: Scheduled task execution days in a week (1-7): 1; 2; 7.
        :type Weekday: str
        :param _SaveDay: Retention Period: 0 Permanent.
        :type SaveDay: int
        :param _Machines: Bound Host List
        :type Machines: list of RansomDefenseStrategyMachineInfo
        """
        self._Name = None
        self._Hour = None
        self._Id = None
        self._Description = None
        self._Status = None
        self._IsAll = None
        self._IncludeDir = None
        self._ExcludeDir = None
        self._BackupType = None
        self._Weekday = None
        self._SaveDay = None
        self._Machines = None

    @property
    def Name(self):
        """Policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Hour(self):
        """Scheduled snapshot execution time (0-23): 01:00; 23:00.
        :rtype: str
        """
        return self._Hour

    @Hour.setter
    def Hour(self, Hour):
        self._Hour = Hour

    @property
    def Id(self):
        """Policy ID: Modify the policy when filling in the ID. Otherwise, add a new policy.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Description(self):
        """Policy Remarks
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        """Whether to enable: 0 Off, 1 On.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsAll(self):
        """Apply to all machines or not. 0: No; 1: Yes
        :rtype: int
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll

    @property
    def IncludeDir(self):
        """Include directories, separated by semicolons (;).
        :rtype: str
        """
        return self._IncludeDir

    @IncludeDir.setter
    def IncludeDir(self, IncludeDir):
        self._IncludeDir = IncludeDir

    @property
    def ExcludeDir(self):
        """Exclude directories, separated by semicolons (;).
        :rtype: str
        """
        return self._ExcludeDir

    @ExcludeDir.setter
    def ExcludeDir(self, ExcludeDir):
        self._ExcludeDir = ExcludeDir

    @property
    def BackupType(self):
        """Backup pattern: 0 weekly, 1 daily.
        :rtype: int
        """
        return self._BackupType

    @BackupType.setter
    def BackupType(self, BackupType):
        self._BackupType = BackupType

    @property
    def Weekday(self):
        """Scheduled task execution days in a week (1-7): 1; 2; 7.
        :rtype: str
        """
        return self._Weekday

    @Weekday.setter
    def Weekday(self, Weekday):
        self._Weekday = Weekday

    @property
    def SaveDay(self):
        """Retention Period: 0 Permanent.
        :rtype: int
        """
        return self._SaveDay

    @SaveDay.setter
    def SaveDay(self, SaveDay):
        self._SaveDay = SaveDay

    @property
    def Machines(self):
        """Bound Host List
        :rtype: list of RansomDefenseStrategyMachineInfo
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Hour = params.get("Hour")
        self._Id = params.get("Id")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._IsAll = params.get("IsAll")
        self._IncludeDir = params.get("IncludeDir")
        self._ExcludeDir = params.get("ExcludeDir")
        self._BackupType = params.get("BackupType")
        self._Weekday = params.get("Weekday")
        self._SaveDay = params.get("SaveDay")
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = RansomDefenseStrategyMachineInfo()
                obj._deserialize(item)
                self._Machines.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRansomDefenseStrategyResponse(AbstractModel):
    """CreateRansomDefenseStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateScanMalwareSettingRequest(AbstractModel):
    """CreateScanMalwareSetting request structure.

    """

    def __init__(self):
        r"""
        :param _ScanPattern: Scan mode: 0 - full disk scan; 1 - rapid scan
        :type ScanPattern: int
        :param _HostType: Server classification: 1: Professional Edition servers; 2: self-selected servers
        :type HostType: int
        :param _QuuidList: Effective for selected servers; a string array of host QUUIDs
        :type QuuidList: list of str
        :param _TimeoutPeriod: Timeout unit: seconds, which is 3,600 seconds by default.
        :type TimeoutPeriod: int
        :param _EngineType: 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :type EngineType: int
        :param _EnableMemShellScan: Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :type EnableMemShellScan: int
        """
        self._ScanPattern = None
        self._HostType = None
        self._QuuidList = None
        self._TimeoutPeriod = None
        self._EngineType = None
        self._EnableMemShellScan = None

    @property
    def ScanPattern(self):
        """Scan mode: 0 - full disk scan; 1 - rapid scan
        :rtype: int
        """
        return self._ScanPattern

    @ScanPattern.setter
    def ScanPattern(self, ScanPattern):
        self._ScanPattern = ScanPattern

    @property
    def HostType(self):
        """Server classification: 1: Professional Edition servers; 2: self-selected servers
        :rtype: int
        """
        return self._HostType

    @HostType.setter
    def HostType(self, HostType):
        self._HostType = HostType

    @property
    def QuuidList(self):
        """Effective for selected servers; a string array of host QUUIDs
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def TimeoutPeriod(self):
        """Timeout unit: seconds, which is 3,600 seconds by default.
        :rtype: int
        """
        return self._TimeoutPeriod

    @TimeoutPeriod.setter
    def TimeoutPeriod(self, TimeoutPeriod):
        self._TimeoutPeriod = TimeoutPeriod

    @property
    def EngineType(self):
        """1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :rtype: int
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def EnableMemShellScan(self):
        """Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :rtype: int
        """
        return self._EnableMemShellScan

    @EnableMemShellScan.setter
    def EnableMemShellScan(self, EnableMemShellScan):
        self._EnableMemShellScan = EnableMemShellScan


    def _deserialize(self, params):
        self._ScanPattern = params.get("ScanPattern")
        self._HostType = params.get("HostType")
        self._QuuidList = params.get("QuuidList")
        self._TimeoutPeriod = params.get("TimeoutPeriod")
        self._EngineType = params.get("EngineType")
        self._EnableMemShellScan = params.get("EnableMemShellScan")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateScanMalwareSettingResponse(AbstractModel):
    """CreateScanMalwareSetting response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateSearchLogRequest(AbstractModel):
    """CreateSearchLog request structure.

    """

    def __init__(self):
        r"""
        :param _SearchContent: Search by content
        :type SearchContent: str
        """
        self._SearchContent = None

    @property
    def SearchContent(self):
        """Search by content
        :rtype: str
        """
        return self._SearchContent

    @SearchContent.setter
    def SearchContent(self, SearchContent):
        self._SearchContent = SearchContent


    def _deserialize(self, params):
        self._SearchContent = params.get("SearchContent")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSearchLogResponse(AbstractModel):
    """CreateSearchLog response structure.

    """

    def __init__(self):
        r"""
        :param _Status: 0: succeeded; 	non-zero: failed
        :type Status: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        """0: succeeded; 	non-zero: failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class CreateSearchTemplateRequest(AbstractModel):
    """CreateSearchTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _SearchTemplate: Search template
        :type SearchTemplate: :class:`tencentcloud.cwp.v20180228.models.SearchTemplate`
        """
        self._SearchTemplate = None

    @property
    def SearchTemplate(self):
        """Search template
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SearchTemplate`
        """
        return self._SearchTemplate

    @SearchTemplate.setter
    def SearchTemplate(self, SearchTemplate):
        self._SearchTemplate = SearchTemplate


    def _deserialize(self, params):
        if params.get("SearchTemplate") is not None:
            self._SearchTemplate = SearchTemplate()
            self._SearchTemplate._deserialize(params.get("SearchTemplate"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSearchTemplateResponse(AbstractModel):
    """CreateSearchTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Status: 0: succeeded; 	non-0: failed
        :type Status: int
        :param _Message: Reason for failure
        :type Message: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._Message = None
        self._RequestId = None

    @property
    def Status(self):
        """0: succeeded; 	non-0: failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Message(self):
        """Reason for failure
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Message = params.get("Message")
        self._RequestId = params.get("RequestId")


class CreateVulFixRequest(AbstractModel):
    """CreateVulFix request structure.

    """

    def __init__(self):
        r"""
        :param _CreateVulFixTaskQuuids: List of hosts for which the vulnerability should be fixed
        :type CreateVulFixTaskQuuids: list of CreateVulFixTaskQuuids
        :param _SaveDays: Snapshot retention days: 0 days indicates that no snapshot will be created. Hosts without a snapshot for 24 hours must have a snapshot created to be restored.
        :type SaveDays: int
        :param _SnapshotName: Snapshot name
        :type SnapshotName: str
        """
        self._CreateVulFixTaskQuuids = None
        self._SaveDays = None
        self._SnapshotName = None

    @property
    def CreateVulFixTaskQuuids(self):
        """List of hosts for which the vulnerability should be fixed
        :rtype: list of CreateVulFixTaskQuuids
        """
        return self._CreateVulFixTaskQuuids

    @CreateVulFixTaskQuuids.setter
    def CreateVulFixTaskQuuids(self, CreateVulFixTaskQuuids):
        self._CreateVulFixTaskQuuids = CreateVulFixTaskQuuids

    @property
    def SaveDays(self):
        """Snapshot retention days: 0 days indicates that no snapshot will be created. Hosts without a snapshot for 24 hours must have a snapshot created to be restored.
        :rtype: int
        """
        return self._SaveDays

    @SaveDays.setter
    def SaveDays(self, SaveDays):
        self._SaveDays = SaveDays

    @property
    def SnapshotName(self):
        """Snapshot name
        :rtype: str
        """
        return self._SnapshotName

    @SnapshotName.setter
    def SnapshotName(self, SnapshotName):
        self._SnapshotName = SnapshotName


    def _deserialize(self, params):
        if params.get("CreateVulFixTaskQuuids") is not None:
            self._CreateVulFixTaskQuuids = []
            for item in params.get("CreateVulFixTaskQuuids"):
                obj = CreateVulFixTaskQuuids()
                obj._deserialize(item)
                self._CreateVulFixTaskQuuids.append(obj)
        self._SaveDays = params.get("SaveDays")
        self._SnapshotName = params.get("SnapshotName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulFixResponse(AbstractModel):
    """CreateVulFix response structure.

    """

    def __init__(self):
        r"""
        :param _FixId: Task ID
        :type FixId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FixId = None
        self._RequestId = None

    @property
    def FixId(self):
        """Task ID
        :rtype: int
        """
        return self._FixId

    @FixId.setter
    def FixId(self, FixId):
        self._FixId = FixId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FixId = params.get("FixId")
        self._RequestId = params.get("RequestId")


class CreateVulFixTaskQuuids(AbstractModel):
    """Create QUUIDs for fixing tasks

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Quuids: Hosts that need to fix vulnerabilities. All hosts need to have the vulnerability with the ID of VulId and be in a pending fix status.
        :type Quuids: list of str
        :param _FixMethod: 
        :type FixMethod: int
        """
        self._VulId = None
        self._Quuids = None
        self._FixMethod = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Quuids(self):
        """Hosts that need to fix vulnerabilities. All hosts need to have the vulnerability with the ID of VulId and be in a pending fix status.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def FixMethod(self):
        """
        :rtype: int
        """
        return self._FixMethod

    @FixMethod.setter
    def FixMethod(self, FixMethod):
        self._FixMethod = FixMethod


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._Quuids = params.get("Quuids")
        self._FixMethod = params.get("FixMethod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateWhiteListOrderRequest(AbstractModel):
    """CreateWhiteListOrder request structure.

    """

    def __init__(self):
        r"""
        :param _LicenseType: Authorization type
        :type LicenseType: int
        :param _LicenseNum: Number of authorizations (The minimum value is 1, and the maximum value is 99999.)
        :type LicenseNum: int
        :param _Deadline: Expiration time (The minimum value is 1.)
        :type Deadline: int
        :param _RuleName: Rule name, big asset center: asset_center
        :type RuleName: str
        :param _SourceType: Order type. 1: trial; 2: free; 3: experience; 4: free SSL certificate gift; 5: free CVM
        :type SourceType: int
        :param _RegionId: Region: 1 Guangzhou; 9 Singapore. The default is 1. Do not select 9 unless necessary.
        :type RegionId: int
        :param _ExtraParam: Additional parameters; JSON string, including ResourceId and LicenseType.
        :type ExtraParam: str
        """
        self._LicenseType = None
        self._LicenseNum = None
        self._Deadline = None
        self._RuleName = None
        self._SourceType = None
        self._RegionId = None
        self._ExtraParam = None

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def LicenseNum(self):
        """Number of authorizations (The minimum value is 1, and the maximum value is 99999.)
        :rtype: int
        """
        return self._LicenseNum

    @LicenseNum.setter
    def LicenseNum(self, LicenseNum):
        self._LicenseNum = LicenseNum

    @property
    def Deadline(self):
        """Expiration time (The minimum value is 1.)
        :rtype: int
        """
        return self._Deadline

    @Deadline.setter
    def Deadline(self, Deadline):
        self._Deadline = Deadline

    @property
    def RuleName(self):
        """Rule name, big asset center: asset_center
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def SourceType(self):
        """Order type. 1: trial; 2: free; 3: experience; 4: free SSL certificate gift; 5: free CVM
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType

    @property
    def RegionId(self):
        """Region: 1 Guangzhou; 9 Singapore. The default is 1. Do not select 9 unless necessary.
        :rtype: int
        """
        return self._RegionId

    @RegionId.setter
    def RegionId(self, RegionId):
        self._RegionId = RegionId

    @property
    def ExtraParam(self):
        """Additional parameters; JSON string, including ResourceId and LicenseType.
        :rtype: str
        """
        return self._ExtraParam

    @ExtraParam.setter
    def ExtraParam(self, ExtraParam):
        self._ExtraParam = ExtraParam


    def _deserialize(self, params):
        self._LicenseType = params.get("LicenseType")
        self._LicenseNum = params.get("LicenseNum")
        self._Deadline = params.get("Deadline")
        self._RuleName = params.get("RuleName")
        self._SourceType = params.get("SourceType")
        self._RegionId = params.get("RegionId")
        self._ExtraParam = params.get("ExtraParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateWhiteListOrderResponse(AbstractModel):
    """CreateWhiteListOrder response structure.

    """

    def __init__(self):
        r"""
        :param _Resource: Resource object
        :type Resource: :class:`tencentcloud.cwp.v20180228.models.OrderResource`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Resource = None
        self._RequestId = None

    @property
    def Resource(self):
        """Resource object
        :rtype: :class:`tencentcloud.cwp.v20180228.models.OrderResource`
        """
        return self._Resource

    @Resource.setter
    def Resource(self, Resource):
        self._Resource = Resource

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Resource") is not None:
            self._Resource = OrderResource()
            self._Resource._deserialize(params.get("Resource"))
        self._RequestId = params.get("RequestId")


class DefaultStrategyInfo(AbstractModel):
    """Default policy basic information

    """

    def __init__(self):
        r"""
        :param _StrategyName: Policy name
        :type StrategyName: str
        :param _StrategyId: Policy ID
        :type StrategyId: int
        """
        self._StrategyName = None
        self._StrategyId = None

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId


    def _deserialize(self, params):
        self._StrategyName = params.get("StrategyName")
        self._StrategyId = params.get("StrategyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DefendAttackLog(AbstractModel):
    """Network attack log

    """

    def __init__(self):
        r"""
        :param _Id: Log ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _SrcIp: Source IP
        :type SrcIp: str
        :param _SrcPort: Source port
        :type SrcPort: int
        :param _HttpMethod: Attack method
        :type HttpMethod: str
        :param _HttpCgi: Attack description
        :type HttpCgi: str
        :param _HttpParam: Attack parameter
        :type HttpParam: str
        :param _VulType: Threat type
        :type VulType: str
        :param _CreatedAt: Attack time
        :type CreatedAt: str
        :param _MachineIp: Target server IP
        :type MachineIp: str
        :param _MachineName: Target server name
        :type MachineName: str
        :param _DstIp: Target IP
        :type DstIp: str
        :param _DstPort: Target port
        :type DstPort: int
        :param _HttpContent: Attack content
        :type HttpContent: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Id = None
        self._Uuid = None
        self._SrcIp = None
        self._SrcPort = None
        self._HttpMethod = None
        self._HttpCgi = None
        self._HttpParam = None
        self._VulType = None
        self._CreatedAt = None
        self._MachineIp = None
        self._MachineName = None
        self._DstIp = None
        self._DstPort = None
        self._HttpContent = None
        self._MachineExtraInfo = None

    @property
    def Id(self):
        """Log ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def SrcIp(self):
        """Source IP
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def SrcPort(self):
        """Source port
        :rtype: int
        """
        return self._SrcPort

    @SrcPort.setter
    def SrcPort(self, SrcPort):
        self._SrcPort = SrcPort

    @property
    def HttpMethod(self):
        """Attack method
        :rtype: str
        """
        return self._HttpMethod

    @HttpMethod.setter
    def HttpMethod(self, HttpMethod):
        self._HttpMethod = HttpMethod

    @property
    def HttpCgi(self):
        """Attack description
        :rtype: str
        """
        return self._HttpCgi

    @HttpCgi.setter
    def HttpCgi(self, HttpCgi):
        self._HttpCgi = HttpCgi

    @property
    def HttpParam(self):
        """Attack parameter
        :rtype: str
        """
        return self._HttpParam

    @HttpParam.setter
    def HttpParam(self, HttpParam):
        self._HttpParam = HttpParam

    @property
    def VulType(self):
        """Threat type
        :rtype: str
        """
        return self._VulType

    @VulType.setter
    def VulType(self, VulType):
        self._VulType = VulType

    @property
    def CreatedAt(self):
        """Attack time
        :rtype: str
        """
        return self._CreatedAt

    @CreatedAt.setter
    def CreatedAt(self, CreatedAt):
        self._CreatedAt = CreatedAt

    @property
    def MachineIp(self):
        """Target server IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Target server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def DstIp(self):
        """Target IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def HttpContent(self):
        """Attack content
        :rtype: str
        """
        return self._HttpContent

    @HttpContent.setter
    def HttpContent(self, HttpContent):
        self._HttpContent = HttpContent

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._SrcIp = params.get("SrcIp")
        self._SrcPort = params.get("SrcPort")
        self._HttpMethod = params.get("HttpMethod")
        self._HttpCgi = params.get("HttpCgi")
        self._HttpParam = params.get("HttpParam")
        self._VulType = params.get("VulType")
        self._CreatedAt = params.get("CreatedAt")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._DstIp = params.get("DstIp")
        self._DstPort = params.get("DstPort")
        self._HttpContent = params.get("HttpContent")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAllJavaMemShellsRequest(AbstractModel):
    """DeleteAllJavaMemShells request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        """
        self._Quuid = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAllJavaMemShellsResponse(AbstractModel):
    """DeleteAllJavaMemShells response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBanWhiteListRequest(AbstractModel):
    """DeleteBanWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Allowlist ID list to be deleted (up to 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Allowlist ID list to be deleted (up to 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBanWhiteListResponse(AbstractModel):
    """DeleteBanWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBaselinePolicyRequest(AbstractModel):
    """DeleteBaselinePolicy request structure.

    """

    def __init__(self):
        r"""
        :param _PolicyIds: Policy ID
        :type PolicyIds: list of int
        """
        self._PolicyIds = None

    @property
    def PolicyIds(self):
        """Policy ID
        :rtype: list of int
        """
        return self._PolicyIds

    @PolicyIds.setter
    def PolicyIds(self, PolicyIds):
        self._PolicyIds = PolicyIds


    def _deserialize(self, params):
        self._PolicyIds = params.get("PolicyIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBaselinePolicyResponse(AbstractModel):
    """DeleteBaselinePolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBaselineStrategyRequest(AbstractModel):
    """DeleteBaselineStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyId: Baseline policy ID
        :type StrategyId: int
        """
        self._StrategyId = None

    @property
    def StrategyId(self):
        """Baseline policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId


    def _deserialize(self, params):
        self._StrategyId = params.get("StrategyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBaselineStrategyResponse(AbstractModel):
    """DeleteBaselineStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBashEventsRequest(AbstractModel):
    """DeleteBashEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array. Maximum number of IDs: 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array. Maximum number of IDs: 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBashEventsResponse(AbstractModel):
    """DeleteBashEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBashPoliciesRequest(AbstractModel):
    """DeleteBashPolicies request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum value being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum value being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBashPoliciesResponse(AbstractModel):
    """DeleteBashPolicies response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBashRulesRequest(AbstractModel):
    """DeleteBashRules request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array (The maximum number of IDs is 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array (The maximum number of IDs is 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBashRulesResponse(AbstractModel):
    """DeleteBashRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBruteAttacksRequest(AbstractModel):
    """DeleteBruteAttacks request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Array of brute force cracking event IDs (maximum: 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Array of brute force cracking event IDs (maximum: 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBruteAttacksResponse(AbstractModel):
    """DeleteBruteAttacks response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteLicenseRecordAllRequest(AbstractModel):
    """DeleteLicenseRecordAll request structure.

    """


class DeleteLicenseRecordAllResponse(AbstractModel):
    """DeleteLicenseRecordAll response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteLicenseRecordRequest(AbstractModel):
    """DeleteLicenseRecord request structure.

    """

    def __init__(self):
        r"""
        :param _LicenseId: Authorization ID, which can be obtained from the authorization order list
        :type LicenseId: int
        :param _LicenseType: Authorization type
        :type LicenseType: int
        :param _ResourceId: Resource ID
        :type ResourceId: str
        """
        self._LicenseId = None
        self._LicenseType = None
        self._ResourceId = None

    @property
    def LicenseId(self):
        """Authorization ID, which can be obtained from the authorization order list
        :rtype: int
        """
        return self._LicenseId

    @LicenseId.setter
    def LicenseId(self, LicenseId):
        self._LicenseId = LicenseId

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._LicenseId = params.get("LicenseId")
        self._LicenseType = params.get("LicenseType")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteLicenseRecordResponse(AbstractModel):
    """DeleteLicenseRecord response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteLogExportRequest(AbstractModel):
    """DeleteLogExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportId: Task ID of exported logs
        :type ExportId: str
        """
        self._ExportId = None

    @property
    def ExportId(self):
        """Task ID of exported logs
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteLogExportResponse(AbstractModel):
    """DeleteLogExport response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteLoginWhiteListRequest(AbstractModel):
    """DeleteLoginWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Allowlisted IDs (The maximum number is 100.)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Allowlisted IDs (The maximum number is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteLoginWhiteListResponse(AbstractModel):
    """DeleteLoginWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMachineClearHistoryRequest(AbstractModel):
    """DeleteMachineClearHistory request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: IDs of records to be deleted, up to 100 characters in length
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """IDs of records to be deleted, up to 100 characters in length
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMachineClearHistoryResponse(AbstractModel):
    """DeleteMachineClearHistory response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMachineRequest(AbstractModel):
    """DeleteMachine request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: CWPP client Uuid
        :type Uuid: str
        """
        self._Uuid = None

    @property
    def Uuid(self):
        """CWPP client Uuid
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMachineResponse(AbstractModel):
    """DeleteMachine response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMachineTagRequest(AbstractModel):
    """DeleteMachineTag request structure.

    """

    def __init__(self):
        r"""
        :param _Rid: Associated tag ID
        :type Rid: int
        """
        self._Rid = None

    @property
    def Rid(self):
        """Associated tag ID
        :rtype: int
        """
        return self._Rid

    @Rid.setter
    def Rid(self, Rid):
        self._Rid = Rid


    def _deserialize(self, params):
        self._Rid = params.get("Rid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMachineTagResponse(AbstractModel):
    """DeleteMachineTag response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMaliciousRequestWhiteListRequest(AbstractModel):
    """DeleteMaliciousRequestWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Allowlist IDs (The maximum number is 100.)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Allowlist IDs (The maximum number is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMaliciousRequestWhiteListResponse(AbstractModel):
    """DeleteMaliciousRequestWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMaliciousRequestsRequest(AbstractModel):
    """DeleteMaliciousRequests request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Malicious request record ID array (The maximum number of IDs is 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Malicious request record ID array (The maximum number of IDs is 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMaliciousRequestsResponse(AbstractModel):
    """DeleteMaliciousRequests response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMalwareScanTaskRequest(AbstractModel):
    """DeleteMalwareScanTask request structure.

    """


class DeleteMalwareScanTaskResponse(AbstractModel):
    """DeleteMalwareScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMalwareWhiteListRequest(AbstractModel):
    """DeleteMalwareWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum value being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum value being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMalwareWhiteListResponse(AbstractModel):
    """DeleteMalwareWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMalwaresRequest(AbstractModel):
    """DeleteMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Trojan record ID array (The maximum number of IDs is 100.)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Trojan record ID array (The maximum number of IDs is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMalwaresResponse(AbstractModel):
    """DeleteMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteNetAttackWhiteListRequest(AbstractModel):
    """DeleteNetAttackWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum value being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum value being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteNetAttackWhiteListResponse(AbstractModel):
    """DeleteNetAttackWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteNonlocalLoginPlacesRequest(AbstractModel):
    """DeleteNonlocalLoginPlaces request structure.

    """

    def __init__(self):
        r"""
        :param _DelType: Method for deleting cross-region log-in events, available values are Ids, Ip, and All. The default is Ids.
        :type DelType: str
        :param _Ids: Array of cross-region log-in event IDs. Required if DelType is Ids or DelType is not filled.
        :type Ids: list of int non-negative
        :param _Ip: IP of cross-region log-in event. Required if DelType is Ip.
        :type Ip: list of str
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._DelType = None
        self._Ids = None
        self._Ip = None
        self._Uuid = None

    @property
    def DelType(self):
        """Method for deleting cross-region log-in events, available values are Ids, Ip, and All. The default is Ids.
        :rtype: str
        """
        return self._DelType

    @DelType.setter
    def DelType(self, DelType):
        self._DelType = DelType

    @property
    def Ids(self):
        """Array of cross-region log-in event IDs. Required if DelType is Ids or DelType is not filled.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Ip(self):
        """IP of cross-region log-in event. Required if DelType is Ip.
        :rtype: list of str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._DelType = params.get("DelType")
        self._Ids = params.get("Ids")
        self._Ip = params.get("Ip")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteNonlocalLoginPlacesResponse(AbstractModel):
    """DeleteNonlocalLoginPlaces response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeletePrivilegeEventsRequest(AbstractModel):
    """DeletePrivilegeEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum number being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum number being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeletePrivilegeEventsResponse(AbstractModel):
    """DeletePrivilegeEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeletePrivilegeRulesRequest(AbstractModel):
    """DeletePrivilegeRules request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum value being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum value being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeletePrivilegeRulesResponse(AbstractModel):
    """DeletePrivilegeRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteReverseShellEventsRequest(AbstractModel):
    """DeleteReverseShellEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array, with the maximum value being 100.
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array, with the maximum value being 100.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteReverseShellEventsResponse(AbstractModel):
    """DeleteReverseShellEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteReverseShellRulesRequest(AbstractModel):
    """DeleteReverseShellRules request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array (The maximum quantity is 100.)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array (The maximum quantity is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteReverseShellRulesResponse(AbstractModel):
    """DeleteReverseShellRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteRiskDnsEventRequest(AbstractModel):
    """DeleteRiskDnsEvent request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Malicious request record ID array. (The maximum number of IDs is 100.) Delete all if it is left blank.
        :type Ids: list of int
        """
        self._Ids = None

    @property
    def Ids(self):
        """Malicious request record ID array. (The maximum number of IDs is 100.) Delete all if it is left blank.
        :rtype: list of int
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRiskDnsEventResponse(AbstractModel):
    """DeleteRiskDnsEvent response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteRiskDnsPolicyRequest(AbstractModel):
    """DeleteRiskDnsPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _PolicyIds: Policy ID
        :type PolicyIds: list of int
        """
        self._PolicyIds = None

    @property
    def PolicyIds(self):
        """Policy ID
        :rtype: list of int
        """
        return self._PolicyIds

    @PolicyIds.setter
    def PolicyIds(self, PolicyIds):
        self._PolicyIds = PolicyIds


    def _deserialize(self, params):
        self._PolicyIds = params.get("PolicyIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRiskDnsPolicyResponse(AbstractModel):
    """DeleteRiskDnsPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteScanTaskRequest(AbstractModel):
    """DeleteScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        :param _ModuleType: Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :type ModuleType: str
        :param _QuuidList: Effective for selected servers; a string array of host QUUIDs
        :type QuuidList: list of str
        """
        self._TaskId = None
        self._ModuleType = None
        self._QuuidList = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ModuleType(self):
        """Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType

    @property
    def QuuidList(self):
        """Effective for selected servers; a string array of host QUUIDs
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ModuleType = params.get("ModuleType")
        self._QuuidList = params.get("QuuidList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteScanTaskResponse(AbstractModel):
    """DeleteScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteSearchTemplateRequest(AbstractModel):
    """DeleteSearchTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Template ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Template ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteSearchTemplateResponse(AbstractModel):
    """DeleteSearchTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _Status: 0: succeeded; 	non-zero: failed
        :type Status: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        """0: succeeded; 	non-zero: failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class DeleteTagsRequest(AbstractModel):
    """DeleteTags request structure.

    """

    def __init__(self):
        r"""
        :param _Ids:  Tag ID (maximum: 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """ Tag ID (maximum: 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTagsResponse(AbstractModel):
    """DeleteTags response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteWebHookPolicyRequest(AbstractModel):
    """DeleteWebHookPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID list
        :type Ids: list of int
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID list
        :rtype: list of int
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteWebHookPolicyResponse(AbstractModel):
    """DeleteWebHookPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteWebHookReceiverRequest(AbstractModel):
    """DeleteWebHookReceiver request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array
        :type Ids: list of int
        """
        self._Ids = None

    @property
    def Ids(self):
        """ID array
        :rtype: list of int
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteWebHookReceiverResponse(AbstractModel):
    """DeleteWebHookReceiver response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteWebHookRuleRequest(AbstractModel):
    """DeleteWebHookRule request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Rule ID list
        :type Ids: list of int
        """
        self._Ids = None

    @property
    def Ids(self):
        """Rule ID list
        :rtype: list of int
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteWebHookRuleResponse(AbstractModel):
    """DeleteWebHookRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeliverTypeDetails(AbstractModel):
    """Log shipping type details

    """

    def __init__(self):
        r"""
        :param _SecurityType: Security module type. 1: intrusion detection; 2: vulnerability management; 3: baseline management; 4: advanced defense; 5: client security; 6: asset fingerprint; 7: host list; 8: client reporting.
        :type SecurityType: int
        :param _LogType: Type of logs of the security module
        :type LogType: list of int
        :param _TopicId: Topic ID
        :type TopicId: str
        :param _TopicName: Topic name
        :type TopicName: str
        :param _Switch: Shipping enabling status. 0: disabled; 1: enabled.
        :type Switch: int
        :param _Status: Shipping status. 0: disabled; 1: normal; 2: abnormal.
        :type Status: int
        :param _ErrInfo: Error message
        :type ErrInfo: str
        :param _StatusTime: Timestamp of last status reporting
        :type StatusTime: int
        :param _LogName: Logset name
        :type LogName: str
        :param _LogSetId: Logset ID
        :type LogSetId: str
        :param _Region: Logset region
        :type Region: str
        """
        self._SecurityType = None
        self._LogType = None
        self._TopicId = None
        self._TopicName = None
        self._Switch = None
        self._Status = None
        self._ErrInfo = None
        self._StatusTime = None
        self._LogName = None
        self._LogSetId = None
        self._Region = None

    @property
    def SecurityType(self):
        """Security module type. 1: intrusion detection; 2: vulnerability management; 3: baseline management; 4: advanced defense; 5: client security; 6: asset fingerprint; 7: host list; 8: client reporting.
        :rtype: int
        """
        return self._SecurityType

    @SecurityType.setter
    def SecurityType(self, SecurityType):
        self._SecurityType = SecurityType

    @property
    def LogType(self):
        """Type of logs of the security module
        :rtype: list of int
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def TopicId(self):
        """Topic ID
        :rtype: str
        """
        return self._TopicId

    @TopicId.setter
    def TopicId(self, TopicId):
        self._TopicId = TopicId

    @property
    def TopicName(self):
        """Topic name
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName

    @property
    def Switch(self):
        """Shipping enabling status. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._Switch

    @Switch.setter
    def Switch(self, Switch):
        self._Switch = Switch

    @property
    def Status(self):
        """Shipping status. 0: disabled; 1: normal; 2: abnormal.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ErrInfo(self):
        """Error message
        :rtype: str
        """
        return self._ErrInfo

    @ErrInfo.setter
    def ErrInfo(self, ErrInfo):
        self._ErrInfo = ErrInfo

    @property
    def StatusTime(self):
        """Timestamp of last status reporting
        :rtype: int
        """
        return self._StatusTime

    @StatusTime.setter
    def StatusTime(self, StatusTime):
        self._StatusTime = StatusTime

    @property
    def LogName(self):
        """Logset name
        :rtype: str
        """
        return self._LogName

    @LogName.setter
    def LogName(self, LogName):
        self._LogName = LogName

    @property
    def LogSetId(self):
        """Logset ID
        :rtype: str
        """
        return self._LogSetId

    @LogSetId.setter
    def LogSetId(self, LogSetId):
        self._LogSetId = LogSetId

    @property
    def Region(self):
        """Logset region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region


    def _deserialize(self, params):
        self._SecurityType = params.get("SecurityType")
        self._LogType = params.get("LogType")
        self._TopicId = params.get("TopicId")
        self._TopicName = params.get("TopicName")
        self._Switch = params.get("Switch")
        self._Status = params.get("Status")
        self._ErrInfo = params.get("ErrInfo")
        self._StatusTime = params.get("StatusTime")
        self._LogName = params.get("LogName")
        self._LogSetId = params.get("LogSetId")
        self._Region = params.get("Region")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeABTestConfigRequest(AbstractModel):
    """DescribeABTestConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectName: Greyscale project name
        :type ProjectName: str
        """
        self._ProjectName = None

    @property
    def ProjectName(self):
        """Greyscale project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeABTestConfigResponse(AbstractModel):
    """DescribeABTestConfig response structure.

    """

    def __init__(self):
        r"""
        :param _Config: Grayscale project configuration
        :type Config: list of ABTestConfig
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Config = None
        self._RequestId = None

    @property
    def Config(self):
        """Grayscale project configuration
        :rtype: list of ABTestConfig
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = ABTestConfig()
                obj._deserialize(item)
                self._Config.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAESKeyRequest(AbstractModel):
    """DescribeAESKey request structure.

    """


class DescribeAESKeyResponse(AbstractModel):
    """DescribeAESKey response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeAccountStatisticsRequest(AbstractModel):
    """DescribeAccountStatistics request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filtering criteria
<li>Username - String - required: no - account username</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria
<li>Username - String - required: no - account username</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccountStatisticsResponse(AbstractModel):
    """DescribeAccountStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of account statistics list records
        :type TotalCount: int
        :param _AccountStatistics: Account statistics list
        :type AccountStatistics: list of AccountStatistics
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AccountStatistics = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of account statistics list records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AccountStatistics(self):
        """Account statistics list
        :rtype: list of AccountStatistics
        """
        return self._AccountStatistics

    @AccountStatistics.setter
    def AccountStatistics(self, AccountStatistics):
        self._AccountStatistics = AccountStatistics

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AccountStatistics") is not None:
            self._AccountStatistics = []
            for item in params.get("AccountStatistics"):
                obj = AccountStatistics()
                obj._deserialize(item)
                self._AccountStatistics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAgentInstallCommandRequest(AbstractModel):
    """DescribeAgentInstallCommand request structure.

    """

    def __init__(self):
        r"""
        :param _IsCloud: Whether Tencent Cloud
        :type IsCloud: bool
        :param _NetType: Network type: basic - basic network; private - VPC; public - public network; direct - direct connect
        :type NetType: str
        :param _RegionCode: Region identifier, required when NetType=direct
        :type RegionCode: str
        :param _VpcId: VpcId, required when NetType=direct
        :type VpcId: str
        :param _TagIds: Tag ID list, effective only when IsCloud=false
        :type TagIds: list of int non-negative
        :param _ExpireDate: Command validity period, required for non-Tencent Cloud instances
        :type ExpireDate: str
        :param _Vip: VIP Accessed via Proxy Mode
        :type Vip: str
        """
        self._IsCloud = None
        self._NetType = None
        self._RegionCode = None
        self._VpcId = None
        self._TagIds = None
        self._ExpireDate = None
        self._Vip = None

    @property
    def IsCloud(self):
        """Whether Tencent Cloud
        :rtype: bool
        """
        return self._IsCloud

    @IsCloud.setter
    def IsCloud(self, IsCloud):
        self._IsCloud = IsCloud

    @property
    def NetType(self):
        """Network type: basic - basic network; private - VPC; public - public network; direct - direct connect
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegionCode(self):
        """Region identifier, required when NetType=direct
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def VpcId(self):
        """VpcId, required when NetType=direct
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def TagIds(self):
        """Tag ID list, effective only when IsCloud=false
        :rtype: list of int non-negative
        """
        return self._TagIds

    @TagIds.setter
    def TagIds(self, TagIds):
        self._TagIds = TagIds

    @property
    def ExpireDate(self):
        """Command validity period, required for non-Tencent Cloud instances
        :rtype: str
        """
        return self._ExpireDate

    @ExpireDate.setter
    def ExpireDate(self, ExpireDate):
        self._ExpireDate = ExpireDate

    @property
    def Vip(self):
        """VIP Accessed via Proxy Mode
        :rtype: str
        """
        return self._Vip

    @Vip.setter
    def Vip(self, Vip):
        self._Vip = Vip


    def _deserialize(self, params):
        self._IsCloud = params.get("IsCloud")
        self._NetType = params.get("NetType")
        self._RegionCode = params.get("RegionCode")
        self._VpcId = params.get("VpcId")
        self._TagIds = params.get("TagIds")
        self._ExpireDate = params.get("ExpireDate")
        self._Vip = params.get("Vip")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAgentInstallCommandResponse(AbstractModel):
    """DescribeAgentInstallCommand response structure.

    """

    def __init__(self):
        r"""
        :param _LinuxCommand: Linux installation command
        :type LinuxCommand: str
        :param _WindowsCommand: Windows installation command (Windows 2008 or later)
        :type WindowsCommand: str
        :param _WindowsStepOne: Step 1 of Window installation command (Windows 2003)
        :type WindowsStepOne: str
        :param _WindowsStepTwo: Step 2 of Window installation command (Windows 2003)
        :type WindowsStepTwo: str
        :param _WindowsDownloadUrl: Download URL of the agent for Windows
        :type WindowsDownloadUrl: str
        :param _ARMCommand: Arm installation command
Note: This field may return null, indicating that no valid values can be obtained.
        :type ARMCommand: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LinuxCommand = None
        self._WindowsCommand = None
        self._WindowsStepOne = None
        self._WindowsStepTwo = None
        self._WindowsDownloadUrl = None
        self._ARMCommand = None
        self._RequestId = None

    @property
    def LinuxCommand(self):
        """Linux installation command
        :rtype: str
        """
        return self._LinuxCommand

    @LinuxCommand.setter
    def LinuxCommand(self, LinuxCommand):
        self._LinuxCommand = LinuxCommand

    @property
    def WindowsCommand(self):
        """Windows installation command (Windows 2008 or later)
        :rtype: str
        """
        return self._WindowsCommand

    @WindowsCommand.setter
    def WindowsCommand(self, WindowsCommand):
        self._WindowsCommand = WindowsCommand

    @property
    def WindowsStepOne(self):
        """Step 1 of Window installation command (Windows 2003)
        :rtype: str
        """
        return self._WindowsStepOne

    @WindowsStepOne.setter
    def WindowsStepOne(self, WindowsStepOne):
        self._WindowsStepOne = WindowsStepOne

    @property
    def WindowsStepTwo(self):
        """Step 2 of Window installation command (Windows 2003)
        :rtype: str
        """
        return self._WindowsStepTwo

    @WindowsStepTwo.setter
    def WindowsStepTwo(self, WindowsStepTwo):
        self._WindowsStepTwo = WindowsStepTwo

    @property
    def WindowsDownloadUrl(self):
        """Download URL of the agent for Windows
        :rtype: str
        """
        return self._WindowsDownloadUrl

    @WindowsDownloadUrl.setter
    def WindowsDownloadUrl(self, WindowsDownloadUrl):
        self._WindowsDownloadUrl = WindowsDownloadUrl

    @property
    def ARMCommand(self):
        """Arm installation command
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ARMCommand

    @ARMCommand.setter
    def ARMCommand(self, ARMCommand):
        self._ARMCommand = ARMCommand

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LinuxCommand = params.get("LinuxCommand")
        self._WindowsCommand = params.get("WindowsCommand")
        self._WindowsStepOne = params.get("WindowsStepOne")
        self._WindowsStepTwo = params.get("WindowsStepTwo")
        self._WindowsDownloadUrl = params.get("WindowsDownloadUrl")
        self._ARMCommand = params.get("ARMCommand")
        self._RequestId = params.get("RequestId")


class DescribeAgentInstallationTokenRequest(AbstractModel):
    """DescribeAgentInstallationToken request structure.

    """

    def __init__(self):
        r"""
        :param _ExpireDate: Token expiration time
        :type ExpireDate: str
        """
        self._ExpireDate = None

    @property
    def ExpireDate(self):
        """Token expiration time
        :rtype: str
        """
        return self._ExpireDate

    @ExpireDate.setter
    def ExpireDate(self, ExpireDate):
        self._ExpireDate = ExpireDate


    def _deserialize(self, params):
        self._ExpireDate = params.get("ExpireDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAgentInstallationTokenResponse(AbstractModel):
    """DescribeAgentInstallationToken response structure.

    """

    def __init__(self):
        r"""
        :param _Token: Installation command token
        :type Token: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Token = None
        self._RequestId = None

    @property
    def Token(self):
        """Installation command token
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Token = params.get("Token")
        self._RequestId = params.get("RequestId")


class DescribeAlarmIncidentNodesRequest(AbstractModel):
    """DescribeAlarmIncidentNodes request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Machine UUID
        :type Uuid: str
        :param _AlarmVid: Alarm VID
        :type AlarmVid: str
        :param _AlarmTime: Alarm time
        :type AlarmTime: int
        :param _TableId: Alarm source table ID
        :type TableId: int
        """
        self._Uuid = None
        self._AlarmVid = None
        self._AlarmTime = None
        self._TableId = None

    @property
    def Uuid(self):
        """Machine UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def AlarmVid(self):
        """Alarm VID
        :rtype: str
        """
        return self._AlarmVid

    @AlarmVid.setter
    def AlarmVid(self, AlarmVid):
        self._AlarmVid = AlarmVid

    @property
    def AlarmTime(self):
        """Alarm time
        :rtype: int
        """
        return self._AlarmTime

    @AlarmTime.setter
    def AlarmTime(self, AlarmTime):
        self._AlarmTime = AlarmTime

    @property
    def TableId(self):
        """Alarm source table ID
        :rtype: int
        """
        return self._TableId

    @TableId.setter
    def TableId(self, TableId):
        self._TableId = TableId


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._AlarmVid = params.get("AlarmVid")
        self._AlarmTime = params.get("AlarmTime")
        self._TableId = params.get("TableId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlarmIncidentNodesResponse(AbstractModel):
    """DescribeAlarmIncidentNodes response structure.

    """

    def __init__(self):
        r"""
        :param _IncidentNodes: All node information on the event corresponding to an alarm. Multiple events may be involved.
Note: This field may return null, indicating that no valid values can be obtained.
        :type IncidentNodes: list of IncidentVertexInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IncidentNodes = None
        self._RequestId = None

    @property
    def IncidentNodes(self):
        """All node information on the event corresponding to an alarm. Multiple events may be involved.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of IncidentVertexInfo
        """
        return self._IncidentNodes

    @IncidentNodes.setter
    def IncidentNodes(self, IncidentNodes):
        self._IncidentNodes = IncidentNodes

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("IncidentNodes") is not None:
            self._IncidentNodes = []
            for item in params.get("IncidentNodes"):
                obj = IncidentVertexInfo()
                obj._deserialize(item)
                self._IncidentNodes.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAlarmVertexIdRequest(AbstractModel):
    """DescribeAlarmVertexId request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Machine UUID
        :type Uuid: str
        :param _StartTime: Start timestamp
        :type StartTime: int
        :param _EndTime: End timestamp
        :type EndTime: int
        """
        self._Uuid = None
        self._StartTime = None
        self._EndTime = None

    @property
    def Uuid(self):
        """Machine UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def StartTime(self):
        """Start timestamp
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End timestamp
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlarmVertexIdResponse(AbstractModel):
    """DescribeAlarmVertexId response structure.

    """

    def __init__(self):
        r"""
        :param _AlarmVertexIds: List of alarm IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :type AlarmVertexIds: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AlarmVertexIds = None
        self._RequestId = None

    @property
    def AlarmVertexIds(self):
        """List of alarm IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._AlarmVertexIds

    @AlarmVertexIds.setter
    def AlarmVertexIds(self, AlarmVertexIds):
        self._AlarmVertexIds = AlarmVertexIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AlarmVertexIds = params.get("AlarmVertexIds")
        self._RequestId = params.get("RequestId")


class DescribeAssetAppCountRequest(AbstractModel):
    """DescribeAssetAppCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Search for processes of all software whose names contain Name and return a list.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Search for processes of all software whose names contain Name and return a list.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetAppCountResponse(AbstractModel):
    """DescribeAssetAppCount response structure.

    """

    def __init__(self):
        r"""
        :param _Apps: Number of software applications
Note: This field may return null, indicating that no valid values can be obtained.
        :type Apps: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Apps = None
        self._RequestId = None

    @property
    def Apps(self):
        """Number of software applications
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Apps

    @Apps.setter
    def Apps(self, Apps):
        self._Apps = Apps

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Apps") is not None:
            self._Apps = []
            for item in params.get("Apps"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Apps.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetAppListRequest(AbstractModel):
    """DescribeAssetAppList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>AppName - string - required: no - application name for search</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Type - int - required: no - type : Linux only	
0: all
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of AssetFilters
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting field: [FirstTime|ProcessCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>AppName - string - required: no - application name for search</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Type - int - required: no - type : Linux only	
0: all
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: [FirstTime|ProcessCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetAppListResponse(AbstractModel):
    """DescribeAssetAppList response structure.

    """

    def __init__(self):
        r"""
        :param _Apps: Application list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Apps: list of AssetAppBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Apps = None
        self._Total = None
        self._RequestId = None

    @property
    def Apps(self):
        """Application list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetAppBaseInfo
        """
        return self._Apps

    @Apps.setter
    def Apps(self, Apps):
        self._Apps = Apps

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Apps") is not None:
            self._Apps = []
            for item in params.get("Apps"):
                obj = AssetAppBaseInfo()
                obj._deserialize(item)
                self._Apps.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetAppProcessListRequest(AbstractModel):
    """DescribeAssetAppProcessList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Name: App name
        :type Name: str
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Name = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Name(self):
        """App name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Name = params.get("Name")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetAppProcessListResponse(AbstractModel):
    """DescribeAssetAppProcessList response structure.

    """

    def __init__(self):
        r"""
        :param _Process: Process list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetAppProcessInfo
        :param _Total: Total number of partitions
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Process = None
        self._Total = None
        self._RequestId = None

    @property
    def Process(self):
        """Process list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetAppProcessInfo
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def Total(self):
        """Total number of partitions
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetAppProcessInfo()
                obj._deserialize(item)
                self._Process.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetCoreModuleInfoRequest(AbstractModel):
    """DescribeAssetCoreModuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Id: Kernel module ID
        :type Id: str
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Kernel module ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetCoreModuleInfoResponse(AbstractModel):
    """DescribeAssetCoreModuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Module: Kernel module details
        :type Module: :class:`tencentcloud.cwp.v20180228.models.AssetCoreModuleDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Module = None
        self._RequestId = None

    @property
    def Module(self):
        """Kernel module details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetCoreModuleDetail`
        """
        return self._Module

    @Module.setter
    def Module(self, Module):
        self._Module = Module

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Module") is not None:
            self._Module = AssetCoreModuleDetail()
            self._Module._deserialize(params.get("Module"))
        self._RequestId = params.get("RequestId")


class DescribeAssetCoreModuleListRequest(AbstractModel):
    """DescribeAssetCoreModuleList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - string - required: no - package name</li>
<li>User - string - required: no - user</li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method [Size|FirstTime|ProcessCount|ModuleCount]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - string - required: no - package name</li>
<li>User - string - required: no - user</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method [Size|FirstTime|ProcessCount|ModuleCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetCoreModuleListResponse(AbstractModel):
    """DescribeAssetCoreModuleList response structure.

    """

    def __init__(self):
        r"""
        :param _Modules: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Modules: list of AssetCoreModuleBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Modules = None
        self._Total = None
        self._RequestId = None

    @property
    def Modules(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetCoreModuleBaseInfo
        """
        return self._Modules

    @Modules.setter
    def Modules(self, Modules):
        self._Modules = Modules

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Modules") is not None:
            self._Modules = []
            for item in params.get("Modules"):
                obj = AssetCoreModuleBaseInfo()
                obj._deserialize(item)
                self._Modules.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetDatabaseCountRequest(AbstractModel):
    """DescribeAssetDatabaseCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Return a list of databases whose names contain Name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Return a list of databases whose names contain Name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetDatabaseCountResponse(AbstractModel):
    """DescribeAssetDatabaseCount response structure.

    """

    def __init__(self):
        r"""
        :param _Databases: Number of obtained database assets
        :type Databases: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Databases = None
        self._RequestId = None

    @property
    def Databases(self):
        """Number of obtained database assets
        :rtype: list of AssetKeyVal
        """
        return self._Databases

    @Databases.setter
    def Databases(self, Databases):
        self._Databases = Databases

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Databases") is not None:
            self._Databases = []
            for item in params.get("Databases"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Databases.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetDatabaseInfoRequest(AbstractModel):
    """DescribeAssetDatabaseInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Id: Database ID
        :type Id: str
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Database ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetDatabaseInfoResponse(AbstractModel):
    """DescribeAssetDatabaseInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Database: Database details
        :type Database: :class:`tencentcloud.cwp.v20180228.models.AssetDatabaseDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Database = None
        self._RequestId = None

    @property
    def Database(self):
        """Database details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetDatabaseDetail`
        """
        return self._Database

    @Database.setter
    def Database(self, Database):
        self._Database = Database

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Database") is not None:
            self._Database = AssetDatabaseDetail()
            self._Database._deserialize(params.get("Database"))
        self._RequestId = params.get("RequestId")


class DescribeAssetDatabaseListRequest(AbstractModel):
    """DescribeAssetDatabaseList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>MachineName - String - required: no - host alias for filtering</li>
<li>IP - String - required: no - host IP address for filtering</li>
<li>InstanceID - String - required: no - host instance ID for filtering</li>
<li>User- string - required: no - running user</li>
<li>Port - Int - required: no - port</li>
<li>Name - Int - required: no - database name
0: all
1:MySQL
2:Redis
3:Oracle
4:MongoDB
5:MemCache
6:PostgreSQL
7:HBase
8:DB2
9:Sybase
10:TiDB</li>
<li>Proto - String - required: no - protocol: 1: TCP; 2: UDP; 3: unknown</li>
<li>OsType - String - required: no - operating system: linux/windows</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>MachineName - String - required: no - host alias for filtering</li>
<li>IP - String - required: no - host IP address for filtering</li>
<li>InstanceID - String - required: no - host instance ID for filtering</li>
<li>User- string - required: no - running user</li>
<li>Port - Int - required: no - port</li>
<li>Name - Int - required: no - database name
0: all
1:MySQL
2:Redis
3:Oracle
4:MongoDB
5:MemCache
6:PostgreSQL
7:HBase
8:DB2
9:Sybase
10:TiDB</li>
<li>Proto - String - required: no - protocol: 1: TCP; 2: UDP; 3: unknown</li>
<li>OsType - String - required: no - operating system: linux/windows</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetDatabaseListResponse(AbstractModel):
    """DescribeAssetDatabaseList response structure.

    """

    def __init__(self):
        r"""
        :param _Databases: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Databases: list of AssetDatabaseBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Databases = None
        self._Total = None
        self._RequestId = None

    @property
    def Databases(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetDatabaseBaseInfo
        """
        return self._Databases

    @Databases.setter
    def Databases(self, Databases):
        self._Databases = Databases

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Databases") is not None:
            self._Databases = []
            for item in params.get("Databases"):
                obj = AssetDatabaseBaseInfo()
                obj._deserialize(item)
                self._Databases.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetDiskListRequest(AbstractModel):
    """DescribeAssetDiskList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetDiskListResponse(AbstractModel):
    """DescribeAssetDiskList response structure.

    """

    def __init__(self):
        r"""
        :param _Disks: Disk partition list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Disks: list of AssetDiskPartitionInfo
        :param _Total: Total number of partitions
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Disks = None
        self._Total = None
        self._RequestId = None

    @property
    def Disks(self):
        """Disk partition list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetDiskPartitionInfo
        """
        return self._Disks

    @Disks.setter
    def Disks(self, Disks):
        self._Disks = Disks

    @property
    def Total(self):
        """Total number of partitions
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Disks") is not None:
            self._Disks = []
            for item in params.get("Disks"):
                obj = AssetDiskPartitionInfo()
                obj._deserialize(item)
                self._Disks.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetEnvListRequest(AbstractModel):
    """DescribeAssetEnvList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Type: This field has been deprecated and replaced with Filters.
        :type Type: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Name - string - required: no - environment variable name</li>
<li>Type - int - required: no - type: 0: user variable; 1: system variable</li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Type = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Type(self):
        """This field has been deprecated and replaced with Filters.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Name - string - required: no - environment variable name</li>
<li>Type - int - required: no - type: 0: user variable; 1: system variable</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Type = params.get("Type")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetEnvListResponse(AbstractModel):
    """DescribeAssetEnvList response structure.

    """

    def __init__(self):
        r"""
        :param _Envs: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Envs: list of AssetEnvBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Envs = None
        self._Total = None
        self._RequestId = None

    @property
    def Envs(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetEnvBaseInfo
        """
        return self._Envs

    @Envs.setter
    def Envs(self, Envs):
        self._Envs = Envs

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Envs") is not None:
            self._Envs = []
            for item in params.get("Envs"):
                obj = AssetEnvBaseInfo()
                obj._deserialize(item)
                self._Envs.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetHostTotalCountRequest(AbstractModel):
    """DescribeAssetHostTotalCount request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        """
        self._Uuid = None
        self._Quuid = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetHostTotalCountResponse(AbstractModel):
    """DescribeAssetHostTotalCount response structure.

    """

    def __init__(self):
        r"""
        :param _Types: Number of individual resources
system: resource monitoring
account: account
port: port
process: process
app: application software
database: database
webapp: Web application
webframe: Web framework
webservice: Web service
weblocation: Web site
systempackage: system installation package
jar: jar package
initservice: startup service
env: environment variable
coremodule: kernel module
        :type Types: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Types = None
        self._RequestId = None

    @property
    def Types(self):
        """Number of individual resources
system: resource monitoring
account: account
port: port
process: process
app: application software
database: database
webapp: Web application
webframe: Web framework
webservice: Web service
weblocation: Web site
systempackage: system installation package
jar: jar package
initservice: startup service
env: environment variable
coremodule: kernel module
        :rtype: list of AssetKeyVal
        """
        return self._Types

    @Types.setter
    def Types(self, Types):
        self._Types = Types

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Types") is not None:
            self._Types = []
            for item in params.get("Types"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Types.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetInfoRequest(AbstractModel):
    """DescribeAssetInfo request structure.

    """


class DescribeAssetInfoResponse(AbstractModel):
    """DescribeAssetInfo response structure.

    """

    def __init__(self):
        r"""
        :param _MachineCount: Number of Hosts
        :type MachineCount: int
        :param _AccountCount: Number of Accounts
        :type AccountCount: int
        :param _PortCount: Number of ports
        :type PortCount: int
        :param _ProcessCount: Number of Processes
        :type ProcessCount: int
        :param _SoftwareCount: Number of software
        :type SoftwareCount: int
        :param _DatabaseCount: Number of databases
        :type DatabaseCount: int
        :param _WebAppCount: Number of web applications
        :type WebAppCount: int
        :param _WebFrameCount: Number of web frameworks
        :type WebFrameCount: int
        :param _WebServiceCount: Number of web services
        :type WebServiceCount: int
        :param _WebLocationCount: Number of web sites
        :type WebLocationCount: int
        :param _AccountNewCount: New accounts today
        :type AccountNewCount: int
        :param _PortNewCount: New ports today
        :type PortNewCount: int
        :param _ProcessNewCount: New processes today
        :type ProcessNewCount: int
        :param _SoftwareNewCount: New software today
        :type SoftwareNewCount: int
        :param _DatabaseNewCount: New databases today
        :type DatabaseNewCount: int
        :param _WebAppNewCount: New web applications today
        :type WebAppNewCount: int
        :param _WebFrameNewCount: New web frameworks today
        :type WebFrameNewCount: int
        :param _WebServiceNewCount: New web services today
        :type WebServiceNewCount: int
        :param _WebLocationNewCount: New web sites today
        :type WebLocationNewCount: int
        :param _MachineNewCount: New hosts today
        :type MachineNewCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MachineCount = None
        self._AccountCount = None
        self._PortCount = None
        self._ProcessCount = None
        self._SoftwareCount = None
        self._DatabaseCount = None
        self._WebAppCount = None
        self._WebFrameCount = None
        self._WebServiceCount = None
        self._WebLocationCount = None
        self._AccountNewCount = None
        self._PortNewCount = None
        self._ProcessNewCount = None
        self._SoftwareNewCount = None
        self._DatabaseNewCount = None
        self._WebAppNewCount = None
        self._WebFrameNewCount = None
        self._WebServiceNewCount = None
        self._WebLocationNewCount = None
        self._MachineNewCount = None
        self._RequestId = None

    @property
    def MachineCount(self):
        """Number of Hosts
        :rtype: int
        """
        return self._MachineCount

    @MachineCount.setter
    def MachineCount(self, MachineCount):
        self._MachineCount = MachineCount

    @property
    def AccountCount(self):
        """Number of Accounts
        :rtype: int
        """
        return self._AccountCount

    @AccountCount.setter
    def AccountCount(self, AccountCount):
        self._AccountCount = AccountCount

    @property
    def PortCount(self):
        """Number of ports
        :rtype: int
        """
        return self._PortCount

    @PortCount.setter
    def PortCount(self, PortCount):
        self._PortCount = PortCount

    @property
    def ProcessCount(self):
        """Number of Processes
        :rtype: int
        """
        return self._ProcessCount

    @ProcessCount.setter
    def ProcessCount(self, ProcessCount):
        self._ProcessCount = ProcessCount

    @property
    def SoftwareCount(self):
        """Number of software
        :rtype: int
        """
        return self._SoftwareCount

    @SoftwareCount.setter
    def SoftwareCount(self, SoftwareCount):
        self._SoftwareCount = SoftwareCount

    @property
    def DatabaseCount(self):
        """Number of databases
        :rtype: int
        """
        return self._DatabaseCount

    @DatabaseCount.setter
    def DatabaseCount(self, DatabaseCount):
        self._DatabaseCount = DatabaseCount

    @property
    def WebAppCount(self):
        """Number of web applications
        :rtype: int
        """
        return self._WebAppCount

    @WebAppCount.setter
    def WebAppCount(self, WebAppCount):
        self._WebAppCount = WebAppCount

    @property
    def WebFrameCount(self):
        """Number of web frameworks
        :rtype: int
        """
        return self._WebFrameCount

    @WebFrameCount.setter
    def WebFrameCount(self, WebFrameCount):
        self._WebFrameCount = WebFrameCount

    @property
    def WebServiceCount(self):
        """Number of web services
        :rtype: int
        """
        return self._WebServiceCount

    @WebServiceCount.setter
    def WebServiceCount(self, WebServiceCount):
        self._WebServiceCount = WebServiceCount

    @property
    def WebLocationCount(self):
        """Number of web sites
        :rtype: int
        """
        return self._WebLocationCount

    @WebLocationCount.setter
    def WebLocationCount(self, WebLocationCount):
        self._WebLocationCount = WebLocationCount

    @property
    def AccountNewCount(self):
        """New accounts today
        :rtype: int
        """
        return self._AccountNewCount

    @AccountNewCount.setter
    def AccountNewCount(self, AccountNewCount):
        self._AccountNewCount = AccountNewCount

    @property
    def PortNewCount(self):
        """New ports today
        :rtype: int
        """
        return self._PortNewCount

    @PortNewCount.setter
    def PortNewCount(self, PortNewCount):
        self._PortNewCount = PortNewCount

    @property
    def ProcessNewCount(self):
        """New processes today
        :rtype: int
        """
        return self._ProcessNewCount

    @ProcessNewCount.setter
    def ProcessNewCount(self, ProcessNewCount):
        self._ProcessNewCount = ProcessNewCount

    @property
    def SoftwareNewCount(self):
        """New software today
        :rtype: int
        """
        return self._SoftwareNewCount

    @SoftwareNewCount.setter
    def SoftwareNewCount(self, SoftwareNewCount):
        self._SoftwareNewCount = SoftwareNewCount

    @property
    def DatabaseNewCount(self):
        """New databases today
        :rtype: int
        """
        return self._DatabaseNewCount

    @DatabaseNewCount.setter
    def DatabaseNewCount(self, DatabaseNewCount):
        self._DatabaseNewCount = DatabaseNewCount

    @property
    def WebAppNewCount(self):
        """New web applications today
        :rtype: int
        """
        return self._WebAppNewCount

    @WebAppNewCount.setter
    def WebAppNewCount(self, WebAppNewCount):
        self._WebAppNewCount = WebAppNewCount

    @property
    def WebFrameNewCount(self):
        """New web frameworks today
        :rtype: int
        """
        return self._WebFrameNewCount

    @WebFrameNewCount.setter
    def WebFrameNewCount(self, WebFrameNewCount):
        self._WebFrameNewCount = WebFrameNewCount

    @property
    def WebServiceNewCount(self):
        """New web services today
        :rtype: int
        """
        return self._WebServiceNewCount

    @WebServiceNewCount.setter
    def WebServiceNewCount(self, WebServiceNewCount):
        self._WebServiceNewCount = WebServiceNewCount

    @property
    def WebLocationNewCount(self):
        """New web sites today
        :rtype: int
        """
        return self._WebLocationNewCount

    @WebLocationNewCount.setter
    def WebLocationNewCount(self, WebLocationNewCount):
        self._WebLocationNewCount = WebLocationNewCount

    @property
    def MachineNewCount(self):
        """New hosts today
        :rtype: int
        """
        return self._MachineNewCount

    @MachineNewCount.setter
    def MachineNewCount(self, MachineNewCount):
        self._MachineNewCount = MachineNewCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MachineCount = params.get("MachineCount")
        self._AccountCount = params.get("AccountCount")
        self._PortCount = params.get("PortCount")
        self._ProcessCount = params.get("ProcessCount")
        self._SoftwareCount = params.get("SoftwareCount")
        self._DatabaseCount = params.get("DatabaseCount")
        self._WebAppCount = params.get("WebAppCount")
        self._WebFrameCount = params.get("WebFrameCount")
        self._WebServiceCount = params.get("WebServiceCount")
        self._WebLocationCount = params.get("WebLocationCount")
        self._AccountNewCount = params.get("AccountNewCount")
        self._PortNewCount = params.get("PortNewCount")
        self._ProcessNewCount = params.get("ProcessNewCount")
        self._SoftwareNewCount = params.get("SoftwareNewCount")
        self._DatabaseNewCount = params.get("DatabaseNewCount")
        self._WebAppNewCount = params.get("WebAppNewCount")
        self._WebFrameNewCount = params.get("WebFrameNewCount")
        self._WebServiceNewCount = params.get("WebServiceNewCount")
        self._WebLocationNewCount = params.get("WebLocationNewCount")
        self._MachineNewCount = params.get("MachineNewCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetInitServiceListRequest(AbstractModel):
    """DescribeAssetInitServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - user</li>
<li>IsAutoRun - string - required: no - whether it starts at boot: 0: no; 1: yes</li>
<li>Status- string - required: no - default enabling status: 0: unenabled; 1: enabled (Linux only)</li>
<li>Type- string - required: no - type: type (Windows only)
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Printing monitor
12: Resource manager
13: Driver service
14: Log-in </li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - user</li>
<li>IsAutoRun - string - required: no - whether it starts at boot: 0: no; 1: yes</li>
<li>Status- string - required: no - default enabling status: 0: unenabled; 1: enabled (Linux only)</li>
<li>Type- string - required: no - type: type (Windows only)
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Printing monitor
12: Resource manager
13: Driver service
14: Log-in </li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetInitServiceListResponse(AbstractModel):
    """DescribeAssetInitServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _Services: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Services: list of AssetInitServiceBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Services = None
        self._Total = None
        self._RequestId = None

    @property
    def Services(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetInitServiceBaseInfo
        """
        return self._Services

    @Services.setter
    def Services(self, Services):
        self._Services = Services

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Services") is not None:
            self._Services = []
            for item in params.get("Services"):
                obj = AssetInitServiceBaseInfo()
                obj._deserialize(item)
                self._Services.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetJarInfoRequest(AbstractModel):
    """DescribeAssetJarInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Id: JAR package ID
        :type Id: str
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """JAR package ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetJarInfoResponse(AbstractModel):
    """DescribeAssetJarInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Jar: JAR package details
        :type Jar: :class:`tencentcloud.cwp.v20180228.models.AssetJarDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Jar = None
        self._RequestId = None

    @property
    def Jar(self):
        """JAR package details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetJarDetail`
        """
        return self._Jar

    @Jar.setter
    def Jar(self, Jar):
        self._Jar = Jar

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Jar") is not None:
            self._Jar = AssetJarDetail()
            self._Jar._deserialize(params.get("Jar"))
        self._RequestId = params.get("RequestId")


class DescribeAssetJarListRequest(AbstractModel):
    """DescribeAssetJarList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name- string - required: no - package name</li>
<li>Type- uint - required: no - type	
1: application
2: system class library3: web service built-in library
4: other dependent packages</li>
<li>Status - string - required: no - whether execution is allowed: 0: no; 1: yes</li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name- string - required: no - package name</li>
<li>Type- uint - required: no - type	
1: application
2: system class library3: web service built-in library
4: other dependent packages</li>
<li>Status - string - required: no - whether execution is allowed: 0: no; 1: yes</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetJarListResponse(AbstractModel):
    """DescribeAssetJarList response structure.

    """

    def __init__(self):
        r"""
        :param _Jars: Application list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Jars: list of AssetJarBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Jars = None
        self._Total = None
        self._RequestId = None

    @property
    def Jars(self):
        """Application list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetJarBaseInfo
        """
        return self._Jars

    @Jars.setter
    def Jars(self, Jars):
        self._Jars = Jars

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Jars") is not None:
            self._Jars = []
            for item in params.get("Jars"):
                obj = AssetJarBaseInfo()
                obj._deserialize(item)
                self._Jars.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetLoadInfoRequest(AbstractModel):
    """DescribeAssetLoadInfo request structure.

    """


class DescribeAssetLoadInfoResponse(AbstractModel):
    """DescribeAssetLoadInfo response structure.

    """

    def __init__(self):
        r"""
        :param _CpuLoad: System load
Note: This field may return null, indicating that no valid values can be obtained.
        :type CpuLoad: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        :param _MemLoad: Memory utilization
Note: This field may return null, indicating that no valid values can be obtained.
        :type MemLoad: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        :param _DiskLoad: Hard disk utilization
Note: This field may return null, indicating that no valid values can be obtained.
        :type DiskLoad: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._CpuLoad = None
        self._MemLoad = None
        self._DiskLoad = None
        self._RequestId = None

    @property
    def CpuLoad(self):
        """System load
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        """
        return self._CpuLoad

    @CpuLoad.setter
    def CpuLoad(self, CpuLoad):
        self._CpuLoad = CpuLoad

    @property
    def MemLoad(self):
        """Memory utilization
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        """
        return self._MemLoad

    @MemLoad.setter
    def MemLoad(self, MemLoad):
        self._MemLoad = MemLoad

    @property
    def DiskLoad(self):
        """Hard disk utilization
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetLoadSummary`
        """
        return self._DiskLoad

    @DiskLoad.setter
    def DiskLoad(self, DiskLoad):
        self._DiskLoad = DiskLoad

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CpuLoad") is not None:
            self._CpuLoad = AssetLoadSummary()
            self._CpuLoad._deserialize(params.get("CpuLoad"))
        if params.get("MemLoad") is not None:
            self._MemLoad = AssetLoadSummary()
            self._MemLoad._deserialize(params.get("MemLoad"))
        if params.get("DiskLoad") is not None:
            self._DiskLoad = AssetLoadSummary()
            self._DiskLoad._deserialize(params.get("DiskLoad"))
        self._RequestId = params.get("RequestId")


class DescribeAssetMachineDetailRequest(AbstractModel):
    """DescribeAssetMachineDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        """
        self._Quuid = None
        self._Uuid = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetMachineDetailResponse(AbstractModel):
    """DescribeAssetMachineDetail response structure.

    """

    def __init__(self):
        r"""
        :param _MachineDetail: Host details
        :type MachineDetail: :class:`tencentcloud.cwp.v20180228.models.AssetMachineDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MachineDetail = None
        self._RequestId = None

    @property
    def MachineDetail(self):
        """Host details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetMachineDetail`
        """
        return self._MachineDetail

    @MachineDetail.setter
    def MachineDetail(self, MachineDetail):
        self._MachineDetail = MachineDetail

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MachineDetail") is not None:
            self._MachineDetail = AssetMachineDetail()
            self._MachineDetail._deserialize(params.get("MachineDetail"))
        self._RequestId = params.get("RequestId")


class DescribeAssetMachineListRequest(AbstractModel):
    """DescribeAssetMachineList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>MachineName  Host name</li>
<li>InstanceID  Instance ID  </li>
<li>IP   Private or public IP address</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>CpuLoad - Int - required: no - 
	0: unknown; 1: low load;
	2: medium load; 3: high load</li>
<li>DiskLoad - Int - required: no - 
	0: 0% or unknown; 1: 0%-20%;
	2: 20%～50%  3: 50%～80%
	4: 80%～100%</li>
<li>MemLoad - Int - required: no - 
	0: 0% or unknown; 1: 0%-20%;
	2: 20%～50%  3: 50%～80%
	4: 80%～100%</li>
<li>Quuid: Host QUUID</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method [FirstTime|PartitionCount]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>MachineName  Host name</li>
<li>InstanceID  Instance ID  </li>
<li>IP   Private or public IP address</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>CpuLoad - Int - required: no - 
	0: unknown; 1: low load;
	2: medium load; 3: high load</li>
<li>DiskLoad - Int - required: no - 
	0: 0% or unknown; 1: 0%-20%;
	2: 20%～50%  3: 50%～80%
	4: 80%～100%</li>
<li>MemLoad - Int - required: no - 
	0: 0% or unknown; 1: 0%-20%;
	2: 20%～50%  3: 50%～80%
	4: 80%～100%</li>
<li>Quuid: Host QUUID</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method [FirstTime|PartitionCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetMachineListResponse(AbstractModel):
    """DescribeAssetMachineList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number
        :type Total: int
        :param _Machines: Record list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Machines: list of AssetMachineBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Machines = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Machines(self):
        """Record list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetMachineBaseInfo
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = AssetMachineBaseInfo()
                obj._deserialize(item)
                self._Machines.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetMachineTagTopRequest(AbstractModel):
    """DescribeAssetMachineTagTop request structure.

    """


class DescribeAssetMachineTagTopResponse(AbstractModel):
    """DescribeAssetMachineTagTop response structure.

    """

    def __init__(self):
        r"""
        :param _Tags: Top 5 tags along with their counts
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Tags = None
        self._RequestId = None

    @property
    def Tags(self):
        """Top 5 tags along with their counts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetPlanTaskListRequest(AbstractModel):
    """DescribeAssetPlanTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>User- string - required: no - user</li>
<li>Status- int - required: no - default enabling status: 0: disabled; 1: enabled </li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>User- string - required: no - user</li>
<li>Status- int - required: no - default enabling status: 0: disabled; 1: enabled </li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetPlanTaskListResponse(AbstractModel):
    """DescribeAssetPlanTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _Tasks: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tasks: list of AssetPlanTask
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Tasks = None
        self._Total = None
        self._RequestId = None

    @property
    def Tasks(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetPlanTask
        """
        return self._Tasks

    @Tasks.setter
    def Tasks(self, Tasks):
        self._Tasks = Tasks

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Tasks") is not None:
            self._Tasks = []
            for item in params.get("Tasks"):
                obj = AssetPlanTask()
                obj._deserialize(item)
                self._Tasks.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetPortCountRequest(AbstractModel):
    """DescribeAssetPortCount request structure.

    """

    def __init__(self):
        r"""
        :param _Port: Search criteria: Return the data of specified port numbers.
        :type Port: int
        """
        self._Port = None

    @property
    def Port(self):
        """Search criteria: Return the data of specified port numbers.
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port


    def _deserialize(self, params):
        self._Port = params.get("Port")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetPortCountResponse(AbstractModel):
    """DescribeAssetPortCount response structure.

    """

    def __init__(self):
        r"""
        :param _Ports: Number of processes
        :type Ports: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Ports = None
        self._RequestId = None

    @property
    def Ports(self):
        """Number of processes
        :rtype: list of AssetKeyVal
        """
        return self._Ports

    @Ports.setter
    def Ports(self, Ports):
        self._Ports = Ports

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Ports") is not None:
            self._Ports = []
            for item in params.get("Ports"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Ports.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetPortInfoListRequest(AbstractModel):
    """DescribeAssetPortInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Port - uint64 - Required: no - port</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>ProcessName - String - Required: no - process name</li>
<li>Pid - uint64 - Required: no - PID</li>
<li>User - String - required: no - running user</li>
<li>Group - String - Required: no - user group</li>
<li>Ppid - uint64 - Required: no - PPID</li>
<li>Proto - string - Required: no - tcp/udp or "" (empty string to filter unknown status)</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|StartTime]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Port - uint64 - Required: no - port</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>ProcessName - String - Required: no - process name</li>
<li>Pid - uint64 - Required: no - PID</li>
<li>User - String - required: no - running user</li>
<li>Group - String - Required: no - user group</li>
<li>Ppid - uint64 - Required: no - PPID</li>
<li>Proto - string - Required: no - tcp/udp or "" (empty string to filter unknown status)</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|StartTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetPortInfoListResponse(AbstractModel):
    """DescribeAssetPortInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _Ports: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Ports: list of AssetPortBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Ports = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Ports(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetPortBaseInfo
        """
        return self._Ports

    @Ports.setter
    def Ports(self, Ports):
        self._Ports = Ports

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Ports") is not None:
            self._Ports = []
            for item in params.get("Ports"):
                obj = AssetPortBaseInfo()
                obj._deserialize(item)
                self._Ports.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetProcessCountRequest(AbstractModel):
    """DescribeAssetProcessCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Search and return a list of all process names containing Name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Search and return a list of all process names containing Name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetProcessCountResponse(AbstractModel):
    """DescribeAssetProcessCount response structure.

    """

    def __init__(self):
        r"""
        :param _Process: Number of individual processes
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Process = None
        self._RequestId = None

    @property
    def Process(self):
        """Number of individual processes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Process.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetProcessInfoListRequest(AbstractModel):
    """DescribeAssetProcessInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - process name</li>
<li>User - String - required: no - process user</li>
<li>Group - String - required: no - process user group</li>
<li>Pid - uint64 - required: no - process ID</li>
<li>Ppid - uint64 - required: no - parent process ID</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>Status - string - required: no - process status:
1: R, runnable
2: S, interruptible
3: D, uninterruptible
4: T, stopped or traced
5: Z, zombie
6: X, to be terminated</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
<li>InstallByPackage - uint64 - required: no - whether to install by package: 0: no; 1: yes</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|StartTime]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - process name</li>
<li>User - String - required: no - process user</li>
<li>Group - String - required: no - process user group</li>
<li>Pid - uint64 - required: no - process ID</li>
<li>Ppid - uint64 - required: no - parent process ID</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>Status - string - required: no - process status:
1: R, runnable
2: S, interruptible
3: D, uninterruptible
4: T, stopped or traced
5: Z, zombie
6: X, to be terminated</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
<li>InstallByPackage - uint64 - required: no - whether to install by package: 0: no; 1: yes</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|StartTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetProcessInfoListResponse(AbstractModel):
    """DescribeAssetProcessInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _Process: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetProcessBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Process = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Process(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetProcessBaseInfo
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetProcessBaseInfo()
                obj._deserialize(item)
                self._Process.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetRecentMachineInfoRequest(AbstractModel):
    """DescribeAssetRecentMachineInfo request structure.

    """

    def __init__(self):
        r"""
        :param _BeginDate: Start time. For example, 2020-09-22.
        :type BeginDate: str
        :param _EndDate: End time. For example, 2020-09-22.
        :type EndDate: str
        """
        self._BeginDate = None
        self._EndDate = None

    @property
    def BeginDate(self):
        """Start time. For example, 2020-09-22.
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time. For example, 2020-09-22.
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetRecentMachineInfoResponse(AbstractModel):
    """DescribeAssetRecentMachineInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TotalList: List of total assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalList: list of AssetKeyVal
        :param _LiveList: List of online assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type LiveList: list of AssetKeyVal
        :param _OfflineList: List of offline assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type OfflineList: list of AssetKeyVal
        :param _RiskList: List of risky assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskList: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalList = None
        self._LiveList = None
        self._OfflineList = None
        self._RiskList = None
        self._RequestId = None

    @property
    def TotalList(self):
        """List of total assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._TotalList

    @TotalList.setter
    def TotalList(self, TotalList):
        self._TotalList = TotalList

    @property
    def LiveList(self):
        """List of online assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._LiveList

    @LiveList.setter
    def LiveList(self, LiveList):
        self._LiveList = LiveList

    @property
    def OfflineList(self):
        """List of offline assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._OfflineList

    @OfflineList.setter
    def OfflineList(self, OfflineList):
        self._OfflineList = OfflineList

    @property
    def RiskList(self):
        """List of risky assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._RiskList

    @RiskList.setter
    def RiskList(self, RiskList):
        self._RiskList = RiskList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TotalList") is not None:
            self._TotalList = []
            for item in params.get("TotalList"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._TotalList.append(obj)
        if params.get("LiveList") is not None:
            self._LiveList = []
            for item in params.get("LiveList"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._LiveList.append(obj)
        if params.get("OfflineList") is not None:
            self._OfflineList = []
            for item in params.get("OfflineList"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._OfflineList.append(obj)
        if params.get("RiskList") is not None:
            self._RiskList = []
            for item in params.get("RiskList"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._RiskList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetSystemPackageListRequest(AbstractModel):
    """DescribeAssetSystemPackageList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - required: no - package name</li>
<li>StartTime - String - required: no - start time of installation</li>
<li>EndTime - String - required: no - end time of installation</li>
<li>Type- int - required: no - installation package type:
1:rmp
2:dpkg
3:java
4:system</li>
        :type Filters: list of Filter
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order. Default: desc for descending order.
        :type Order: str
        :param _By: Optional sorting method: [FistTime|InstallTime: installation time]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - required: no - package name</li>
<li>StartTime - String - required: no - start time of installation</li>
<li>EndTime - String - required: no - end time of installation</li>
<li>Type- int - required: no - installation package type:
1:rmp
2:dpkg
3:java
4:system</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order. Default: desc for descending order.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FistTime|InstallTime: installation time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetSystemPackageListResponse(AbstractModel):
    """DescribeAssetSystemPackageList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _Packages: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Packages: list of AssetSystemPackageInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Packages = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Packages(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetSystemPackageInfo
        """
        return self._Packages

    @Packages.setter
    def Packages(self, Packages):
        self._Packages = Packages

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Packages") is not None:
            self._Packages = []
            for item in params.get("Packages"):
                obj = AssetSystemPackageInfo()
                obj._deserialize(item)
                self._Packages.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetTotalCountRequest(AbstractModel):
    """DescribeAssetTotalCount request structure.

    """


class DescribeAssetTotalCountResponse(AbstractModel):
    """DescribeAssetTotalCount response structure.

    """

    def __init__(self):
        r"""
        :param _Types: Number of individual resources
system: resource monitoring
account: account
port: port
process: process
app: application software
database: database
webapp: Web application
webframe: Web framework
webservice: Web service
weblocation: Web site
jar: Jar package
initservice: startup service
planTask: scheduled task
env: environment variable
coremodule: kernel module
        :type Types: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Types = None
        self._RequestId = None

    @property
    def Types(self):
        """Number of individual resources
system: resource monitoring
account: account
port: port
process: process
app: application software
database: database
webapp: Web application
webframe: Web framework
webservice: Web service
weblocation: Web site
jar: Jar package
initservice: startup service
planTask: scheduled task
env: environment variable
coremodule: kernel module
        :rtype: list of AssetKeyVal
        """
        return self._Types

    @Types.setter
    def Types(self, Types):
        self._Types = Types

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Types") is not None:
            self._Types = []
            for item in params.get("Types"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Types.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetTypeTopRequest(AbstractModel):
    """DescribeAssetTypeTop request structure.

    """


class DescribeAssetTypeTopResponse(AbstractModel):
    """DescribeAssetTypeTop response structure.

    """

    def __init__(self):
        r"""
        :param _User: Top 5 accounts
Note: This field may return null, indicating that no valid values can be obtained.
        :type User: list of AssetKeyVal
        :param _Port: Top 5 ports
Note: This field may return null, indicating that no valid values can be obtained.
        :type Port: list of AssetKeyVal
        :param _Process: Top 5 processes
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetKeyVal
        :param _Software: Top 5 software
Note: This field may return null, indicating that no valid values can be obtained.
        :type Software: list of AssetKeyVal
        :param _Database: Top 5 databases
Note: This field may return null, indicating that no valid values can be obtained.
        :type Database: list of AssetKeyVal
        :param _WebApp: Top 5 web applications
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebApp: list of AssetKeyVal
        :param _WebLocation: Top 5 web sites
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebLocation: list of AssetKeyVal
        :param _WebFrame: Top 5 web frameworks
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebFrame: list of AssetKeyVal
        :param _WebService: Top 5 web services
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebService: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._User = None
        self._Port = None
        self._Process = None
        self._Software = None
        self._Database = None
        self._WebApp = None
        self._WebLocation = None
        self._WebFrame = None
        self._WebService = None
        self._RequestId = None

    @property
    def User(self):
        """Top 5 accounts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Port(self):
        """Top 5 ports
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def Process(self):
        """Top 5 processes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def Software(self):
        """Top 5 software
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Software

    @Software.setter
    def Software(self, Software):
        self._Software = Software

    @property
    def Database(self):
        """Top 5 databases
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._Database

    @Database.setter
    def Database(self, Database):
        self._Database = Database

    @property
    def WebApp(self):
        """Top 5 web applications
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._WebApp

    @WebApp.setter
    def WebApp(self, WebApp):
        self._WebApp = WebApp

    @property
    def WebLocation(self):
        """Top 5 web sites
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._WebLocation

    @WebLocation.setter
    def WebLocation(self, WebLocation):
        self._WebLocation = WebLocation

    @property
    def WebFrame(self):
        """Top 5 web frameworks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._WebFrame

    @WebFrame.setter
    def WebFrame(self, WebFrame):
        self._WebFrame = WebFrame

    @property
    def WebService(self):
        """Top 5 web services
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetKeyVal
        """
        return self._WebService

    @WebService.setter
    def WebService(self, WebService):
        self._WebService = WebService

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("User") is not None:
            self._User = []
            for item in params.get("User"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._User.append(obj)
        if params.get("Port") is not None:
            self._Port = []
            for item in params.get("Port"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Port.append(obj)
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Process.append(obj)
        if params.get("Software") is not None:
            self._Software = []
            for item in params.get("Software"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Software.append(obj)
        if params.get("Database") is not None:
            self._Database = []
            for item in params.get("Database"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Database.append(obj)
        if params.get("WebApp") is not None:
            self._WebApp = []
            for item in params.get("WebApp"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebApp.append(obj)
        if params.get("WebLocation") is not None:
            self._WebLocation = []
            for item in params.get("WebLocation"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebLocation.append(obj)
        if params.get("WebFrame") is not None:
            self._WebFrame = []
            for item in params.get("WebFrame"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebFrame.append(obj)
        if params.get("WebService") is not None:
            self._WebService = []
            for item in params.get("WebService"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebService.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetTypesRequest(AbstractModel):
    """DescribeAssetTypes request structure.

    """


class DescribeAssetTypesResponse(AbstractModel):
    """DescribeAssetTypes response structure.

    """

    def __init__(self):
        r"""
        :param _Types: Asset fingerprint type list
        :type Types: list of AssetType
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Types = None
        self._RequestId = None

    @property
    def Types(self):
        """Asset fingerprint type list
        :rtype: list of AssetType
        """
        return self._Types

    @Types.setter
    def Types(self, Types):
        self._Types = Types

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Types") is not None:
            self._Types = []
            for item in params.get("Types"):
                obj = AssetType()
                obj._deserialize(item)
                self._Types.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetUserCountRequest(AbstractModel):
    """DescribeAssetUserCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Search all account lists containing the name in the name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Search all account lists containing the name in the name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetUserCountResponse(AbstractModel):
    """DescribeAssetUserCount response structure.

    """

    def __init__(self):
        r"""
        :param _Users: Number of accounts
        :type Users: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Users = None
        self._RequestId = None

    @property
    def Users(self):
        """Number of accounts
        :rtype: list of AssetKeyVal
        """
        return self._Users

    @Users.setter
    def Users(self, Users):
        self._Users = Users

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Users") is not None:
            self._Users = []
            for item in params.get("Users"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._Users.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetUserInfoRequest(AbstractModel):
    """DescribeAssetUserInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: CVM UUID
        :type Quuid: str
        :param _Uuid: CWPP UUID
        :type Uuid: str
        :param _Name: Account name
        :type Name: str
        """
        self._Quuid = None
        self._Uuid = None
        self._Name = None

    @property
    def Quuid(self):
        """CVM UUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """CWPP UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Name(self):
        """Account name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetUserInfoResponse(AbstractModel):
    """DescribeAssetUserInfo response structure.

    """

    def __init__(self):
        r"""
        :param _User: Detailed user information
        :type User: :class:`tencentcloud.cwp.v20180228.models.AssetUserDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._User = None
        self._RequestId = None

    @property
    def User(self):
        """Detailed user information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetUserDetail`
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("User") is not None:
            self._User = AssetUserDetail()
            self._User._deserialize(params.get("User"))
        self._RequestId = params.get("RequestId")


class DescribeAssetUserKeyListRequest(AbstractModel):
    """DescribeAssetUserKeyList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Name: Account name
        :type Name: str
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Name = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Name(self):
        """Account name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Name = params.get("Name")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetUserKeyListResponse(AbstractModel):
    """DescribeAssetUserKeyList response structure.

    """

    def __init__(self):
        r"""
        :param _Keys: Public key list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Keys: list of AssetUserKeyInfo
        :param _Total: Total number of partitions
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Keys = None
        self._Total = None
        self._RequestId = None

    @property
    def Keys(self):
        """Public key list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetUserKeyInfo
        """
        return self._Keys

    @Keys.setter
    def Keys(self, Keys):
        self._Keys = Keys

    @property
    def Total(self):
        """Total number of partitions
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Keys") is not None:
            self._Keys = []
            for item in params.get("Keys"):
                obj = AssetUserKeyInfo()
                obj._deserialize(item)
                self._Keys.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetUserListRequest(AbstractModel):
    """DescribeAssetUserList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID<li>
<li>Name - String - required: no - account name (fuzzy match)</li>
<li>NameStrict - String - required: no - account name (strict match)</li>
<li>Uid - uint64 - required: no - UID</li>
<li>Guid - uint64 - required: no - GUID</li>
<li>LoginTimeStart - String - required: no - start time, such as 2021-01-11</li>
<li>LoginTimeEnd - String - required: no - end time, such as 2021-01-11</li>
<li>LoginType - uint64 - required: no - 0 - not allowed to log in; 1 - only key-based log-in allowed; 2 - only password-based log-in allowed; 3 - both key-based and password-based log-in allowed (Linux only)</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>Status - uint64 - required: no - account status: 0 - disabled; 1 - enabled</li>
<li>UserType - uint64 - required: no - account type: 0 - guest user; 1 - standard user; 2 - administrator user (Windows Only)</li>
<li>IsDomain - uint64 - required: no - whether a domain account: 0 - no; 1 - yes (Windows only)</li>
<li>IsRoot - uint64 - required: no - whether there is root permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSudo - uint64 - required: no - whether there is sudo permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSshLogin - uint64 - required: no - whether to use SSH log-in: 0 - no; 1 - yes (Linux only)</li>
<li>ShellLoginStatus - uint64 - required: no - whether to use Shell log-in: 0 - no; 1 - yes (Linux only)</li>
<li>PasswordStatus - uint64 - required: no - password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked (Linux only)</li>
<li>Os -String required: no - operating system (the value of DescribeMachineOsList API)</li>
        :type Filters: list of Filter
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FirstTime|LoginTime|PasswordChangeTime|PasswordDuaTime|PasswordLockDays]

        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID<li>
<li>Name - String - required: no - account name (fuzzy match)</li>
<li>NameStrict - String - required: no - account name (strict match)</li>
<li>Uid - uint64 - required: no - UID</li>
<li>Guid - uint64 - required: no - GUID</li>
<li>LoginTimeStart - String - required: no - start time, such as 2021-01-11</li>
<li>LoginTimeEnd - String - required: no - end time, such as 2021-01-11</li>
<li>LoginType - uint64 - required: no - 0 - not allowed to log in; 1 - only key-based log-in allowed; 2 - only password-based log-in allowed; 3 - both key-based and password-based log-in allowed (Linux only)</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>Status - uint64 - required: no - account status: 0 - disabled; 1 - enabled</li>
<li>UserType - uint64 - required: no - account type: 0 - guest user; 1 - standard user; 2 - administrator user (Windows Only)</li>
<li>IsDomain - uint64 - required: no - whether a domain account: 0 - no; 1 - yes (Windows only)</li>
<li>IsRoot - uint64 - required: no - whether there is root permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSudo - uint64 - required: no - whether there is sudo permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSshLogin - uint64 - required: no - whether to use SSH log-in: 0 - no; 1 - yes (Linux only)</li>
<li>ShellLoginStatus - uint64 - required: no - whether to use Shell log-in: 0 - no; 1 - yes (Linux only)</li>
<li>PasswordStatus - uint64 - required: no - password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked (Linux only)</li>
<li>Os -String required: no - operating system (the value of DescribeMachineOsList API)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FirstTime|LoginTime|PasswordChangeTime|PasswordDuaTime|PasswordLockDays]

        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetUserListResponse(AbstractModel):
    """DescribeAssetUserList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _Users: Account list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Users: list of AssetUserBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Users = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Users(self):
        """Account list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetUserBaseInfo
        """
        return self._Users

    @Users.setter
    def Users(self, Users):
        self._Users = Users

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Users") is not None:
            self._Users = []
            for item in params.get("Users"):
                obj = AssetUserBaseInfo()
                obj._deserialize(item)
                self._Users.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebAppCountRequest(AbstractModel):
    """DescribeAssetWebAppCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Return a list of all Web applications containing Name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Return a list of all Web applications containing Name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebAppCountResponse(AbstractModel):
    """DescribeAssetWebAppCount response structure.

    """

    def __init__(self):
        r"""
        :param _WebApps: Number of individual Web applications
        :type WebApps: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebApps = None
        self._RequestId = None

    @property
    def WebApps(self):
        """Number of individual Web applications
        :rtype: list of AssetKeyVal
        """
        return self._WebApps

    @WebApps.setter
    def WebApps(self, WebApps):
        self._WebApps = WebApps

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebApps") is not None:
            self._WebApps = []
            for item in params.get("WebApps"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebApps.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebAppListRequest(AbstractModel):
    """DescribeAssetWebAppList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - application name</li>
<li>Domain - String - required: no - site domain name</li>
<li>Type - int - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:Jetty
8:IHS
9:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|PluginCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - application name</li>
<li>Domain - String - required: no - site domain name</li>
<li>Type - int - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:Jetty
8:IHS
9:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|PluginCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebAppListResponse(AbstractModel):
    """DescribeAssetWebAppList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _WebApps: Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebApps: list of AssetWebAppBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._WebApps = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def WebApps(self):
        """Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebAppBaseInfo
        """
        return self._WebApps

    @WebApps.setter
    def WebApps(self, WebApps):
        self._WebApps = WebApps

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("WebApps") is not None:
            self._WebApps = []
            for item in params.get("WebApps"):
                obj = AssetWebAppBaseInfo()
                obj._deserialize(item)
                self._WebApps.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebAppPluginListRequest(AbstractModel):
    """DescribeAssetWebAppPluginList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Id: Web application ID
        :type Id: str
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Web application ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebAppPluginListResponse(AbstractModel):
    """DescribeAssetWebAppPluginList response structure.

    """

    def __init__(self):
        r"""
        :param _Plugins: Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Plugins: list of AssetWebAppPluginInfo
        :param _Total: Total number of partitions
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Plugins = None
        self._Total = None
        self._RequestId = None

    @property
    def Plugins(self):
        """Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebAppPluginInfo
        """
        return self._Plugins

    @Plugins.setter
    def Plugins(self, Plugins):
        self._Plugins = Plugins

    @property
    def Total(self):
        """Total number of partitions
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Plugins") is not None:
            self._Plugins = []
            for item in params.get("Plugins"):
                obj = AssetWebAppPluginInfo()
                obj._deserialize(item)
                self._Plugins.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetWebFrameCountRequest(AbstractModel):
    """DescribeAssetWebFrameCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Return a list of all Web frameworks containing Name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Return a list of all Web frameworks containing Name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebFrameCountResponse(AbstractModel):
    """DescribeAssetWebFrameCount response structure.

    """

    def __init__(self):
        r"""
        :param _WebFrames: Number of individual Web frameworks
        :type WebFrames: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebFrames = None
        self._RequestId = None

    @property
    def WebFrames(self):
        """Number of individual Web frameworks
        :rtype: list of AssetKeyVal
        """
        return self._WebFrames

    @WebFrames.setter
    def WebFrames(self, WebFrames):
        self._WebFrames = WebFrames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebFrames") is not None:
            self._WebFrames = []
            for item in params.get("WebFrames"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebFrames.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebFrameListRequest(AbstractModel):
    """DescribeAssetWebFrameList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - framework name</li>
<li>NameStrict - String - required: no - framework name (strict match)</li>
<li>Lang - String - required: no - framework language: java/python</li>
<li>Type - String - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os -String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|JarCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - framework name</li>
<li>NameStrict - String - required: no - framework name (strict match)</li>
<li>Lang - String - required: no - framework language: java/python</li>
<li>Type - String - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os -String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|JarCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebFrameListResponse(AbstractModel):
    """DescribeAssetWebFrameList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _WebFrames: Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebFrames: list of AssetWebFrameBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._WebFrames = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def WebFrames(self):
        """Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebFrameBaseInfo
        """
        return self._WebFrames

    @WebFrames.setter
    def WebFrames(self, WebFrames):
        self._WebFrames = WebFrames

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("WebFrames") is not None:
            self._WebFrames = []
            for item in params.get("WebFrames"):
                obj = AssetWebFrameBaseInfo()
                obj._deserialize(item)
                self._WebFrames.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebLocationCountRequest(AbstractModel):
    """DescribeAssetWebLocationCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: return a list of all web sites whose names contain Name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: return a list of all web sites whose names contain Name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebLocationCountResponse(AbstractModel):
    """DescribeAssetWebLocationCount response structure.

    """

    def __init__(self):
        r"""
        :param _WebLocations: Number of individual Web sites
        :type WebLocations: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebLocations = None
        self._RequestId = None

    @property
    def WebLocations(self):
        """Number of individual Web sites
        :rtype: list of AssetKeyVal
        """
        return self._WebLocations

    @WebLocations.setter
    def WebLocations(self, WebLocations):
        self._WebLocations = WebLocations

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebLocations") is not None:
            self._WebLocations = []
            for item in params.get("WebLocations"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebLocations.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebLocationInfoRequest(AbstractModel):
    """DescribeAssetWebLocationInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Id: Site ID
        :type Id: str
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Site ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebLocationInfoResponse(AbstractModel):
    """DescribeAssetWebLocationInfo response structure.

    """

    def __init__(self):
        r"""
        :param _WebLocation: Site information
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebLocation: :class:`tencentcloud.cwp.v20180228.models.AssetWebLocationInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebLocation = None
        self._RequestId = None

    @property
    def WebLocation(self):
        """Site information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AssetWebLocationInfo`
        """
        return self._WebLocation

    @WebLocation.setter
    def WebLocation(self, WebLocation):
        self._WebLocation = WebLocation

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebLocation") is not None:
            self._WebLocation = AssetWebLocationInfo()
            self._WebLocation._deserialize(params.get("WebLocation"))
        self._RequestId = params.get("RequestId")


class DescribeAssetWebLocationListRequest(AbstractModel):
    """DescribeAssetWebLocationList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - domain name</li>
<li>User - String - required: no - running user</li>
<li>Port - uint64 - required: no - site port</li>
<li>Proto - uint64 - required: no - site protocol: 1: HTTP; 2: HTTPS</li><li>ServiceType - uint64 - required: no - service type:
1:Tomcat
2: Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :type Filters: list of Filter
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|PathCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Name - String - required: no - domain name</li>
<li>User - String - required: no - running user</li>
<li>Port - uint64 - required: no - site port</li>
<li>Proto - uint64 - required: no - site protocol: 1: HTTP; 2: HTTPS</li><li>ServiceType - uint64 - required: no - service type:
1:Tomcat
2: Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
<li>Os - String required: no - operating system (value of DescribeMachineOsList)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|PathCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebLocationListResponse(AbstractModel):
    """DescribeAssetWebLocationList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number of records
        :type Total: int
        :param _Locations: Site list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Locations: list of AssetWebLocationBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Locations = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number of records
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Locations(self):
        """Site list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebLocationBaseInfo
        """
        return self._Locations

    @Locations.setter
    def Locations(self, Locations):
        self._Locations = Locations

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Locations") is not None:
            self._Locations = []
            for item in params.get("Locations"):
                obj = AssetWebLocationBaseInfo()
                obj._deserialize(item)
                self._Locations.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebLocationPathListRequest(AbstractModel):
    """DescribeAssetWebLocationPathList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Id: Web site ID
        :type Id: str
        :param _Limit: Number of returned lists. It is 10 by default, and the maximum number is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None
        self._Limit = None
        self._Offset = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Web site ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Limit(self):
        """Number of returned lists. It is 10 by default, and the maximum number is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebLocationPathListResponse(AbstractModel):
    """DescribeAssetWebLocationPathList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type Total: int
        :param _Paths: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Paths: list of AssetWebLocationPath
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._Paths = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Paths(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebLocationPath
        """
        return self._Paths

    @Paths.setter
    def Paths(self, Paths):
        self._Paths = Paths

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Paths") is not None:
            self._Paths = []
            for item in params.get("Paths"):
                obj = AssetWebLocationPath()
                obj._deserialize(item)
                self._Paths.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebServiceCountRequest(AbstractModel):
    """DescribeAssetWebServiceCount request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Search criteria: Return a list of all Web services containing Name in the name.
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        """Search criteria: Return a list of all Web services containing Name in the name.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebServiceCountResponse(AbstractModel):
    """DescribeAssetWebServiceCount response structure.

    """

    def __init__(self):
        r"""
        :param _WebServices: Number of web services
        :type WebServices: list of AssetKeyVal
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebServices = None
        self._RequestId = None

    @property
    def WebServices(self):
        """Number of web services
        :rtype: list of AssetKeyVal
        """
        return self._WebServices

    @WebServices.setter
    def WebServices(self, WebServices):
        self._WebServices = WebServices

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebServices") is not None:
            self._WebServices = []
            for item in params.get("WebServices"):
                obj = AssetKeyVal()
                obj._deserialize(item)
                self._WebServices.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetWebServiceInfoListRequest(AbstractModel):
    """DescribeAssetWebServiceInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>User - string - required: no - running user</li>
<li>Name - string - required: no - Web service name:</li>
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - string - required: no - Windows/Linux</li>
<li>Os -String required: no - operating system (the value of DescribeMachineOsList API)</li>
        :type Filters: list of AssetFilters
        :param _Offset: Offset, which is 0 by default.
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FirstTime|ProcessCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>User - string - required: no - running user</li>
<li>Name - string - required: no - Web service name:</li>
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - string - required: no - Windows/Linux</li>
<li>Os -String required: no - operating system (the value of DescribeMachineOsList API)</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which is 0 by default.
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FirstTime|ProcessCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebServiceInfoListResponse(AbstractModel):
    """DescribeAssetWebServiceInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _WebServices: List
Note: This field may return null, indicating that no valid values can be obtained.
        :type WebServices: list of AssetWebServiceBaseInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WebServices = None
        self._Total = None
        self._RequestId = None

    @property
    def WebServices(self):
        """List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetWebServiceBaseInfo
        """
        return self._WebServices

    @WebServices.setter
    def WebServices(self, WebServices):
        self._WebServices = WebServices

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WebServices") is not None:
            self._WebServices = []
            for item in params.get("WebServices"):
                obj = AssetWebServiceBaseInfo()
                obj._deserialize(item)
                self._WebServices.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAssetWebServiceProcessListRequest(AbstractModel):
    """DescribeAssetWebServiceProcessList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Id: Web service ID
        :type Id: str
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Web service ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebServiceProcessListResponse(AbstractModel):
    """DescribeAssetWebServiceProcessList response structure.

    """

    def __init__(self):
        r"""
        :param _Process: Process list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Process: list of AssetAppProcessInfo
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Process = None
        self._Total = None
        self._RequestId = None

    @property
    def Process(self):
        """Process list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AssetAppProcessInfo
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Process") is not None:
            self._Process = []
            for item in params.get("Process"):
                obj = AssetAppProcessInfo()
                obj._deserialize(item)
                self._Process.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeAttackEventInfoRequest(AbstractModel):
    """DescribeAttackEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackEventInfoResponse(AbstractModel):
    """DescribeAttackEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _NetAttackEventInfo: Network attack event details
        :type NetAttackEventInfo: :class:`tencentcloud.cwp.v20180228.models.NetAttackEventInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NetAttackEventInfo = None
        self._RequestId = None

    @property
    def NetAttackEventInfo(self):
        """Network attack event details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.NetAttackEventInfo`
        """
        return self._NetAttackEventInfo

    @NetAttackEventInfo.setter
    def NetAttackEventInfo(self, NetAttackEventInfo):
        self._NetAttackEventInfo = NetAttackEventInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NetAttackEventInfo") is not None:
            self._NetAttackEventInfo = NetAttackEventInfo()
            self._NetAttackEventInfo._deserialize(params.get("NetAttackEventInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAttackEventsRequest(AbstractModel):
    """DescribeAttackEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters:  Filter criteria
<li>Type - String attack status. 0: attempted attack; 1: attack succeeded - required: no</li>
<li>Status - String event processing status: 0: pending 1: processed; 2: allowlisted; 3: ignored; 4: deleted - required: no</li>
<li>SrcIP - String source IP - required: no</li>
<li>Uuids - String CWPP UUID - required: no</li>
<li>Quuids - String CVM UUID - required: no</li>
<li>DstPort - String attack target port - required: no</li>
<li>MachineName - String host name - required: no</li>
<li>InstanceID - String host instance ID - required: no</li>
<li>AttackTimeBegin - String attack start time - required: no</li>
<li>AttackTimeEnd - String attack end time - required: no</li>
<li>VulSupportDefense - String: whether the vulnerability can be defended: 0: no;1: yes - required: no</li>

        :type Filters: list of Filter
        :param _By: Sort
        :type By: str
        :param _Order: Sorting method: ASC, DESC
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        """Number of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """ Filter criteria
<li>Type - String attack status. 0: attempted attack; 1: attack succeeded - required: no</li>
<li>Status - String event processing status: 0: pending 1: processed; 2: allowlisted; 3: ignored; 4: deleted - required: no</li>
<li>SrcIP - String source IP - required: no</li>
<li>Uuids - String CWPP UUID - required: no</li>
<li>Quuids - String CVM UUID - required: no</li>
<li>DstPort - String attack target port - required: no</li>
<li>MachineName - String host name - required: no</li>
<li>InstanceID - String host instance ID - required: no</li>
<li>AttackTimeBegin - String attack start time - required: no</li>
<li>AttackTimeEnd - String attack end time - required: no</li>
<li>VulSupportDefense - String: whether the vulnerability can be defended: 0: no;1: yes - required: no</li>

        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        """Sort
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        """Sorting method: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackEventsResponse(AbstractModel):
    """DescribeAttackEvents response structure.

    """

    def __init__(self):
        r"""
        :param _List: Attack Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of NetAttackEvent
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Attack Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetAttackEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = NetAttackEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAttackLogsRequest(AbstractModel):
    """DescribeAttackLogs request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>HttpMethod - String - required: no - attack method (POST|GET)</li>
<li>DateRange - String - required: no - timeframe (store data from the past 3 months), such as the last month ["2019-11-17", "2019-12-17"]</li>
<li>VulType - String threat type - required: no</li>
<li>SrcIp - String attack source IP - required: no</li>
<li>DstIp - String attack target IP - required: no</li>
<li>SrcPort - String attack source port - required: no</li>
<li>DstPort - String attack target port - required: no</li>
        :type Filters: list of Filter
        :param _Uuid: CWPP client ID
        :type Uuid: str
        :param _Quuid: CVM machine ID
        :type Quuid: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Uuid = None
        self._Quuid = None

    @property
    def Limit(self):
        """Number of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>HttpMethod - String - required: no - attack method (POST|GET)</li>
<li>DateRange - String - required: no - timeframe (store data from the past 3 months), such as the last month ["2019-11-17", "2019-12-17"]</li>
<li>VulType - String threat type - required: no</li>
<li>SrcIp - String attack source IP - required: no</li>
<li>DstIp - String attack target IP - required: no</li>
<li>SrcPort - String attack source port - required: no</li>
<li>DstPort - String attack target port - required: no</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Uuid(self):
        """CWPP client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """CVM machine ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackLogsResponse(AbstractModel):
    """DescribeAttackLogs response structure.

    """

    def __init__(self):
        r"""
        :param _AttackLogs: Log list
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackLogs: list of DefendAttackLog
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AttackLogs = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AttackLogs(self):
        """Log list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of DefendAttackLog
        """
        return self._AttackLogs

    @AttackLogs.setter
    def AttackLogs(self, AttackLogs):
        self._AttackLogs = AttackLogs

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AttackLogs") is not None:
            self._AttackLogs = []
            for item in params.get("AttackLogs"):
                obj = DefendAttackLog()
                obj._deserialize(item)
                self._AttackLogs.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAttackSourceEventsRequest(AbstractModel):
    """DescribeAttackSourceEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _BeginDate: Start date
        :type BeginDate: str
        :param _EndDate: End date
        :type EndDate: str
        :param _EventInfoParam: EventInfoParam returned by DescribeAttackSource API
        :type EventInfoParam: str
        :param _Limit: Maximum number of paginations, which is 10 by default.
        :type Limit: int
        :param _Offset: Starting step size, which is 0 by default.
        :type Offset: int
        """
        self._Uuid = None
        self._BeginDate = None
        self._EndDate = None
        self._EventInfoParam = None
        self._Limit = None
        self._Offset = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def BeginDate(self):
        """Start date
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End date
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate

    @property
    def EventInfoParam(self):
        """EventInfoParam returned by DescribeAttackSource API
        :rtype: str
        """
        return self._EventInfoParam

    @EventInfoParam.setter
    def EventInfoParam(self, EventInfoParam):
        self._EventInfoParam = EventInfoParam

    @property
    def Limit(self):
        """Maximum number of paginations, which is 10 by default.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Starting step size, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        self._EventInfoParam = params.get("EventInfoParam")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackSourceEventsResponse(AbstractModel):
    """DescribeAttackSourceEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: Attack tracing event list
        :type List: list of AttackSourceEvent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Attack tracing event list
        :rtype: list of AttackSourceEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AttackSourceEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAttackSourceRequest(AbstractModel):
    """DescribeAttackSource request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _BeginDate: Start date
        :type BeginDate: str
        :param _EndDate: End date
        :type EndDate: str
        """
        self._Uuid = None
        self._BeginDate = None
        self._EndDate = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def BeginDate(self):
        """Start date
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End date
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackSourceResponse(AbstractModel):
    """DescribeAttackSource response structure.

    """

    def __init__(self):
        r"""
        :param _AttackSource: Attack backtracking data
        :type AttackSource: :class:`tencentcloud.cwp.v20180228.models.AttackSource`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AttackSource = None
        self._RequestId = None

    @property
    def AttackSource(self):
        """Attack backtracking data
        :rtype: :class:`tencentcloud.cwp.v20180228.models.AttackSource`
        """
        return self._AttackSource

    @AttackSource.setter
    def AttackSource(self, AttackSource):
        self._AttackSource = AttackSource

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AttackSource") is not None:
            self._AttackSource = AttackSource()
            self._AttackSource._deserialize(params.get("AttackSource"))
        self._RequestId = params.get("RequestId")


class DescribeAttackStatisticsRequest(AbstractModel):
    """DescribeAttackStatistics request structure.

    """


class DescribeAttackStatisticsResponse(AbstractModel):
    """DescribeAttackStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _PendingAttackCount: Total Number of Attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :type PendingAttackCount: int
        :param _PendingTryAttackCount: Total Attack Attempts
Note: This field may return null, indicating that no valid values can be obtained.
        :type PendingTryAttackCount: int
        :param _PendingSuccAttackCount: Total Number of Successful Attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :type PendingSuccAttackCount: int
        :param _PendingNewAttackCount: Number of New Attacks Today
Note: This field may return null, indicating that no valid values can be obtained.
        :type PendingNewAttackCount: int
        :param _AttackedAssetCount: Total Number of Assets Under Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackedAssetCount: int
        :param _NewAttackedAssetCount: Number of New Attacked Assets Today
Note: This field may return null, indicating that no valid values can be obtained.
        :type NewAttackedAssetCount: int
        :param _AttackedPortCount: Total Number of Attacked Ports
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackedPortCount: int
        :param _NewAttackedPortCount: Number of New Attacked Ports Today
Note: This field may return null, indicating that no valid values can be obtained.
        :type NewAttackedPortCount: int
        :param _AttackSrcIpCount: Total Number of Attack Source IPs
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackSrcIpCount: int
        :param _NewAttackSrcIpCount: Number of New Attacking Source IPs Today
Note: This field may return null, indicating that no valid values can be obtained.
        :type NewAttackSrcIpCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PendingAttackCount = None
        self._PendingTryAttackCount = None
        self._PendingSuccAttackCount = None
        self._PendingNewAttackCount = None
        self._AttackedAssetCount = None
        self._NewAttackedAssetCount = None
        self._AttackedPortCount = None
        self._NewAttackedPortCount = None
        self._AttackSrcIpCount = None
        self._NewAttackSrcIpCount = None
        self._RequestId = None

    @property
    def PendingAttackCount(self):
        """Total Number of Attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PendingAttackCount

    @PendingAttackCount.setter
    def PendingAttackCount(self, PendingAttackCount):
        self._PendingAttackCount = PendingAttackCount

    @property
    def PendingTryAttackCount(self):
        """Total Attack Attempts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PendingTryAttackCount

    @PendingTryAttackCount.setter
    def PendingTryAttackCount(self, PendingTryAttackCount):
        self._PendingTryAttackCount = PendingTryAttackCount

    @property
    def PendingSuccAttackCount(self):
        """Total Number of Successful Attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PendingSuccAttackCount

    @PendingSuccAttackCount.setter
    def PendingSuccAttackCount(self, PendingSuccAttackCount):
        self._PendingSuccAttackCount = PendingSuccAttackCount

    @property
    def PendingNewAttackCount(self):
        """Number of New Attacks Today
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PendingNewAttackCount

    @PendingNewAttackCount.setter
    def PendingNewAttackCount(self, PendingNewAttackCount):
        self._PendingNewAttackCount = PendingNewAttackCount

    @property
    def AttackedAssetCount(self):
        """Total Number of Assets Under Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackedAssetCount

    @AttackedAssetCount.setter
    def AttackedAssetCount(self, AttackedAssetCount):
        self._AttackedAssetCount = AttackedAssetCount

    @property
    def NewAttackedAssetCount(self):
        """Number of New Attacked Assets Today
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NewAttackedAssetCount

    @NewAttackedAssetCount.setter
    def NewAttackedAssetCount(self, NewAttackedAssetCount):
        self._NewAttackedAssetCount = NewAttackedAssetCount

    @property
    def AttackedPortCount(self):
        """Total Number of Attacked Ports
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackedPortCount

    @AttackedPortCount.setter
    def AttackedPortCount(self, AttackedPortCount):
        self._AttackedPortCount = AttackedPortCount

    @property
    def NewAttackedPortCount(self):
        """Number of New Attacked Ports Today
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NewAttackedPortCount

    @NewAttackedPortCount.setter
    def NewAttackedPortCount(self, NewAttackedPortCount):
        self._NewAttackedPortCount = NewAttackedPortCount

    @property
    def AttackSrcIpCount(self):
        """Total Number of Attack Source IPs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackSrcIpCount

    @AttackSrcIpCount.setter
    def AttackSrcIpCount(self, AttackSrcIpCount):
        self._AttackSrcIpCount = AttackSrcIpCount

    @property
    def NewAttackSrcIpCount(self):
        """Number of New Attacking Source IPs Today
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NewAttackSrcIpCount

    @NewAttackSrcIpCount.setter
    def NewAttackSrcIpCount(self, NewAttackSrcIpCount):
        self._NewAttackSrcIpCount = NewAttackSrcIpCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PendingAttackCount = params.get("PendingAttackCount")
        self._PendingTryAttackCount = params.get("PendingTryAttackCount")
        self._PendingSuccAttackCount = params.get("PendingSuccAttackCount")
        self._PendingNewAttackCount = params.get("PendingNewAttackCount")
        self._AttackedAssetCount = params.get("AttackedAssetCount")
        self._NewAttackedAssetCount = params.get("NewAttackedAssetCount")
        self._AttackedPortCount = params.get("AttackedPortCount")
        self._NewAttackedPortCount = params.get("NewAttackedPortCount")
        self._AttackSrcIpCount = params.get("AttackSrcIpCount")
        self._NewAttackSrcIpCount = params.get("NewAttackSrcIpCount")
        self._RequestId = params.get("RequestId")


class DescribeAttackTopRequest(AbstractModel):
    """DescribeAttackTop request structure.

    """

    def __init__(self):
        r"""
        :param _Filters:  Filter criteria
<li>BeginTime - String - start time, defaulted to last 7 days - required: no</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """ Filter criteria
<li>BeginTime - String - start time, defaulted to last 7 days - required: no</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackTopResponse(AbstractModel):
    """DescribeAttackTop response structure.

    """

    def __init__(self):
        r"""
        :param _NetAttackTopInfo: Top Statistics
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetAttackTopInfo: :class:`tencentcloud.cwp.v20180228.models.NetAttackTopInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NetAttackTopInfo = None
        self._RequestId = None

    @property
    def NetAttackTopInfo(self):
        """Top Statistics
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.NetAttackTopInfo`
        """
        return self._NetAttackTopInfo

    @NetAttackTopInfo.setter
    def NetAttackTopInfo(self, NetAttackTopInfo):
        self._NetAttackTopInfo = NetAttackTopInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NetAttackTopInfo") is not None:
            self._NetAttackTopInfo = NetAttackTopInfo()
            self._NetAttackTopInfo._deserialize(params.get("NetAttackTopInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAttackTrendsRequest(AbstractModel):
    """DescribeAttackTrends request structure.

    """

    def __init__(self):
        r"""
        :param _Filters:  Filter criteria
<li>BeginTime - String start time, default: last 7 days - required: no</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """ Filter criteria
<li>BeginTime - String start time, default: last 7 days - required: no</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAttackTrendsResponse(AbstractModel):
    """DescribeAttackTrends response structure.

    """

    def __init__(self):
        r"""
        :param _NetAttackTrend: Attack Trend Statistics (Days)
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetAttackTrend: list of NetAttackTrend
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NetAttackTrend = None
        self._RequestId = None

    @property
    def NetAttackTrend(self):
        """Attack Trend Statistics (Days)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetAttackTrend
        """
        return self._NetAttackTrend

    @NetAttackTrend.setter
    def NetAttackTrend(self, NetAttackTrend):
        self._NetAttackTrend = NetAttackTrend

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NetAttackTrend") is not None:
            self._NetAttackTrend = []
            for item in params.get("NetAttackTrend"):
                obj = NetAttackTrend()
                obj._deserialize(item)
                self._NetAttackTrend.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAttackVulTypeListRequest(AbstractModel):
    """DescribeAttackVulTypeList request structure.

    """


class DescribeAttackVulTypeListResponse(AbstractModel):
    """DescribeAttackVulTypeList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Threat type list
        :type List: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Threat type list
        :rtype: list of str
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._List = params.get("List")
        self._RequestId = params.get("RequestId")


class DescribeAvailableExpertServiceDetailRequest(AbstractModel):
    """DescribeAvailableExpertServiceDetail request structure.

    """


class DescribeAvailableExpertServiceDetailResponse(AbstractModel):
    """DescribeAvailableExpertServiceDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ExpertService: Security manager order
        :type ExpertService: list of ExpertServiceOrderInfo
        :param _EmergencyResponse: Number of available emergency responses
        :type EmergencyResponse: int
        :param _ProtectNet: 
        :type ProtectNet: int
        :param _ExpertServiceBuy: Whether you purchased security manager
        :type ExpertServiceBuy: bool
        :param _EmergencyResponseBuy: Whether you purchased emergency response
        :type EmergencyResponseBuy: bool
        :param _ProtectNetBuy: 
        :type ProtectNetBuy: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ExpertService = None
        self._EmergencyResponse = None
        self._ProtectNet = None
        self._ExpertServiceBuy = None
        self._EmergencyResponseBuy = None
        self._ProtectNetBuy = None
        self._RequestId = None

    @property
    def ExpertService(self):
        """Security manager order
        :rtype: list of ExpertServiceOrderInfo
        """
        return self._ExpertService

    @ExpertService.setter
    def ExpertService(self, ExpertService):
        self._ExpertService = ExpertService

    @property
    def EmergencyResponse(self):
        """Number of available emergency responses
        :rtype: int
        """
        return self._EmergencyResponse

    @EmergencyResponse.setter
    def EmergencyResponse(self, EmergencyResponse):
        self._EmergencyResponse = EmergencyResponse

    @property
    def ProtectNet(self):
        """
        :rtype: int
        """
        return self._ProtectNet

    @ProtectNet.setter
    def ProtectNet(self, ProtectNet):
        self._ProtectNet = ProtectNet

    @property
    def ExpertServiceBuy(self):
        """Whether you purchased security manager
        :rtype: bool
        """
        return self._ExpertServiceBuy

    @ExpertServiceBuy.setter
    def ExpertServiceBuy(self, ExpertServiceBuy):
        self._ExpertServiceBuy = ExpertServiceBuy

    @property
    def EmergencyResponseBuy(self):
        """Whether you purchased emergency response
        :rtype: bool
        """
        return self._EmergencyResponseBuy

    @EmergencyResponseBuy.setter
    def EmergencyResponseBuy(self, EmergencyResponseBuy):
        self._EmergencyResponseBuy = EmergencyResponseBuy

    @property
    def ProtectNetBuy(self):
        """
        :rtype: bool
        """
        return self._ProtectNetBuy

    @ProtectNetBuy.setter
    def ProtectNetBuy(self, ProtectNetBuy):
        self._ProtectNetBuy = ProtectNetBuy

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ExpertService") is not None:
            self._ExpertService = []
            for item in params.get("ExpertService"):
                obj = ExpertServiceOrderInfo()
                obj._deserialize(item)
                self._ExpertService.append(obj)
        self._EmergencyResponse = params.get("EmergencyResponse")
        self._ProtectNet = params.get("ProtectNet")
        self._ExpertServiceBuy = params.get("ExpertServiceBuy")
        self._EmergencyResponseBuy = params.get("EmergencyResponseBuy")
        self._ProtectNetBuy = params.get("ProtectNetBuy")
        self._RequestId = params.get("RequestId")


class DescribeBanModeRequest(AbstractModel):
    """DescribeBanMode request structure.

    """


class DescribeBanModeResponse(AbstractModel):
    """DescribeBanMode response structure.

    """

    def __init__(self):
        r"""
        :param _Mode: Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :type Mode: str
        :param _StandardModeConfig: Configuration of the standard blocking mode
        :type StandardModeConfig: :class:`tencentcloud.cwp.v20180228.models.StandardModeConfig`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Mode = None
        self._StandardModeConfig = None
        self._RequestId = None

    @property
    def Mode(self):
        """Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def StandardModeConfig(self):
        """Configuration of the standard blocking mode
        :rtype: :class:`tencentcloud.cwp.v20180228.models.StandardModeConfig`
        """
        return self._StandardModeConfig

    @StandardModeConfig.setter
    def StandardModeConfig(self, StandardModeConfig):
        self._StandardModeConfig = StandardModeConfig

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Mode = params.get("Mode")
        if params.get("StandardModeConfig") is not None:
            self._StandardModeConfig = StandardModeConfig()
            self._StandardModeConfig._deserialize(params.get("StandardModeConfig"))
        self._RequestId = params.get("RequestId")


class DescribeBanRegionsRequest(AbstractModel):
    """DescribeBanRegions request structure.

    """

    def __init__(self):
        r"""
        :param _Mode: Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :type Mode: str
        """
        self._Mode = None

    @property
    def Mode(self):
        """Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode


    def _deserialize(self, params):
        self._Mode = params.get("Mode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBanRegionsResponse(AbstractModel):
    """DescribeBanRegions response structure.

    """

    def __init__(self):
        r"""
        :param _RegionSet: Region information list
        :type RegionSet: list of RegionSet
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RegionSet = None
        self._RequestId = None

    @property
    def RegionSet(self):
        """Region information list
        :rtype: list of RegionSet
        """
        return self._RegionSet

    @RegionSet.setter
    def RegionSet(self, RegionSet):
        self._RegionSet = RegionSet

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RegionSet") is not None:
            self._RegionSet = []
            for item in params.get("RegionSet"):
                obj = RegionSet()
                obj._deserialize(item)
                self._RegionSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBanStatusRequest(AbstractModel):
    """DescribeBanStatus request structure.

    """


class DescribeBanStatusResponse(AbstractModel):
    """DescribeBanStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Blocking enabling status:
0: disabled 
1: advanced blocking
2: basic blocking (block only malicious IP addresses in the intelligence database)
        :type Status: int
        :param _ShowTips: Whether to display the pop-up prompt. False: no; true: yes.
        :type ShowTips: bool
        :param _OpenSmartMode: Whether to enable intelligent over-allowing mode
        :type OpenSmartMode: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._ShowTips = None
        self._OpenSmartMode = None
        self._RequestId = None

    @property
    def Status(self):
        """Blocking enabling status:
0: disabled 
1: advanced blocking
2: basic blocking (block only malicious IP addresses in the intelligence database)
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ShowTips(self):
        """Whether to display the pop-up prompt. False: no; true: yes.
        :rtype: bool
        """
        return self._ShowTips

    @ShowTips.setter
    def ShowTips(self, ShowTips):
        self._ShowTips = ShowTips

    @property
    def OpenSmartMode(self):
        """Whether to enable intelligent over-allowing mode
        :rtype: bool
        """
        return self._OpenSmartMode

    @OpenSmartMode.setter
    def OpenSmartMode(self, OpenSmartMode):
        self._OpenSmartMode = OpenSmartMode

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._ShowTips = params.get("ShowTips")
        self._OpenSmartMode = params.get("OpenSmartMode")
        self._RequestId = params.get("RequestId")


class DescribeBanWhiteListRequest(AbstractModel):
    """DescribeBanWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Quantity of returns. The maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - query by keywords</li>
        :type Filters: list of Filter
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Quantity of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - query by keywords</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBanWhiteListResponse(AbstractModel):
    """DescribeBanWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _WhiteList: Allowlist
        :type WhiteList: list of BanWhiteListDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._WhiteList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def WhiteList(self):
        """Allowlist
        :rtype: list of BanWhiteListDetail
        """
        return self._WhiteList

    @WhiteList.setter
    def WhiteList(self, WhiteList):
        self._WhiteList = WhiteList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("WhiteList") is not None:
            self._WhiteList = []
            for item in params.get("WhiteList"):
                obj = BanWhiteListDetail()
                obj._deserialize(item)
                self._WhiteList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineBasicInfoRequest(AbstractModel):
    """DescribeBaselineBasicInfo request structure.

    """

    def __init__(self):
        r"""
        :param _BaselineName: Baseline name
        :type BaselineName: str
        """
        self._BaselineName = None

    @property
    def BaselineName(self):
        """Baseline name
        :rtype: str
        """
        return self._BaselineName

    @BaselineName.setter
    def BaselineName(self, BaselineName):
        self._BaselineName = BaselineName


    def _deserialize(self, params):
        self._BaselineName = params.get("BaselineName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineBasicInfoResponse(AbstractModel):
    """DescribeBaselineBasicInfo response structure.

    """

    def __init__(self):
        r"""
        :param _BaselineBasicInfoList: Baseline basic information list
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineBasicInfoList: list of BaselineBasicInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BaselineBasicInfoList = None
        self._RequestId = None

    @property
    def BaselineBasicInfoList(self):
        """Baseline basic information list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineBasicInfo
        """
        return self._BaselineBasicInfoList

    @BaselineBasicInfoList.setter
    def BaselineBasicInfoList(self, BaselineBasicInfoList):
        self._BaselineBasicInfoList = BaselineBasicInfoList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BaselineBasicInfoList") is not None:
            self._BaselineBasicInfoList = []
            for item in params.get("BaselineBasicInfoList"):
                obj = BaselineBasicInfo()
                obj._deserialize(item)
                self._BaselineBasicInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineDefaultStrategyListRequest(AbstractModel):
    """DescribeBaselineDefaultStrategyList request structure.

    """


class DescribeBaselineDefaultStrategyListResponse(AbstractModel):
    """DescribeBaselineDefaultStrategyList response structure.

    """

    def __init__(self):
        r"""
        :param _StrategyList: List of the basic default policy information
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyList: list of DefaultStrategyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._StrategyList = None
        self._RequestId = None

    @property
    def StrategyList(self):
        """List of the basic default policy information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of DefaultStrategyInfo
        """
        return self._StrategyList

    @StrategyList.setter
    def StrategyList(self, StrategyList):
        self._StrategyList = StrategyList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("StrategyList") is not None:
            self._StrategyList = []
            for item in params.get("StrategyList"):
                obj = DefaultStrategyInfo()
                obj._deserialize(item)
                self._StrategyList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineDetailRequest(AbstractModel):
    """DescribeBaselineDetail request structure.

    """

    def __init__(self):
        r"""
        :param _BaselineId: Baseline ID
        :type BaselineId: int
        """
        self._BaselineId = None

    @property
    def BaselineId(self):
        """Baseline ID
        :rtype: int
        """
        return self._BaselineId

    @BaselineId.setter
    def BaselineId(self, BaselineId):
        self._BaselineId = BaselineId


    def _deserialize(self, params):
        self._BaselineId = params.get("BaselineId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineDetailResponse(AbstractModel):
    """DescribeBaselineDetail response structure.

    """

    def __init__(self):
        r"""
        :param _BaselineDetail: Baseline details
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineDetail: :class:`tencentcloud.cwp.v20180228.models.BaselineDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BaselineDetail = None
        self._RequestId = None

    @property
    def BaselineDetail(self):
        """Baseline details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BaselineDetail`
        """
        return self._BaselineDetail

    @BaselineDetail.setter
    def BaselineDetail(self, BaselineDetail):
        self._BaselineDetail = BaselineDetail

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BaselineDetail") is not None:
            self._BaselineDetail = BaselineDetail()
            self._BaselineDetail._deserialize(params.get("BaselineDetail"))
        self._RequestId = params.get("RequestId")


class DescribeBaselineEffectHostListRequest(AbstractModel):
    """DescribeBaselineEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum number is 100.)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _BaselineId: Baseline ID
        :type BaselineId: int
        :param _Filters: Filter criteria
<li>AliasName - String - host alias</li>
<li>Status- Uint: 1 - passed; 0 - failed; 5 - under detection</li>
        :type Filters: list of Filters
        :param _StrategyId: Policy ID
        :type StrategyId: int
        :param _UuidList: Host UUID array
        :type UuidList: list of str
        """
        self._Limit = None
        self._Offset = None
        self._BaselineId = None
        self._Filters = None
        self._StrategyId = None
        self._UuidList = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum number is 100.)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def BaselineId(self):
        """Baseline ID
        :rtype: int
        """
        return self._BaselineId

    @BaselineId.setter
    def BaselineId(self, BaselineId):
        self._BaselineId = BaselineId

    @property
    def Filters(self):
        """Filter criteria
<li>AliasName - String - host alias</li>
<li>Status- Uint: 1 - passed; 0 - failed; 5 - under detection</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def UuidList(self):
        """Host UUID array
        :rtype: list of str
        """
        return self._UuidList

    @UuidList.setter
    def UuidList(self, UuidList):
        self._UuidList = UuidList


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._BaselineId = params.get("BaselineId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._StrategyId = params.get("StrategyId")
        self._UuidList = params.get("UuidList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineEffectHostListResponse(AbstractModel):
    """DescribeBaselineEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _EffectHostList: List of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :type EffectHostList: list of BaselineEffectHost
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._EffectHostList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EffectHostList(self):
        """List of affected servers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineEffectHost
        """
        return self._EffectHostList

    @EffectHostList.setter
    def EffectHostList(self, EffectHostList):
        self._EffectHostList = EffectHostList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EffectHostList") is not None:
            self._EffectHostList = []
            for item in params.get("EffectHostList"):
                obj = BaselineEffectHost()
                obj._deserialize(item)
                self._EffectHostList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineHostDetectListRequest(AbstractModel):
    """DescribeBaselineHostDetectList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>PolicyId - int64 - required: no - policy ID</li>
</li>HostName - string - required: no - host name</i>
<li>HostIp - string - required: no - host IP</i>
<li>ItemId - int64 - required: no - item ID</i>
<li>RuleId - int64 - required: no - rule ID</li>
<li>DetectStatus - int - required: no - detection status</li>
<li>Level - int - required: no - risk level<li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional Order Column: [LastTime|ItemCount|PassedItemCount|NotPassedItemCount|FirstTime]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>PolicyId - int64 - required: no - policy ID</li>
</li>HostName - string - required: no - host name</i>
<li>HostIp - string - required: no - host IP</i>
<li>ItemId - int64 - required: no - item ID</i>
<li>RuleId - int64 - required: no - rule ID</li>
<li>DetectStatus - int - required: no - detection status</li>
<li>Level - int - required: no - risk level<li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional Order Column: [LastTime|ItemCount|PassedItemCount|NotPassedItemCount|FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineHostDetectListResponse(AbstractModel):
    """DescribeBaselineHostDetectList response structure.

    """

    def __init__(self):
        r"""
        :param _List: None
        :type List: list of BaselineHostDetect
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._Total = None
        self._RequestId = None

    @property
    def List(self):
        """None
        :rtype: list of BaselineHostDetect
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BaselineHostDetect()
                obj._deserialize(item)
                self._List.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeBaselineHostTopRequest(AbstractModel):
    """DescribeBaselineHostTop request structure.

    """

    def __init__(self):
        r"""
        :param _Top: Dynamic top value
        :type Top: int
        :param _StrategyId: Policy ID
        :type StrategyId: int
        """
        self._Top = None
        self._StrategyId = None

    @property
    def Top(self):
        """Dynamic top value
        :rtype: int
        """
        return self._Top

    @Top.setter
    def Top(self, Top):
        self._Top = Top

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId


    def _deserialize(self, params):
        self._Top = params.get("Top")
        self._StrategyId = params.get("StrategyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineHostTopResponse(AbstractModel):
    """DescribeBaselineHostTop response structure.

    """

    def __init__(self):
        r"""
        :param _BaselineHostTopList: Top host baseline policy events
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineHostTopList: list of BaselineHostTopList
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BaselineHostTopList = None
        self._RequestId = None

    @property
    def BaselineHostTopList(self):
        """Top host baseline policy events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineHostTopList
        """
        return self._BaselineHostTopList

    @BaselineHostTopList.setter
    def BaselineHostTopList(self, BaselineHostTopList):
        self._BaselineHostTopList = BaselineHostTopList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BaselineHostTopList") is not None:
            self._BaselineHostTopList = []
            for item in params.get("BaselineHostTopList"):
                obj = BaselineHostTopList()
                obj._deserialize(item)
                self._BaselineHostTopList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineItemDetectListRequest(AbstractModel):
    """DescribeBaselineItemDetectList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>HostId - string - required: no - host ID</li>
<li>RuleId - int64 - required: no - rule ID</li>
<li>PolicyId - int64 - required: no - policy ID</li>
<li>ItemName - string - required: no - item name</li>
<li>DetectStatus - int - required: no - detection status</li>
<li>Level - int - required: no - risk level</li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting column: [HostCount|FirstTime|LastTime]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>HostId - string - required: no - host ID</li>
<li>RuleId - int64 - required: no - rule ID</li>
<li>PolicyId - int64 - required: no - policy ID</li>
<li>ItemName - string - required: no - item name</li>
<li>DetectStatus - int - required: no - detection status</li>
<li>Level - int - required: no - risk level</li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column: [HostCount|FirstTime|LastTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineItemDetectListResponse(AbstractModel):
    """DescribeBaselineItemDetectList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number
        :type Total: int
        :param _List: None
        :type List: list of BaselineItemDetect
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._List = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def List(self):
        """None
        :rtype: list of BaselineItemDetect
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BaselineItemDetect()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineItemListRequest(AbstractModel):
    """DescribeBaselineItemList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>PolicyId - int64 - required: no - policy ID</li>
<li>RuleId - int64 - required: no - rule ID</li>
<li>HostId - string - required: no - host ID</li>
<li>HostName - string - required: no - host name</li>
<li>HostIp - string - required: no - host IP</li>
<li>ItemId - String - required: no - detection item ID</li>
<li>ItemName - String - required: no - item name</li>
<li>DetectStatus - int - required: no - detection status [0: not passed|3: passed|5: detecting]</li>
<li>Level - int - required: no - risk level</li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting columns
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>PolicyId - int64 - required: no - policy ID</li>
<li>RuleId - int64 - required: no - rule ID</li>
<li>HostId - string - required: no - host ID</li>
<li>HostName - string - required: no - host name</li>
<li>HostIp - string - required: no - host IP</li>
<li>ItemId - String - required: no - detection item ID</li>
<li>ItemName - String - required: no - item name</li>
<li>DetectStatus - int - required: no - detection status [0: not passed|3: passed|5: detecting]</li>
<li>Level - int - required: no - risk level</li>
<li>StartTime - string - required: no - start time</li>
<li>EndTime - string - required: no - end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting columns
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineItemListResponse(AbstractModel):
    """DescribeBaselineItemList response structure.

    """

    def __init__(self):
        r"""
        :param _List: None
        :type List: list of BaselineItem
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._Total = None
        self._RequestId = None

    @property
    def List(self):
        """None
        :rtype: list of BaselineItem
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BaselineItem()
                obj._deserialize(item)
                self._List.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeBaselineListRequest(AbstractModel):
    """DescribeBaselineList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameter, indicating the number of entries per page. Maximum value: 100.
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filtering criteria
<li>StrategyId - Uint64 - baseline policy ID</li>
<li>Status - Uint64 - processing status: 1: passed; 0: failed</li><li>Level - Uint64[] - risk level: 1: low; 2: medium; 3: high; 4: critical</li><li>BaselineName - String - baseline name</li>
<li>Quuid - String - host QUUID</li>
<li>Uuid - String - host UUID</li>
        :type Filters: list of Filters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Pagination parameter, indicating the number of entries per page. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria
<li>StrategyId - Uint64 - baseline policy ID</li>
<li>Status - Uint64 - processing status: 1: passed; 0: failed</li><li>Level - Uint64[] - risk level: 1: low; 2: medium; 3: high; 4: critical</li><li>BaselineName - String - baseline name</li>
<li>Quuid - String - host QUUID</li>
<li>Uuid - String - host UUID</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineListResponse(AbstractModel):
    """DescribeBaselineList response structure.

    """

    def __init__(self):
        r"""
        :param _BaselineList: List of baseline information
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineList: list of BaselineInfo
        :param _TotalCount: Total number of records for paging query
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BaselineList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def BaselineList(self):
        """List of baseline information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineInfo
        """
        return self._BaselineList

    @BaselineList.setter
    def BaselineList(self, BaselineList):
        self._BaselineList = BaselineList

    @property
    def TotalCount(self):
        """Total number of records for paging query
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BaselineList") is not None:
            self._BaselineList = []
            for item in params.get("BaselineList"):
                obj = BaselineInfo()
                obj._deserialize(item)
                self._BaselineList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeBaselinePolicyListRequest(AbstractModel):
    """DescribeBaselinePolicyList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>PolicyName - String - required: no - policy name</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting column: [RuleCount|ItemCount|HostCount]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>PolicyName - String - required: no - policy name</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column: [RuleCount|ItemCount|HostCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselinePolicyListResponse(AbstractModel):
    """DescribeBaselinePolicyList response structure.

    """

    def __init__(self):
        r"""
        :param _List: None
        :type List: list of BaselinePolicy
        :param _Total: Total number
        :type Total: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._Total = None
        self._RequestId = None

    @property
    def List(self):
        """None
        :rtype: list of BaselinePolicy
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BaselinePolicy()
                obj._deserialize(item)
                self._List.append(obj)
        self._Total = params.get("Total")
        self._RequestId = params.get("RequestId")


class DescribeBaselineRuleRequest(AbstractModel):
    """DescribeBaselineRule request structure.

    """

    def __init__(self):
        r"""
        :param _BaselineId: Baseline ID
        :type BaselineId: int
        :param _Limit: Pagination limit, with the maximum value being 100.
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Level: Severity level
        :type Level: list of int non-negative
        :param _Status: Status
        :type Status: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._BaselineId = None
        self._Limit = None
        self._Offset = None
        self._Level = None
        self._Status = None
        self._Quuid = None
        self._Uuid = None

    @property
    def BaselineId(self):
        """Baseline ID
        :rtype: int
        """
        return self._BaselineId

    @BaselineId.setter
    def BaselineId(self, BaselineId):
        self._BaselineId = BaselineId

    @property
    def Limit(self):
        """Pagination limit, with the maximum value being 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Level(self):
        """Severity level
        :rtype: list of int non-negative
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Status(self):
        """Status
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._BaselineId = params.get("BaselineId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Level = params.get("Level")
        self._Status = params.get("Status")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineRuleResponse(AbstractModel):
    """DescribeBaselineRule response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of pagination query records
        :type TotalCount: int
        :param _BaselineRuleList: Baseline check item list
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineRuleList: list of BaselineRuleInfo
        :param _ShowRuleRemark: Whether to display the description column. True: yes; false: no.Note: This field may return null, indicating that no valid values can be obtained.
        :type ShowRuleRemark: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._BaselineRuleList = None
        self._ShowRuleRemark = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of pagination query records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def BaselineRuleList(self):
        """Baseline check item list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineRuleInfo
        """
        return self._BaselineRuleList

    @BaselineRuleList.setter
    def BaselineRuleList(self, BaselineRuleList):
        self._BaselineRuleList = BaselineRuleList

    @property
    def ShowRuleRemark(self):
        """Whether to display the description column. True: yes; false: no.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._ShowRuleRemark

    @ShowRuleRemark.setter
    def ShowRuleRemark(self, ShowRuleRemark):
        self._ShowRuleRemark = ShowRuleRemark

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("BaselineRuleList") is not None:
            self._BaselineRuleList = []
            for item in params.get("BaselineRuleList"):
                obj = BaselineRuleInfo()
                obj._deserialize(item)
                self._BaselineRuleList.append(obj)
        self._ShowRuleRemark = params.get("ShowRuleRemark")
        self._RequestId = params.get("RequestId")


class DescribeBaselineScanScheduleRequest(AbstractModel):
    """DescribeBaselineScanSchedule request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineScanScheduleResponse(AbstractModel):
    """DescribeBaselineScanSchedule response structure.

    """

    def __init__(self):
        r"""
        :param _Schedule: Check progress (percentage)
Note: This field may return null, indicating that no valid values can be obtained.
        :type Schedule: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Schedule = None
        self._RequestId = None

    @property
    def Schedule(self):
        """Check progress (percentage)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Schedule = params.get("Schedule")
        self._RequestId = params.get("RequestId")


class DescribeBaselineStrategyDetailRequest(AbstractModel):
    """DescribeBaselineStrategyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyId: User baseline policy ID
        :type StrategyId: int
        """
        self._StrategyId = None

    @property
    def StrategyId(self):
        """User baseline policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId


    def _deserialize(self, params):
        self._StrategyId = params.get("StrategyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineStrategyDetailResponse(AbstractModel):
    """DescribeBaselineStrategyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _PassRate: Policy scan pass rate
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassRate: int
        :param _StrategyName: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyName: str
        :param _ScanCycle: policy scan cycle (days)
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanCycle: str
        :param _ScanAt: Regular scan time. The scan task is triggered at this time.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanAt: str
        :param _IsGlobal: Whether all hosts are scanned. 1: yes; 0: no. If the value is 1, all Pro Edition hosts are scanned.Note: This field may return null, indicating that no valid values can be obtained.
        :type IsGlobal: int
        :param _MachineType: Machine type:
cvm: Tencent Cloud Virtual Machine
bm: BM
ecm: Edge Computing Machine
lh: Lighthouse
other: Hybrid Cloud Machine
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineType: str
        :param _Region: Host region
Note: This field may return null, indicating that no valid values can be obtained.
        :type Region: str
        :param _Quuids: IDs of all user hosts involved in this policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        :param _CategoryIds: IDs of all user baselines involved in this policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryIds: list of str
        :param _IfScanned: 1: scanned; 0: not scanned.Note: This field may return null, indicating that no valid values can be obtained.
        :type IfScanned: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PassRate = None
        self._StrategyName = None
        self._ScanCycle = None
        self._ScanAt = None
        self._IsGlobal = None
        self._MachineType = None
        self._Region = None
        self._Quuids = None
        self._CategoryIds = None
        self._IfScanned = None
        self._RequestId = None

    @property
    def PassRate(self):
        """Policy scan pass rate
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassRate

    @PassRate.setter
    def PassRate(self, PassRate):
        self._PassRate = PassRate

    @property
    def StrategyName(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def ScanCycle(self):
        """policy scan cycle (days)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanCycle

    @ScanCycle.setter
    def ScanCycle(self, ScanCycle):
        self._ScanCycle = ScanCycle

    @property
    def ScanAt(self):
        """Regular scan time. The scan task is triggered at this time.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanAt

    @ScanAt.setter
    def ScanAt(self, ScanAt):
        self._ScanAt = ScanAt

    @property
    def IsGlobal(self):
        """Whether all hosts are scanned. 1: yes; 0: no. If the value is 1, all Pro Edition hosts are scanned.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def MachineType(self):
        """Machine type:
cvm: Tencent Cloud Virtual Machine
bm: BM
ecm: Edge Computing Machine
lh: Lighthouse
other: Hybrid Cloud Machine
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def Region(self):
        """Host region
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Quuids(self):
        """IDs of all user hosts involved in this policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def CategoryIds(self):
        """IDs of all user baselines involved in this policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._CategoryIds

    @CategoryIds.setter
    def CategoryIds(self, CategoryIds):
        self._CategoryIds = CategoryIds

    @property
    def IfScanned(self):
        """1: scanned; 0: not scanned.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IfScanned

    @IfScanned.setter
    def IfScanned(self, IfScanned):
        self._IfScanned = IfScanned

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PassRate = params.get("PassRate")
        self._StrategyName = params.get("StrategyName")
        self._ScanCycle = params.get("ScanCycle")
        self._ScanAt = params.get("ScanAt")
        self._IsGlobal = params.get("IsGlobal")
        self._MachineType = params.get("MachineType")
        self._Region = params.get("Region")
        self._Quuids = params.get("Quuids")
        self._CategoryIds = params.get("CategoryIds")
        self._IfScanned = params.get("IfScanned")
        self._RequestId = params.get("RequestId")


class DescribeBaselineStrategyListRequest(AbstractModel):
    """DescribeBaselineStrategyList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum number is 100.)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Enabled: Rule switch: 1 - on; 0 - off; 2: all
        :type Enabled: int
        """
        self._Limit = None
        self._Offset = None
        self._Enabled = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum number is 100.)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Enabled(self):
        """Rule switch: 1 - on; 0 - off; 2: all
        :rtype: int
        """
        return self._Enabled

    @Enabled.setter
    def Enabled(self, Enabled):
        self._Enabled = Enabled


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Enabled = params.get("Enabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineStrategyListResponse(AbstractModel):
    """DescribeBaselineStrategyList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _StrategyList: User policy information list
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyList: list of Strategy
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._StrategyList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def StrategyList(self):
        """User policy information list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Strategy
        """
        return self._StrategyList

    @StrategyList.setter
    def StrategyList(self, StrategyList):
        self._StrategyList = StrategyList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("StrategyList") is not None:
            self._StrategyList = []
            for item in params.get("StrategyList"):
                obj = Strategy()
                obj._deserialize(item)
                self._StrategyList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineTopRequest(AbstractModel):
    """DescribeBaselineTop request structure.

    """

    def __init__(self):
        r"""
        :param _Top: Dynamic top value
        :type Top: int
        :param _StrategyId: Policy ID
        :type StrategyId: int
        """
        self._Top = None
        self._StrategyId = None

    @property
    def Top(self):
        """Dynamic top value
        :rtype: int
        """
        return self._Top

    @Top.setter
    def Top(self, Top):
        self._Top = Top

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId


    def _deserialize(self, params):
        self._Top = params.get("Top")
        self._StrategyId = params.get("StrategyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineTopResponse(AbstractModel):
    """DescribeBaselineTop response structure.

    """

    def __init__(self):
        r"""
        :param _RuleTopList: List of top check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleTopList: list of BaselineRuleTopInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RuleTopList = None
        self._RequestId = None

    @property
    def RuleTopList(self):
        """List of top check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineRuleTopInfo
        """
        return self._RuleTopList

    @RuleTopList.setter
    def RuleTopList(self, RuleTopList):
        self._RuleTopList = RuleTopList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RuleTopList") is not None:
            self._RuleTopList = []
            for item in params.get("RuleTopList"):
                obj = BaselineRuleTopInfo()
                obj._deserialize(item)
                self._RuleTopList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBaselineWeakPasswordListRequest(AbstractModel):
    """DescribeBaselineWeakPasswordList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>WeakPassword - string - required: no - weak password</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting order [ASC: ascending|DESC: descending]
        :type Order: str
        :param _By: Sorting column [CreateTime|ModifyTime]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>WeakPassword - string - required: no - weak password</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting order [ASC: ascending|DESC: descending]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column [CreateTime|ModifyTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBaselineWeakPasswordListResponse(AbstractModel):
    """DescribeBaselineWeakPasswordList response structure.

    """

    def __init__(self):
        r"""
        :param _Total: Total number
        :type Total: int
        :param _List: None
        :type List: list of BaselineWeakPassword
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Total = None
        self._List = None
        self._RequestId = None

    @property
    def Total(self):
        """Total number
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def List(self):
        """None
        :rtype: list of BaselineWeakPassword
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BaselineWeakPassword()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBashEventsInfoNewRequest(AbstractModel):
    """DescribeBashEventsInfoNew request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashEventsInfoNewResponse(AbstractModel):
    """DescribeBashEventsInfoNew response structure.

    """

    def __init__(self):
        r"""
        :param _BashEventsInfo: Event details
Note: This field may return null, indicating that no valid values can be obtained.
        :type BashEventsInfo: :class:`tencentcloud.cwp.v20180228.models.BashEventsInfoNew`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BashEventsInfo = None
        self._RequestId = None

    @property
    def BashEventsInfo(self):
        """Event details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BashEventsInfoNew`
        """
        return self._BashEventsInfo

    @BashEventsInfo.setter
    def BashEventsInfo(self, BashEventsInfo):
        self._BashEventsInfo = BashEventsInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BashEventsInfo") is not None:
            self._BashEventsInfo = BashEventsInfoNew()
            self._BashEventsInfo._deserialize(params.get("BashEventsInfo"))
        self._RequestId = params.get("RequestId")


class DescribeBashEventsInfoRequest(AbstractModel):
    """DescribeBashEventsInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashEventsInfoResponse(AbstractModel):
    """DescribeBashEventsInfo response structure.

    """

    def __init__(self):
        r"""
        :param _BashEventsInfo: Event details
Note: This field may return null, indicating that no valid values can be obtained.
        :type BashEventsInfo: :class:`tencentcloud.cwp.v20180228.models.BashEventsInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BashEventsInfo = None
        self._RequestId = None

    @property
    def BashEventsInfo(self):
        """Event details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BashEventsInfo`
        """
        return self._BashEventsInfo

    @BashEventsInfo.setter
    def BashEventsInfo(self, BashEventsInfo):
        self._BashEventsInfo = BashEventsInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BashEventsInfo") is not None:
            self._BashEventsInfo = BashEventsInfo()
            self._BashEventsInfo._deserialize(params.get("BashEventsInfo"))
        self._RequestId = params.get("RequestId")


class DescribeBashEventsNewRequest(AbstractModel):
    """DescribeBashEventsNew request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>HostName - String - required: no - host name</li>
<li>Hostip - String - required: no - host's private IP address</li>
<li>HostIp - String - required: no - host's private IP address</li>
<li>RuleCategory - Int - required: no - policy type (all types or a single type): 0: system; 1: user</li><li>RuleName - String - required: no - policy name</li>
<li>RuleLevel - Int - required: no - threat Level (multiple levels supported)</li>
<li>Status - Int - required: no - processing status (multiple statuses supported): 0: pending; 1: processed; 2: added to allowlist; 3: ignored; 4: deleted; 5: blocked</li>
<li>DetectBy - Int - required: no - data source (multiple sources supported): 0: bash logs; 1: real-time monitoring</li>
<li>StartTime - String - required: no - start time</li>
<li>EndTime - String - required: no - end time</li>
        :type Filters: list of Filter
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Sorting method: sort by number of requests. asc: ascending; desc: descending.
        :type Order: str
        :param _By: Sorting field. CreateTime: occurrence time; ModifyTime: processing time.
        :type By: str
        """
        self._Limit = None
        self._Filters = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>HostName - String - required: no - host name</li>
<li>Hostip - String - required: no - host's private IP address</li>
<li>HostIp - String - required: no - host's private IP address</li>
<li>RuleCategory - Int - required: no - policy type (all types or a single type): 0: system; 1: user</li><li>RuleName - String - required: no - policy name</li>
<li>RuleLevel - Int - required: no - threat Level (multiple levels supported)</li>
<li>Status - Int - required: no - processing status (multiple statuses supported): 0: pending; 1: processed; 2: added to allowlist; 3: ignored; 4: deleted; 5: blocked</li>
<li>DetectBy - Int - required: no - data source (multiple sources supported): 0: bash logs; 1: real-time monitoring</li>
<li>StartTime - String - required: no - start time</li>
<li>EndTime - String - required: no - end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: sort by number of requests. asc: ascending; desc: descending.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field. CreateTime: occurrence time; ModifyTime: processing time.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashEventsNewResponse(AbstractModel):
    """DescribeBashEventsNew response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: High-risk command event list
        :type List: list of BashEventNew
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """High-risk command event list
        :rtype: list of BashEventNew
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BashEventNew()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBashEventsRequest(AbstractModel):
    """DescribeBashEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>HostName - String - required: no - host name</li>
<li>Hostip - String - required: no - host's private IP address</li>
<li>RuleCategory - Int - required: no - policy type (all types or a single type): 0: system; 1: user</li>
<li>RuleName - String - required: no - policy name</li>
<li>RuleLevel - Int - required: no - threat Level (multiple levels supported)</li>
<li>Status - Int - required: no - processing status (multiple statuses supported): 0: pending; 1: processed; 2: added to allowlist; 3: ignored; 4: deleted; 5: blocked</li>
<li>DetectBy - Int - required: no - data source (multiple sources supported): 0: bash logs; 1: real-time monitoring</li>
<li>StartTime - String - required: no - start time</li>
<li>EndTime - String - required: no - end time</li>
        :type Filters: list of Filter
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Order: Sorting method: sort by number of requests. asc: ascending order; desc: descending order.
        :type Order: str
        :param _By: Sorting field. CreateTime: occurrence time; ModifyTime: processing time.
        :type By: str
        """
        self._Limit = None
        self._Filters = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>HostName - String - required: no - host name</li>
<li>Hostip - String - required: no - host's private IP address</li>
<li>RuleCategory - Int - required: no - policy type (all types or a single type): 0: system; 1: user</li>
<li>RuleName - String - required: no - policy name</li>
<li>RuleLevel - Int - required: no - threat Level (multiple levels supported)</li>
<li>Status - Int - required: no - processing status (multiple statuses supported): 0: pending; 1: processed; 2: added to allowlist; 3: ignored; 4: deleted; 5: blocked</li>
<li>DetectBy - Int - required: no - data source (multiple sources supported): 0: bash logs; 1: real-time monitoring</li>
<li>StartTime - String - required: no - start time</li>
<li>EndTime - String - required: no - end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: sort by number of requests. asc: ascending order; desc: descending order.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field. CreateTime: occurrence time; ModifyTime: processing time.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashEventsResponse(AbstractModel):
    """DescribeBashEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: List of high-risk command events
        :type List: list of BashEvent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of high-risk command events
        :rtype: list of BashEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BashEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBashPoliciesRequest(AbstractModel):
    """DescribeBashPolicies request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returned entries. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filtering criteria
<li>Name - String - required: no - rule name</li>
<li>Rule - String - required: no - rule content</li>
<li>Level - Int - required: no - threat level</li>
<li>White - Int - required: no - allowlist type</li>
<li>Category - Int - required: no - policy type</li>
<li>BashAction - Int - required: no - action</li>
<li>Enable - Int - required: no - enabling status</li>
<li>Id - Int - required: no - policy ID</li>
<li>PolicyId - Int - required: no - policy ID</li>
<li>RuleId - Int - required: no - rule ID</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Quantity of returned entries. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria
<li>Name - String - required: no - rule name</li>
<li>Rule - String - required: no - rule content</li>
<li>Level - Int - required: no - threat level</li>
<li>White - Int - required: no - allowlist type</li>
<li>Category - Int - required: no - policy type</li>
<li>BashAction - Int - required: no - action</li>
<li>Enable - Int - required: no - enabling status</li>
<li>Id - Int - required: no - policy ID</li>
<li>PolicyId - Int - required: no - policy ID</li>
<li>RuleId - Int - required: no - rule ID</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashPoliciesResponse(AbstractModel):
    """DescribeBashPolicies response structure.

    """

    def __init__(self):
        r"""
        :param _List: List content
        :type List: list of BashPolicy
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List content
        :rtype: list of BashPolicy
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BashPolicy()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeBashRulesRequest(AbstractModel):
    """DescribeBashRules request structure.

    """

    def __init__(self):
        r"""
        :param _Type: 0: system rule; 1: user rule.
        :type Type: int
        :param _Limit: Number of returned entries. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - keyword (rule name)</li>
        :type Filters: list of Filter
        """
        self._Type = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Type(self):
        """0: system rule; 1: user rule.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Limit(self):
        """Number of returned entries. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - keyword (rule name)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBashRulesResponse(AbstractModel):
    """DescribeBashRules response structure.

    """

    def __init__(self):
        r"""
        :param _List: List content
        :type List: list of BashRule
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List content
        :rtype: list of BashRule
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = BashRule()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeBruteAttackListRequest(AbstractModel):
    """DescribeBruteAttackList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Uuid - String - required: no - CWPP unique UUID</li>
<li>Quuid - String - required: no - CVM UUID</li>
<li>Status - String - required: no - filter by status: failed - FAILED; succeeded - SUCCESS</li>
<li>UserName - String - required: no - filter by UserName</li>
<li>SrcIp - String - required: no - filter by source IP</li>
<li>CreateBeginTime - String - required: no - filter by first attack time, start time</li>
<li>CreateEndTime - String - required: no - filter by first attack time, end time</li>
<li>ModifyBeginTime - String - required: no - filter by last attack time, start time</li>
<li>ModifyEndTime - String - required: no - filter by last attack time, end time</li>
<li>Banned - String - required: no - filter by blocking status (separate multiple items with commas): 0 - not blocked (global ZK switch is off); 82 - not blocked (Non-Pro Edition); 83 - not blocked (allowlisted); 1 - blocked; 2 - not blocked (abnormal program); 3 - not blocked (private network attacks cannot be blocked); 4 - not blocked (Anping is not supported)</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :type Order: str
        :param _By: Sorting field: CreateTime - first attack time
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Number of items to be returned. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Uuid - String - required: no - CWPP unique UUID</li>
<li>Quuid - String - required: no - CVM UUID</li>
<li>Status - String - required: no - filter by status: failed - FAILED; succeeded - SUCCESS</li>
<li>UserName - String - required: no - filter by UserName</li>
<li>SrcIp - String - required: no - filter by source IP</li>
<li>CreateBeginTime - String - required: no - filter by first attack time, start time</li>
<li>CreateEndTime - String - required: no - filter by first attack time, end time</li>
<li>ModifyBeginTime - String - required: no - filter by last attack time, start time</li>
<li>ModifyEndTime - String - required: no - filter by last attack time, end time</li>
<li>Banned - String - required: no - filter by blocking status (separate multiple items with commas): 0 - not blocked (global ZK switch is off); 82 - not blocked (Non-Pro Edition); 83 - not blocked (allowlisted); 1 - blocked; 2 - not blocked (abnormal program); 3 - not blocked (private network attacks cannot be blocked); 4 - not blocked (Anping is not supported)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: CreateTime - first attack time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBruteAttackListResponse(AbstractModel):
    """DescribeBruteAttackList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _BruteAttackList: List of password cracking attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :type BruteAttackList: list of BruteAttackInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._BruteAttackList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def BruteAttackList(self):
        """List of password cracking attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BruteAttackInfo
        """
        return self._BruteAttackList

    @BruteAttackList.setter
    def BruteAttackList(self, BruteAttackList):
        self._BruteAttackList = BruteAttackList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("BruteAttackList") is not None:
            self._BruteAttackList = []
            for item in params.get("BruteAttackList"):
                obj = BruteAttackInfo()
                obj._deserialize(item)
                self._BruteAttackList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBruteAttackRulesRequest(AbstractModel):
    """DescribeBruteAttackRules request structure.

    """


class DescribeBruteAttackRulesResponse(AbstractModel):
    """DescribeBruteAttackRules response structure.

    """

    def __init__(self):
        r"""
        :param _Rules: List of rules for blocking brute force cracking
        :type Rules: list of BruteAttackRuleList
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Rules = None
        self._RequestId = None

    @property
    def Rules(self):
        """List of rules for blocking brute force cracking
        :rtype: list of BruteAttackRuleList
        """
        return self._Rules

    @Rules.setter
    def Rules(self, Rules):
        self._Rules = Rules

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Rules") is not None:
            self._Rules = []
            for item in params.get("Rules"):
                obj = BruteAttackRuleList()
                obj._deserialize(item)
                self._Rules.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeCanFixVulMachineRequest(AbstractModel):
    """DescribeCanFixVulMachine request structure.

    """

    def __init__(self):
        r"""
        :param _VulIds: Vulnerability IDs
        :type VulIds: list of int non-negative
        :param _Quuids: Hosts requiring fixing. This parameter has an AND relationship with VulIds.
        :type Quuids: list of str
        """
        self._VulIds = None
        self._Quuids = None

    @property
    def VulIds(self):
        """Vulnerability IDs
        :rtype: list of int non-negative
        """
        return self._VulIds

    @VulIds.setter
    def VulIds(self, VulIds):
        self._VulIds = VulIds

    @property
    def Quuids(self):
        """Hosts requiring fixing. This parameter has an AND relationship with VulIds.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._VulIds = params.get("VulIds")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCanFixVulMachineResponse(AbstractModel):
    """DescribeCanFixVulMachine response structure.

    """

    def __init__(self):
        r"""
        :param _VulInfo: Host vulnerability fixing information list
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulInfo: list of CanFixVulInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulInfo = None
        self._RequestId = None

    @property
    def VulInfo(self):
        """Host vulnerability fixing information list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of CanFixVulInfo
        """
        return self._VulInfo

    @VulInfo.setter
    def VulInfo(self, VulInfo):
        self._VulInfo = VulInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulInfo") is not None:
            self._VulInfo = []
            for item in params.get("VulInfo"):
                obj = CanFixVulInfo()
                obj._deserialize(item)
                self._VulInfo.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeCanNotSeparateMachineRequest(AbstractModel):
    """DescribeCanNotSeparateMachine request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: An array of event IDs that need to be modified, and batch operation is supported.
        :type Ids: list of int non-negative
        :param _UpdateAll: Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :type UpdateAll: bool
        :param _ExcludeId: Excluded event ID: When operating on all events, this ID needs to be excluded.
        :type ExcludeId: list of int non-negative
        :param _Filters: <li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - status for filtering: 4: pending; 5: trusted; 6: isolated; 10: isolating; 11: canceling isolation</li>
        :type Filters: list of Filters
        """
        self._Ids = None
        self._UpdateAll = None
        self._ExcludeId = None
        self._Filters = None

    @property
    def Ids(self):
        """An array of event IDs that need to be modified, and batch operation is supported.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def UpdateAll(self):
        """Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :rtype: bool
        """
        return self._UpdateAll

    @UpdateAll.setter
    def UpdateAll(self, UpdateAll):
        self._UpdateAll = UpdateAll

    @property
    def ExcludeId(self):
        """Excluded event ID: When operating on all events, this ID needs to be excluded.
        :rtype: list of int non-negative
        """
        return self._ExcludeId

    @ExcludeId.setter
    def ExcludeId(self, ExcludeId):
        self._ExcludeId = ExcludeId

    @property
    def Filters(self):
        """<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - status for filtering: 4: pending; 5: trusted; 6: isolated; 10: isolating; 11: canceling isolation</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._UpdateAll = params.get("UpdateAll")
        self._ExcludeId = params.get("ExcludeId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCanNotSeparateMachineResponse(AbstractModel):
    """DescribeCanNotSeparateMachine response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of non-isolatable hosts
        :type List: list of CanNotSeparateInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """List of non-isolatable hosts
        :rtype: list of CanNotSeparateInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = CanNotSeparateInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeClientExceptionRequest(AbstractModel):
    """DescribeClientException request structure.

    """

    def __init__(self):
        r"""
        :param _ExceptionType: Client Exception Type 1: Client Offline, 2: Client Uninstallation
        :type ExceptionType: int
        :param _Offset: Pagination offset
        :type Offset: int
        :param _Limit: Limit per Page, not 0, up to 100
        :type Limit: int
        :param _StartTime: Start time in the format of `2006-01-02 15:04:05`
        :type StartTime: str
        :param _EndTime: End time in the format of `2006-01-02 15:04:05`
        :type EndTime: str
        """
        self._ExceptionType = None
        self._Offset = None
        self._Limit = None
        self._StartTime = None
        self._EndTime = None

    @property
    def ExceptionType(self):
        """Client Exception Type 1: Client Offline, 2: Client Uninstallation
        :rtype: int
        """
        return self._ExceptionType

    @ExceptionType.setter
    def ExceptionType(self, ExceptionType):
        self._ExceptionType = ExceptionType

    @property
    def Offset(self):
        """Pagination offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Limit per Page, not 0, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def StartTime(self):
        """Start time in the format of `2006-01-02 15:04:05`
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time in the format of `2006-01-02 15:04:05`
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._ExceptionType = params.get("ExceptionType")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeClientExceptionResponse(AbstractModel):
    """DescribeClientException response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _Records: Event details
        :type Records: list of RecordInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._Records = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Records(self):
        """Event details
        :rtype: list of RecordInfo
        """
        return self._Records

    @Records.setter
    def Records(self, Records):
        self._Records = Records

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Records") is not None:
            self._Records = []
            for item in params.get("Records"):
                obj = RecordInfo()
                obj._deserialize(item)
                self._Records.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComponentStatisticsRequest(AbstractModel):
    """DescribeComponentStatistics request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
ComponentName - String - required: no - component name
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
ComponentName - String - required: no - component name
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComponentStatisticsResponse(AbstractModel):
    """DescribeComponentStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records in the component statistics list
        :type TotalCount: int
        :param _ComponentStatistics: Array of list of counted components
        :type ComponentStatistics: list of ComponentStatistics
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ComponentStatistics = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records in the component statistics list
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ComponentStatistics(self):
        """Array of list of counted components
        :rtype: list of ComponentStatistics
        """
        return self._ComponentStatistics

    @ComponentStatistics.setter
    def ComponentStatistics(self, ComponentStatistics):
        self._ComponentStatistics = ComponentStatistics

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ComponentStatistics") is not None:
            self._ComponentStatistics = []
            for item in params.get("ComponentStatistics"):
                obj = ComponentStatistics()
                obj._deserialize(item)
                self._ComponentStatistics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDefenceEventDetailRequest(AbstractModel):
    """DescribeDefenceEventDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Vulnerability Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Vulnerability Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDefenceEventDetailResponse(AbstractModel):
    """DescribeDefenceEventDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Vulnerability event details
        :type Data: :class:`tencentcloud.cwp.v20180228.models.VulDefenceEventDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Vulnerability event details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulDefenceEventDetail`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = VulDefenceEventDetail()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeDirectConnectInstallCommandRequest(AbstractModel):
    """DescribeDirectConnectInstallCommand request structure.

    """

    def __init__(self):
        r"""
        :param _RegionCode: Region identifier
        :type RegionCode: str
        :param _VpcId: VPC ID
        :type VpcId: str
        :param _ExpireDate: Command expiration time
        :type ExpireDate: str
        """
        self._RegionCode = None
        self._VpcId = None
        self._ExpireDate = None

    @property
    def RegionCode(self):
        """Region identifier
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def VpcId(self):
        """VPC ID
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def ExpireDate(self):
        """Command expiration time
        :rtype: str
        """
        return self._ExpireDate

    @ExpireDate.setter
    def ExpireDate(self, ExpireDate):
        self._ExpireDate = ExpireDate


    def _deserialize(self, params):
        self._RegionCode = params.get("RegionCode")
        self._VpcId = params.get("VpcId")
        self._ExpireDate = params.get("ExpireDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDirectConnectInstallCommandResponse(AbstractModel):
    """DescribeDirectConnectInstallCommand response structure.

    """

    def __init__(self):
        r"""
        :param _Ip: IP address for the installation command
        :type Ip: str
        :param _Token: Token for the installation command
        :type Token: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Ip = None
        self._Token = None
        self._RequestId = None

    @property
    def Ip(self):
        """IP address for the installation command
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def Token(self):
        """Token for the installation command
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Ip = params.get("Ip")
        self._Token = params.get("Token")
        self._RequestId = params.get("RequestId")


class DescribeESAggregationsRequest(AbstractModel):
    """DescribeESAggregations request structure.

    """

    def __init__(self):
        r"""
        :param _Query: ES aggregation conditional JSON
        :type Query: str
        """
        self._Query = None

    @property
    def Query(self):
        """ES aggregation conditional JSON
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query


    def _deserialize(self, params):
        self._Query = params.get("Query")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeESAggregationsResponse(AbstractModel):
    """DescribeESAggregations response structure.

    """

    def __init__(self):
        r"""
        :param _Data: ES aggregation result JSON
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """ES aggregation result JSON
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeEmergencyResponseListRequest(AbstractModel):
    """DescribeEmergencyResponseList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Keyword - String - whether required: no - filter by keyword</li>
<li>Uuids - String - whether required: no - filter by host ID</li>
        :type Filters: list of Filters
        :param _Limit: Number of items to be returned. The maximum value is 100.
        :type Limit: int
        :param _Offset: Sorting step size
        :type Offset: int
        :param _Order: Sort method
        :type Order: str
        :param _By: Sorting field: StartTime, EndTime
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Keyword - String - whether required: no - filter by keyword</li>
<li>Uuids - String - whether required: no - filter by host ID</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Sorting step size
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sort method
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: StartTime, EndTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEmergencyResponseListResponse(AbstractModel):
    """DescribeEmergencyResponseList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: Emergency Response List
        :type List: list of EmergencyResponseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Emergency Response List
        :rtype: list of EmergencyResponseInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = EmergencyResponseInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEmergencyVulListRequest(AbstractModel):
    """DescribeEmergencyVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Status - String - required: Yes - vulnerability status filter: 0: not detected; 1: at risk; 2: no risk; 3: show progress while detecting</li>
<li>Level - String - required: no - filter by vulnerability level: 1 - low; 2 - medium; 3 - high; 4 - prompt</li>
<li>VulName - String - required: no - vulnerability name search</li>
<li>Uuids- String - required: no - host uuid</li>
<li>IsSupportDefense - int- required: no - whether to support defense: 0: no; 1: yes</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: desc and asc
        :type Order: str
        :param _By: Sorting field PublishDate  LastScanTime HostCount
        :type By: str
        :param _HotspotAttack: Whether hot spot vulnerabilities
        :type HotspotAttack: bool
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._HotspotAttack = None

    @property
    def Limit(self):
        """Quantity of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Status - String - required: Yes - vulnerability status filter: 0: not detected; 1: at risk; 2: no risk; 3: show progress while detecting</li>
<li>Level - String - required: no - filter by vulnerability level: 1 - low; 2 - medium; 3 - high; 4 - prompt</li>
<li>VulName - String - required: no - vulnerability name search</li>
<li>Uuids- String - required: no - host uuid</li>
<li>IsSupportDefense - int- required: no - whether to support defense: 0: no; 1: yes</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: desc and asc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field PublishDate  LastScanTime HostCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def HotspotAttack(self):
        """Whether hot spot vulnerabilities
        :rtype: bool
        """
        return self._HotspotAttack

    @HotspotAttack.setter
    def HotspotAttack(self, HotspotAttack):
        self._HotspotAttack = HotspotAttack


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._HotspotAttack = params.get("HotspotAttack")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEmergencyVulListResponse(AbstractModel):
    """DescribeEmergencyVulList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Vulnerability list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of EmergencyVul
        :param _TotalCount: Total number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _ExistsRisk: Whether there is any risk
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExistsRisk: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._ExistsRisk = None
        self._RequestId = None

    @property
    def List(self):
        """Vulnerability list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of EmergencyVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ExistsRisk(self):
        """Whether there is any risk
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._ExistsRisk

    @ExistsRisk.setter
    def ExistsRisk(self, ExistsRisk):
        self._ExistsRisk = ExistsRisk

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = EmergencyVul()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._ExistsRisk = params.get("ExistsRisk")
        self._RequestId = params.get("RequestId")


class DescribeEventByTableRequest(AbstractModel):
    """DescribeEventByTable request structure.

    """

    def __init__(self):
        r"""
        :param _TableName: Event table name
        :type TableName: str
        :param _Ids: Event table ID
        :type Ids: list of int
        """
        self._TableName = None
        self._Ids = None

    @property
    def TableName(self):
        """Event table name
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def Ids(self):
        """Event table ID
        :rtype: list of int
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._TableName = params.get("TableName")
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEventByTableResponse(AbstractModel):
    """DescribeEventByTable response structure.

    """

    def __init__(self):
        r"""
        :param _Type: Alarm type. Bruteattack: brute force cracking; bash: high-risk command; malware: malicious file; risk_dns: malicious request; privilege_escalation: local privilege escalation; reverse_shell: reverse shell; java_shell: Java webshell.
        :type Type: str
        :param _Value: JSON string of the event content. The field structure is the same as that of the event table.
        :type Value: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Type = None
        self._Value = None
        self._RequestId = None

    @property
    def Type(self):
        """Alarm type. Bruteattack: brute force cracking; bash: high-risk command; malware: malicious file; risk_dns: malicious request; privilege_escalation: local privilege escalation; reverse_shell: reverse shell; java_shell: Java webshell.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Value(self):
        """JSON string of the event content. The field structure is the same as that of the event table.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Value = params.get("Value")
        self._RequestId = params.get("RequestId")


class DescribeExpertServiceListRequest(AbstractModel):
    """DescribeExpertServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Keyword - String - whether required: no - filter by keyword</li>
<li>Uuids - String - whether required: no - filter by host ID</li>
        :type Filters: list of Filters
        :param _Limit: Number of items to be returned. The maximum value is 100.
        :type Limit: int
        :param _Offset: Sorting step size
        :type Offset: int
        :param _Order: Sort method
        :type Order: str
        :param _By: Sorting field: StartTime, EndTime
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Keyword - String - whether required: no - filter by keyword</li>
<li>Uuids - String - whether required: no - filter by host ID</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Sorting step size
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sort method
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: StartTime, EndTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExpertServiceListResponse(AbstractModel):
    """DescribeExpertServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: Security manager data
        :type List: list of SecurityButlerInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Security manager data
        :rtype: list of SecurityButlerInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SecurityButlerInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeExpertServiceOrderListRequest(AbstractModel):
    """DescribeExpertServiceOrderList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>InquireType- String - required: no - order type for filtering,</li>
        :type Filters: list of Filters
        :param _Limit: Number of entries on each page. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset
        :type Offset: int
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None

    @property
    def Filters(self):
        """<li>InquireType- String - required: no - order type for filtering,</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of entries on each page. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExpertServiceOrderListResponse(AbstractModel):
    """DescribeExpertServiceOrderList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: Order list
        :type List: list of ExpertServiceOrderInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Order list
        :rtype: list of ExpertServiceOrderInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ExpertServiceOrderInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeExportMachinesRequest(AbstractModel):
    """DescribeExportMachines request structure.

    """

    def __init__(self):
        r"""
        :param _MachineType: CVM type
<li>CVM: Represent a virtual machine</li>
<li>BM: Represent a physical machine</li>
        :type MachineType: str
        :param _MachineRegion: Machine region. Example: ap-guangzhou, ap-shanghai
        :type MachineRegion: str
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - keyword for query </li>
<li>Status - String - required: no - client online status (OFFLINE: offline | ONLINE: online | UNINSTALLED: not installed)</li>
<li>Version - String - required: no - current protection version (PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition)</li>
Only one value is allowed for each filter criterion. Multiple values with the OR relationship are not supported for queries.
        :type Filters: list of Filter
        :param _ProjectIds: ID List of Businesses to which machines belong
        :type ProjectIds: list of int non-negative
        """
        self._MachineType = None
        self._MachineRegion = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ProjectIds = None

    @property
    def MachineType(self):
        """CVM type
<li>CVM: Represent a virtual machine</li>
<li>BM: Represent a physical machine</li>
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineRegion(self):
        """Machine region. Example: ap-guangzhou, ap-shanghai
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - keyword for query </li>
<li>Status - String - required: no - client online status (OFFLINE: offline | ONLINE: online | UNINSTALLED: not installed)</li>
<li>Version - String - required: no - current protection version (PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition)</li>
Only one value is allowed for each filter criterion. Multiple values with the OR relationship are not supported for queries.
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ProjectIds(self):
        """ID List of Businesses to which machines belong
        :rtype: list of int non-negative
        """
        return self._ProjectIds

    @ProjectIds.setter
    def ProjectIds(self, ProjectIds):
        self._ProjectIds = ProjectIds


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._MachineRegion = params.get("MachineRegion")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ProjectIds = params.get("ProjectIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExportMachinesResponse(AbstractModel):
    """DescribeExportMachines response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DescribeFastAnalysisRequest(AbstractModel):
    """DescribeFastAnalysis request structure.

    """

    def __init__(self):
        r"""
        :param _From: Start time. Unit: ms.
        :type From: int
        :param _To: End time. Unit: ms.
        :type To: int
        :param _Query: Query statement, up to 4096 in statement length
        :type Query: str
        :param _FieldName: Log field name
        :type FieldName: str
        """
        self._From = None
        self._To = None
        self._Query = None
        self._FieldName = None

    @property
    def From(self):
        """Start time. Unit: ms.
        :rtype: int
        """
        return self._From

    @From.setter
    def From(self, From):
        self._From = From

    @property
    def To(self):
        """End time. Unit: ms.
        :rtype: int
        """
        return self._To

    @To.setter
    def To(self, To):
        self._To = To

    @property
    def Query(self):
        """Query statement, up to 4096 in statement length
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query

    @property
    def FieldName(self):
        """Log field name
        :rtype: str
        """
        return self._FieldName

    @FieldName.setter
    def FieldName(self, FieldName):
        self._FieldName = FieldName


    def _deserialize(self, params):
        self._From = params.get("From")
        self._To = params.get("To")
        self._Query = params.get("Query")
        self._FieldName = params.get("FieldName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFastAnalysisResponse(AbstractModel):
    """DescribeFastAnalysis response structure.

    """

    def __init__(self):
        r"""
        :param _FieldValueRatioInfos: Statistical data after analysis
Note: This field may return null, indicating that no valid values can be obtained.
        :type FieldValueRatioInfos: list of FieldValueRatioInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FieldValueRatioInfos = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def FieldValueRatioInfos(self):
        """Statistical data after analysis
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of FieldValueRatioInfo
        """
        return self._FieldValueRatioInfos

    @FieldValueRatioInfos.setter
    def FieldValueRatioInfos(self, FieldValueRatioInfos):
        self._FieldValueRatioInfos = FieldValueRatioInfos

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FieldValueRatioInfos") is not None:
            self._FieldValueRatioInfos = []
            for item in params.get("FieldValueRatioInfos"):
                obj = FieldValueRatioInfo()
                obj._deserialize(item)
                self._FieldValueRatioInfos.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeFileTamperEventRuleInfoRequest(AbstractModel):
    """DescribeFileTamperEventRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        :param _Limit: Number of returned UUIDs per page
        :type Limit: int
        :param _Offset: Offset
        :type Offset: int
        """
        self._Id = None
        self._Limit = None
        self._Offset = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Limit(self):
        """Number of returned UUIDs per page
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileTamperEventRuleInfoResponse(AbstractModel):
    """DescribeFileTamperEventRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _FileTamperRuleDetail: Rule details
        :type FileTamperRuleDetail: :class:`tencentcloud.cwp.v20180228.models.FileTamperRuleDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FileTamperRuleDetail = None
        self._RequestId = None

    @property
    def FileTamperRuleDetail(self):
        """Rule details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.FileTamperRuleDetail`
        """
        return self._FileTamperRuleDetail

    @FileTamperRuleDetail.setter
    def FileTamperRuleDetail(self, FileTamperRuleDetail):
        self._FileTamperRuleDetail = FileTamperRuleDetail

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FileTamperRuleDetail") is not None:
            self._FileTamperRuleDetail = FileTamperRuleDetail()
            self._FileTamperRuleDetail._deserialize(params.get("FileTamperRuleDetail"))
        self._RequestId = params.get("RequestId")


class DescribeFileTamperEventsRequest(AbstractModel):
    """DescribeFileTamperEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Status - String - required: no - processing status: 0: pending; 1: allowlisted; 2: deleted; 3: ignored</li>
<li>ModifyTime - String - required: no - last occurrence time</li>
<li>Uuid- String - required: no - query by host UUID</li>
<li>RuleCategory - string - required: no - rule category. 0: system rule; 1: custom rule</li>
<li>FileAction - string - required: no - threat behavior: read - read file; write - write file</li>
        :type Filters: list of Filters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting method: ASC, DESC
        :type Order: str
        :param _By: Sorting field: CreateTime; ModifyTime
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Status - String - required: no - processing status: 0: pending; 1: allowlisted; 2: deleted; 3: ignored</li>
<li>ModifyTime - String - required: no - last occurrence time</li>
<li>Uuid- String - required: no - query by host UUID</li>
<li>RuleCategory - string - required: no - rule category. 0: system rule; 1: custom rule</li>
<li>FileAction - string - required: no - threat behavior: read - read file; write - write file</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: CreateTime; ModifyTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileTamperEventsResponse(AbstractModel):
    """DescribeFileTamperEvents response structure.

    """

    def __init__(self):
        r"""
        :param _List: Core File Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of FileTamperEvent
        :param _TotalCount: Total number of data entries
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Core File Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of FileTamperEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of data entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = FileTamperEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeFileTamperRuleCountRequest(AbstractModel):
    """DescribeFileTamperRuleCount request structure.

    """

    def __init__(self):
        r"""
        :param _Uuids: Query Host UUIDs, up to 100 queries at a time
        :type Uuids: list of str
        """
        self._Uuids = None

    @property
    def Uuids(self):
        """Query Host UUIDs, up to 100 queries at a time
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids


    def _deserialize(self, params):
        self._Uuids = params.get("Uuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileTamperRuleCountResponse(AbstractModel):
    """DescribeFileTamperRuleCount response structure.

    """

    def __init__(self):
        r"""
        :param _List: Information on Number of Host-associated Core File Rules
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of FileTamperRuleCount
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Information on Number of Host-associated Core File Rules
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of FileTamperRuleCount
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = FileTamperRuleCount()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFileTamperRuleInfoRequest(AbstractModel):
    """DescribeFileTamperRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Limit: Control the number of UUIDs returned
        :type Limit: int
        :param _Offset: Control the number of UUIDs returned, starting position
        :type Offset: int
        """
        self._Id = None
        self._Limit = None
        self._Offset = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Limit(self):
        """Control the number of UUIDs returned
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Control the number of UUIDs returned, starting position
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileTamperRuleInfoResponse(AbstractModel):
    """DescribeFileTamperRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _FileTamperRuleDetail: Rule details
        :type FileTamperRuleDetail: :class:`tencentcloud.cwp.v20180228.models.FileTamperRuleDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FileTamperRuleDetail = None
        self._RequestId = None

    @property
    def FileTamperRuleDetail(self):
        """Rule details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.FileTamperRuleDetail`
        """
        return self._FileTamperRuleDetail

    @FileTamperRuleDetail.setter
    def FileTamperRuleDetail(self, FileTamperRuleDetail):
        self._FileTamperRuleDetail = FileTamperRuleDetail

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FileTamperRuleDetail") is not None:
            self._FileTamperRuleDetail = FileTamperRuleDetail()
            self._FileTamperRuleDetail._deserialize(params.get("FileTamperRuleDetail"))
        self._RequestId = params.get("RequestId")


class DescribeFileTamperRulesRequest(AbstractModel):
    """DescribeFileTamperRules request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>RuleCategory - string - rule category: 0: system rule; 1: user rule</li><li>Name - String - rule name</li>
        :type Filters: list of Filters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting order: ASC, DESC
        :type Order: str
        :param _By: Sorting field: CreateTime, ModifyTime, HostCount
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria
<li>RuleCategory - string - rule category: 0: system rule; 1: user rule</li><li>Name - String - rule name</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting order: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: CreateTime, ModifyTime, HostCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileTamperRulesResponse(AbstractModel):
    """DescribeFileTamperRules response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of rules
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of FileTamperRuleInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List of rules
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of FileTamperRuleInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = FileTamperRuleInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeGeneralStatRequest(AbstractModel):
    """DescribeGeneralStat request structure.

    """

    def __init__(self):
        r"""
        :param _MachineType: CVM type
<li>CVM: Indicates Tencent CVM.</li>
<li>BM: indicates Blackstone physical machine</li>
<li>ECM: indicates edge computing server</li>
<li>LH: indicates Tencent Cloud Lighthouse</li>
<li>Other: Indicates Hybrid cloud machines.</li>
        :type MachineType: str
        :param _MachineRegion: Machine region. Example: ap-guangzhou, ap-shanghai
        :type MachineRegion: str
        """
        self._MachineType = None
        self._MachineRegion = None

    @property
    def MachineType(self):
        """CVM type
<li>CVM: Indicates Tencent CVM.</li>
<li>BM: indicates Blackstone physical machine</li>
<li>ECM: indicates edge computing server</li>
<li>LH: indicates Tencent Cloud Lighthouse</li>
<li>Other: Indicates Hybrid cloud machines.</li>
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineRegion(self):
        """Machine region. Example: ap-guangzhou, ap-shanghai
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._MachineRegion = params.get("MachineRegion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeGeneralStatResponse(AbstractModel):
    """DescribeGeneralStat response structure.

    """

    def __init__(self):
        r"""
        :param _MachinesAll: Total number of hosts
        :type MachinesAll: int
        :param _MachinesUninstalled: Total number of hosts not installed with the CWPP client
        :type MachinesUninstalled: int
        :param _AgentsAll: Total number of CWPP clients
        :type AgentsAll: int
        :param _AgentsOnline: Total number of online CWPP clients
        :type AgentsOnline: int
        :param _AgentsOffline: Total number of CWPP clients that are offline and shut down
        :type AgentsOffline: int
        :param _AgentsPro: Total number of Pro Edition CWPP clients
        :type AgentsPro: int
        :param _AgentsBasic: Total number of Basic Edition CWPP clients
        :type AgentsBasic: int
        :param _AgentsProExpireWithInSevenDays: Total number of prepaid Pro Edition CWPP clients that will expire in 7 days
        :type AgentsProExpireWithInSevenDays: int
        :param _RiskMachine: Total number of risky hosts
        :type RiskMachine: int
        :param _Shutdown: Total number of hosts that are shut down
        :type Shutdown: int
        :param _Offline: Total number of offline hosts
        :type Offline: int
        :param _FlagshipMachineCnt: Number of Ultimate Edition hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type FlagshipMachineCnt: int
        :param _ProtectDays: Protection duration, in days
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProtectDays: int
        :param _AddedOnTheFifteen: Number of hosts added in the last 15 days
Note: This field may return null, indicating that no valid values can be obtained.
        :type AddedOnTheFifteen: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MachinesAll = None
        self._MachinesUninstalled = None
        self._AgentsAll = None
        self._AgentsOnline = None
        self._AgentsOffline = None
        self._AgentsPro = None
        self._AgentsBasic = None
        self._AgentsProExpireWithInSevenDays = None
        self._RiskMachine = None
        self._Shutdown = None
        self._Offline = None
        self._FlagshipMachineCnt = None
        self._ProtectDays = None
        self._AddedOnTheFifteen = None
        self._RequestId = None

    @property
    def MachinesAll(self):
        """Total number of hosts
        :rtype: int
        """
        return self._MachinesAll

    @MachinesAll.setter
    def MachinesAll(self, MachinesAll):
        self._MachinesAll = MachinesAll

    @property
    def MachinesUninstalled(self):
        """Total number of hosts not installed with the CWPP client
        :rtype: int
        """
        return self._MachinesUninstalled

    @MachinesUninstalled.setter
    def MachinesUninstalled(self, MachinesUninstalled):
        self._MachinesUninstalled = MachinesUninstalled

    @property
    def AgentsAll(self):
        """Total number of CWPP clients
        :rtype: int
        """
        return self._AgentsAll

    @AgentsAll.setter
    def AgentsAll(self, AgentsAll):
        self._AgentsAll = AgentsAll

    @property
    def AgentsOnline(self):
        """Total number of online CWPP clients
        :rtype: int
        """
        return self._AgentsOnline

    @AgentsOnline.setter
    def AgentsOnline(self, AgentsOnline):
        self._AgentsOnline = AgentsOnline

    @property
    def AgentsOffline(self):
        """Total number of CWPP clients that are offline and shut down
        :rtype: int
        """
        return self._AgentsOffline

    @AgentsOffline.setter
    def AgentsOffline(self, AgentsOffline):
        self._AgentsOffline = AgentsOffline

    @property
    def AgentsPro(self):
        """Total number of Pro Edition CWPP clients
        :rtype: int
        """
        return self._AgentsPro

    @AgentsPro.setter
    def AgentsPro(self, AgentsPro):
        self._AgentsPro = AgentsPro

    @property
    def AgentsBasic(self):
        """Total number of Basic Edition CWPP clients
        :rtype: int
        """
        return self._AgentsBasic

    @AgentsBasic.setter
    def AgentsBasic(self, AgentsBasic):
        self._AgentsBasic = AgentsBasic

    @property
    def AgentsProExpireWithInSevenDays(self):
        """Total number of prepaid Pro Edition CWPP clients that will expire in 7 days
        :rtype: int
        """
        return self._AgentsProExpireWithInSevenDays

    @AgentsProExpireWithInSevenDays.setter
    def AgentsProExpireWithInSevenDays(self, AgentsProExpireWithInSevenDays):
        self._AgentsProExpireWithInSevenDays = AgentsProExpireWithInSevenDays

    @property
    def RiskMachine(self):
        """Total number of risky hosts
        :rtype: int
        """
        return self._RiskMachine

    @RiskMachine.setter
    def RiskMachine(self, RiskMachine):
        self._RiskMachine = RiskMachine

    @property
    def Shutdown(self):
        """Total number of hosts that are shut down
        :rtype: int
        """
        return self._Shutdown

    @Shutdown.setter
    def Shutdown(self, Shutdown):
        self._Shutdown = Shutdown

    @property
    def Offline(self):
        """Total number of offline hosts
        :rtype: int
        """
        return self._Offline

    @Offline.setter
    def Offline(self, Offline):
        self._Offline = Offline

    @property
    def FlagshipMachineCnt(self):
        """Number of Ultimate Edition hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FlagshipMachineCnt

    @FlagshipMachineCnt.setter
    def FlagshipMachineCnt(self, FlagshipMachineCnt):
        self._FlagshipMachineCnt = FlagshipMachineCnt

    @property
    def ProtectDays(self):
        """Protection duration, in days
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ProtectDays

    @ProtectDays.setter
    def ProtectDays(self, ProtectDays):
        self._ProtectDays = ProtectDays

    @property
    def AddedOnTheFifteen(self):
        """Number of hosts added in the last 15 days
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AddedOnTheFifteen

    @AddedOnTheFifteen.setter
    def AddedOnTheFifteen(self, AddedOnTheFifteen):
        self._AddedOnTheFifteen = AddedOnTheFifteen

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MachinesAll = params.get("MachinesAll")
        self._MachinesUninstalled = params.get("MachinesUninstalled")
        self._AgentsAll = params.get("AgentsAll")
        self._AgentsOnline = params.get("AgentsOnline")
        self._AgentsOffline = params.get("AgentsOffline")
        self._AgentsPro = params.get("AgentsPro")
        self._AgentsBasic = params.get("AgentsBasic")
        self._AgentsProExpireWithInSevenDays = params.get("AgentsProExpireWithInSevenDays")
        self._RiskMachine = params.get("RiskMachine")
        self._Shutdown = params.get("Shutdown")
        self._Offline = params.get("Offline")
        self._FlagshipMachineCnt = params.get("FlagshipMachineCnt")
        self._ProtectDays = params.get("ProtectDays")
        self._AddedOnTheFifteen = params.get("AddedOnTheFifteen")
        self._RequestId = params.get("RequestId")


class DescribeHistoryAccountsRequest(AbstractModel):
    """DescribeHistoryAccounts request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Yunjing client UUID
        :type Uuid: str
        :param _Limit: Number of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Offset: int
        :param _Filters: Filter criteria
<li>Username - String - required: no - username</li>
        :type Filters: list of Filter
        """
        self._Uuid = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Uuid(self):
        """Yunjing client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Limit(self):
        """Number of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Username - String - required: no - username</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeHistoryAccountsResponse(AbstractModel):
    """DescribeHistoryAccounts response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records in the history account list
        :type TotalCount: int
        :param _HistoryAccounts: Array of history accounts
        :type HistoryAccounts: list of HistoryAccount
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._HistoryAccounts = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records in the history account list
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def HistoryAccounts(self):
        """Array of history accounts
        :rtype: list of HistoryAccount
        """
        return self._HistoryAccounts

    @HistoryAccounts.setter
    def HistoryAccounts(self, HistoryAccounts):
        self._HistoryAccounts = HistoryAccounts

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("HistoryAccounts") is not None:
            self._HistoryAccounts = []
            for item in params.get("HistoryAccounts"):
                obj = HistoryAccount()
                obj._deserialize(item)
                self._HistoryAccounts.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeHistoryServiceRequest(AbstractModel):
    """DescribeHistoryService request structure.

    """


class DescribeHistoryServiceResponse(AbstractModel):
    """DescribeHistoryService response structure.

    """

    def __init__(self):
        r"""
        :param _BuyStatus: 1: available for purchase; 2: specification adjustment only; 3: redirection to renewal management page only.
        :type BuyStatus: int
        :param _InquireNum: Capacity purchased by the user, in GB
        :type InquireNum: int
        :param _EndTime: Expiration time
        :type EndTime: str
        :param _IsAutoOpenRenew: Whether automatic renewal is enabled. 0: initial value; 1: enabled; 2: disabled.
        :type IsAutoOpenRenew: int
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _Status: 0: not activated; 1: normal; 2: isolated; 3: terminated.
        :type Status: int
        :param _StartTime: Start time
        :type StartTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BuyStatus = None
        self._InquireNum = None
        self._EndTime = None
        self._IsAutoOpenRenew = None
        self._ResourceId = None
        self._Status = None
        self._StartTime = None
        self._RequestId = None

    @property
    def BuyStatus(self):
        """1: available for purchase; 2: specification adjustment only; 3: redirection to renewal management page only.
        :rtype: int
        """
        return self._BuyStatus

    @BuyStatus.setter
    def BuyStatus(self, BuyStatus):
        self._BuyStatus = BuyStatus

    @property
    def InquireNum(self):
        """Capacity purchased by the user, in GB
        :rtype: int
        """
        return self._InquireNum

    @InquireNum.setter
    def InquireNum(self, InquireNum):
        self._InquireNum = InquireNum

    @property
    def EndTime(self):
        """Expiration time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def IsAutoOpenRenew(self):
        """Whether automatic renewal is enabled. 0: initial value; 1: enabled; 2: disabled.
        :rtype: int
        """
        return self._IsAutoOpenRenew

    @IsAutoOpenRenew.setter
    def IsAutoOpenRenew(self, IsAutoOpenRenew):
        self._IsAutoOpenRenew = IsAutoOpenRenew

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def Status(self):
        """0: not activated; 1: normal; 2: isolated; 3: terminated.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BuyStatus = params.get("BuyStatus")
        self._InquireNum = params.get("InquireNum")
        self._EndTime = params.get("EndTime")
        self._IsAutoOpenRenew = params.get("IsAutoOpenRenew")
        self._ResourceId = params.get("ResourceId")
        self._Status = params.get("Status")
        self._StartTime = params.get("StartTime")
        self._RequestId = params.get("RequestId")


class DescribeHostInfoRequest(AbstractModel):
    """DescribeHostInfo request structure.

    """

    def __init__(self):
        r"""
        :param _QuuidList: Host QUUID array
        :type QuuidList: list of str
        :param _Uuids: UUIDs for querying. Leave this parameter blank if QUUIDs are used for querying.
        :type Uuids: list of str
        """
        self._QuuidList = None
        self._Uuids = None

    @property
    def QuuidList(self):
        """Host QUUID array
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def Uuids(self):
        """UUIDs for querying. Leave this parameter blank if QUUIDs are used for querying.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids


    def _deserialize(self, params):
        self._QuuidList = params.get("QuuidList")
        self._Uuids = params.get("Uuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeHostInfoResponse(AbstractModel):
    """DescribeHostInfo response structure.

    """

    def __init__(self):
        r"""
        :param _HostInfoList: Host and tag information
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostInfoList: list of HostTagInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HostInfoList = None
        self._RequestId = None

    @property
    def HostInfoList(self):
        """Host and tag information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of HostTagInfo
        """
        return self._HostInfoList

    @HostInfoList.setter
    def HostInfoList(self, HostInfoList):
        self._HostInfoList = HostInfoList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("HostInfoList") is not None:
            self._HostInfoList = []
            for item in params.get("HostInfoList"):
                obj = HostTagInfo()
                obj._deserialize(item)
                self._HostInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeHostLoginListRequest(AbstractModel):
    """DescribeHostLoginList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Quuid - String - required: no - CVM UUID</li>
<li>Uuid - String - required: no - CWPP unique UUID</li>
<li>MachineName - String - required: no - host alias</li>
<li>Ip - String - required: no - host IP</li>
<li>InstanceID - String - required: no - host instance ID</li>
<li>SrcIp - String - required: no - filter by source IP</li>
<li>UserName - String - required: no - filter by username</li>
<li>Status - int - required: no - status filtering: 1: normal log-in; 5: whitelisted; 14: processed; 15: ignored</li>
<li>LoginTimeBegin - String - required: no - filter by modification time; start time</li>
<li>LoginTimeEnd - String - required: no - filter by modification time; end time</li>
<li>RiskLevel - int - required: no - status filtering: 0: high-risk; 1: suspicious</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :type Order: str
        :param _By: Sorting field: LoginTime - occurrence time
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Number of items to be returned. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Quuid - String - required: no - CVM UUID</li>
<li>Uuid - String - required: no - CWPP unique UUID</li>
<li>MachineName - String - required: no - host alias</li>
<li>Ip - String - required: no - host IP</li>
<li>InstanceID - String - required: no - host instance ID</li>
<li>SrcIp - String - required: no - filter by source IP</li>
<li>UserName - String - required: no - filter by username</li>
<li>Status - int - required: no - status filtering: 1: normal log-in; 5: whitelisted; 14: processed; 15: ignored</li>
<li>LoginTimeBegin - String - required: no - filter by modification time; start time</li>
<li>LoginTimeEnd - String - required: no - filter by modification time; end time</li>
<li>RiskLevel - int - required: no - status filtering: 0: high-risk; 1: suspicious</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: LoginTime - occurrence time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeHostLoginListResponse(AbstractModel):
    """DescribeHostLoginList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _HostLoginList: Log-in an audit list
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostLoginList: list of HostLoginList
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._HostLoginList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def HostLoginList(self):
        """Log-in an audit list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of HostLoginList
        """
        return self._HostLoginList

    @HostLoginList.setter
    def HostLoginList(self, HostLoginList):
        self._HostLoginList = HostLoginList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("HostLoginList") is not None:
            self._HostLoginList = []
            for item in params.get("HostLoginList"):
                obj = HostLoginList()
                obj._deserialize(item)
                self._HostLoginList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeHotVulTopRequest(AbstractModel):
    """DescribeHotVulTop request structure.

    """


class DescribeHotVulTopResponse(AbstractModel):
    """DescribeHotVulTop response structure.

    """

    def __init__(self):
        r"""
        :param _List: Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulStoreListInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulStoreListInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulStoreListInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIgnoreBaselineRuleRequest(AbstractModel):
    """DescribeIgnoreBaselineRule request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum quantity is 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _RuleName: Detection item name
        :type RuleName: str
        """
        self._Limit = None
        self._Offset = None
        self._RuleName = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum quantity is 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def RuleName(self):
        """Detection item name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._RuleName = params.get("RuleName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIgnoreBaselineRuleResponse(AbstractModel):
    """DescribeIgnoreBaselineRule response structure.

    """

    def __init__(self):
        r"""
        :param _IgnoreBaselineRuleList: List of ignored baseline check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type IgnoreBaselineRuleList: list of IgnoreBaselineRule
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IgnoreBaselineRuleList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def IgnoreBaselineRuleList(self):
        """List of ignored baseline check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of IgnoreBaselineRule
        """
        return self._IgnoreBaselineRuleList

    @IgnoreBaselineRuleList.setter
    def IgnoreBaselineRuleList(self, IgnoreBaselineRuleList):
        self._IgnoreBaselineRuleList = IgnoreBaselineRuleList

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("IgnoreBaselineRuleList") is not None:
            self._IgnoreBaselineRuleList = []
            for item in params.get("IgnoreBaselineRuleList"):
                obj = IgnoreBaselineRule()
                obj._deserialize(item)
                self._IgnoreBaselineRuleList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeIgnoreHostAndItemConfigRequest(AbstractModel):
    """DescribeIgnoreHostAndItemConfig request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>ItemId - int64 - whether required: no - item ID</i>
<li>RuleId - int64 - whether required: no - rule ID</li>
<li>HostId - string - whether required: no - host ID</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """<li>ItemId - int64 - whether required: no - item ID</i>
<li>RuleId - int64 - whether required: no - rule ID</li>
<li>HostId - string - whether required: no - host ID</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIgnoreHostAndItemConfigResponse(AbstractModel):
    """DescribeIgnoreHostAndItemConfig response structure.

    """

    def __init__(self):
        r"""
        :param _ItemSet: Affected detection items
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemSet: list of BaselineItemInfo
        :param _HostSet: Affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostSet: list of BaselineHost
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ItemSet = None
        self._HostSet = None
        self._RequestId = None

    @property
    def ItemSet(self):
        """Affected detection items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineItemInfo
        """
        return self._ItemSet

    @ItemSet.setter
    def ItemSet(self, ItemSet):
        self._ItemSet = ItemSet

    @property
    def HostSet(self):
        """Affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of BaselineHost
        """
        return self._HostSet

    @HostSet.setter
    def HostSet(self, HostSet):
        self._HostSet = HostSet

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ItemSet") is not None:
            self._ItemSet = []
            for item in params.get("ItemSet"):
                obj = BaselineItemInfo()
                obj._deserialize(item)
                self._ItemSet.append(obj)
        if params.get("HostSet") is not None:
            self._HostSet = []
            for item in params.get("HostSet"):
                obj = BaselineHost()
                obj._deserialize(item)
                self._HostSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIgnoreRuleEffectHostListRequest(AbstractModel):
    """DescribeIgnoreRuleEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum quantity is 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _RuleId: Detection Item ID
        :type RuleId: int
        :param _Filters: Filter criteria
<li>AliasName - String - host alias</li>
        :type Filters: list of Filters
        :param _TagNames: Host tag name
        :type TagNames: list of str
        """
        self._Limit = None
        self._Offset = None
        self._RuleId = None
        self._Filters = None
        self._TagNames = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum quantity is 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def RuleId(self):
        """Detection Item ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def Filters(self):
        """Filter criteria
<li>AliasName - String - host alias</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagNames(self):
        """Host tag name
        :rtype: list of str
        """
        return self._TagNames

    @TagNames.setter
    def TagNames(self, TagNames):
        self._TagNames = TagNames


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._RuleId = params.get("RuleId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._TagNames = params.get("TagNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIgnoreRuleEffectHostListResponse(AbstractModel):
    """DescribeIgnoreRuleEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _IgnoreRuleEffectHostList: List of hosts affected by ignored check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type IgnoreRuleEffectHostList: list of IgnoreRuleEffectHostInfo
        :param _TotalCount: Total number of records for paging query
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IgnoreRuleEffectHostList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def IgnoreRuleEffectHostList(self):
        """List of hosts affected by ignored check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of IgnoreRuleEffectHostInfo
        """
        return self._IgnoreRuleEffectHostList

    @IgnoreRuleEffectHostList.setter
    def IgnoreRuleEffectHostList(self, IgnoreRuleEffectHostList):
        self._IgnoreRuleEffectHostList = IgnoreRuleEffectHostList

    @property
    def TotalCount(self):
        """Total number of records for paging query
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("IgnoreRuleEffectHostList") is not None:
            self._IgnoreRuleEffectHostList = []
            for item in params.get("IgnoreRuleEffectHostList"):
                obj = IgnoreRuleEffectHostInfo()
                obj._deserialize(item)
                self._IgnoreRuleEffectHostList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeIndexListRequest(AbstractModel):
    """DescribeIndexList request structure.

    """


class DescribeIndexListResponse(AbstractModel):
    """DescribeIndexList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: ES index information
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """ES index information
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeJavaMemShellInfoRequest(AbstractModel):
    """DescribeJavaMemShellInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeJavaMemShellInfoResponse(AbstractModel):
    """DescribeJavaMemShellInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Info: Java webshell event details
Note: This field may return null, indicating that no valid values can be obtained.
        :type Info: :class:`tencentcloud.cwp.v20180228.models.JavaMemShellDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        """Java webshell event details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.JavaMemShellDetail`
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = JavaMemShellDetail()
            self._Info._deserialize(params.get("Info"))
        self._RequestId = params.get("RequestId")


class DescribeJavaMemShellListRequest(AbstractModel):
    """DescribeJavaMemShellList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Keywords: IP or host name for fuzzy query; Type or status for precise match; CreateBeginTime, CreateEndTime for time period query
        :type Filters: list of Filters
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """Filtering criteria: Keywords: IP or host name for fuzzy query; Type or status for precise match; CreateBeginTime, CreateEndTime for time period query
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeJavaMemShellListResponse(AbstractModel):
    """DescribeJavaMemShellList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Event list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of JavaMemShellInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Event list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of JavaMemShellInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = JavaMemShellInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeJavaMemShellPluginInfoRequest(AbstractModel):
    """DescribeJavaMemShellPluginInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter Criteria: Exact match of Pid, fuzzy match of MainClass
        :type Filters: list of Filters
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter Criteria: Exact match of Pid, fuzzy match of MainClass
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeJavaMemShellPluginInfoResponse(AbstractModel):
    """DescribeJavaMemShellPluginInfo response structure.

    """

    def __init__(self):
        r"""
        :param _List: Java Memory Trojan Plugin List
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of JavaMemShellPluginInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Java Memory Trojan Plugin List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of JavaMemShellPluginInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = JavaMemShellPluginInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeJavaMemShellPluginListRequest(AbstractModel):
    """DescribeJavaMemShellPluginList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter Criteria: Keywords: Fuzzy query of IP or host name, JavaShellStatus, exact match of Exception
        :type Filters: list of Filters
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """Filter Criteria: Keywords: Fuzzy query of IP or host name, JavaShellStatus, exact match of Exception
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeJavaMemShellPluginListResponse(AbstractModel):
    """DescribeJavaMemShellPluginList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Java Memory Trojan Plugin List
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of JavaMemShellPluginSetting
        :param _TotalCount: Total
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Java Memory Trojan Plugin List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of JavaMemShellPluginSetting
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = JavaMemShellPluginSetting()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeLicenseBindListRequest(AbstractModel):
    """DescribeLicenseBindList request structure.

    """

    def __init__(self):
        r"""
        :param _LicenseId: Authorization ID
        :type LicenseId: int
        :param _LicenseType: Authorization type
        :type LicenseType: int
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _Filters: <li>InstanceID, IP,

and MachineName for fuzzy search</li>
        :type Filters: list of Filters
        :param _Limit: Limit number, 10 by default.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        """
        self._LicenseId = None
        self._LicenseType = None
        self._ResourceId = None
        self._Filters = None
        self._Limit = None
        self._Offset = None

    @property
    def LicenseId(self):
        """Authorization ID
        :rtype: int
        """
        return self._LicenseId

    @LicenseId.setter
    def LicenseId(self, LicenseId):
        self._LicenseId = LicenseId

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def Filters(self):
        """<li>InstanceID, IP,

and MachineName for fuzzy search</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit number, 10 by default.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._LicenseId = params.get("LicenseId")
        self._LicenseType = params.get("LicenseType")
        self._ResourceId = params.get("ResourceId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLicenseBindListResponse(AbstractModel):
    """DescribeLicenseBindList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: List of bound machines
        :type List: list of LicenseBindDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of bound machines
        :rtype: list of LicenseBindDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = LicenseBindDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLicenseBindScheduleRequest(AbstractModel):
    """DescribeLicenseBindSchedule request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        :param _Limit: Limit number, 10 by default.
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Filters: Filter parameters
Status - binding progress status. 0 - in progress; 1 - completed; 2 - failed
        :type Filters: list of Filter
        """
        self._TaskId = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Limit(self):
        """Limit number, 10 by default.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter parameters
Status - binding progress status. 0 - in progress; 1 - completed; 2 - failed
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLicenseBindScheduleResponse(AbstractModel):
    """DescribeLicenseBindSchedule response structure.

    """

    def __init__(self):
        r"""
        :param _Schedule: Progress
        :type Schedule: int
        :param _List: Bound Task Details
        :type List: list of LicenseBindTaskDetail
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Schedule = None
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Schedule(self):
        """Progress
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def List(self):
        """Bound Task Details
        :rtype: list of LicenseBindTaskDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Schedule = params.get("Schedule")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = LicenseBindTaskDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeLicenseGeneralRequest(AbstractModel):
    """DescribeLicenseGeneral request structure.

    """


class DescribeLicenseGeneralResponse(AbstractModel):
    """DescribeLicenseGeneral response structure.

    """

    def __init__(self):
        r"""
        :param _LicenseCnt: Total number of authorizations (including those that are isolated, expired, and in other states)
        :type LicenseCnt: int
        :param _AvailableLicenseCnt: Number of available authorizations
        :type AvailableLicenseCnt: int
        :param _AvailableProVersionLicenseCnt: Number of available Professional Edition authorizations (including those in postpaid mode)
        :type AvailableProVersionLicenseCnt: int
        :param _AvailableFlagshipVersionLicenseCnt: Number of available Ultimate Edition authorizations
        :type AvailableFlagshipVersionLicenseCnt: int
        :param _NearExpiryLicenseCnt: Number of authorizations about to expire (no more than 15 days left)
        :type NearExpiryLicenseCnt: int
        :param _ExpireLicenseCnt: Number of expired authorizations (excluding deleted ones)
        :type ExpireLicenseCnt: int
        :param _AutoOpenStatus: Automatic upgrade enabling status. True: enabled; false: disabled. Default value: false.
        :type AutoOpenStatus: bool
        :param _ProtectType: PROVERSION_POSTPAY: Pro Edition - postpaid; PROVERSION_PREPAY: Pro edition - prepaid; FLAGSHIP_PREPAY: Ultimate Edition - prepaid.
        :type ProtectType: str
        :param _IsOpenStatusHistory: Whether automatic upgrade has been enabled before
        :type IsOpenStatusHistory: bool
        :param _UsedLicenseCnt: Number of used authorizations
        :type UsedLicenseCnt: int
        :param _NotExpiredLicenseCnt: Number of authorizations that have not expired
        :type NotExpiredLicenseCnt: int
        :param _FlagshipVersionLicenseCnt: Total number of Ultimate Edition authorizations (valid orders)
        :type FlagshipVersionLicenseCnt: int
        :param _ProVersionLicenseCnt: Total number of Pro Edition authorizations (valid orders)
        :type ProVersionLicenseCnt: int
        :param _CwpVersionLicenseCnt: Total number of Inclusive Edition authorizations (those of valid orders)
        :type CwpVersionLicenseCnt: int
        :param _AvailableLHLicenseCnt: Number of available Inclusive Edition authorizations
        :type AvailableLHLicenseCnt: int
        :param _AutoRepurchaseSwitch: Auto-purchase switch, true for ON, false for OFF
        :type AutoRepurchaseSwitch: bool
        :param _AutoRepurchaseRenewSwitch: Is auto-renewal required for auto-purchase orders, true for ON, false for OFF
        :type AutoRepurchaseRenewSwitch: bool
        :param _DestroyOrderNum: Number of terminated orders
        :type DestroyOrderNum: int
        :param _RepurchaseRenewSwitch: Whether automatic renewal is enabled. True: enabled; false: disabled.
        :type RepurchaseRenewSwitch: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LicenseCnt = None
        self._AvailableLicenseCnt = None
        self._AvailableProVersionLicenseCnt = None
        self._AvailableFlagshipVersionLicenseCnt = None
        self._NearExpiryLicenseCnt = None
        self._ExpireLicenseCnt = None
        self._AutoOpenStatus = None
        self._ProtectType = None
        self._IsOpenStatusHistory = None
        self._UsedLicenseCnt = None
        self._NotExpiredLicenseCnt = None
        self._FlagshipVersionLicenseCnt = None
        self._ProVersionLicenseCnt = None
        self._CwpVersionLicenseCnt = None
        self._AvailableLHLicenseCnt = None
        self._AutoRepurchaseSwitch = None
        self._AutoRepurchaseRenewSwitch = None
        self._DestroyOrderNum = None
        self._RepurchaseRenewSwitch = None
        self._RequestId = None

    @property
    def LicenseCnt(self):
        """Total number of authorizations (including those that are isolated, expired, and in other states)
        :rtype: int
        """
        return self._LicenseCnt

    @LicenseCnt.setter
    def LicenseCnt(self, LicenseCnt):
        self._LicenseCnt = LicenseCnt

    @property
    def AvailableLicenseCnt(self):
        """Number of available authorizations
        :rtype: int
        """
        return self._AvailableLicenseCnt

    @AvailableLicenseCnt.setter
    def AvailableLicenseCnt(self, AvailableLicenseCnt):
        self._AvailableLicenseCnt = AvailableLicenseCnt

    @property
    def AvailableProVersionLicenseCnt(self):
        """Number of available Professional Edition authorizations (including those in postpaid mode)
        :rtype: int
        """
        return self._AvailableProVersionLicenseCnt

    @AvailableProVersionLicenseCnt.setter
    def AvailableProVersionLicenseCnt(self, AvailableProVersionLicenseCnt):
        self._AvailableProVersionLicenseCnt = AvailableProVersionLicenseCnt

    @property
    def AvailableFlagshipVersionLicenseCnt(self):
        """Number of available Ultimate Edition authorizations
        :rtype: int
        """
        return self._AvailableFlagshipVersionLicenseCnt

    @AvailableFlagshipVersionLicenseCnt.setter
    def AvailableFlagshipVersionLicenseCnt(self, AvailableFlagshipVersionLicenseCnt):
        self._AvailableFlagshipVersionLicenseCnt = AvailableFlagshipVersionLicenseCnt

    @property
    def NearExpiryLicenseCnt(self):
        """Number of authorizations about to expire (no more than 15 days left)
        :rtype: int
        """
        return self._NearExpiryLicenseCnt

    @NearExpiryLicenseCnt.setter
    def NearExpiryLicenseCnt(self, NearExpiryLicenseCnt):
        self._NearExpiryLicenseCnt = NearExpiryLicenseCnt

    @property
    def ExpireLicenseCnt(self):
        """Number of expired authorizations (excluding deleted ones)
        :rtype: int
        """
        return self._ExpireLicenseCnt

    @ExpireLicenseCnt.setter
    def ExpireLicenseCnt(self, ExpireLicenseCnt):
        self._ExpireLicenseCnt = ExpireLicenseCnt

    @property
    def AutoOpenStatus(self):
        """Automatic upgrade enabling status. True: enabled; false: disabled. Default value: false.
        :rtype: bool
        """
        return self._AutoOpenStatus

    @AutoOpenStatus.setter
    def AutoOpenStatus(self, AutoOpenStatus):
        self._AutoOpenStatus = AutoOpenStatus

    @property
    def ProtectType(self):
        """PROVERSION_POSTPAY: Pro Edition - postpaid; PROVERSION_PREPAY: Pro edition - prepaid; FLAGSHIP_PREPAY: Ultimate Edition - prepaid.
        :rtype: str
        """
        return self._ProtectType

    @ProtectType.setter
    def ProtectType(self, ProtectType):
        self._ProtectType = ProtectType

    @property
    def IsOpenStatusHistory(self):
        """Whether automatic upgrade has been enabled before
        :rtype: bool
        """
        return self._IsOpenStatusHistory

    @IsOpenStatusHistory.setter
    def IsOpenStatusHistory(self, IsOpenStatusHistory):
        self._IsOpenStatusHistory = IsOpenStatusHistory

    @property
    def UsedLicenseCnt(self):
        """Number of used authorizations
        :rtype: int
        """
        return self._UsedLicenseCnt

    @UsedLicenseCnt.setter
    def UsedLicenseCnt(self, UsedLicenseCnt):
        self._UsedLicenseCnt = UsedLicenseCnt

    @property
    def NotExpiredLicenseCnt(self):
        """Number of authorizations that have not expired
        :rtype: int
        """
        return self._NotExpiredLicenseCnt

    @NotExpiredLicenseCnt.setter
    def NotExpiredLicenseCnt(self, NotExpiredLicenseCnt):
        self._NotExpiredLicenseCnt = NotExpiredLicenseCnt

    @property
    def FlagshipVersionLicenseCnt(self):
        """Total number of Ultimate Edition authorizations (valid orders)
        :rtype: int
        """
        return self._FlagshipVersionLicenseCnt

    @FlagshipVersionLicenseCnt.setter
    def FlagshipVersionLicenseCnt(self, FlagshipVersionLicenseCnt):
        self._FlagshipVersionLicenseCnt = FlagshipVersionLicenseCnt

    @property
    def ProVersionLicenseCnt(self):
        """Total number of Pro Edition authorizations (valid orders)
        :rtype: int
        """
        return self._ProVersionLicenseCnt

    @ProVersionLicenseCnt.setter
    def ProVersionLicenseCnt(self, ProVersionLicenseCnt):
        self._ProVersionLicenseCnt = ProVersionLicenseCnt

    @property
    def CwpVersionLicenseCnt(self):
        """Total number of Inclusive Edition authorizations (those of valid orders)
        :rtype: int
        """
        return self._CwpVersionLicenseCnt

    @CwpVersionLicenseCnt.setter
    def CwpVersionLicenseCnt(self, CwpVersionLicenseCnt):
        self._CwpVersionLicenseCnt = CwpVersionLicenseCnt

    @property
    def AvailableLHLicenseCnt(self):
        """Number of available Inclusive Edition authorizations
        :rtype: int
        """
        return self._AvailableLHLicenseCnt

    @AvailableLHLicenseCnt.setter
    def AvailableLHLicenseCnt(self, AvailableLHLicenseCnt):
        self._AvailableLHLicenseCnt = AvailableLHLicenseCnt

    @property
    def AutoRepurchaseSwitch(self):
        """Auto-purchase switch, true for ON, false for OFF
        :rtype: bool
        """
        return self._AutoRepurchaseSwitch

    @AutoRepurchaseSwitch.setter
    def AutoRepurchaseSwitch(self, AutoRepurchaseSwitch):
        self._AutoRepurchaseSwitch = AutoRepurchaseSwitch

    @property
    def AutoRepurchaseRenewSwitch(self):
        """Is auto-renewal required for auto-purchase orders, true for ON, false for OFF
        :rtype: bool
        """
        return self._AutoRepurchaseRenewSwitch

    @AutoRepurchaseRenewSwitch.setter
    def AutoRepurchaseRenewSwitch(self, AutoRepurchaseRenewSwitch):
        self._AutoRepurchaseRenewSwitch = AutoRepurchaseRenewSwitch

    @property
    def DestroyOrderNum(self):
        """Number of terminated orders
        :rtype: int
        """
        return self._DestroyOrderNum

    @DestroyOrderNum.setter
    def DestroyOrderNum(self, DestroyOrderNum):
        self._DestroyOrderNum = DestroyOrderNum

    @property
    def RepurchaseRenewSwitch(self):
        """Whether automatic renewal is enabled. True: enabled; false: disabled.
        :rtype: bool
        """
        return self._RepurchaseRenewSwitch

    @RepurchaseRenewSwitch.setter
    def RepurchaseRenewSwitch(self, RepurchaseRenewSwitch):
        self._RepurchaseRenewSwitch = RepurchaseRenewSwitch

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LicenseCnt = params.get("LicenseCnt")
        self._AvailableLicenseCnt = params.get("AvailableLicenseCnt")
        self._AvailableProVersionLicenseCnt = params.get("AvailableProVersionLicenseCnt")
        self._AvailableFlagshipVersionLicenseCnt = params.get("AvailableFlagshipVersionLicenseCnt")
        self._NearExpiryLicenseCnt = params.get("NearExpiryLicenseCnt")
        self._ExpireLicenseCnt = params.get("ExpireLicenseCnt")
        self._AutoOpenStatus = params.get("AutoOpenStatus")
        self._ProtectType = params.get("ProtectType")
        self._IsOpenStatusHistory = params.get("IsOpenStatusHistory")
        self._UsedLicenseCnt = params.get("UsedLicenseCnt")
        self._NotExpiredLicenseCnt = params.get("NotExpiredLicenseCnt")
        self._FlagshipVersionLicenseCnt = params.get("FlagshipVersionLicenseCnt")
        self._ProVersionLicenseCnt = params.get("ProVersionLicenseCnt")
        self._CwpVersionLicenseCnt = params.get("CwpVersionLicenseCnt")
        self._AvailableLHLicenseCnt = params.get("AvailableLHLicenseCnt")
        self._AutoRepurchaseSwitch = params.get("AutoRepurchaseSwitch")
        self._AutoRepurchaseRenewSwitch = params.get("AutoRepurchaseRenewSwitch")
        self._DestroyOrderNum = params.get("DestroyOrderNum")
        self._RepurchaseRenewSwitch = params.get("RepurchaseRenewSwitch")
        self._RequestId = params.get("RequestId")


class DescribeLicenseListRequest(AbstractModel):
    """DescribeLicenseList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Take the intersection when filtering with multiple conditions.
<li> LicenseStatus authorization status information: 0 - not used; 1 - partially used; 2 - used up; 3 - unavailable; 4 - available</li>
<li> BuyTime: time of purchase</li>
<li> LicenseType authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription</li>
<li>DeadlineStatus expiration status: NotExpired -not expired; expire - expired (including terminated); nearexpiry - about to expire</li>
<li>ResourceId resource ID</li>
<li>Keywords IP filtering</li>
<li>PayMode payment mode. 0: pay-as-you-go; 1: monthly subscription</li>
<li>OrderStatus order status. 1: normal; 2: isolated; 3: terminated</li>
<li>DealNames sub-order number, with a maximum length of 10, exceeding this will result in a failure.</li>
        :type Filters: list of Filters
        :param _Limit: Limit number, 10 by default.
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Tags: Tag filtering; filter by the platform's tag capabilities. In this case, you should pass in the tag key and tag value as an object.
        :type Tags: list of Tags
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Tags = None

    @property
    def Filters(self):
        """Take the intersection when filtering with multiple conditions.
<li> LicenseStatus authorization status information: 0 - not used; 1 - partially used; 2 - used up; 3 - unavailable; 4 - available</li>
<li> BuyTime: time of purchase</li>
<li> LicenseType authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription</li>
<li>DeadlineStatus expiration status: NotExpired -not expired; expire - expired (including terminated); nearexpiry - about to expire</li>
<li>ResourceId resource ID</li>
<li>Keywords IP filtering</li>
<li>PayMode payment mode. 0: pay-as-you-go; 1: monthly subscription</li>
<li>OrderStatus order status. 1: normal; 2: isolated; 3: terminated</li>
<li>DealNames sub-order number, with a maximum length of 10, exceeding this will result in a failure.</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit number, 10 by default.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Tags(self):
        """Tag filtering; filter by the platform's tag capabilities. In this case, you should pass in the tag key and tag value as an object.
        :rtype: list of Tags
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tags()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLicenseListResponse(AbstractModel):
    """DescribeLicenseList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Authorization quantity list information
        :type List: list of LicenseDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Authorization quantity list information
        :rtype: list of LicenseDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = LicenseDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLicenseRequest(AbstractModel):
    """DescribeLicense request structure.

    """


class DescribeLicenseResponse(AbstractModel):
    """DescribeLicense response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeLicenseWhiteConfigRequest(AbstractModel):
    """DescribeLicenseWhiteConfig request structure.

    """

    def __init__(self):
        r"""
        :param _RuleName: Rule name. For example, cwp.
        :type RuleName: str
        """
        self._RuleName = None

    @property
    def RuleName(self):
        """Rule name. For example, cwp.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLicenseWhiteConfigResponse(AbstractModel):
    """DescribeLicenseWhiteConfig response structure.

    """

    def __init__(self):
        r"""
        :param _FlagShip: Ultimate Edition configuration information
        :type FlagShip: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        :param _Professional: Pro Edition configuration information
        :type Professional: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        :param _PrattWhitney: Inclusive Edition configuration information
        :type PrattWhitney: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FlagShip = None
        self._Professional = None
        self._PrattWhitney = None
        self._RequestId = None

    @property
    def FlagShip(self):
        """Ultimate Edition configuration information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        """
        return self._FlagShip

    @FlagShip.setter
    def FlagShip(self, FlagShip):
        self._FlagShip = FlagShip

    @property
    def Professional(self):
        """Pro Edition configuration information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        """
        return self._Professional

    @Professional.setter
    def Professional(self, Professional):
        self._Professional = Professional

    @property
    def PrattWhitney(self):
        """Inclusive Edition configuration information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VersionWhiteConfig`
        """
        return self._PrattWhitney

    @PrattWhitney.setter
    def PrattWhitney(self, PrattWhitney):
        self._PrattWhitney = PrattWhitney

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FlagShip") is not None:
            self._FlagShip = VersionWhiteConfig()
            self._FlagShip._deserialize(params.get("FlagShip"))
        if params.get("Professional") is not None:
            self._Professional = VersionWhiteConfig()
            self._Professional._deserialize(params.get("Professional"))
        if params.get("PrattWhitney") is not None:
            self._PrattWhitney = VersionWhiteConfig()
            self._PrattWhitney._deserialize(params.get("PrattWhitney"))
        self._RequestId = params.get("RequestId")


class DescribeLogDeliveryKafkaOptionsRequest(AbstractModel):
    """DescribeLogDeliveryKafkaOptions request structure.

    """

    def __init__(self):
        r"""
        :param _InstanceID: Kafka instance ID
        :type InstanceID: str
        """
        self._InstanceID = None

    @property
    def InstanceID(self):
        """Kafka instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID


    def _deserialize(self, params):
        self._InstanceID = params.get("InstanceID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLogDeliveryKafkaOptionsResponse(AbstractModel):
    """DescribeLogDeliveryKafkaOptions response structure.

    """

    def __init__(self):
        r"""
        :param _InstanceList: Instance list
        :type InstanceList: list of CKafkaInstanceInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._InstanceList = None
        self._RequestId = None

    @property
    def InstanceList(self):
        """Instance list
        :rtype: list of CKafkaInstanceInfo
        """
        return self._InstanceList

    @InstanceList.setter
    def InstanceList(self, InstanceList):
        self._InstanceList = InstanceList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("InstanceList") is not None:
            self._InstanceList = []
            for item in params.get("InstanceList"):
                obj = CKafkaInstanceInfo()
                obj._deserialize(item)
                self._InstanceList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLogExportsRequest(AbstractModel):
    """DescribeLogExports request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Paging offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of entries per page. Default value: 20. Maximum value: 100.
        :type Limit: int
        """
        self._Offset = None
        self._Limit = None

    @property
    def Offset(self):
        """Paging offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of entries per page. Default value: 20. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLogExportsResponse(AbstractModel):
    """DescribeLogExports response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _Exports: List of exported logs
        :type Exports: list of ExportInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._Exports = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Exports(self):
        """List of exported logs
        :rtype: list of ExportInfo
        """
        return self._Exports

    @Exports.setter
    def Exports(self, Exports):
        self._Exports = Exports

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Exports") is not None:
            self._Exports = []
            for item in params.get("Exports"):
                obj = ExportInfo()
                obj._deserialize(item)
                self._Exports.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLogHistogramRequest(AbstractModel):
    """DescribeLogHistogram request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time of logs to be queried, which is a Unix timestamp in milliseconds
        :type StartTime: int
        :param _EndTime: End time of logs to be queried, which is a Unix timestamp in milliseconds
        :type EndTime: int
        :param _QueryString: Query statement
        :type QueryString: str
        :param _Interval: Time interval, in ms
        :type Interval: int
        """
        self._StartTime = None
        self._EndTime = None
        self._QueryString = None
        self._Interval = None

    @property
    def StartTime(self):
        """Start time of logs to be queried, which is a Unix timestamp in milliseconds
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time of logs to be queried, which is a Unix timestamp in milliseconds
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def QueryString(self):
        """Query statement
        :rtype: str
        """
        return self._QueryString

    @QueryString.setter
    def QueryString(self, QueryString):
        self._QueryString = QueryString

    @property
    def Interval(self):
        """Time interval, in ms
        :rtype: int
        """
        return self._Interval

    @Interval.setter
    def Interval(self, Interval):
        self._Interval = Interval


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._QueryString = params.get("QueryString")
        self._Interval = params.get("Interval")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLogHistogramResponse(AbstractModel):
    """DescribeLogHistogram response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Result details of statistics within the period
        :type Data: list of LogHistogram
        :param _Period: Statistical period (unit: ms)
        :type Period: int
        :param _TotalCount: Total number of logs that hit the keywords
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._Period = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Data(self):
        """Result details of statistics within the period
        :rtype: list of LogHistogram
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def Period(self):
        """Statistical period (unit: ms)
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def TotalCount(self):
        """Total number of logs that hit the keywords
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = LogHistogram()
                obj._deserialize(item)
                self._Data.append(obj)
        self._Period = params.get("Period")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeLogIndexRequest(AbstractModel):
    """DescribeLogIndex request structure.

    """


class DescribeLogIndexResponse(AbstractModel):
    """DescribeLogIndex response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Whether effective
        :type Status: bool
        :param _Rule: Index rule
        :type Rule: :class:`tencentcloud.cwp.v20180228.models.RuleInfo`
        :param _ModifyTime: Index modification time, which is initially the index creation time.
        :type ModifyTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._Rule = None
        self._ModifyTime = None
        self._RequestId = None

    @property
    def Status(self):
        """Whether effective
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Rule(self):
        """Index rule
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RuleInfo`
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def ModifyTime(self):
        """Index modification time, which is initially the index creation time.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        if params.get("Rule") is not None:
            self._Rule = RuleInfo()
            self._Rule._deserialize(params.get("Rule"))
        self._ModifyTime = params.get("ModifyTime")
        self._RequestId = params.get("RequestId")


class DescribeLogKafkaDeliverInfoRequest(AbstractModel):
    """DescribeLogKafkaDeliverInfo request structure.

    """


class DescribeLogKafkaDeliverInfoResponse(AbstractModel):
    """DescribeLogKafkaDeliverInfo response structure.

    """

    def __init__(self):
        r"""
        :param _KafkaEnvName: Instance environment
        :type KafkaEnvName: str
        :param _KafkaId: Instance ID
        :type KafkaId: str
        :param _Zone: Region
        :type Zone: str
        :param _Az: Availability zone
        :type Az: str
        :param _VpcId: Network
        :type VpcId: str
        :param _SubnetId: Subnet
        :type SubnetId: str
        :param _AccessType: Access method. 1: public network domain name access; 2: support environment access
        :type AccessType: int
        :param _AccessAddr: Access address
        :type AccessAddr: str
        :param _DeliverStatus: Shipping status. 1: healthy; 2: alarm; 3: abnormal
        :type DeliverStatus: int
        :param _InsVersion: Kafka edition
        :type InsVersion: str
        :param _BandWidth: Peak bandwidth
        :type BandWidth: int
        :param _DiskSize: Disk capacity
        :type DiskSize: int
        :param _Username: Username
        :type Username: str
        :param _DeliverTypeDetails: xx
        :type DeliverTypeDetails: list of DeliverTypeDetails
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._KafkaEnvName = None
        self._KafkaId = None
        self._Zone = None
        self._Az = None
        self._VpcId = None
        self._SubnetId = None
        self._AccessType = None
        self._AccessAddr = None
        self._DeliverStatus = None
        self._InsVersion = None
        self._BandWidth = None
        self._DiskSize = None
        self._Username = None
        self._DeliverTypeDetails = None
        self._RequestId = None

    @property
    def KafkaEnvName(self):
        """Instance environment
        :rtype: str
        """
        return self._KafkaEnvName

    @KafkaEnvName.setter
    def KafkaEnvName(self, KafkaEnvName):
        self._KafkaEnvName = KafkaEnvName

    @property
    def KafkaId(self):
        """Instance ID
        :rtype: str
        """
        return self._KafkaId

    @KafkaId.setter
    def KafkaId(self, KafkaId):
        self._KafkaId = KafkaId

    @property
    def Zone(self):
        """Region
        :rtype: str
        """
        return self._Zone

    @Zone.setter
    def Zone(self, Zone):
        self._Zone = Zone

    @property
    def Az(self):
        """Availability zone
        :rtype: str
        """
        return self._Az

    @Az.setter
    def Az(self, Az):
        self._Az = Az

    @property
    def VpcId(self):
        """Network
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """Subnet
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def AccessType(self):
        """Access method. 1: public network domain name access; 2: support environment access
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType

    @property
    def AccessAddr(self):
        """Access address
        :rtype: str
        """
        return self._AccessAddr

    @AccessAddr.setter
    def AccessAddr(self, AccessAddr):
        self._AccessAddr = AccessAddr

    @property
    def DeliverStatus(self):
        """Shipping status. 1: healthy; 2: alarm; 3: abnormal
        :rtype: int
        """
        return self._DeliverStatus

    @DeliverStatus.setter
    def DeliverStatus(self, DeliverStatus):
        self._DeliverStatus = DeliverStatus

    @property
    def InsVersion(self):
        """Kafka edition
        :rtype: str
        """
        return self._InsVersion

    @InsVersion.setter
    def InsVersion(self, InsVersion):
        self._InsVersion = InsVersion

    @property
    def BandWidth(self):
        """Peak bandwidth
        :rtype: int
        """
        return self._BandWidth

    @BandWidth.setter
    def BandWidth(self, BandWidth):
        self._BandWidth = BandWidth

    @property
    def DiskSize(self):
        """Disk capacity
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def DeliverTypeDetails(self):
        """xx
        :rtype: list of DeliverTypeDetails
        """
        return self._DeliverTypeDetails

    @DeliverTypeDetails.setter
    def DeliverTypeDetails(self, DeliverTypeDetails):
        self._DeliverTypeDetails = DeliverTypeDetails

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._KafkaEnvName = params.get("KafkaEnvName")
        self._KafkaId = params.get("KafkaId")
        self._Zone = params.get("Zone")
        self._Az = params.get("Az")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._AccessType = params.get("AccessType")
        self._AccessAddr = params.get("AccessAddr")
        self._DeliverStatus = params.get("DeliverStatus")
        self._InsVersion = params.get("InsVersion")
        self._BandWidth = params.get("BandWidth")
        self._DiskSize = params.get("DiskSize")
        self._Username = params.get("Username")
        if params.get("DeliverTypeDetails") is not None:
            self._DeliverTypeDetails = []
            for item in params.get("DeliverTypeDetails"):
                obj = DeliverTypeDetails()
                obj._deserialize(item)
                self._DeliverTypeDetails.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLogStorageConfigRequest(AbstractModel):
    """DescribeLogStorageConfig request structure.

    """


class DescribeLogStorageConfigResponse(AbstractModel):
    """DescribeLogStorageConfig response structure.

    """

    def __init__(self):
        r"""
        :param _Type: Storage type. The value is an array of strings.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: list of str
        :param _Period: Log retention days. The value 3640 means the retention days are not limited.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Period: int
        :param _PeriodModifyCount: Count of period changes in this month
Note: This field may return null, indicating that no valid values can be obtained.
        :type PeriodModifyCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Type = None
        self._Period = None
        self._PeriodModifyCount = None
        self._RequestId = None

    @property
    def Type(self):
        """Storage type. The value is an array of strings.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Period(self):
        """Log retention days. The value 3640 means the retention days are not limited.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def PeriodModifyCount(self):
        """Count of period changes in this month
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PeriodModifyCount

    @PeriodModifyCount.setter
    def PeriodModifyCount(self, PeriodModifyCount):
        self._PeriodModifyCount = PeriodModifyCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Period = params.get("Period")
        self._PeriodModifyCount = params.get("PeriodModifyCount")
        self._RequestId = params.get("RequestId")


class DescribeLogStorageRecordRequest(AbstractModel):
    """DescribeLogStorageRecord request structure.

    """


class DescribeLogStorageRecordResponse(AbstractModel):
    """DescribeLogStorageRecord response structure.

    """

    def __init__(self):
        r"""
        :param _Records: Storage amount record
Note: This field may return null, indicating that no valid values can be obtained.
        :type Records: list of LogStorageRecord
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Records = None
        self._RequestId = None

    @property
    def Records(self):
        """Storage amount record
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of LogStorageRecord
        """
        return self._Records

    @Records.setter
    def Records(self, Records):
        self._Records = Records

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Records") is not None:
            self._Records = []
            for item in params.get("Records"):
                obj = LogStorageRecord()
                obj._deserialize(item)
                self._Records.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLogStorageStatisticRequest(AbstractModel):
    """DescribeLogStorageStatistic request structure.

    """


class DescribeLogStorageStatisticResponse(AbstractModel):
    """DescribeLogStorageStatistic response structure.

    """

    def __init__(self):
        r"""
        :param _TotalSize: Total capacity (unit: GB)
        :type TotalSize: int
        :param _UsedSize: Used capacity (unit: GB)
        :type UsedSize: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalSize = None
        self._UsedSize = None
        self._RequestId = None

    @property
    def TotalSize(self):
        """Total capacity (unit: GB)
        :rtype: int
        """
        return self._TotalSize

    @TotalSize.setter
    def TotalSize(self, TotalSize):
        self._TotalSize = TotalSize

    @property
    def UsedSize(self):
        """Used capacity (unit: GB)
        :rtype: int
        """
        return self._UsedSize

    @UsedSize.setter
    def UsedSize(self, UsedSize):
        self._UsedSize = UsedSize

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalSize = params.get("TotalSize")
        self._UsedSize = params.get("UsedSize")
        self._RequestId = params.get("RequestId")


class DescribeLogTypeRequest(AbstractModel):
    """DescribeLogType request structure.

    """


class DescribeLogTypeResponse(AbstractModel):
    """DescribeLogType response structure.

    """

    def __init__(self):
        r"""
        :param _Data: CLS log type information
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """CLS log type information
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeLoginWhiteCombinedListRequest(AbstractModel):
    """DescribeLoginWhiteCombinedList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>UserName - String - required: no - filter by username</li>
<li>ModifyBeginTime - String - required: no - filter by modification time; start time</li>
<li>ModifyEndTime - String - required: no - Filter by modification time; end time</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>UserName - String - required: no - filter by username</li>
<li>ModifyBeginTime - String - required: no - filter by modification time; start time</li>
<li>ModifyEndTime - String - required: no - Filter by modification time; end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLoginWhiteCombinedListResponse(AbstractModel):
    """DescribeLoginWhiteCombinedList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _LoginWhiteCombinedInfos: List of allowlists after merge
Note: This field may return null, indicating that no valid values can be obtained.
        :type LoginWhiteCombinedInfos: list of LoginWhiteCombinedInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._LoginWhiteCombinedInfos = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def LoginWhiteCombinedInfos(self):
        """List of allowlists after merge
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of LoginWhiteCombinedInfo
        """
        return self._LoginWhiteCombinedInfos

    @LoginWhiteCombinedInfos.setter
    def LoginWhiteCombinedInfos(self, LoginWhiteCombinedInfos):
        self._LoginWhiteCombinedInfos = LoginWhiteCombinedInfos

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("LoginWhiteCombinedInfos") is not None:
            self._LoginWhiteCombinedInfos = []
            for item in params.get("LoginWhiteCombinedInfos"):
                obj = LoginWhiteCombinedInfo()
                obj._deserialize(item)
                self._LoginWhiteCombinedInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLoginWhiteHostListRequest(AbstractModel):
    """DescribeLoginWhiteHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Allowlist ID
        :type Id: int
        :param _Limit: Number of results to be returned. Maximum value: 1000.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filtering criteria <li>IpOrAlias - String - required: no - host IP or alias for filtering</li>
        :type Filters: list of AssetFilters
        """
        self._Id = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Id(self):
        """Allowlist ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Limit(self):
        """Number of results to be returned. Maximum value: 1000.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria <li>IpOrAlias - String - required: no - host IP or alias for filtering</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLoginWhiteHostListResponse(AbstractModel):
    """DescribeLoginWhiteHostList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _Hosts: Server list
        :type Hosts: list of HostDesc
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._Hosts = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Hosts(self):
        """Server list
        :rtype: list of HostDesc
        """
        return self._Hosts

    @Hosts.setter
    def Hosts(self, Hosts):
        self._Hosts = Hosts

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Hosts") is not None:
            self._Hosts = []
            for item in params.get("Hosts"):
                obj = HostDesc()
                obj._deserialize(item)
                self._Hosts.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLoginWhiteListRequest(AbstractModel):
    """DescribeLoginWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returned entries. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - keyword for search </li>
<li>UserName - String - required: no - username for filtering </li>
<li>ModifyBeginTime - String - required: no - modification start time for filtering </li>
<li>ModifyEndTime - String - required: no - modification end time for filtering </li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Number of returned entries. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - keyword for search </li>
<li>UserName - String - required: no - username for filtering </li>
<li>ModifyBeginTime - String - required: no - modification start time for filtering </li>
<li>ModifyEndTime - String - required: no - modification end time for filtering </li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLoginWhiteListResponse(AbstractModel):
    """DescribeLoginWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _LoginWhiteLists: Cross-region log-in allowlist array
        :type LoginWhiteLists: list of LoginWhiteLists
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._LoginWhiteLists = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def LoginWhiteLists(self):
        """Cross-region log-in allowlist array
        :rtype: list of LoginWhiteLists
        """
        return self._LoginWhiteLists

    @LoginWhiteLists.setter
    def LoginWhiteLists(self, LoginWhiteLists):
        self._LoginWhiteLists = LoginWhiteLists

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("LoginWhiteLists") is not None:
            self._LoginWhiteLists = []
            for item in params.get("LoginWhiteLists"):
                obj = LoginWhiteLists()
                obj._deserialize(item)
                self._LoginWhiteLists.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineClearHistoryRequest(AbstractModel):
    """DescribeMachineClearHistory request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
Return entries that match both Keywords and TimeBetween when multiple filtering criteria are used
<li> Keywords: instance name, private IP address, public IP address</li>
<li> TimeBetween: time interval</li>
        :type Filters: list of Filters
        :param _Limit: Limit Entries, 10 by default, up to 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Ascending order, ASC, Descending order DESC, ASC by default.
        :type Order: str
        :param _By: AgentLastOfflineTime: last offline time of client
AutoClearTime: clearing time
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria
Return entries that match both Keywords and TimeBetween when multiple filtering criteria are used
<li> Keywords: instance name, private IP address, public IP address</li>
<li> TimeBetween: time interval</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Ascending order, ASC, Descending order DESC, ASC by default.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """AgentLastOfflineTime: last offline time of client
AutoClearTime: clearing time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineClearHistoryResponse(AbstractModel):
    """DescribeMachineClearHistory response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of entries
        :type TotalCount: int
        :param _List: List data
        :type List: list of MachineClearHistory
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of entries
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List data
        :rtype: list of MachineClearHistory
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MachineClearHistory()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineDefenseCntRequest(AbstractModel):
    """DescribeMachineDefenseCnt request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>Uuids - String - required: no - host UUID</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filtering criteria
<li>Uuids - String - required: no - host UUID</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineDefenseCntResponse(AbstractModel):
    """DescribeMachineDefenseCnt response structure.

    """

    def __init__(self):
        r"""
        :param _AttackLogs: Attack detection statistics
        :type AttackLogs: int
        :param _FileTamper: Core file monitoring statistics
        :type FileTamper: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AttackLogs = None
        self._FileTamper = None
        self._RequestId = None

    @property
    def AttackLogs(self):
        """Attack detection statistics
        :rtype: int
        """
        return self._AttackLogs

    @AttackLogs.setter
    def AttackLogs(self, AttackLogs):
        self._AttackLogs = AttackLogs

    @property
    def FileTamper(self):
        """Core file monitoring statistics
        :rtype: int
        """
        return self._FileTamper

    @FileTamper.setter
    def FileTamper(self, FileTamper):
        self._FileTamper = FileTamper

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AttackLogs = params.get("AttackLogs")
        self._FileTamper = params.get("FileTamper")
        self._RequestId = params.get("RequestId")


class DescribeMachineFileTamperRulesRequest(AbstractModel):
    """DescribeMachineFileTamperRules request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        """
        self._Uuid = None
        self._Offset = None
        self._Limit = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineFileTamperRulesResponse(AbstractModel):
    """DescribeMachineFileTamperRules response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Query Details of Host-related Core File Monitoring Rules
        :type List: list of MachineFileTamperRule
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Query Details of Host-related Core File Monitoring Rules
        :rtype: list of MachineFileTamperRule
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MachineFileTamperRule()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineGeneralRequest(AbstractModel):
    """DescribeMachineGeneral request structure.

    """


class DescribeMachineGeneralResponse(AbstractModel):
    """DescribeMachineGeneral response structure.

    """

    def __init__(self):
        r"""
        :param _MachineCnt: Total number of assets
        :type MachineCnt: int
        :param _TencentCloudMachineCnt: Number of Tencent Cloud machines
        :type TencentCloudMachineCnt: int
        :param _AliCloudMachineCnt: Number of Alibaba Cloud machines
        :type AliCloudMachineCnt: int
        :param _BaiduCloudMachineCnt: Number of Baidu Cloud machines
        :type BaiduCloudMachineCnt: int
        :param _IDCMachineCnt: Number of IDC machines
        :type IDCMachineCnt: int
        :param _OtherCloudMachineCnt: Number of machines from other cloud service vendors
        :type OtherCloudMachineCnt: int
        :param _ProtectMachineCnt: Number of protected machines
        :type ProtectMachineCnt: int
        :param _BaseMachineCnt: Number of protected Basic Edition machines
        :type BaseMachineCnt: int
        :param _SpecialtyMachineCnt: Number of protected Pro Edition machines
        :type SpecialtyMachineCnt: int
        :param _FlagshipMachineCnt: Number of protected Ultimate Edition machines
        :type FlagshipMachineCnt: int
        :param _RiskMachineCnt: Number of risky machines
        :type RiskMachineCnt: int
        :param _CompareYesterdayRiskMachineCnt: Number of new risky machines compared with that yesterday
        :type CompareYesterdayRiskMachineCnt: int
        :param _CompareYesterdayNotProtectMachineCnt: Number of new unprotected machines compared with that yesterday
        :type CompareYesterdayNotProtectMachineCnt: int
        :param _CompareYesterdayDeadlineMachineCnt: Number of new machines about to expire compared with that yesterday
        :type CompareYesterdayDeadlineMachineCnt: int
        :param _DeadlineMachineCnt: Number of machines about to expire
        :type DeadlineMachineCnt: int
        :param _NotProtectMachineCnt: Number of unprotected machines
        :type NotProtectMachineCnt: int
        :param _LHGeneralDiscountCnt: Number of protected Inclusive Edition machines (Lighthouse machines)
        :type LHGeneralDiscountCnt: int
        :param _CompareYesterdayMachineCnt: Number of new hosts compared with that yesterday
        :type CompareYesterdayMachineCnt: int
        :param _MachineDestroyAfterOfflineHours: Auto-cleanup Time, maximum 720 hours, minimum 0, 0 by default, 0=OFF
        :type MachineDestroyAfterOfflineHours: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MachineCnt = None
        self._TencentCloudMachineCnt = None
        self._AliCloudMachineCnt = None
        self._BaiduCloudMachineCnt = None
        self._IDCMachineCnt = None
        self._OtherCloudMachineCnt = None
        self._ProtectMachineCnt = None
        self._BaseMachineCnt = None
        self._SpecialtyMachineCnt = None
        self._FlagshipMachineCnt = None
        self._RiskMachineCnt = None
        self._CompareYesterdayRiskMachineCnt = None
        self._CompareYesterdayNotProtectMachineCnt = None
        self._CompareYesterdayDeadlineMachineCnt = None
        self._DeadlineMachineCnt = None
        self._NotProtectMachineCnt = None
        self._LHGeneralDiscountCnt = None
        self._CompareYesterdayMachineCnt = None
        self._MachineDestroyAfterOfflineHours = None
        self._RequestId = None

    @property
    def MachineCnt(self):
        """Total number of assets
        :rtype: int
        """
        return self._MachineCnt

    @MachineCnt.setter
    def MachineCnt(self, MachineCnt):
        self._MachineCnt = MachineCnt

    @property
    def TencentCloudMachineCnt(self):
        warnings.warn("parameter `TencentCloudMachineCnt` is deprecated", DeprecationWarning) 

        """Number of Tencent Cloud machines
        :rtype: int
        """
        return self._TencentCloudMachineCnt

    @TencentCloudMachineCnt.setter
    def TencentCloudMachineCnt(self, TencentCloudMachineCnt):
        warnings.warn("parameter `TencentCloudMachineCnt` is deprecated", DeprecationWarning) 

        self._TencentCloudMachineCnt = TencentCloudMachineCnt

    @property
    def AliCloudMachineCnt(self):
        warnings.warn("parameter `AliCloudMachineCnt` is deprecated", DeprecationWarning) 

        """Number of Alibaba Cloud machines
        :rtype: int
        """
        return self._AliCloudMachineCnt

    @AliCloudMachineCnt.setter
    def AliCloudMachineCnt(self, AliCloudMachineCnt):
        warnings.warn("parameter `AliCloudMachineCnt` is deprecated", DeprecationWarning) 

        self._AliCloudMachineCnt = AliCloudMachineCnt

    @property
    def BaiduCloudMachineCnt(self):
        warnings.warn("parameter `BaiduCloudMachineCnt` is deprecated", DeprecationWarning) 

        """Number of Baidu Cloud machines
        :rtype: int
        """
        return self._BaiduCloudMachineCnt

    @BaiduCloudMachineCnt.setter
    def BaiduCloudMachineCnt(self, BaiduCloudMachineCnt):
        warnings.warn("parameter `BaiduCloudMachineCnt` is deprecated", DeprecationWarning) 

        self._BaiduCloudMachineCnt = BaiduCloudMachineCnt

    @property
    def IDCMachineCnt(self):
        warnings.warn("parameter `IDCMachineCnt` is deprecated", DeprecationWarning) 

        """Number of IDC machines
        :rtype: int
        """
        return self._IDCMachineCnt

    @IDCMachineCnt.setter
    def IDCMachineCnt(self, IDCMachineCnt):
        warnings.warn("parameter `IDCMachineCnt` is deprecated", DeprecationWarning) 

        self._IDCMachineCnt = IDCMachineCnt

    @property
    def OtherCloudMachineCnt(self):
        warnings.warn("parameter `OtherCloudMachineCnt` is deprecated", DeprecationWarning) 

        """Number of machines from other cloud service vendors
        :rtype: int
        """
        return self._OtherCloudMachineCnt

    @OtherCloudMachineCnt.setter
    def OtherCloudMachineCnt(self, OtherCloudMachineCnt):
        warnings.warn("parameter `OtherCloudMachineCnt` is deprecated", DeprecationWarning) 

        self._OtherCloudMachineCnt = OtherCloudMachineCnt

    @property
    def ProtectMachineCnt(self):
        """Number of protected machines
        :rtype: int
        """
        return self._ProtectMachineCnt

    @ProtectMachineCnt.setter
    def ProtectMachineCnt(self, ProtectMachineCnt):
        self._ProtectMachineCnt = ProtectMachineCnt

    @property
    def BaseMachineCnt(self):
        """Number of protected Basic Edition machines
        :rtype: int
        """
        return self._BaseMachineCnt

    @BaseMachineCnt.setter
    def BaseMachineCnt(self, BaseMachineCnt):
        self._BaseMachineCnt = BaseMachineCnt

    @property
    def SpecialtyMachineCnt(self):
        """Number of protected Pro Edition machines
        :rtype: int
        """
        return self._SpecialtyMachineCnt

    @SpecialtyMachineCnt.setter
    def SpecialtyMachineCnt(self, SpecialtyMachineCnt):
        self._SpecialtyMachineCnt = SpecialtyMachineCnt

    @property
    def FlagshipMachineCnt(self):
        """Number of protected Ultimate Edition machines
        :rtype: int
        """
        return self._FlagshipMachineCnt

    @FlagshipMachineCnt.setter
    def FlagshipMachineCnt(self, FlagshipMachineCnt):
        self._FlagshipMachineCnt = FlagshipMachineCnt

    @property
    def RiskMachineCnt(self):
        """Number of risky machines
        :rtype: int
        """
        return self._RiskMachineCnt

    @RiskMachineCnt.setter
    def RiskMachineCnt(self, RiskMachineCnt):
        self._RiskMachineCnt = RiskMachineCnt

    @property
    def CompareYesterdayRiskMachineCnt(self):
        """Number of new risky machines compared with that yesterday
        :rtype: int
        """
        return self._CompareYesterdayRiskMachineCnt

    @CompareYesterdayRiskMachineCnt.setter
    def CompareYesterdayRiskMachineCnt(self, CompareYesterdayRiskMachineCnt):
        self._CompareYesterdayRiskMachineCnt = CompareYesterdayRiskMachineCnt

    @property
    def CompareYesterdayNotProtectMachineCnt(self):
        """Number of new unprotected machines compared with that yesterday
        :rtype: int
        """
        return self._CompareYesterdayNotProtectMachineCnt

    @CompareYesterdayNotProtectMachineCnt.setter
    def CompareYesterdayNotProtectMachineCnt(self, CompareYesterdayNotProtectMachineCnt):
        self._CompareYesterdayNotProtectMachineCnt = CompareYesterdayNotProtectMachineCnt

    @property
    def CompareYesterdayDeadlineMachineCnt(self):
        """Number of new machines about to expire compared with that yesterday
        :rtype: int
        """
        return self._CompareYesterdayDeadlineMachineCnt

    @CompareYesterdayDeadlineMachineCnt.setter
    def CompareYesterdayDeadlineMachineCnt(self, CompareYesterdayDeadlineMachineCnt):
        self._CompareYesterdayDeadlineMachineCnt = CompareYesterdayDeadlineMachineCnt

    @property
    def DeadlineMachineCnt(self):
        """Number of machines about to expire
        :rtype: int
        """
        return self._DeadlineMachineCnt

    @DeadlineMachineCnt.setter
    def DeadlineMachineCnt(self, DeadlineMachineCnt):
        self._DeadlineMachineCnt = DeadlineMachineCnt

    @property
    def NotProtectMachineCnt(self):
        """Number of unprotected machines
        :rtype: int
        """
        return self._NotProtectMachineCnt

    @NotProtectMachineCnt.setter
    def NotProtectMachineCnt(self, NotProtectMachineCnt):
        self._NotProtectMachineCnt = NotProtectMachineCnt

    @property
    def LHGeneralDiscountCnt(self):
        """Number of protected Inclusive Edition machines (Lighthouse machines)
        :rtype: int
        """
        return self._LHGeneralDiscountCnt

    @LHGeneralDiscountCnt.setter
    def LHGeneralDiscountCnt(self, LHGeneralDiscountCnt):
        self._LHGeneralDiscountCnt = LHGeneralDiscountCnt

    @property
    def CompareYesterdayMachineCnt(self):
        """Number of new hosts compared with that yesterday
        :rtype: int
        """
        return self._CompareYesterdayMachineCnt

    @CompareYesterdayMachineCnt.setter
    def CompareYesterdayMachineCnt(self, CompareYesterdayMachineCnt):
        self._CompareYesterdayMachineCnt = CompareYesterdayMachineCnt

    @property
    def MachineDestroyAfterOfflineHours(self):
        """Auto-cleanup Time, maximum 720 hours, minimum 0, 0 by default, 0=OFF
        :rtype: int
        """
        return self._MachineDestroyAfterOfflineHours

    @MachineDestroyAfterOfflineHours.setter
    def MachineDestroyAfterOfflineHours(self, MachineDestroyAfterOfflineHours):
        self._MachineDestroyAfterOfflineHours = MachineDestroyAfterOfflineHours

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MachineCnt = params.get("MachineCnt")
        self._TencentCloudMachineCnt = params.get("TencentCloudMachineCnt")
        self._AliCloudMachineCnt = params.get("AliCloudMachineCnt")
        self._BaiduCloudMachineCnt = params.get("BaiduCloudMachineCnt")
        self._IDCMachineCnt = params.get("IDCMachineCnt")
        self._OtherCloudMachineCnt = params.get("OtherCloudMachineCnt")
        self._ProtectMachineCnt = params.get("ProtectMachineCnt")
        self._BaseMachineCnt = params.get("BaseMachineCnt")
        self._SpecialtyMachineCnt = params.get("SpecialtyMachineCnt")
        self._FlagshipMachineCnt = params.get("FlagshipMachineCnt")
        self._RiskMachineCnt = params.get("RiskMachineCnt")
        self._CompareYesterdayRiskMachineCnt = params.get("CompareYesterdayRiskMachineCnt")
        self._CompareYesterdayNotProtectMachineCnt = params.get("CompareYesterdayNotProtectMachineCnt")
        self._CompareYesterdayDeadlineMachineCnt = params.get("CompareYesterdayDeadlineMachineCnt")
        self._DeadlineMachineCnt = params.get("DeadlineMachineCnt")
        self._NotProtectMachineCnt = params.get("NotProtectMachineCnt")
        self._LHGeneralDiscountCnt = params.get("LHGeneralDiscountCnt")
        self._CompareYesterdayMachineCnt = params.get("CompareYesterdayMachineCnt")
        self._MachineDestroyAfterOfflineHours = params.get("MachineDestroyAfterOfflineHours")
        self._RequestId = params.get("RequestId")


class DescribeMachineLicenseDetailRequest(AbstractModel):
    """DescribeMachineLicenseDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Quuids: Host QUUID
        :type Quuids: list of str
        """
        self._Quuids = None

    @property
    def Quuids(self):
        """Host QUUID
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineLicenseDetailResponse(AbstractModel):
    """DescribeMachineLicenseDetail response structure.

    """

    def __init__(self):
        r"""
        :param _MachineLicense: Authorization information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineLicense: list of MachineLicenseDetail
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MachineLicense = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def MachineLicense(self):
        """Authorization information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineLicenseDetail
        """
        return self._MachineLicense

    @MachineLicense.setter
    def MachineLicense(self, MachineLicense):
        self._MachineLicense = MachineLicense

    @property
    def TotalCount(self):
        """Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MachineLicense") is not None:
            self._MachineLicense = []
            for item in params.get("MachineLicense"):
                obj = MachineLicenseDetail()
                obj._deserialize(item)
                self._MachineLicense.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMachineOsListRequest(AbstractModel):
    """DescribeMachineOsList request structure.

    """


class DescribeMachineOsListResponse(AbstractModel):
    """DescribeMachineOsList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Operating system list
        :type List: list of OsName
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Operating system list
        :rtype: list of OsName
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = OsName()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineRegionListRequest(AbstractModel):
    """DescribeMachineRegionList request structure.

    """


class DescribeMachineRegionListResponse(AbstractModel):
    """DescribeMachineRegionList response structure.

    """

    def __init__(self):
        r"""
        :param _RegionList: CVM type region list
        :type RegionList: list of RegionListDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RegionList = None
        self._RequestId = None

    @property
    def RegionList(self):
        """CVM type region list
        :rtype: list of RegionListDetail
        """
        return self._RegionList

    @RegionList.setter
    def RegionList(self, RegionList):
        self._RegionList = RegionList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RegionList") is not None:
            self._RegionList = []
            for item in params.get("RegionList"):
                obj = RegionListDetail()
                obj._deserialize(item)
                self._RegionList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineRegionsRequest(AbstractModel):
    """DescribeMachineRegions request structure.

    """


class DescribeMachineRegionsResponse(AbstractModel):
    """DescribeMachineRegions response structure.

    """

    def __init__(self):
        r"""
        :param _CVM: List of Cloud Virtual Machine regions
        :type CVM: list of RegionInfo
        :param _BM: List of BM machine regions
        :type BM: list of RegionInfo
        :param _LH: List of Lighthouse regions
        :type LH: list of RegionInfo
        :param _ECM: List of Edge Computing Machine regions
        :type ECM: list of RegionInfo
        :param _Other: List of Hybrid Cloud regions
        :type Other: list of RegionInfo
        :param _ALL: List of all regions (including above regions)
        :type ALL: list of RegionInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._CVM = None
        self._BM = None
        self._LH = None
        self._ECM = None
        self._Other = None
        self._ALL = None
        self._RequestId = None

    @property
    def CVM(self):
        """List of Cloud Virtual Machine regions
        :rtype: list of RegionInfo
        """
        return self._CVM

    @CVM.setter
    def CVM(self, CVM):
        self._CVM = CVM

    @property
    def BM(self):
        """List of BM machine regions
        :rtype: list of RegionInfo
        """
        return self._BM

    @BM.setter
    def BM(self, BM):
        self._BM = BM

    @property
    def LH(self):
        """List of Lighthouse regions
        :rtype: list of RegionInfo
        """
        return self._LH

    @LH.setter
    def LH(self, LH):
        self._LH = LH

    @property
    def ECM(self):
        """List of Edge Computing Machine regions
        :rtype: list of RegionInfo
        """
        return self._ECM

    @ECM.setter
    def ECM(self, ECM):
        self._ECM = ECM

    @property
    def Other(self):
        """List of Hybrid Cloud regions
        :rtype: list of RegionInfo
        """
        return self._Other

    @Other.setter
    def Other(self, Other):
        self._Other = Other

    @property
    def ALL(self):
        """List of all regions (including above regions)
        :rtype: list of RegionInfo
        """
        return self._ALL

    @ALL.setter
    def ALL(self, ALL):
        self._ALL = ALL

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CVM") is not None:
            self._CVM = []
            for item in params.get("CVM"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._CVM.append(obj)
        if params.get("BM") is not None:
            self._BM = []
            for item in params.get("BM"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._BM.append(obj)
        if params.get("LH") is not None:
            self._LH = []
            for item in params.get("LH"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._LH.append(obj)
        if params.get("ECM") is not None:
            self._ECM = []
            for item in params.get("ECM"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._ECM.append(obj)
        if params.get("Other") is not None:
            self._Other = []
            for item in params.get("Other"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._Other.append(obj)
        if params.get("ALL") is not None:
            self._ALL = []
            for item in params.get("ALL"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._ALL.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMachineRiskCntRequest(AbstractModel):
    """DescribeMachineRiskCnt request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Uuids- String - required: no - host uuid</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter criteria
<li>Uuids- String - required: no - host uuid</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineRiskCntResponse(AbstractModel):
    """DescribeMachineRiskCnt response structure.

    """

    def __init__(self):
        r"""
        :param _HostLogin: Cross-region log-in
        :type HostLogin: int
        :param _BruteAttack: Password cracking
        :type BruteAttack: int
        :param _MaliciousRequest: Malicious request
        :type MaliciousRequest: int
        :param _ReverseShell: Reverse Shell
        :type ReverseShell: int
        :param _Bash: High-risk command
        :type Bash: int
        :param _PrivilegeEscalation: Local privilege escalation
        :type PrivilegeEscalation: int
        :param _Malware: Trojan
        :type Malware: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HostLogin = None
        self._BruteAttack = None
        self._MaliciousRequest = None
        self._ReverseShell = None
        self._Bash = None
        self._PrivilegeEscalation = None
        self._Malware = None
        self._RequestId = None

    @property
    def HostLogin(self):
        """Cross-region log-in
        :rtype: int
        """
        return self._HostLogin

    @HostLogin.setter
    def HostLogin(self, HostLogin):
        self._HostLogin = HostLogin

    @property
    def BruteAttack(self):
        """Password cracking
        :rtype: int
        """
        return self._BruteAttack

    @BruteAttack.setter
    def BruteAttack(self, BruteAttack):
        self._BruteAttack = BruteAttack

    @property
    def MaliciousRequest(self):
        """Malicious request
        :rtype: int
        """
        return self._MaliciousRequest

    @MaliciousRequest.setter
    def MaliciousRequest(self, MaliciousRequest):
        self._MaliciousRequest = MaliciousRequest

    @property
    def ReverseShell(self):
        """Reverse Shell
        :rtype: int
        """
        return self._ReverseShell

    @ReverseShell.setter
    def ReverseShell(self, ReverseShell):
        self._ReverseShell = ReverseShell

    @property
    def Bash(self):
        """High-risk command
        :rtype: int
        """
        return self._Bash

    @Bash.setter
    def Bash(self, Bash):
        self._Bash = Bash

    @property
    def PrivilegeEscalation(self):
        """Local privilege escalation
        :rtype: int
        """
        return self._PrivilegeEscalation

    @PrivilegeEscalation.setter
    def PrivilegeEscalation(self, PrivilegeEscalation):
        self._PrivilegeEscalation = PrivilegeEscalation

    @property
    def Malware(self):
        """Trojan
        :rtype: int
        """
        return self._Malware

    @Malware.setter
    def Malware(self, Malware):
        self._Malware = Malware

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HostLogin = params.get("HostLogin")
        self._BruteAttack = params.get("BruteAttack")
        self._MaliciousRequest = params.get("MaliciousRequest")
        self._ReverseShell = params.get("ReverseShell")
        self._Bash = params.get("Bash")
        self._PrivilegeEscalation = params.get("PrivilegeEscalation")
        self._Malware = params.get("Malware")
        self._RequestId = params.get("RequestId")


class DescribeMachineSnapshotRequest(AbstractModel):
    """DescribeMachineSnapshot request structure.

    """

    def __init__(self):
        r"""
        :param _Quuids: CVM ID collection
        :type Quuids: list of str
        :param _Type: Inquiry snapshot type: 0 - latest one; 1 - all
        :type Type: int
        :param _Limit: Number of Pagination
        :type Limit: int
        :param _Offset: Pagination step size
        :type Offset: int
        """
        self._Quuids = None
        self._Type = None
        self._Limit = None
        self._Offset = None

    @property
    def Quuids(self):
        """CVM ID collection
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def Type(self):
        """Inquiry snapshot type: 0 - latest one; 1 - all
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Limit(self):
        """Number of Pagination
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination step size
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Quuids = params.get("Quuids")
        self._Type = params.get("Type")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachineSnapshotResponse(AbstractModel):
    """DescribeMachineSnapshot response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of host snapshot
        :type List: list of MachineSnapshotInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _SnapshotCheck: Whether snapshots created in the last 24 hours exist
        :type SnapshotCheck: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._SnapshotCheck = None
        self._RequestId = None

    @property
    def List(self):
        """List of host snapshot
        :rtype: list of MachineSnapshotInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def SnapshotCheck(self):
        """Whether snapshots created in the last 24 hours exist
        :rtype: bool
        """
        return self._SnapshotCheck

    @SnapshotCheck.setter
    def SnapshotCheck(self, SnapshotCheck):
        self._SnapshotCheck = SnapshotCheck

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MachineSnapshotInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._SnapshotCheck = params.get("SnapshotCheck")
        self._RequestId = params.get("RequestId")


class DescribeMachinesRequest(AbstractModel):
    """DescribeMachines request structure.

    """

    def __init__(self):
        r"""
        :param _MachineType: Type of the machine's zone
CVM: Cloud Virtual Machine
BM: BMECM: Edge Computing Machine
LH: Lighthouse
Other: Hybrid Cloud Zone
        :type MachineType: str
        :param _MachineRegion: Machine region. For example, ap-guangzhou and ap-shanghai.
        :type MachineRegion: str
        :param _Limit: Number of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>Names - String - required: no - query by instance name</li>
<li>InstanceIds - String - required: no - instance ID for query </li>
<li>Status - String - required: no - client online status (OFFLINE: offline/shut down | ONLINE: online | UNINSTALLED: not installed | AGENT_OFFLINE: agent offline | AGENT_SHUTDOWN: agent shut down)</li>
<li>Version - String required: no - current edition ( PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition | Flagship: Ultimate Edition | ProtectedMachines: Pro + Ultimate Editions)</li>
<li>Risk - String - required: no - risky host (yes)</li>
<li>Os - String - required: no - operating system (value of DescribeMachineOsList)</li>
Each filter criterion supports only one value.
<li>Quuid - String - required: no - CVM instance UUID. Maximum value: 100.</li>
<li>AddedOnTheFifteen - String required: no - whether to query only hosts added within the last 15 days (1: yes) </li>
<li> TagId - String required: no - query the list of hosts associated with the specified tag </li>
        :type Filters: list of Filter
        :param _ProjectIds: ID List of Businesses to which machines belong
        :type ProjectIds: list of int non-negative
        """
        self._MachineType = None
        self._MachineRegion = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ProjectIds = None

    @property
    def MachineType(self):
        """Type of the machine's zone
CVM: Cloud Virtual Machine
BM: BMECM: Edge Computing Machine
LH: Lighthouse
Other: Hybrid Cloud Zone
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineRegion(self):
        """Machine region. For example, ap-guangzhou and ap-shanghai.
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def Limit(self):
        """Number of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>Names - String - required: no - query by instance name</li>
<li>InstanceIds - String - required: no - instance ID for query </li>
<li>Status - String - required: no - client online status (OFFLINE: offline/shut down | ONLINE: online | UNINSTALLED: not installed | AGENT_OFFLINE: agent offline | AGENT_SHUTDOWN: agent shut down)</li>
<li>Version - String required: no - current edition ( PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition | Flagship: Ultimate Edition | ProtectedMachines: Pro + Ultimate Editions)</li>
<li>Risk - String - required: no - risky host (yes)</li>
<li>Os - String - required: no - operating system (value of DescribeMachineOsList)</li>
Each filter criterion supports only one value.
<li>Quuid - String - required: no - CVM instance UUID. Maximum value: 100.</li>
<li>AddedOnTheFifteen - String required: no - whether to query only hosts added within the last 15 days (1: yes) </li>
<li> TagId - String required: no - query the list of hosts associated with the specified tag </li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ProjectIds(self):
        """ID List of Businesses to which machines belong
        :rtype: list of int non-negative
        """
        return self._ProjectIds

    @ProjectIds.setter
    def ProjectIds(self, ProjectIds):
        self._ProjectIds = ProjectIds


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._MachineRegion = params.get("MachineRegion")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ProjectIds = params.get("ProjectIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachinesResponse(AbstractModel):
    """DescribeMachines response structure.

    """

    def __init__(self):
        r"""
        :param _Machines: List of hosts
        :type Machines: list of Machine
        :param _TotalCount: Number of hosts
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Machines = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Machines(self):
        """List of hosts
        :rtype: list of Machine
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines

    @property
    def TotalCount(self):
        """Number of hosts
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = Machine()
                obj._deserialize(item)
                self._Machines.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMachinesSimpleRequest(AbstractModel):
    """DescribeMachinesSimple request structure.

    """

    def __init__(self):
        r"""
        :param _MachineType: Type of the machine's zone
CVM: Cloud Virtual Machine
BM: BM
ECM: Edge Computing Machine
LH: Lighthouse
Other: Hybrid Cloud Zone
        :type MachineType: str
        :param _MachineRegion: Machine region. For example, ap-guangzhou and ap-shanghai.
        :type MachineRegion: str
        :param _Limit: Number of entries to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filtering criteria
<li>Keywords - String - required: no - keywords for querying </li>
<li>Version - String required: no - current protection edition ( PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition | Flagship: Ultimate Edition | ProtectedMachines: Pro + Ultimate Editions | UnFlagship: Non-Ultimate Edition | PRO_POST_PAY: Pro Edition in pay-as-you-go mode | PRO_PRE_PAY: Pro Edition in monthly subscription mode)</li>
<li>TagId - String - required: no - tag ID </li>
        :type Filters: list of Filter
        :param _ProjectIds: ID list of businesses to which machines belong
        :type ProjectIds: list of int non-negative
        """
        self._MachineType = None
        self._MachineRegion = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ProjectIds = None

    @property
    def MachineType(self):
        """Type of the machine's zone
CVM: Cloud Virtual Machine
BM: BM
ECM: Edge Computing Machine
LH: Lighthouse
Other: Hybrid Cloud Zone
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineRegion(self):
        """Machine region. For example, ap-guangzhou and ap-shanghai.
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def Limit(self):
        """Number of entries to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria
<li>Keywords - String - required: no - keywords for querying </li>
<li>Version - String required: no - current protection edition ( PRO_VERSION: Pro Edition | BASIC_VERSION: Basic Edition | Flagship: Ultimate Edition | ProtectedMachines: Pro + Ultimate Editions | UnFlagship: Non-Ultimate Edition | PRO_POST_PAY: Pro Edition in pay-as-you-go mode | PRO_PRE_PAY: Pro Edition in monthly subscription mode)</li>
<li>TagId - String - required: no - tag ID </li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ProjectIds(self):
        """ID list of businesses to which machines belong
        :rtype: list of int non-negative
        """
        return self._ProjectIds

    @ProjectIds.setter
    def ProjectIds(self, ProjectIds):
        self._ProjectIds = ProjectIds


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._MachineRegion = params.get("MachineRegion")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ProjectIds = params.get("ProjectIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMachinesSimpleResponse(AbstractModel):
    """DescribeMachinesSimple response structure.

    """

    def __init__(self):
        r"""
        :param _Machines: Host list
        :type Machines: list of MachineSimple
        :param _TotalCount: Number of Hosts
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Machines = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Machines(self):
        """Host list
        :rtype: list of MachineSimple
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines

    @property
    def TotalCount(self):
        """Number of Hosts
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = MachineSimple()
                obj._deserialize(item)
                self._Machines.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMalWareListRequest(AbstractModel):
    """DescribeMalWareList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status: 4 - pending; 5 -- trusted; 6 - isolated; 10 - isolation in progress; 11 - recovering from isolation; 14 - processed</li>
        :type Filters: list of Filter
        :param _By: Detection sorting CreateTime
        :type By: str
        :param _Order: Sorting method: ASC, DESC
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status: 4 - pending; 5 -- trusted; 6 - isolated; 10 - isolation in progress; 11 - recovering from isolation; 14 - processed</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        """Detection sorting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        """Sorting method: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMalWareListResponse(AbstractModel):
    """DescribeMalWareList response structure.

    """

    def __init__(self):
        r"""
        :param _MalWareList: List of Trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :type MalWareList: list of MalWareList
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MalWareList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def MalWareList(self):
        """List of Trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MalWareList
        """
        return self._MalWareList

    @MalWareList.setter
    def MalWareList(self, MalWareList):
        self._MalWareList = MalWareList

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MalWareList") is not None:
            self._MalWareList = []
            for item in params.get("MalWareList"):
                obj = MalWareList()
                obj._deserialize(item)
                self._MalWareList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMaliciousRequestWhiteListRequest(AbstractModel):
    """DescribeMaliciousRequestWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria

<li>Domain - String - baseline name</li>
        :type Filters: list of Filters
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria

<li>Domain - String - baseline name</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMaliciousRequestWhiteListResponse(AbstractModel):
    """DescribeMaliciousRequestWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of allowlist information
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of MaliciousRequestWhiteListInfo
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List of allowlist information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MaliciousRequestWhiteListInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MaliciousRequestWhiteListInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMalwareFileRequest(AbstractModel):
    """DescribeMalwareFile request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Trojan record ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Trojan record ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMalwareFileResponse(AbstractModel):
    """DescribeMalwareFile response structure.

    """

    def __init__(self):
        r"""
        :param _FileUrl: Trojan file download link
        :type FileUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FileUrl = None
        self._RequestId = None

    @property
    def FileUrl(self):
        """Trojan file download link
        :rtype: str
        """
        return self._FileUrl

    @FileUrl.setter
    def FileUrl(self, FileUrl):
        self._FileUrl = FileUrl

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FileUrl = params.get("FileUrl")
        self._RequestId = params.get("RequestId")


class DescribeMalwareInfoRequest(AbstractModel):
    """DescribeMalwareInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Unique ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMalwareInfoResponse(AbstractModel):
    """DescribeMalwareInfo response structure.

    """

    def __init__(self):
        r"""
        :param _MalwareInfo: Malicious file details
        :type MalwareInfo: :class:`tencentcloud.cwp.v20180228.models.MalwareInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MalwareInfo = None
        self._RequestId = None

    @property
    def MalwareInfo(self):
        """Malicious file details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MalwareInfo`
        """
        return self._MalwareInfo

    @MalwareInfo.setter
    def MalwareInfo(self, MalwareInfo):
        self._MalwareInfo = MalwareInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MalwareInfo") is not None:
            self._MalwareInfo = MalwareInfo()
            self._MalwareInfo._deserialize(params.get("MalwareInfo"))
        self._RequestId = params.get("RequestId")


class DescribeMalwareRiskOverviewRequest(AbstractModel):
    """DescribeMalwareRiskOverview request structure.

    """


class DescribeMalwareRiskOverviewResponse(AbstractModel):
    """DescribeMalwareRiskOverview response structure.

    """

    def __init__(self):
        r"""
        :param _Data: None
        :type Data: :class:`tencentcloud.cwp.v20180228.models.MalwareRiskOverview`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """None
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MalwareRiskOverview`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = MalwareRiskOverview()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeMalwareRiskWarningRequest(AbstractModel):
    """DescribeMalwareRiskWarning request structure.

    """


class DescribeMalwareRiskWarningResponse(AbstractModel):
    """DescribeMalwareRiskWarning response structure.

    """

    def __init__(self):
        r"""
        :param _IsCheckRisk: Whether automatic scanning is enabled. True: enabled; false: disabled.
        :type IsCheckRisk: bool
        :param _List: List of risky files
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of MalwareRisk
        :param _IsPop: Whether to show the prompt. True: show prompt; false: do not show prompt.
        :type IsPop: bool
        :param _ProcessList: Information on Abnormal Process List
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessList: list of MalwareRisk
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsCheckRisk = None
        self._List = None
        self._IsPop = None
        self._ProcessList = None
        self._RequestId = None

    @property
    def IsCheckRisk(self):
        """Whether automatic scanning is enabled. True: enabled; false: disabled.
        :rtype: bool
        """
        return self._IsCheckRisk

    @IsCheckRisk.setter
    def IsCheckRisk(self, IsCheckRisk):
        self._IsCheckRisk = IsCheckRisk

    @property
    def List(self):
        """List of risky files
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MalwareRisk
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def IsPop(self):
        """Whether to show the prompt. True: show prompt; false: do not show prompt.
        :rtype: bool
        """
        return self._IsPop

    @IsPop.setter
    def IsPop(self, IsPop):
        self._IsPop = IsPop

    @property
    def ProcessList(self):
        """Information on Abnormal Process List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MalwareRisk
        """
        return self._ProcessList

    @ProcessList.setter
    def ProcessList(self, ProcessList):
        self._ProcessList = ProcessList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsCheckRisk = params.get("IsCheckRisk")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MalwareRisk()
                obj._deserialize(item)
                self._List.append(obj)
        self._IsPop = params.get("IsPop")
        if params.get("ProcessList") is not None:
            self._ProcessList = []
            for item in params.get("ProcessList"):
                obj = MalwareRisk()
                obj._deserialize(item)
                self._ProcessList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMalwareTimingScanSettingRequest(AbstractModel):
    """DescribeMalwareTimingScanSetting request structure.

    """


class DescribeMalwareTimingScanSettingResponse(AbstractModel):
    """DescribeMalwareTimingScanSetting response structure.

    """

    def __init__(self):
        r"""
        :param _CheckPattern: Detection mode: 0 - full disk detection; 1 - rapid detection
        :type CheckPattern: int
        :param _StartTime: Detection cycle; start time
        :type StartTime: str
        :param _EndTime: Detection cycle; timeout end time
        :type EndTime: str
        :param _IsGlobal: Whether all servers: 1 - all; 2 - specified
        :type IsGlobal: int
        :param _QuuidList: When you select servers, host quuid is required.
Note: This field may return null, indicating that no valid values can be obtained.
        :type QuuidList: list of str
        :param _MonitoringPattern: Monitoring mode: 0 - standard; 1 - deep
        :type MonitoringPattern: int
        :param _Cycle: Cycle: 1 - daily
        :type Cycle: int
        :param _EnableScan: Scheduled detection switch: 0 - disable; 1 - enable
        :type EnableScan: int
        :param _Id: Unique ID
        :type Id: int
        :param _RealTimeMonitoring: Real-time monitoring: 0 - disable 1 - enable
        :type RealTimeMonitoring: int
        :param _AutoIsolation: Whether to isolate automatically: 1 - yes; 0 - no
        :type AutoIsolation: int
        :param _ClickTimeout: One-click scan timeout duration, such as 1800 seconds
        :type ClickTimeout: int
        :param _KillProcess: Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
        :type KillProcess: int
        :param _EngineType: 1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :type EngineType: int
        :param _EnableInspiredEngine: Heuristic Engine: 0 - OFF, 1 - ON
        :type EnableInspiredEngine: int
        :param _EnableMemShellScan: Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :type EnableMemShellScan: int
        :param _ProtectMode: Protection mode: 0 - standard; 1 - enhanced
        :type ProtectMode: int
        :param _ProtectFileScope: Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
        :type ProtectFileScope: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._CheckPattern = None
        self._StartTime = None
        self._EndTime = None
        self._IsGlobal = None
        self._QuuidList = None
        self._MonitoringPattern = None
        self._Cycle = None
        self._EnableScan = None
        self._Id = None
        self._RealTimeMonitoring = None
        self._AutoIsolation = None
        self._ClickTimeout = None
        self._KillProcess = None
        self._EngineType = None
        self._EnableInspiredEngine = None
        self._EnableMemShellScan = None
        self._ProtectMode = None
        self._ProtectFileScope = None
        self._RequestId = None

    @property
    def CheckPattern(self):
        """Detection mode: 0 - full disk detection; 1 - rapid detection
        :rtype: int
        """
        return self._CheckPattern

    @CheckPattern.setter
    def CheckPattern(self, CheckPattern):
        self._CheckPattern = CheckPattern

    @property
    def StartTime(self):
        """Detection cycle; start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Detection cycle; timeout end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def IsGlobal(self):
        """Whether all servers: 1 - all; 2 - specified
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def QuuidList(self):
        """When you select servers, host quuid is required.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def MonitoringPattern(self):
        """Monitoring mode: 0 - standard; 1 - deep
        :rtype: int
        """
        return self._MonitoringPattern

    @MonitoringPattern.setter
    def MonitoringPattern(self, MonitoringPattern):
        self._MonitoringPattern = MonitoringPattern

    @property
    def Cycle(self):
        """Cycle: 1 - daily
        :rtype: int
        """
        return self._Cycle

    @Cycle.setter
    def Cycle(self, Cycle):
        self._Cycle = Cycle

    @property
    def EnableScan(self):
        """Scheduled detection switch: 0 - disable; 1 - enable
        :rtype: int
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RealTimeMonitoring(self):
        """Real-time monitoring: 0 - disable 1 - enable
        :rtype: int
        """
        return self._RealTimeMonitoring

    @RealTimeMonitoring.setter
    def RealTimeMonitoring(self, RealTimeMonitoring):
        self._RealTimeMonitoring = RealTimeMonitoring

    @property
    def AutoIsolation(self):
        """Whether to isolate automatically: 1 - yes; 0 - no
        :rtype: int
        """
        return self._AutoIsolation

    @AutoIsolation.setter
    def AutoIsolation(self, AutoIsolation):
        self._AutoIsolation = AutoIsolation

    @property
    def ClickTimeout(self):
        """One-click scan timeout duration, such as 1800 seconds
        :rtype: int
        """
        return self._ClickTimeout

    @ClickTimeout.setter
    def ClickTimeout(self, ClickTimeout):
        self._ClickTimeout = ClickTimeout

    @property
    def KillProcess(self):
        """Whether to terminate the process: 1: terminate; 0: not terminate. It is effective only if automatic isolation is enabled.
        :rtype: int
        """
        return self._KillProcess

    @KillProcess.setter
    def KillProcess(self, KillProcess):
        self._KillProcess = KillProcess

    @property
    def EngineType(self):
        """1 - standard mode (only critical and high-risk are reported.); 2 - enhanced mode (critical, high-risk, and medium-risk are reported.); 3 - strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :rtype: int
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def EnableInspiredEngine(self):
        """Heuristic Engine: 0 - OFF, 1 - ON
        :rtype: int
        """
        return self._EnableInspiredEngine

    @EnableInspiredEngine.setter
    def EnableInspiredEngine(self, EnableInspiredEngine):
        self._EnableInspiredEngine = EnableInspiredEngine

    @property
    def EnableMemShellScan(self):
        """Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :rtype: int
        """
        return self._EnableMemShellScan

    @EnableMemShellScan.setter
    def EnableMemShellScan(self, EnableMemShellScan):
        self._EnableMemShellScan = EnableMemShellScan

    @property
    def ProtectMode(self):
        """Protection mode: 0 - standard; 1 - enhanced
        :rtype: int
        """
        return self._ProtectMode

    @ProtectMode.setter
    def ProtectMode(self, ProtectMode):
        self._ProtectMode = ProtectMode

    @property
    def ProtectFileScope(self):
        """Scope of detection: 0 - malicious files other than scripts; 1 - all malicious files
        :rtype: int
        """
        return self._ProtectFileScope

    @ProtectFileScope.setter
    def ProtectFileScope(self, ProtectFileScope):
        self._ProtectFileScope = ProtectFileScope

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CheckPattern = params.get("CheckPattern")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._IsGlobal = params.get("IsGlobal")
        self._QuuidList = params.get("QuuidList")
        self._MonitoringPattern = params.get("MonitoringPattern")
        self._Cycle = params.get("Cycle")
        self._EnableScan = params.get("EnableScan")
        self._Id = params.get("Id")
        self._RealTimeMonitoring = params.get("RealTimeMonitoring")
        self._AutoIsolation = params.get("AutoIsolation")
        self._ClickTimeout = params.get("ClickTimeout")
        self._KillProcess = params.get("KillProcess")
        self._EngineType = params.get("EngineType")
        self._EnableInspiredEngine = params.get("EnableInspiredEngine")
        self._EnableMemShellScan = params.get("EnableMemShellScan")
        self._ProtectMode = params.get("ProtectMode")
        self._ProtectFileScope = params.get("ProtectFileScope")
        self._RequestId = params.get("RequestId")


class DescribeMalwareWhiteListAffectListRequest(AbstractModel):
    """DescribeMalwareWhiteListAffectList request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListId: Allowlist rule ID
        :type WhiteListId: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Quantity of returns. The maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>HostIp - String - required: no - host IP query</li>
<li>FileName - String - required: no - file name query</li>
<li>FileDirectory - String - required: no - file directory query </li>
<li>FileExtension - String - required: no - file extension query</li>
<li>Mode - String - required: no - rule type: 0 MD5; 1 customize</li>
<li>Md5 - String - required: no - MD5 query</li>
        :type Filters: list of Filter
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting column: [CreateTime]
        :type By: str
        """
        self._WhiteListId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def WhiteListId(self):
        """Allowlist rule ID
        :rtype: int
        """
        return self._WhiteListId

    @WhiteListId.setter
    def WhiteListId(self, WhiteListId):
        self._WhiteListId = WhiteListId

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Quantity of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>HostIp - String - required: no - host IP query</li>
<li>FileName - String - required: no - file name query</li>
<li>FileDirectory - String - required: no - file directory query </li>
<li>FileExtension - String - required: no - file extension query</li>
<li>Mode - String - required: no - rule type: 0 MD5; 1 customize</li>
<li>Md5 - String - required: no - MD5 query</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting column: [CreateTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._WhiteListId = params.get("WhiteListId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMalwareWhiteListAffectListResponse(AbstractModel):
    """DescribeMalwareWhiteListAffectList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _AffectList: List of events affected by allowlist rules
Note: This field may return null, indicating that no valid values can be obtained.
        :type AffectList: list of MalwareWhiteListAffectEvent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AffectList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AffectList(self):
        """List of events affected by allowlist rules
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MalwareWhiteListAffectEvent
        """
        return self._AffectList

    @AffectList.setter
    def AffectList(self, AffectList):
        self._AffectList = AffectList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AffectList") is not None:
            self._AffectList = []
            for item in params.get("AffectList"):
                obj = MalwareWhiteListAffectEvent()
                obj._deserialize(item)
                self._AffectList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMalwareWhiteListRequest(AbstractModel):
    """DescribeMalwareWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Quantity of returns. The maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>HostIp - String - required: no - host IP query</li>
<li>FileName - String - required: no - file name query</li>
<li>FileDirectory - String - required: no - file directory query </li>
<li>FileExtension - String - required: no - file extension query</li>
<li>Mode - String - required: no - rule type: 0 MD5; 1 customize</li>
<li>Md5 - String - required: no - MD5 query</li>
        :type Filters: list of Filter
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting columns: [EventsCount]
        :type By: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Quantity of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>HostIp - String - required: no - host IP query</li>
<li>FileName - String - required: no - file name query</li>
<li>FileDirectory - String - required: no - file directory query </li>
<li>FileExtension - String - required: no - file extension query</li>
<li>Mode - String - required: no - rule type: 0 MD5; 1 customize</li>
<li>Md5 - String - required: no - MD5 query</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting columns: [EventsCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMalwareWhiteListResponse(AbstractModel):
    """DescribeMalwareWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _WhiteList: List of allowlist
        :type WhiteList: list of MalwareWhiteListInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._WhiteList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def WhiteList(self):
        """List of allowlist
        :rtype: list of MalwareWhiteListInfo
        """
        return self._WhiteList

    @WhiteList.setter
    def WhiteList(self, WhiteList):
        self._WhiteList = WhiteList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("WhiteList") is not None:
            self._WhiteList = []
            for item in params.get("WhiteList"):
                obj = MalwareWhiteListInfo()
                obj._deserialize(item)
                self._WhiteList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeMonthInspectionReportRequest(AbstractModel):
    """DescribeMonthInspectionReport request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination size
        :type Limit: int
        :param _Offset: Pagination step size
        :type Offset: int
        """
        self._Limit = None
        self._Offset = None

    @property
    def Limit(self):
        """Pagination size
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination step size
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMonthInspectionReportResponse(AbstractModel):
    """DescribeMonthInspectionReport response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Inspection report list
        :type List: list of MonthInspectionReport
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Inspection report list
        :rtype: list of MonthInspectionReport
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = MonthInspectionReport()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetAttackSettingRequest(AbstractModel):
    """DescribeNetAttackSetting request structure.

    """


class DescribeNetAttackSettingResponse(AbstractModel):
    """DescribeNetAttackSetting response structure.

    """

    def __init__(self):
        r"""
        :param _NetAttackEnable: 0 - Disable Network Attack Detection; 1 - Enable Network Attack Detection.
        :type NetAttackEnable: int
        :param _NetAttackAlarmStatus: 0: New warning events pending processing by default, 1: New warning events processed by default, 3: New warning events ignored by default.
        :type NetAttackAlarmStatus: int
        :param _Scope: 1 - All Premium Edition Hosts, 0 - Hosts in InstanceIds List
        :type Scope: int
        :param _InstanceIds: Selected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceIds: list of str
        :param _ExcludeInstanceIds: Custom Hosts to Exclude
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExcludeInstanceIds: list of str
        :param _AutoInclude: New assets automatically include: 0 - Do not include, 1 - include.
        :type AutoInclude: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NetAttackEnable = None
        self._NetAttackAlarmStatus = None
        self._Scope = None
        self._InstanceIds = None
        self._ExcludeInstanceIds = None
        self._AutoInclude = None
        self._RequestId = None

    @property
    def NetAttackEnable(self):
        """0 - Disable Network Attack Detection; 1 - Enable Network Attack Detection.
        :rtype: int
        """
        return self._NetAttackEnable

    @NetAttackEnable.setter
    def NetAttackEnable(self, NetAttackEnable):
        self._NetAttackEnable = NetAttackEnable

    @property
    def NetAttackAlarmStatus(self):
        """0: New warning events pending processing by default, 1: New warning events processed by default, 3: New warning events ignored by default.
        :rtype: int
        """
        return self._NetAttackAlarmStatus

    @NetAttackAlarmStatus.setter
    def NetAttackAlarmStatus(self, NetAttackAlarmStatus):
        self._NetAttackAlarmStatus = NetAttackAlarmStatus

    @property
    def Scope(self):
        """1 - All Premium Edition Hosts, 0 - Hosts in InstanceIds List
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def InstanceIds(self):
        """Selected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._InstanceIds

    @InstanceIds.setter
    def InstanceIds(self, InstanceIds):
        self._InstanceIds = InstanceIds

    @property
    def ExcludeInstanceIds(self):
        """Custom Hosts to Exclude
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ExcludeInstanceIds

    @ExcludeInstanceIds.setter
    def ExcludeInstanceIds(self, ExcludeInstanceIds):
        self._ExcludeInstanceIds = ExcludeInstanceIds

    @property
    def AutoInclude(self):
        """New assets automatically include: 0 - Do not include, 1 - include.
        :rtype: int
        """
        return self._AutoInclude

    @AutoInclude.setter
    def AutoInclude(self, AutoInclude):
        self._AutoInclude = AutoInclude

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._NetAttackEnable = params.get("NetAttackEnable")
        self._NetAttackAlarmStatus = params.get("NetAttackAlarmStatus")
        self._Scope = params.get("Scope")
        self._InstanceIds = params.get("InstanceIds")
        self._ExcludeInstanceIds = params.get("ExcludeInstanceIds")
        self._AutoInclude = params.get("AutoInclude")
        self._RequestId = params.get("RequestId")


class DescribeNetAttackWhiteListRequest(AbstractModel):
    """DescribeNetAttackWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of returns. The maximum value is 100.
        :type Limit: int
        :param _Filters: Filter criteria
<li>IP - String - required: no - query by host IP</li>
<li>SrcIP- String - required: no - query by allowlisted IP</li>
        :type Filters: list of Filter
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting column: [CreateTime]
        :type By: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """Filter criteria
<li>IP - String - required: no - query by host IP</li>
<li>SrcIP- String - required: no - query by allowlisted IP</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting column: [CreateTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetAttackWhiteListResponse(AbstractModel):
    """DescribeNetAttackWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _WhiteList: Allowlist
        :type WhiteList: list of NetAttackWhiteRule
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._WhiteList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def WhiteList(self):
        """Allowlist
        :rtype: list of NetAttackWhiteRule
        """
        return self._WhiteList

    @WhiteList.setter
    def WhiteList(self, WhiteList):
        self._WhiteList = WhiteList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("WhiteList") is not None:
            self._WhiteList = []
            for item in params.get("WhiteList"):
                obj = NetAttackWhiteRule()
                obj._deserialize(item)
                self._WhiteList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeOpenPortStatisticsRequest(AbstractModel):
    """DescribeOpenPortStatistics request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Port - Uint64 - whether required: no - port number</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Port - Uint64 - whether required: no - port number</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeOpenPortStatisticsResponse(AbstractModel):
    """DescribeOpenPortStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of lists of port statistics
        :type TotalCount: int
        :param _OpenPortStatistics: List of port statistics
        :type OpenPortStatistics: list of OpenPortStatistics
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._OpenPortStatistics = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of lists of port statistics
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def OpenPortStatistics(self):
        """List of port statistics
        :rtype: list of OpenPortStatistics
        """
        return self._OpenPortStatistics

    @OpenPortStatistics.setter
    def OpenPortStatistics(self, OpenPortStatistics):
        self._OpenPortStatistics = OpenPortStatistics

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("OpenPortStatistics") is not None:
            self._OpenPortStatistics = []
            for item in params.get("OpenPortStatistics"):
                obj = OpenPortStatistics()
                obj._deserialize(item)
                self._OpenPortStatistics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeOverviewStatisticsRequest(AbstractModel):
    """DescribeOverviewStatistics request structure.

    """


class DescribeOverviewStatisticsResponse(AbstractModel):
    """DescribeOverviewStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _OnlineMachineNum: Number of servers online
        :type OnlineMachineNum: int
        :param _ProVersionMachineNum: Number of professional servers
        :type ProVersionMachineNum: int
        :param _MalwareNum: Number of Trojan files
        :type MalwareNum: int
        :param _NonlocalLoginNum: Number of cross-region log-in
        :type NonlocalLoginNum: int
        :param _BruteAttackSuccessNum: Number of successful brute force cracking
        :type BruteAttackSuccessNum: int
        :param _VulNum: Number of vulnerabilities
        :type VulNum: int
        :param _BaseLineNum: Number of security baselines
        :type BaseLineNum: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._OnlineMachineNum = None
        self._ProVersionMachineNum = None
        self._MalwareNum = None
        self._NonlocalLoginNum = None
        self._BruteAttackSuccessNum = None
        self._VulNum = None
        self._BaseLineNum = None
        self._RequestId = None

    @property
    def OnlineMachineNum(self):
        """Number of servers online
        :rtype: int
        """
        return self._OnlineMachineNum

    @OnlineMachineNum.setter
    def OnlineMachineNum(self, OnlineMachineNum):
        self._OnlineMachineNum = OnlineMachineNum

    @property
    def ProVersionMachineNum(self):
        """Number of professional servers
        :rtype: int
        """
        return self._ProVersionMachineNum

    @ProVersionMachineNum.setter
    def ProVersionMachineNum(self, ProVersionMachineNum):
        self._ProVersionMachineNum = ProVersionMachineNum

    @property
    def MalwareNum(self):
        """Number of Trojan files
        :rtype: int
        """
        return self._MalwareNum

    @MalwareNum.setter
    def MalwareNum(self, MalwareNum):
        self._MalwareNum = MalwareNum

    @property
    def NonlocalLoginNum(self):
        """Number of cross-region log-in
        :rtype: int
        """
        return self._NonlocalLoginNum

    @NonlocalLoginNum.setter
    def NonlocalLoginNum(self, NonlocalLoginNum):
        self._NonlocalLoginNum = NonlocalLoginNum

    @property
    def BruteAttackSuccessNum(self):
        """Number of successful brute force cracking
        :rtype: int
        """
        return self._BruteAttackSuccessNum

    @BruteAttackSuccessNum.setter
    def BruteAttackSuccessNum(self, BruteAttackSuccessNum):
        self._BruteAttackSuccessNum = BruteAttackSuccessNum

    @property
    def VulNum(self):
        """Number of vulnerabilities
        :rtype: int
        """
        return self._VulNum

    @VulNum.setter
    def VulNum(self, VulNum):
        self._VulNum = VulNum

    @property
    def BaseLineNum(self):
        """Number of security baselines
        :rtype: int
        """
        return self._BaseLineNum

    @BaseLineNum.setter
    def BaseLineNum(self, BaseLineNum):
        self._BaseLineNum = BaseLineNum

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._OnlineMachineNum = params.get("OnlineMachineNum")
        self._ProVersionMachineNum = params.get("ProVersionMachineNum")
        self._MalwareNum = params.get("MalwareNum")
        self._NonlocalLoginNum = params.get("NonlocalLoginNum")
        self._BruteAttackSuccessNum = params.get("BruteAttackSuccessNum")
        self._VulNum = params.get("VulNum")
        self._BaseLineNum = params.get("BaseLineNum")
        self._RequestId = params.get("RequestId")


class DescribePrivilegeEventInfoRequest(AbstractModel):
    """DescribePrivilegeEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePrivilegeEventInfoResponse(AbstractModel):
    """DescribePrivilegeEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _PrivilegeEventInfo: Local privilege escalation details
Note: This field may return null, indicating that no valid values can be obtained.
        :type PrivilegeEventInfo: :class:`tencentcloud.cwp.v20180228.models.PrivilegeEventInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PrivilegeEventInfo = None
        self._RequestId = None

    @property
    def PrivilegeEventInfo(self):
        """Local privilege escalation details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.PrivilegeEventInfo`
        """
        return self._PrivilegeEventInfo

    @PrivilegeEventInfo.setter
    def PrivilegeEventInfo(self, PrivilegeEventInfo):
        self._PrivilegeEventInfo = PrivilegeEventInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("PrivilegeEventInfo") is not None:
            self._PrivilegeEventInfo = PrivilegeEventInfo()
            self._PrivilegeEventInfo._deserialize(params.get("PrivilegeEventInfo"))
        self._RequestId = params.get("RequestId")


class DescribePrivilegeRulesRequest(AbstractModel):
    """DescribePrivilegeRules request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns, with the maximum value being 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - keyword (process name)</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Number of returns, with the maximum value being 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - keyword (process name)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePrivilegeRulesResponse(AbstractModel):
    """DescribePrivilegeRules response structure.

    """

    def __init__(self):
        r"""
        :param _List: List content
        :type List: list of PrivilegeRule
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List content
        :rtype: list of PrivilegeRule
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = PrivilegeRule()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeProVersionInfoRequest(AbstractModel):
    """DescribeProVersionInfo request structure.

    """


class DescribeProVersionInfoResponse(AbstractModel):
    """DescribeProVersionInfo response structure.

    """

    def __init__(self):
        r"""
        :param _PostPayCost: Postpay yesterday's charge
        :type PostPayCost: int
        :param _IsAutoOpenProVersion: Whether the Pro Edition is automatically activated on the new host
        :type IsAutoOpenProVersion: bool
        :param _ProVersionNum: Number of hosts with Pro Edition activated
        :type ProVersionNum: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PostPayCost = None
        self._IsAutoOpenProVersion = None
        self._ProVersionNum = None
        self._RequestId = None

    @property
    def PostPayCost(self):
        """Postpay yesterday's charge
        :rtype: int
        """
        return self._PostPayCost

    @PostPayCost.setter
    def PostPayCost(self, PostPayCost):
        self._PostPayCost = PostPayCost

    @property
    def IsAutoOpenProVersion(self):
        """Whether the Pro Edition is automatically activated on the new host
        :rtype: bool
        """
        return self._IsAutoOpenProVersion

    @IsAutoOpenProVersion.setter
    def IsAutoOpenProVersion(self, IsAutoOpenProVersion):
        self._IsAutoOpenProVersion = IsAutoOpenProVersion

    @property
    def ProVersionNum(self):
        """Number of hosts with Pro Edition activated
        :rtype: int
        """
        return self._ProVersionNum

    @ProVersionNum.setter
    def ProVersionNum(self, ProVersionNum):
        self._ProVersionNum = ProVersionNum

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PostPayCost = params.get("PostPayCost")
        self._IsAutoOpenProVersion = params.get("IsAutoOpenProVersion")
        self._ProVersionNum = params.get("ProVersionNum")
        self._RequestId = params.get("RequestId")


class DescribeProVersionStatusRequest(AbstractModel):
    """DescribeProVersionStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: CWPP client UUID. If the value is all, it indicates all hosts.
        :type Uuid: str
        """
        self._Uuid = None

    @property
    def Uuid(self):
        """CWPP client UUID. If the value is all, it indicates all hosts.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeProVersionStatusResponse(AbstractModel):
    """DescribeProVersionStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeProcessStatisticsRequest(AbstractModel):
    """DescribeProcessStatistics request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>ProcessName - String - required: no - process name</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>ProcessName - String - required: no - process name</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeProcessStatisticsResponse(AbstractModel):
    """DescribeProcessStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of records in the process statistics list
        :type TotalCount: int
        :param _ProcessStatistics: Array of list of counted processes
        :type ProcessStatistics: list of ProcessStatistics
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ProcessStatistics = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of records in the process statistics list
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ProcessStatistics(self):
        """Array of list of counted processes
        :rtype: list of ProcessStatistics
        """
        return self._ProcessStatistics

    @ProcessStatistics.setter
    def ProcessStatistics(self, ProcessStatistics):
        self._ProcessStatistics = ProcessStatistics

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ProcessStatistics") is not None:
            self._ProcessStatistics = []
            for item in params.get("ProcessStatistics"):
                obj = ProcessStatistics()
                obj._deserialize(item)
                self._ProcessStatistics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeProductStatusRequest(AbstractModel):
    """DescribeProductStatus request structure.

    """


class DescribeProductStatusResponse(AbstractModel):
    """DescribeProductStatus response structure.

    """

    def __init__(self):
        r"""
        :param _ReturnCode: API call response status code
        :type ReturnCode: int
        :param _ReturnMsg: API call response information
        :type ReturnMsg: str
        :param _Data: Protection status and trial information
        :type Data: :class:`tencentcloud.cwp.v20180228.models.ProductStatusInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ReturnCode = None
        self._ReturnMsg = None
        self._Data = None
        self._RequestId = None

    @property
    def ReturnCode(self):
        """API call response status code
        :rtype: int
        """
        return self._ReturnCode

    @ReturnCode.setter
    def ReturnCode(self, ReturnCode):
        self._ReturnCode = ReturnCode

    @property
    def ReturnMsg(self):
        """API call response information
        :rtype: str
        """
        return self._ReturnMsg

    @ReturnMsg.setter
    def ReturnMsg(self, ReturnMsg):
        self._ReturnMsg = ReturnMsg

    @property
    def Data(self):
        """Protection status and trial information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.ProductStatusInfo`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ReturnCode = params.get("ReturnCode")
        self._ReturnMsg = params.get("ReturnMsg")
        if params.get("Data") is not None:
            self._Data = ProductStatusInfo()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribePublicProxyInstallCommandRequest(AbstractModel):
    """DescribePublicProxyInstallCommand request structure.

    """

    def __init__(self):
        r"""
        :param _Ip: List of Nginx host IP addresses, separated by commas
        :type Ip: str
        """
        self._Ip = None

    @property
    def Ip(self):
        """List of Nginx host IP addresses, separated by commas
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip


    def _deserialize(self, params):
        self._Ip = params.get("Ip")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePublicProxyInstallCommandResponse(AbstractModel):
    """DescribePublicProxyInstallCommand response structure.

    """

    def __init__(self):
        r"""
        :param _NginxCommand: Nginx Installation Command
        :type NginxCommand: str
        :param _KeepAliveCommand: Keepalived Installation Command
Note: This field may return null, indicating that no valid values can be obtained.
        :type KeepAliveCommand: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._NginxCommand = None
        self._KeepAliveCommand = None
        self._RequestId = None

    @property
    def NginxCommand(self):
        """Nginx Installation Command
        :rtype: str
        """
        return self._NginxCommand

    @NginxCommand.setter
    def NginxCommand(self, NginxCommand):
        self._NginxCommand = NginxCommand

    @property
    def KeepAliveCommand(self):
        """Keepalived Installation Command
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._KeepAliveCommand

    @KeepAliveCommand.setter
    def KeepAliveCommand(self, KeepAliveCommand):
        self._KeepAliveCommand = KeepAliveCommand

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._NginxCommand = params.get("NginxCommand")
        self._KeepAliveCommand = params.get("KeepAliveCommand")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseBackupListRequest(AbstractModel):
    """DescribeRansomDefenseBackupList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum quantity is 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Status - Int - required: no - query by ransom status: 0: not ransomed; 1: ransomed</li>
<li>CreateTimeBegin - string - required: no - start of creation time</li>
<li>CreateTimeEnd - string - required: no - end of creation time</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting field, supporting CreateTime
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum quantity is 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Status - Int - required: no - query by ransom status: 0: not ransomed; 1: ransomed</li>
<li>CreateTimeBegin - string - required: no - start of creation time</li>
<li>CreateTimeEnd - string - required: no - end of creation time</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field, supporting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseBackupListResponse(AbstractModel):
    """DescribeRansomDefenseBackupList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Backup list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseBackup
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Backup list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseBackup
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseBackup()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseEventsListRequest(AbstractModel):
    """DescribeRansomDefenseEventsList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum quantity is 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filter criteria
<li>HostName- string- host name</li>
<li>Status - Uint64: 0 - pending; 1 processed; 2 -trusted</li>
<li>HostIp - String - host IP</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting field, supporting CreateTime
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum quantity is 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>HostName- string- host name</li>
<li>Status - Uint64: 0 - pending; 1 processed; 2 -trusted</li>
<li>HostIp - String - host IP</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field, supporting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseEventsListResponse(AbstractModel):
    """DescribeRansomDefenseEventsList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Event list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseEvent
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Event list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseMachineListRequest(AbstractModel):
    """DescribeRansomDefenseMachineList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum quantity is 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by policy name</li>
<li>Status - String - required: no - policy status: 0: backup in progress; 1: backup successful; 2: backup failed; 9: no backup</li>
<li>LastBackupStatus - String - required: no - last backup status: 0: backup in progress; 1: backup succeeded; 2: backup failed; 9: no backup</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting fields, support CreateTime, LastBackupTime, BackupCount.
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum quantity is 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by policy name</li>
<li>Status - String - required: no - policy status: 0: backup in progress; 1: backup successful; 2: backup failed; 9: no backup</li>
<li>LastBackupStatus - String - required: no - last backup status: 0: backup in progress; 1: backup succeeded; 2: backup failed; 9: no backup</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, support CreateTime, LastBackupTime, BackupCount.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseMachineListResponse(AbstractModel):
    """DescribeRansomDefenseMachineList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseStrategyMachineBackupInfo
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseStrategyMachineBackupInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseStrategyMachineBackupInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseMachineStrategyInfoRequest(AbstractModel):
    """DescribeRansomDefenseMachineStrategyInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Quuids: Host Quuid List
        :type Quuids: list of str
        """
        self._Quuids = None

    @property
    def Quuids(self):
        """Host Quuid List
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseMachineStrategyInfoResponse(AbstractModel):
    """DescribeRansomDefenseMachineStrategyInfo response structure.

    """

    def __init__(self):
        r"""
        :param _StrategyIds: List of Policy IDs. 0 indicates no policy is bound.
        :type StrategyIds: list of int non-negative
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._StrategyIds = None
        self._RequestId = None

    @property
    def StrategyIds(self):
        """List of Policy IDs. 0 indicates no policy is bound.
        :rtype: list of int non-negative
        """
        return self._StrategyIds

    @StrategyIds.setter
    def StrategyIds(self, StrategyIds):
        self._StrategyIds = StrategyIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._StrategyIds = params.get("StrategyIds")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseRollBackTaskListRequest(AbstractModel):
    """DescribeRansomDefenseRollBackTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum number is 100.)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filter criteria
<li>Ips- string- string- host name</li>
<li>Status - Uint64: 0 - in progress; 1 - succeeded; 2 failed</li>
<li>Names - String - host name</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting fields, support CreateTime, ModifyTime.
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum number is 100.)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Ips- string- string- host name</li>
<li>Status - Uint64: 0 - in progress; 1 - succeeded; 2 failed</li>
<li>Names - String - host name</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, support CreateTime, ModifyTime.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseRollBackTaskListResponse(AbstractModel):
    """DescribeRansomDefenseRollBackTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Task list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseRollbackTask
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Task list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseRollbackTask
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseRollbackTask()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseStateRequest(AbstractModel):
    """DescribeRansomDefenseState request structure.

    """


class DescribeRansomDefenseStateResponse(AbstractModel):
    """DescribeRansomDefenseState response structure.

    """

    def __init__(self):
        r"""
        :param _StrategyCount: Number of Activated Defense Policies
        :type StrategyCount: int
        :param _MachineCount: Number of Protected Machines
        :type MachineCount: int
        :param _SnapshotSize: Total snapshot capacity
        :type SnapshotSize: int
        :param _RollBackTaskCount: Number of Backup Recovery Tasks
        :type RollBackTaskCount: int
        :param _ProgressingSnapshotTaskCount: Number of Snapshot Creation Tasks in Progress
        :type ProgressingSnapshotTaskCount: int
        :param _ProgressingRollBackTaskCount: Number of Backup Recovery Tasks in Progress
        :type ProgressingRollBackTaskCount: int
        :param _MachineTotal: Total Number of Machines
        :type MachineTotal: int
        :param _StrategyTotal: Total number of policies
        :type StrategyTotal: int
        :param _BalanceStatus: Account Status. 0 - Without Overdue Payment; 1 - With Overdue Payment
        :type BalanceStatus: int
        :param _BackupMachineCount: Number of Backed-Up Hosts
        :type BackupMachineCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._StrategyCount = None
        self._MachineCount = None
        self._SnapshotSize = None
        self._RollBackTaskCount = None
        self._ProgressingSnapshotTaskCount = None
        self._ProgressingRollBackTaskCount = None
        self._MachineTotal = None
        self._StrategyTotal = None
        self._BalanceStatus = None
        self._BackupMachineCount = None
        self._RequestId = None

    @property
    def StrategyCount(self):
        """Number of Activated Defense Policies
        :rtype: int
        """
        return self._StrategyCount

    @StrategyCount.setter
    def StrategyCount(self, StrategyCount):
        self._StrategyCount = StrategyCount

    @property
    def MachineCount(self):
        """Number of Protected Machines
        :rtype: int
        """
        return self._MachineCount

    @MachineCount.setter
    def MachineCount(self, MachineCount):
        self._MachineCount = MachineCount

    @property
    def SnapshotSize(self):
        """Total snapshot capacity
        :rtype: int
        """
        return self._SnapshotSize

    @SnapshotSize.setter
    def SnapshotSize(self, SnapshotSize):
        self._SnapshotSize = SnapshotSize

    @property
    def RollBackTaskCount(self):
        """Number of Backup Recovery Tasks
        :rtype: int
        """
        return self._RollBackTaskCount

    @RollBackTaskCount.setter
    def RollBackTaskCount(self, RollBackTaskCount):
        self._RollBackTaskCount = RollBackTaskCount

    @property
    def ProgressingSnapshotTaskCount(self):
        """Number of Snapshot Creation Tasks in Progress
        :rtype: int
        """
        return self._ProgressingSnapshotTaskCount

    @ProgressingSnapshotTaskCount.setter
    def ProgressingSnapshotTaskCount(self, ProgressingSnapshotTaskCount):
        self._ProgressingSnapshotTaskCount = ProgressingSnapshotTaskCount

    @property
    def ProgressingRollBackTaskCount(self):
        """Number of Backup Recovery Tasks in Progress
        :rtype: int
        """
        return self._ProgressingRollBackTaskCount

    @ProgressingRollBackTaskCount.setter
    def ProgressingRollBackTaskCount(self, ProgressingRollBackTaskCount):
        self._ProgressingRollBackTaskCount = ProgressingRollBackTaskCount

    @property
    def MachineTotal(self):
        """Total Number of Machines
        :rtype: int
        """
        return self._MachineTotal

    @MachineTotal.setter
    def MachineTotal(self, MachineTotal):
        self._MachineTotal = MachineTotal

    @property
    def StrategyTotal(self):
        """Total number of policies
        :rtype: int
        """
        return self._StrategyTotal

    @StrategyTotal.setter
    def StrategyTotal(self, StrategyTotal):
        self._StrategyTotal = StrategyTotal

    @property
    def BalanceStatus(self):
        """Account Status. 0 - Without Overdue Payment; 1 - With Overdue Payment
        :rtype: int
        """
        return self._BalanceStatus

    @BalanceStatus.setter
    def BalanceStatus(self, BalanceStatus):
        self._BalanceStatus = BalanceStatus

    @property
    def BackupMachineCount(self):
        """Number of Backed-Up Hosts
        :rtype: int
        """
        return self._BackupMachineCount

    @BackupMachineCount.setter
    def BackupMachineCount(self, BackupMachineCount):
        self._BackupMachineCount = BackupMachineCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._StrategyCount = params.get("StrategyCount")
        self._MachineCount = params.get("MachineCount")
        self._SnapshotSize = params.get("SnapshotSize")
        self._RollBackTaskCount = params.get("RollBackTaskCount")
        self._ProgressingSnapshotTaskCount = params.get("ProgressingSnapshotTaskCount")
        self._ProgressingRollBackTaskCount = params.get("ProgressingRollBackTaskCount")
        self._MachineTotal = params.get("MachineTotal")
        self._StrategyTotal = params.get("StrategyTotal")
        self._BalanceStatus = params.get("BalanceStatus")
        self._BackupMachineCount = params.get("BackupMachineCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseStrategyDetailRequest(AbstractModel):
    """DescribeRansomDefenseStrategyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Policy ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseStrategyDetailResponse(AbstractModel):
    """DescribeRansomDefenseStrategyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Strategy: Policy details
Note: This field may return null, indicating that no valid values can be obtained.
        :type Strategy: :class:`tencentcloud.cwp.v20180228.models.RansomDefenseStrategyDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Strategy = None
        self._RequestId = None

    @property
    def Strategy(self):
        """Policy details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RansomDefenseStrategyDetail`
        """
        return self._Strategy

    @Strategy.setter
    def Strategy(self, Strategy):
        self._Strategy = Strategy

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Strategy") is not None:
            self._Strategy = RansomDefenseStrategyDetail()
            self._Strategy._deserialize(params.get("Strategy"))
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseStrategyListRequest(AbstractModel):
    """DescribeRansomDefenseStrategyList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameter (maximum quantity: 100)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filtering criteria
<li>Ips - String - required: no - IP addresses for querying </li>
<li>MachineNames - String - required: no - instance names for querying </li>
<li>Names - String - required: no - anti-ransomware policy names for querying </li>
<li>Dirs - String - required: no - bait directory </li>
<li>Status - String - required: no - policy status: 0: disabled; 1: enabled </li>
<li>BackupType - String - required: no - backup mode: 0: weekly; 1: daily </li>
        :type Filters: list of Filters
        :param _Order: Sorting order: ASC and DESC
        :type Order: str
        :param _By: Sorting fields, supporting CreateTime and MachineCount
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Pagination parameter (maximum quantity: 100)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filtering criteria
<li>Ips - String - required: no - IP addresses for querying </li>
<li>MachineNames - String - required: no - instance names for querying </li>
<li>Names - String - required: no - anti-ransomware policy names for querying </li>
<li>Dirs - String - required: no - bait directory </li>
<li>Status - String - required: no - policy status: 0: disabled; 1: enabled </li>
<li>BackupType - String - required: no - backup mode: 0: weekly; 1: daily </li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting order: ASC and DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, supporting CreateTime and MachineCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseStrategyListResponse(AbstractModel):
    """DescribeRansomDefenseStrategyList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Policy list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseStrategy
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Policy list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseStrategy
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseStrategy()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseStrategyMachinesRequest(AbstractModel):
    """DescribeRansomDefenseStrategyMachines request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination parameters (The maximum number is 100.)
        :type Limit: int
        :param _Offset: Pagination parameter
        :type Offset: int
        :param _Filters: Filter criteria
<li>Ips- string- string- host name</li>
<li>Status - Uint64: 0 - unbound; 1 bound</li>
<li>Names - String - host name</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting field, supporting CreateTime
        :type By: str
        :param _Id: Anti-Ransomware Policy ID
        :type Id: int
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._Id = None

    @property
    def Limit(self):
        """Pagination parameters (The maximum number is 100.)
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination parameter
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Ips- string- string- host name</li>
<li>Status - Uint64: 0 - unbound; 1 bound</li>
<li>Names - String - host name</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field, supporting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Id(self):
        """Anti-Ransomware Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRansomDefenseStrategyMachinesResponse(AbstractModel):
    """DescribeRansomDefenseStrategyMachines response structure.

    """

    def __init__(self):
        r"""
        :param _List: Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RansomDefenseStrategyMachineDetail
        :param _TotalCount: Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RansomDefenseStrategyMachineDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number of pagination query records
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RansomDefenseStrategyMachineDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRansomDefenseTrendRequest(AbstractModel):
    """DescribeRansomDefenseTrend request structure.

    """


class DescribeRansomDefenseTrendResponse(AbstractModel):
    """DescribeRansomDefenseTrend response structure.

    """

    def __init__(self):
        r"""
        :param _EventCount: Number of Ransom Incidents
        :type EventCount: int
        :param _IndustryCount: Number of Affected Industries
        :type IndustryCount: int
        :param _CompanyCount: Number of Companies with Ransom Protection
        :type CompanyCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventCount = None
        self._IndustryCount = None
        self._CompanyCount = None
        self._RequestId = None

    @property
    def EventCount(self):
        """Number of Ransom Incidents
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def IndustryCount(self):
        """Number of Affected Industries
        :rtype: int
        """
        return self._IndustryCount

    @IndustryCount.setter
    def IndustryCount(self, IndustryCount):
        self._IndustryCount = IndustryCount

    @property
    def CompanyCount(self):
        """Number of Companies with Ransom Protection
        :rtype: int
        """
        return self._CompanyCount

    @CompanyCount.setter
    def CompanyCount(self, CompanyCount):
        self._CompanyCount = CompanyCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EventCount = params.get("EventCount")
        self._IndustryCount = params.get("IndustryCount")
        self._CompanyCount = params.get("CompanyCount")
        self._RequestId = params.get("RequestId")


class DescribeRecommendedProtectCpuRequest(AbstractModel):
    """DescribeRecommendedProtectCpu request structure.

    """


class DescribeRecommendedProtectCpuResponse(AbstractModel):
    """DescribeRecommendedProtectCpu response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeReverseShellEventInfoRequest(AbstractModel):
    """DescribeReverseShellEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellEventInfoResponse(AbstractModel):
    """DescribeReverseShellEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _ReverseShellEventInfo: Reverse shell details
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReverseShellEventInfo: :class:`tencentcloud.cwp.v20180228.models.ReverseShellEventInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ReverseShellEventInfo = None
        self._RequestId = None

    @property
    def ReverseShellEventInfo(self):
        """Reverse shell details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.ReverseShellEventInfo`
        """
        return self._ReverseShellEventInfo

    @ReverseShellEventInfo.setter
    def ReverseShellEventInfo(self, ReverseShellEventInfo):
        self._ReverseShellEventInfo = ReverseShellEventInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ReverseShellEventInfo") is not None:
            self._ReverseShellEventInfo = ReverseShellEventInfo()
            self._ReverseShellEventInfo._deserialize(params.get("ReverseShellEventInfo"))
        self._RequestId = params.get("RequestId")


class DescribeReverseShellEventsRequest(AbstractModel):
    """DescribeReverseShellEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns, with the maximum value being 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - keyword (host's private IP address|process name)</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: sort by number of requests. asc: ascending order; desc: descending order.
        :type Order: str
        :param _By: Sorting field. CreateTime: occurrence time.
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Number of returns, with the maximum value being 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - keyword (host's private IP address|process name)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: sort by number of requests. asc: ascending order; desc: descending order.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field. CreateTime: occurrence time.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellEventsResponse(AbstractModel):
    """DescribeReverseShellEvents response structure.

    """

    def __init__(self):
        r"""
        :param _List: List content
        :type List: list of ReverseShell
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List content
        :rtype: list of ReverseShell
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ReverseShell()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeReverseShellRulesRequest(AbstractModel):
    """DescribeReverseShellRules request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Keywords - String - whether required: no - keyword (process name)</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - whether required: no - keyword (process name)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellRulesResponse(AbstractModel):
    """DescribeReverseShellRules response structure.

    """

    def __init__(self):
        r"""
        :param _List: List content
        :type List: list of ReverseShellRule
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List content
        :rtype: list of ReverseShellRule
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ReverseShellRule()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRiskBatchStatusRequest(AbstractModel):
    """DescribeRiskBatchStatus request structure.

    """

    def __init__(self):
        r"""
        :param _RiskType: Operation event type. MALWARE: virus scanning; HOST_LOGIN: abnormal log-in; BRUTE_ATTACK: password cracking; MALICIOUS_REQUEST: malicious request; BASH_EVENT: high-risk command; PRIVILEGE_EVENT: local privilege escalation; REVERSE_SHELL: reverse shell.
        :type RiskType: str
        """
        self._RiskType = None

    @property
    def RiskType(self):
        """Operation event type. MALWARE: virus scanning; HOST_LOGIN: abnormal log-in; BRUTE_ATTACK: password cracking; MALICIOUS_REQUEST: malicious request; BASH_EVENT: high-risk command; PRIVILEGE_EVENT: local privilege escalation; REVERSE_SHELL: reverse shell.
        :rtype: str
        """
        return self._RiskType

    @RiskType.setter
    def RiskType(self, RiskType):
        self._RiskType = RiskType


    def _deserialize(self, params):
        self._RiskType = params.get("RiskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskBatchStatusResponse(AbstractModel):
    """DescribeRiskBatchStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Handling: deletion operation in progress
Pending: no tasks are being executed
        :type Status: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        """Handling: deletion operation in progress
Pending: no tasks are being executed
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class DescribeRiskDnsEventInfoRequest(AbstractModel):
    """DescribeRiskDnsEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Malicious request event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Malicious request event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskDnsEventInfoResponse(AbstractModel):
    """DescribeRiskDnsEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Info: Malicious request event details
Note: This field may return null, indicating that no valid values can be obtained.
        :type Info: :class:`tencentcloud.cwp.v20180228.models.RiskDnsEvent`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        """Malicious request event details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RiskDnsEvent`
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = RiskDnsEvent()
            self._Info._deserialize(params.get("Info"))
        self._RequestId = params.get("RequestId")


class DescribeRiskDnsEventListRequest(AbstractModel):
    """DescribeRiskDnsEventList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>IpOrName - String - required: no - filter by host IP or alias</li>
<li>HostId - String - required: no - host ID</li>
<li>AgentId - String - required: no - client ID</li>
<li>PolicyType - String - required: no - policy type: 0 - system policy; 1 - user-defined policy</li>
<li>Domain - String - required: no - domain name (First convert the domain name into the urlencode format, and then encode it using base64.)</li>
<li>HandleStatus - String - required: no - filter by status: 0 - pending; 2 - trusted; 3 - untrusted</li>
<li>BeginTime - String - required: no - start time of last access</li>
<li>EndTime - String - required: no - end time of last access</li>
        :type Filters: list of Filter
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Order: Sorting method: sort by number of requests [asc: ascending order|desc: descending order]
        :type Order: str
        :param _By: Sorting field: [AccessCount: number of requests|LastTime: last request time]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>IpOrName - String - required: no - filter by host IP or alias</li>
<li>HostId - String - required: no - host ID</li>
<li>AgentId - String - required: no - client ID</li>
<li>PolicyType - String - required: no - policy type: 0 - system policy; 1 - user-defined policy</li>
<li>Domain - String - required: no - domain name (First convert the domain name into the urlencode format, and then encode it using base64.)</li>
<li>HandleStatus - String - required: no - filter by status: 0 - pending; 2 - trusted; 3 - untrusted</li>
<li>BeginTime - String - required: no - start time of last access</li>
<li>EndTime - String - required: no - end time of last access</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting method: sort by number of requests [asc: ascending order|desc: descending order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: [AccessCount: number of requests|LastTime: last request time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskDnsEventListResponse(AbstractModel):
    """DescribeRiskDnsEventList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Malicious Request Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RiskDnsEvent
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Malicious Request Event List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RiskDnsEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RiskDnsEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRiskDnsInfoRequest(AbstractModel):
    """DescribeRiskDnsInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Malicious request - event ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Malicious request - event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskDnsInfoResponse(AbstractModel):
    """DescribeRiskDnsInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RiskDnsInfo: Malicious request event details
        :type RiskDnsInfo: :class:`tencentcloud.cwp.v20180228.models.RiskDnsList`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RiskDnsInfo = None
        self._RequestId = None

    @property
    def RiskDnsInfo(self):
        """Malicious request event details
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RiskDnsList`
        """
        return self._RiskDnsInfo

    @RiskDnsInfo.setter
    def RiskDnsInfo(self, RiskDnsInfo):
        self._RiskDnsInfo = RiskDnsInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RiskDnsInfo") is not None:
            self._RiskDnsInfo = RiskDnsList()
            self._RiskDnsInfo._deserialize(params.get("RiskDnsInfo"))
        self._RequestId = params.get("RequestId")


class DescribeRiskDnsListRequest(AbstractModel):
    """DescribeRiskDnsList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Url - String - required: no - filter by URL</li>
<li>Status - String - required: no - filter by status: 0: pending; 2: trusted; 3: untrusted</li>
<li>MergeBeginTime - String - required: no - start time of the last access</li>
<li>MergeEndTime - String - required: no - end time of the last access</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :type Order: str
        :param _By: Sorting field: AccessCount - number of requests; LastTime - last request time
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>Url - String - required: no - filter by URL</li>
<li>Status - String - required: no - filter by status: 0: pending; 2: trusted; 3: untrusted</li>
<li>MergeBeginTime - String - required: no - start time of the last access</li>
<li>MergeEndTime - String - required: no - end time of the last access</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: sort by number of requests: asc - ascending order/desc - descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: AccessCount - number of requests; LastTime - last request time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskDnsListResponse(AbstractModel):
    """DescribeRiskDnsList response structure.

    """

    def __init__(self):
        r"""
        :param _RiskDnsList: Arrays of malicious request lists
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskDnsList: list of RiskDnsList
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RiskDnsList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def RiskDnsList(self):
        """Arrays of malicious request lists
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RiskDnsList
        """
        return self._RiskDnsList

    @RiskDnsList.setter
    def RiskDnsList(self, RiskDnsList):
        self._RiskDnsList = RiskDnsList

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RiskDnsList") is not None:
            self._RiskDnsList = []
            for item in params.get("RiskDnsList"):
                obj = RiskDnsList()
                obj._deserialize(item)
                self._RiskDnsList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRiskDnsPolicyListRequest(AbstractModel):
    """DescribeRiskDnsPolicyList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>PolicyType - int - required: no - policy type</li>
<li>PolicyName - string - required: no - policy name</li>
<li>Domain - string - required: no - domain name (URL encoding and then Base64 encoding on the domain name)</li>
<li>PolicyAction - int - required: no - policy action</li>
<li>IsEnabled - int - required: no - whether the policy is enabled</li>
        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting column: [HostScope|UpdateTime]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>PolicyType - int - required: no - policy type</li>
<li>PolicyName - string - required: no - policy name</li>
<li>Domain - string - required: no - domain name (URL encoding and then Base64 encoding on the domain name)</li>
<li>PolicyAction - int - required: no - policy action</li>
<li>IsEnabled - int - required: no - whether the policy is enabled</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column: [HostScope|UpdateTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskDnsPolicyListResponse(AbstractModel):
    """DescribeRiskDnsPolicyList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RiskDnsPolicy
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Data list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RiskDnsPolicy
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RiskDnsPolicy()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRiskProcessEventsRequest(AbstractModel):
    """DescribeRiskProcessEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>HostId - String - required: no - host ID</li>
<li>IpOrName - String - required: no - host IP or host name</li>
<li>VirusName - String - required: no - virus name</li>
<li>ProcessId - String - required: no - process ID</li>
<li>FilePath - String - required: no - process path</li>
<li>BeginTime - String - required: no - process startup time - begin</li>
<li>BeginTime - String - required: no - process startup time - end</li>
<li>Status - String - required: no - status for filtering: 0: pending; 1: scanning; 2: scanned; 3: exited; 4: trusted</li>
        :type Filters: list of Filter
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Order: Sorting order: [ASC|DESC]
        :type Order: str
        :param _By: [StartTime: Process start time | DetectTime: Last detection time]
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria
<li>HostId - String - required: no - host ID</li>
<li>IpOrName - String - required: no - host IP or host name</li>
<li>VirusName - String - required: no - virus name</li>
<li>ProcessId - String - required: no - process ID</li>
<li>FilePath - String - required: no - process path</li>
<li>BeginTime - String - required: no - process startup time - begin</li>
<li>BeginTime - String - required: no - process startup time - end</li>
<li>Status - String - required: no - status for filtering: 0: pending; 1: scanning; 2: scanned; 3: exited; 4: trusted</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting order: [ASC|DESC]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """[StartTime: Process start time | DetectTime: Last detection time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskProcessEventsResponse(AbstractModel):
    """DescribeRiskProcessEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of exceptional processes
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of RiskProcessEvent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of exceptional processes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RiskProcessEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = RiskProcessEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSafeInfoRequest(AbstractModel):
    """DescribeSafeInfo request structure.

    """


class DescribeSafeInfoResponse(AbstractModel):
    """DescribeSafeInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeScanMalwareScheduleRequest(AbstractModel):
    """DescribeScanMalwareSchedule request structure.

    """


class DescribeScanMalwareScheduleResponse(AbstractModel):
    """DescribeScanMalwareSchedule response structure.

    """

    def __init__(self):
        r"""
        :param _Schedule: Scan progress (unit: %)
        :type Schedule: int
        :param _RiskFileNumber: Number of risk files, which is only available after the scan is completed.
        :type RiskFileNumber: int
        :param _IsSchedule: Whether scan in progress
        :type IsSchedule: bool
        :param _ScanStatus: 0 - never scanned; 1 - scan in progress; 2 - scan completed; 3 - stop in progress; 4 - stop completed
        :type ScanStatus: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Schedule = None
        self._RiskFileNumber = None
        self._IsSchedule = None
        self._ScanStatus = None
        self._RequestId = None

    @property
    def Schedule(self):
        """Scan progress (unit: %)
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def RiskFileNumber(self):
        """Number of risk files, which is only available after the scan is completed.
        :rtype: int
        """
        return self._RiskFileNumber

    @RiskFileNumber.setter
    def RiskFileNumber(self, RiskFileNumber):
        self._RiskFileNumber = RiskFileNumber

    @property
    def IsSchedule(self):
        """Whether scan in progress
        :rtype: bool
        """
        return self._IsSchedule

    @IsSchedule.setter
    def IsSchedule(self, IsSchedule):
        self._IsSchedule = IsSchedule

    @property
    def ScanStatus(self):
        """0 - never scanned; 1 - scan in progress; 2 - scan completed; 3 - stop in progress; 4 - stop completed
        :rtype: int
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Schedule = params.get("Schedule")
        self._RiskFileNumber = params.get("RiskFileNumber")
        self._IsSchedule = params.get("IsSchedule")
        self._ScanStatus = params.get("ScanStatus")
        self._RequestId = params.get("RequestId")


class DescribeScanScheduleRequest(AbstractModel):
    """DescribeScanSchedule request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScanScheduleResponse(AbstractModel):
    """DescribeScanSchedule response structure.

    """

    def __init__(self):
        r"""
        :param _Schedule: Detection progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type Schedule: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Schedule = None
        self._RequestId = None

    @property
    def Schedule(self):
        """Detection progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Schedule = params.get("Schedule")
        self._RequestId = params.get("RequestId")


class DescribeScanStateRequest(AbstractModel):
    """DescribeScanState request structure.

    """

    def __init__(self):
        r"""
        :param _ModuleType: Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :type ModuleType: str
        :param _Filters: Filter parameters
<li>StrategyId: Baseline policy ID, which is required only if ModuleType is set to Baseline</li>
        :type Filters: list of Filters
        """
        self._ModuleType = None
        self._Filters = None

    @property
    def ModuleType(self):
        """Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType

    @property
    def Filters(self):
        """Filter parameters
<li>StrategyId: Baseline policy ID, which is required only if ModuleType is set to Baseline</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ModuleType = params.get("ModuleType")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScanStateResponse(AbstractModel):
    """DescribeScanState response structure.

    """

    def __init__(self):
        r"""
        :param _ScanState: 0 - never scanned; 1 - scan in progress; 2 - scan completed; 3 - stop in progress; 4 - stop completed
        :type ScanState: int
        :param _Schedule: Scan progress
        :type Schedule: int
        :param _TaskId: Task ID
        :type TaskId: int
        :param _VulId: Vulnerability ID of task scan
        :type VulId: list of int non-negative
        :param _Type: 0 - one-click detection; 1 - regular detection
        :type Type: int
        :param _ScanBeginTime: Scan start time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanBeginTime: str
        :param _RiskEventCount: Number of vulnerabilities scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskEventCount: int
        :param _ScanEndTime: Scan end time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanEndTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ScanState = None
        self._Schedule = None
        self._TaskId = None
        self._VulId = None
        self._Type = None
        self._ScanBeginTime = None
        self._RiskEventCount = None
        self._ScanEndTime = None
        self._RequestId = None

    @property
    def ScanState(self):
        """0 - never scanned; 1 - scan in progress; 2 - scan completed; 3 - stop in progress; 4 - stop completed
        :rtype: int
        """
        return self._ScanState

    @ScanState.setter
    def ScanState(self, ScanState):
        self._ScanState = ScanState

    @property
    def Schedule(self):
        """Scan progress
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def VulId(self):
        """Vulnerability ID of task scan
        :rtype: list of int non-negative
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Type(self):
        """0 - one-click detection; 1 - regular detection
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ScanBeginTime(self):
        """Scan start time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanBeginTime

    @ScanBeginTime.setter
    def ScanBeginTime(self, ScanBeginTime):
        self._ScanBeginTime = ScanBeginTime

    @property
    def RiskEventCount(self):
        """Number of vulnerabilities scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskEventCount

    @RiskEventCount.setter
    def RiskEventCount(self, RiskEventCount):
        self._RiskEventCount = RiskEventCount

    @property
    def ScanEndTime(self):
        """Scan end time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ScanState = params.get("ScanState")
        self._Schedule = params.get("Schedule")
        self._TaskId = params.get("TaskId")
        self._VulId = params.get("VulId")
        self._Type = params.get("Type")
        self._ScanBeginTime = params.get("ScanBeginTime")
        self._RiskEventCount = params.get("RiskEventCount")
        self._ScanEndTime = params.get("ScanEndTime")
        self._RequestId = params.get("RequestId")


class DescribeScanTaskDetailsRequest(AbstractModel):
    """DescribeScanTaskDetails request structure.

    """

    def __init__(self):
        r"""
        :param _ModuleType: Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :type ModuleType: str
        :param _TaskId: Task ID
        :type TaskId: int
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        :param _Limit: Number of items to be returned. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        """
        self._ModuleType = None
        self._TaskId = None
        self._Filters = None
        self._Limit = None
        self._Offset = None

    @property
    def ModuleType(self):
        """Module type. Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._ModuleType = params.get("ModuleType")
        self._TaskId = params.get("TaskId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScanTaskDetailsResponse(AbstractModel):
    """DescribeScanTaskDetails response structure.

    """

    def __init__(self):
        r"""
        :param _ScanTaskDetailList: List of scan task information
        :type ScanTaskDetailList: list of ScanTaskDetails
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _ScanMachineCount: Total number of scanned machines
        :type ScanMachineCount: int
        :param _RiskMachineCount: Number of machines with risks detected
        :type RiskMachineCount: int
        :param _ScanBeginTime: Scan start time
        :type ScanBeginTime: str
        :param _ScanEndTime: Scan end time
        :type ScanEndTime: str
        :param _ScanTime: Scan time
        :type ScanTime: int
        :param _ScanProgress: Scan progress
        :type ScanProgress: int
        :param _ScanLeftTime: Remaining scan time
        :type ScanLeftTime: int
        :param _ScanContent: Scan content
        :type ScanContent: list of str
        :param _VulInfo: Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulInfo: list of VulDetailInfo
        :param _RiskEventCount: Number of risk events
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskEventCount: int
        :param _Type: 0: one-click scan; 1: scheduled scan.Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: int
        :param _StoppingAll: Whether all tasks are being stopped. true: yes.Note: This field may return null, indicating that no valid values can be obtained.
        :type StoppingAll: bool
        :param _VulCount: Number of vulnerabilities scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ScanTaskDetailList = None
        self._TotalCount = None
        self._ScanMachineCount = None
        self._RiskMachineCount = None
        self._ScanBeginTime = None
        self._ScanEndTime = None
        self._ScanTime = None
        self._ScanProgress = None
        self._ScanLeftTime = None
        self._ScanContent = None
        self._VulInfo = None
        self._RiskEventCount = None
        self._Type = None
        self._StoppingAll = None
        self._VulCount = None
        self._RequestId = None

    @property
    def ScanTaskDetailList(self):
        """List of scan task information
        :rtype: list of ScanTaskDetails
        """
        return self._ScanTaskDetailList

    @ScanTaskDetailList.setter
    def ScanTaskDetailList(self, ScanTaskDetailList):
        self._ScanTaskDetailList = ScanTaskDetailList

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ScanMachineCount(self):
        """Total number of scanned machines
        :rtype: int
        """
        return self._ScanMachineCount

    @ScanMachineCount.setter
    def ScanMachineCount(self, ScanMachineCount):
        self._ScanMachineCount = ScanMachineCount

    @property
    def RiskMachineCount(self):
        """Number of machines with risks detected
        :rtype: int
        """
        return self._RiskMachineCount

    @RiskMachineCount.setter
    def RiskMachineCount(self, RiskMachineCount):
        self._RiskMachineCount = RiskMachineCount

    @property
    def ScanBeginTime(self):
        """Scan start time
        :rtype: str
        """
        return self._ScanBeginTime

    @ScanBeginTime.setter
    def ScanBeginTime(self, ScanBeginTime):
        self._ScanBeginTime = ScanBeginTime

    @property
    def ScanEndTime(self):
        """Scan end time
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def ScanTime(self):
        """Scan time
        :rtype: int
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanProgress(self):
        """Scan progress
        :rtype: int
        """
        return self._ScanProgress

    @ScanProgress.setter
    def ScanProgress(self, ScanProgress):
        self._ScanProgress = ScanProgress

    @property
    def ScanLeftTime(self):
        """Remaining scan time
        :rtype: int
        """
        return self._ScanLeftTime

    @ScanLeftTime.setter
    def ScanLeftTime(self, ScanLeftTime):
        self._ScanLeftTime = ScanLeftTime

    @property
    def ScanContent(self):
        """Scan content
        :rtype: list of str
        """
        return self._ScanContent

    @ScanContent.setter
    def ScanContent(self, ScanContent):
        self._ScanContent = ScanContent

    @property
    def VulInfo(self):
        """Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulDetailInfo
        """
        return self._VulInfo

    @VulInfo.setter
    def VulInfo(self, VulInfo):
        self._VulInfo = VulInfo

    @property
    def RiskEventCount(self):
        """Number of risk events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskEventCount

    @RiskEventCount.setter
    def RiskEventCount(self, RiskEventCount):
        self._RiskEventCount = RiskEventCount

    @property
    def Type(self):
        """0: one-click scan; 1: scheduled scan.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def StoppingAll(self):
        """Whether all tasks are being stopped. true: yes.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._StoppingAll

    @StoppingAll.setter
    def StoppingAll(self, StoppingAll):
        self._StoppingAll = StoppingAll

    @property
    def VulCount(self):
        """Number of vulnerabilities scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCount

    @VulCount.setter
    def VulCount(self, VulCount):
        self._VulCount = VulCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ScanTaskDetailList") is not None:
            self._ScanTaskDetailList = []
            for item in params.get("ScanTaskDetailList"):
                obj = ScanTaskDetails()
                obj._deserialize(item)
                self._ScanTaskDetailList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._ScanMachineCount = params.get("ScanMachineCount")
        self._RiskMachineCount = params.get("RiskMachineCount")
        self._ScanBeginTime = params.get("ScanBeginTime")
        self._ScanEndTime = params.get("ScanEndTime")
        self._ScanTime = params.get("ScanTime")
        self._ScanProgress = params.get("ScanProgress")
        self._ScanLeftTime = params.get("ScanLeftTime")
        self._ScanContent = params.get("ScanContent")
        if params.get("VulInfo") is not None:
            self._VulInfo = []
            for item in params.get("VulInfo"):
                obj = VulDetailInfo()
                obj._deserialize(item)
                self._VulInfo.append(obj)
        self._RiskEventCount = params.get("RiskEventCount")
        self._Type = params.get("Type")
        self._StoppingAll = params.get("StoppingAll")
        self._VulCount = params.get("VulCount")
        self._RequestId = params.get("RequestId")


class DescribeScanTaskStatusRequest(AbstractModel):
    """DescribeScanTaskStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ModuleType: Module type: Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :type ModuleType: str
        """
        self._ModuleType = None

    @property
    def ModuleType(self):
        """Module type: Malware (Trojan), Vul (vulnerability), and Baseline are currently available.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType


    def _deserialize(self, params):
        self._ModuleType = params.get("ModuleType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScanTaskStatusResponse(AbstractModel):
    """DescribeScanTaskStatus response structure.

    """

    def __init__(self):
        r"""
        :param _State: Task scan status list
        :type State: :class:`tencentcloud.cwp.v20180228.models.TaskStatus`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._State = None
        self._RequestId = None

    @property
    def State(self):
        """Task scan status list
        :rtype: :class:`tencentcloud.cwp.v20180228.models.TaskStatus`
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("State") is not None:
            self._State = TaskStatus()
            self._State._deserialize(params.get("State"))
        self._RequestId = params.get("RequestId")


class DescribeScanVulSettingRequest(AbstractModel):
    """DescribeScanVulSetting request structure.

    """


class DescribeScanVulSettingResponse(AbstractModel):
    """DescribeScanVulSetting response structure.

    """

    def __init__(self):
        r"""
        :param _VulCategories: Vulnerability type: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities
        :type VulCategories: str
        :param _VulLevels: Severity level: 1 - low-risk; 2 - medium-risk; 3 - high-risk; 4 - critical (multiple selections are separated by English commas)
        :type VulLevels: str
        :param _TimerInterval: Regular detection interval (days)
        :type TimerInterval: int
        :param _TimerTime: Regular detection time, such as 00:00
        :type TimerTime: str
        :param _VulEmergency: Whether an emergency vulnerability: 0 - no; 1 - yes
        :type VulEmergency: int
        :param _StartTime: Start time
        :type StartTime: str
        :param _EnableScan: Whether enabled
        :type EnableScan: int
        :param _EndTime: End time
        :type EndTime: str
        :param _ClickTimeout: One-click scan timeout duration, such as 1800 seconds
        :type ClickTimeout: int
        :param _Uuids: If empty, scan hosts with all Professional, Premium, and General Discount editions by default; if not empty, only scan the selected hosts.
        :type Uuids: list of str
        :param _ScanMethod: 
        :type ScanMethod: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulCategories = None
        self._VulLevels = None
        self._TimerInterval = None
        self._TimerTime = None
        self._VulEmergency = None
        self._StartTime = None
        self._EnableScan = None
        self._EndTime = None
        self._ClickTimeout = None
        self._Uuids = None
        self._ScanMethod = None
        self._RequestId = None

    @property
    def VulCategories(self):
        """Vulnerability type: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities
        :rtype: str
        """
        return self._VulCategories

    @VulCategories.setter
    def VulCategories(self, VulCategories):
        self._VulCategories = VulCategories

    @property
    def VulLevels(self):
        """Severity level: 1 - low-risk; 2 - medium-risk; 3 - high-risk; 4 - critical (multiple selections are separated by English commas)
        :rtype: str
        """
        return self._VulLevels

    @VulLevels.setter
    def VulLevels(self, VulLevels):
        self._VulLevels = VulLevels

    @property
    def TimerInterval(self):
        """Regular detection interval (days)
        :rtype: int
        """
        return self._TimerInterval

    @TimerInterval.setter
    def TimerInterval(self, TimerInterval):
        self._TimerInterval = TimerInterval

    @property
    def TimerTime(self):
        """Regular detection time, such as 00:00
        :rtype: str
        """
        return self._TimerTime

    @TimerTime.setter
    def TimerTime(self, TimerTime):
        self._TimerTime = TimerTime

    @property
    def VulEmergency(self):
        """Whether an emergency vulnerability: 0 - no; 1 - yes
        :rtype: int
        """
        return self._VulEmergency

    @VulEmergency.setter
    def VulEmergency(self, VulEmergency):
        self._VulEmergency = VulEmergency

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EnableScan(self):
        """Whether enabled
        :rtype: int
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ClickTimeout(self):
        """One-click scan timeout duration, such as 1800 seconds
        :rtype: int
        """
        return self._ClickTimeout

    @ClickTimeout.setter
    def ClickTimeout(self, ClickTimeout):
        self._ClickTimeout = ClickTimeout

    @property
    def Uuids(self):
        """If empty, scan hosts with all Professional, Premium, and General Discount editions by default; if not empty, only scan the selected hosts.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def ScanMethod(self):
        """
        :rtype: int
        """
        return self._ScanMethod

    @ScanMethod.setter
    def ScanMethod(self, ScanMethod):
        self._ScanMethod = ScanMethod

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VulCategories = params.get("VulCategories")
        self._VulLevels = params.get("VulLevels")
        self._TimerInterval = params.get("TimerInterval")
        self._TimerTime = params.get("TimerTime")
        self._VulEmergency = params.get("VulEmergency")
        self._StartTime = params.get("StartTime")
        self._EnableScan = params.get("EnableScan")
        self._EndTime = params.get("EndTime")
        self._ClickTimeout = params.get("ClickTimeout")
        self._Uuids = params.get("Uuids")
        self._ScanMethod = params.get("ScanMethod")
        self._RequestId = params.get("RequestId")


class DescribeScreenAttackHotspotRequest(AbstractModel):
    """DescribeScreenAttackHotspot request structure.

    """


class DescribeScreenAttackHotspotResponse(AbstractModel):
    """DescribeScreenAttackHotspot response structure.

    """

    def __init__(self):
        r"""
        :param _List: Attack hotspot list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ScreenAttackHotspot
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Attack hotspot list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenAttackHotspot
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScreenAttackHotspot()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenBroadcastsRequest(AbstractModel):
    """DescribeScreenBroadcasts request structure.

    """


class DescribeScreenBroadcastsResponse(AbstractModel):
    """DescribeScreenBroadcasts response structure.

    """

    def __init__(self):
        r"""
        :param _List: Broadcasting article list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ScreenBroadcasts
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Broadcasting article list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenBroadcasts
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScreenBroadcasts()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenDefenseTrendsRequest(AbstractModel):
    """DescribeScreenDefenseTrends request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._StartTime = None
        self._EndTime = None

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScreenDefenseTrendsResponse(AbstractModel):
    """DescribeScreenDefenseTrends response structure.

    """

    def __init__(self):
        r"""
        :param _TrendsChart: Trend charts of detailed statistics data
Note: This field may return null, indicating that no valid values can be obtained.
        :type TrendsChart: list of ScreenTrendsChart
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TrendsChart = None
        self._RequestId = None

    @property
    def TrendsChart(self):
        """Trend charts of detailed statistics data
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenTrendsChart
        """
        return self._TrendsChart

    @TrendsChart.setter
    def TrendsChart(self, TrendsChart):
        self._TrendsChart = TrendsChart

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrendsChart") is not None:
            self._TrendsChart = []
            for item in params.get("TrendsChart"):
                obj = ScreenTrendsChart()
                obj._deserialize(item)
                self._TrendsChart.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenEmergentMsgRequest(AbstractModel):
    """DescribeScreenEmergentMsg request structure.

    """


class DescribeScreenEmergentMsgResponse(AbstractModel):
    """DescribeScreenEmergentMsg response structure.

    """

    def __init__(self):
        r"""
        :param _MessageInfo: Notification content
        :type MessageInfo: list of ScreenEmergentMsg
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MessageInfo = None
        self._RequestId = None

    @property
    def MessageInfo(self):
        """Notification content
        :rtype: list of ScreenEmergentMsg
        """
        return self._MessageInfo

    @MessageInfo.setter
    def MessageInfo(self, MessageInfo):
        self._MessageInfo = MessageInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MessageInfo") is not None:
            self._MessageInfo = []
            for item in params.get("MessageInfo"):
                obj = ScreenEmergentMsg()
                obj._deserialize(item)
                self._MessageInfo.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenEventsCntRequest(AbstractModel):
    """DescribeScreenEventsCnt request structure.

    """

    def __init__(self):
        r"""
        :param _BusinessType: Data type: 0 - total number of pending risks; 1: total number of affected assets. The default is 0.
        :type BusinessType: int
        """
        self._BusinessType = None

    @property
    def BusinessType(self):
        """Data type: 0 - total number of pending risks; 1: total number of affected assets. The default is 0.
        :rtype: int
        """
        return self._BusinessType

    @BusinessType.setter
    def BusinessType(self, BusinessType):
        self._BusinessType = BusinessType


    def _deserialize(self, params):
        self._BusinessType = params.get("BusinessType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScreenEventsCntResponse(AbstractModel):
    """DescribeScreenEventsCnt response structure.

    """

    def __init__(self):
        r"""
        :param _Info: Event statistics details
Note: This field may return null, indicating that no valid values can be obtained.
        :type Info: list of ScreenEventsCnt
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        """Event statistics details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenEventsCnt
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = []
            for item in params.get("Info"):
                obj = ScreenEventsCnt()
                obj._deserialize(item)
                self._Info.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenGeneralStatRequest(AbstractModel):
    """DescribeScreenGeneralStat request structure.

    """


class DescribeScreenGeneralStatResponse(AbstractModel):
    """DescribeScreenGeneralStat response structure.

    """

    def __init__(self):
        r"""
        :param _Machines: Value of name: online, shutdown/offline, not installed
Value: indicates the corresponding quantity
        :type Machines: list of ScreenNameValue
        :param _Protection: Value of name: Ultimate Edition, Pro Edition, Basic Edition
Value: indicates the corresponding number
        :type Protection: list of ScreenNameValue
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Machines = None
        self._Protection = None
        self._RequestId = None

    @property
    def Machines(self):
        """Value of name: online, shutdown/offline, not installed
Value: indicates the corresponding quantity
        :rtype: list of ScreenNameValue
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines

    @property
    def Protection(self):
        """Value of name: Ultimate Edition, Pro Edition, Basic Edition
Value: indicates the corresponding number
        :rtype: list of ScreenNameValue
        """
        return self._Protection

    @Protection.setter
    def Protection(self, Protection):
        self._Protection = Protection

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = ScreenNameValue()
                obj._deserialize(item)
                self._Machines.append(obj)
        if params.get("Protection") is not None:
            self._Protection = []
            for item in params.get("Protection"):
                obj = ScreenNameValue()
                obj._deserialize(item)
                self._Protection.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenHostInvasionRequest(AbstractModel):
    """DescribeScreenHostInvasion request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        """
        self._Quuid = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScreenHostInvasionResponse(AbstractModel):
    """DescribeScreenHostInvasion response structure.

    """

    def __init__(self):
        r"""
        :param _DefendAttackLog: List of network attack event
        :type DefendAttackLog: list of ScreenDefendAttackLog
        :param _InvasionEvents: List of intrusion detection event
        :type InvasionEvents: list of ScreenInvasion
        :param _Vul: List of vulnerability event
        :type Vul: list of ScreenVulInfo
        :param _Baseline: List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
        :type Baseline: list of ScreenBaselineInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DefendAttackLog = None
        self._InvasionEvents = None
        self._Vul = None
        self._Baseline = None
        self._RequestId = None

    @property
    def DefendAttackLog(self):
        """List of network attack event
        :rtype: list of ScreenDefendAttackLog
        """
        return self._DefendAttackLog

    @DefendAttackLog.setter
    def DefendAttackLog(self, DefendAttackLog):
        self._DefendAttackLog = DefendAttackLog

    @property
    def InvasionEvents(self):
        """List of intrusion detection event
        :rtype: list of ScreenInvasion
        """
        return self._InvasionEvents

    @InvasionEvents.setter
    def InvasionEvents(self, InvasionEvents):
        self._InvasionEvents = InvasionEvents

    @property
    def Vul(self):
        """List of vulnerability event
        :rtype: list of ScreenVulInfo
        """
        return self._Vul

    @Vul.setter
    def Vul(self, Vul):
        self._Vul = Vul

    @property
    def Baseline(self):
        """List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenBaselineInfo
        """
        return self._Baseline

    @Baseline.setter
    def Baseline(self, Baseline):
        self._Baseline = Baseline

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DefendAttackLog") is not None:
            self._DefendAttackLog = []
            for item in params.get("DefendAttackLog"):
                obj = ScreenDefendAttackLog()
                obj._deserialize(item)
                self._DefendAttackLog.append(obj)
        if params.get("InvasionEvents") is not None:
            self._InvasionEvents = []
            for item in params.get("InvasionEvents"):
                obj = ScreenInvasion()
                obj._deserialize(item)
                self._InvasionEvents.append(obj)
        if params.get("Vul") is not None:
            self._Vul = []
            for item in params.get("Vul"):
                obj = ScreenVulInfo()
                obj._deserialize(item)
                self._Vul.append(obj)
        if params.get("Baseline") is not None:
            self._Baseline = []
            for item in params.get("Baseline"):
                obj = ScreenBaselineInfo()
                obj._deserialize(item)
                self._Baseline.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenMachineRegionsRequest(AbstractModel):
    """DescribeScreenMachineRegions request structure.

    """


class DescribeScreenMachineRegionsResponse(AbstractModel):
    """DescribeScreenMachineRegions response structure.

    """

    def __init__(self):
        r"""
        :param _List: List details
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ScreenRegionInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """List details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenRegionInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScreenRegionInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenMachinesRequest(AbstractModel):
    """DescribeScreenMachines request structure.

    """

    def __init__(self):
        r"""
        :param _MachineRegion: Host region
        :type MachineRegion: str
        :param _MachineIpOrAlias: Private IP address or host alias
        :type MachineIpOrAlias: str
        :param _SecurityStatus: Risky host type. 0: all types; 1: risky host; 2: host with potential risks; 3: host that is shut down or offline; 4: host with no risk.
        :type SecurityStatus: int
        """
        self._MachineRegion = None
        self._MachineIpOrAlias = None
        self._SecurityStatus = None

    @property
    def MachineRegion(self):
        """Host region
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def MachineIpOrAlias(self):
        """Private IP address or host alias
        :rtype: str
        """
        return self._MachineIpOrAlias

    @MachineIpOrAlias.setter
    def MachineIpOrAlias(self, MachineIpOrAlias):
        self._MachineIpOrAlias = MachineIpOrAlias

    @property
    def SecurityStatus(self):
        """Risky host type. 0: all types; 1: risky host; 2: host with potential risks; 3: host that is shut down or offline; 4: host with no risk.
        :rtype: int
        """
        return self._SecurityStatus

    @SecurityStatus.setter
    def SecurityStatus(self, SecurityStatus):
        self._SecurityStatus = SecurityStatus


    def _deserialize(self, params):
        self._MachineRegion = params.get("MachineRegion")
        self._MachineIpOrAlias = params.get("MachineIpOrAlias")
        self._SecurityStatus = params.get("SecurityStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScreenMachinesResponse(AbstractModel):
    """DescribeScreenMachines response structure.

    """

    def __init__(self):
        r"""
        :param _List: List details
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ScreenRegionMachines
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """List details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenRegionMachines
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScreenRegionMachines()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenProtectionCntRequest(AbstractModel):
    """DescribeScreenProtectionCnt request structure.

    """


class DescribeScreenProtectionCntResponse(AbstractModel):
    """DescribeScreenProtectionCnt response structure.

    """

    def __init__(self):
        r"""
        :param _List: Introduction of CWPP protection engine 
        :type List: list of ScreenProtectionCnt
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Introduction of CWPP protection engine 
        :rtype: list of ScreenProtectionCnt
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScreenProtectionCnt()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenProtectionStatRequest(AbstractModel):
    """DescribeScreenProtectionStat request structure.

    """


class DescribeScreenProtectionStatResponse(AbstractModel):
    """DescribeScreenProtectionStat response structure.

    """

    def __init__(self):
        r"""
        :param _Info: File scanning status. 0: never detected, or asset payment situation; 1: detected and malicious files exist; 2: detected and isolation protection is not enabled; 3: detected and protection is enabled with no risk.
Brute force crack status. 0: protection not enabled or asset payment situation; 1: protection enabled; 2: events pending to be processed exist
Vulnerability scan status. 0: never detected, or 0 asset payment situation; 1: vulnerability risks exist; 2: no risk
Baseline detection status. 0: never detected, or 0 asset payment situation; 1: baseline risks exist; 2: no risk
        :type Info: list of ScreenProtection
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        """File scanning status. 0: never detected, or asset payment situation; 1: detected and malicious files exist; 2: detected and isolation protection is not enabled; 3: detected and protection is enabled with no risk.
Brute force crack status. 0: protection not enabled or asset payment situation; 1: protection enabled; 2: events pending to be processed exist
Vulnerability scan status. 0: never detected, or 0 asset payment situation; 1: vulnerability risks exist; 2: no risk
Baseline detection status. 0: never detected, or 0 asset payment situation; 1: baseline risks exist; 2: no risk
        :rtype: list of ScreenProtection
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = []
            for item in params.get("Info"):
                obj = ScreenProtection()
                obj._deserialize(item)
                self._Info.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScreenRiskAssetsTopRequest(AbstractModel):
    """DescribeScreenRiskAssetsTop request structure.

    """

    def __init__(self):
        r"""
        :param _BusinessType: Statistics type: 0: potential threat; 1: compromised; 2: vulnerability; 3: baseline
        :type BusinessType: int
        """
        self._BusinessType = None

    @property
    def BusinessType(self):
        """Statistics type: 0: potential threat; 1: compromised; 2: vulnerability; 3: baseline
        :rtype: int
        """
        return self._BusinessType

    @BusinessType.setter
    def BusinessType(self, BusinessType):
        self._BusinessType = BusinessType


    def _deserialize(self, params):
        self._BusinessType = params.get("BusinessType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScreenRiskAssetsTopResponse(AbstractModel):
    """DescribeScreenRiskAssetsTop response structure.

    """

    def __init__(self):
        r"""
        :param _Chart: Statistical details icon data. Name: display the host IP and region; value: number of events
Note: This field may return null, indicating that no valid values can be obtained.
        :type Chart: list of ScreenNameValue
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Chart = None
        self._RequestId = None

    @property
    def Chart(self):
        """Statistical details icon data. Name: display the host IP and region; value: number of events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ScreenNameValue
        """
        return self._Chart

    @Chart.setter
    def Chart(self, Chart):
        self._Chart = Chart

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Chart") is not None:
            self._Chart = []
            for item in params.get("Chart"):
                obj = ScreenNameValue()
                obj._deserialize(item)
                self._Chart.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSearchLogsRequest(AbstractModel):
    """DescribeSearchLogs request structure.

    """


class DescribeSearchLogsResponse(AbstractModel):
    """DescribeSearchLogs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Search history. The latest 10 entries will be kept.
        :type Data: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Search history. The latest 10 entries will be kept.
        :rtype: list of str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeSearchTemplatesRequest(AbstractModel):
    """DescribeSearchTemplates request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Limit: Quantity of returns. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        """
        self._Offset = None
        self._Limit = None

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Quantity of returns. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSearchTemplatesResponse(AbstractModel):
    """DescribeSearchTemplates response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Template list
        :type List: list of SearchTemplate
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Template list
        :rtype: list of SearchTemplate
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SearchTemplate()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecurityBroadcastInfoRequest(AbstractModel):
    """DescribeSecurityBroadcastInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Article ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Article ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecurityBroadcastInfoResponse(AbstractModel):
    """DescribeSecurityBroadcastInfo response structure.

    """

    def __init__(self):
        r"""
        :param _BroadcastInfo: Security broadcasting article details
Note: This field may return null, indicating that no valid values can be obtained.
        :type BroadcastInfo: :class:`tencentcloud.cwp.v20180228.models.BroadcastInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BroadcastInfo = None
        self._RequestId = None

    @property
    def BroadcastInfo(self):
        """Security broadcasting article details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BroadcastInfo`
        """
        return self._BroadcastInfo

    @BroadcastInfo.setter
    def BroadcastInfo(self, BroadcastInfo):
        self._BroadcastInfo = BroadcastInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BroadcastInfo") is not None:
            self._BroadcastInfo = BroadcastInfo()
            self._BroadcastInfo._deserialize(params.get("BroadcastInfo"))
        self._RequestId = params.get("RequestId")


class DescribeSecurityBroadcastsRequest(AbstractModel):
    """DescribeSecurityBroadcasts request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of records to return, which is 10 by default, and 0 = all.
        :type Limit: int
        :param _BeginDate: Filter release date: start time
        :type BeginDate: str
        :param _EndDate: Filter release date: end time
        :type EndDate: str
        :param _BroadcastType: Filter security report type: 0 - emergency notification; 1 - feature update; 2 - industry honor; 3 - version release
        :type BroadcastType: str
        """
        self._Offset = None
        self._Limit = None
        self._BeginDate = None
        self._EndDate = None
        self._BroadcastType = None

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of records to return, which is 10 by default, and 0 = all.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def BeginDate(self):
        """Filter release date: start time
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """Filter release date: end time
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate

    @property
    def BroadcastType(self):
        """Filter security report type: 0 - emergency notification; 1 - feature update; 2 - industry honor; 3 - version release
        :rtype: str
        """
        return self._BroadcastType

    @BroadcastType.setter
    def BroadcastType(self, BroadcastType):
        self._BroadcastType = BroadcastType


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        self._BroadcastType = params.get("BroadcastType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecurityBroadcastsResponse(AbstractModel):
    """DescribeSecurityBroadcasts response structure.

    """

    def __init__(self):
        r"""
        :param _List: List
        :type List: list of Broadcasts
        :param _TotalCount: Total count.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """List
        :rtype: list of Broadcasts
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total count.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = Broadcasts()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeSecurityDynamicsRequest(AbstractModel):
    """DescribeSecurityDynamics request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns. The maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        """
        self._Limit = None
        self._Offset = None

    @property
    def Limit(self):
        """Number of returns. The maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecurityDynamicsResponse(AbstractModel):
    """DescribeSecurityDynamics response structure.

    """

    def __init__(self):
        r"""
        :param _SecurityDynamics: Security event message array
        :type SecurityDynamics: list of SecurityDynamic
        :param _TotalCount: Total number of records
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SecurityDynamics = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def SecurityDynamics(self):
        """Security event message array
        :rtype: list of SecurityDynamic
        """
        return self._SecurityDynamics

    @SecurityDynamics.setter
    def SecurityDynamics(self, SecurityDynamics):
        self._SecurityDynamics = SecurityDynamics

    @property
    def TotalCount(self):
        """Total number of records
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SecurityDynamics") is not None:
            self._SecurityDynamics = []
            for item in params.get("SecurityDynamics"):
                obj = SecurityDynamic()
                obj._deserialize(item)
                self._SecurityDynamics.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeSecurityEventStatRequest(AbstractModel):
    """DescribeSecurityEventStat request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: This API has no filtering criteria.
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """This API has no filtering criteria.
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecurityEventStatResponse(AbstractModel):
    """DescribeSecurityEventStat response structure.

    """

    def __init__(self):
        r"""
        :param _MalwareStat: Trojan event statistics
        :type MalwareStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _HostLoginStat: Statistics of cross-region log-in events
        :type HostLoginStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _BruteAttackStat: Statistics of brute force cracking events
        :type BruteAttackStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _MaliciousRequestStat: Malicious request event statistics
        :type MaliciousRequestStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _PrivilegeStat: Statistics of local privilege escalation events
        :type PrivilegeStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _ReverseShellStat: Reverse shell event statistics
        :type ReverseShellStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _HighRiskBashStat: Statistics of high-risk command events
        :type HighRiskBashStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _AttackLogsStat: Network attack event statistics
        :type AttackLogsStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _VulHighStat: Statistics of high-risk vulnerability events
        :type VulHighStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _VulNormalStat: Statistics of medium-risk vulnerability events
        :type VulNormalStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _VulLowStat: Statistics of low-risk vulnerability events
        :type VulLowStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _BaselineHighStat: Statistics of high-risk baseline vulnerability events
        :type BaselineHighStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _BaselineNormalStat: Statistics of medium-risk baseline vulnerability events
        :type BaselineNormalStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _BaselineLowStat: Statistics of low-risk baseline vulnerability events
        :type BaselineLowStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _MachineTotalAffectNum: Total number of machines with unfixed security events
        :type MachineTotalAffectNum: int
        :param _InvasionTotalAffectNum: Total number of machines with unfixed intrusion security events
        :type InvasionTotalAffectNum: int
        :param _VulTotalAffectNum: Total number of machines with unfixed vulnerability security events
        :type VulTotalAffectNum: int
        :param _BaseLineTotalAffectNum: Total number of machines with unfixed baseline security events
        :type BaseLineTotalAffectNum: int
        :param _CyberAttackTotalAffectNum: Total number of machines with unfixed network attack security events
        :type CyberAttackTotalAffectNum: int
        :param _VulRiskStat: Critical vulnerability event statistics
        :type VulRiskStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _BaselineRiskStat: Statistics of critical baseline vulnerability events
        :type BaselineRiskStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _VulStat: Statistics on the number of vulnerabilities
        :type VulStat: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        :param _Score: Security score
        :type Score: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MalwareStat = None
        self._HostLoginStat = None
        self._BruteAttackStat = None
        self._MaliciousRequestStat = None
        self._PrivilegeStat = None
        self._ReverseShellStat = None
        self._HighRiskBashStat = None
        self._AttackLogsStat = None
        self._VulHighStat = None
        self._VulNormalStat = None
        self._VulLowStat = None
        self._BaselineHighStat = None
        self._BaselineNormalStat = None
        self._BaselineLowStat = None
        self._MachineTotalAffectNum = None
        self._InvasionTotalAffectNum = None
        self._VulTotalAffectNum = None
        self._BaseLineTotalAffectNum = None
        self._CyberAttackTotalAffectNum = None
        self._VulRiskStat = None
        self._BaselineRiskStat = None
        self._VulStat = None
        self._Score = None
        self._RequestId = None

    @property
    def MalwareStat(self):
        """Trojan event statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._MalwareStat

    @MalwareStat.setter
    def MalwareStat(self, MalwareStat):
        self._MalwareStat = MalwareStat

    @property
    def HostLoginStat(self):
        """Statistics of cross-region log-in events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._HostLoginStat

    @HostLoginStat.setter
    def HostLoginStat(self, HostLoginStat):
        self._HostLoginStat = HostLoginStat

    @property
    def BruteAttackStat(self):
        """Statistics of brute force cracking events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._BruteAttackStat

    @BruteAttackStat.setter
    def BruteAttackStat(self, BruteAttackStat):
        self._BruteAttackStat = BruteAttackStat

    @property
    def MaliciousRequestStat(self):
        """Malicious request event statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._MaliciousRequestStat

    @MaliciousRequestStat.setter
    def MaliciousRequestStat(self, MaliciousRequestStat):
        self._MaliciousRequestStat = MaliciousRequestStat

    @property
    def PrivilegeStat(self):
        """Statistics of local privilege escalation events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._PrivilegeStat

    @PrivilegeStat.setter
    def PrivilegeStat(self, PrivilegeStat):
        self._PrivilegeStat = PrivilegeStat

    @property
    def ReverseShellStat(self):
        """Reverse shell event statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._ReverseShellStat

    @ReverseShellStat.setter
    def ReverseShellStat(self, ReverseShellStat):
        self._ReverseShellStat = ReverseShellStat

    @property
    def HighRiskBashStat(self):
        """Statistics of high-risk command events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._HighRiskBashStat

    @HighRiskBashStat.setter
    def HighRiskBashStat(self, HighRiskBashStat):
        self._HighRiskBashStat = HighRiskBashStat

    @property
    def AttackLogsStat(self):
        """Network attack event statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._AttackLogsStat

    @AttackLogsStat.setter
    def AttackLogsStat(self, AttackLogsStat):
        self._AttackLogsStat = AttackLogsStat

    @property
    def VulHighStat(self):
        """Statistics of high-risk vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._VulHighStat

    @VulHighStat.setter
    def VulHighStat(self, VulHighStat):
        self._VulHighStat = VulHighStat

    @property
    def VulNormalStat(self):
        """Statistics of medium-risk vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._VulNormalStat

    @VulNormalStat.setter
    def VulNormalStat(self, VulNormalStat):
        self._VulNormalStat = VulNormalStat

    @property
    def VulLowStat(self):
        """Statistics of low-risk vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._VulLowStat

    @VulLowStat.setter
    def VulLowStat(self, VulLowStat):
        self._VulLowStat = VulLowStat

    @property
    def BaselineHighStat(self):
        """Statistics of high-risk baseline vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._BaselineHighStat

    @BaselineHighStat.setter
    def BaselineHighStat(self, BaselineHighStat):
        self._BaselineHighStat = BaselineHighStat

    @property
    def BaselineNormalStat(self):
        """Statistics of medium-risk baseline vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._BaselineNormalStat

    @BaselineNormalStat.setter
    def BaselineNormalStat(self, BaselineNormalStat):
        self._BaselineNormalStat = BaselineNormalStat

    @property
    def BaselineLowStat(self):
        """Statistics of low-risk baseline vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._BaselineLowStat

    @BaselineLowStat.setter
    def BaselineLowStat(self, BaselineLowStat):
        self._BaselineLowStat = BaselineLowStat

    @property
    def MachineTotalAffectNum(self):
        """Total number of machines with unfixed security events
        :rtype: int
        """
        return self._MachineTotalAffectNum

    @MachineTotalAffectNum.setter
    def MachineTotalAffectNum(self, MachineTotalAffectNum):
        self._MachineTotalAffectNum = MachineTotalAffectNum

    @property
    def InvasionTotalAffectNum(self):
        """Total number of machines with unfixed intrusion security events
        :rtype: int
        """
        return self._InvasionTotalAffectNum

    @InvasionTotalAffectNum.setter
    def InvasionTotalAffectNum(self, InvasionTotalAffectNum):
        self._InvasionTotalAffectNum = InvasionTotalAffectNum

    @property
    def VulTotalAffectNum(self):
        """Total number of machines with unfixed vulnerability security events
        :rtype: int
        """
        return self._VulTotalAffectNum

    @VulTotalAffectNum.setter
    def VulTotalAffectNum(self, VulTotalAffectNum):
        self._VulTotalAffectNum = VulTotalAffectNum

    @property
    def BaseLineTotalAffectNum(self):
        """Total number of machines with unfixed baseline security events
        :rtype: int
        """
        return self._BaseLineTotalAffectNum

    @BaseLineTotalAffectNum.setter
    def BaseLineTotalAffectNum(self, BaseLineTotalAffectNum):
        self._BaseLineTotalAffectNum = BaseLineTotalAffectNum

    @property
    def CyberAttackTotalAffectNum(self):
        """Total number of machines with unfixed network attack security events
        :rtype: int
        """
        return self._CyberAttackTotalAffectNum

    @CyberAttackTotalAffectNum.setter
    def CyberAttackTotalAffectNum(self, CyberAttackTotalAffectNum):
        self._CyberAttackTotalAffectNum = CyberAttackTotalAffectNum

    @property
    def VulRiskStat(self):
        """Critical vulnerability event statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._VulRiskStat

    @VulRiskStat.setter
    def VulRiskStat(self, VulRiskStat):
        self._VulRiskStat = VulRiskStat

    @property
    def BaselineRiskStat(self):
        """Statistics of critical baseline vulnerability events
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._BaselineRiskStat

    @BaselineRiskStat.setter
    def BaselineRiskStat(self, BaselineRiskStat):
        self._BaselineRiskStat = BaselineRiskStat

    @property
    def VulStat(self):
        """Statistics on the number of vulnerabilities
        :rtype: :class:`tencentcloud.cwp.v20180228.models.EventStat`
        """
        return self._VulStat

    @VulStat.setter
    def VulStat(self, VulStat):
        self._VulStat = VulStat

    @property
    def Score(self):
        """Security score
        :rtype: int
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("MalwareStat") is not None:
            self._MalwareStat = EventStat()
            self._MalwareStat._deserialize(params.get("MalwareStat"))
        if params.get("HostLoginStat") is not None:
            self._HostLoginStat = EventStat()
            self._HostLoginStat._deserialize(params.get("HostLoginStat"))
        if params.get("BruteAttackStat") is not None:
            self._BruteAttackStat = EventStat()
            self._BruteAttackStat._deserialize(params.get("BruteAttackStat"))
        if params.get("MaliciousRequestStat") is not None:
            self._MaliciousRequestStat = EventStat()
            self._MaliciousRequestStat._deserialize(params.get("MaliciousRequestStat"))
        if params.get("PrivilegeStat") is not None:
            self._PrivilegeStat = EventStat()
            self._PrivilegeStat._deserialize(params.get("PrivilegeStat"))
        if params.get("ReverseShellStat") is not None:
            self._ReverseShellStat = EventStat()
            self._ReverseShellStat._deserialize(params.get("ReverseShellStat"))
        if params.get("HighRiskBashStat") is not None:
            self._HighRiskBashStat = EventStat()
            self._HighRiskBashStat._deserialize(params.get("HighRiskBashStat"))
        if params.get("AttackLogsStat") is not None:
            self._AttackLogsStat = EventStat()
            self._AttackLogsStat._deserialize(params.get("AttackLogsStat"))
        if params.get("VulHighStat") is not None:
            self._VulHighStat = EventStat()
            self._VulHighStat._deserialize(params.get("VulHighStat"))
        if params.get("VulNormalStat") is not None:
            self._VulNormalStat = EventStat()
            self._VulNormalStat._deserialize(params.get("VulNormalStat"))
        if params.get("VulLowStat") is not None:
            self._VulLowStat = EventStat()
            self._VulLowStat._deserialize(params.get("VulLowStat"))
        if params.get("BaselineHighStat") is not None:
            self._BaselineHighStat = EventStat()
            self._BaselineHighStat._deserialize(params.get("BaselineHighStat"))
        if params.get("BaselineNormalStat") is not None:
            self._BaselineNormalStat = EventStat()
            self._BaselineNormalStat._deserialize(params.get("BaselineNormalStat"))
        if params.get("BaselineLowStat") is not None:
            self._BaselineLowStat = EventStat()
            self._BaselineLowStat._deserialize(params.get("BaselineLowStat"))
        self._MachineTotalAffectNum = params.get("MachineTotalAffectNum")
        self._InvasionTotalAffectNum = params.get("InvasionTotalAffectNum")
        self._VulTotalAffectNum = params.get("VulTotalAffectNum")
        self._BaseLineTotalAffectNum = params.get("BaseLineTotalAffectNum")
        self._CyberAttackTotalAffectNum = params.get("CyberAttackTotalAffectNum")
        if params.get("VulRiskStat") is not None:
            self._VulRiskStat = EventStat()
            self._VulRiskStat._deserialize(params.get("VulRiskStat"))
        if params.get("BaselineRiskStat") is not None:
            self._BaselineRiskStat = EventStat()
            self._BaselineRiskStat._deserialize(params.get("BaselineRiskStat"))
        if params.get("VulStat") is not None:
            self._VulStat = EventStat()
            self._VulStat._deserialize(params.get("VulStat"))
        self._Score = params.get("Score")
        self._RequestId = params.get("RequestId")


class DescribeSecurityEventsCntRequest(AbstractModel):
    """DescribeSecurityEventsCnt request structure.

    """


class DescribeSecurityEventsCntResponse(AbstractModel):
    """DescribeSecurityEventsCnt response structure.

    """

    def __init__(self):
        r"""
        :param _Malware: Trojan file-related risk event
        :type Malware: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _HostLogin: Log-in audit-related risk event
        :type HostLogin: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _BruteAttack: Password cracking-related risk event
        :type BruteAttack: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _RiskDns: Malicious request-related risk event
        :type RiskDns: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _Bash: High-risk command-related risk event
        :type Bash: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _PrivilegeRules: Local privilege escalation-related risk event
        :type PrivilegeRules: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _ReverseShell: Reverse Shell-related risk event
        :type ReverseShell: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _SysVul: Application vulnerability-related risk event
        :type SysVul: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _WebVul: Web application vulnerability-related risk event
        :type WebVul: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _EmergencyVul: Emergency vulnerability-related risk event
        :type EmergencyVul: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _BaseLine: Security baseline-related risk event
        :type BaseLine: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _AttackLogs: Attack detection-related risk event
        :type AttackLogs: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _EffectMachineCount: Number of affected machines
        :type EffectMachineCount: int
        :param _EventsCount: Total of number of events
        :type EventsCount: int
        :param _WindowVul: Total of Windows system vulnerability events
Note: This field may return null, indicating that no valid values can be obtained.
        :type WindowVul: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _LinuxVul: Total of Linux system vulnerability events
Note: This field may return null, indicating that no valid values can be obtained.
        :type LinuxVul: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Malware = None
        self._HostLogin = None
        self._BruteAttack = None
        self._RiskDns = None
        self._Bash = None
        self._PrivilegeRules = None
        self._ReverseShell = None
        self._SysVul = None
        self._WebVul = None
        self._EmergencyVul = None
        self._BaseLine = None
        self._AttackLogs = None
        self._EffectMachineCount = None
        self._EventsCount = None
        self._WindowVul = None
        self._LinuxVul = None
        self._RequestId = None

    @property
    def Malware(self):
        """Trojan file-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._Malware

    @Malware.setter
    def Malware(self, Malware):
        self._Malware = Malware

    @property
    def HostLogin(self):
        """Log-in audit-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._HostLogin

    @HostLogin.setter
    def HostLogin(self, HostLogin):
        self._HostLogin = HostLogin

    @property
    def BruteAttack(self):
        """Password cracking-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._BruteAttack

    @BruteAttack.setter
    def BruteAttack(self, BruteAttack):
        self._BruteAttack = BruteAttack

    @property
    def RiskDns(self):
        """Malicious request-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._RiskDns

    @RiskDns.setter
    def RiskDns(self, RiskDns):
        self._RiskDns = RiskDns

    @property
    def Bash(self):
        """High-risk command-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._Bash

    @Bash.setter
    def Bash(self, Bash):
        self._Bash = Bash

    @property
    def PrivilegeRules(self):
        """Local privilege escalation-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._PrivilegeRules

    @PrivilegeRules.setter
    def PrivilegeRules(self, PrivilegeRules):
        self._PrivilegeRules = PrivilegeRules

    @property
    def ReverseShell(self):
        """Reverse Shell-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._ReverseShell

    @ReverseShell.setter
    def ReverseShell(self, ReverseShell):
        self._ReverseShell = ReverseShell

    @property
    def SysVul(self):
        """Application vulnerability-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._SysVul

    @SysVul.setter
    def SysVul(self, SysVul):
        self._SysVul = SysVul

    @property
    def WebVul(self):
        """Web application vulnerability-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._WebVul

    @WebVul.setter
    def WebVul(self, WebVul):
        self._WebVul = WebVul

    @property
    def EmergencyVul(self):
        """Emergency vulnerability-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._EmergencyVul

    @EmergencyVul.setter
    def EmergencyVul(self, EmergencyVul):
        self._EmergencyVul = EmergencyVul

    @property
    def BaseLine(self):
        """Security baseline-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._BaseLine

    @BaseLine.setter
    def BaseLine(self, BaseLine):
        self._BaseLine = BaseLine

    @property
    def AttackLogs(self):
        """Attack detection-related risk event
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._AttackLogs

    @AttackLogs.setter
    def AttackLogs(self, AttackLogs):
        self._AttackLogs = AttackLogs

    @property
    def EffectMachineCount(self):
        """Number of affected machines
        :rtype: int
        """
        return self._EffectMachineCount

    @EffectMachineCount.setter
    def EffectMachineCount(self, EffectMachineCount):
        self._EffectMachineCount = EffectMachineCount

    @property
    def EventsCount(self):
        """Total of number of events
        :rtype: int
        """
        return self._EventsCount

    @EventsCount.setter
    def EventsCount(self, EventsCount):
        self._EventsCount = EventsCount

    @property
    def WindowVul(self):
        """Total of Windows system vulnerability events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._WindowVul

    @WindowVul.setter
    def WindowVul(self, WindowVul):
        self._WindowVul = WindowVul

    @property
    def LinuxVul(self):
        """Total of Linux system vulnerability events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.SecurityEventInfo`
        """
        return self._LinuxVul

    @LinuxVul.setter
    def LinuxVul(self, LinuxVul):
        self._LinuxVul = LinuxVul

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Malware") is not None:
            self._Malware = SecurityEventInfo()
            self._Malware._deserialize(params.get("Malware"))
        if params.get("HostLogin") is not None:
            self._HostLogin = SecurityEventInfo()
            self._HostLogin._deserialize(params.get("HostLogin"))
        if params.get("BruteAttack") is not None:
            self._BruteAttack = SecurityEventInfo()
            self._BruteAttack._deserialize(params.get("BruteAttack"))
        if params.get("RiskDns") is not None:
            self._RiskDns = SecurityEventInfo()
            self._RiskDns._deserialize(params.get("RiskDns"))
        if params.get("Bash") is not None:
            self._Bash = SecurityEventInfo()
            self._Bash._deserialize(params.get("Bash"))
        if params.get("PrivilegeRules") is not None:
            self._PrivilegeRules = SecurityEventInfo()
            self._PrivilegeRules._deserialize(params.get("PrivilegeRules"))
        if params.get("ReverseShell") is not None:
            self._ReverseShell = SecurityEventInfo()
            self._ReverseShell._deserialize(params.get("ReverseShell"))
        if params.get("SysVul") is not None:
            self._SysVul = SecurityEventInfo()
            self._SysVul._deserialize(params.get("SysVul"))
        if params.get("WebVul") is not None:
            self._WebVul = SecurityEventInfo()
            self._WebVul._deserialize(params.get("WebVul"))
        if params.get("EmergencyVul") is not None:
            self._EmergencyVul = SecurityEventInfo()
            self._EmergencyVul._deserialize(params.get("EmergencyVul"))
        if params.get("BaseLine") is not None:
            self._BaseLine = SecurityEventInfo()
            self._BaseLine._deserialize(params.get("BaseLine"))
        if params.get("AttackLogs") is not None:
            self._AttackLogs = SecurityEventInfo()
            self._AttackLogs._deserialize(params.get("AttackLogs"))
        self._EffectMachineCount = params.get("EffectMachineCount")
        self._EventsCount = params.get("EventsCount")
        if params.get("WindowVul") is not None:
            self._WindowVul = SecurityEventInfo()
            self._WindowVul._deserialize(params.get("WindowVul"))
        if params.get("LinuxVul") is not None:
            self._LinuxVul = SecurityEventInfo()
            self._LinuxVul._deserialize(params.get("LinuxVul"))
        self._RequestId = params.get("RequestId")


class DescribeSecurityProtectionStatRequest(AbstractModel):
    """DescribeSecurityProtectionStat request structure.

    """


class DescribeSecurityProtectionStatResponse(AbstractModel):
    """DescribeSecurityProtectionStat response structure.

    """

    def __init__(self):
        r"""
        :param _AssetManageStat: 0: asset not paid; 1: agent not installed; 2: Pro or Ultimate Edition for some assets; 3: Pro or Ultimate Edition for all assets.
        :type AssetManageStat: int
        :param _VulManageStat: 0: never scanned or asset not paid; 1: vulnerability risk found; 2: no risk.
        :type VulManageStat: int
        :param _SecureBasicLineStat: 0: never scanned or asset not paid; 1: baseline risk found; 2: no risk.
        :type SecureBasicLineStat: int
        :param _MalwareScanStat: 0: never scanned or asset not paid; 1: scanned and malicious files found; 2: scanned but isolation protection disabled; 3: scanned, protection enabled, and no risk found.
        :type MalwareScanStat: int
        :param _DefenseBruteAttackStat: Enabling status of password cracking prevention. 0: disabled or asset not paid; 1: enabled; 2: events pending fixing found.
        :type DefenseBruteAttackStat: int
        :param _FileTamperStat: Core file monitoring. 0: disabled (asset not paid); 1: enabled.
        :type FileTamperStat: int
        :param _WebPageStat: Web page tamper prevention. 0: disabled; 1: enabled.
        :type WebPageStat: int
        :param _LoginLogStat: Abnormal log-in. 0: unfixed risks found; 1: no risk and allowlist not configured; 2: no risk and allowlist configured.
        :type LoginLogStat: int
        :param _DiscoverBruteAttackStat: Password cracking risk detection. 0: unfixed risks found; 1: no risk with detection in progress.
        :type DiscoverBruteAttackStat: int
        :param _MaliciousRequestStat: Malicious request. 0: no asset in Pro or Ultimate Edition; 1: unfixed malicious request risks found; 2: paid assets found with no risk.
        :type MaliciousRequestStat: int
        :param _PrivilegeStat: Local privilege escalation. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :type PrivilegeStat: int
        :param _ReverseShellStat: Reverse shell. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :type ReverseShellStat: int
        :param _ExpertServiceStat: Expert service. 0: disabled; 1: enabled.
        :type ExpertServiceStat: int
        :param _LogAnalysisStat: Log analysis. 0: disabled; 1: enabled.
        :type LogAnalysisStat: int
        :param _WarningSetStat: Security alarm. 0: disabled (for all assets); 1: enabled (for at least one asset).
        :type WarningSetStat: int
        :param _EventBashStat: High-risk command. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :type EventBashStat: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AssetManageStat = None
        self._VulManageStat = None
        self._SecureBasicLineStat = None
        self._MalwareScanStat = None
        self._DefenseBruteAttackStat = None
        self._FileTamperStat = None
        self._WebPageStat = None
        self._LoginLogStat = None
        self._DiscoverBruteAttackStat = None
        self._MaliciousRequestStat = None
        self._PrivilegeStat = None
        self._ReverseShellStat = None
        self._ExpertServiceStat = None
        self._LogAnalysisStat = None
        self._WarningSetStat = None
        self._EventBashStat = None
        self._RequestId = None

    @property
    def AssetManageStat(self):
        """0: asset not paid; 1: agent not installed; 2: Pro or Ultimate Edition for some assets; 3: Pro or Ultimate Edition for all assets.
        :rtype: int
        """
        return self._AssetManageStat

    @AssetManageStat.setter
    def AssetManageStat(self, AssetManageStat):
        self._AssetManageStat = AssetManageStat

    @property
    def VulManageStat(self):
        """0: never scanned or asset not paid; 1: vulnerability risk found; 2: no risk.
        :rtype: int
        """
        return self._VulManageStat

    @VulManageStat.setter
    def VulManageStat(self, VulManageStat):
        self._VulManageStat = VulManageStat

    @property
    def SecureBasicLineStat(self):
        """0: never scanned or asset not paid; 1: baseline risk found; 2: no risk.
        :rtype: int
        """
        return self._SecureBasicLineStat

    @SecureBasicLineStat.setter
    def SecureBasicLineStat(self, SecureBasicLineStat):
        self._SecureBasicLineStat = SecureBasicLineStat

    @property
    def MalwareScanStat(self):
        """0: never scanned or asset not paid; 1: scanned and malicious files found; 2: scanned but isolation protection disabled; 3: scanned, protection enabled, and no risk found.
        :rtype: int
        """
        return self._MalwareScanStat

    @MalwareScanStat.setter
    def MalwareScanStat(self, MalwareScanStat):
        self._MalwareScanStat = MalwareScanStat

    @property
    def DefenseBruteAttackStat(self):
        """Enabling status of password cracking prevention. 0: disabled or asset not paid; 1: enabled; 2: events pending fixing found.
        :rtype: int
        """
        return self._DefenseBruteAttackStat

    @DefenseBruteAttackStat.setter
    def DefenseBruteAttackStat(self, DefenseBruteAttackStat):
        self._DefenseBruteAttackStat = DefenseBruteAttackStat

    @property
    def FileTamperStat(self):
        """Core file monitoring. 0: disabled (asset not paid); 1: enabled.
        :rtype: int
        """
        return self._FileTamperStat

    @FileTamperStat.setter
    def FileTamperStat(self, FileTamperStat):
        self._FileTamperStat = FileTamperStat

    @property
    def WebPageStat(self):
        """Web page tamper prevention. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._WebPageStat

    @WebPageStat.setter
    def WebPageStat(self, WebPageStat):
        self._WebPageStat = WebPageStat

    @property
    def LoginLogStat(self):
        """Abnormal log-in. 0: unfixed risks found; 1: no risk and allowlist not configured; 2: no risk and allowlist configured.
        :rtype: int
        """
        return self._LoginLogStat

    @LoginLogStat.setter
    def LoginLogStat(self, LoginLogStat):
        self._LoginLogStat = LoginLogStat

    @property
    def DiscoverBruteAttackStat(self):
        """Password cracking risk detection. 0: unfixed risks found; 1: no risk with detection in progress.
        :rtype: int
        """
        return self._DiscoverBruteAttackStat

    @DiscoverBruteAttackStat.setter
    def DiscoverBruteAttackStat(self, DiscoverBruteAttackStat):
        self._DiscoverBruteAttackStat = DiscoverBruteAttackStat

    @property
    def MaliciousRequestStat(self):
        """Malicious request. 0: no asset in Pro or Ultimate Edition; 1: unfixed malicious request risks found; 2: paid assets found with no risk.
        :rtype: int
        """
        return self._MaliciousRequestStat

    @MaliciousRequestStat.setter
    def MaliciousRequestStat(self, MaliciousRequestStat):
        self._MaliciousRequestStat = MaliciousRequestStat

    @property
    def PrivilegeStat(self):
        """Local privilege escalation. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :rtype: int
        """
        return self._PrivilegeStat

    @PrivilegeStat.setter
    def PrivilegeStat(self, PrivilegeStat):
        self._PrivilegeStat = PrivilegeStat

    @property
    def ReverseShellStat(self):
        """Reverse shell. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :rtype: int
        """
        return self._ReverseShellStat

    @ReverseShellStat.setter
    def ReverseShellStat(self, ReverseShellStat):
        self._ReverseShellStat = ReverseShellStat

    @property
    def ExpertServiceStat(self):
        """Expert service. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._ExpertServiceStat

    @ExpertServiceStat.setter
    def ExpertServiceStat(self, ExpertServiceStat):
        self._ExpertServiceStat = ExpertServiceStat

    @property
    def LogAnalysisStat(self):
        """Log analysis. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._LogAnalysisStat

    @LogAnalysisStat.setter
    def LogAnalysisStat(self, LogAnalysisStat):
        self._LogAnalysisStat = LogAnalysisStat

    @property
    def WarningSetStat(self):
        """Security alarm. 0: disabled (for all assets); 1: enabled (for at least one asset).
        :rtype: int
        """
        return self._WarningSetStat

    @WarningSetStat.setter
    def WarningSetStat(self, WarningSetStat):
        self._WarningSetStat = WarningSetStat

    @property
    def EventBashStat(self):
        """High-risk command. 0: no asset in Pro or Ultimate Edition; 1: unfixed risks found; 2: paid assets found with no risk.
        :rtype: int
        """
        return self._EventBashStat

    @EventBashStat.setter
    def EventBashStat(self, EventBashStat):
        self._EventBashStat = EventBashStat

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AssetManageStat = params.get("AssetManageStat")
        self._VulManageStat = params.get("VulManageStat")
        self._SecureBasicLineStat = params.get("SecureBasicLineStat")
        self._MalwareScanStat = params.get("MalwareScanStat")
        self._DefenseBruteAttackStat = params.get("DefenseBruteAttackStat")
        self._FileTamperStat = params.get("FileTamperStat")
        self._WebPageStat = params.get("WebPageStat")
        self._LoginLogStat = params.get("LoginLogStat")
        self._DiscoverBruteAttackStat = params.get("DiscoverBruteAttackStat")
        self._MaliciousRequestStat = params.get("MaliciousRequestStat")
        self._PrivilegeStat = params.get("PrivilegeStat")
        self._ReverseShellStat = params.get("ReverseShellStat")
        self._ExpertServiceStat = params.get("ExpertServiceStat")
        self._LogAnalysisStat = params.get("LogAnalysisStat")
        self._WarningSetStat = params.get("WarningSetStat")
        self._EventBashStat = params.get("EventBashStat")
        self._RequestId = params.get("RequestId")


class DescribeSecurityTrendsRequest(AbstractModel):
    """DescribeSecurityTrends request structure.

    """

    def __init__(self):
        r"""
        :param _BeginDate: Start time. Example: 2021-07-10
        :type BeginDate: str
        :param _EndDate: End time. Example: 2021-07-10
        :type EndDate: str
        """
        self._BeginDate = None
        self._EndDate = None

    @property
    def BeginDate(self):
        """Start time. Example: 2021-07-10
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time. Example: 2021-07-10
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecurityTrendsResponse(AbstractModel):
    """DescribeSecurityTrends response structure.

    """

    def __init__(self):
        r"""
        :param _Malwares: Array of counted Trojan events
        :type Malwares: list of SecurityTrend
        :param _NonLocalLoginPlaces: Array of counted cross-region log-in events
        :type NonLocalLoginPlaces: list of SecurityTrend
        :param _BruteAttacks: Array of counted password cracking events
        :type BruteAttacks: list of SecurityTrend
        :param _Vuls: Array of counted vulnerabilities
        :type Vuls: list of SecurityTrend
        :param _BaseLines: Array of counted baselines
        :type BaseLines: list of SecurityTrend
        :param _MaliciousRequests: Array of counted malicious requests
        :type MaliciousRequests: list of SecurityTrend
        :param _HighRiskBashs: Array of counted high-risk command
        :type HighRiskBashs: list of SecurityTrend
        :param _ReverseShells: Array of counted reverse shell
        :type ReverseShells: list of SecurityTrend
        :param _PrivilegeEscalations: Array of counted local privilege escalation
        :type PrivilegeEscalations: list of SecurityTrend
        :param _CyberAttacks: Array of counted network attacks
        :type CyberAttacks: list of SecurityTrend
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Malwares = None
        self._NonLocalLoginPlaces = None
        self._BruteAttacks = None
        self._Vuls = None
        self._BaseLines = None
        self._MaliciousRequests = None
        self._HighRiskBashs = None
        self._ReverseShells = None
        self._PrivilegeEscalations = None
        self._CyberAttacks = None
        self._RequestId = None

    @property
    def Malwares(self):
        """Array of counted Trojan events
        :rtype: list of SecurityTrend
        """
        return self._Malwares

    @Malwares.setter
    def Malwares(self, Malwares):
        self._Malwares = Malwares

    @property
    def NonLocalLoginPlaces(self):
        """Array of counted cross-region log-in events
        :rtype: list of SecurityTrend
        """
        return self._NonLocalLoginPlaces

    @NonLocalLoginPlaces.setter
    def NonLocalLoginPlaces(self, NonLocalLoginPlaces):
        self._NonLocalLoginPlaces = NonLocalLoginPlaces

    @property
    def BruteAttacks(self):
        """Array of counted password cracking events
        :rtype: list of SecurityTrend
        """
        return self._BruteAttacks

    @BruteAttacks.setter
    def BruteAttacks(self, BruteAttacks):
        self._BruteAttacks = BruteAttacks

    @property
    def Vuls(self):
        """Array of counted vulnerabilities
        :rtype: list of SecurityTrend
        """
        return self._Vuls

    @Vuls.setter
    def Vuls(self, Vuls):
        self._Vuls = Vuls

    @property
    def BaseLines(self):
        """Array of counted baselines
        :rtype: list of SecurityTrend
        """
        return self._BaseLines

    @BaseLines.setter
    def BaseLines(self, BaseLines):
        self._BaseLines = BaseLines

    @property
    def MaliciousRequests(self):
        """Array of counted malicious requests
        :rtype: list of SecurityTrend
        """
        return self._MaliciousRequests

    @MaliciousRequests.setter
    def MaliciousRequests(self, MaliciousRequests):
        self._MaliciousRequests = MaliciousRequests

    @property
    def HighRiskBashs(self):
        """Array of counted high-risk command
        :rtype: list of SecurityTrend
        """
        return self._HighRiskBashs

    @HighRiskBashs.setter
    def HighRiskBashs(self, HighRiskBashs):
        self._HighRiskBashs = HighRiskBashs

    @property
    def ReverseShells(self):
        """Array of counted reverse shell
        :rtype: list of SecurityTrend
        """
        return self._ReverseShells

    @ReverseShells.setter
    def ReverseShells(self, ReverseShells):
        self._ReverseShells = ReverseShells

    @property
    def PrivilegeEscalations(self):
        """Array of counted local privilege escalation
        :rtype: list of SecurityTrend
        """
        return self._PrivilegeEscalations

    @PrivilegeEscalations.setter
    def PrivilegeEscalations(self, PrivilegeEscalations):
        self._PrivilegeEscalations = PrivilegeEscalations

    @property
    def CyberAttacks(self):
        """Array of counted network attacks
        :rtype: list of SecurityTrend
        """
        return self._CyberAttacks

    @CyberAttacks.setter
    def CyberAttacks(self, CyberAttacks):
        self._CyberAttacks = CyberAttacks

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Malwares") is not None:
            self._Malwares = []
            for item in params.get("Malwares"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._Malwares.append(obj)
        if params.get("NonLocalLoginPlaces") is not None:
            self._NonLocalLoginPlaces = []
            for item in params.get("NonLocalLoginPlaces"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._NonLocalLoginPlaces.append(obj)
        if params.get("BruteAttacks") is not None:
            self._BruteAttacks = []
            for item in params.get("BruteAttacks"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._BruteAttacks.append(obj)
        if params.get("Vuls") is not None:
            self._Vuls = []
            for item in params.get("Vuls"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._Vuls.append(obj)
        if params.get("BaseLines") is not None:
            self._BaseLines = []
            for item in params.get("BaseLines"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._BaseLines.append(obj)
        if params.get("MaliciousRequests") is not None:
            self._MaliciousRequests = []
            for item in params.get("MaliciousRequests"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._MaliciousRequests.append(obj)
        if params.get("HighRiskBashs") is not None:
            self._HighRiskBashs = []
            for item in params.get("HighRiskBashs"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._HighRiskBashs.append(obj)
        if params.get("ReverseShells") is not None:
            self._ReverseShells = []
            for item in params.get("ReverseShells"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._ReverseShells.append(obj)
        if params.get("PrivilegeEscalations") is not None:
            self._PrivilegeEscalations = []
            for item in params.get("PrivilegeEscalations"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._PrivilegeEscalations.append(obj)
        if params.get("CyberAttacks") is not None:
            self._CyberAttacks = []
            for item in params.get("CyberAttacks"):
                obj = SecurityTrend()
                obj._deserialize(item)
                self._CyberAttacks.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeServersAndRiskAndFirstInfoRequest(AbstractModel):
    """DescribeServersAndRiskAndFirstInfo request structure.

    """


class DescribeServersAndRiskAndFirstInfoResponse(AbstractModel):
    """DescribeServersAndRiskAndFirstInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RiskFileCount: Number of risky files
        :type RiskFileCount: int
        :param _AddRiskFileCount: New risky files today
        :type AddRiskFileCount: int
        :param _ServersCount: Number of affected servers
        :type ServersCount: int
        :param _IsFirstCheck: Whether it is in trial. true: yes; false: no.
        :type IsFirstCheck: bool
        :param _ScanTime: Last Trojan detection time
        :type ScanTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RiskFileCount = None
        self._AddRiskFileCount = None
        self._ServersCount = None
        self._IsFirstCheck = None
        self._ScanTime = None
        self._RequestId = None

    @property
    def RiskFileCount(self):
        """Number of risky files
        :rtype: int
        """
        return self._RiskFileCount

    @RiskFileCount.setter
    def RiskFileCount(self, RiskFileCount):
        self._RiskFileCount = RiskFileCount

    @property
    def AddRiskFileCount(self):
        """New risky files today
        :rtype: int
        """
        return self._AddRiskFileCount

    @AddRiskFileCount.setter
    def AddRiskFileCount(self, AddRiskFileCount):
        self._AddRiskFileCount = AddRiskFileCount

    @property
    def ServersCount(self):
        """Number of affected servers
        :rtype: int
        """
        return self._ServersCount

    @ServersCount.setter
    def ServersCount(self, ServersCount):
        self._ServersCount = ServersCount

    @property
    def IsFirstCheck(self):
        """Whether it is in trial. true: yes; false: no.
        :rtype: bool
        """
        return self._IsFirstCheck

    @IsFirstCheck.setter
    def IsFirstCheck(self, IsFirstCheck):
        self._IsFirstCheck = IsFirstCheck

    @property
    def ScanTime(self):
        """Last Trojan detection time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RiskFileCount = params.get("RiskFileCount")
        self._AddRiskFileCount = params.get("AddRiskFileCount")
        self._ServersCount = params.get("ServersCount")
        self._IsFirstCheck = params.get("IsFirstCheck")
        self._ScanTime = params.get("ScanTime")
        self._RequestId = params.get("RequestId")


class DescribeStrategyExistRequest(AbstractModel):
    """DescribeStrategyExist request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyName: Policy name
        :type StrategyName: str
        """
        self._StrategyName = None

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName


    def _deserialize(self, params):
        self._StrategyName = params.get("StrategyName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeStrategyExistResponse(AbstractModel):
    """DescribeStrategyExist response structure.

    """

    def __init__(self):
        r"""
        :param _IfExist: Whether the policy exists. 1: yes; 0: no.
Note: This field may return null, indicating that no valid values can be obtained.
        :type IfExist: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IfExist = None
        self._RequestId = None

    @property
    def IfExist(self):
        """Whether the policy exists. 1: yes; 0: no.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IfExist

    @IfExist.setter
    def IfExist(self, IfExist):
        self._IfExist = IfExist

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IfExist = params.get("IfExist")
        self._RequestId = params.get("RequestId")


class DescribeTagMachinesRequest(AbstractModel):
    """DescribeTagMachines request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Tag ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Tag ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTagMachinesResponse(AbstractModel):
    """DescribeTagMachines response structure.

    """

    def __init__(self):
        r"""
        :param _List: List data
        :type List: list of TagMachine
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """List data
        :rtype: list of TagMachine
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = TagMachine()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTagsRequest(AbstractModel):
    """DescribeTags request structure.

    """

    def __init__(self):
        r"""
        :param _MachineType: CVM type
<li>CVM: indicates Cloud Virtual Machine</li>
<li>BM: indicates Blackstone Physical Machine</li>
<li>ECM: indicates Edge Computing Server</li>
<li>LH: indicates Tencent Cloud Lighthouse</li>
<li>Other: indicates hybrid CVMs</li>
        :type MachineType: str
        :param _MachineRegion: Region where the machine is located, such as ap-guangzhou.
        :type MachineRegion: str
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - query by keywords (machine name/machine IP)</li>
<li>Status - String - required: no - client online status (OFFLINE: offline | ONLINE: online | UNINSTALLED: uninstalled | SHUTDOWN: shut down)</li>
<li>Version - String - required: no - current protection version (PRO_VERSION: Professional edition | BASIC_VERSION: Basic edition)</li>
<li>Risk - String - required: no - risky host (yes)</li>
<li>Os - String - required: no - operating system (DescribeMachineOsList API value)</li>
Each filtering criterion supports only one value; queries of multiple values with OR relationship are not supported.</li>
        :type Filters: list of Filters
        """
        self._MachineType = None
        self._MachineRegion = None
        self._Filters = None

    @property
    def MachineType(self):
        """CVM type
<li>CVM: indicates Cloud Virtual Machine</li>
<li>BM: indicates Blackstone Physical Machine</li>
<li>ECM: indicates Edge Computing Server</li>
<li>LH: indicates Tencent Cloud Lighthouse</li>
<li>Other: indicates hybrid CVMs</li>
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def MachineRegion(self):
        """Region where the machine is located, such as ap-guangzhou.
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - query by keywords (machine name/machine IP)</li>
<li>Status - String - required: no - client online status (OFFLINE: offline | ONLINE: online | UNINSTALLED: uninstalled | SHUTDOWN: shut down)</li>
<li>Version - String - required: no - current protection version (PRO_VERSION: Professional edition | BASIC_VERSION: Basic edition)</li>
<li>Risk - String - required: no - risky host (yes)</li>
<li>Os - String - required: no - operating system (DescribeMachineOsList API value)</li>
Each filtering criterion supports only one value; queries of multiple values with OR relationship are not supported.</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._MachineRegion = params.get("MachineRegion")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTagsResponse(AbstractModel):
    """DescribeTags response structure.

    """

    def __init__(self):
        r"""
        :param _List: List information
        :type List: list of Tag
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """List information
        :rtype: list of Tag
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = Tag()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrialReportRequest(AbstractModel):
    """DescribeTrialReport request structure.

    """


class DescribeTrialReportResponse(AbstractModel):
    """DescribeTrialReport response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeUndoVulCountsRequest(AbstractModel):
    """DescribeUndoVulCounts request structure.

    """

    def __init__(self):
        r"""
        :param _VulCategory: Vulnerability category. 1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities
        :type VulCategory: int
        :param _IfEmergency: Whether to apply emergency vulnerability detection: YES - yes
        :type IfEmergency: str
        """
        self._VulCategory = None
        self._IfEmergency = None

    @property
    def VulCategory(self):
        """Vulnerability category. 1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def IfEmergency(self):
        """Whether to apply emergency vulnerability detection: YES - yes
        :rtype: str
        """
        return self._IfEmergency

    @IfEmergency.setter
    def IfEmergency(self, IfEmergency):
        self._IfEmergency = IfEmergency


    def _deserialize(self, params):
        self._VulCategory = params.get("VulCategory")
        self._IfEmergency = params.get("IfEmergency")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUndoVulCountsResponse(AbstractModel):
    """DescribeUndoVulCounts response structure.

    """

    def __init__(self):
        r"""
        :param _UndoVulCount: Number of unfixed vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type UndoVulCount: int
        :param _UndoHostCount: Number of unfixed hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type UndoHostCount: int
        :param _NotProfessionCount: Number of Standard Edition hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type NotProfessionCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UndoVulCount = None
        self._UndoHostCount = None
        self._NotProfessionCount = None
        self._RequestId = None

    @property
    def UndoVulCount(self):
        """Number of unfixed vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._UndoVulCount

    @UndoVulCount.setter
    def UndoVulCount(self, UndoVulCount):
        self._UndoVulCount = UndoVulCount

    @property
    def UndoHostCount(self):
        """Number of unfixed hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._UndoHostCount

    @UndoHostCount.setter
    def UndoHostCount(self, UndoHostCount):
        self._UndoHostCount = UndoHostCount

    @property
    def NotProfessionCount(self):
        """Number of Standard Edition hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NotProfessionCount

    @NotProfessionCount.setter
    def NotProfessionCount(self, NotProfessionCount):
        self._NotProfessionCount = NotProfessionCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._UndoVulCount = params.get("UndoVulCount")
        self._UndoHostCount = params.get("UndoHostCount")
        self._NotProfessionCount = params.get("NotProfessionCount")
        self._RequestId = params.get("RequestId")


class DescribeUsersConfigRequest(AbstractModel):
    """DescribeUsersConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ConfigName: Configuration name
<li>license_monitor authorization monitoring configuration. 0: off; 1: on</li>
        :type ConfigName: str
        """
        self._ConfigName = None

    @property
    def ConfigName(self):
        """Configuration name
<li>license_monitor authorization monitoring configuration. 0: off; 1: on</li>
        :rtype: str
        """
        return self._ConfigName

    @ConfigName.setter
    def ConfigName(self, ConfigName):
        self._ConfigName = ConfigName


    def _deserialize(self, params):
        self._ConfigName = params.get("ConfigName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUsersConfigResponse(AbstractModel):
    """DescribeUsersConfig response structure.

    """

    def __init__(self):
        r"""
        :param _Value: Configuration value
        :type Value: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Value = None
        self._RequestId = None

    @property
    def Value(self):
        """Configuration value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Value = params.get("Value")
        self._RequestId = params.get("RequestId")


class DescribeUsualLoginPlacesRequest(AbstractModel):
    """DescribeUsualLoginPlaces request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: CWPP client UUID
        :type Uuid: str
        """
        self._Uuid = None

    @property
    def Uuid(self):
        """CWPP client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUsualLoginPlacesResponse(AbstractModel):
    """DescribeUsualLoginPlaces response structure.

    """

    def __init__(self):
        r"""
        :param _UsualLoginPlaces: Array of frequently used log-in locations
        :type UsualLoginPlaces: list of UsualPlace
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UsualLoginPlaces = None
        self._RequestId = None

    @property
    def UsualLoginPlaces(self):
        """Array of frequently used log-in locations
        :rtype: list of UsualPlace
        """
        return self._UsualLoginPlaces

    @UsualLoginPlaces.setter
    def UsualLoginPlaces(self, UsualLoginPlaces):
        self._UsualLoginPlaces = UsualLoginPlaces

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("UsualLoginPlaces") is not None:
            self._UsualLoginPlaces = []
            for item in params.get("UsualLoginPlaces"):
                obj = UsualPlace()
                obj._deserialize(item)
                self._UsualLoginPlaces.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVdbAndPocInfoRequest(AbstractModel):
    """DescribeVdbAndPocInfo request structure.

    """


class DescribeVdbAndPocInfoResponse(AbstractModel):
    """DescribeVdbAndPocInfo response structure.

    """

    def __init__(self):
        r"""
        :param _VdbUpdateTime: Virus database update time
        :type VdbUpdateTime: str
        :param _PocUpdateTime: Vulnerability database update time
        :type PocUpdateTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VdbUpdateTime = None
        self._PocUpdateTime = None
        self._RequestId = None

    @property
    def VdbUpdateTime(self):
        """Virus database update time
        :rtype: str
        """
        return self._VdbUpdateTime

    @VdbUpdateTime.setter
    def VdbUpdateTime(self, VdbUpdateTime):
        self._VdbUpdateTime = VdbUpdateTime

    @property
    def PocUpdateTime(self):
        """Vulnerability database update time
        :rtype: str
        """
        return self._PocUpdateTime

    @PocUpdateTime.setter
    def PocUpdateTime(self, PocUpdateTime):
        self._PocUpdateTime = PocUpdateTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VdbUpdateTime = params.get("VdbUpdateTime")
        self._PocUpdateTime = params.get("PocUpdateTime")
        self._RequestId = params.get("RequestId")


class DescribeVersionCompareChartRequest(AbstractModel):
    """DescribeVersionCompareChart request structure.

    """


class DescribeVersionCompareChartResponse(AbstractModel):
    """DescribeVersionCompareChart response structure.

    """

    def __init__(self):
        r"""
        :param _Data: json string
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """json string
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeVersionStatisticsRequest(AbstractModel):
    """DescribeVersionStatistics request structure.

    """


class DescribeVersionStatisticsResponse(AbstractModel):
    """DescribeVersionStatistics response structure.

    """

    def __init__(self):
        r"""
        :param _BasicVersionNum: Number of Basic editions
        :type BasicVersionNum: int
        :param _ProVersionNum: Number of Professional editions
        :type ProVersionNum: int
        :param _UltimateVersionNum: Number of Ultimate editions
        :type UltimateVersionNum: int
        :param _GeneralVersionNum: Number of General Discount Editions
        :type GeneralVersionNum: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BasicVersionNum = None
        self._ProVersionNum = None
        self._UltimateVersionNum = None
        self._GeneralVersionNum = None
        self._RequestId = None

    @property
    def BasicVersionNum(self):
        """Number of Basic editions
        :rtype: int
        """
        return self._BasicVersionNum

    @BasicVersionNum.setter
    def BasicVersionNum(self, BasicVersionNum):
        self._BasicVersionNum = BasicVersionNum

    @property
    def ProVersionNum(self):
        """Number of Professional editions
        :rtype: int
        """
        return self._ProVersionNum

    @ProVersionNum.setter
    def ProVersionNum(self, ProVersionNum):
        self._ProVersionNum = ProVersionNum

    @property
    def UltimateVersionNum(self):
        """Number of Ultimate editions
        :rtype: int
        """
        return self._UltimateVersionNum

    @UltimateVersionNum.setter
    def UltimateVersionNum(self, UltimateVersionNum):
        self._UltimateVersionNum = UltimateVersionNum

    @property
    def GeneralVersionNum(self):
        """Number of General Discount Editions
        :rtype: int
        """
        return self._GeneralVersionNum

    @GeneralVersionNum.setter
    def GeneralVersionNum(self, GeneralVersionNum):
        self._GeneralVersionNum = GeneralVersionNum

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BasicVersionNum = params.get("BasicVersionNum")
        self._ProVersionNum = params.get("ProVersionNum")
        self._UltimateVersionNum = params.get("UltimateVersionNum")
        self._GeneralVersionNum = params.get("GeneralVersionNum")
        self._RequestId = params.get("RequestId")


class DescribeVertexDetailRequest(AbstractModel):
    """DescribeVertexDetail request structure.

    """

    def __init__(self):
        r"""
        :param _VertexIds: Point ID list
        :type VertexIds: list of str
        :param _IncidentId: Event ID
        :type IncidentId: str
        :param _TableName: The name of the table where the event occurred
        :type TableName: str
        """
        self._VertexIds = None
        self._IncidentId = None
        self._TableName = None

    @property
    def VertexIds(self):
        """Point ID list
        :rtype: list of str
        """
        return self._VertexIds

    @VertexIds.setter
    def VertexIds(self, VertexIds):
        self._VertexIds = VertexIds

    @property
    def IncidentId(self):
        """Event ID
        :rtype: str
        """
        return self._IncidentId

    @IncidentId.setter
    def IncidentId(self, IncidentId):
        self._IncidentId = IncidentId

    @property
    def TableName(self):
        """The name of the table where the event occurred
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName


    def _deserialize(self, params):
        self._VertexIds = params.get("VertexIds")
        self._IncidentId = params.get("IncidentId")
        self._TableName = params.get("TableName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVertexDetailResponse(AbstractModel):
    """DescribeVertexDetail response structure.

    """

    def __init__(self):
        r"""
        :param _VertexDetails: Attribute information of specified point list
Note: This field may return null, indicating that no valid values can be obtained.
        :type VertexDetails: list of VertexDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VertexDetails = None
        self._RequestId = None

    @property
    def VertexDetails(self):
        """Attribute information of specified point list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VertexDetail
        """
        return self._VertexDetails

    @VertexDetails.setter
    def VertexDetails(self, VertexDetails):
        self._VertexDetails = VertexDetails

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VertexDetails") is not None:
            self._VertexDetails = []
            for item in params.get("VertexDetails"):
                obj = VertexDetail()
                obj._deserialize(item)
                self._VertexDetails.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulCountByDatesRequest(AbstractModel):
    """DescribeVulCountByDates request structure.

    """

    def __init__(self):
        r"""
        :param _LastDays: Number of past days for data query. Subtract 1 from the actual number of days and fill in the value.
        :type LastDays: list of int non-negative
        :param _VulCategory: Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability.
        :type VulCategory: int
        :param _IfEmergency: Whether the vulnerabilities are emergency vulnerabilities. yes: yes.
        :type IfEmergency: str
        """
        self._LastDays = None
        self._VulCategory = None
        self._IfEmergency = None

    @property
    def LastDays(self):
        """Number of past days for data query. Subtract 1 from the actual number of days and fill in the value.
        :rtype: list of int non-negative
        """
        return self._LastDays

    @LastDays.setter
    def LastDays(self, LastDays):
        self._LastDays = LastDays

    @property
    def VulCategory(self):
        """Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def IfEmergency(self):
        """Whether the vulnerabilities are emergency vulnerabilities. yes: yes.
        :rtype: str
        """
        return self._IfEmergency

    @IfEmergency.setter
    def IfEmergency(self, IfEmergency):
        self._IfEmergency = IfEmergency


    def _deserialize(self, params):
        self._LastDays = params.get("LastDays")
        self._VulCategory = params.get("VulCategory")
        self._IfEmergency = params.get("IfEmergency")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulCountByDatesResponse(AbstractModel):
    """DescribeVulCountByDates response structure.

    """

    def __init__(self):
        r"""
        :param _VulCount: Obtain the number of vulnerabilities for corresponding days in batch
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCount: list of int non-negative
        :param _HostCount: Obtain the number of hosts for corresponding days in batch
        :type HostCount: list of int non-negative
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulCount = None
        self._HostCount = None
        self._RequestId = None

    @property
    def VulCount(self):
        """Obtain the number of vulnerabilities for corresponding days in batch
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of int non-negative
        """
        return self._VulCount

    @VulCount.setter
    def VulCount(self, VulCount):
        self._VulCount = VulCount

    @property
    def HostCount(self):
        """Obtain the number of hosts for corresponding days in batch
        :rtype: list of int non-negative
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VulCount = params.get("VulCount")
        self._HostCount = params.get("HostCount")
        self._RequestId = params.get("RequestId")


class DescribeVulCveIdInfoRequest(AbstractModel):
    """DescribeVulCveIdInfo request structure.

    """

    def __init__(self):
        r"""
        :param _CveIds: Vulnerability cve_id list
        :type CveIds: list of str
        """
        self._CveIds = None

    @property
    def CveIds(self):
        """Vulnerability cve_id list
        :rtype: list of str
        """
        return self._CveIds

    @CveIds.setter
    def CveIds(self, CveIds):
        self._CveIds = CveIds


    def _deserialize(self, params):
        self._CveIds = params.get("CveIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulCveIdInfoResponse(AbstractModel):
    """DescribeVulCveIdInfo response structure.

    """

    def __init__(self):
        r"""
        :param _List: Detail list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulInfoByCveId
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Detail list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulInfoByCveId
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulInfoByCveId()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceEventRequest(AbstractModel):
    """DescribeVulDefenceEvent request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Keywords for IP or host name; VulKeywords vulnerability name or CveId for fuzzy query; Quuid, VulId, EventType, Status for precise match; CreateBeginTime, CreateEndTime for time period query
        :type Filters: list of Filter
        :param _Offset: Data offset
        :type Offset: int
        :param _Limit: Data limit
        :type Limit: int
        :param _Order: Sorting method, case insensitive: ASC for ascending order; DESC for descending order
        :type Order: str
        :param _By: Sort columns, which are strictly equal: CreateTime for creation time, MergeTime for merge time, and Count for event count
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria: Keywords for IP or host name; VulKeywords vulnerability name or CveId for fuzzy query; Quuid, VulId, EventType, Status for precise match; CreateBeginTime, CreateEndTime for time period query
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Data offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Data limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method, case insensitive: ASC for ascending order; DESC for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sort columns, which are strictly equal: CreateTime for creation time, MergeTime for merge time, and Count for event count
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceEventResponse(AbstractModel):
    """DescribeVulDefenceEvent response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of data
        :type TotalCount: int
        :param _List: List of vulnerability defense events
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulDefenceEvent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of data
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of vulnerability defense events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulDefenceEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefenceEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceListRequest(AbstractModel):
    """DescribeVulDefenceList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Level; Keywords
        :type Filters: list of Filter
        :param _Offset: Data offset
        :type Offset: int
        :param _Limit: Data limit
        :type Limit: int
        :param _Order: Sorting method (case insensitive): asc for ascending order; desc for descending order
        :type Order: str
        :param _By: Sorting column (strictly equal): PublishTime for release time
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria: Level; Keywords
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Data offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Data limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method (case insensitive): asc for ascending order; desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column (strictly equal): PublishTime for release time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceListResponse(AbstractModel):
    """DescribeVulDefenceList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of data
        :type TotalCount: int
        :param _List: Vulnerability defense list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulDefenceRangeDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of data
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Vulnerability defense list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulDefenceRangeDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefenceRangeDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceOverviewRequest(AbstractModel):
    """DescribeVulDefenceOverview request structure.

    """


class DescribeVulDefenceOverviewResponse(AbstractModel):
    """DescribeVulDefenceOverview response structure.

    """

    def __init__(self):
        r"""
        :param _Overview: Vulnerability defense overview information
        :type Overview: :class:`tencentcloud.cwp.v20180228.models.VulDefenceOverview`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Overview = None
        self._RequestId = None

    @property
    def Overview(self):
        """Vulnerability defense overview information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulDefenceOverview`
        """
        return self._Overview

    @Overview.setter
    def Overview(self, Overview):
        self._Overview = Overview

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Overview") is not None:
            self._Overview = VulDefenceOverview()
            self._Overview._deserialize(params.get("Overview"))
        self._RequestId = params.get("RequestId")


class DescribeVulDefencePluginDetailRequest(AbstractModel):
    """DescribeVulDefencePluginDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter criterion. Keywords: IP address or host name. Exception and Status support precise match.
        :type Filters: list of Filter
        :param _Offset: Data offset
        :type Offset: int
        :param _Limit: Data limit
        :type Limit: int
        """
        self._Quuid = None
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criterion. Keywords: IP address or host name. Exception and Status support precise match.
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Data offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Data limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefencePluginDetailResponse(AbstractModel):
    """DescribeVulDefencePluginDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of data
        :type TotalCount: int
        :param _List: List of detailed information on the vulnerability defense plugin
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulDefencePluginDetail
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of data
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of detailed information on the vulnerability defense plugin
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulDefencePluginDetail
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefencePluginDetail()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefencePluginExceptionCountRequest(AbstractModel):
    """DescribeVulDefencePluginExceptionCount request structure.

    """


class DescribeVulDefencePluginExceptionCountResponse(AbstractModel):
    """DescribeVulDefencePluginExceptionCount response structure.

    """

    def __init__(self):
        r"""
        :param _Count: Current number of abnormal plugins
Note: This field may return null, indicating that no valid values can be obtained.
        :type Count: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Count = None
        self._RequestId = None

    @property
    def Count(self):
        """Current number of abnormal plugins
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._RequestId = params.get("RequestId")


class DescribeVulDefencePluginStatusRequest(AbstractModel):
    """DescribeVulDefencePluginStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Keywords - String - required: no - host IP address or alias for filtering</li>
<li>Exception - String - required: no - plugin status: 0: normal; 1: abnormal; 2: no Java process injection</li>
        :type Filters: list of Filter
        :param _Offset: Data offset
        :type Offset: int
        :param _Limit: Data limit
        :type Limit: int
        :param _Order: Sorting method, case insensitive: ASC for ascending order; DESC for descending order
        :type Order: str
        :param _By: Sorting column (exact match). CreateTime: creation time; ModifyTime: update time.
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Keywords - String - required: no - host IP address or alias for filtering</li>
<li>Exception - String - required: no - plugin status: 0: normal; 1: abnormal; 2: no Java process injection</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Data offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Data limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting method, case insensitive: ASC for ascending order; DESC for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting column (exact match). CreateTime: creation time; ModifyTime: update time.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefencePluginStatusResponse(AbstractModel):
    """DescribeVulDefencePluginStatus response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of data
        :type TotalCount: int
        :param _List: List of host vulnerability defense plugin information
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulDefencePluginStatus
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of data
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """List of host vulnerability defense plugin information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulDefencePluginStatus
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefencePluginStatus()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceSettingRequest(AbstractModel):
    """DescribeVulDefenceSetting request structure.

    """


class DescribeVulDefenceSettingResponse(AbstractModel):
    """DescribeVulDefenceSetting response structure.

    """

    def __init__(self):
        r"""
        :param _Enable: Defense switch: 0 - off; 1 - on
        :type Enable: int
        :param _Scope: Scope of impact: 1 - all ultimate edition hosts across the network; 0 - hosts in the QUUID list
        :type Scope: int
        :param _Quuids: List of affected host QUUIDs
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        :param _FlagshipCount: Current number of ultimate edition hosts
        :type FlagshipCount: int
        :param _InstanceIds: List of affected host IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceIds: list of str
        :param _AutoInclude: Whether new ultimate edition hosts automatically join: 1 - yes; 0 - no
        :type AutoInclude: int
        :param _ExcludeInstanceIds: List of excluded host IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExcludeInstanceIds: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Enable = None
        self._Scope = None
        self._Quuids = None
        self._FlagshipCount = None
        self._InstanceIds = None
        self._AutoInclude = None
        self._ExcludeInstanceIds = None
        self._RequestId = None

    @property
    def Enable(self):
        """Defense switch: 0 - off; 1 - on
        :rtype: int
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def Scope(self):
        """Scope of impact: 1 - all ultimate edition hosts across the network; 0 - hosts in the QUUID list
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def Quuids(self):
        """List of affected host QUUIDs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def FlagshipCount(self):
        """Current number of ultimate edition hosts
        :rtype: int
        """
        return self._FlagshipCount

    @FlagshipCount.setter
    def FlagshipCount(self, FlagshipCount):
        self._FlagshipCount = FlagshipCount

    @property
    def InstanceIds(self):
        """List of affected host IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._InstanceIds

    @InstanceIds.setter
    def InstanceIds(self, InstanceIds):
        self._InstanceIds = InstanceIds

    @property
    def AutoInclude(self):
        """Whether new ultimate edition hosts automatically join: 1 - yes; 0 - no
        :rtype: int
        """
        return self._AutoInclude

    @AutoInclude.setter
    def AutoInclude(self, AutoInclude):
        self._AutoInclude = AutoInclude

    @property
    def ExcludeInstanceIds(self):
        """List of excluded host IDs
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ExcludeInstanceIds

    @ExcludeInstanceIds.setter
    def ExcludeInstanceIds(self, ExcludeInstanceIds):
        self._ExcludeInstanceIds = ExcludeInstanceIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._Scope = params.get("Scope")
        self._Quuids = params.get("Quuids")
        self._FlagshipCount = params.get("FlagshipCount")
        self._InstanceIds = params.get("InstanceIds")
        self._AutoInclude = params.get("AutoInclude")
        self._ExcludeInstanceIds = params.get("ExcludeInstanceIds")
        self._RequestId = params.get("RequestId")


class DescribeVulEffectHostListRequest(AbstractModel):
    """DescribeVulEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Pagination limit, with the maximum value being 100.
        :type Limit: int
        :param _Offset: Pagination offset
        :type Offset: int
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Filters: Filter criteria:
<li>AliasName - String - host name for filtering</li>
<li>TagIds - String - array of host tag IDs separated by commas</li>
<li>Status - String - status: 0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 8: fixing failed</li>
<li>Uuid - String array - UUID array</li>
<li>Version - String array - paid edition array: "Flagship": Ultimate Edition; "PRO_VERSION": Pro Edition; "BASIC_VERSION": Basic Edition</li>
<li>InstanceState - String array - instance status array: "PENDING": creating; "LAUNCH_FAILED": creation failed; "RUNNING": running; "STOPPED": shut down; "STARTING": starting; "STOPPING": shutting down; "REBOOTING": restarting; "SHUTDOWN": to be terminated; "TERMINATING": terminating; "UNKNOWN": unknown (for non-Tencent Cloud machines and offline client) </li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._VulId = None
        self._Filters = None

    @property
    def Limit(self):
        """Pagination limit, with the maximum value being 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Filters(self):
        """Filter criteria:
<li>AliasName - String - host name for filtering</li>
<li>TagIds - String - array of host tag IDs separated by commas</li>
<li>Status - String - status: 0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 8: fixing failed</li>
<li>Uuid - String array - UUID array</li>
<li>Version - String array - paid edition array: "Flagship": Ultimate Edition; "PRO_VERSION": Pro Edition; "BASIC_VERSION": Basic Edition</li>
<li>InstanceState - String array - instance status array: "PENDING": creating; "LAUNCH_FAILED": creation failed; "RUNNING": running; "STOPPED": shut down; "STARTING": starting; "STOPPING": shutting down; "REBOOTING": restarting; "SHUTDOWN": to be terminated; "TERMINATING": terminating; "UNKNOWN": unknown (for non-Tencent Cloud machines and offline client) </li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._VulId = params.get("VulId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulEffectHostListResponse(AbstractModel):
    """DescribeVulEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of lists
        :type TotalCount: int
        :param _VulEffectHostList: List of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulEffectHostList: list of VulEffectHostList
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._VulEffectHostList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of lists
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def VulEffectHostList(self):
        """List of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulEffectHostList
        """
        return self._VulEffectHostList

    @VulEffectHostList.setter
    def VulEffectHostList(self, VulEffectHostList):
        self._VulEffectHostList = VulEffectHostList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("VulEffectHostList") is not None:
            self._VulEffectHostList = []
            for item in params.get("VulEffectHostList"):
                obj = VulEffectHostList()
                obj._deserialize(item)
                self._VulEffectHostList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulEffectModulesRequest(AbstractModel):
    """DescribeVulEffectModules request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of entries on each page. Maximum value: 100.
        :type Limit: int
        :param _Offset: Paging offset
        :type Offset: int
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Filters: Filter criteria:
<li>Uuid - String array - Uuid string array</li>
        :type Filters: list of Filter
        """
        self._Limit = None
        self._Offset = None
        self._VulId = None
        self._Filters = None

    @property
    def Limit(self):
        """Number of entries on each page. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Paging offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Filters(self):
        """Filter criteria:
<li>Uuid - String array - Uuid string array</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._VulId = params.get("VulId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulEffectModulesResponse(AbstractModel):
    """DescribeVulEffectModules response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of lists
        :type TotalCount: int
        :param _VulEffectModuleInfo: List of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulEffectModuleInfo: list of VulEffectModuleInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._VulEffectModuleInfo = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number of lists
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def VulEffectModuleInfo(self):
        """List of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulEffectModuleInfo
        """
        return self._VulEffectModuleInfo

    @VulEffectModuleInfo.setter
    def VulEffectModuleInfo(self, VulEffectModuleInfo):
        self._VulEffectModuleInfo = VulEffectModuleInfo

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("VulEffectModuleInfo") is not None:
            self._VulEffectModuleInfo = []
            for item in params.get("VulEffectModuleInfo"):
                obj = VulEffectModuleInfo()
                obj._deserialize(item)
                self._VulEffectModuleInfo.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulEmergentMsgRequest(AbstractModel):
    """DescribeVulEmergentMsg request structure.

    """


class DescribeVulEmergentMsgResponse(AbstractModel):
    """DescribeVulEmergentMsg response structure.

    """

    def __init__(self):
        r"""
        :param _EmergentMsgList: Vulnerability emergency notification data
Note: This field may return null, indicating that no valid values can be obtained.
        :type EmergentMsgList: list of VulEmergentMsgInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EmergentMsgList = None
        self._RequestId = None

    @property
    def EmergentMsgList(self):
        """Vulnerability emergency notification data
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulEmergentMsgInfo
        """
        return self._EmergentMsgList

    @EmergentMsgList.setter
    def EmergentMsgList(self, EmergentMsgList):
        self._EmergentMsgList = EmergentMsgList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EmergentMsgList") is not None:
            self._EmergentMsgList = []
            for item in params.get("EmergentMsgList"):
                obj = VulEmergentMsgInfo()
                obj._deserialize(item)
                self._EmergentMsgList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulFixStatusRequest(AbstractModel):
    """DescribeVulFixStatus request structure.

    """

    def __init__(self):
        r"""
        :param _FixId: Task ID. This parameter can be left blank if VulId is specified.
        :type FixId: int
        :param _VulId: Vulnerability ID. This parameter can be left blank if FixId is specified.
        :type VulId: int
        :param _Quuid: Host QUUID. This parameter can be used together with VulId to query the details of the last fixing task on a specific host.
        :type Quuid: str
        """
        self._FixId = None
        self._VulId = None
        self._Quuid = None

    @property
    def FixId(self):
        """Task ID. This parameter can be left blank if VulId is specified.
        :rtype: int
        """
        return self._FixId

    @FixId.setter
    def FixId(self, FixId):
        self._FixId = FixId

    @property
    def VulId(self):
        """Vulnerability ID. This parameter can be left blank if FixId is specified.
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Quuid(self):
        """Host QUUID. This parameter can be used together with VulId to query the details of the last fixing task on a specific host.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._FixId = params.get("FixId")
        self._VulId = params.get("VulId")
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulFixStatusResponse(AbstractModel):
    """DescribeVulFixStatus response structure.

    """

    def __init__(self):
        r"""
        :param _FixStartTime: Fixing start time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixStartTime: str
        :param _FixEndTime: Fixing end time. If this parameter is left blank, fixing is not ended.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixEndTime: str
        :param _FixSuccessCnt: Number of successfully fixed hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixSuccessCnt: int
        :param _FixFailCnt: Number of hosts failed to be fixed
        :type FixFailCnt: int
        :param _HostCnt: Total number of hosts
        :type HostCnt: int
        :param _FixId: Fixing task ID
        :type FixId: int
        :param _SnapshotList: Status list of snapshots to be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :type SnapshotList: list of VulFixStatusSnapshotInfo
        :param _VulFixList: Details list of vulnerabilities to be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulFixList: list of VulFixStatusInfo
        :param _SnapshotProgress: Snapshot creation progress (0-100)
        :type SnapshotProgress: int
        :param _FixProgress: Fixing progress (0-100)
        :type FixProgress: int
        :param _RemainingTime: Estimated remaining time (seconds)
        :type RemainingTime: int
        :param _IsRetrySnapshot: Whether the snapshot is retried. 0: no; 1: yes.
        :type IsRetrySnapshot: int
        :param _SnapshotFailCnt: Number of snapshots failed to be created
Note: This field may return null, indicating that no valid values can be obtained.
        :type SnapshotFailCnt: int
        :param _IsAllowRetry: Whether retry is allowed. 0: not allowed; 1: allowed.Note: This field may return null, indicating that no valid values can be obtained.
        :type IsAllowRetry: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FixStartTime = None
        self._FixEndTime = None
        self._FixSuccessCnt = None
        self._FixFailCnt = None
        self._HostCnt = None
        self._FixId = None
        self._SnapshotList = None
        self._VulFixList = None
        self._SnapshotProgress = None
        self._FixProgress = None
        self._RemainingTime = None
        self._IsRetrySnapshot = None
        self._SnapshotFailCnt = None
        self._IsAllowRetry = None
        self._RequestId = None

    @property
    def FixStartTime(self):
        """Fixing start time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixStartTime

    @FixStartTime.setter
    def FixStartTime(self, FixStartTime):
        self._FixStartTime = FixStartTime

    @property
    def FixEndTime(self):
        """Fixing end time. If this parameter is left blank, fixing is not ended.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixEndTime

    @FixEndTime.setter
    def FixEndTime(self, FixEndTime):
        self._FixEndTime = FixEndTime

    @property
    def FixSuccessCnt(self):
        """Number of successfully fixed hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FixSuccessCnt

    @FixSuccessCnt.setter
    def FixSuccessCnt(self, FixSuccessCnt):
        self._FixSuccessCnt = FixSuccessCnt

    @property
    def FixFailCnt(self):
        """Number of hosts failed to be fixed
        :rtype: int
        """
        return self._FixFailCnt

    @FixFailCnt.setter
    def FixFailCnt(self, FixFailCnt):
        self._FixFailCnt = FixFailCnt

    @property
    def HostCnt(self):
        """Total number of hosts
        :rtype: int
        """
        return self._HostCnt

    @HostCnt.setter
    def HostCnt(self, HostCnt):
        self._HostCnt = HostCnt

    @property
    def FixId(self):
        """Fixing task ID
        :rtype: int
        """
        return self._FixId

    @FixId.setter
    def FixId(self, FixId):
        self._FixId = FixId

    @property
    def SnapshotList(self):
        """Status list of snapshots to be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulFixStatusSnapshotInfo
        """
        return self._SnapshotList

    @SnapshotList.setter
    def SnapshotList(self, SnapshotList):
        self._SnapshotList = SnapshotList

    @property
    def VulFixList(self):
        """Details list of vulnerabilities to be fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulFixStatusInfo
        """
        return self._VulFixList

    @VulFixList.setter
    def VulFixList(self, VulFixList):
        self._VulFixList = VulFixList

    @property
    def SnapshotProgress(self):
        """Snapshot creation progress (0-100)
        :rtype: int
        """
        return self._SnapshotProgress

    @SnapshotProgress.setter
    def SnapshotProgress(self, SnapshotProgress):
        self._SnapshotProgress = SnapshotProgress

    @property
    def FixProgress(self):
        """Fixing progress (0-100)
        :rtype: int
        """
        return self._FixProgress

    @FixProgress.setter
    def FixProgress(self, FixProgress):
        self._FixProgress = FixProgress

    @property
    def RemainingTime(self):
        """Estimated remaining time (seconds)
        :rtype: int
        """
        return self._RemainingTime

    @RemainingTime.setter
    def RemainingTime(self, RemainingTime):
        self._RemainingTime = RemainingTime

    @property
    def IsRetrySnapshot(self):
        """Whether the snapshot is retried. 0: no; 1: yes.
        :rtype: int
        """
        return self._IsRetrySnapshot

    @IsRetrySnapshot.setter
    def IsRetrySnapshot(self, IsRetrySnapshot):
        self._IsRetrySnapshot = IsRetrySnapshot

    @property
    def SnapshotFailCnt(self):
        """Number of snapshots failed to be created
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SnapshotFailCnt

    @SnapshotFailCnt.setter
    def SnapshotFailCnt(self, SnapshotFailCnt):
        self._SnapshotFailCnt = SnapshotFailCnt

    @property
    def IsAllowRetry(self):
        """Whether retry is allowed. 0: not allowed; 1: allowed.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsAllowRetry

    @IsAllowRetry.setter
    def IsAllowRetry(self, IsAllowRetry):
        self._IsAllowRetry = IsAllowRetry

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FixStartTime = params.get("FixStartTime")
        self._FixEndTime = params.get("FixEndTime")
        self._FixSuccessCnt = params.get("FixSuccessCnt")
        self._FixFailCnt = params.get("FixFailCnt")
        self._HostCnt = params.get("HostCnt")
        self._FixId = params.get("FixId")
        if params.get("SnapshotList") is not None:
            self._SnapshotList = []
            for item in params.get("SnapshotList"):
                obj = VulFixStatusSnapshotInfo()
                obj._deserialize(item)
                self._SnapshotList.append(obj)
        if params.get("VulFixList") is not None:
            self._VulFixList = []
            for item in params.get("VulFixList"):
                obj = VulFixStatusInfo()
                obj._deserialize(item)
                self._VulFixList.append(obj)
        self._SnapshotProgress = params.get("SnapshotProgress")
        self._FixProgress = params.get("FixProgress")
        self._RemainingTime = params.get("RemainingTime")
        self._IsRetrySnapshot = params.get("IsRetrySnapshot")
        self._SnapshotFailCnt = params.get("SnapshotFailCnt")
        self._IsAllowRetry = params.get("IsAllowRetry")
        self._RequestId = params.get("RequestId")


class DescribeVulHostCountScanTimeRequest(AbstractModel):
    """DescribeVulHostCountScanTime request structure.

    """


class DescribeVulHostCountScanTimeResponse(AbstractModel):
    """DescribeVulHostCountScanTime response structure.

    """

    def __init__(self):
        r"""
        :param _TotalVulCount: Total number of vulnerabilities
        :type TotalVulCount: int
        :param _VulHostCount: Number of hosts affected by vulnerabilities
        :type VulHostCount: int
        :param _ScanTime: Scan time
        :type ScanTime: str
        :param _IfFirstScan: Whether the detection is carried out for the first time
        :type IfFirstScan: bool
        :param _TaskId: ID of the ongoing task. The value is 0 if no such task exists.
        :type TaskId: int
        :param _LastFixTime: Last vulnerability fixing time
        :type LastFixTime: str
        :param _hadAutoFixVul: Whether vulnerabilities supporting automatic fixing exist
        :type hadAutoFixVul: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalVulCount = None
        self._VulHostCount = None
        self._ScanTime = None
        self._IfFirstScan = None
        self._TaskId = None
        self._LastFixTime = None
        self._hadAutoFixVul = None
        self._RequestId = None

    @property
    def TotalVulCount(self):
        """Total number of vulnerabilities
        :rtype: int
        """
        return self._TotalVulCount

    @TotalVulCount.setter
    def TotalVulCount(self, TotalVulCount):
        self._TotalVulCount = TotalVulCount

    @property
    def VulHostCount(self):
        """Number of hosts affected by vulnerabilities
        :rtype: int
        """
        return self._VulHostCount

    @VulHostCount.setter
    def VulHostCount(self, VulHostCount):
        self._VulHostCount = VulHostCount

    @property
    def ScanTime(self):
        """Scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def IfFirstScan(self):
        """Whether the detection is carried out for the first time
        :rtype: bool
        """
        return self._IfFirstScan

    @IfFirstScan.setter
    def IfFirstScan(self, IfFirstScan):
        self._IfFirstScan = IfFirstScan

    @property
    def TaskId(self):
        """ID of the ongoing task. The value is 0 if no such task exists.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def LastFixTime(self):
        """Last vulnerability fixing time
        :rtype: str
        """
        return self._LastFixTime

    @LastFixTime.setter
    def LastFixTime(self, LastFixTime):
        self._LastFixTime = LastFixTime

    @property
    def hadAutoFixVul(self):
        """Whether vulnerabilities supporting automatic fixing exist
        :rtype: bool
        """
        return self._hadAutoFixVul

    @hadAutoFixVul.setter
    def hadAutoFixVul(self, hadAutoFixVul):
        self._hadAutoFixVul = hadAutoFixVul

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalVulCount = params.get("TotalVulCount")
        self._VulHostCount = params.get("VulHostCount")
        self._ScanTime = params.get("ScanTime")
        self._IfFirstScan = params.get("IfFirstScan")
        self._TaskId = params.get("TaskId")
        self._LastFixTime = params.get("LastFixTime")
        self._hadAutoFixVul = params.get("hadAutoFixVul")
        self._RequestId = params.get("RequestId")


class DescribeVulHostTopRequest(AbstractModel):
    """DescribeVulHostTop request structure.

    """

    def __init__(self):
        r"""
        :param _Top: Obtain top values: 1-100
        :type Top: int
        :param _VulCategory: 1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 6: emergency vulnerabilities. If it is left blank or set to 0, the total statistics of vulnerabilities 1, 2, 4, and 5 are returned.
        :type VulCategory: int
        :param _IsFollowVul: Whether to count only critical vulnerabilities: 1: only critical vulnerabilities; 0: all vulnerabilities
        :type IsFollowVul: int
        """
        self._Top = None
        self._VulCategory = None
        self._IsFollowVul = None

    @property
    def Top(self):
        """Obtain top values: 1-100
        :rtype: int
        """
        return self._Top

    @Top.setter
    def Top(self, Top):
        self._Top = Top

    @property
    def VulCategory(self):
        """1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 6: emergency vulnerabilities. If it is left blank or set to 0, the total statistics of vulnerabilities 1, 2, 4, and 5 are returned.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def IsFollowVul(self):
        """Whether to count only critical vulnerabilities: 1: only critical vulnerabilities; 0: all vulnerabilities
        :rtype: int
        """
        return self._IsFollowVul

    @IsFollowVul.setter
    def IsFollowVul(self, IsFollowVul):
        self._IsFollowVul = IsFollowVul


    def _deserialize(self, params):
        self._Top = params.get("Top")
        self._VulCategory = params.get("VulCategory")
        self._IsFollowVul = params.get("IsFollowVul")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulHostTopResponse(AbstractModel):
    """DescribeVulHostTop response structure.

    """

    def __init__(self):
        r"""
        :param _VulHostTopList: List of top server risks
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulHostTopList: list of VulHostTopInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulHostTopList = None
        self._RequestId = None

    @property
    def VulHostTopList(self):
        """List of top server risks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulHostTopInfo
        """
        return self._VulHostTopList

    @VulHostTopList.setter
    def VulHostTopList(self, VulHostTopList):
        self._VulHostTopList = VulHostTopList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulHostTopList") is not None:
            self._VulHostTopList = []
            for item in params.get("VulHostTopList"):
                obj = VulHostTopInfo()
                obj._deserialize(item)
                self._VulHostTopList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulInfoCvssRequest(AbstractModel):
    """DescribeVulInfoCvss request structure.

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        """
        self._VulId = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulInfoCvssResponse(AbstractModel):
    """DescribeVulInfoCvss response structure.

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulId: int
        :param _VulName: Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulName: str
        :param _VulLevel: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulLevel: int
        :param _VulType: Vulnerability Classification: 1: Web-CMS Vulnerability 2: Application Vulnerabilities 4: Linux Software Vulnerabilities 5: Windows System Vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulType: int
        :param _Description: Vulnerability Description Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _RepairPlan: Fixing solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type RepairPlan: str
        :param _CveId: Vulnerability CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveId: str
        :param _Reference: Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :type Reference: str
        :param _CVSS: CVSS Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVSS: str
        :param _PublicDate: Release date
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublicDate: str
        :param _CvssScore: CVSS Score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssScore: int
        :param _CveInfo: CVSS Details
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveInfo: str
        :param _CvssScoreFloat: CVSS score, floating point type
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssScoreFloat: float
        :param _Labels: Vulnerability Tags, Separated by Multiple Commas
Note: This field may return null, indicating that no valid values can be obtained.
        :type Labels: str
        :param _DefenseAttackCount: Number of Attacks Defended
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenseAttackCount: int
        :param _SuccessFixCount: Total Number of Successful Network Repairs. Returns 0 by default for unsupported auto-repair vulnerabilities.
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuccessFixCount: int
        :param _FixSwitch: Repair support: 0 - Neither Windows nor Linux supports for repair; 1 - Both Windows and Linux support for repair; 2 - Only Linux supports for repair; 3 - Only Windows supports for repair.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixSwitch: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulId = None
        self._VulName = None
        self._VulLevel = None
        self._VulType = None
        self._Description = None
        self._RepairPlan = None
        self._CveId = None
        self._Reference = None
        self._CVSS = None
        self._PublicDate = None
        self._CvssScore = None
        self._CveInfo = None
        self._CvssScoreFloat = None
        self._Labels = None
        self._DefenseAttackCount = None
        self._SuccessFixCount = None
        self._FixSwitch = None
        self._RequestId = None

    @property
    def VulId(self):
        """Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def VulName(self):
        """Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def VulLevel(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulLevel

    @VulLevel.setter
    def VulLevel(self, VulLevel):
        self._VulLevel = VulLevel

    @property
    def VulType(self):
        """Vulnerability Classification: 1: Web-CMS Vulnerability 2: Application Vulnerabilities 4: Linux Software Vulnerabilities 5: Windows System Vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulType

    @VulType.setter
    def VulType(self, VulType):
        self._VulType = VulType

    @property
    def Description(self):
        """Vulnerability Description Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def RepairPlan(self):
        """Fixing solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RepairPlan

    @RepairPlan.setter
    def RepairPlan(self, RepairPlan):
        self._RepairPlan = RepairPlan

    @property
    def CveId(self):
        """Vulnerability CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def Reference(self):
        """Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def CVSS(self):
        """CVSS Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CVSS

    @CVSS.setter
    def CVSS(self, CVSS):
        self._CVSS = CVSS

    @property
    def PublicDate(self):
        """Release date
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublicDate

    @PublicDate.setter
    def PublicDate(self, PublicDate):
        self._PublicDate = PublicDate

    @property
    def CvssScore(self):
        """CVSS Score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def CveInfo(self):
        """CVSS Details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveInfo

    @CveInfo.setter
    def CveInfo(self, CveInfo):
        self._CveInfo = CveInfo

    @property
    def CvssScoreFloat(self):
        """CVSS score, floating point type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CvssScoreFloat

    @CvssScoreFloat.setter
    def CvssScoreFloat(self, CvssScoreFloat):
        self._CvssScoreFloat = CvssScoreFloat

    @property
    def Labels(self):
        """Vulnerability Tags, Separated by Multiple Commas
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def DefenseAttackCount(self):
        """Number of Attacks Defended
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenseAttackCount

    @DefenseAttackCount.setter
    def DefenseAttackCount(self, DefenseAttackCount):
        self._DefenseAttackCount = DefenseAttackCount

    @property
    def SuccessFixCount(self):
        """Total Number of Successful Network Repairs. Returns 0 by default for unsupported auto-repair vulnerabilities.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SuccessFixCount

    @SuccessFixCount.setter
    def SuccessFixCount(self, SuccessFixCount):
        self._SuccessFixCount = SuccessFixCount

    @property
    def FixSwitch(self):
        """Repair support: 0 - Neither Windows nor Linux supports for repair; 1 - Both Windows and Linux support for repair; 2 - Only Linux supports for repair; 3 - Only Windows supports for repair.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FixSwitch

    @FixSwitch.setter
    def FixSwitch(self, FixSwitch):
        self._FixSwitch = FixSwitch

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._VulName = params.get("VulName")
        self._VulLevel = params.get("VulLevel")
        self._VulType = params.get("VulType")
        self._Description = params.get("Description")
        self._RepairPlan = params.get("RepairPlan")
        self._CveId = params.get("CveId")
        self._Reference = params.get("Reference")
        self._CVSS = params.get("CVSS")
        self._PublicDate = params.get("PublicDate")
        self._CvssScore = params.get("CvssScore")
        self._CveInfo = params.get("CveInfo")
        self._CvssScoreFloat = params.get("CvssScoreFloat")
        self._Labels = params.get("Labels")
        self._DefenseAttackCount = params.get("DefenseAttackCount")
        self._SuccessFixCount = params.get("SuccessFixCount")
        self._FixSwitch = params.get("FixSwitch")
        self._RequestId = params.get("RequestId")


class DescribeVulLabelsRequest(AbstractModel):
    """DescribeVulLabels request structure.

    """


class DescribeVulLabelsResponse(AbstractModel):
    """DescribeVulLabels response structure.

    """

    def __init__(self):
        r"""
        :param _List: Tag list
        :type List: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        """Tag list
        :rtype: list of str
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._List = params.get("List")
        self._RequestId = params.get("RequestId")


class DescribeVulLevelCountRequest(AbstractModel):
    """DescribeVulLevelCount request structure.

    """

    def __init__(self):
        r"""
        :param _VulCategory: 1: web CMS vulnerability; 2: application vulnerability; 3: security baseline; 4: Linux software vulnerability; 5: Windows system vulnerability; 6: emergency vulnerability. If this parameter is left blank or set to 0, the statistics data of all vulnerabilities of types 1, 2, 4, and 5 is returned.
        :type VulCategory: int
        :param _IsFollowVul: Whether to count only critical vulnerabilities. 1: only critical vulnerabilities; 0: all vulnerabilities.
        :type IsFollowVul: int
        """
        self._VulCategory = None
        self._IsFollowVul = None

    @property
    def VulCategory(self):
        """1: web CMS vulnerability; 2: application vulnerability; 3: security baseline; 4: Linux software vulnerability; 5: Windows system vulnerability; 6: emergency vulnerability. If this parameter is left blank or set to 0, the statistics data of all vulnerabilities of types 1, 2, 4, and 5 is returned.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def IsFollowVul(self):
        """Whether to count only critical vulnerabilities. 1: only critical vulnerabilities; 0: all vulnerabilities.
        :rtype: int
        """
        return self._IsFollowVul

    @IsFollowVul.setter
    def IsFollowVul(self, IsFollowVul):
        self._IsFollowVul = IsFollowVul


    def _deserialize(self, params):
        self._VulCategory = params.get("VulCategory")
        self._IsFollowVul = params.get("IsFollowVul")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulLevelCountResponse(AbstractModel):
    """DescribeVulLevelCount response structure.

    """

    def __init__(self):
        r"""
        :param _VulLevelList: Statistical result
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulLevelList: list of VulLevelInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulLevelList = None
        self._RequestId = None

    @property
    def VulLevelList(self):
        """Statistical result
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulLevelInfo
        """
        return self._VulLevelList

    @VulLevelList.setter
    def VulLevelList(self, VulLevelList):
        self._VulLevelList = VulLevelList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulLevelList") is not None:
            self._VulLevelList = []
            for item in params.get("VulLevelList"):
                obj = VulLevelInfo()
                obj._deserialize(item)
                self._VulLevelList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulListRequest(AbstractModel):
    """DescribeVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of returns, with the maximum value being 100.
        :type Limit: int
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Filters: Filter criteria
<li>Status - String - required: no - processing status: 0: pending; 1: allowlisted; 2: deleted; 3: ignored</li>
<li>ModifyTime - String - required: no - last occurrence time</li>
<li>Uuid- String - required: no - query by host UUID</li>
<li>VulName- string -</li>
<li>VulCategory- string - required: no - vulnerability category: 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability</li>
<li>IsSupportDefense - int - required: no - support for defense: 0: not supported; 1: supported</li>
<li>Labels - string - required: no - tag for search</li>
<li>IsSupportAutoFix - string - required: no - whether automatic fixing is supported: 0: not supported; 1: supported</li>
<li>CvssScore - string - required: no - lower limit of CVSS score</li>
<li>AttackLevel - string - required: no - lower limit of attack level</li>


        :type Filters: list of Filters
        :param _By: Sorting field: Level, LastTime, and HostCount
        :type By: str
        :param _Order: Sorting order: desc and asc. Default value: asc.
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        """Number of returns, with the maximum value being 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter criteria
<li>Status - String - required: no - processing status: 0: pending; 1: allowlisted; 2: deleted; 3: ignored</li>
<li>ModifyTime - String - required: no - last occurrence time</li>
<li>Uuid- String - required: no - query by host UUID</li>
<li>VulName- string -</li>
<li>VulCategory- string - required: no - vulnerability category: 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability</li>
<li>IsSupportDefense - int - required: no - support for defense: 0: not supported; 1: supported</li>
<li>Labels - string - required: no - tag for search</li>
<li>IsSupportAutoFix - string - required: no - whether automatic fixing is supported: 0: not supported; 1: supported</li>
<li>CvssScore - string - required: no - lower limit of CVSS score</li>
<li>AttackLevel - string - required: no - lower limit of attack level</li>


        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        """Sorting field: Level, LastTime, and HostCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        """Sorting order: desc and asc. Default value: asc.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulListResponse(AbstractModel):
    """DescribeVulList response structure.

    """

    def __init__(self):
        r"""
        :param _VulInfoList: Vulnerability list
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulInfoList: list of VulInfoList
        :param _TotalCount: Total number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _FollowVulCount: Total number of focused vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type FollowVulCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulInfoList = None
        self._TotalCount = None
        self._FollowVulCount = None
        self._RequestId = None

    @property
    def VulInfoList(self):
        """Vulnerability list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulInfoList
        """
        return self._VulInfoList

    @VulInfoList.setter
    def VulInfoList(self, VulInfoList):
        self._VulInfoList = VulInfoList

    @property
    def TotalCount(self):
        """Total number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def FollowVulCount(self):
        """Total number of focused vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FollowVulCount

    @FollowVulCount.setter
    def FollowVulCount(self, FollowVulCount):
        self._FollowVulCount = FollowVulCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulInfoList") is not None:
            self._VulInfoList = []
            for item in params.get("VulInfoList"):
                obj = VulInfoList()
                obj._deserialize(item)
                self._VulInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._FollowVulCount = params.get("FollowVulCount")
        self._RequestId = params.get("RequestId")


class DescribeVulOverviewRequest(AbstractModel):
    """DescribeVulOverview request structure.

    """


class DescribeVulOverviewResponse(AbstractModel):
    """DescribeVulOverview response structure.

    """

    def __init__(self):
        r"""
        :param _FollowVul: Statistics on focused vulnerabilities
        :type FollowVul: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _AllVul: Statistics on all vulnerabilities
        :type AllVul: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _EffectHost: Statistics on affected hosts
        :type EffectHost: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _VulAttackEvent: Statistics on vulnerability attack event (past 1 month)
        :type VulAttackEvent: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _VulDefenceEvent: Statistics on defended attacks (past 1 month)
        :type VulDefenceEvent: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _VulStore: Vulnerability database statistics
        :type VulStore: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FollowVul = None
        self._AllVul = None
        self._EffectHost = None
        self._VulAttackEvent = None
        self._VulDefenceEvent = None
        self._VulStore = None
        self._RequestId = None

    @property
    def FollowVul(self):
        """Statistics on focused vulnerabilities
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._FollowVul

    @FollowVul.setter
    def FollowVul(self, FollowVul):
        self._FollowVul = FollowVul

    @property
    def AllVul(self):
        """Statistics on all vulnerabilities
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._AllVul

    @AllVul.setter
    def AllVul(self, AllVul):
        self._AllVul = AllVul

    @property
    def EffectHost(self):
        """Statistics on affected hosts
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._EffectHost

    @EffectHost.setter
    def EffectHost(self, EffectHost):
        self._EffectHost = EffectHost

    @property
    def VulAttackEvent(self):
        """Statistics on vulnerability attack event (past 1 month)
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._VulAttackEvent

    @VulAttackEvent.setter
    def VulAttackEvent(self, VulAttackEvent):
        self._VulAttackEvent = VulAttackEvent

    @property
    def VulDefenceEvent(self):
        """Statistics on defended attacks (past 1 month)
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._VulDefenceEvent

    @VulDefenceEvent.setter
    def VulDefenceEvent(self, VulDefenceEvent):
        self._VulDefenceEvent = VulDefenceEvent

    @property
    def VulStore(self):
        """Vulnerability database statistics
        :rtype: :class:`tencentcloud.cwp.v20180228.models.VulOverview`
        """
        return self._VulStore

    @VulStore.setter
    def VulStore(self, VulStore):
        self._VulStore = VulStore

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FollowVul") is not None:
            self._FollowVul = VulOverview()
            self._FollowVul._deserialize(params.get("FollowVul"))
        if params.get("AllVul") is not None:
            self._AllVul = VulOverview()
            self._AllVul._deserialize(params.get("AllVul"))
        if params.get("EffectHost") is not None:
            self._EffectHost = VulOverview()
            self._EffectHost._deserialize(params.get("EffectHost"))
        if params.get("VulAttackEvent") is not None:
            self._VulAttackEvent = VulOverview()
            self._VulAttackEvent._deserialize(params.get("VulAttackEvent"))
        if params.get("VulDefenceEvent") is not None:
            self._VulDefenceEvent = VulOverview()
            self._VulDefenceEvent._deserialize(params.get("VulDefenceEvent"))
        if params.get("VulStore") is not None:
            self._VulStore = VulOverview()
            self._VulStore._deserialize(params.get("VulStore"))
        self._RequestId = params.get("RequestId")


class DescribeVulStoreListRequest(AbstractModel):
    """DescribeVulStoreList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>VulName- string - required: no - vulnerability name</li>
<li>CveId- string - required: no - cveid</li>
<li>VulCategory- string - required: no - vulnerability category: 1: WEB-CMS vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities</li>
<li>Method- string - required: no - detection method: 0: version comparison; 1: POC detection</li>
<li>SupportDefense - string - required: no - whether the defense is supported: 0: no; 1: yes</li>
<li>FixSwitch - string - required: no - whether automatic fixing is supported: 0: no; 1: yes</li>

        :type Filters: list of Filter
        :param _Limit: Limit Entries, 10 by default, up to 100
        :type Limit: int
        :param _Offset: Offset, which is 0 by default.
        :type Offset: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting columns: [PublishDate].
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>VulName- string - required: no - vulnerability name</li>
<li>CveId- string - required: no - cveid</li>
<li>VulCategory- string - required: no - vulnerability category: 1: WEB-CMS vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities</li>
<li>Method- string - required: no - detection method: 0: version comparison; 1: POC detection</li>
<li>SupportDefense - string - required: no - whether the defense is supported: 0: no; 1: yes</li>
<li>FixSwitch - string - required: no - whether automatic fixing is supported: 0: no; 1: yes</li>

        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Limit Entries, 10 by default, up to 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset, which is 0 by default.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting columns: [PublishDate].
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulStoreListResponse(AbstractModel):
    """DescribeVulStoreList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of VulStoreListInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _Remaining: Remaining Searches for Today
        :type Remaining: int
        :param _FreeSearchTimes: Free Search Count
        :type FreeSearchTimes: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._Remaining = None
        self._FreeSearchTimes = None
        self._RequestId = None

    @property
    def List(self):
        """Vulnerability information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulStoreListInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Remaining(self):
        """Remaining Searches for Today
        :rtype: int
        """
        return self._Remaining

    @Remaining.setter
    def Remaining(self, Remaining):
        self._Remaining = Remaining

    @property
    def FreeSearchTimes(self):
        """Free Search Count
        :rtype: int
        """
        return self._FreeSearchTimes

    @FreeSearchTimes.setter
    def FreeSearchTimes(self, FreeSearchTimes):
        self._FreeSearchTimes = FreeSearchTimes

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulStoreListInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._Remaining = params.get("Remaining")
        self._FreeSearchTimes = params.get("FreeSearchTimes")
        self._RequestId = params.get("RequestId")


class DescribeVulTopRequest(AbstractModel):
    """DescribeVulTop request structure.

    """

    def __init__(self):
        r"""
        :param _Top: Top servers by vulnerability risks. The specific number is in the range of 1 to 100.
        :type Top: int
        :param _VulCategory: 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability; 6: emergency vulnerability. If this parameter is left blank or set to 0, the statistical data of all these types of vulnerabilities is returned.
        :type VulCategory: int
        :param _IsFollowVul: Whether to count only focused vulnerabilities. 1: count only focused vulnerabilities; 0: count all vulnerabilities.
        :type IsFollowVul: int
        """
        self._Top = None
        self._VulCategory = None
        self._IsFollowVul = None

    @property
    def Top(self):
        """Top servers by vulnerability risks. The specific number is in the range of 1 to 100.
        :rtype: int
        """
        return self._Top

    @Top.setter
    def Top(self, Top):
        self._Top = Top

    @property
    def VulCategory(self):
        """1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability; 6: emergency vulnerability. If this parameter is left blank or set to 0, the statistical data of all these types of vulnerabilities is returned.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def IsFollowVul(self):
        """Whether to count only focused vulnerabilities. 1: count only focused vulnerabilities; 0: count all vulnerabilities.
        :rtype: int
        """
        return self._IsFollowVul

    @IsFollowVul.setter
    def IsFollowVul(self, IsFollowVul):
        self._IsFollowVul = IsFollowVul


    def _deserialize(self, params):
        self._Top = params.get("Top")
        self._VulCategory = params.get("VulCategory")
        self._IsFollowVul = params.get("IsFollowVul")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulTopResponse(AbstractModel):
    """DescribeVulTop response structure.

    """

    def __init__(self):
        r"""
        :param _VulTopList: List of top vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulTopList: list of VulTopInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulTopList = None
        self._RequestId = None

    @property
    def VulTopList(self):
        """List of top vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulTopInfo
        """
        return self._VulTopList

    @VulTopList.setter
    def VulTopList(self, VulTopList):
        self._VulTopList = VulTopList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulTopList") is not None:
            self._VulTopList = []
            for item in params.get("VulTopList"):
                obj = VulTopInfo()
                obj._deserialize(item)
                self._VulTopList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulTrendRequest(AbstractModel):
    """DescribeVulTrend request structure.

    """


class DescribeVulTrendResponse(AbstractModel):
    """DescribeVulTrend response structure.

    """

    def __init__(self):
        r"""
        :param _VulEventCount: Number of vulnerability exploitation attacks in the past six months
        :type VulEventCount: int
        :param _IncreaseVulEventCount: Number of new vulnerability exploitation attacks in the past six months
        :type IncreaseVulEventCount: int
        :param _HotVulCount: Notable vulnerabilities attacked in the past six months
        :type HotVulCount: int
        :param _IncreaseHotVulCount: New notable vulnerabilities attacked in the past six months
        :type IncreaseHotVulCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulEventCount = None
        self._IncreaseVulEventCount = None
        self._HotVulCount = None
        self._IncreaseHotVulCount = None
        self._RequestId = None

    @property
    def VulEventCount(self):
        """Number of vulnerability exploitation attacks in the past six months
        :rtype: int
        """
        return self._VulEventCount

    @VulEventCount.setter
    def VulEventCount(self, VulEventCount):
        self._VulEventCount = VulEventCount

    @property
    def IncreaseVulEventCount(self):
        """Number of new vulnerability exploitation attacks in the past six months
        :rtype: int
        """
        return self._IncreaseVulEventCount

    @IncreaseVulEventCount.setter
    def IncreaseVulEventCount(self, IncreaseVulEventCount):
        self._IncreaseVulEventCount = IncreaseVulEventCount

    @property
    def HotVulCount(self):
        """Notable vulnerabilities attacked in the past six months
        :rtype: int
        """
        return self._HotVulCount

    @HotVulCount.setter
    def HotVulCount(self, HotVulCount):
        self._HotVulCount = HotVulCount

    @property
    def IncreaseHotVulCount(self):
        """New notable vulnerabilities attacked in the past six months
        :rtype: int
        """
        return self._IncreaseHotVulCount

    @IncreaseHotVulCount.setter
    def IncreaseHotVulCount(self, IncreaseHotVulCount):
        self._IncreaseHotVulCount = IncreaseHotVulCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VulEventCount = params.get("VulEventCount")
        self._IncreaseVulEventCount = params.get("IncreaseVulEventCount")
        self._HotVulCount = params.get("HotVulCount")
        self._IncreaseHotVulCount = params.get("IncreaseHotVulCount")
        self._RequestId = params.get("RequestId")


class DescribeWarningHostConfigRequest(AbstractModel):
    """DescribeWarningHostConfig request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Alarm type
        :type Type: int
        :param _Limit: Limit per Page, 0 for no paging.
        :type Limit: int
        :param _Offset: Pagination offset. The default is 0.
        :type Offset: int
        """
        self._Type = None
        self._Limit = None
        self._Offset = None

    @property
    def Type(self):
        """Alarm type
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Limit(self):
        """Limit per Page, 0 for no paging.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Pagination offset. The default is 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWarningHostConfigResponse(AbstractModel):
    """DescribeWarningHostConfig response structure.

    """

    def __init__(self):
        r"""
        :param _HostRange: Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :type HostRange: int
        :param _ItemLabels: List of Project or Tag Names, empty for custom hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemLabels: list of str
        :param _Quuids: Machine list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        :param _TotalCount: Total Number of Machine Lists
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _ItemLabelIds: List of Project or Tag IDs, empty for custom hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemLabelIds: list of str
        :param _ExcludedQuuids: 
        :type ExcludedQuuids: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HostRange = None
        self._ItemLabels = None
        self._Quuids = None
        self._TotalCount = None
        self._ItemLabelIds = None
        self._ExcludedQuuids = None
        self._RequestId = None

    @property
    def HostRange(self):
        """Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :rtype: int
        """
        return self._HostRange

    @HostRange.setter
    def HostRange(self, HostRange):
        self._HostRange = HostRange

    @property
    def ItemLabels(self):
        """List of Project or Tag Names, empty for custom hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ItemLabels

    @ItemLabels.setter
    def ItemLabels(self, ItemLabels):
        self._ItemLabels = ItemLabels

    @property
    def Quuids(self):
        """Machine list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def TotalCount(self):
        """Total Number of Machine Lists
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ItemLabelIds(self):
        """List of Project or Tag IDs, empty for custom hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ItemLabelIds

    @ItemLabelIds.setter
    def ItemLabelIds(self, ItemLabelIds):
        self._ItemLabelIds = ItemLabelIds

    @property
    def ExcludedQuuids(self):
        """
        :rtype: list of str
        """
        return self._ExcludedQuuids

    @ExcludedQuuids.setter
    def ExcludedQuuids(self, ExcludedQuuids):
        self._ExcludedQuuids = ExcludedQuuids

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HostRange = params.get("HostRange")
        self._ItemLabels = params.get("ItemLabels")
        self._Quuids = params.get("Quuids")
        self._TotalCount = params.get("TotalCount")
        self._ItemLabelIds = params.get("ItemLabelIds")
        self._ExcludedQuuids = params.get("ExcludedQuuids")
        self._RequestId = params.get("RequestId")


class DescribeWarningListRequest(AbstractModel):
    """DescribeWarningList request structure.

    """


class DescribeWarningListResponse(AbstractModel):
    """DescribeWarningList response structure.

    """

    def __init__(self):
        r"""
        :param _WarningInfoList: Obtain Alarm List
        :type WarningInfoList: list of WarningInfoObj
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WarningInfoList = None
        self._RequestId = None

    @property
    def WarningInfoList(self):
        """Obtain Alarm List
        :rtype: list of WarningInfoObj
        """
        return self._WarningInfoList

    @WarningInfoList.setter
    def WarningInfoList(self, WarningInfoList):
        self._WarningInfoList = WarningInfoList

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WarningInfoList") is not None:
            self._WarningInfoList = []
            for item in params.get("WarningInfoList"):
                obj = WarningInfoObj()
                obj._deserialize(item)
                self._WarningInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeWebHookPolicyRequest(AbstractModel):
    """DescribeWebHookPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Filter: Filter criteria
        :type Filter: list of Filter
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Filter = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filter(self):
        """Filter criteria
        :rtype: list of Filter
        """
        return self._Filter

    @Filter.setter
    def Filter(self, Filter):
        self._Filter = Filter

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filter") is not None:
            self._Filter = []
            for item in params.get("Filter"):
                obj = Filter()
                obj._deserialize(item)
                self._Filter.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebHookPolicyResponse(AbstractModel):
    """DescribeWebHookPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _List: Policy list
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of WebHookPolicy
        :param _TotalCount: Number of policy lists
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Policy list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of WebHookPolicy
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Number of policy lists
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = WebHookPolicy()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeWebHookReceiverRequest(AbstractModel):
    """DescribeWebHookReceiver request structure.

    """

    def __init__(self):
        r"""
        :param _Filter: Filter criteria
        :type Filter: list of Filter
        :param _Offset: Offset, which defaults to 0
        :type Offset: int
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Filter = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filter(self):
        """Filter criteria
        :rtype: list of Filter
        """
        return self._Filter

    @Filter.setter
    def Filter(self, Filter):
        self._Filter = Filter

    @property
    def Offset(self):
        """Offset, which defaults to 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filter") is not None:
            self._Filter = []
            for item in params.get("Filter"):
                obj = Filter()
                obj._deserialize(item)
                self._Filter.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebHookReceiverResponse(AbstractModel):
    """DescribeWebHookReceiver response structure.

    """

    def __init__(self):
        r"""
        :param _List: Alarm recipient list
        :type List: list of WebHookReceiver
        :param _TotalCount: Number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Alarm recipient list
        :rtype: list of WebHookReceiver
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = WebHookReceiver()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeWebHookReceiverUsageRequest(AbstractModel):
    """DescribeWebHookReceiverUsage request structure.

    """

    def __init__(self):
        r"""
        :param _List: Alarm recipient list
        :type List: list of WebHookReceiver
        """
        self._List = None

    @property
    def List(self):
        """Alarm recipient list
        :rtype: list of WebHookReceiver
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = WebHookReceiver()
                obj._deserialize(item)
                self._List.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebHookReceiverUsageResponse(AbstractModel):
    """DescribeWebHookReceiverUsage response structure.

    """

    def __init__(self):
        r"""
        :param _List: Usage information on associated policies of the alarm recipient
        :type List: list of WebHookReceiverUsage
        :param _TotalCount: Number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        """Usage information on associated policies of the alarm recipient
        :rtype: list of WebHookReceiverUsage
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        """Number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = WebHookReceiverUsage()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeWebHookRuleRequest(AbstractModel):
    """DescribeWebHookRule request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebHookRuleResponse(AbstractModel):
    """DescribeWebHookRule response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule content
        :type Data: :class:`tencentcloud.cwp.v20180228.models.WebHookRuleDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """Rule content
        :rtype: :class:`tencentcloud.cwp.v20180228.models.WebHookRuleDetail`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WebHookRuleDetail()
            self._Data._deserialize(params.get("Data"))
        self._RequestId = params.get("RequestId")


class DescribeWebHookRulesRequest(AbstractModel):
    """DescribeWebHookRules request structure.

    """

    def __init__(self):
        r"""
        :param _Filter: Filter criteria
        :type Filter: list of Filter
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Filter = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filter(self):
        """Filter criteria
        :rtype: list of Filter
        """
        return self._Filter

    @Filter.setter
    def Filter(self, Filter):
        self._Filter = Filter

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Number of results to be returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filter") is not None:
            self._Filter = []
            for item in params.get("Filter"):
                obj = Filter()
                obj._deserialize(item)
                self._Filter.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebHookRulesResponse(AbstractModel):
    """DescribeWebHookRules response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Rule content
        :type List: list of WebHookRuleSummary
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        """Rule content
        :rtype: list of WebHookRuleSummary
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = WebHookRuleSummary()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DestroyOrderRequest(AbstractModel):
    """DestroyOrder request structure.

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _LicenseType: Authorization type. 0: Pro Edition - pay-as-you-go; 1: Pro Edition - monthly subscription; 2: Ultimate Edition - monthly subscription.
        :type LicenseType: int
        """
        self._ResourceId = None
        self._LicenseType = None

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def LicenseType(self):
        """Authorization type. 0: Pro Edition - pay-as-you-go; 1: Pro Edition - monthly subscription; 2: Ultimate Edition - monthly subscription.
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._LicenseType = params.get("LicenseType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DestroyOrderResponse(AbstractModel):
    """DestroyOrder response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DuplicateHosts(AbstractModel):
    """Batch add to allowlists

    """

    def __init__(self):
        r"""
        :param _Quuid: Quuid
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _Uuid: Uuid
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _Id: Id
        :type Id: int
        """
        self._Quuid = None
        self._Uuid = None
        self._Id = None

    @property
    def Quuid(self):
        """Quuid
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Uuid
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Id
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EditBashRulesRequest(AbstractModel):
    """EditBashRules request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID (leave this parameter blank for addition)
        :type Id: int
        :param _Uuids: Client ID array
        :type Uuids: list of str
        :param _HostIp: Host IP address
        :type HostIp: str
        :param _Name: Rule name, which cannot be modified during editing
        :type Name: str
        :param _Level: Risk level (0: none; 1: high-risk; 2: medium-risk; 3: low-risk)
        :type Level: int
        :param _Rule: Regular expression, which cannot be modified during editing. Apply the QueryEscape function to the content and then perform Base64 encoding.
        :type Rule: str
        :param _IsGlobal: Whether the rule is global. 1: global; 0: not global (default value).
        :type IsGlobal: int
        :param _White: 0: blocklist; 1: allowlist
        :type White: int
        :param _EventId: When it is added to the allowlist, the event ID needs to be passed in.
        :type EventId: int
        :param _DealOldEvents: Whether to add existing events to the allowlist. 0: no; 1: yes.
        :type DealOldEvents: int
        """
        self._Id = None
        self._Uuids = None
        self._HostIp = None
        self._Name = None
        self._Level = None
        self._Rule = None
        self._IsGlobal = None
        self._White = None
        self._EventId = None
        self._DealOldEvents = None

    @property
    def Id(self):
        """Rule ID (leave this parameter blank for addition)
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuids(self):
        """Client ID array
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def HostIp(self):
        """Host IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Name(self):
        """Rule name, which cannot be modified during editing
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Level(self):
        """Risk level (0: none; 1: high-risk; 2: medium-risk; 3: low-risk)
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Rule(self):
        """Regular expression, which cannot be modified during editing. Apply the QueryEscape function to the content and then perform Base64 encoding.
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def IsGlobal(self):
        """Whether the rule is global. 1: global; 0: not global (default value).
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def White(self):
        """0: blocklist; 1: allowlist
        :rtype: int
        """
        return self._White

    @White.setter
    def White(self, White):
        self._White = White

    @property
    def EventId(self):
        """When it is added to the allowlist, the event ID needs to be passed in.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def DealOldEvents(self):
        """Whether to add existing events to the allowlist. 0: no; 1: yes.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuids = params.get("Uuids")
        self._HostIp = params.get("HostIp")
        self._Name = params.get("Name")
        self._Level = params.get("Level")
        self._Rule = params.get("Rule")
        self._IsGlobal = params.get("IsGlobal")
        self._White = params.get("White")
        self._EventId = params.get("EventId")
        self._DealOldEvents = params.get("DealOldEvents")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EditBashRulesResponse(AbstractModel):
    """EditBashRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EditPrivilegeRulesRequest(AbstractModel):
    """EditPrivilegeRules request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID (Leave it blank when adding rules.)
        :type Id: int
        :param _Uuids: Client ID array
        :type Uuids: list of str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _SMode: Whether it is a S permission process
        :type SMode: int
        :param _IsGlobal: Whether the rule is global (not global by default)
        :type IsGlobal: int
        :param _EventId: ID of the associated event when the user clicks Add to Allowlist on the event list and details page (leave this parameter blank for rule addition)
        :type EventId: int
        """
        self._Id = None
        self._Uuids = None
        self._HostIp = None
        self._ProcessName = None
        self._SMode = None
        self._IsGlobal = None
        self._EventId = None

    @property
    def Id(self):
        """Rule ID (Leave it blank when adding rules.)
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuids(self):
        """Client ID array
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def SMode(self):
        """Whether it is a S permission process
        :rtype: int
        """
        return self._SMode

    @SMode.setter
    def SMode(self, SMode):
        self._SMode = SMode

    @property
    def IsGlobal(self):
        """Whether the rule is global (not global by default)
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def EventId(self):
        """ID of the associated event when the user clicks Add to Allowlist on the event list and details page (leave this parameter blank for rule addition)
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuids = params.get("Uuids")
        self._HostIp = params.get("HostIp")
        self._ProcessName = params.get("ProcessName")
        self._SMode = params.get("SMode")
        self._IsGlobal = params.get("IsGlobal")
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EditPrivilegeRulesResponse(AbstractModel):
    """EditPrivilegeRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EditReverseShellRulesRequest(AbstractModel):
    """EditReverseShellRules request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID (leave this parameter blank for addition)
        :type Id: int
        :param _Uuids: Client ID array
        :type Uuids: list of str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _DestIp: Target IP address
        :type DestIp: str
        :param _DestPort: Target port
        :type DestPort: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _IsGlobal: Whether the rule is global (not global by default)
        :type IsGlobal: int
        :param _EventId: ID of the associated event when clicking Add to Allowlist on the event list and details page (leave this parameter blank for rule addition)
        :type EventId: int
        """
        self._Id = None
        self._Uuids = None
        self._HostIp = None
        self._DestIp = None
        self._DestPort = None
        self._ProcessName = None
        self._IsGlobal = None
        self._EventId = None

    @property
    def Id(self):
        """Rule ID (leave this parameter blank for addition)
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuids(self):
        """Client ID array
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def DestIp(self):
        """Target IP address
        :rtype: str
        """
        return self._DestIp

    @DestIp.setter
    def DestIp(self, DestIp):
        self._DestIp = DestIp

    @property
    def DestPort(self):
        """Target port
        :rtype: str
        """
        return self._DestPort

    @DestPort.setter
    def DestPort(self, DestPort):
        self._DestPort = DestPort

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def IsGlobal(self):
        """Whether the rule is global (not global by default)
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def EventId(self):
        """ID of the associated event when clicking Add to Allowlist on the event list and details page (leave this parameter blank for rule addition)
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuids = params.get("Uuids")
        self._HostIp = params.get("HostIp")
        self._DestIp = params.get("DestIp")
        self._DestPort = params.get("DestPort")
        self._ProcessName = params.get("ProcessName")
        self._IsGlobal = params.get("IsGlobal")
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EditReverseShellRulesResponse(AbstractModel):
    """EditReverseShellRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EditTagsRequest(AbstractModel):
    """EditTags request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Tag name
        :type Name: str
        :param _Id: Tag ID
        :type Id: int
        :param _Quuids: Quuid
        :type Quuids: list of str
        """
        self._Name = None
        self._Id = None
        self._Quuids = None

    @property
    def Name(self):
        """Tag name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Id(self):
        """Tag ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Quuids(self):
        """Quuid
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Id = params.get("Id")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EditTagsResponse(AbstractModel):
    """EditTags response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EmergencyResponseInfo(AbstractModel):
    """Expert service - emergency response information

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _HostNum: Number of hosts
        :type HostNum: int
        :param _Status: 
        :type Status: int
        :param _StartTime: Service start time
        :type StartTime: str
        :param _EndTime: Service end time
        :type EndTime: str
        :param _ReportPath: Report download link
        :type ReportPath: str
        """
        self._TaskId = None
        self._HostNum = None
        self._Status = None
        self._StartTime = None
        self._EndTime = None
        self._ReportPath = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def HostNum(self):
        """Number of hosts
        :rtype: int
        """
        return self._HostNum

    @HostNum.setter
    def HostNum(self, HostNum):
        self._HostNum = HostNum

    @property
    def Status(self):
        """
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StartTime(self):
        """Service start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Service end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ReportPath(self):
        """Report download link
        :rtype: str
        """
        return self._ReportPath

    @ReportPath.setter
    def ReportPath(self, ReportPath):
        self._ReportPath = ReportPath


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._HostNum = params.get("HostNum")
        self._Status = params.get("Status")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ReportPath = params.get("ReportPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EmergencyVul(AbstractModel):
    """Emergency vulnerability information

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Level: Vulnerability level
        :type Level: int
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _PublishDate: Release date
        :type PublishDate: str
        :param _Category: Vulnerability category
        :type Category: int
        :param _Status: Vulnerability status. 0: not detected; 1: at risk; 2: not at risk; 3: show progress during check
        :type Status: int
        :param _LastScanTime: Last scan time
        :type LastScanTime: str
        :param _Progress: Scan progress
        :type Progress: int
        :param _CveId: CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveId: str
        :param _CvssScore: CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssScore: float
        :param _Labels: Vulnerability Tags, Separated by Multiple Commas
Note: This field may return null, indicating that no valid values can be obtained.
        :type Labels: str
        :param _HostCount: Number of affected machines
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _IsSupportDefense: Whether to support defense: 0: no; 1: yes
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSupportDefense: int
        :param _DefenseAttackCount: Number of Attacks Defended
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenseAttackCount: int
        :param _Method: Detection rule: 0: version comparison; 1: POC verification
Note: This field may return null, indicating that no valid values can be obtained.
        :type Method: int
        :param _AttackLevel: Attack intensity level
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackLevel: int
        :param _DefenseState: Whether vulnerability defense is enabled on hosts with vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenseState: bool
        """
        self._VulId = None
        self._Level = None
        self._VulName = None
        self._PublishDate = None
        self._Category = None
        self._Status = None
        self._LastScanTime = None
        self._Progress = None
        self._CveId = None
        self._CvssScore = None
        self._Labels = None
        self._HostCount = None
        self._IsSupportDefense = None
        self._DefenseAttackCount = None
        self._Method = None
        self._AttackLevel = None
        self._DefenseState = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Level(self):
        """Vulnerability level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def PublishDate(self):
        """Release date
        :rtype: str
        """
        return self._PublishDate

    @PublishDate.setter
    def PublishDate(self, PublishDate):
        self._PublishDate = PublishDate

    @property
    def Category(self):
        """Vulnerability category
        :rtype: int
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Status(self):
        """Vulnerability status. 0: not detected; 1: at risk; 2: not at risk; 3: show progress during check
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def LastScanTime(self):
        """Last scan time
        :rtype: str
        """
        return self._LastScanTime

    @LastScanTime.setter
    def LastScanTime(self, LastScanTime):
        self._LastScanTime = LastScanTime

    @property
    def Progress(self):
        """Scan progress
        :rtype: int
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def CveId(self):
        """CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def CvssScore(self):
        """CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def Labels(self):
        """Vulnerability Tags, Separated by Multiple Commas
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def HostCount(self):
        """Number of affected machines
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def IsSupportDefense(self):
        """Whether to support defense: 0: no; 1: yes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsSupportDefense

    @IsSupportDefense.setter
    def IsSupportDefense(self, IsSupportDefense):
        self._IsSupportDefense = IsSupportDefense

    @property
    def DefenseAttackCount(self):
        """Number of Attacks Defended
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenseAttackCount

    @DefenseAttackCount.setter
    def DefenseAttackCount(self, DefenseAttackCount):
        self._DefenseAttackCount = DefenseAttackCount

    @property
    def Method(self):
        """Detection rule: 0: version comparison; 1: POC verification
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Method

    @Method.setter
    def Method(self, Method):
        self._Method = Method

    @property
    def AttackLevel(self):
        """Attack intensity level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackLevel

    @AttackLevel.setter
    def AttackLevel(self, AttackLevel):
        self._AttackLevel = AttackLevel

    @property
    def DefenseState(self):
        """Whether vulnerability defense is enabled on hosts with vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._DefenseState

    @DefenseState.setter
    def DefenseState(self, DefenseState):
        self._DefenseState = DefenseState


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._Level = params.get("Level")
        self._VulName = params.get("VulName")
        self._PublishDate = params.get("PublishDate")
        self._Category = params.get("Category")
        self._Status = params.get("Status")
        self._LastScanTime = params.get("LastScanTime")
        self._Progress = params.get("Progress")
        self._CveId = params.get("CveId")
        self._CvssScore = params.get("CvssScore")
        self._Labels = params.get("Labels")
        self._HostCount = params.get("HostCount")
        self._IsSupportDefense = params.get("IsSupportDefense")
        self._DefenseAttackCount = params.get("DefenseAttackCount")
        self._Method = params.get("Method")
        self._AttackLevel = params.get("AttackLevel")
        self._DefenseState = params.get("DefenseState")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EventStat(AbstractModel):
    """Unprocessed security event statistics

    """

    def __init__(self):
        r"""
        :param _EventsNum: Number of events
        :type EventsNum: int
        :param _MachineAffectNum: Number of affected hosts
        :type MachineAffectNum: int
        """
        self._EventsNum = None
        self._MachineAffectNum = None

    @property
    def EventsNum(self):
        """Number of events
        :rtype: int
        """
        return self._EventsNum

    @EventsNum.setter
    def EventsNum(self, EventsNum):
        self._EventsNum = EventsNum

    @property
    def MachineAffectNum(self):
        """Number of affected hosts
        :rtype: int
        """
        return self._MachineAffectNum

    @MachineAffectNum.setter
    def MachineAffectNum(self, MachineAffectNum):
        self._MachineAffectNum = MachineAffectNum


    def _deserialize(self, params):
        self._EventsNum = params.get("EventsNum")
        self._MachineAffectNum = params.get("MachineAffectNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExpertServiceOrderInfo(AbstractModel):
    """Expert service order information

    """

    def __init__(self):
        r"""
        :param _OrderId: Order ID
        :type OrderId: int
        :param _InquireType: Order type. 1: emergency; 2: Ultimate Edition important period guarantee; 3: security manager.
        :type InquireType: int
        :param _InquireNum: Number of services
        :type InquireNum: int
        :param _BeginTime: Service start time
        :type BeginTime: str
        :param _EndTime: Service end time
        :type EndTime: str
        :param _ServiceTime: Service duration, in months
        :type ServiceTime: int
        :param _Status: Order status. 0: not started; 1: in service; 2: expired; 3: completed; 4: refunded and terminated.
        :type Status: int
        """
        self._OrderId = None
        self._InquireType = None
        self._InquireNum = None
        self._BeginTime = None
        self._EndTime = None
        self._ServiceTime = None
        self._Status = None

    @property
    def OrderId(self):
        """Order ID
        :rtype: int
        """
        return self._OrderId

    @OrderId.setter
    def OrderId(self, OrderId):
        self._OrderId = OrderId

    @property
    def InquireType(self):
        """Order type. 1: emergency; 2: Ultimate Edition important period guarantee; 3: security manager.
        :rtype: int
        """
        return self._InquireType

    @InquireType.setter
    def InquireType(self, InquireType):
        self._InquireType = InquireType

    @property
    def InquireNum(self):
        """Number of services
        :rtype: int
        """
        return self._InquireNum

    @InquireNum.setter
    def InquireNum(self, InquireNum):
        self._InquireNum = InquireNum

    @property
    def BeginTime(self):
        """Service start time
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def EndTime(self):
        """Service end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ServiceTime(self):
        """Service duration, in months
        :rtype: int
        """
        return self._ServiceTime

    @ServiceTime.setter
    def ServiceTime(self, ServiceTime):
        self._ServiceTime = ServiceTime

    @property
    def Status(self):
        """Order status. 0: not started; 1: in service; 2: expired; 3: completed; 4: refunded and terminated.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._OrderId = params.get("OrderId")
        self._InquireType = params.get("InquireType")
        self._InquireNum = params.get("InquireNum")
        self._BeginTime = params.get("BeginTime")
        self._EndTime = params.get("EndTime")
        self._ServiceTime = params.get("ServiceTime")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetAppListRequest(AbstractModel):
    """ExportAssetAppList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>AppName - string - required: no - application name for search</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Type - int - required: no - type	: Linux only
0: all
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting field: [FirstTime|ProcessCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>AppName - string - required: no - application name for search</li>
<li>IP - String - required: no - host IP address</li>
<li>MachineName - String - required: no - host name</li>
<li>InstanceID - string - required: no - instance ID</li>
<li>Type - int - required: no - type	: Linux only
0: all
1: operations
2: database
3: Security
4: suspicious application
5: system architecture
6: system application
7: web service
99: other</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: [FirstTime|ProcessCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetAppListResponse(AbstractModel):
    """ExportAssetAppList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetCoreModuleListRequest(AbstractModel):
    """ExportAssetCoreModuleList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - username</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting criteria [FirstTime|Size|ProcessCount|ModuleCount]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - username</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting criteria [FirstTime|Size|ProcessCount|ModuleCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetCoreModuleListResponse(AbstractModel):
    """ExportAssetCoreModuleList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetDatabaseListRequest(AbstractModel):
    """ExportAssetDatabaseList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>User- string - required: no - running user</li>
<li>Ip - String - required: no - bound IP address</li>
<li>Port - Int - required: no - port</li>
<li>Name - Int - required: no - database name
0: all
1:MySQL
2:Redis
3:Oracle
4:MongoDB
5:MemCache
6:PostgreSQL
7:HBase
8:DB2
9:Sybase
10:TiDB</li>
<li>Proto - String - required: no - protocol: 1: TCP; 2: UDP; 3: unknown</li>
<li>OsType - String - required: no - operating system: Linux/Windows</li>
        :type Filters: list of AssetFilters
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Order: Sorting order: asc for ascending or desc for descending
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Filters = None
        self._Quuid = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria
<li>User- string - required: no - running user</li>
<li>Ip - String - required: no - bound IP address</li>
<li>Port - Int - required: no - port</li>
<li>Name - Int - required: no - database name
0: all
1:MySQL
2:Redis
3:Oracle
4:MongoDB
5:MemCache
6:PostgreSQL
7:HBase
8:DB2
9:Sybase
10:TiDB</li>
<li>Proto - String - required: no - protocol: 1: TCP; 2: UDP; 3: unknown</li>
<li>OsType - String - required: no - operating system: Linux/Windows</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Order(self):
        """Sorting order: asc for ascending or desc for descending
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Quuid = params.get("Quuid")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetDatabaseListResponse(AbstractModel):
    """ExportAssetDatabaseList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetEnvListRequest(AbstractModel):
    """ExportAssetEnvList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - string - required: no - environment variable name</li>
<li>Type - int - required: no - type: 0 - user variable; 1 - system variable</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - string - required: no - environment variable name</li>
<li>Type - int - required: no - type: 0 - user variable; 1 - system variable</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetEnvListResponse(AbstractModel):
    """ExportAssetEnvList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetInitServiceListRequest(AbstractModel):
    """ExportAssetInitServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - user</li>
<li>Status- string - required: no - default enabling status: 0 - unenabled; 1 - enabled (Linux only)</li>
<li>Type- string - required: no - type: type (Windows only)
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Printing monitor
12: Resource manager
13: Driver service
14: Log-in </li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name- string - required: no - package name</li>
<li>User- string - required: no - user</li>
<li>Status- string - required: no - default enabling status: 0 - unenabled; 1 - enabled (Linux only)</li>
<li>Type- string - required: no - type: type (Windows only)
1: Encoder
2: IE plugin
3: Network provider
4: Mirror hijacking
5: LSA provider
6:KnownDLLs
7: Start execution
8:WMI
9: Scheduled task
10: Winsock provider
11: Printing monitor
12: Resource manager
13: Driver service
14: Log-in </li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetInitServiceListResponse(AbstractModel):
    """ExportAssetInitServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetJarListRequest(AbstractModel):
    """ExportAssetJarList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Name- string - required: no - package name</li>
<li>Type- uint - required: no - type	
1: Application
2: System library
3: Web service built-in library
4: Other dependent packages</li>
<li>Status- string - required: no - whether executable: 0 - no; 1 yes</li>
        :type Filters: list of AssetFilters
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Filters = None
        self._Uuid = None
        self._Quuid = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Name- string - required: no - package name</li>
<li>Type- uint - required: no - type	
1: Application
2: System library
3: Web service built-in library
4: Other dependent packages</li>
<li>Status- string - required: no - whether executable: 0 - no; 1 yes</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetJarListResponse(AbstractModel):
    """ExportAssetJarList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetMachineDetailRequest(AbstractModel):
    """ExportAssetMachineDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Uuid: Server UUID
        :type Uuid: str
        """
        self._Quuid = None
        self._Uuid = None

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetMachineDetailResponse(AbstractModel):
    """ExportAssetMachineDetail response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download link
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download link
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class ExportAssetMachineListRequest(AbstractModel):
    """ExportAssetMachineList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>IP - String - Required: No - Host IP</li>
<li>MachineName - String - Required: No - hostname</li>
<li>InstanceID - string - Required: No - Instance ID</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>CpuLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
<li>DiskLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
<li>MemLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method [FirstTime|PartitionCount]
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>IP - String - Required: No - Host IP</li>
<li>MachineName - String - Required: No - hostname</li>
<li>InstanceID - string - Required: No - Instance ID</li>
<li>OsType - String - required: no - Windows or Linux</li>
<li>CpuLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
<li>DiskLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
<li>MemLoad - Int - required: no - 
0: 0% or unknown; 1: 0% to 20%
2: 20%～50%  3: 50%～80%
4: 80%～100%</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method [FirstTime|PartitionCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetMachineListResponse(AbstractModel):
    """ExportAssetMachineList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetPlanTaskListRequest(AbstractModel):
    """ExportAssetPlanTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>User- string - required: no - user</li>
<li>Status- int - required: no - default enabling status: 0 - unenabled; 1 - enabled</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>User- string - required: no - user</li>
<li>Status- int - required: no - default enabling status: 0 - unenabled; 1 - enabled</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetPlanTaskListResponse(AbstractModel):
    """ExportAssetPlanTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetPortInfoListRequest(AbstractModel):
    """ExportAssetPortInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Port - uint64 - required: no - port</li>
<li>Ip - String - required: no - bound IP address</li>
<li>ProcessName - String - required: no - process name</li>
<li>Pid - uint64 - required: no - PID</li>
<li>User - String - required: no - running user</li>
<li>Group - String - required: no - user group</li>
<li>Ppid - uint64 - required: no - PPID</li>
<li>Proto - string - required: no - tcp/udp or "" (empty string to filter unknown status)</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|StartTime]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Port - uint64 - required: no - port</li>
<li>Ip - String - required: no - bound IP address</li>
<li>ProcessName - String - required: no - process name</li>
<li>Pid - uint64 - required: no - PID</li>
<li>User - String - required: no - running user</li>
<li>Group - String - required: no - user group</li>
<li>Ppid - uint64 - required: no - PPID</li>
<li>Proto - string - required: no - tcp/udp or "" (empty string to filter unknown status)</li>
<li>OsType - uint64 - required: no - Windows/Linux</li>
<li>RunTimeStart - String - required: no - running start time</li>
<li>RunTimeEnd - String - required: no - running end time</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|StartTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetPortInfoListResponse(AbstractModel):
    """ExportAssetPortInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetProcessInfoListRequest(AbstractModel):
    """ExportAssetProcessInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - whether required: no - process name</li>
<li>User - String - whether required: no - Process user</li>
<li>Group - String - whether required: no - Process user group</li>
<li>Pid - uint64 - whether required: no - process ID</li>
<li>Ppid - uint64 - whether required: no - parent process ID</li>
<li>OsType - uint64 - whether required: no - windows/Linux</li>
<li>Status - string - whether required: no - process status:
0: all
1: R executable
2: S interruptible
3: Uninterruptible</li>
<li>RunTimeStart - String - whether required: no - start time of running</li>
<li>RunTimeEnd - String - whether required: no - end time of running</li>
<li>InstallByPackage - uint64 - whether required: no - whether to install via a package: 0 - no; 1 - yes</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|StartTime]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - whether required: no - process name</li>
<li>User - String - whether required: no - Process user</li>
<li>Group - String - whether required: no - Process user group</li>
<li>Pid - uint64 - whether required: no - process ID</li>
<li>Ppid - uint64 - whether required: no - parent process ID</li>
<li>OsType - uint64 - whether required: no - windows/Linux</li>
<li>Status - string - whether required: no - process status:
0: all
1: R executable
2: S interruptible
3: Uninterruptible</li>
<li>RunTimeStart - String - whether required: no - start time of running</li>
<li>RunTimeEnd - String - whether required: no - end time of running</li>
<li>InstallByPackage - uint64 - whether required: no - whether to install via a package: 0 - no; 1 - yes</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|StartTime]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetProcessInfoListResponse(AbstractModel):
    """ExportAssetProcessInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetRecentMachineInfoRequest(AbstractModel):
    """ExportAssetRecentMachineInfo request structure.

    """

    def __init__(self):
        r"""
        :param _BeginDate: Start time
        :type BeginDate: str
        :param _EndDate: End time
        :type EndDate: str
        """
        self._BeginDate = None
        self._EndDate = None

    @property
    def BeginDate(self):
        """Start time
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetRecentMachineInfoResponse(AbstractModel):
    """ExportAssetRecentMachineInfo response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class ExportAssetSystemPackageListRequest(AbstractModel):
    """ExportAssetSystemPackageList request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - required: no - package name</li>
<li>StartTime - String - required: no - start time of installation</li>
<li>EndTime - String - required: no - end time of installation</li>
<li>Type- int - required: no - installation package type:
1:rpm
2:dpkg
3:java
4:system</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FistTime|InstallTime: installation time]
        :type By: str
        """
        self._Uuid = None
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - required: no - package name</li>
<li>StartTime - String - required: no - start time of installation</li>
<li>EndTime - String - required: no - end time of installation</li>
<li>Type- int - required: no - installation package type:
1:rpm
2:dpkg
3:java
4:system</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FistTime|InstallTime: installation time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetSystemPackageListResponse(AbstractModel):
    """ExportAssetSystemPackageList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetUserListRequest(AbstractModel):
    """ExportAssetUserList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - whether required: no - account name</li>
<li>Uid - uint64 - whether required: no - Uid</li>
<li>Guid - uint64 - whether required: no - Guid</li>
<li>LoginTimeStart - String - whether required: no - start time, such as 2021-01-11</li>
<li>LoginTimeEnd - String - whether required: no - end time, such as 2021-01-11</li>
<li>LoginType - uint64 - whether required: no - 0 - not allowed to log in; 1 - only key-based log-in allowed; 2 - only password-based log-in allowed; 3 - both key-based and password-based log-in allowed (Linux only)</li>
<li>OsType - String - whether required: no - Windows or Linux</li>
<li>Status - uint64 - whether required: no - account status: 0 - disabled; 1 - enabled</li>
<li>Type - uint64 - whether required: no - account type: 0 - guest user; 1 - standard user; 2 - administrator user (Windows Only)</li>
<li>IsDomain - uint64 - whether required: no - whether a domain account: 0 - no; 1 - yes (Windows only)</li>
<li>IsRoot - uint64 - whether required: no - whether there is root permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSudo - uint64 - whether required: no - whether there is sudo permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSshLogin - uint64 - whether required: no - whether to use ssh log-in: 0 - no; 1 - yes (Linux only)</li>
<li>ShellLoginStatus - uint64 - whether required: no - whether to use shell log-in: 0 - no; 1 - yes (Linux only)</li>
<li>PasswordStatus - uint64 - whether required: no - password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked (Linux only)</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FirstTime|LoginTime|ChangePasswordTime|PasswordDuaTime]
PasswordLockDays
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - whether required: no - account name</li>
<li>Uid - uint64 - whether required: no - Uid</li>
<li>Guid - uint64 - whether required: no - Guid</li>
<li>LoginTimeStart - String - whether required: no - start time, such as 2021-01-11</li>
<li>LoginTimeEnd - String - whether required: no - end time, such as 2021-01-11</li>
<li>LoginType - uint64 - whether required: no - 0 - not allowed to log in; 1 - only key-based log-in allowed; 2 - only password-based log-in allowed; 3 - both key-based and password-based log-in allowed (Linux only)</li>
<li>OsType - String - whether required: no - Windows or Linux</li>
<li>Status - uint64 - whether required: no - account status: 0 - disabled; 1 - enabled</li>
<li>Type - uint64 - whether required: no - account type: 0 - guest user; 1 - standard user; 2 - administrator user (Windows Only)</li>
<li>IsDomain - uint64 - whether required: no - whether a domain account: 0 - no; 1 - yes (Windows only)</li>
<li>IsRoot - uint64 - whether required: no - whether there is root permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSudo - uint64 - whether required: no - whether there is sudo permission: 0 - no; 1 - yes (Linux only)</li>
<li>IsSshLogin - uint64 - whether required: no - whether to use ssh log-in: 0 - no; 1 - yes (Linux only)</li>
<li>ShellLoginStatus - uint64 - whether required: no - whether to use shell log-in: 0 - no; 1 - yes (Linux only)</li>
<li>PasswordStatus - uint64 - whether required: no - password status: 1 - normal; 2 - expiring soon; 3 - expired; 4 - locked (Linux only)</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FirstTime|LoginTime|ChangePasswordTime|PasswordDuaTime]
PasswordLockDays
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetUserListResponse(AbstractModel):
    """ExportAssetUserList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of asynchronous download task. It is used together with ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """ID of asynchronous download task. It is used together with ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetWebAppListRequest(AbstractModel):
    """ExportAssetWebAppList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query the information on the host with the specified QUUID
        :type Quuid: str
        :param _Filters: Filtering criteria
<li>Name - String - required: no - application name</li>
<li>Domain - String - required: no - site domain name</li>
<li>Type - int - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:Jetty
8:IHS
9:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Sorting method: [FirstTime|PluginCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query the information on the host with the specified QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filtering criteria
<li>Name - String - required: no - application name</li>
<li>Domain - String - required: no - site domain name</li>
<li>Type - int - required: no - service type:
0: all
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:Jetty
8:IHS
9:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting method: [FirstTime|PluginCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetWebAppListResponse(AbstractModel):
    """ExportAssetWebAppList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetWebFrameListRequest(AbstractModel):
    """ExportAssetWebFrameList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - Required: No - Framework Name</li>
<li>Lang - String - Required: No - Framework Language: java/python</li>
<li>Type - String - Required: No - Service Type:
0: All
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional Sort: [FirstTime|JarCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - Required: No - Framework Name</li>
<li>Lang - String - Required: No - Framework Language: java/python</li>
<li>Type - String - Required: No - Service Type:
0: All
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional Sort: [FirstTime|JarCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetWebFrameListResponse(AbstractModel):
    """ExportAssetWebFrameList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetWebLocationListRequest(AbstractModel):
    """ExportAssetWebLocationList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Name - String - required: no - domain name</li>
<li>User - String - required: no - running user</li>
<li>Port - uint64 - required: no - site port</li>
<li>Proto - uint64 - required: no - site protocol: 1 - HTTP; 2 - HTTPS</li>
<li>ServiceType - uint64 - required: no - service type:
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FirstTime|PathCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Name - String - required: no - domain name</li>
<li>User - String - required: no - running user</li>
<li>Port - uint64 - required: no - site port</li>
<li>Proto - uint64 - required: no - site protocol: 1 - HTTP; 2 - HTTPS</li>
<li>ServiceType - uint64 - required: no - service type:
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - String - required: no - Windows/Linux</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FirstTime|PathCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetWebLocationListResponse(AbstractModel):
    """ExportAssetWebLocationList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAssetWebServiceInfoListRequest(AbstractModel):
    """ExportAssetWebServiceInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Query information of a specified QUUID host
        :type Quuid: str
        :param _Filters: Filter criteria
<li>User - string - whether required: no - running user</li>
<li>Name - string - whether required: no - Web service name:</li>
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - string - whether required: no - Windows/Linux</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting method: asc for ascending order or desc for descending order
        :type Order: str
        :param _By: Optional sorting method: [FirstTime|ProcessCount]
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Query information of a specified QUUID host
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>User - string - whether required: no - running user</li>
<li>Name - string - whether required: no - Web service name:</li>
1:Tomcat
2:Apache
3:Nginx
4:WebLogic
5:Websphere
6:JBoss
7:WildFly
8:Jetty
9:IHS
10:Tengine</li>
<li>OsType - string - whether required: no - Windows/Linux</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: asc for ascending order or desc for descending order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting method: [FirstTime|ProcessCount]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAssetWebServiceInfoListResponse(AbstractModel):
    """ExportAssetWebServiceInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download of task ID, to be used with the ExportTasks API
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download of task ID, to be used with the ExportTasks API
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportAttackEventsRequest(AbstractModel):
    """ExportAttackEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status</li>
        :type Filters: list of Filters
        :param _By: Sorting value: CreateTime
        :type By: str
        :param _Order: Sorting method: ASC, DESC
        :type Order: str
        """
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Filters(self):
        """Filter parameters
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        """Sorting value: CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        """Sorting method: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportAttackEventsResponse(AbstractModel):
    """ExportAttackEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBaselineEffectHostListRequest(AbstractModel):
    """ExportBaselineEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _BaselineId: Baseline ID
        :type BaselineId: int
        :param _Filters: Filtering criteria
<li>AliasName - String - host alias</li>
        :type Filters: list of Filters
        :param _StrategyId: Policy ID
        :type StrategyId: int
        :param _UuidList: Host UUID array
        :type UuidList: list of str
        :param _BaselineName: Baseline name
        :type BaselineName: str
        """
        self._BaselineId = None
        self._Filters = None
        self._StrategyId = None
        self._UuidList = None
        self._BaselineName = None

    @property
    def BaselineId(self):
        """Baseline ID
        :rtype: int
        """
        return self._BaselineId

    @BaselineId.setter
    def BaselineId(self, BaselineId):
        self._BaselineId = BaselineId

    @property
    def Filters(self):
        """Filtering criteria
<li>AliasName - String - host alias</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def UuidList(self):
        """Host UUID array
        :rtype: list of str
        """
        return self._UuidList

    @UuidList.setter
    def UuidList(self, UuidList):
        self._UuidList = UuidList

    @property
    def BaselineName(self):
        """Baseline name
        :rtype: str
        """
        return self._BaselineName

    @BaselineName.setter
    def BaselineName(self, BaselineName):
        self._BaselineName = BaselineName


    def _deserialize(self, params):
        self._BaselineId = params.get("BaselineId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._StrategyId = params.get("StrategyId")
        self._UuidList = params.get("UuidList")
        self._BaselineName = params.get("BaselineName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBaselineEffectHostListResponse(AbstractModel):
    """ExportBaselineEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBaselineFixListRequest(AbstractModel):
    """ExportBaselineFixList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>ItemName - String - required: no - item name</li>
        :type Filters: list of Filter
        :param _ExportAll: 0: Filtered Result Export; 1: Export All
        :type ExportAll: int
        """
        self._Filters = None
        self._ExportAll = None

    @property
    def Filters(self):
        """<li>ItemName - String - required: no - item name</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExportAll(self):
        """0: Filtered Result Export; 1: Export All
        :rtype: int
        """
        return self._ExportAll

    @ExportAll.setter
    def ExportAll(self, ExportAll):
        self._ExportAll = ExportAll


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExportAll = params.get("ExportAll")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBaselineFixListResponse(AbstractModel):
    """ExportBaselineFixList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ExportBaselineHostDetectListRequest(AbstractModel):
    """ExportBaselineHostDetectList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>HostTag - string - whether required: no - host tag</li> <li>ItemId - int64 - whether required: no - item ID</li> <li>RuleId - int64 - whether required: no - rule ID</li> <li>IsPassed - int - whether required: no - whether passed</li> <li>RiskTier - int - whether required: no - risk level</li>
        :type Filters: list of Filter
        :param _ExportAll: 0: Filtered Result Export; 1: Export All
        :type ExportAll: int
        :param _IsExportDetail: 0: show the export interface; 1: export all result events
        :type IsExportDetail: int
        """
        self._Filters = None
        self._ExportAll = None
        self._IsExportDetail = None

    @property
    def Filters(self):
        """<li>HostTag - string - whether required: no - host tag</li> <li>ItemId - int64 - whether required: no - item ID</li> <li>RuleId - int64 - whether required: no - rule ID</li> <li>IsPassed - int - whether required: no - whether passed</li> <li>RiskTier - int - whether required: no - risk level</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExportAll(self):
        """0: Filtered Result Export; 1: Export All
        :rtype: int
        """
        return self._ExportAll

    @ExportAll.setter
    def ExportAll(self, ExportAll):
        self._ExportAll = ExportAll

    @property
    def IsExportDetail(self):
        """0: show the export interface; 1: export all result events
        :rtype: int
        """
        return self._IsExportDetail

    @IsExportDetail.setter
    def IsExportDetail(self, IsExportDetail):
        self._IsExportDetail = IsExportDetail


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExportAll = params.get("ExportAll")
        self._IsExportDetail = params.get("IsExportDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBaselineHostDetectListResponse(AbstractModel):
    """ExportBaselineHostDetectList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ExportBaselineItemDetectListRequest(AbstractModel):
    """ExportBaselineItemDetectList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>HostId - string - required: no - host ID</li> <li>RuleId - int64 - required: no - rule ID</li> <li>IsPassed - int - required: no - pass or not</li> <li>RiskTier - int - required: no - risk level</li>
        :type Filters: list of Filter
        :param _ExportAll: 0: Filtered Result Export; 1: Export All
        :type ExportAll: int
        :param _IsExportDetail: 0: show the export interface; 1: export all result events
        :type IsExportDetail: int
        """
        self._Filters = None
        self._ExportAll = None
        self._IsExportDetail = None

    @property
    def Filters(self):
        """<li>HostId - string - required: no - host ID</li> <li>RuleId - int64 - required: no - rule ID</li> <li>IsPassed - int - required: no - pass or not</li> <li>RiskTier - int - required: no - risk level</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExportAll(self):
        """0: Filtered Result Export; 1: Export All
        :rtype: int
        """
        return self._ExportAll

    @ExportAll.setter
    def ExportAll(self, ExportAll):
        self._ExportAll = ExportAll

    @property
    def IsExportDetail(self):
        """0: show the export interface; 1: export all result events
        :rtype: int
        """
        return self._IsExportDetail

    @IsExportDetail.setter
    def IsExportDetail(self, IsExportDetail):
        self._IsExportDetail = IsExportDetail


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExportAll = params.get("ExportAll")
        self._IsExportDetail = params.get("IsExportDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBaselineItemDetectListResponse(AbstractModel):
    """ExportBaselineItemDetectList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ExportBaselineListRequest(AbstractModel):
    """ExportBaselineList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria:
<li>StrategyId- Uint64 - baseline policy ID</li>
<li>Status - Uint64 - event status: 0: failed; 1: ignored; 3: passed; 5: detecting</li>
<li>BaselineName - String - baseline name</li>
<li>AliasName - String - server name/server IP address</li>
<li>Uuid - String - host UUID</li>
        :type Filters: list of Filters
        :param _IfDetail: This parameter has been deprecated.
        :type IfDetail: int
        """
        self._Filters = None
        self._IfDetail = None

    @property
    def Filters(self):
        """Filter criteria:
<li>StrategyId- Uint64 - baseline policy ID</li>
<li>Status - Uint64 - event status: 0: failed; 1: ignored; 3: passed; 5: detecting</li>
<li>BaselineName - String - baseline name</li>
<li>AliasName - String - server name/server IP address</li>
<li>Uuid - String - host UUID</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def IfDetail(self):
        """This parameter has been deprecated.
        :rtype: int
        """
        return self._IfDetail

    @IfDetail.setter
    def IfDetail(self, IfDetail):
        self._IfDetail = IfDetail


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._IfDetail = params.get("IfDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBaselineListResponse(AbstractModel):
    """ExportBaselineList response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download URL of exported file (deprecated)
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download URL of exported file (deprecated)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBashEventsNewRequest(AbstractModel):
    """ExportBashEventsNew request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBashEventsNewResponse(AbstractModel):
    """ExportBashEventsNew response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been deprecated.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been deprecated.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBashEventsRequest(AbstractModel):
    """ExportBashEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBashEventsResponse(AbstractModel):
    """ExportBashEvents response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Export file download link
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Export file download link
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBashPoliciesRequest(AbstractModel):
    """ExportBashPolicies request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBashPoliciesResponse(AbstractModel):
    """ExportBashPolicies response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportBruteAttacksRequest(AbstractModel):
    """ExportBruteAttacks request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportBruteAttacksResponse(AbstractModel):
    """ExportBruteAttacks response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been deprecated.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been deprecated.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportFileTamperEventsRequest(AbstractModel):
    """ExportFileTamperEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>Status - String - required: no - processing status: 0: pending; 1: added to allowlist; 2: deleted; 3: ignored</li><li>ModifyTime - string - required: no - last occurrence time</li>
<li>Uuid - String - required: no - host UUID for querying</li>
<li>RuleCategory - string - required: no - rule category: 0: system rule; 1: custom rule</li>
        :type Filters: list of Filters
        :param _Fileds: Fields to be exported
        :type Fileds: list of str
        :param _Fields: Fields to be exported
        :type Fields: str
        """
        self._Filters = None
        self._Fileds = None
        self._Fields = None

    @property
    def Filters(self):
        """Filtering criteria
<li>Status - String - required: no - processing status: 0: pending; 1: added to allowlist; 2: deleted; 3: ignored</li><li>ModifyTime - string - required: no - last occurrence time</li>
<li>Uuid - String - required: no - host UUID for querying</li>
<li>RuleCategory - string - required: no - rule category: 0: system rule; 1: custom rule</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Fileds(self):
        warnings.warn("parameter `Fileds` is deprecated", DeprecationWarning) 

        """Fields to be exported
        :rtype: list of str
        """
        return self._Fileds

    @Fileds.setter
    def Fileds(self, Fileds):
        warnings.warn("parameter `Fileds` is deprecated", DeprecationWarning) 

        self._Fileds = Fileds

    @property
    def Fields(self):
        """Fields to be exported
        :rtype: str
        """
        return self._Fields

    @Fields.setter
    def Fields(self, Fields):
        self._Fields = Fields


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Fileds = params.get("Fileds")
        self._Fields = params.get("Fields")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportFileTamperEventsResponse(AbstractModel):
    """ExportFileTamperEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: The export task ID can be downloaded through the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """The export task ID can be downloaded through the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportFileTamperRulesRequest(AbstractModel):
    """ExportFileTamperRules request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>RuleCategory- string- rule category: 0 = system rule; 1 = user rule</li>
<li>Name - String - Rule name</li>
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter criteria
<li>RuleCategory- string- rule category: 0 = system rule; 1 = user rule</li>
<li>Name - String - Rule name</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportFileTamperRulesResponse(AbstractModel):
    """ExportFileTamperRules response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: The export task ID can be downloaded through the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """The export task ID can be downloaded through the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportIgnoreBaselineRuleRequest(AbstractModel):
    """ExportIgnoreBaselineRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleName: Detection item name
        :type RuleName: str
        """
        self._RuleName = None

    @property
    def RuleName(self):
        """Detection item name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportIgnoreBaselineRuleResponse(AbstractModel):
    """ExportIgnoreBaselineRule response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportIgnoreRuleEffectHostListRequest(AbstractModel):
    """ExportIgnoreRuleEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Detection item ID
        :type RuleId: int
        :param _Filters: Filtering criteria
<li>AliasName - String - host alias</li>
        :type Filters: list of Filters
        """
        self._RuleId = None
        self._Filters = None

    @property
    def RuleId(self):
        """Detection item ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def Filters(self):
        """Filtering criteria
<li>AliasName - String - host alias</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportIgnoreRuleEffectHostListResponse(AbstractModel):
    """ExportIgnoreRuleEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportInfo(AbstractModel):
    """Task list of downloaded logs

    """

    def __init__(self):
        r"""
        :param _ExportId: Task ID of exported logs
        :type ExportId: str
        :param _Query: Query statements of log export
        :type Query: str
        :param _FileName: Filenames of exported logs
        :type FileName: str
        :param _FileSize: Log file size
        :type FileSize: int
        :param _Order: Sorting of log export time
        :type Order: str
        :param _Format: Log export format
        :type Format: str
        :param _Count: Number of logs to be exported
        :type Count: int
        :param _Status: Log download status. Processing: export in progress; Completed: export completed; Failed: export failed; Expired: log export expired (valid for 3 days).
        :type Status: str
        :param _StartTime: Start time of log export, with a millisecond-level UNIX timestamp
        :type StartTime: int
        :param _EndTime: End time of log export, with a millisecond-level UNIX timestamp
        :type EndTime: int
        :param _CosPath: Log export path
        :type CosPath: str
        :param _CreateTime: Creation time of log export
        :type CreateTime: str
        """
        self._ExportId = None
        self._Query = None
        self._FileName = None
        self._FileSize = None
        self._Order = None
        self._Format = None
        self._Count = None
        self._Status = None
        self._StartTime = None
        self._EndTime = None
        self._CosPath = None
        self._CreateTime = None

    @property
    def ExportId(self):
        """Task ID of exported logs
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId

    @property
    def Query(self):
        """Query statements of log export
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query

    @property
    def FileName(self):
        """Filenames of exported logs
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileSize(self):
        """Log file size
        :rtype: int
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def Order(self):
        """Sorting of log export time
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Format(self):
        """Log export format
        :rtype: str
        """
        return self._Format

    @Format.setter
    def Format(self, Format):
        self._Format = Format

    @property
    def Count(self):
        """Number of logs to be exported
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Status(self):
        """Log download status. Processing: export in progress; Completed: export completed; Failed: export failed; Expired: log export expired (valid for 3 days).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StartTime(self):
        """Start time of log export, with a millisecond-level UNIX timestamp
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time of log export, with a millisecond-level UNIX timestamp
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CosPath(self):
        """Log export path
        :rtype: str
        """
        return self._CosPath

    @CosPath.setter
    def CosPath(self, CosPath):
        self._CosPath = CosPath

    @property
    def CreateTime(self):
        """Creation time of log export
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        self._Query = params.get("Query")
        self._FileName = params.get("FileName")
        self._FileSize = params.get("FileSize")
        self._Order = params.get("Order")
        self._Format = params.get("Format")
        self._Count = params.get("Count")
        self._Status = params.get("Status")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CosPath = params.get("CosPath")
        self._CreateTime = params.get("CreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportJavaMemShellPluginsRequest(AbstractModel):
    """ExportJavaMemShellPlugins request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Keywords: IP or host name for fuzzy query; Pid for precise match; MainClass for fuzzy match
        :type Filters: list of Filter
        :param _Where: Export fields
        :type Where: list of str
        """
        self._Filters = None
        self._Where = None

    @property
    def Filters(self):
        """Filtering criteria: Keywords: IP or host name for fuzzy query; Pid for precise match; MainClass for fuzzy match
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Where(self):
        """Export fields
        :rtype: list of str
        """
        return self._Where

    @Where.setter
    def Where(self, Where):
        self._Where = Where


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Where = params.get("Where")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportJavaMemShellPluginsResponse(AbstractModel):
    """ExportJavaMemShellPlugins response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportJavaMemShellsRequest(AbstractModel):
    """ExportJavaMemShells request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: InstanceID and IP

MachineName host name for fuzzy query; Type, status for precise match; CreateBeginTime, CreateEndTime for time period
        :type Filters: list of Filter
        :param _Where: Export fields
        :type Where: list of str
        """
        self._Filters = None
        self._Where = None

    @property
    def Filters(self):
        """Filtering criteria: InstanceID and IP

MachineName host name for fuzzy query; Type, status for precise match; CreateBeginTime, CreateEndTime for time period
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Where(self):
        """Export fields
        :rtype: list of str
        """
        return self._Where

    @Where.setter
    def Where(self, Where):
        self._Where = Where


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Where = params.get("Where")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportJavaMemShellsResponse(AbstractModel):
    """ExportJavaMemShells response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, which is used to obtain the download URL (DownloadUrl) using the <a href="https://intl.cloud.tencent.com/document/product/296/52508?from_cn_redirect=1" target="_blank">asynchronous task export</a> API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, which is used to obtain the download URL (DownloadUrl) using the <a href="https://intl.cloud.tencent.com/document/product/296/52508?from_cn_redirect=1" target="_blank">asynchronous task export</a> API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportLicenseDetailRequest(AbstractModel):
    """ExportLicenseDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Take the intersection when filtering with multiple conditions: LicenseStatus, DeadlineStatus, ResourceId, and Keywords
<li> LicenseType authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription</li>
<li>ResourceId resource ID</li>
        :type Filters: list of Filters
        :param _IsHistory: Whether to export all authorization details
        :type IsHistory: bool
        :param _Tags: Tag filtering; filter by the platform's tag capabilities. In this case, you should pass in the tag key and tag value as an object.
        :type Tags: list of Tags
        :param _ExportMonth: Export month, this parameter is optional only when IsHistory is active.
        :type ExportMonth: str
        """
        self._Filters = None
        self._IsHistory = None
        self._Tags = None
        self._ExportMonth = None

    @property
    def Filters(self):
        """Take the intersection when filtering with multiple conditions: LicenseStatus, DeadlineStatus, ResourceId, and Keywords
<li> LicenseType authorization type. 0: Pro Edition-pay-as-you-go; 1: Pro Edition-monthly subscription; 2: Ultimate Edition-monthly subscription</li>
<li>ResourceId resource ID</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def IsHistory(self):
        """Whether to export all authorization details
        :rtype: bool
        """
        return self._IsHistory

    @IsHistory.setter
    def IsHistory(self, IsHistory):
        self._IsHistory = IsHistory

    @property
    def Tags(self):
        """Tag filtering; filter by the platform's tag capabilities. In this case, you should pass in the tag key and tag value as an object.
        :rtype: list of Tags
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ExportMonth(self):
        """Export month, this parameter is optional only when IsHistory is active.
        :rtype: str
        """
        return self._ExportMonth

    @ExportMonth.setter
    def ExportMonth(self, ExportMonth):
        self._ExportMonth = ExportMonth


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._IsHistory = params.get("IsHistory")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tags()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ExportMonth = params.get("ExportMonth")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportLicenseDetailResponse(AbstractModel):
    """ExportLicenseDetail response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download URL. This field has been deprecated.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download URL. This field has been deprecated.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportMaliciousRequestsRequest(AbstractModel):
    """ExportMaliciousRequests request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportMaliciousRequestsResponse(AbstractModel):
    """ExportMaliciousRequests response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportMalwaresRequest(AbstractModel):
    """ExportMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Maximum number of entries. Default value: 10.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        :param _Filters: Filter parameters
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status</li>
        :type Filters: list of Filters
        :param _By: Sorting value: CreateTime
        :type By: str
        :param _Order: Sorting method: ASC, DESC
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        """Maximum number of entries. Default value: 10.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """Filter parameters
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        """Sorting value: CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        """Sorting method: ASC, DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportMalwaresResponse(AbstractModel):
    """ExportMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportNonlocalLoginPlacesRequest(AbstractModel):
    """ExportNonlocalLoginPlaces request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>Status - int - required: no - filter by status: 1: normal log-in; 2: cross-region log-in</li>
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """<li>Status - int - required: no - filter by status: 1: normal log-in; 2: cross-region log-in</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportNonlocalLoginPlacesResponse(AbstractModel):
    """ExportNonlocalLoginPlaces response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportPrivilegeEventsRequest(AbstractModel):
    """ExportPrivilegeEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportPrivilegeEventsResponse(AbstractModel):
    """ExportPrivilegeEvents response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRansomDefenseBackupListRequest(AbstractModel):
    """ExportRansomDefenseBackupList request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Filters: Filter criteria
<li>Status - Int - required: no - query by ransom status: 0 - not ransomed; 1 - ransomed</li>
<li>CreateTimeBegin - string - required: no - start of creation time</li>
<li>CreateTimeEnd - string - required: no - end of creation time</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting field, supporting CreateTime
        :type By: str
        """
        self._Quuid = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Filters(self):
        """Filter criteria
<li>Status - Int - required: no - query by ransom status: 0 - not ransomed; 1 - ransomed</li>
<li>CreateTimeBegin - string - required: no - start of creation time</li>
<li>CreateTimeEnd - string - required: no - end of creation time</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field, supporting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRansomDefenseBackupListResponse(AbstractModel):
    """ExportRansomDefenseBackupList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRansomDefenseEventsListRequest(AbstractModel):
    """ExportRansomDefenseEventsList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>HostName- string- host name</li>
<li>Status - Uint64: 0 - pending; 1 processed; 2 -trusted</li>
<li>HostIp - String - host IP</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting field, supporting CreateTime
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>HostName- string- host name</li>
<li>Status - Uint64: 0 - pending; 1 processed; 2 -trusted</li>
<li>HostIp - String - host IP</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field, supporting CreateTime
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRansomDefenseEventsListResponse(AbstractModel):
    """ExportRansomDefenseEventsList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRansomDefenseMachineListRequest(AbstractModel):
    """ExportRansomDefenseMachineList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria
<li>Ips - String - required: no - IP address for querying</li>
<li>MachineNames - String - required: no - instance name for querying</li>
<li>Names - String - required: no - instance name for querying</li>
<li>Status - String - required: no - policy status: 0: backup in progress; 1: backup succeeded; 2: backup failed</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting fields, supporting CreateTime and MachineCount
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filtering criteria
<li>Ips - String - required: no - IP address for querying</li>
<li>MachineNames - String - required: no - instance name for querying</li>
<li>Names - String - required: no - instance name for querying</li>
<li>Status - String - required: no - policy status: 0: backup in progress; 1: backup succeeded; 2: backup failed</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, supporting CreateTime and MachineCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRansomDefenseMachineListResponse(AbstractModel):
    """ExportRansomDefenseMachineList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, which is used to obtain the download URL (DownloadUrl) using the asynchronous task export API ExportTasks.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, which is used to obtain the download URL (DownloadUrl) using the asynchronous task export API ExportTasks.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRansomDefenseStrategyListRequest(AbstractModel):
    """ExportRansomDefenseStrategyList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by instance name</li>
<li>Dirs - String - Required: No - Bait Directory </li>
<li>Status - String - Required: No - Policy Status: 0 Disabled, 1 Enabled </li>
<li>BackupType - String - Required: No - Backup Mode: 0-Weekly; 1-Daily </li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting fields, supporting CreateTime and MachineCount
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by instance name</li>
<li>Dirs - String - Required: No - Bait Directory </li>
<li>Status - String - Required: No - Policy Status: 0 Disabled, 1 Enabled </li>
<li>BackupType - String - Required: No - Backup Mode: 0-Weekly; 1-Daily </li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, supporting CreateTime and MachineCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRansomDefenseStrategyListResponse(AbstractModel):
    """ExportRansomDefenseStrategyList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRansomDefenseStrategyMachinesRequest(AbstractModel):
    """ExportRansomDefenseStrategyMachines request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by instance name</li>
<li>Status - String - required: no - policy status: 0 - backup in progress; 1 - backup succeeded; 2 - backup failed</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :type Filters: list of Filters
        :param _Order: Sorting method: ASC / DESC
        :type Order: str
        :param _By: Sorting fields, supporting CreateTime and MachineCount
        :type By: str
        :param _Id: Policy ID
        :type Id: int
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._Id = None

    @property
    def Filters(self):
        """Filter criteria
<li>Ips - String - required: no - query by IP</li>
<li>MachineNames - String - required: no - query by instance name</li>
<li>Names - String - required: no - query by instance name</li>
<li>Status - String - required: no - policy status: 0 - backup in progress; 1 - backup succeeded; 2 - backup failed</li>
<li>LastBackupTimeBegin - String - required: no - start of the last backup time</li>
<li>LastBackupTimeEnd - String - required: no - end of the last backup time</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: ASC / DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting fields, supporting CreateTime and MachineCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Id(self):
        """Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRansomDefenseStrategyMachinesResponse(AbstractModel):
    """ExportRansomDefenseStrategyMachines response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportReverseShellEventsRequest(AbstractModel):
    """ExportReverseShellEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        """
        self._Filters = None

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportReverseShellEventsResponse(AbstractModel):
    """ExportReverseShellEvents response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRiskDnsEventListRequest(AbstractModel):
    """ExportRiskDnsEventList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>IpOrName - String - required: no - filter by host IP or alias</li>
<li>HostId - String - required: no - host ID</li>
<li>AgentId - String - required: no - client ID</li>
<li>PolicyType - String - required: no - policy type: 0 - system policy; 1 - user-defined policy</li>
<li>Domain - String - required: no - domain name (First convert the domain name into the urlencode format, and then encode it using base64.)</li>
<li>HandleStatus - String - required: no - filter by status: 0 - pending; 2 - trusted; 3 - untrusted</li>
<li>BeginTime - String - required: no - start time of last access</li>
<li>EndTime - String - required: no - end time of last access</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: [ASC: ascending order|DESC: descending order]
        :type Order: str
        :param _By: Sorting field: [AccessCount: number of requests|LastTime: last request time]
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>IpOrName - String - required: no - filter by host IP or alias</li>
<li>HostId - String - required: no - host ID</li>
<li>AgentId - String - required: no - client ID</li>
<li>PolicyType - String - required: no - policy type: 0 - system policy; 1 - user-defined policy</li>
<li>Domain - String - required: no - domain name (First convert the domain name into the urlencode format, and then encode it using base64.)</li>
<li>HandleStatus - String - required: no - filter by status: 0 - pending; 2 - trusted; 3 - untrusted</li>
<li>BeginTime - String - required: no - start time of last access</li>
<li>EndTime - String - required: no - end time of last access</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: [ASC: ascending order|DESC: descending order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Sorting field: [AccessCount: number of requests|LastTime: last request time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRiskDnsEventListResponse(AbstractModel):
    """ExportRiskDnsEventList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRiskDnsPolicyListRequest(AbstractModel):
    """ExportRiskDnsPolicyList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: <li>PolicyType - int - whether required: no - policy type</li>
<li>PolicyName - string - whether required: no - policy name</li>
<li>Domain - string - Required: No - Domain (first urlencode the domain, then base64)</li>
<li>PolicyAction- int - whether required: no - policy action</li>
<li>IsEnabled - int - whether required: no - whether effective</li>
        :type Filters: list of Filter
        :param _Order: Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :type Order: str
        :param _By: Optional sorting column: [PolicyName|HostType]
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """<li>PolicyType - int - whether required: no - policy type</li>
<li>PolicyName - string - whether required: no - policy name</li>
<li>Domain - string - Required: No - Domain (first urlencode the domain, then base64)</li>
<li>PolicyAction- int - whether required: no - policy action</li>
<li>IsEnabled - int - whether required: no - whether effective</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting Method: [ASC: Ascending Order, DESC: Descending Order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """Optional sorting column: [PolicyName|HostType]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRiskDnsPolicyListResponse(AbstractModel):
    """ExportRiskDnsPolicyList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Asynchronous download task ID. It is used together with the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Asynchronous download task ID. It is used together with the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportRiskProcessEventsRequest(AbstractModel):
    """ExportRiskProcessEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>HostId - String - Required: No - Host ID</li>
<li>IpOrName - String - whether required: no - host IP or host name</li>
<li>VirusName - String - whether required: no - virus name</li>
<li>ProcessId - String - whether required: no - process ID</li>
<li>ProcessPath - String - whether required: no - process path</li>
<li>BeginTime - String - whether required: no - process startup time - begin</li>
<li>BeginTime - String - whether required: no - process startup time - end</li>
<li>Status - String - whether required: no - filter by status: 0 - pending; 1 - under detection; 2 - detected; 3 - exited; 4 - trusted</li>
        :type Filters: list of Filter
        :param _Order: Sorting method: [ASC: ascending order|DESC: descending order]
        :type Order: str
        :param _By: [StartTime: Process start time | DetectTime: Last detection time]
        :type By: str
        """
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        """Filter criteria
<li>HostId - String - Required: No - Host ID</li>
<li>IpOrName - String - whether required: no - host IP or host name</li>
<li>VirusName - String - whether required: no - virus name</li>
<li>ProcessId - String - whether required: no - process ID</li>
<li>ProcessPath - String - whether required: no - process path</li>
<li>BeginTime - String - whether required: no - process startup time - begin</li>
<li>BeginTime - String - whether required: no - process startup time - end</li>
<li>Status - String - whether required: no - filter by status: 0 - pending; 1 - under detection; 2 - detected; 3 - exited; 4 - trusted</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """Sorting method: [ASC: ascending order|DESC: descending order]
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        """[StartTime: Process start time | DetectTime: Last detection time]
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportRiskProcessEventsResponse(AbstractModel):
    """ExportRiskProcessEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, required for obtaining the DownloadURL at API Asynchronous Export Task ExportTasks
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportScanTaskDetailsRequest(AbstractModel):
    """ExportScanTaskDetails request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID for this detection (different from the ID of the task for exporting the detection Excel file in the input parameters)
        :type TaskId: int
        :param _ModuleType: Module type. Malware: Trojan; Vul: vulnerability; Baseline: baseline.
        :type ModuleType: str
        :param _Filters: Filter parameter: ipOrAlias (server name/IP address)
        :type Filters: list of Filters
        """
        self._TaskId = None
        self._ModuleType = None
        self._Filters = None

    @property
    def TaskId(self):
        """Task ID for this detection (different from the ID of the task for exporting the detection Excel file in the input parameters)
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ModuleType(self):
        """Module type. Malware: Trojan; Vul: vulnerability; Baseline: baseline.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType

    @property
    def Filters(self):
        """Filter parameter: ipOrAlias (server name/IP address)
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ModuleType = params.get("ModuleType")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportScanTaskDetailsResponse(AbstractModel):
    """ExportScanTaskDetails response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID, which is used to obtain the download URL (DownloadUrl) by using the asynchronous task export API ExportTasks. (This ID differs from the detection task ID in the input parameters.)
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID, which is used to obtain the download URL (DownloadUrl) by using the asynchronous task export API ExportTasks. (This ID differs from the detection task ID in the input parameters.)
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportSecurityTrendsRequest(AbstractModel):
    """ExportSecurityTrends request structure.

    """

    def __init__(self):
        r"""
        :param _BeginDate: Start time
        :type BeginDate: str
        :param _EndDate: End time
        :type EndDate: str
        """
        self._BeginDate = None
        self._EndDate = None

    @property
    def BeginDate(self):
        """Start time
        :rtype: str
        """
        return self._BeginDate

    @BeginDate.setter
    def BeginDate(self, BeginDate):
        self._BeginDate = BeginDate

    @property
    def EndDate(self):
        """End time
        :rtype: str
        """
        return self._EndDate

    @EndDate.setter
    def EndDate(self, EndDate):
        self._EndDate = EndDate


    def _deserialize(self, params):
        self._BeginDate = params.get("BeginDate")
        self._EndDate = params.get("EndDate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportSecurityTrendsResponse(AbstractModel):
    """ExportSecurityTrends response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Export file download link.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Export file download link.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class ExportTasksRequest(AbstractModel):
    """ExportTasks request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportTasksResponse(AbstractModel):
    """ExportTasks response structure.

    """

    def __init__(self):
        r"""
        :param _Status: PENDING: download URL being generated; FINISHED: download URL generated; ERROR: network error or other errors.
        :type Status: str
        :param _DownloadUrl: Download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def Status(self):
        """PENDING: download URL being generated; FINISHED: download URL generated; ERROR: network error or other errors.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def DownloadUrl(self):
        """Download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class ExportVulDefenceEventRequest(AbstractModel):
    """ExportVulDefenceEvent request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Keywords for IP or host name; VulKeywords vulnerability name or CveId for fuzzy query; Quuid, VulId, EventType, Status for precise match; CreateBeginTime, CreateEndTime for time period query
        :type Filters: list of Filter
        :param _Where: Export fields and export all by default.
        :type Where: list of str
        """
        self._Filters = None
        self._Where = None

    @property
    def Filters(self):
        """Filtering criteria: Keywords for IP or host name; VulKeywords vulnerability name or CveId for fuzzy query; Quuid, VulId, EventType, Status for precise match; CreateBeginTime, CreateEndTime for time period query
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Where(self):
        """Export fields and export all by default.
        :rtype: list of str
        """
        return self._Where

    @Where.setter
    def Where(self, Where):
        self._Where = Where


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Where = params.get("Where")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulDefenceEventResponse(AbstractModel):
    """ExportVulDefenceEvent response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Export file ID, which can be downloaded using the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Export file ID, which can be downloaded using the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulDefenceListRequest(AbstractModel):
    """ExportVulDefenceList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filtering criteria: Keywords: vulnerability name or CVE ID for fuzzy matching, and level for precise matching
        :type Filters: list of Filter
        :param _Where: Fields to be exported. All fields are to be exported by default.
        :type Where: list of str
        """
        self._Filters = None
        self._Where = None

    @property
    def Filters(self):
        """Filtering criteria: Keywords: vulnerability name or CVE ID for fuzzy matching, and level for precise matching
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Where(self):
        """Fields to be exported. All fields are to be exported by default.
        :rtype: list of str
        """
        return self._Where

    @Where.setter
    def Where(self, Where):
        self._Where = Where


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Where = params.get("Where")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulDefenceListResponse(AbstractModel):
    """ExportVulDefenceList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Export file ID, which is downloadable via the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Export file ID, which is downloadable via the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulDefencePluginEventRequest(AbstractModel):
    """ExportVulDefencePluginEvent request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Keywords: IP or host name for fuzzy match, Quuid, Exception, Status for precise match
        :type Filters: list of Filter
        :param _Where: Export fields and export all by default.
        :type Where: list of str
        """
        self._Filters = None
        self._Where = None

    @property
    def Filters(self):
        """Keywords: IP or host name for fuzzy match, Quuid, Exception, Status for precise match
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Where(self):
        """Export fields and export all by default.
        :rtype: list of str
        """
        return self._Where

    @Where.setter
    def Where(self, Where):
        self._Where = Where


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Where = params.get("Where")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulDefencePluginEventResponse(AbstractModel):
    """ExportVulDefencePluginEvent response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Export file ID, which is downloadable via the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Export file ID, which is downloadable via the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulDetectionExcelRequest(AbstractModel):
    """ExportVulDetectionExcel request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the vulnerability detection task (different from the ID of the task for exporting the vulnerability detection Excel file in the response parameters)
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """ID of the vulnerability detection task (different from the ID of the task for exporting the vulnerability detection Excel file in the response parameters)
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulDetectionExcelResponse(AbstractModel):
    """ExportVulDetectionExcel response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been discarded.
        :type DownloadUrl: str
        :param _TaskId: Task ID, which is used to obtain the download URL (DownloadUrl) by using the asynchronous task export API ExportTasks. (This ID differs from the vulnerability detection task ID in the input parameters.)
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been discarded.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Task ID, which is used to obtain the download URL (DownloadUrl) by using the asynchronous task export API ExportTasks. (This ID differs from the vulnerability detection task ID in the input parameters.)
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulDetectionReportRequest(AbstractModel):
    """ExportVulDetectionReport request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Vulnerability scan task ID (different from the task ID of the export detection report task ID in the output parameter)
        :type TaskId: int
        :param _Filters: Filter parameters
        :type Filters: list of Filters
        :param _Limit: Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0.
        :type Offset: int
        """
        self._TaskId = None
        self._Filters = None
        self._Limit = None
        self._Offset = None

    @property
    def TaskId(self):
        """Vulnerability scan task ID (different from the task ID of the export detection report task ID in the output parameter)
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Filters(self):
        """Filter parameters
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """Number of items to be returned. It is 10 by default, and the maximum value is 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """Offset. Default value: 0.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulDetectionReportResponse(AbstractModel):
    """ExportVulDetectionReport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download URL for exported file
        :type DownloadUrl: str
        :param _TaskId: ID of the task for exporting detection report (different from the vulnerability scan task ID in the input parameters)
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download URL for exported file
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """ID of the task for exporting detection report (different from the vulnerability scan task ID in the input parameters)
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulEffectHostListRequest(AbstractModel):
    """ExportVulEffectHostList request structure.

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Filters: Filter criteria
<li>AliasName - String - filter by host name</li>
        :type Filters: list of Filter
        """
        self._VulId = None
        self._Filters = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Filters(self):
        """Filter criteria
<li>AliasName - String - filter by host name</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulEffectHostListResponse(AbstractModel):
    """ExportVulEffectHostList response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: This parameter has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _TaskId: Export task ID, which can be downloaded by using the API ExportTasks.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """This parameter has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """Export task ID, which can be downloaded by using the API ExportTasks.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulInfoRequest(AbstractModel):
    """ExportVulInfo request structure.

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        """
        self._VulId = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulInfoResponse(AbstractModel):
    """ExportVulInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Export task ID, which is downloadable via the ExportTasks API.
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Export task ID, which is downloadable via the ExportTasks API.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ExportVulListRequest(AbstractModel):
    """ExportVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter criteria
<li>VulCategory - int - required: no - filter by vulnerability category: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities</li>
<li>IfEmergency - String - required: no - whether an emergency vulnerability; if you need to query an emergency vulnerability, please pass yes to this parameter.</li>
<li>Status - String - required: yes - filter by vulnerability status: 0 - pending; 1 - ignored; 3 - fixed; 5 - detecting. The console only handles four statuses: 0, 1, 3, and 5.</li>
<li>Level - String - required: no - filter by vulnerability level: 1 - low; 2 - medium; 3 - high; 4 - prompt</li>
<li>VulName - String - required: no - search by vulnerability name</li>
        :type Filters: list of Filter
        :param _IfDetail: Whether to export details: 1 - yes; 0 - no
        :type IfDetail: int
        """
        self._Filters = None
        self._IfDetail = None

    @property
    def Filters(self):
        """Filter criteria
<li>VulCategory - int - required: no - filter by vulnerability category: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities</li>
<li>IfEmergency - String - required: no - whether an emergency vulnerability; if you need to query an emergency vulnerability, please pass yes to this parameter.</li>
<li>Status - String - required: yes - filter by vulnerability status: 0 - pending; 1 - ignored; 3 - fixed; 5 - detecting. The console only handles four statuses: 0, 1, 3, and 5.</li>
<li>Level - String - required: no - filter by vulnerability level: 1 - low; 2 - medium; 3 - high; 4 - prompt</li>
<li>VulName - String - required: no - search by vulnerability name</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def IfDetail(self):
        """Whether to export details: 1 - yes; 0 - no
        :rtype: int
        """
        return self._IfDetail

    @IfDetail.setter
    def IfDetail(self, IfDetail):
        self._IfDetail = IfDetail


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._IfDetail = params.get("IfDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVulListResponse(AbstractModel):
    """ExportVulList response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Download URL of the exported file (deprecated)
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _TaskId: ID of the exported file, which can be downloaded using the ExportTasks API.
        :type TaskId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        """Download URL of the exported file (deprecated)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def TaskId(self):
        """ID of the exported file, which can be downloaded using the ExportTasks API.
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class FieldValueRatioInfo(AbstractModel):
    """Quick analysis of statistics data

    """

    def __init__(self):
        r"""
        :param _Count: Number
        :type Count: int
        :param _Ratio: Ratio
        :type Ratio: float
        :param _Value: Value
        :type Value: str
        """
        self._Count = None
        self._Ratio = None
        self._Value = None

    @property
    def Count(self):
        """Number
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Ratio(self):
        """Ratio
        :rtype: float
        """
        return self._Ratio

    @Ratio.setter
    def Ratio(self, Ratio):
        self._Ratio = Ratio

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._Ratio = params.get("Ratio")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileTamperEvent(AbstractModel):
    """Core file monitoring event

    """

    def __init__(self):
        r"""
        :param _HostName: Machine Name
        :type HostName: str
        :param _HostIp: Machine IP
        :type HostIp: str
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _ModifyTime: Last occurrence time
        :type ModifyTime: str
        :param _Id: Event ID
        :type Id: int
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: cvm id
        :type Quuid: str
        :param _Type: Event Type/Action. 0 - Alarm
        :type Type: int
        :param _ProcessExe: Process path
        :type ProcessExe: str
        :param _ProcessArgv: Process parameter
        :type ProcessArgv: str
        :param _Target: Target file path
        :type Target: str
        :param _Status: Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :type Status: int
        :param _EventCount: Event Occurrences
        :type EventCount: int
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _Pstree: Event Details: JSON Format
        :type Pstree: str
        :param _RuleCategory: Rule Type. 0 - System Rule; 1 - Custom Rule
        :type RuleCategory: int
        :param _MachineStatus: Host Online Information: ONLINE, OFFLINE
        :type MachineStatus: str
        :param _Description: Severity description
        :type Description: str
        :param _Suggestion: Remediation Suggestions
        :type Suggestion: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _ExePermission: Process permission
        :type ExePermission: str
        :param _UserName: Username
        :type UserName: str
        :param _UserGroup: User group
        :type UserGroup: str
        :param _ExeMd5: Process name
        :type ExeMd5: str
        :param _ExeSize: Process File Size
        :type ExeSize: int
        :param _ExeTime: Process Execution Duration
        :type ExeTime: int
        :param _TargetSize: Target file size
        :type TargetSize: int
        :param _TargetPermission: Target File Permissions
        :type TargetPermission: str
        :param _TargetModifyTime: Target File Update Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type TargetModifyTime: str
        :param _TargetCreatTime: Target File Creation Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type TargetCreatTime: str
        :param _ExePid: Process PID
        :type ExePid: int
        :param _TargetName: File name
        :type TargetName: str
        :param _Reference: Reference link
        :type Reference: str
        :param _Level: Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :type Level: int
        :param _ExeName: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExeName: str
        :param _MachineExtraInfo:  Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _FileAction: File threat behavior
<li>read: read file</li>
<li>write: modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileAction: str
        """
        self._HostName = None
        self._HostIp = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._Type = None
        self._ProcessExe = None
        self._ProcessArgv = None
        self._Target = None
        self._Status = None
        self._EventCount = None
        self._RuleId = None
        self._RuleName = None
        self._Pstree = None
        self._RuleCategory = None
        self._MachineStatus = None
        self._Description = None
        self._Suggestion = None
        self._PrivateIp = None
        self._ExePermission = None
        self._UserName = None
        self._UserGroup = None
        self._ExeMd5 = None
        self._ExeSize = None
        self._ExeTime = None
        self._TargetSize = None
        self._TargetPermission = None
        self._TargetModifyTime = None
        self._TargetCreatTime = None
        self._ExePid = None
        self._TargetName = None
        self._Reference = None
        self._Level = None
        self._ExeName = None
        self._MachineExtraInfo = None
        self._FileAction = None

    @property
    def HostName(self):
        """Machine Name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Machine IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last occurrence time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """cvm id
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Type(self):
        """Event Type/Action. 0 - Alarm
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ProcessExe(self):
        """Process path
        :rtype: str
        """
        return self._ProcessExe

    @ProcessExe.setter
    def ProcessExe(self, ProcessExe):
        self._ProcessExe = ProcessExe

    @property
    def ProcessArgv(self):
        """Process parameter
        :rtype: str
        """
        return self._ProcessArgv

    @ProcessArgv.setter
    def ProcessArgv(self, ProcessArgv):
        self._ProcessArgv = ProcessArgv

    @property
    def Target(self):
        """Target file path
        :rtype: str
        """
        return self._Target

    @Target.setter
    def Target(self, Target):
        self._Target = Target

    @property
    def Status(self):
        """Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventCount(self):
        """Event Occurrences
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def Pstree(self):
        """Event Details: JSON Format
        :rtype: str
        """
        return self._Pstree

    @Pstree.setter
    def Pstree(self, Pstree):
        self._Pstree = Pstree

    @property
    def RuleCategory(self):
        """Rule Type. 0 - System Rule; 1 - Custom Rule
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def MachineStatus(self):
        """Host Online Information: ONLINE, OFFLINE
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def Description(self):
        """Severity description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Suggestion(self):
        """Remediation Suggestions
        :rtype: str
        """
        return self._Suggestion

    @Suggestion.setter
    def Suggestion(self, Suggestion):
        self._Suggestion = Suggestion

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def ExePermission(self):
        """Process permission
        :rtype: str
        """
        return self._ExePermission

    @ExePermission.setter
    def ExePermission(self, ExePermission):
        self._ExePermission = ExePermission

    @property
    def UserName(self):
        """Username
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UserGroup(self):
        """User group
        :rtype: str
        """
        return self._UserGroup

    @UserGroup.setter
    def UserGroup(self, UserGroup):
        self._UserGroup = UserGroup

    @property
    def ExeMd5(self):
        """Process name
        :rtype: str
        """
        return self._ExeMd5

    @ExeMd5.setter
    def ExeMd5(self, ExeMd5):
        self._ExeMd5 = ExeMd5

    @property
    def ExeSize(self):
        """Process File Size
        :rtype: int
        """
        return self._ExeSize

    @ExeSize.setter
    def ExeSize(self, ExeSize):
        self._ExeSize = ExeSize

    @property
    def ExeTime(self):
        """Process Execution Duration
        :rtype: int
        """
        return self._ExeTime

    @ExeTime.setter
    def ExeTime(self, ExeTime):
        self._ExeTime = ExeTime

    @property
    def TargetSize(self):
        """Target file size
        :rtype: int
        """
        return self._TargetSize

    @TargetSize.setter
    def TargetSize(self, TargetSize):
        self._TargetSize = TargetSize

    @property
    def TargetPermission(self):
        """Target File Permissions
        :rtype: str
        """
        return self._TargetPermission

    @TargetPermission.setter
    def TargetPermission(self, TargetPermission):
        self._TargetPermission = TargetPermission

    @property
    def TargetModifyTime(self):
        """Target File Update Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TargetModifyTime

    @TargetModifyTime.setter
    def TargetModifyTime(self, TargetModifyTime):
        self._TargetModifyTime = TargetModifyTime

    @property
    def TargetCreatTime(self):
        """Target File Creation Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TargetCreatTime

    @TargetCreatTime.setter
    def TargetCreatTime(self, TargetCreatTime):
        self._TargetCreatTime = TargetCreatTime

    @property
    def ExePid(self):
        """Process PID
        :rtype: int
        """
        return self._ExePid

    @ExePid.setter
    def ExePid(self, ExePid):
        self._ExePid = ExePid

    @property
    def TargetName(self):
        """File name
        :rtype: str
        """
        return self._TargetName

    @TargetName.setter
    def TargetName(self, TargetName):
        self._TargetName = TargetName

    @property
    def Reference(self):
        """Reference link
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def Level(self):
        """Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def ExeName(self):
        """Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ExeName

    @ExeName.setter
    def ExeName(self, ExeName):
        self._ExeName = ExeName

    @property
    def MachineExtraInfo(self):
        """ Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def FileAction(self):
        """File threat behavior
<li>read: read file</li>
<li>write: modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileAction

    @FileAction.setter
    def FileAction(self, FileAction):
        self._FileAction = FileAction


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Type = params.get("Type")
        self._ProcessExe = params.get("ProcessExe")
        self._ProcessArgv = params.get("ProcessArgv")
        self._Target = params.get("Target")
        self._Status = params.get("Status")
        self._EventCount = params.get("EventCount")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._Pstree = params.get("Pstree")
        self._RuleCategory = params.get("RuleCategory")
        self._MachineStatus = params.get("MachineStatus")
        self._Description = params.get("Description")
        self._Suggestion = params.get("Suggestion")
        self._PrivateIp = params.get("PrivateIp")
        self._ExePermission = params.get("ExePermission")
        self._UserName = params.get("UserName")
        self._UserGroup = params.get("UserGroup")
        self._ExeMd5 = params.get("ExeMd5")
        self._ExeSize = params.get("ExeSize")
        self._ExeTime = params.get("ExeTime")
        self._TargetSize = params.get("TargetSize")
        self._TargetPermission = params.get("TargetPermission")
        self._TargetModifyTime = params.get("TargetModifyTime")
        self._TargetCreatTime = params.get("TargetCreatTime")
        self._ExePid = params.get("ExePid")
        self._TargetName = params.get("TargetName")
        self._Reference = params.get("Reference")
        self._Level = params.get("Level")
        self._ExeName = params.get("ExeName")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._FileAction = params.get("FileAction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileTamperRule(AbstractModel):
    """Core file monitoring rules

    """

    def __init__(self):
        r"""
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _Target: Accessed file path
        :type Target: str
        :param _Action: Recommended action: skip: skip; alarm: alert
        :type Action: str
        :param _FileAction: Monitoring behavior
<li>read: read file</li>
<li>write: modify file</li>
<li>read-write: read and modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileAction: str
        """
        self._ProcessPath = None
        self._Target = None
        self._Action = None
        self._FileAction = None

    @property
    def ProcessPath(self):
        """Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def Target(self):
        """Accessed file path
        :rtype: str
        """
        return self._Target

    @Target.setter
    def Target(self, Target):
        self._Target = Target

    @property
    def Action(self):
        """Recommended action: skip: skip; alarm: alert
        :rtype: str
        """
        return self._Action

    @Action.setter
    def Action(self, Action):
        self._Action = Action

    @property
    def FileAction(self):
        """Monitoring behavior
<li>read: read file</li>
<li>write: modify file</li>
<li>read-write: read and modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileAction

    @FileAction.setter
    def FileAction(self, FileAction):
        self._FileAction = FileAction


    def _deserialize(self, params):
        self._ProcessPath = params.get("ProcessPath")
        self._Target = params.get("Target")
        self._Action = params.get("Action")
        self._FileAction = params.get("FileAction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileTamperRuleCount(AbstractModel):
    """Information on Number of Host-associated Core File Rules

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Count: Number of Association Rules
        :type Count: int
        :param _Name: Name of the Association Rule (Show Only One of Them)
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        """
        self._Uuid = None
        self._Count = None
        self._Name = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Count(self):
        """Number of Association Rules
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Name(self):
        """Name of the Association Rule (Show Only One of Them)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Count = params.get("Count")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileTamperRuleDetail(AbstractModel):
    """Core File Monitoring Rule Details

    """

    def __init__(self):
        r"""
        :param _Name: Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _ModifyTime: Update time
        :type ModifyTime: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _Status: Status. 0: Enabled; 1: Disabled
        :type Status: int
        :param _Rule: Rule
        :type Rule: list of FileTamperRule
        :param _Uuids: Effective Host UUID. Empty means all hosts, and returned number of entries can be controlled through parameters.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuids: list of str
        :param _Id: Rule ID
        :type Id: int
        :param _IsGlobal: Global Rule or Not (No by Default). 0: No; 1: Yes
        :type IsGlobal: int
        :param _Level: Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :type Level: int
        :param _UuidTotalCount: Total Number of Effective Hosts
        :type UuidTotalCount: int
        :param _AddWhiteType: Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all items that meet the conditions to the allowlist</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :type AddWhiteType: str
        """
        self._Name = None
        self._ModifyTime = None
        self._CreateTime = None
        self._Status = None
        self._Rule = None
        self._Uuids = None
        self._Id = None
        self._IsGlobal = None
        self._Level = None
        self._UuidTotalCount = None
        self._AddWhiteType = None

    @property
    def Name(self):
        """Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ModifyTime(self):
        """Update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Status(self):
        """Status. 0: Enabled; 1: Disabled
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Rule(self):
        """Rule
        :rtype: list of FileTamperRule
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Uuids(self):
        """Effective Host UUID. Empty means all hosts, and returned number of entries can be controlled through parameters.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def IsGlobal(self):
        """Global Rule or Not (No by Default). 0: No; 1: Yes
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Level(self):
        """Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def UuidTotalCount(self):
        """Total Number of Effective Hosts
        :rtype: int
        """
        return self._UuidTotalCount

    @UuidTotalCount.setter
    def UuidTotalCount(self, UuidTotalCount):
        self._UuidTotalCount = UuidTotalCount

    @property
    def AddWhiteType(self):
        """Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all items that meet the conditions to the allowlist</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AddWhiteType

    @AddWhiteType.setter
    def AddWhiteType(self, AddWhiteType):
        self._AddWhiteType = AddWhiteType


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ModifyTime = params.get("ModifyTime")
        self._CreateTime = params.get("CreateTime")
        self._Status = params.get("Status")
        if params.get("Rule") is not None:
            self._Rule = []
            for item in params.get("Rule"):
                obj = FileTamperRule()
                obj._deserialize(item)
                self._Rule.append(obj)
        self._Uuids = params.get("Uuids")
        self._Id = params.get("Id")
        self._IsGlobal = params.get("IsGlobal")
        self._Level = params.get("Level")
        self._UuidTotalCount = params.get("UuidTotalCount")
        self._AddWhiteType = params.get("AddWhiteType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileTamperRuleInfo(AbstractModel):
    """List of core file monitoring rules

    """

    def __init__(self):
        r"""
        :param _Name: Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _RuleCategory: Rule Type. 0: System Rule; 1: User Rule
        :type RuleCategory: int
        :param _HostCount: Number of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _ModifyTime: Update time
        :type ModifyTime: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _Status: Status. 0: Enabled; 1: Disabled
        :type Status: int
        :param _Id: Rule ID, which is set to 0 for system rules
        :type Id: int
        :param _IsGlobal: Whether global 0: no; 1: yes
        :type IsGlobal: int
        :param _Level: Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :type Level: int
        :param _WriteRuleCount: Number of write entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type WriteRuleCount: int
        :param _ReadRuleCount: Number of read entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReadRuleCount: int
        :param _ReadWriteRuleCount: Number of read and write entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReadWriteRuleCount: int
        :param _FileAction: Monitoring behavior
<li>read: read file</li>
<li>write: modify file</li>
<li>read-write: read and modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileAction: str
        :param _AddWhiteType: Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all items that meet the conditions to the allowlist</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :type AddWhiteType: str
        """
        self._Name = None
        self._RuleCategory = None
        self._HostCount = None
        self._ModifyTime = None
        self._CreateTime = None
        self._Status = None
        self._Id = None
        self._IsGlobal = None
        self._Level = None
        self._WriteRuleCount = None
        self._ReadRuleCount = None
        self._ReadWriteRuleCount = None
        self._FileAction = None
        self._AddWhiteType = None

    @property
    def Name(self):
        """Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RuleCategory(self):
        """Rule Type. 0: System Rule; 1: User Rule
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def HostCount(self):
        """Number of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ModifyTime(self):
        """Update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Status(self):
        """Status. 0: Enabled; 1: Disabled
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        """Rule ID, which is set to 0 for system rules
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def IsGlobal(self):
        """Whether global 0: no; 1: yes
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Level(self):
        """Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def WriteRuleCount(self):
        """Number of write entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._WriteRuleCount

    @WriteRuleCount.setter
    def WriteRuleCount(self, WriteRuleCount):
        self._WriteRuleCount = WriteRuleCount

    @property
    def ReadRuleCount(self):
        """Number of read entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ReadRuleCount

    @ReadRuleCount.setter
    def ReadRuleCount(self, ReadRuleCount):
        self._ReadRuleCount = ReadRuleCount

    @property
    def ReadWriteRuleCount(self):
        """Number of read and write entries for the sub-rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ReadWriteRuleCount

    @ReadWriteRuleCount.setter
    def ReadWriteRuleCount(self, ReadWriteRuleCount):
        self._ReadWriteRuleCount = ReadWriteRuleCount

    @property
    def FileAction(self):
        """Monitoring behavior
<li>read: read file</li>
<li>write: modify file</li>
<li>read-write: read and modify file</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileAction

    @FileAction.setter
    def FileAction(self, FileAction):
        self._FileAction = FileAction

    @property
    def AddWhiteType(self):
        """Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all items that meet the conditions to the allowlist</li>
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AddWhiteType

    @AddWhiteType.setter
    def AddWhiteType(self, AddWhiteType):
        self._AddWhiteType = AddWhiteType


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._RuleCategory = params.get("RuleCategory")
        self._HostCount = params.get("HostCount")
        self._ModifyTime = params.get("ModifyTime")
        self._CreateTime = params.get("CreateTime")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._IsGlobal = params.get("IsGlobal")
        self._Level = params.get("Level")
        self._WriteRuleCount = params.get("WriteRuleCount")
        self._ReadRuleCount = params.get("ReadRuleCount")
        self._ReadWriteRuleCount = params.get("ReadWriteRuleCount")
        self._FileAction = params.get("FileAction")
        self._AddWhiteType = params.get("AddWhiteType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Filter(AbstractModel):
    """Description key-value pair filter, which is used for conditional filtering queries. For example, filter by ID, name, and status.

    If there are multiple Filters, the logical relationship between them is AND.
    If multiple values exist in one filter, the logical relationship between these values is OR.

    * A maximum of 5 filters are allowed.
    * If a single filter has multiple values, the number of values cannot exceed 5.

    """

    def __init__(self):
        r"""
        :param _Name: Name of filter key
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Fuzzy search
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        """Name of filter key
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        """Fuzzy search
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Filters(AbstractModel):
    """Description of key-value pair filter, which is used for conditional filtering queries. For example, filter by ID, name, and status.

    If there are multiple Filters, the logical relationship between them is AND.
    If there are multiple Values in the same Filter, the logical relationship between the Values under the same Filter is OR.

    """

    def __init__(self):
        r"""
        :param _Name: Name of filter key
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Whether to use fuzzy match. It will be handled by the front-end and can be ignored.
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        """Name of filter key
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        """Whether to use fuzzy match. It will be handled by the front-end and can be ignored.
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FullTextInfo(AbstractModel):
    """Configuration for full-text index

    """

    def __init__(self):
        r"""
        :param _CaseSensitive: Whether case-sensitive
        :type CaseSensitive: bool
        :param _Tokenizer: Delimiter
        :type Tokenizer: str
        :param _ContainZH: Whether Chinese characters are contained.
        :type ContainZH: bool
        """
        self._CaseSensitive = None
        self._Tokenizer = None
        self._ContainZH = None

    @property
    def CaseSensitive(self):
        """Whether case-sensitive
        :rtype: bool
        """
        return self._CaseSensitive

    @CaseSensitive.setter
    def CaseSensitive(self, CaseSensitive):
        self._CaseSensitive = CaseSensitive

    @property
    def Tokenizer(self):
        """Delimiter
        :rtype: str
        """
        return self._Tokenizer

    @Tokenizer.setter
    def Tokenizer(self, Tokenizer):
        self._Tokenizer = Tokenizer

    @property
    def ContainZH(self):
        """Whether Chinese characters are contained.
        :rtype: bool
        """
        return self._ContainZH

    @ContainZH.setter
    def ContainZH(self, ContainZH):
        self._ContainZH = ContainZH


    def _deserialize(self, params):
        self._CaseSensitive = params.get("CaseSensitive")
        self._Tokenizer = params.get("Tokenizer")
        self._ContainZH = params.get("ContainZH")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetLocalStorageItemRequest(AbstractModel):
    """GetLocalStorageItem request structure.

    """

    def __init__(self):
        r"""
        :param _Key: Key
        :type Key: str
        """
        self._Key = None

    @property
    def Key(self):
        """Key
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key


    def _deserialize(self, params):
        self._Key = params.get("Key")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetLocalStorageItemResponse(AbstractModel):
    """GetLocalStorageItem response structure.

    """

    def __init__(self):
        r"""
        :param _Value: Value
        :type Value: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Value = None
        self._RequestId = None

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Value = params.get("Value")
        self._RequestId = params.get("RequestId")


class HistoryAccount(AbstractModel):
    """Account change history data

    """

    def __init__(self):
        r"""
        :param _Id: Unique ID
        :type Id: int
        :param _Uuid: CWPP client UUID
        :type Uuid: str
        :param _MachineIp: Private IP address of the host
        :type MachineIp: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Username: Username
        :type Username: str
        :param _ModifyType: Account change type
<li>CREATE: account creation</li>
<li>MODIFY: account modification</li>
<li>DELETE: account deletion</li>
        :type ModifyType: str
        :param _ModifyTime: Change time
        :type ModifyTime: str
        """
        self._Id = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None
        self._Username = None
        self._ModifyType = None
        self._ModifyTime = None

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Private IP address of the host
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def ModifyType(self):
        """Account change type
<li>CREATE: account creation</li>
<li>MODIFY: account modification</li>
<li>DELETE: account deletion</li>
        :rtype: str
        """
        return self._ModifyType

    @ModifyType.setter
    def ModifyType(self, ModifyType):
        self._ModifyType = ModifyType

    @property
    def ModifyTime(self):
        """Change time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._Username = params.get("Username")
        self._ModifyType = params.get("ModifyType")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostDesc(AbstractModel):
    """Host information entity of the log-in audit allowlist

    """

    def __init__(self):
        r"""
        :param _Quuid: Yunjing client ID
        :type Quuid: str
        :param _Uuid: Host ID
        :type Uuid: str
        :param _MachineName: Machine name
        :type MachineName: str
        :param _MachineIp: Machine IP address. This parameter is left blank for terminated servers.
        :type MachineIp: str
        :param _MachineWanIp: Public IP address. This parameter is left blank for terminated servers.
        :type MachineWanIp: str
        :param _Tags: Tag information array
        :type Tags: list of MachineTag
        """
        self._Quuid = None
        self._Uuid = None
        self._MachineName = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._Tags = None

    @property
    def Quuid(self):
        """Yunjing client ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineName(self):
        """Machine name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineIp(self):
        """Machine IP address. This parameter is left blank for terminated servers.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address. This parameter is left blank for terminated servers.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Tags(self):
        """Tag information array
        :rtype: list of MachineTag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._MachineName = params.get("MachineName")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostInfo(AbstractModel):
    """Add the host information entity of the log-in audit allowlist.

    """

    def __init__(self):
        r"""
        :param _Quuid: Quuid
        :type Quuid: str
        :param _Uuid: Uuid
        :type Uuid: str
        """
        self._Quuid = None
        self._Uuid = None

    @property
    def Quuid(self):
        """Quuid
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Uuid
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostLoginList(AbstractModel):
    """Log-in audit list entity

    """

    def __init__(self):
        r"""
        :param _Id: Record ID
        :type Id: int
        :param _Uuid: UUID string
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MachineIp: Host IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineIp: str
        :param _MachineName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineName: str
        :param _UserName: Username
Note: This field may return null, indicating that no valid values can be obtained.
        :type UserName: str
        :param _SrcIp: Source IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type SrcIp: str
        :param _Status: 1: normal log-in; 2: cross-region log-in; 5: allowlisted; 14: processed; 15: ignored
        :type Status: int
        :param _Country: Country/Region ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Country: int
        :param _City: City ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type City: int
        :param _Province: Province ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Province: int
        :param _LoginTime: Log-in time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LoginTime: str
        :param _ModifyTime: Modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _IsRiskArea: Whether hit the exception of cross-region log-in: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsRiskArea: int
        :param _IsRiskUser: Whether hit the exception of abnormal user: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsRiskUser: int
        :param _IsRiskTime: Whether hit the exception of abnormal time: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsRiskTime: int
        :param _IsRiskSrcIp: Whether hit the exception of abnormal IP: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsRiskSrcIp: int
        :param _RiskLevel: Risk level:
0: high
1: suspicious
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: int
        :param _Location: Location name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Location: str
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _Desc: High-risk information description:
ABROAD - overseas IP
XTI - threat intelligence
Note: This field may return null, indicating that no valid values can be obtained.
        :type Desc: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Port: Request destination port
Note: This field may return null, indicating that no valid values can be obtained.
        :type Port: int
        """
        self._Id = None
        self._Uuid = None
        self._MachineIp = None
        self._MachineName = None
        self._UserName = None
        self._SrcIp = None
        self._Status = None
        self._Country = None
        self._City = None
        self._Province = None
        self._LoginTime = None
        self._ModifyTime = None
        self._IsRiskArea = None
        self._IsRiskUser = None
        self._IsRiskTime = None
        self._IsRiskSrcIp = None
        self._RiskLevel = None
        self._Location = None
        self._Quuid = None
        self._Desc = None
        self._MachineExtraInfo = None
        self._Port = None

    @property
    def Id(self):
        """Record ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """UUID string
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineIp(self):
        """Host IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def UserName(self):
        """Username
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def SrcIp(self):
        """Source IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def Status(self):
        """1: normal log-in; 2: cross-region log-in; 5: allowlisted; 14: processed; 15: ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Country(self):
        """Country/Region ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Country

    @Country.setter
    def Country(self, Country):
        self._Country = Country

    @property
    def City(self):
        """City ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def Province(self):
        """Province ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Province

    @Province.setter
    def Province(self, Province):
        self._Province = Province

    @property
    def LoginTime(self):
        """Log-in time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LoginTime

    @LoginTime.setter
    def LoginTime(self, LoginTime):
        self._LoginTime = LoginTime

    @property
    def ModifyTime(self):
        """Modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def IsRiskArea(self):
        """Whether hit the exception of cross-region log-in: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsRiskArea

    @IsRiskArea.setter
    def IsRiskArea(self, IsRiskArea):
        self._IsRiskArea = IsRiskArea

    @property
    def IsRiskUser(self):
        """Whether hit the exception of abnormal user: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsRiskUser

    @IsRiskUser.setter
    def IsRiskUser(self, IsRiskUser):
        self._IsRiskUser = IsRiskUser

    @property
    def IsRiskTime(self):
        """Whether hit the exception of abnormal time: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsRiskTime

    @IsRiskTime.setter
    def IsRiskTime(self, IsRiskTime):
        self._IsRiskTime = IsRiskTime

    @property
    def IsRiskSrcIp(self):
        """Whether hit the exception of abnormal IP: 1: yes; 0: no
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsRiskSrcIp

    @IsRiskSrcIp.setter
    def IsRiskSrcIp(self, IsRiskSrcIp):
        self._IsRiskSrcIp = IsRiskSrcIp

    @property
    def RiskLevel(self):
        """Risk level:
0: high
1: suspicious
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def Location(self):
        """Location name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Desc(self):
        """High-risk information description:
ABROAD - overseas IP
XTI - threat intelligence
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Port(self):
        """Request destination port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._MachineIp = params.get("MachineIp")
        self._MachineName = params.get("MachineName")
        self._UserName = params.get("UserName")
        self._SrcIp = params.get("SrcIp")
        self._Status = params.get("Status")
        self._Country = params.get("Country")
        self._City = params.get("City")
        self._Province = params.get("Province")
        self._LoginTime = params.get("LoginTime")
        self._ModifyTime = params.get("ModifyTime")
        self._IsRiskArea = params.get("IsRiskArea")
        self._IsRiskUser = params.get("IsRiskUser")
        self._IsRiskTime = params.get("IsRiskTime")
        self._IsRiskSrcIp = params.get("IsRiskSrcIp")
        self._RiskLevel = params.get("RiskLevel")
        self._Location = params.get("Location")
        self._Quuid = params.get("Quuid")
        self._Desc = params.get("Desc")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Port = params.get("Port")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostLoginWhiteObj(AbstractModel):
    """Add log-in audit allowlist entity

    """

    def __init__(self):
        r"""
        :param _Places: Allowlisted region
        :type Places: list of Place
        :param _SrcIp: Allowlisted source IP address. IP ranges are supported. Multiple IPs are separated by commas.
        :type SrcIp: str
        :param _UserName: Allowlisted username separated by commas
        :type UserName: str
        :param _IsGlobal: Whether the allowlist is effective globally. 1: all hosts; 0: only a single host.
        :type IsGlobal: int
        :param _HostInfos: List of information on machines where the allowlist is effective
        :type HostInfos: list of HostInfo
        :param _Remark: Remarks
        :type Remark: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._Places = None
        self._SrcIp = None
        self._UserName = None
        self._IsGlobal = None
        self._HostInfos = None
        self._Remark = None
        self._StartTime = None
        self._EndTime = None

    @property
    def Places(self):
        """Allowlisted region
        :rtype: list of Place
        """
        return self._Places

    @Places.setter
    def Places(self, Places):
        self._Places = Places

    @property
    def SrcIp(self):
        """Allowlisted source IP address. IP ranges are supported. Multiple IPs are separated by commas.
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def UserName(self):
        """Allowlisted username separated by commas
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def IsGlobal(self):
        """Whether the allowlist is effective globally. 1: all hosts; 0: only a single host.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def HostInfos(self):
        """List of information on machines where the allowlist is effective
        :rtype: list of HostInfo
        """
        return self._HostInfos

    @HostInfos.setter
    def HostInfos(self, HostInfos):
        self._HostInfos = HostInfos

    @property
    def Remark(self):
        """Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        if params.get("Places") is not None:
            self._Places = []
            for item in params.get("Places"):
                obj = Place()
                obj._deserialize(item)
                self._Places.append(obj)
        self._SrcIp = params.get("SrcIp")
        self._UserName = params.get("UserName")
        self._IsGlobal = params.get("IsGlobal")
        if params.get("HostInfos") is not None:
            self._HostInfos = []
            for item in params.get("HostInfos"):
                obj = HostInfo()
                obj._deserialize(item)
                self._HostInfos.append(obj)
        self._Remark = params.get("Remark")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostTagInfo(AbstractModel):
    """Host and host tag information

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _TagList: Host tag name array
Note: This field may return null, indicating that no valid values can be obtained.
        :type TagList: list of str
        :param _HostIp: Host intranet IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _AliasName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type AliasName: str
        :param _MachineWanIp: Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _KernelVersion: Kernel version number
Note: This field may return null, indicating that no valid values can be obtained.
        :type KernelVersion: str
        :param _MachineStatus: Host online status: ONLINE; OFFLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineStatus: str
        :param _ProtectType: Protection version: BASIC_VERSION - Basic Edition PRO_VERSION - Professional Edition; Flagship: Ultimate Edition
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProtectType: str
        :param _VulNum: Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulNum: int
        :param _CloudTags: Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tags
        :param _InstanceID: Host Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceID: str
        """
        self._Quuid = None
        self._TagList = None
        self._HostIp = None
        self._AliasName = None
        self._MachineWanIp = None
        self._Uuid = None
        self._KernelVersion = None
        self._MachineStatus = None
        self._ProtectType = None
        self._VulNum = None
        self._CloudTags = None
        self._InstanceID = None

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def TagList(self):
        """Host tag name array
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._TagList

    @TagList.setter
    def TagList(self, TagList):
        self._TagList = TagList

    @property
    def HostIp(self):
        """Host intranet IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def AliasName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AliasName

    @AliasName.setter
    def AliasName(self, AliasName):
        self._AliasName = AliasName

    @property
    def MachineWanIp(self):
        """Host public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def KernelVersion(self):
        """Kernel version number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._KernelVersion

    @KernelVersion.setter
    def KernelVersion(self, KernelVersion):
        self._KernelVersion = KernelVersion

    @property
    def MachineStatus(self):
        """Host online status: ONLINE; OFFLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def ProtectType(self):
        """Protection version: BASIC_VERSION - Basic Edition PRO_VERSION - Professional Edition; Flagship: Ultimate Edition
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProtectType

    @ProtectType.setter
    def ProtectType(self, ProtectType):
        self._ProtectType = ProtectType

    @property
    def VulNum(self):
        """Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulNum

    @VulNum.setter
    def VulNum(self, VulNum):
        self._VulNum = VulNum

    @property
    def CloudTags(self):
        """Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tags
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def InstanceID(self):
        """Host Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._TagList = params.get("TagList")
        self._HostIp = params.get("HostIp")
        self._AliasName = params.get("AliasName")
        self._MachineWanIp = params.get("MachineWanIp")
        self._Uuid = params.get("Uuid")
        self._KernelVersion = params.get("KernelVersion")
        self._MachineStatus = params.get("MachineStatus")
        self._ProtectType = params.get("ProtectType")
        self._VulNum = params.get("VulNum")
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tags()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        self._InstanceID = params.get("InstanceID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IgnoreBaselineRule(AbstractModel):
    """Information on the ignored baseline check item

    """

    def __init__(self):
        r"""
        :param _RuleName: Baseline check item name
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleName: str
        :param _RuleId: Baseline check item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        :param _ModifyTime: Update time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _Fix: Fixing suggestions
Note: This field may return null, indicating that no valid values can be obtained.
        :type Fix: str
        :param _EffectHostCount: Number of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type EffectHostCount: int
        """
        self._RuleName = None
        self._RuleId = None
        self._ModifyTime = None
        self._Fix = None
        self._EffectHostCount = None

    @property
    def RuleName(self):
        """Baseline check item name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleId(self):
        """Baseline check item ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ModifyTime(self):
        """Update time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Fix(self):
        """Fixing suggestions
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Fix

    @Fix.setter
    def Fix(self, Fix):
        self._Fix = Fix

    @property
    def EffectHostCount(self):
        """Number of affected hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EffectHostCount

    @EffectHostCount.setter
    def EffectHostCount(self, EffectHostCount):
        self._EffectHostCount = EffectHostCount


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        self._RuleId = params.get("RuleId")
        self._ModifyTime = params.get("ModifyTime")
        self._Fix = params.get("Fix")
        self._EffectHostCount = params.get("EffectHostCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IgnoreImpactedHostsRequest(AbstractModel):
    """IgnoreImpactedHosts request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Vulnerability ID array
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Vulnerability ID array
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IgnoreImpactedHostsResponse(AbstractModel):
    """IgnoreImpactedHosts response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class IgnoreRuleEffectHostInfo(AbstractModel):
    """Information of hosts affected by ignoring detection items

    """

    def __init__(self):
        r"""
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _Level: Severity level: 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _TagList: Host tag array
Note: This field may return null, indicating that no valid values can be obtained.
        :type TagList: list of str
        :param _Status: Status: 0: failed; 1: ignore; 3: passed; 5: detecting
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _LastScanTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastScanTime: str
        :param _EventId: Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventId: int
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        """
        self._HostName = None
        self._Level = None
        self._TagList = None
        self._Status = None
        self._LastScanTime = None
        self._EventId = None
        self._Quuid = None

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def Level(self):
        """Severity level: 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def TagList(self):
        """Host tag array
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._TagList

    @TagList.setter
    def TagList(self, TagList):
        self._TagList = TagList

    @property
    def Status(self):
        """Status: 0: failed; 1: ignore; 3: passed; 5: detecting
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def LastScanTime(self):
        """Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastScanTime

    @LastScanTime.setter
    def LastScanTime(self, LastScanTime):
        self._LastScanTime = LastScanTime

    @property
    def EventId(self):
        """Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        self._Level = params.get("Level")
        self._TagList = params.get("TagList")
        self._Status = params.get("Status")
        self._LastScanTime = params.get("LastScanTime")
        self._EventId = params.get("EventId")
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IncidentVertexInfo(AbstractModel):
    """Event point information

    """

    def __init__(self):
        r"""
        :param _IncidentId: Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type IncidentId: str
        :param _TableName: The name of the table where the event occurred
Note: This field may return null, indicating that no valid values can be obtained.
        :type TableName: str
        :param _Vertex: A list of node information, with array items containing detailed node information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Vertex: list of VertexInfo
        :param _VertexCount: Total number of nodes
Note: This field may return null, indicating that no valid values can be obtained.
        :type VertexCount: int
        """
        self._IncidentId = None
        self._TableName = None
        self._Vertex = None
        self._VertexCount = None

    @property
    def IncidentId(self):
        """Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IncidentId

    @IncidentId.setter
    def IncidentId(self, IncidentId):
        self._IncidentId = IncidentId

    @property
    def TableName(self):
        """The name of the table where the event occurred
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TableName

    @TableName.setter
    def TableName(self, TableName):
        self._TableName = TableName

    @property
    def Vertex(self):
        """A list of node information, with array items containing detailed node information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VertexInfo
        """
        return self._Vertex

    @Vertex.setter
    def Vertex(self, Vertex):
        self._Vertex = Vertex

    @property
    def VertexCount(self):
        """Total number of nodes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VertexCount

    @VertexCount.setter
    def VertexCount(self, VertexCount):
        self._VertexCount = VertexCount


    def _deserialize(self, params):
        self._IncidentId = params.get("IncidentId")
        self._TableName = params.get("TableName")
        if params.get("Vertex") is not None:
            self._Vertex = []
            for item in params.get("Vertex"):
                obj = VertexInfo()
                obj._deserialize(item)
                self._Vertex.append(obj)
        self._VertexCount = params.get("VertexCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JavaMemShellDetail(AbstractModel):
    """Java webshell event details

    """

    def __init__(self):
        r"""
        :param _InstanceName: Container name
        :type InstanceName: str
        :param _InstanceState: Instance Status: RUNNING, STOPPED, SHUTDOWN...
        :type InstanceState: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _Type: Memory Trojan Type. 0: Filter Type; 1: Listener Type; 2: Servlet Type; 3: Interceptors Type; 4: Agent Type; 5: Other
        :type Type: int
        :param _Description: Description
        :type Description: str
        :param _CreateTime: First detection time
        :type CreateTime: str
        :param _RecentFoundTime: Last detection time
        :type RecentFoundTime: str
        :param _Status: Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :type Status: int
        :param _ClassLoaderName: Java Loader Class Name
        :type ClassLoaderName: str
        :param _SuperClassName: Parent class name
        :type SuperClassName: str
        :param _Md5: Class file MD5
        :type Md5: str
        :param _Interfaces: Inherited API
        :type Interfaces: str
        :param _Annotations: Annotation
        :type Annotations: str
        :param _Pid: Process ID
        :type Pid: int
        :param _Exe: Java Process Path
        :type Exe: str
        :param _Args: Java process command line parameters
        :type Args: str
        :param _ClassName: Class name
        :type ClassName: str
        :param _ClassContent: Java Memory Horse Binary Code (base64)
        :type ClassContent: str
        :param _ClassContentPretty: Java Memory Trojan Decompilation Code
        :type ClassContentPretty: str
        :param _EventDescription: Event description
        :type EventDescription: str
        :param _SecurityAdvice: Security advice
        :type SecurityAdvice: str
        :param _MachineExtraInfo: Additional host information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _MachineState: Instance status: RUNNING, STOPPED, SHUTDOWN...
        :type MachineState: str
        """
        self._InstanceName = None
        self._InstanceState = None
        self._PrivateIp = None
        self._PublicIp = None
        self._Type = None
        self._Description = None
        self._CreateTime = None
        self._RecentFoundTime = None
        self._Status = None
        self._ClassLoaderName = None
        self._SuperClassName = None
        self._Md5 = None
        self._Interfaces = None
        self._Annotations = None
        self._Pid = None
        self._Exe = None
        self._Args = None
        self._ClassName = None
        self._ClassContent = None
        self._ClassContentPretty = None
        self._EventDescription = None
        self._SecurityAdvice = None
        self._MachineExtraInfo = None
        self._MachineState = None

    @property
    def InstanceName(self):
        """Container name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def InstanceState(self):
        """Instance Status: RUNNING, STOPPED, SHUTDOWN...
        :rtype: str
        """
        return self._InstanceState

    @InstanceState.setter
    def InstanceState(self, InstanceState):
        self._InstanceState = InstanceState

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def PublicIp(self):
        """Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def Type(self):
        """Memory Trojan Type. 0: Filter Type; 1: Listener Type; 2: Servlet Type; 3: Interceptors Type; 4: Agent Type; 5: Other
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateTime(self):
        """First detection time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def RecentFoundTime(self):
        """Last detection time
        :rtype: str
        """
        return self._RecentFoundTime

    @RecentFoundTime.setter
    def RecentFoundTime(self, RecentFoundTime):
        self._RecentFoundTime = RecentFoundTime

    @property
    def Status(self):
        """Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ClassLoaderName(self):
        """Java Loader Class Name
        :rtype: str
        """
        return self._ClassLoaderName

    @ClassLoaderName.setter
    def ClassLoaderName(self, ClassLoaderName):
        self._ClassLoaderName = ClassLoaderName

    @property
    def SuperClassName(self):
        """Parent class name
        :rtype: str
        """
        return self._SuperClassName

    @SuperClassName.setter
    def SuperClassName(self, SuperClassName):
        self._SuperClassName = SuperClassName

    @property
    def Md5(self):
        """Class file MD5
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def Interfaces(self):
        """Inherited API
        :rtype: str
        """
        return self._Interfaces

    @Interfaces.setter
    def Interfaces(self, Interfaces):
        self._Interfaces = Interfaces

    @property
    def Annotations(self):
        """Annotation
        :rtype: str
        """
        return self._Annotations

    @Annotations.setter
    def Annotations(self, Annotations):
        self._Annotations = Annotations

    @property
    def Pid(self):
        """Process ID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def Exe(self):
        """Java Process Path
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def Args(self):
        """Java process command line parameters
        :rtype: str
        """
        return self._Args

    @Args.setter
    def Args(self, Args):
        self._Args = Args

    @property
    def ClassName(self):
        """Class name
        :rtype: str
        """
        return self._ClassName

    @ClassName.setter
    def ClassName(self, ClassName):
        self._ClassName = ClassName

    @property
    def ClassContent(self):
        """Java Memory Horse Binary Code (base64)
        :rtype: str
        """
        return self._ClassContent

    @ClassContent.setter
    def ClassContent(self, ClassContent):
        self._ClassContent = ClassContent

    @property
    def ClassContentPretty(self):
        """Java Memory Trojan Decompilation Code
        :rtype: str
        """
        return self._ClassContentPretty

    @ClassContentPretty.setter
    def ClassContentPretty(self, ClassContentPretty):
        self._ClassContentPretty = ClassContentPretty

    @property
    def EventDescription(self):
        """Event description
        :rtype: str
        """
        return self._EventDescription

    @EventDescription.setter
    def EventDescription(self, EventDescription):
        self._EventDescription = EventDescription

    @property
    def SecurityAdvice(self):
        """Security advice
        :rtype: str
        """
        return self._SecurityAdvice

    @SecurityAdvice.setter
    def SecurityAdvice(self, SecurityAdvice):
        self._SecurityAdvice = SecurityAdvice

    @property
    def MachineExtraInfo(self):
        """Additional host information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def MachineState(self):
        """Instance status: RUNNING, STOPPED, SHUTDOWN...
        :rtype: str
        """
        return self._MachineState

    @MachineState.setter
    def MachineState(self, MachineState):
        self._MachineState = MachineState


    def _deserialize(self, params):
        self._InstanceName = params.get("InstanceName")
        self._InstanceState = params.get("InstanceState")
        self._PrivateIp = params.get("PrivateIp")
        self._PublicIp = params.get("PublicIp")
        self._Type = params.get("Type")
        self._Description = params.get("Description")
        self._CreateTime = params.get("CreateTime")
        self._RecentFoundTime = params.get("RecentFoundTime")
        self._Status = params.get("Status")
        self._ClassLoaderName = params.get("ClassLoaderName")
        self._SuperClassName = params.get("SuperClassName")
        self._Md5 = params.get("Md5")
        self._Interfaces = params.get("Interfaces")
        self._Annotations = params.get("Annotations")
        self._Pid = params.get("Pid")
        self._Exe = params.get("Exe")
        self._Args = params.get("Args")
        self._ClassName = params.get("ClassName")
        self._ClassContent = params.get("ClassContent")
        self._ClassContentPretty = params.get("ClassContentPretty")
        self._EventDescription = params.get("EventDescription")
        self._SecurityAdvice = params.get("SecurityAdvice")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._MachineState = params.get("MachineState")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JavaMemShellInfo(AbstractModel):
    """Java webshell event information

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        :param _Alias: Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Alias: str
        :param _HostIp: Server IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _Type: Memory Trojan Type. 0: Filter Type; 1: Listener Type; 2: Servlet Type; 3: Interceptors Type; 4: Agent Type; 5: Other
        :type Type: int
        :param _Description: Description
        :type Description: str
        :param _CreateTime: First detection time
        :type CreateTime: str
        :param _RecentFoundTime: Last detection time
        :type RecentFoundTime: str
        :param _Status: Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :type Status: int
        :param _Quuid: Server QUUID
        :type Quuid: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Uuid: Server UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        """
        self._Id = None
        self._Alias = None
        self._HostIp = None
        self._Type = None
        self._Description = None
        self._CreateTime = None
        self._RecentFoundTime = None
        self._Status = None
        self._Quuid = None
        self._MachineExtraInfo = None
        self._Uuid = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Alias(self):
        """Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def HostIp(self):
        """Server IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Type(self):
        """Memory Trojan Type. 0: Filter Type; 1: Listener Type; 2: Servlet Type; 3: Interceptors Type; 4: Agent Type; 5: Other
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateTime(self):
        """First detection time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def RecentFoundTime(self):
        """Last detection time
        :rtype: str
        """
        return self._RecentFoundTime

    @RecentFoundTime.setter
    def RecentFoundTime(self, RecentFoundTime):
        self._RecentFoundTime = RecentFoundTime

    @property
    def Status(self):
        """Processing Status. 0 - Pending; 1 - Allowlisted; 2 - Deleted; 3 - Ignored; 4 - Manually Processed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Quuid(self):
        """Server QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Uuid(self):
        """Server UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Alias = params.get("Alias")
        self._HostIp = params.get("HostIp")
        self._Type = params.get("Type")
        self._Description = params.get("Description")
        self._CreateTime = params.get("CreateTime")
        self._RecentFoundTime = params.get("RecentFoundTime")
        self._Status = params.get("Status")
        self._Quuid = params.get("Quuid")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JavaMemShellPluginInfo(AbstractModel):
    """Java Memory Trojan Plugin Information

    """

    def __init__(self):
        r"""
        :param _Pid: Injection Process PID
        :type Pid: int
        :param _MainClass: Injection Process Main Class
        :type MainClass: str
        :param _Status: Injection Status. 0: Injecting; 1: Injection Succeeded; 2: Plugin Timeout; 3: Plugin Exits; 4: Injection Failed; 5: Soft-delete
        :type Status: int
        :param _ErrorLog: Error logs
        :type ErrorLog: str
        """
        self._Pid = None
        self._MainClass = None
        self._Status = None
        self._ErrorLog = None

    @property
    def Pid(self):
        """Injection Process PID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def MainClass(self):
        """Injection Process Main Class
        :rtype: str
        """
        return self._MainClass

    @MainClass.setter
    def MainClass(self, MainClass):
        self._MainClass = MainClass

    @property
    def Status(self):
        """Injection Status. 0: Injecting; 1: Injection Succeeded; 2: Plugin Timeout; 3: Plugin Exits; 4: Injection Failed; 5: Soft-delete
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ErrorLog(self):
        """Error logs
        :rtype: str
        """
        return self._ErrorLog

    @ErrorLog.setter
    def ErrorLog(self, ErrorLog):
        self._ErrorLog = ErrorLog


    def _deserialize(self, params):
        self._Pid = params.get("Pid")
        self._MainClass = params.get("MainClass")
        self._Status = params.get("Status")
        self._ErrorLog = params.get("ErrorLog")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JavaMemShellPluginSetting(AbstractModel):
    """Java Memory Trojan Plugin Configuration

    """

    def __init__(self):
        r"""
        :param _Quuid: Container QUUID
        :type Quuid: str
        :param _Alias: Server name
        :type Alias: str
        :param _HostIp: Server IP address
        :type HostIp: str
        :param _JavaShellStatus: Javashell Plugin Switch. 0: Off; 1: On
        :type JavaShellStatus: int
        :param _Exception: Plugin Exception Status. 0: Normal; 1: Abnormal
        :type Exception: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        :param _Uuid: Server UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Quuid = None
        self._Alias = None
        self._HostIp = None
        self._JavaShellStatus = None
        self._Exception = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Uuid = None
        self._MachineExtraInfo = None

    @property
    def Quuid(self):
        """Container QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Alias(self):
        """Server name
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def HostIp(self):
        """Server IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def JavaShellStatus(self):
        """Javashell Plugin Switch. 0: Off; 1: On
        :rtype: int
        """
        return self._JavaShellStatus

    @JavaShellStatus.setter
    def JavaShellStatus(self, JavaShellStatus):
        self._JavaShellStatus = JavaShellStatus

    @property
    def Exception(self):
        """Plugin Exception Status. 0: Normal; 1: Abnormal
        :rtype: int
        """
        return self._Exception

    @Exception.setter
    def Exception(self, Exception):
        self._Exception = Exception

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Uuid(self):
        """Server UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Alias = params.get("Alias")
        self._HostIp = params.get("HostIp")
        self._JavaShellStatus = params.get("JavaShellStatus")
        self._Exception = params.get("Exception")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Uuid = params.get("Uuid")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KeyValueArrayInfo(AbstractModel):
    """Index key-value information

    """

    def __init__(self):
        r"""
        :param _Key: Field requiring Key-Value or Meta Field Index configuration
        :type Key: str
        :param _Value: Field index description
        :type Value: :class:`tencentcloud.cwp.v20180228.models.ValueInfo`
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """Field requiring Key-Value or Meta Field Index configuration
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Field index description
        :rtype: :class:`tencentcloud.cwp.v20180228.models.ValueInfo`
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        if params.get("Value") is not None:
            self._Value = ValueInfo()
            self._Value._deserialize(params.get("Value"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KeyValueInfo(AbstractModel):
    """Key-value index configuration

    """

    def __init__(self):
        r"""
        :param _CaseSensitive: Whether case-sensitive
        :type CaseSensitive: bool
        :param _KeyValues: Information about the key-value pair to be indexed
Note: This field may return null, indicating that no valid values can be obtained.
        :type KeyValues: list of KeyValueArrayInfo
        """
        self._CaseSensitive = None
        self._KeyValues = None

    @property
    def CaseSensitive(self):
        """Whether case-sensitive
        :rtype: bool
        """
        return self._CaseSensitive

    @CaseSensitive.setter
    def CaseSensitive(self, CaseSensitive):
        self._CaseSensitive = CaseSensitive

    @property
    def KeyValues(self):
        """Information about the key-value pair to be indexed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of KeyValueArrayInfo
        """
        return self._KeyValues

    @KeyValues.setter
    def KeyValues(self, KeyValues):
        self._KeyValues = KeyValues


    def _deserialize(self, params):
        self._CaseSensitive = params.get("CaseSensitive")
        if params.get("KeyValues") is not None:
            self._KeyValues = []
            for item in params.get("KeyValues"):
                obj = KeyValueArrayInfo()
                obj._deserialize(item)
                self._KeyValues.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KeysLocalStorageRequest(AbstractModel):
    """KeysLocalStorage request structure.

    """


class KeysLocalStorageResponse(AbstractModel):
    """KeysLocalStorage response structure.

    """

    def __init__(self):
        r"""
        :param _Keys: Key List
Note: This field may return null, indicating that no valid values can be obtained.
        :type Keys: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Keys = None
        self._RequestId = None

    @property
    def Keys(self):
        """Key List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Keys

    @Keys.setter
    def Keys(self, Keys):
        self._Keys = Keys

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Keys = params.get("Keys")
        self._RequestId = params.get("RequestId")


class LicenseBindDetail(AbstractModel):
    """Authorize binding details

    """

    def __init__(self):
        r"""
        :param _MachineName: Machine Alias
        :type MachineName: str
        :param _MachineWanIp: Machine Public IP address
        :type MachineWanIp: str
        :param _MachineIp: Machine Private IP address
        :type MachineIp: str
        :param _Quuid: CVM UUID
        :type Quuid: str
        :param _Uuid: CWPP client UUID
        :type Uuid: str
        :param _Tags: Tag information
        :type Tags: list of str
        :param _AgentStatus: CWPP client status: OFFLINE, ONLINE, and UNINSTALL.
        :type AgentStatus: str
        :param _IsUnBind: Whether unbinding is allowed: false - unbinding is not allowed.
        :type IsUnBind: bool
        :param _IsSwitchBind: Whether rebinding is allowed: false - rebinding is not allowed.
        :type IsSwitchBind: bool
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineName = None
        self._MachineWanIp = None
        self._MachineIp = None
        self._Quuid = None
        self._Uuid = None
        self._Tags = None
        self._AgentStatus = None
        self._IsUnBind = None
        self._IsSwitchBind = None
        self._MachineExtraInfo = None

    @property
    def MachineName(self):
        """Machine Alias
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineWanIp(self):
        """Machine Public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineIp(self):
        """Machine Private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def Quuid(self):
        """CVM UUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """CWPP client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Tags(self):
        """Tag information
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def AgentStatus(self):
        """CWPP client status: OFFLINE, ONLINE, and UNINSTALL.
        :rtype: str
        """
        return self._AgentStatus

    @AgentStatus.setter
    def AgentStatus(self, AgentStatus):
        self._AgentStatus = AgentStatus

    @property
    def IsUnBind(self):
        """Whether unbinding is allowed: false - unbinding is not allowed.
        :rtype: bool
        """
        return self._IsUnBind

    @IsUnBind.setter
    def IsUnBind(self, IsUnBind):
        self._IsUnBind = IsUnBind

    @property
    def IsSwitchBind(self):
        """Whether rebinding is allowed: false - rebinding is not allowed.
        :rtype: bool
        """
        return self._IsSwitchBind

    @IsSwitchBind.setter
    def IsSwitchBind(self, IsSwitchBind):
        self._IsSwitchBind = IsSwitchBind

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineName = params.get("MachineName")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineIp = params.get("MachineIp")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._Tags = params.get("Tags")
        self._AgentStatus = params.get("AgentStatus")
        self._IsUnBind = params.get("IsUnBind")
        self._IsSwitchBind = params.get("IsSwitchBind")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LicenseBindTaskDetail(AbstractModel):
    """Authorization binding task details

    """

    def __init__(self):
        r"""
        :param _Quuid: CVM UUID
        :type Quuid: str
        :param _ErrMsg: Error message
        :type ErrMsg: str
        :param _Status: 0-in progress; 1-succeeded; 2-failed
        :type Status: int
        :param _FixMessage: Fix suggestion
        :type FixMessage: str
        :param _MachineExtraInfo: Additional information of machine
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._Quuid = None
        self._ErrMsg = None
        self._Status = None
        self._FixMessage = None
        self._MachineExtraInfo = None

    @property
    def Quuid(self):
        """CVM UUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def ErrMsg(self):
        """Error message
        :rtype: str
        """
        return self._ErrMsg

    @ErrMsg.setter
    def ErrMsg(self, ErrMsg):
        self._ErrMsg = ErrMsg

    @property
    def Status(self):
        """0-in progress; 1-succeeded; 2-failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def FixMessage(self):
        """Fix suggestion
        :rtype: str
        """
        return self._FixMessage

    @FixMessage.setter
    def FixMessage(self, FixMessage):
        self._FixMessage = FixMessage

    @property
    def MachineExtraInfo(self):
        """Additional information of machine
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._ErrMsg = params.get("ErrMsg")
        self._Status = params.get("Status")
        self._FixMessage = params.get("FixMessage")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LicenseDetail(AbstractModel):
    """Authorization order list object

    """

    def __init__(self):
        r"""
        :param _LicenseId: Authorization ID
        :type LicenseId: int
        :param _LicenseType: Authorization type. 0: Pro Edition - pay-as-you-go; 1: Pro Edition - monthly subscription; 2: Ultimate Edition - monthly subscription.
        :type LicenseType: int
        :param _LicenseStatus: Authorization status. 0: not in use; 1: partially in use; 2: used up; 3: unavailable.
Note: This field may return null, indicating that no valid values can be obtained.
        :type LicenseStatus: int
        :param _LicenseCnt: Total number of authorizations
        :type LicenseCnt: int
        :param _UsedLicenseCnt: Number of used authorizations
        :type UsedLicenseCnt: int
        :param _OrderStatus: Order status. 1: normal; 2: isolated; 3: terminated.
        :type OrderStatus: int
        :param _Deadline: Deadline
        :type Deadline: str
        :param _ResourceId: Order resource ID
        :type ResourceId: str
        :param _AutoRenewFlag: 0: initialization; 1: automatic renewal; 2: no automatic renewal.
        :type AutoRenewFlag: int
        :param _ProjectId: Project ID
        :type ProjectId: int
        :param _TaskId: Task ID. Default value: 0. It is used to query the binding progress.
        :type TaskId: int
        :param _BuyTime: Time of purchase
        :type BuyTime: str
        :param _SourceType: Whether the order is a trial order
        :type SourceType: int
        :param _Alias: Resource alias
        :type Alias: str
        :param _Tags: Platform Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of Tags
        :param _FreezeNum: Number of frozen authorizations. 0: no authorization is frozen; other values: actual number of frozen authorizations.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FreezeNum: int
        """
        self._LicenseId = None
        self._LicenseType = None
        self._LicenseStatus = None
        self._LicenseCnt = None
        self._UsedLicenseCnt = None
        self._OrderStatus = None
        self._Deadline = None
        self._ResourceId = None
        self._AutoRenewFlag = None
        self._ProjectId = None
        self._TaskId = None
        self._BuyTime = None
        self._SourceType = None
        self._Alias = None
        self._Tags = None
        self._FreezeNum = None

    @property
    def LicenseId(self):
        """Authorization ID
        :rtype: int
        """
        return self._LicenseId

    @LicenseId.setter
    def LicenseId(self, LicenseId):
        self._LicenseId = LicenseId

    @property
    def LicenseType(self):
        """Authorization type. 0: Pro Edition - pay-as-you-go; 1: Pro Edition - monthly subscription; 2: Ultimate Edition - monthly subscription.
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def LicenseStatus(self):
        """Authorization status. 0: not in use; 1: partially in use; 2: used up; 3: unavailable.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._LicenseStatus

    @LicenseStatus.setter
    def LicenseStatus(self, LicenseStatus):
        self._LicenseStatus = LicenseStatus

    @property
    def LicenseCnt(self):
        """Total number of authorizations
        :rtype: int
        """
        return self._LicenseCnt

    @LicenseCnt.setter
    def LicenseCnt(self, LicenseCnt):
        self._LicenseCnt = LicenseCnt

    @property
    def UsedLicenseCnt(self):
        """Number of used authorizations
        :rtype: int
        """
        return self._UsedLicenseCnt

    @UsedLicenseCnt.setter
    def UsedLicenseCnt(self, UsedLicenseCnt):
        self._UsedLicenseCnt = UsedLicenseCnt

    @property
    def OrderStatus(self):
        """Order status. 1: normal; 2: isolated; 3: terminated.
        :rtype: int
        """
        return self._OrderStatus

    @OrderStatus.setter
    def OrderStatus(self, OrderStatus):
        self._OrderStatus = OrderStatus

    @property
    def Deadline(self):
        """Deadline
        :rtype: str
        """
        return self._Deadline

    @Deadline.setter
    def Deadline(self, Deadline):
        self._Deadline = Deadline

    @property
    def ResourceId(self):
        """Order resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def AutoRenewFlag(self):
        """0: initialization; 1: automatic renewal; 2: no automatic renewal.
        :rtype: int
        """
        return self._AutoRenewFlag

    @AutoRenewFlag.setter
    def AutoRenewFlag(self, AutoRenewFlag):
        self._AutoRenewFlag = AutoRenewFlag

    @property
    def ProjectId(self):
        """Project ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def TaskId(self):
        """Task ID. Default value: 0. It is used to query the binding progress.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def BuyTime(self):
        """Time of purchase
        :rtype: str
        """
        return self._BuyTime

    @BuyTime.setter
    def BuyTime(self, BuyTime):
        self._BuyTime = BuyTime

    @property
    def SourceType(self):
        """Whether the order is a trial order
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType

    @property
    def Alias(self):
        """Resource alias
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def Tags(self):
        """Platform Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tags
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def FreezeNum(self):
        """Number of frozen authorizations. 0: no authorization is frozen; other values: actual number of frozen authorizations.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FreezeNum

    @FreezeNum.setter
    def FreezeNum(self, FreezeNum):
        self._FreezeNum = FreezeNum


    def _deserialize(self, params):
        self._LicenseId = params.get("LicenseId")
        self._LicenseType = params.get("LicenseType")
        self._LicenseStatus = params.get("LicenseStatus")
        self._LicenseCnt = params.get("LicenseCnt")
        self._UsedLicenseCnt = params.get("UsedLicenseCnt")
        self._OrderStatus = params.get("OrderStatus")
        self._Deadline = params.get("Deadline")
        self._ResourceId = params.get("ResourceId")
        self._AutoRenewFlag = params.get("AutoRenewFlag")
        self._ProjectId = params.get("ProjectId")
        self._TaskId = params.get("TaskId")
        self._BuyTime = params.get("BuyTime")
        self._SourceType = params.get("SourceType")
        self._Alias = params.get("Alias")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tags()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._FreezeNum = params.get("FreezeNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LicenseOrder(AbstractModel):
    """Authorization Order Object Content

    """

    def __init__(self):
        r"""
        :param _LicenseId: Authorization ID
        :type LicenseId: int
        :param _LicenseType: Authorization type
        :type LicenseType: int
        :param _Status: Authorization Order Resource Status
        :type Status: int
        :param _SourceType: Order type
        :type SourceType: int
        :param _ResourceId: Resource ID
        :type ResourceId: str
        """
        self._LicenseId = None
        self._LicenseType = None
        self._Status = None
        self._SourceType = None
        self._ResourceId = None

    @property
    def LicenseId(self):
        """Authorization ID
        :rtype: int
        """
        return self._LicenseId

    @LicenseId.setter
    def LicenseId(self, LicenseId):
        self._LicenseId = LicenseId

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def Status(self):
        """Authorization Order Resource Status
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def SourceType(self):
        """Order type
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._LicenseId = params.get("LicenseId")
        self._LicenseType = params.get("LicenseType")
        self._Status = params.get("Status")
        self._SourceType = params.get("SourceType")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogHistogram(AbstractModel):
    """Result details of statistics within the histogram period

    """

    def __init__(self):
        r"""
        :param _Count: Number of logs within the statistical period
        :type Count: int
        :param _TimeStamp: Unix timestamp rounded by period, in ms
        :type TimeStamp: int
        """
        self._Count = None
        self._TimeStamp = None

    @property
    def Count(self):
        """Number of logs within the statistical period
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def TimeStamp(self):
        """Unix timestamp rounded by period, in ms
        :rtype: int
        """
        return self._TimeStamp

    @TimeStamp.setter
    def TimeStamp(self, TimeStamp):
        self._TimeStamp = TimeStamp


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._TimeStamp = params.get("TimeStamp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogInfo(AbstractModel):
    """Log details

    """

    def __init__(self):
        r"""
        :param _Content: JSON serialized string of the log content
        :type Content: str
        :param _FileName: Log file name
        :type FileName: str
        :param _Source: Log source IP address
        :type Source: str
        :param _TimeStamp: Log time, in milliseconds
        :type TimeStamp: int
        """
        self._Content = None
        self._FileName = None
        self._Source = None
        self._TimeStamp = None

    @property
    def Content(self):
        """JSON serialized string of the log content
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def FileName(self):
        """Log file name
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def Source(self):
        """Log source IP address
        :rtype: str
        """
        return self._Source

    @Source.setter
    def Source(self, Source):
        self._Source = Source

    @property
    def TimeStamp(self):
        """Log time, in milliseconds
        :rtype: int
        """
        return self._TimeStamp

    @TimeStamp.setter
    def TimeStamp(self, TimeStamp):
        self._TimeStamp = TimeStamp


    def _deserialize(self, params):
        self._Content = params.get("Content")
        self._FileName = params.get("FileName")
        self._Source = params.get("Source")
        self._TimeStamp = params.get("TimeStamp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogStorageRecord(AbstractModel):
    """Record of stored log size

    """

    def __init__(self):
        r"""
        :param _Month: Year and month
Note: This field may return null, indicating that no valid values can be obtained.
        :type Month: str
        :param _UsedSize: Used storage capacity, in bytes
Note: This field may return null, indicating that no valid values can be obtained.
        :type UsedSize: int
        :param _InquireSize: Total capacity, in bytes
Note: This field may return null, indicating that no valid values can be obtained.
        :type InquireSize: int
        """
        self._Month = None
        self._UsedSize = None
        self._InquireSize = None

    @property
    def Month(self):
        """Year and month
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Month

    @Month.setter
    def Month(self, Month):
        self._Month = Month

    @property
    def UsedSize(self):
        """Used storage capacity, in bytes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._UsedSize

    @UsedSize.setter
    def UsedSize(self, UsedSize):
        self._UsedSize = UsedSize

    @property
    def InquireSize(self):
        """Total capacity, in bytes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._InquireSize

    @InquireSize.setter
    def InquireSize(self, InquireSize):
        self._InquireSize = InquireSize


    def _deserialize(self, params):
        self._Month = params.get("Month")
        self._UsedSize = params.get("UsedSize")
        self._InquireSize = params.get("InquireSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LoginWhiteCombinedInfo(AbstractModel):
    """Merge cross-region log-in allowlists

    """

    def __init__(self):
        r"""
        :param _Places: Allowlist region
Note: This field may return null, indicating that no valid values can be obtained.
        :type Places: list of Place
        :param _UserName: Allowlisted users (Multiple users are separated by commas.)
        :type UserName: str
        :param _SrcIp: Allowlisted IPs (Multiple IPs are separated by commas.)
        :type SrcIp: str
        :param _Locale: Region string
        :type Locale: str
        :param _Remark: Remarks
        :type Remark: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _IsGlobal: Whether the settings take effect globally. 1: take effect globally; 0: take effect on the specified host list.
        :type IsGlobal: int
        :param _Name: Allowlist name. If IsLocal is set to 1, the name is fixed as All servers. If the allowlist applies to only a single server, the name is the server's private IP Address. If the allowlist applies to multiple servers, the name is the number of servers, such as 11.
        :type Name: str
        :param _Desc: Return the server name when the allowlist applies to only one server.
        :type Desc: str
        :param _Id: Allowlist ID
        :type Id: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Last modification time
        :type ModifyTime: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _Locations: Login Location
        :type Locations: str
        """
        self._Places = None
        self._UserName = None
        self._SrcIp = None
        self._Locale = None
        self._Remark = None
        self._StartTime = None
        self._EndTime = None
        self._IsGlobal = None
        self._Name = None
        self._Desc = None
        self._Id = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Uuid = None
        self._Locations = None

    @property
    def Places(self):
        """Allowlist region
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Place
        """
        return self._Places

    @Places.setter
    def Places(self, Places):
        self._Places = Places

    @property
    def UserName(self):
        """Allowlisted users (Multiple users are separated by commas.)
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def SrcIp(self):
        """Allowlisted IPs (Multiple IPs are separated by commas.)
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def Locale(self):
        """Region string
        :rtype: str
        """
        return self._Locale

    @Locale.setter
    def Locale(self, Locale):
        self._Locale = Locale

    @property
    def Remark(self):
        """Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def IsGlobal(self):
        """Whether the settings take effect globally. 1: take effect globally; 0: take effect on the specified host list.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Name(self):
        """Allowlist name. If IsLocal is set to 1, the name is fixed as All servers. If the allowlist applies to only a single server, the name is the server's private IP Address. If the allowlist applies to multiple servers, the name is the number of servers, such as 11.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Desc(self):
        """Return the server name when the allowlist applies to only one server.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Id(self):
        """Allowlist ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Uuid(self):
        """Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Locations(self):
        """Login Location
        :rtype: str
        """
        return self._Locations

    @Locations.setter
    def Locations(self, Locations):
        self._Locations = Locations


    def _deserialize(self, params):
        if params.get("Places") is not None:
            self._Places = []
            for item in params.get("Places"):
                obj = Place()
                obj._deserialize(item)
                self._Places.append(obj)
        self._UserName = params.get("UserName")
        self._SrcIp = params.get("SrcIp")
        self._Locale = params.get("Locale")
        self._Remark = params.get("Remark")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._IsGlobal = params.get("IsGlobal")
        self._Name = params.get("Name")
        self._Desc = params.get("Desc")
        self._Id = params.get("Id")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Uuid = params.get("Uuid")
        self._Locations = params.get("Locations")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LoginWhiteLists(AbstractModel):
    """Cross-region log-in allowlist

    """

    def __init__(self):
        r"""
        :param _Id: Record ID
        :type Id: int
        :param _Uuid: Yunjing client ID
        :type Uuid: str
        :param _Places: Allowlisted regions
        :type Places: list of Place
        :param _UserName: Allowlisted users (Multiple users are separated by commas.)
        :type UserName: str
        :param _SrcIp: Allowlisted IPs (Multiple IPs are separated by commas.)
        :type SrcIp: str
        :param _IsGlobal: Whether a global rule
        :type IsGlobal: bool
        :param _CreateTime: Time of creating the allowlist
        :type CreateTime: str
        :param _ModifyTime: Time of modifying the allowlist
        :type ModifyTime: str
        :param _MachineName: Machine name
        :type MachineName: str
        :param _HostIp: Machine IP
        :type HostIp: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._Id = None
        self._Uuid = None
        self._Places = None
        self._UserName = None
        self._SrcIp = None
        self._IsGlobal = None
        self._CreateTime = None
        self._ModifyTime = None
        self._MachineName = None
        self._HostIp = None
        self._StartTime = None
        self._EndTime = None

    @property
    def Id(self):
        """Record ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Yunjing client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Places(self):
        """Allowlisted regions
        :rtype: list of Place
        """
        return self._Places

    @Places.setter
    def Places(self, Places):
        self._Places = Places

    @property
    def UserName(self):
        """Allowlisted users (Multiple users are separated by commas.)
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def SrcIp(self):
        """Allowlisted IPs (Multiple IPs are separated by commas.)
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def IsGlobal(self):
        """Whether a global rule
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def CreateTime(self):
        """Time of creating the allowlist
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Time of modifying the allowlist
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def MachineName(self):
        """Machine name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def HostIp(self):
        """Machine IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        if params.get("Places") is not None:
            self._Places = []
            for item in params.get("Places"):
                obj = Place()
                obj._deserialize(item)
                self._Places.append(obj)
        self._UserName = params.get("UserName")
        self._SrcIp = params.get("SrcIp")
        self._IsGlobal = params.get("IsGlobal")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._MachineName = params.get("MachineName")
        self._HostIp = params.get("HostIp")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Machine(AbstractModel):
    """Host list

    """

    def __init__(self):
        r"""
        :param _MachineName: Host name.
        :type MachineName: str
        :param _MachineOs: Host System.
        :type MachineOs: str
        :param _MachineStatus: Host status
<li>OFFLINE: Offline</li>
<li>ONLINE: Online</li>
<li>SHUTDOWN: Shut down</li>
<li>UNINSTALLED: Unprotected</li>
        :type MachineStatus: str
        :param _Uuid: Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :type Uuid: str
        :param _Quuid: CVM or BM Machine Unique UUID.
        :type Quuid: str
        :param _VulNum: Number of vulnerabilities
        :type VulNum: int
        :param _MachineIp: Host IP.
        :type MachineIp: str
        :param _IsProVersion: Whether the edition is Pro Edition
<li>true: yes</li>
<li>false: no</li>
        :type IsProVersion: bool
        :param _MachineWanIp: Public IP address of a host
        :type MachineWanIp: str
        :param _PayMode: Host status
<li>POSTPAY: postpaid, indicating pay-as-you-go mode  </li>
<li>PREPAY: prepaid, indicating monthly subscription mode</li>
        :type PayMode: str
        :param _MalwareNum: Number of Trojans
        :type MalwareNum: int
        :param _Tag: Tag information
        :type Tag: list of MachineTag
        :param _BaselineNum: Number of baseline risks
        :type BaselineNum: int
        :param _CyberAttackNum: Number of network risks
        :type CyberAttackNum: int
        :param _SecurityStatus: Risk status
<li>SAFE: Safe</li>
<li>RISK: Risk</li>
<li>UNKNOWN: Unknown</li>
        :type SecurityStatus: str
        :param _InvasionNum: Number of intrusion events
        :type InvasionNum: int
        :param _RegionInfo: Region information
        :type RegionInfo: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        :param _InstanceState: Instance status: TERMINATED_PRO_VERSION - terminated
        :type InstanceState: str
        :param _LicenseStatus: Tamper-proof; authorization status: 1 - authorized; 0 - unauthorized
        :type LicenseStatus: int
        :param _ProjectId: Project ID
        :type ProjectId: int
        :param _HasAssetScan: Whether there is an available asset scanning API: 0 - no; 1 - yes
        :type HasAssetScan: int
        :param _MachineType: Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :type MachineType: str
        :param _KernelVersion: Kernel version
        :type KernelVersion: str
        :param _ProtectType: Protection version: BASIC_VERSION - Basic Edition; PRO_VERSION - Professional Edition; Flagship - Ultimate Edition; GENERAL_DISCOUNT - Inclusive Edition
        :type ProtectType: str
        :param _CloudTags: Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tags
        :param _IsAddedOnTheFifteen: Whether a host added within the last 15 days: 0: no; 1: yes
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsAddedOnTheFifteen: int
        :param _IpList: Host IP List
Note: This field may return null, indicating that no valid values can be obtained.
        :type IpList: str
        :param _VpcId: Network
Note: This field may return null, indicating that no valid values can be obtained.
        :type VpcId: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _Remark: Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        """
        self._MachineName = None
        self._MachineOs = None
        self._MachineStatus = None
        self._Uuid = None
        self._Quuid = None
        self._VulNum = None
        self._MachineIp = None
        self._IsProVersion = None
        self._MachineWanIp = None
        self._PayMode = None
        self._MalwareNum = None
        self._Tag = None
        self._BaselineNum = None
        self._CyberAttackNum = None
        self._SecurityStatus = None
        self._InvasionNum = None
        self._RegionInfo = None
        self._InstanceState = None
        self._LicenseStatus = None
        self._ProjectId = None
        self._HasAssetScan = None
        self._MachineType = None
        self._KernelVersion = None
        self._ProtectType = None
        self._CloudTags = None
        self._IsAddedOnTheFifteen = None
        self._IpList = None
        self._VpcId = None
        self._MachineExtraInfo = None
        self._InstanceId = None
        self._Remark = None

    @property
    def MachineName(self):
        """Host name.
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineOs(self):
        """Host System.
        :rtype: str
        """
        return self._MachineOs

    @MachineOs.setter
    def MachineOs(self, MachineOs):
        self._MachineOs = MachineOs

    @property
    def MachineStatus(self):
        """Host status
<li>OFFLINE: Offline</li>
<li>ONLINE: Online</li>
<li>SHUTDOWN: Shut down</li>
<li>UNINSTALLED: Unprotected</li>
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def Uuid(self):
        """Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """CVM or BM Machine Unique UUID.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def VulNum(self):
        """Number of vulnerabilities
        :rtype: int
        """
        return self._VulNum

    @VulNum.setter
    def VulNum(self, VulNum):
        self._VulNum = VulNum

    @property
    def MachineIp(self):
        """Host IP.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def IsProVersion(self):
        """Whether the edition is Pro Edition
<li>true: yes</li>
<li>false: no</li>
        :rtype: bool
        """
        return self._IsProVersion

    @IsProVersion.setter
    def IsProVersion(self, IsProVersion):
        self._IsProVersion = IsProVersion

    @property
    def MachineWanIp(self):
        """Public IP address of a host
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def PayMode(self):
        """Host status
<li>POSTPAY: postpaid, indicating pay-as-you-go mode  </li>
<li>PREPAY: prepaid, indicating monthly subscription mode</li>
        :rtype: str
        """
        return self._PayMode

    @PayMode.setter
    def PayMode(self, PayMode):
        self._PayMode = PayMode

    @property
    def MalwareNum(self):
        """Number of Trojans
        :rtype: int
        """
        return self._MalwareNum

    @MalwareNum.setter
    def MalwareNum(self, MalwareNum):
        self._MalwareNum = MalwareNum

    @property
    def Tag(self):
        """Tag information
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def BaselineNum(self):
        """Number of baseline risks
        :rtype: int
        """
        return self._BaselineNum

    @BaselineNum.setter
    def BaselineNum(self, BaselineNum):
        self._BaselineNum = BaselineNum

    @property
    def CyberAttackNum(self):
        """Number of network risks
        :rtype: int
        """
        return self._CyberAttackNum

    @CyberAttackNum.setter
    def CyberAttackNum(self, CyberAttackNum):
        self._CyberAttackNum = CyberAttackNum

    @property
    def SecurityStatus(self):
        """Risk status
<li>SAFE: Safe</li>
<li>RISK: Risk</li>
<li>UNKNOWN: Unknown</li>
        :rtype: str
        """
        return self._SecurityStatus

    @SecurityStatus.setter
    def SecurityStatus(self, SecurityStatus):
        self._SecurityStatus = SecurityStatus

    @property
    def InvasionNum(self):
        """Number of intrusion events
        :rtype: int
        """
        return self._InvasionNum

    @InvasionNum.setter
    def InvasionNum(self, InvasionNum):
        self._InvasionNum = InvasionNum

    @property
    def RegionInfo(self):
        """Region information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        return self._RegionInfo

    @RegionInfo.setter
    def RegionInfo(self, RegionInfo):
        self._RegionInfo = RegionInfo

    @property
    def InstanceState(self):
        """Instance status: TERMINATED_PRO_VERSION - terminated
        :rtype: str
        """
        return self._InstanceState

    @InstanceState.setter
    def InstanceState(self, InstanceState):
        self._InstanceState = InstanceState

    @property
    def LicenseStatus(self):
        """Tamper-proof; authorization status: 1 - authorized; 0 - unauthorized
        :rtype: int
        """
        return self._LicenseStatus

    @LicenseStatus.setter
    def LicenseStatus(self, LicenseStatus):
        self._LicenseStatus = LicenseStatus

    @property
    def ProjectId(self):
        """Project ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def HasAssetScan(self):
        """Whether there is an available asset scanning API: 0 - no; 1 - yes
        :rtype: int
        """
        return self._HasAssetScan

    @HasAssetScan.setter
    def HasAssetScan(self, HasAssetScan):
        self._HasAssetScan = HasAssetScan

    @property
    def MachineType(self):
        """Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def KernelVersion(self):
        """Kernel version
        :rtype: str
        """
        return self._KernelVersion

    @KernelVersion.setter
    def KernelVersion(self, KernelVersion):
        self._KernelVersion = KernelVersion

    @property
    def ProtectType(self):
        """Protection version: BASIC_VERSION - Basic Edition; PRO_VERSION - Professional Edition; Flagship - Ultimate Edition; GENERAL_DISCOUNT - Inclusive Edition
        :rtype: str
        """
        return self._ProtectType

    @ProtectType.setter
    def ProtectType(self, ProtectType):
        self._ProtectType = ProtectType

    @property
    def CloudTags(self):
        """Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tags
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def IsAddedOnTheFifteen(self):
        """Whether a host added within the last 15 days: 0: no; 1: yes
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsAddedOnTheFifteen

    @IsAddedOnTheFifteen.setter
    def IsAddedOnTheFifteen(self, IsAddedOnTheFifteen):
        self._IsAddedOnTheFifteen = IsAddedOnTheFifteen

    @property
    def IpList(self):
        """Host IP List
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IpList

    @IpList.setter
    def IpList(self, IpList):
        self._IpList = IpList

    @property
    def VpcId(self):
        """Network
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def InstanceId(self):
        """Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def Remark(self):
        """Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._MachineName = params.get("MachineName")
        self._MachineOs = params.get("MachineOs")
        self._MachineStatus = params.get("MachineStatus")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._VulNum = params.get("VulNum")
        self._MachineIp = params.get("MachineIp")
        self._IsProVersion = params.get("IsProVersion")
        self._MachineWanIp = params.get("MachineWanIp")
        self._PayMode = params.get("PayMode")
        self._MalwareNum = params.get("MalwareNum")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._BaselineNum = params.get("BaselineNum")
        self._CyberAttackNum = params.get("CyberAttackNum")
        self._SecurityStatus = params.get("SecurityStatus")
        self._InvasionNum = params.get("InvasionNum")
        if params.get("RegionInfo") is not None:
            self._RegionInfo = RegionInfo()
            self._RegionInfo._deserialize(params.get("RegionInfo"))
        self._InstanceState = params.get("InstanceState")
        self._LicenseStatus = params.get("LicenseStatus")
        self._ProjectId = params.get("ProjectId")
        self._HasAssetScan = params.get("HasAssetScan")
        self._MachineType = params.get("MachineType")
        self._KernelVersion = params.get("KernelVersion")
        self._ProtectType = params.get("ProtectType")
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tags()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        self._IsAddedOnTheFifteen = params.get("IsAddedOnTheFifteen")
        self._IpList = params.get("IpList")
        self._VpcId = params.get("VpcId")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._InstanceId = params.get("InstanceId")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineClearHistory(AbstractModel):
    """Machine Cleanup Record Object

    """

    def __init__(self):
        r"""
        :param _Id: ID Value
        :type Id: int
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _InstanceName: Instance name
        :type InstanceName: str
        :param _PublicIp: Public IP address
        :type PublicIp: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _AgentLastOfflineTime: Client Last Offline Time
        :type AgentLastOfflineTime: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        """
        self._Id = None
        self._InstanceId = None
        self._InstanceName = None
        self._PublicIp = None
        self._PrivateIp = None
        self._AgentLastOfflineTime = None
        self._CreateTime = None

    @property
    def Id(self):
        """ID Value
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def InstanceId(self):
        """Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def InstanceName(self):
        """Instance name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def PublicIp(self):
        """Public IP address
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def AgentLastOfflineTime(self):
        """Client Last Offline Time
        :rtype: str
        """
        return self._AgentLastOfflineTime

    @AgentLastOfflineTime.setter
    def AgentLastOfflineTime(self, AgentLastOfflineTime):
        self._AgentLastOfflineTime = AgentLastOfflineTime

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._InstanceId = params.get("InstanceId")
        self._InstanceName = params.get("InstanceName")
        self._PublicIp = params.get("PublicIp")
        self._PrivateIp = params.get("PrivateIp")
        self._AgentLastOfflineTime = params.get("AgentLastOfflineTime")
        self._CreateTime = params.get("CreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineExtraInfo(AbstractModel):
    """Server Basic Information

    """

    def __init__(self):
        r"""
        :param _WanIP: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type WanIP: str
        :param _PrivateIP: Private IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type PrivateIP: str
        :param _NetworkType: Network Type. 1: VPC network; 2: Basic Network; 3: Non-Tencent Cloud Network
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetworkType: int
        :param _NetworkName: Network Name, returns vpc_id in the case of a VPC network
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetworkName: str
        :param _InstanceID: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceID: str
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        """
        self._WanIP = None
        self._PrivateIP = None
        self._NetworkType = None
        self._NetworkName = None
        self._InstanceID = None
        self._HostName = None

    @property
    def WanIP(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._WanIP

    @WanIP.setter
    def WanIP(self, WanIP):
        self._WanIP = WanIP

    @property
    def PrivateIP(self):
        """Private IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PrivateIP

    @PrivateIP.setter
    def PrivateIP(self, PrivateIP):
        self._PrivateIP = PrivateIP

    @property
    def NetworkType(self):
        """Network Type. 1: VPC network; 2: Basic Network; 3: Non-Tencent Cloud Network
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._NetworkType

    @NetworkType.setter
    def NetworkType(self, NetworkType):
        self._NetworkType = NetworkType

    @property
    def NetworkName(self):
        """Network Name, returns vpc_id in the case of a VPC network
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NetworkName

    @NetworkName.setter
    def NetworkName(self, NetworkName):
        self._NetworkName = NetworkName

    @property
    def InstanceID(self):
        """Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName


    def _deserialize(self, params):
        self._WanIP = params.get("WanIP")
        self._PrivateIP = params.get("PrivateIP")
        self._NetworkType = params.get("NetworkType")
        self._NetworkName = params.get("NetworkName")
        self._InstanceID = params.get("InstanceID")
        self._HostName = params.get("HostName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineFileTamperRule(AbstractModel):
    """Query Details of Host-related Core File Monitoring Rules

    """

    def __init__(self):
        r"""
        :param _Name: Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _RuleCategory: Rule Type. 0: System Rule; 1: User Rule
        :type RuleCategory: int
        :param _Rule: Rule
        :type Rule: list of FileTamperRule
        :param _Id: Unique ID
        :type Id: int
        """
        self._Name = None
        self._RuleCategory = None
        self._Rule = None
        self._Id = None

    @property
    def Name(self):
        """Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RuleCategory(self):
        """Rule Type. 0: System Rule; 1: User Rule
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory

    @property
    def Rule(self):
        """Rule
        :rtype: list of FileTamperRule
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._RuleCategory = params.get("RuleCategory")
        if params.get("Rule") is not None:
            self._Rule = []
            for item in params.get("Rule"):
                obj = FileTamperRule()
                obj._deserialize(item)
                self._Rule.append(obj)
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineLicenseDetail(AbstractModel):
    """Information on the authorization bound to the machine

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _PayMode: xx
        :type PayMode: int
        :param _ResourceId: xxx
        :type ResourceId: str
        :param _InquireKey: xxx
        :type InquireKey: str
        :param _SourceType: xxx
        :type SourceType: int
        """
        self._Quuid = None
        self._PayMode = None
        self._ResourceId = None
        self._InquireKey = None
        self._SourceType = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def PayMode(self):
        """xx
        :rtype: int
        """
        return self._PayMode

    @PayMode.setter
    def PayMode(self, PayMode):
        self._PayMode = PayMode

    @property
    def ResourceId(self):
        """xxx
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def InquireKey(self):
        """xxx
        :rtype: str
        """
        return self._InquireKey

    @InquireKey.setter
    def InquireKey(self, InquireKey):
        self._InquireKey = InquireKey

    @property
    def SourceType(self):
        """xxx
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._PayMode = params.get("PayMode")
        self._ResourceId = params.get("ResourceId")
        self._InquireKey = params.get("InquireKey")
        self._SourceType = params.get("SourceType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineSimple(AbstractModel):
    """Host List Shuttle Box

    """

    def __init__(self):
        r"""
        :param _MachineName: Host name.
        :type MachineName: str
        :param _MachineOs: Host System.
        :type MachineOs: str
        :param _Uuid: Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :type Uuid: str
        :param _Quuid: CVM or BM Machine Unique UUID.
        :type Quuid: str
        :param _MachineIp: Host IP.
        :type MachineIp: str
        :param _IsProVersion: Whether the edition is Pro Edition
<li>true: yes</li>
<li>false: no</li>
        :type IsProVersion: bool
        :param _MachineWanIp: Public IP address of the host
        :type MachineWanIp: str
        :param _PayMode: Host status
<li>POSTPAY: postpaid, indicating pay-as-you-go mode </li>
<li>PREPAY: prepaid, indicating monthly subscription mode</li>
        :type PayMode: str
        :param _Tag: Tag information
        :type Tag: list of MachineTag
        :param _RegionInfo: Region information
        :type RegionInfo: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        :param _InstanceState: Instance status. TERMINATED_PRO_VERSION: terminated.
        :type InstanceState: str
        :param _ProjectId: Project ID
        :type ProjectId: int
        :param _MachineType: Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :type MachineType: str
        :param _KernelVersion: Kernel version
        :type KernelVersion: str
        :param _ProtectType: Protection Edition. BASIC_VERSION: Basic Edition; PRO_VERSION: Professional Edition; Flagship: Premium Edition; GENERAL_DISCOUNT: General Discount Edition
        :type ProtectType: str
        :param _LicenseOrder: Authorization order object
Note: This field may return null, indicating that no valid values can be obtained.
        :type LicenseOrder: :class:`tencentcloud.cwp.v20180228.models.LicenseOrder`
        :param _CloudTags: Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tags
        :param _InstanceId: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        """
        self._MachineName = None
        self._MachineOs = None
        self._Uuid = None
        self._Quuid = None
        self._MachineIp = None
        self._IsProVersion = None
        self._MachineWanIp = None
        self._PayMode = None
        self._Tag = None
        self._RegionInfo = None
        self._InstanceState = None
        self._ProjectId = None
        self._MachineType = None
        self._KernelVersion = None
        self._ProtectType = None
        self._LicenseOrder = None
        self._CloudTags = None
        self._InstanceId = None

    @property
    def MachineName(self):
        """Host name.
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineOs(self):
        """Host System.
        :rtype: str
        """
        return self._MachineOs

    @MachineOs.setter
    def MachineOs(self, MachineOs):
        self._MachineOs = MachineOs

    @property
    def Uuid(self):
        """Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """CVM or BM Machine Unique UUID.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineIp(self):
        """Host IP.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def IsProVersion(self):
        """Whether the edition is Pro Edition
<li>true: yes</li>
<li>false: no</li>
        :rtype: bool
        """
        return self._IsProVersion

    @IsProVersion.setter
    def IsProVersion(self, IsProVersion):
        self._IsProVersion = IsProVersion

    @property
    def MachineWanIp(self):
        """Public IP address of the host
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def PayMode(self):
        """Host status
<li>POSTPAY: postpaid, indicating pay-as-you-go mode </li>
<li>PREPAY: prepaid, indicating monthly subscription mode</li>
        :rtype: str
        """
        return self._PayMode

    @PayMode.setter
    def PayMode(self, PayMode):
        self._PayMode = PayMode

    @property
    def Tag(self):
        """Tag information
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def RegionInfo(self):
        """Region information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        return self._RegionInfo

    @RegionInfo.setter
    def RegionInfo(self, RegionInfo):
        self._RegionInfo = RegionInfo

    @property
    def InstanceState(self):
        """Instance status. TERMINATED_PRO_VERSION: terminated.
        :rtype: str
        """
        return self._InstanceState

    @InstanceState.setter
    def InstanceState(self, InstanceState):
        self._InstanceState = InstanceState

    @property
    def ProjectId(self):
        """Project ID
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def MachineType(self):
        """Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def KernelVersion(self):
        """Kernel version
        :rtype: str
        """
        return self._KernelVersion

    @KernelVersion.setter
    def KernelVersion(self, KernelVersion):
        self._KernelVersion = KernelVersion

    @property
    def ProtectType(self):
        """Protection Edition. BASIC_VERSION: Basic Edition; PRO_VERSION: Professional Edition; Flagship: Premium Edition; GENERAL_DISCOUNT: General Discount Edition
        :rtype: str
        """
        return self._ProtectType

    @ProtectType.setter
    def ProtectType(self, ProtectType):
        self._ProtectType = ProtectType

    @property
    def LicenseOrder(self):
        """Authorization order object
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.LicenseOrder`
        """
        return self._LicenseOrder

    @LicenseOrder.setter
    def LicenseOrder(self, LicenseOrder):
        self._LicenseOrder = LicenseOrder

    @property
    def CloudTags(self):
        """Cloud Tag Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tags
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def InstanceId(self):
        """Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._MachineName = params.get("MachineName")
        self._MachineOs = params.get("MachineOs")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._MachineIp = params.get("MachineIp")
        self._IsProVersion = params.get("IsProVersion")
        self._MachineWanIp = params.get("MachineWanIp")
        self._PayMode = params.get("PayMode")
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        if params.get("RegionInfo") is not None:
            self._RegionInfo = RegionInfo()
            self._RegionInfo._deserialize(params.get("RegionInfo"))
        self._InstanceState = params.get("InstanceState")
        self._ProjectId = params.get("ProjectId")
        self._MachineType = params.get("MachineType")
        self._KernelVersion = params.get("KernelVersion")
        self._ProtectType = params.get("ProtectType")
        if params.get("LicenseOrder") is not None:
            self._LicenseOrder = LicenseOrder()
            self._LicenseOrder._deserialize(params.get("LicenseOrder"))
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tags()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineSnapshotInfo(AbstractModel):
    """Machine snapshot information

    """

    def __init__(self):
        r"""
        :param _Quuid: cvm id
        :type Quuid: str
        :param _HostName: Host name
        :type HostName: str
        :param _HostIp: Host IP address
        :type HostIp: str
        :param _SnapshotName: Snapshot name
        :type SnapshotName: str
        :param _CreateTime: Snapshot creation time
        :type CreateTime: str
        :param _DiskId: Disk ID
        :type DiskId: str
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _RegionId: Region ID
        :type RegionId: int
        :param _SnapshotId: Snapshot ID
        :type SnapshotId: str
        """
        self._Quuid = None
        self._HostName = None
        self._HostIp = None
        self._SnapshotName = None
        self._CreateTime = None
        self._DiskId = None
        self._InstanceId = None
        self._RegionId = None
        self._SnapshotId = None

    @property
    def Quuid(self):
        """cvm id
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def SnapshotName(self):
        """Snapshot name
        :rtype: str
        """
        return self._SnapshotName

    @SnapshotName.setter
    def SnapshotName(self, SnapshotName):
        self._SnapshotName = SnapshotName

    @property
    def CreateTime(self):
        """Snapshot creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def DiskId(self):
        """Disk ID
        :rtype: str
        """
        return self._DiskId

    @DiskId.setter
    def DiskId(self, DiskId):
        self._DiskId = DiskId

    @property
    def InstanceId(self):
        """Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def RegionId(self):
        """Region ID
        :rtype: int
        """
        return self._RegionId

    @RegionId.setter
    def RegionId(self, RegionId):
        self._RegionId = RegionId

    @property
    def SnapshotId(self):
        """Snapshot ID
        :rtype: str
        """
        return self._SnapshotId

    @SnapshotId.setter
    def SnapshotId(self, SnapshotId):
        self._SnapshotId = SnapshotId


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._SnapshotName = params.get("SnapshotName")
        self._CreateTime = params.get("CreateTime")
        self._DiskId = params.get("DiskId")
        self._InstanceId = params.get("InstanceId")
        self._RegionId = params.get("RegionId")
        self._SnapshotId = params.get("SnapshotId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MachineTag(AbstractModel):
    """Server tag information

    """

    def __init__(self):
        r"""
        :param _Rid: Associated tag ID
        :type Rid: int
        :param _Name: Tag name
        :type Name: str
        :param _TagId: Tag ID
        :type TagId: int
        """
        self._Rid = None
        self._Name = None
        self._TagId = None

    @property
    def Rid(self):
        """Associated tag ID
        :rtype: int
        """
        return self._Rid

    @Rid.setter
    def Rid(self, Rid):
        self._Rid = Rid

    @property
    def Name(self):
        """Tag name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TagId(self):
        """Tag ID
        :rtype: int
        """
        return self._TagId

    @TagId.setter
    def TagId(self, TagId):
        self._TagId = TagId


    def _deserialize(self, params):
        self._Rid = params.get("Rid")
        self._Name = params.get("Name")
        self._TagId = params.get("TagId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalWareList(AbstractModel):
    """Trojan list

    """

    def __init__(self):
        r"""
        :param _HostIp: Server IP address
        :type HostIp: str
        :param _Uuid: UUID
        :type Uuid: str
        :param _FilePath: Path
        :type FilePath: str
        :param _VirusName: Description
        :type VirusName: str
        :param _Status: Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
        :type Status: int
        :param _Id: Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Id: int
        :param _Alias: Host alias
        :type Alias: str
        :param _Tags: Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _FileCreateTime: First running time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileCreateTime: str
        :param _FileModifierTime: Last running time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileModifierTime: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _LatestScanTime: Last scan time
        :type LatestScanTime: str
        :param _Level: Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
        :type Level: int
        :param _CheckPlatform: Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
        :type CheckPlatform: str
        :param _ProcessExists: Whether the Trojan process exists. 0: no; 1: yes.
        :type ProcessExists: int
        :param _FileExists: Whether the Trojan file exists. 0: no; 1: yes.
        :type FileExists: int
        :param _Quuid: cvm quuid
        :type Quuid: str
        :param _MD5: Trojan sample MD5
        :type MD5: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._HostIp = None
        self._Uuid = None
        self._FilePath = None
        self._VirusName = None
        self._Status = None
        self._Id = None
        self._Alias = None
        self._Tags = None
        self._FileCreateTime = None
        self._FileModifierTime = None
        self._CreateTime = None
        self._LatestScanTime = None
        self._Level = None
        self._CheckPlatform = None
        self._ProcessExists = None
        self._FileExists = None
        self._Quuid = None
        self._MD5 = None
        self._MachineExtraInfo = None

    @property
    def HostIp(self):
        """Server IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Uuid(self):
        """UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def FilePath(self):
        """Path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def VirusName(self):
        """Description
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def Status(self):
        """Status: 4-Pending, 5-Trusted, 6-Isolated, 8-Files Deleted, 14-Processed.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        """Unique ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Alias(self):
        """Host alias
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def Tags(self):
        """Feature tag. This field has been deprecated, and no tag will be returned. Tags are returned in the details.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def FileCreateTime(self):
        """First running time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileCreateTime

    @FileCreateTime.setter
    def FileCreateTime(self, FileCreateTime):
        self._FileCreateTime = FileCreateTime

    @property
    def FileModifierTime(self):
        """Last running time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileModifierTime

    @FileModifierTime.setter
    def FileModifierTime(self, FileModifierTime):
        self._FileModifierTime = FileModifierTime

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def LatestScanTime(self):
        """Last scan time
        :rtype: str
        """
        return self._LatestScanTime

    @LatestScanTime.setter
    def LatestScanTime(self, LatestScanTime):
        self._LatestScanTime = LatestScanTime

    @property
    def Level(self):
        """Risk level. 0: unknown; 1: low; 2: medium; 3: high; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CheckPlatform(self):
        """Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.
        :rtype: str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform

    @property
    def ProcessExists(self):
        """Whether the Trojan process exists. 0: no; 1: yes.
        :rtype: int
        """
        return self._ProcessExists

    @ProcessExists.setter
    def ProcessExists(self, ProcessExists):
        self._ProcessExists = ProcessExists

    @property
    def FileExists(self):
        """Whether the Trojan file exists. 0: no; 1: yes.
        :rtype: int
        """
        return self._FileExists

    @FileExists.setter
    def FileExists(self, FileExists):
        self._FileExists = FileExists

    @property
    def Quuid(self):
        """cvm quuid
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MD5(self):
        """Trojan sample MD5
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._HostIp = params.get("HostIp")
        self._Uuid = params.get("Uuid")
        self._FilePath = params.get("FilePath")
        self._VirusName = params.get("VirusName")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._Alias = params.get("Alias")
        self._Tags = params.get("Tags")
        self._FileCreateTime = params.get("FileCreateTime")
        self._FileModifierTime = params.get("FileModifierTime")
        self._CreateTime = params.get("CreateTime")
        self._LatestScanTime = params.get("LatestScanTime")
        self._Level = params.get("Level")
        self._CheckPlatform = params.get("CheckPlatform")
        self._ProcessExists = params.get("ProcessExists")
        self._FileExists = params.get("FileExists")
        self._Quuid = params.get("Quuid")
        self._MD5 = params.get("MD5")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MaliciousRequestWhiteListInfo(AbstractModel):
    """Malicious request allowlist information

    """

    def __init__(self):
        r"""
        :param _Id: Allowlist ID
        :type Id: int
        :param _Domain: Domain name
        :type Domain: str
        :param _Mark: Remarks
        :type Mark: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Update time
        :type ModifyTime: str
        """
        self._Id = None
        self._Domain = None
        self._Mark = None
        self._CreateTime = None
        self._ModifyTime = None

    @property
    def Id(self):
        """Allowlist ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Domain(self):
        """Domain name
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def Mark(self):
        """Remarks
        :rtype: str
        """
        return self._Mark

    @Mark.setter
    def Mark(self, Mark):
        self._Mark = Mark

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Domain = params.get("Domain")
        self._Mark = params.get("Mark")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalwareInfo(AbstractModel):
    """Malicious file details

    """

    def __init__(self):
        r"""
        :param _VirusName: Virus name
        :type VirusName: str
        :param _FileSize: File size
        :type FileSize: int
        :param _MD5: File MD5
        :type MD5: str
        :param _FilePath: File address
        :type FilePath: str
        :param _FileCreateTime: First running time
        :type FileCreateTime: str
        :param _FileModifierTime: Last running time
        :type FileModifierTime: str
        :param _HarmDescribe: Severity description
        :type HarmDescribe: str
        :param _SuggestScheme: Recommended solution
        :type SuggestScheme: str
        :param _ServersName: Server name
        :type ServersName: str
        :param _HostIp: Server IP
        :type HostIp: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessID: Process ID
        :type ProcessID: str
        :param _Tags: Tag Features
        :type Tags: list of str
        :param _Breadth: Impact breadth // Not provided currently
Note: This field may return null, indicating that no valid values can be obtained.
        :type Breadth: str
        :param _Heat: Search popularity // Not provided currently
Note: This field may return null, indicating that no valid values can be obtained.
        :type Heat: str
        :param _Id: Unique ID
        :type Id: int
        :param _FileName: File name
        :type FileName: str
        :param _CreateTime: First detection time
        :type CreateTime: str
        :param _LatestScanTime: Last scan time
        :type LatestScanTime: str
        :param _Reference: Reference link
        :type Reference: str
        :param _MachineWanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _PsTree: Process tree in JSON format. pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: executed commands; ssh_service: SSH service IP; ssh_source: log-in source
.Note: This field may return null, indicating that no valid values can be obtained.
        :type PsTree: str
        :param _MachineStatus: Online status of a host: OFFLINE and ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineStatus: str
        :param _Status: Status. 4: pending; 5: trusted; 6: isolated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _Level: Risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _CheckPlatform: Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckPlatform: str
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _ModifyTime: Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _StrFileAccessTime: Last access time
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrFileAccessTime: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._VirusName = None
        self._FileSize = None
        self._MD5 = None
        self._FilePath = None
        self._FileCreateTime = None
        self._FileModifierTime = None
        self._HarmDescribe = None
        self._SuggestScheme = None
        self._ServersName = None
        self._HostIp = None
        self._ProcessName = None
        self._ProcessID = None
        self._Tags = None
        self._Breadth = None
        self._Heat = None
        self._Id = None
        self._FileName = None
        self._CreateTime = None
        self._LatestScanTime = None
        self._Reference = None
        self._MachineWanIp = None
        self._PsTree = None
        self._MachineStatus = None
        self._Status = None
        self._Level = None
        self._CheckPlatform = None
        self._Uuid = None
        self._ModifyTime = None
        self._StrFileAccessTime = None
        self._MachineExtraInfo = None

    @property
    def VirusName(self):
        """Virus name
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def FileSize(self):
        """File size
        :rtype: int
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def MD5(self):
        """File MD5
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def FilePath(self):
        """File address
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def FileCreateTime(self):
        """First running time
        :rtype: str
        """
        return self._FileCreateTime

    @FileCreateTime.setter
    def FileCreateTime(self, FileCreateTime):
        self._FileCreateTime = FileCreateTime

    @property
    def FileModifierTime(self):
        """Last running time
        :rtype: str
        """
        return self._FileModifierTime

    @FileModifierTime.setter
    def FileModifierTime(self, FileModifierTime):
        self._FileModifierTime = FileModifierTime

    @property
    def HarmDescribe(self):
        """Severity description
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def SuggestScheme(self):
        """Recommended solution
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def ServersName(self):
        """Server name
        :rtype: str
        """
        return self._ServersName

    @ServersName.setter
    def ServersName(self, ServersName):
        self._ServersName = ServersName

    @property
    def HostIp(self):
        """Server IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessID(self):
        """Process ID
        :rtype: str
        """
        return self._ProcessID

    @ProcessID.setter
    def ProcessID(self, ProcessID):
        self._ProcessID = ProcessID

    @property
    def Tags(self):
        """Tag Features
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Breadth(self):
        """Impact breadth // Not provided currently
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Breadth

    @Breadth.setter
    def Breadth(self, Breadth):
        self._Breadth = Breadth

    @property
    def Heat(self):
        """Search popularity // Not provided currently
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Heat

    @Heat.setter
    def Heat(self, Heat):
        self._Heat = Heat

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def FileName(self):
        """File name
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def CreateTime(self):
        """First detection time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def LatestScanTime(self):
        """Last scan time
        :rtype: str
        """
        return self._LatestScanTime

    @LatestScanTime.setter
    def LatestScanTime(self, LatestScanTime):
        self._LatestScanTime = LatestScanTime

    @property
    def Reference(self):
        """Reference link
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def MachineWanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def PsTree(self):
        """Process tree in JSON format. pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: executed commands; ssh_service: SSH service IP; ssh_source: log-in source
.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def MachineStatus(self):
        """Online status of a host: OFFLINE and ONLINE
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def Status(self):
        """Status. 4: pending; 5: trusted; 6: isolated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Level(self):
        """Risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CheckPlatform(self):
        """Trojan detection platforms, separated with commas. 1: cloud security engine; 2: TAV; 3: BinaryAI; 4: abnormal behavior; 5: threat intelligence.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def ModifyTime(self):
        """Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def StrFileAccessTime(self):
        """Last access time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StrFileAccessTime

    @StrFileAccessTime.setter
    def StrFileAccessTime(self, StrFileAccessTime):
        self._StrFileAccessTime = StrFileAccessTime

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._VirusName = params.get("VirusName")
        self._FileSize = params.get("FileSize")
        self._MD5 = params.get("MD5")
        self._FilePath = params.get("FilePath")
        self._FileCreateTime = params.get("FileCreateTime")
        self._FileModifierTime = params.get("FileModifierTime")
        self._HarmDescribe = params.get("HarmDescribe")
        self._SuggestScheme = params.get("SuggestScheme")
        self._ServersName = params.get("ServersName")
        self._HostIp = params.get("HostIp")
        self._ProcessName = params.get("ProcessName")
        self._ProcessID = params.get("ProcessID")
        self._Tags = params.get("Tags")
        self._Breadth = params.get("Breadth")
        self._Heat = params.get("Heat")
        self._Id = params.get("Id")
        self._FileName = params.get("FileName")
        self._CreateTime = params.get("CreateTime")
        self._LatestScanTime = params.get("LatestScanTime")
        self._Reference = params.get("Reference")
        self._MachineWanIp = params.get("MachineWanIp")
        self._PsTree = params.get("PsTree")
        self._MachineStatus = params.get("MachineStatus")
        self._Status = params.get("Status")
        self._Level = params.get("Level")
        self._CheckPlatform = params.get("CheckPlatform")
        self._Uuid = params.get("Uuid")
        self._ModifyTime = params.get("ModifyTime")
        self._StrFileAccessTime = params.get("StrFileAccessTime")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalwareRisk(AbstractModel):
    """List of information on malicious file risks

    """

    def __init__(self):
        r"""
        :param _MachineIp: Machine IP
        :type MachineIp: str
        :param _VirusName: Virus name
        :type VirusName: str
        :param _CreateTime: Detection time
        :type CreateTime: str
        :param _Id: Unique ID
        :type Id: int
        """
        self._MachineIp = None
        self._VirusName = None
        self._CreateTime = None
        self._Id = None

    @property
    def MachineIp(self):
        """Machine IP
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def VirusName(self):
        """Virus name
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def CreateTime(self):
        """Detection time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._MachineIp = params.get("MachineIp")
        self._VirusName = params.get("VirusName")
        self._CreateTime = params.get("CreateTime")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalwareRiskOverview(AbstractModel):
    """File Scan Overview Information

    """

    def __init__(self):
        r"""
        :param _HostCount: Number of affected hosts
        :type HostCount: int
        :param _ProcessCount: Exceptional Process Count
        :type ProcessCount: int
        :param _FileCount: Number of Malicious Files
        :type FileCount: int
        :param _IsFirstScan: Is it the first Scan [false: No | true: Yes].
        :type IsFirstScan: bool
        :param _ScanTime: Last scan time
        :type ScanTime: str
        """
        self._HostCount = None
        self._ProcessCount = None
        self._FileCount = None
        self._IsFirstScan = None
        self._ScanTime = None

    @property
    def HostCount(self):
        """Number of affected hosts
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ProcessCount(self):
        """Exceptional Process Count
        :rtype: int
        """
        return self._ProcessCount

    @ProcessCount.setter
    def ProcessCount(self, ProcessCount):
        self._ProcessCount = ProcessCount

    @property
    def FileCount(self):
        """Number of Malicious Files
        :rtype: int
        """
        return self._FileCount

    @FileCount.setter
    def FileCount(self, FileCount):
        self._FileCount = FileCount

    @property
    def IsFirstScan(self):
        """Is it the first Scan [false: No | true: Yes].
        :rtype: bool
        """
        return self._IsFirstScan

    @IsFirstScan.setter
    def IsFirstScan(self, IsFirstScan):
        self._IsFirstScan = IsFirstScan

    @property
    def ScanTime(self):
        """Last scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime


    def _deserialize(self, params):
        self._HostCount = params.get("HostCount")
        self._ProcessCount = params.get("ProcessCount")
        self._FileCount = params.get("FileCount")
        self._IsFirstScan = params.get("IsFirstScan")
        self._ScanTime = params.get("ScanTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalwareWhiteListAffectEvent(AbstractModel):
    """Number of events hitting allowlists

    """

    def __init__(self):
        r"""
        :param _Id: Unique ID
        :type Id: int
        :param _HostIp: Host IP
        :type HostIp: str
        :param _Md5: Affected md5
        :type Md5: str
        :param _FilePath: File path
        :type FilePath: str
        :param _CreateTime: Add time
        :type CreateTime: str
        """
        self._Id = None
        self._HostIp = None
        self._Md5 = None
        self._FilePath = None
        self._CreateTime = None

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Md5(self):
        """Affected md5
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def FilePath(self):
        """File path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def CreateTime(self):
        """Add time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._HostIp = params.get("HostIp")
        self._Md5 = params.get("Md5")
        self._FilePath = params.get("FilePath")
        self._CreateTime = params.get("CreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MalwareWhiteListInfo(AbstractModel):
    """Trojan allowlist information

    """

    def __init__(self):
        r"""
        :param _Id: Unique ID
        :type Id: int
        :param _QuuidList: CVM QUUID (Separate multiple items with commas.)
        :type QuuidList: str
        :param _Md5List: md5 list (Separate multiple items with commas.)
        :type Md5List: str
        :param _IsGlobal: Whether applies all hosts: 0 - no; 1 - yes
        :type IsGlobal: int
        :param _Mode: Allowlist mode: 0 - MD5; 1 - customization
        :type Mode: int
        :param _MatchType: Match mode: 0 - precise match; 1 - fuzzy match
        :type MatchType: int
        :param _FileName: File name (Separate multiple items with commas.)
        :type FileName: str
        :param _FileDirectory: File directory (Separate multiple items with commas.)
        :type FileDirectory: str
        :param _FileExtension: File suffix (Separate multiple items with commas.)
        :type FileExtension: str
        :param _CreateTime: Rule creation time
        :type CreateTime: str
        :param _EventsCount: Affected records
        :type EventsCount: int
        """
        self._Id = None
        self._QuuidList = None
        self._Md5List = None
        self._IsGlobal = None
        self._Mode = None
        self._MatchType = None
        self._FileName = None
        self._FileDirectory = None
        self._FileExtension = None
        self._CreateTime = None
        self._EventsCount = None

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def QuuidList(self):
        """CVM QUUID (Separate multiple items with commas.)
        :rtype: str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def Md5List(self):
        """md5 list (Separate multiple items with commas.)
        :rtype: str
        """
        return self._Md5List

    @Md5List.setter
    def Md5List(self, Md5List):
        self._Md5List = Md5List

    @property
    def IsGlobal(self):
        """Whether applies all hosts: 0 - no; 1 - yes
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Mode(self):
        """Allowlist mode: 0 - MD5; 1 - customization
        :rtype: int
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def MatchType(self):
        """Match mode: 0 - precise match; 1 - fuzzy match
        :rtype: int
        """
        return self._MatchType

    @MatchType.setter
    def MatchType(self, MatchType):
        self._MatchType = MatchType

    @property
    def FileName(self):
        """File name (Separate multiple items with commas.)
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileDirectory(self):
        """File directory (Separate multiple items with commas.)
        :rtype: str
        """
        return self._FileDirectory

    @FileDirectory.setter
    def FileDirectory(self, FileDirectory):
        self._FileDirectory = FileDirectory

    @property
    def FileExtension(self):
        """File suffix (Separate multiple items with commas.)
        :rtype: str
        """
        return self._FileExtension

    @FileExtension.setter
    def FileExtension(self, FileExtension):
        self._FileExtension = FileExtension

    @property
    def CreateTime(self):
        """Rule creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def EventsCount(self):
        """Affected records
        :rtype: int
        """
        return self._EventsCount

    @EventsCount.setter
    def EventsCount(self, EventsCount):
        self._EventsCount = EventsCount


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._QuuidList = params.get("QuuidList")
        self._Md5List = params.get("Md5List")
        self._IsGlobal = params.get("IsGlobal")
        self._Mode = params.get("Mode")
        self._MatchType = params.get("MatchType")
        self._FileName = params.get("FileName")
        self._FileDirectory = params.get("FileDirectory")
        self._FileExtension = params.get("FileExtension")
        self._CreateTime = params.get("CreateTime")
        self._EventsCount = params.get("EventsCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAutoOpenProVersionConfigRequest(AbstractModel):
    """ModifyAutoOpenProVersionConfig request structure.

    """

    def __init__(self):
        r"""
        :param _Status: Set the auto-activation status.
<li>CLOSE: off</li>
<li>OPEN: on</li>
        :type Status: str
        :param _AutoRepurchaseSwitch: Automatic purchase/expansion authorization switch, 1 by default, 0 for OFF, 1 for ON.
        :type AutoRepurchaseSwitch: int
        :param _AutoRepurchaseRenewSwitch: Auto-renewal or not for auto-purchased orders, 0 by default, 0 for OFF, 1 for ON
        :type AutoRepurchaseRenewSwitch: int
        :param _RepurchaseRenewSwitch: Whether the manually purchased order is automatically renewed (defaults to 0): 0 - off; 1 - on
        :type RepurchaseRenewSwitch: int
        """
        self._Status = None
        self._AutoRepurchaseSwitch = None
        self._AutoRepurchaseRenewSwitch = None
        self._RepurchaseRenewSwitch = None

    @property
    def Status(self):
        """Set the auto-activation status.
<li>CLOSE: off</li>
<li>OPEN: on</li>
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def AutoRepurchaseSwitch(self):
        """Automatic purchase/expansion authorization switch, 1 by default, 0 for OFF, 1 for ON.
        :rtype: int
        """
        return self._AutoRepurchaseSwitch

    @AutoRepurchaseSwitch.setter
    def AutoRepurchaseSwitch(self, AutoRepurchaseSwitch):
        self._AutoRepurchaseSwitch = AutoRepurchaseSwitch

    @property
    def AutoRepurchaseRenewSwitch(self):
        """Auto-renewal or not for auto-purchased orders, 0 by default, 0 for OFF, 1 for ON
        :rtype: int
        """
        return self._AutoRepurchaseRenewSwitch

    @AutoRepurchaseRenewSwitch.setter
    def AutoRepurchaseRenewSwitch(self, AutoRepurchaseRenewSwitch):
        self._AutoRepurchaseRenewSwitch = AutoRepurchaseRenewSwitch

    @property
    def RepurchaseRenewSwitch(self):
        """Whether the manually purchased order is automatically renewed (defaults to 0): 0 - off; 1 - on
        :rtype: int
        """
        return self._RepurchaseRenewSwitch

    @RepurchaseRenewSwitch.setter
    def RepurchaseRenewSwitch(self, RepurchaseRenewSwitch):
        self._RepurchaseRenewSwitch = RepurchaseRenewSwitch


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._AutoRepurchaseSwitch = params.get("AutoRepurchaseSwitch")
        self._AutoRepurchaseRenewSwitch = params.get("AutoRepurchaseRenewSwitch")
        self._RepurchaseRenewSwitch = params.get("RepurchaseRenewSwitch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAutoOpenProVersionConfigResponse(AbstractModel):
    """ModifyAutoOpenProVersionConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBanModeRequest(AbstractModel):
    """ModifyBanMode request structure.

    """

    def __init__(self):
        r"""
        :param _Mode: Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :type Mode: str
        :param _Ttl: Blocking time. This parameter is valid in standard blocking mode.
        :type Ttl: int
        """
        self._Mode = None
        self._Ttl = None

    @property
    def Mode(self):
        """Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def Ttl(self):
        """Blocking time. This parameter is valid in standard blocking mode.
        :rtype: int
        """
        return self._Ttl

    @Ttl.setter
    def Ttl(self, Ttl):
        self._Ttl = Ttl


    def _deserialize(self, params):
        self._Mode = params.get("Mode")
        self._Ttl = params.get("Ttl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBanModeResponse(AbstractModel):
    """ModifyBanMode response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBanStatusRequest(AbstractModel):
    """ModifyBanStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Status: Blocking switch status: 0 -- off; 1 -- advanced blocking; 2 -- basic blocking (Only blocklisted IPs in the intelligence database will be blocked.)
        :type Status: int
        :param _OpenSmartMode: Whether to enable intelligent over-allowing mode
        :type OpenSmartMode: bool
        """
        self._Status = None
        self._OpenSmartMode = None

    @property
    def Status(self):
        """Blocking switch status: 0 -- off; 1 -- advanced blocking; 2 -- basic blocking (Only blocklisted IPs in the intelligence database will be blocked.)
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def OpenSmartMode(self):
        """Whether to enable intelligent over-allowing mode
        :rtype: bool
        """
        return self._OpenSmartMode

    @OpenSmartMode.setter
    def OpenSmartMode(self, OpenSmartMode):
        self._OpenSmartMode = OpenSmartMode


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._OpenSmartMode = params.get("OpenSmartMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBanStatusResponse(AbstractModel):
    """ModifyBanStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBanWhiteListRequest(AbstractModel):
    """ModifyBanWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Rules: Modify allowlist rule item
        :type Rules: :class:`tencentcloud.cwp.v20180228.models.BanWhiteList`
        """
        self._Rules = None

    @property
    def Rules(self):
        """Modify allowlist rule item
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BanWhiteList`
        """
        return self._Rules

    @Rules.setter
    def Rules(self, Rules):
        self._Rules = Rules


    def _deserialize(self, params):
        if params.get("Rules") is not None:
            self._Rules = BanWhiteList()
            self._Rules._deserialize(params.get("Rules"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBanWhiteListResponse(AbstractModel):
    """ModifyBanWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBaselinePolicyRequest(AbstractModel):
    """ModifyBaselinePolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Data: None
        :type Data: :class:`tencentcloud.cwp.v20180228.models.BaselinePolicy`
        :param _Filters: <li>RuleName - String - required: no - rule name</li>
<li>CategoryId - int64 - required: no - customized filtering: -1 - rule category</li>
<li>RuleType - int - required: no - 0: system default; 1: customized - rule type</li>
        :type Filters: list of Filter
        :param _SelectAll: Whether to select all based on the filtering criteria
        :type SelectAll: int
        """
        self._Data = None
        self._Filters = None
        self._SelectAll = None

    @property
    def Data(self):
        """None
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BaselinePolicy`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def Filters(self):
        """<li>RuleName - String - required: no - rule name</li>
<li>CategoryId - int64 - required: no - customized filtering: -1 - rule category</li>
<li>RuleType - int - required: no - 0: system default; 1: customized - rule type</li>
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def SelectAll(self):
        """Whether to select all based on the filtering criteria
        :rtype: int
        """
        return self._SelectAll

    @SelectAll.setter
    def SelectAll(self, SelectAll):
        self._SelectAll = SelectAll


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = BaselinePolicy()
            self._Data._deserialize(params.get("Data"))
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._SelectAll = params.get("SelectAll")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBaselinePolicyResponse(AbstractModel):
    """ModifyBaselinePolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBashPolicyRequest(AbstractModel):
    """ModifyBashPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Policy: Specific policy configuration
        :type Policy: :class:`tencentcloud.cwp.v20180228.models.BashPolicy`
        """
        self._Policy = None

    @property
    def Policy(self):
        """Specific policy configuration
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BashPolicy`
        """
        return self._Policy

    @Policy.setter
    def Policy(self, Policy):
        self._Policy = Policy


    def _deserialize(self, params):
        if params.get("Policy") is not None:
            self._Policy = BashPolicy()
            self._Policy._deserialize(params.get("Policy"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBashPolicyResponse(AbstractModel):
    """ModifyBashPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBashPolicyStatusRequest(AbstractModel):
    """ModifyBashPolicyStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Enable: Whether to disable
        :type Enable: int
        """
        self._Id = None
        self._Enable = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Enable(self):
        """Whether to disable
        :rtype: int
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Enable = params.get("Enable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBashPolicyStatusResponse(AbstractModel):
    """ModifyBashPolicyStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBruteAttackRulesRequest(AbstractModel):
    """ModifyBruteAttackRules request structure.

    """

    def __init__(self):
        r"""
        :param _Rules: Rule of determining brute force cracking
        :type Rules: list of BruteAttackRule
        """
        self._Rules = None

    @property
    def Rules(self):
        """Rule of determining brute force cracking
        :rtype: list of BruteAttackRule
        """
        return self._Rules

    @Rules.setter
    def Rules(self, Rules):
        self._Rules = Rules


    def _deserialize(self, params):
        if params.get("Rules") is not None:
            self._Rules = []
            for item in params.get("Rules"):
                obj = BruteAttackRule()
                obj._deserialize(item)
                self._Rules.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBruteAttackRulesResponse(AbstractModel):
    """ModifyBruteAttackRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyEventAttackStatusRequest(AbstractModel):
    """ModifyEventAttackStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: An array of event IDs that need to be modified, and batch operation is supported.
        :type Ids: list of int non-negative
        :param _All: Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :type All: bool
        :param _Status: 0: Pending 1: Processed 2: Allowlisted 3: Ignored 4: Deleted 
        :type Status: int
        :param _Filters: Filter criteria
<li>Type: String attack status: 0: attempted attack; 1: attack succeeded: required: no</li>
<li>Status: String event processing status: 0: pending 1: processed; 2: allowlisted; 3: ignored; 4: deleted: required: no</li>
<li>SrcIP - String source IP - required: no</li>
<li>DstPort - String attack target port - required: no</li>
<li>MachineName - String host name - required: no</li>
<li>InstanceID - String host instance ID - required: no</li>
<li>Quuids - String host CVM UUID - required: no</li>

        :type Filters: list of Filters
        :param _ExcludeId: Excluded IDs
        :type ExcludeId: list of int non-negative
        """
        self._Ids = None
        self._All = None
        self._Status = None
        self._Filters = None
        self._ExcludeId = None

    @property
    def Ids(self):
        """An array of event IDs that need to be modified, and batch operation is supported.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def All(self):
        """Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Status(self):
        """0: Pending 1: Processed 2: Allowlisted 3: Ignored 4: Deleted 
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Filters(self):
        """Filter criteria
<li>Type: String attack status: 0: attempted attack; 1: attack succeeded: required: no</li>
<li>Status: String event processing status: 0: pending 1: processed; 2: allowlisted; 3: ignored; 4: deleted: required: no</li>
<li>SrcIP - String source IP - required: no</li>
<li>DstPort - String attack target port - required: no</li>
<li>MachineName - String host name - required: no</li>
<li>InstanceID - String host instance ID - required: no</li>
<li>Quuids - String host CVM UUID - required: no</li>

        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExcludeId(self):
        """Excluded IDs
        :rtype: list of int non-negative
        """
        return self._ExcludeId

    @ExcludeId.setter
    def ExcludeId(self, ExcludeId):
        self._ExcludeId = ExcludeId


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._All = params.get("All")
        self._Status = params.get("Status")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExcludeId = params.get("ExcludeId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyEventAttackStatusResponse(AbstractModel):
    """ModifyEventAttackStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyFileTamperEventsRequest(AbstractModel):
    """ModifyFileTamperEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Status: Status. 1: added to allowlist; 2: deleted; 3: ignored.
        :type Status: int
        :param _Ids: Corresponding event ID
        :type Ids: list of int non-negative
        """
        self._Status = None
        self._Ids = None

    @property
    def Status(self):
        """Status. 1: added to allowlist; 2: deleted; 3: ignored.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Ids(self):
        """Corresponding event ID
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFileTamperEventsResponse(AbstractModel):
    """ModifyFileTamperEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyFileTamperRuleRequest(AbstractModel):
    """ModifyFileTamperRule request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Rule name
        :type Name: str
        :param _Rules: Rule content
        :type Rules: list of FileTamperRule
        :param _IsGlobal: Whether the rule is global (not global by default). 0: no; 1: yes. If the value is 1, Uuids can be left blank.
        :type IsGlobal: int
        :param _Status: Enabling status. 0: enabled; 1: disabled.
        :type Status: int
        :param _Id: Rule ID. If this parameter is left blank or set to 0, the rule is to be added.
        :type Id: int
        :param _Uuids: UUID array of affected hosts
        :type Uuids: list of str
        :param _Level: Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :type Level: int
        :param _AddWhiteType: Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all objects that meet the conditions to the allowlist</li>
        :type AddWhiteType: str
        """
        self._Name = None
        self._Rules = None
        self._IsGlobal = None
        self._Status = None
        self._Id = None
        self._Uuids = None
        self._Level = None
        self._AddWhiteType = None

    @property
    def Name(self):
        """Rule name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Rules(self):
        """Rule content
        :rtype: list of FileTamperRule
        """
        return self._Rules

    @Rules.setter
    def Rules(self, Rules):
        self._Rules = Rules

    @property
    def IsGlobal(self):
        """Whether the rule is global (not global by default). 0: no; 1: yes. If the value is 1, Uuids can be left blank.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Status(self):
        """Enabling status. 0: enabled; 1: disabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        """Rule ID. If this parameter is left blank or set to 0, the rule is to be added.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuids(self):
        """UUID array of affected hosts
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def Level(self):
        """Risk Level. 0: None; 1: High-Risk; 2: Medium-Risk; 3: Low-Risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def AddWhiteType(self):
        """Allowlisted processing type
<li>cur: add the current items to the allowlist</li>
<li>all: add all objects that meet the conditions to the allowlist</li>
        :rtype: str
        """
        return self._AddWhiteType

    @AddWhiteType.setter
    def AddWhiteType(self, AddWhiteType):
        self._AddWhiteType = AddWhiteType


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("Rules") is not None:
            self._Rules = []
            for item in params.get("Rules"):
                obj = FileTamperRule()
                obj._deserialize(item)
                self._Rules.append(obj)
        self._IsGlobal = params.get("IsGlobal")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._Uuids = params.get("Uuids")
        self._Level = params.get("Level")
        self._AddWhiteType = params.get("AddWhiteType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFileTamperRuleResponse(AbstractModel):
    """ModifyFileTamperRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyFileTamperRuleStatusRequest(AbstractModel):
    """ModifyFileTamperRuleStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Status: 0: enable; 1: disable; 2: delete
        :type Status: int
        :param _Ids: Corresponding event ID
        :type Ids: list of int non-negative
        :param _RuleCategory: Whether a system rule: 0: system rule; 1: user defined rule. System rule Status cannot be deleted.
        :type RuleCategory: int
        """
        self._Status = None
        self._Ids = None
        self._RuleCategory = None

    @property
    def Status(self):
        """0: enable; 1: disable; 2: delete
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Ids(self):
        """Corresponding event ID
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def RuleCategory(self):
        """Whether a system rule: 0: system rule; 1: user defined rule. System rule Status cannot be deleted.
        :rtype: int
        """
        return self._RuleCategory

    @RuleCategory.setter
    def RuleCategory(self, RuleCategory):
        self._RuleCategory = RuleCategory


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Ids = params.get("Ids")
        self._RuleCategory = params.get("RuleCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFileTamperRuleStatusResponse(AbstractModel):
    """ModifyFileTamperRuleStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyJavaMemShellPluginSwitchRequest(AbstractModel):
    """ModifyJavaMemShellPluginSwitch request structure.

    """

    def __init__(self):
        r"""
        :param _Quuids: Host QUUID array
        :type Quuids: list of str
        :param _JavaShellStatus: Plugin target status. 0: off; 1: on
        :type JavaShellStatus: int
        """
        self._Quuids = None
        self._JavaShellStatus = None

    @property
    def Quuids(self):
        """Host QUUID array
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def JavaShellStatus(self):
        """Plugin target status. 0: off; 1: on
        :rtype: int
        """
        return self._JavaShellStatus

    @JavaShellStatus.setter
    def JavaShellStatus(self, JavaShellStatus):
        self._JavaShellStatus = JavaShellStatus


    def _deserialize(self, params):
        self._Quuids = params.get("Quuids")
        self._JavaShellStatus = params.get("JavaShellStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyJavaMemShellPluginSwitchResponse(AbstractModel):
    """ModifyJavaMemShellPluginSwitch response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyJavaMemShellsStatusRequest(AbstractModel):
    """ModifyJavaMemShellsStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Status: Target Processing Status: 0 - Pending, 1 - Allowlisted, 2 - Deleted, 3 - Ignored, 4 - Manually Processed
        :type Status: int
        :param _Ids: Event ID Array
        :type Ids: list of int non-negative
        """
        self._Status = None
        self._Ids = None

    @property
    def Status(self):
        """Target Processing Status: 0 - Pending, 1 - Allowlisted, 2 - Deleted, 3 - Ignored, 4 - Manually Processed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Ids(self):
        """Event ID Array
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyJavaMemShellsStatusResponse(AbstractModel):
    """ModifyJavaMemShellsStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLicenseBindsRequest(AbstractModel):
    """ModifyLicenseBinds request structure.

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _LicenseType: Authorization type
        :type LicenseType: int
        :param _IsAll: Whether all machines are involved. (If the total number of machines exceeds the available authorizations in the current order, some machines will be skipped.)
        :type IsAll: bool
        :param _QuuidList: List of QUUIDs of machines to be bound. This parameter is required when IsAll is set to false. Otherwise, it is ignored. Maximum number: 2,000.
        :type QuuidList: list of str
        """
        self._ResourceId = None
        self._LicenseType = None
        self._IsAll = None
        self._QuuidList = None

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType

    @property
    def IsAll(self):
        """Whether all machines are involved. (If the total number of machines exceeds the available authorizations in the current order, some machines will be skipped.)
        :rtype: bool
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll

    @property
    def QuuidList(self):
        """List of QUUIDs of machines to be bound. This parameter is required when IsAll is set to false. Otherwise, it is ignored. Maximum number: 2,000.
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._LicenseType = params.get("LicenseType")
        self._IsAll = params.get("IsAll")
        self._QuuidList = params.get("QuuidList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLicenseBindsResponse(AbstractModel):
    """ModifyLicenseBinds response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyLicenseOrderRequest(AbstractModel):
    """ModifyLicenseOrder request structure.

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _InquireNum: Expected value. If the current value is 10, fill in a larger value for scale-out, a smaller value for scale-down (the expected value must be no less than the usage value during scale-down), or the same value for no change.
        :type InquireNum: int
        :param _ProjectId: Project ID. Fill in the original value for no change.
        :type ProjectId: int
        :param _Alias: Resource alias. Fill in the original value for no change.
        :type Alias: str
        """
        self._ResourceId = None
        self._InquireNum = None
        self._ProjectId = None
        self._Alias = None

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def InquireNum(self):
        """Expected value. If the current value is 10, fill in a larger value for scale-out, a smaller value for scale-down (the expected value must be no less than the usage value during scale-down), or the same value for no change.
        :rtype: int
        """
        return self._InquireNum

    @InquireNum.setter
    def InquireNum(self, InquireNum):
        self._InquireNum = InquireNum

    @property
    def ProjectId(self):
        """Project ID. Fill in the original value for no change.
        :rtype: int
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def Alias(self):
        """Resource alias. Fill in the original value for no change.
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._InquireNum = params.get("InquireNum")
        self._ProjectId = params.get("ProjectId")
        self._Alias = params.get("Alias")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLicenseOrderResponse(AbstractModel):
    """ModifyLicenseOrder response structure.

    """

    def __init__(self):
        r"""
        :param _DealNames: Order ID
        :type DealNames: list of str
        :param _ResourceIds: Resource ID
        :type ResourceIds: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DealNames = None
        self._ResourceIds = None
        self._RequestId = None

    @property
    def DealNames(self):
        """Order ID
        :rtype: list of str
        """
        return self._DealNames

    @DealNames.setter
    def DealNames(self, DealNames):
        self._DealNames = DealNames

    @property
    def ResourceIds(self):
        """Resource ID
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DealNames = params.get("DealNames")
        self._ResourceIds = params.get("ResourceIds")
        self._RequestId = params.get("RequestId")


class ModifyLogKafkaAccessRequest(AbstractModel):
    """ModifyLogKafkaAccess request structure.

    """

    def __init__(self):
        r"""
        :param _KafkaEnvName: Instance name, e.g. CWPP test environment
        :type KafkaEnvName: str
        :param _KafkaId: Instance ID
        :type KafkaId: str
        :param _AccessType: Access method. 1 - public network domain name access; 2 - support environment access
        :type AccessType: int
        :param _AccessAddr: Access address
        :type AccessAddr: str
        :param _Username: Username
        :type Username: str
        :param _HasPwd: 0 - without password; 1 - with password
        :type HasPwd: int
        :param _DeliverTypeDetails: Log shipping type configuration details
        :type DeliverTypeDetails: list of DeliverTypeDetails
        :param _InsVersion: Kafka version
        :type InsVersion: str
        :param _Zone: Region
        :type Zone: str
        :param _Az: Availability zone
        :type Az: str
        :param _VpcId: vpcid address
        :type VpcId: str
        :param _SubnetId: Subnet ID
        :type SubnetId: str
        :param _DeliverStatus: Shipping status. 1 - healthy; 2 - alarm; 3 - abnormal
        :type DeliverStatus: int
        :param _BandWidth: Peak bandwidth
        :type BandWidth: int
        :param _DiskSize: Disk capacity
        :type DiskSize: int
        :param _Pwd: Password, AES encryption
        :type Pwd: str
        """
        self._KafkaEnvName = None
        self._KafkaId = None
        self._AccessType = None
        self._AccessAddr = None
        self._Username = None
        self._HasPwd = None
        self._DeliverTypeDetails = None
        self._InsVersion = None
        self._Zone = None
        self._Az = None
        self._VpcId = None
        self._SubnetId = None
        self._DeliverStatus = None
        self._BandWidth = None
        self._DiskSize = None
        self._Pwd = None

    @property
    def KafkaEnvName(self):
        """Instance name, e.g. CWPP test environment
        :rtype: str
        """
        return self._KafkaEnvName

    @KafkaEnvName.setter
    def KafkaEnvName(self, KafkaEnvName):
        self._KafkaEnvName = KafkaEnvName

    @property
    def KafkaId(self):
        """Instance ID
        :rtype: str
        """
        return self._KafkaId

    @KafkaId.setter
    def KafkaId(self, KafkaId):
        self._KafkaId = KafkaId

    @property
    def AccessType(self):
        """Access method. 1 - public network domain name access; 2 - support environment access
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType

    @property
    def AccessAddr(self):
        """Access address
        :rtype: str
        """
        return self._AccessAddr

    @AccessAddr.setter
    def AccessAddr(self, AccessAddr):
        self._AccessAddr = AccessAddr

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def HasPwd(self):
        """0 - without password; 1 - with password
        :rtype: int
        """
        return self._HasPwd

    @HasPwd.setter
    def HasPwd(self, HasPwd):
        self._HasPwd = HasPwd

    @property
    def DeliverTypeDetails(self):
        """Log shipping type configuration details
        :rtype: list of DeliverTypeDetails
        """
        return self._DeliverTypeDetails

    @DeliverTypeDetails.setter
    def DeliverTypeDetails(self, DeliverTypeDetails):
        self._DeliverTypeDetails = DeliverTypeDetails

    @property
    def InsVersion(self):
        """Kafka version
        :rtype: str
        """
        return self._InsVersion

    @InsVersion.setter
    def InsVersion(self, InsVersion):
        self._InsVersion = InsVersion

    @property
    def Zone(self):
        """Region
        :rtype: str
        """
        return self._Zone

    @Zone.setter
    def Zone(self, Zone):
        self._Zone = Zone

    @property
    def Az(self):
        """Availability zone
        :rtype: str
        """
        return self._Az

    @Az.setter
    def Az(self, Az):
        self._Az = Az

    @property
    def VpcId(self):
        """vpcid address
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """Subnet ID
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def DeliverStatus(self):
        """Shipping status. 1 - healthy; 2 - alarm; 3 - abnormal
        :rtype: int
        """
        return self._DeliverStatus

    @DeliverStatus.setter
    def DeliverStatus(self, DeliverStatus):
        self._DeliverStatus = DeliverStatus

    @property
    def BandWidth(self):
        """Peak bandwidth
        :rtype: int
        """
        return self._BandWidth

    @BandWidth.setter
    def BandWidth(self, BandWidth):
        self._BandWidth = BandWidth

    @property
    def DiskSize(self):
        """Disk capacity
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def Pwd(self):
        """Password, AES encryption
        :rtype: str
        """
        return self._Pwd

    @Pwd.setter
    def Pwd(self, Pwd):
        self._Pwd = Pwd


    def _deserialize(self, params):
        self._KafkaEnvName = params.get("KafkaEnvName")
        self._KafkaId = params.get("KafkaId")
        self._AccessType = params.get("AccessType")
        self._AccessAddr = params.get("AccessAddr")
        self._Username = params.get("Username")
        self._HasPwd = params.get("HasPwd")
        if params.get("DeliverTypeDetails") is not None:
            self._DeliverTypeDetails = []
            for item in params.get("DeliverTypeDetails"):
                obj = DeliverTypeDetails()
                obj._deserialize(item)
                self._DeliverTypeDetails.append(obj)
        self._InsVersion = params.get("InsVersion")
        self._Zone = params.get("Zone")
        self._Az = params.get("Az")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._DeliverStatus = params.get("DeliverStatus")
        self._BandWidth = params.get("BandWidth")
        self._DiskSize = params.get("DiskSize")
        self._Pwd = params.get("Pwd")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLogKafkaAccessResponse(AbstractModel):
    """ModifyLogKafkaAccess response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLogKafkaDeliverTypeRequest(AbstractModel):
    """ModifyLogKafkaDeliverType request structure.

    """

    def __init__(self):
        r"""
        :param _SecurityType: Security module type. 1: intrusion detection; 2: vulnerability management; 3: baseline management; 4: advanced defense; 5: client security; 6: asset fingerprint.
        :type SecurityType: int
        :param _LogType: Log type of the security module
        :type LogType: list of int non-negative
        :param _Switch: Shipping enabling status. 0: disabled; 1: enabled.
        :type Switch: int
        :param _TopicId: kafka topic id
        :type TopicId: str
        :param _TopicName: kafka topic name
        :type TopicName: str
        """
        self._SecurityType = None
        self._LogType = None
        self._Switch = None
        self._TopicId = None
        self._TopicName = None

    @property
    def SecurityType(self):
        """Security module type. 1: intrusion detection; 2: vulnerability management; 3: baseline management; 4: advanced defense; 5: client security; 6: asset fingerprint.
        :rtype: int
        """
        return self._SecurityType

    @SecurityType.setter
    def SecurityType(self, SecurityType):
        self._SecurityType = SecurityType

    @property
    def LogType(self):
        """Log type of the security module
        :rtype: list of int non-negative
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def Switch(self):
        """Shipping enabling status. 0: disabled; 1: enabled.
        :rtype: int
        """
        return self._Switch

    @Switch.setter
    def Switch(self, Switch):
        self._Switch = Switch

    @property
    def TopicId(self):
        """kafka topic id
        :rtype: str
        """
        return self._TopicId

    @TopicId.setter
    def TopicId(self, TopicId):
        self._TopicId = TopicId

    @property
    def TopicName(self):
        """kafka topic name
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName


    def _deserialize(self, params):
        self._SecurityType = params.get("SecurityType")
        self._LogType = params.get("LogType")
        self._Switch = params.get("Switch")
        self._TopicId = params.get("TopicId")
        self._TopicName = params.get("TopicName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLogKafkaDeliverTypeResponse(AbstractModel):
    """ModifyLogKafkaDeliverType response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLogKafkaStateRequest(AbstractModel):
    """ModifyLogKafkaState request structure.

    """

    def __init__(self):
        r"""
        :param _KafkaEnvName: Instance name, e.g. CWPP test environment
        :type KafkaEnvName: str
        :param _KafkaId: Instance ID
        :type KafkaId: str
        :param _AccessType: Access method: 1 - public network domain name access; 2 - support environment access
        :type AccessType: int
        :param _AccessAddr: Access address
        :type AccessAddr: str
        :param _Username: Username
        :type Username: str
        :param _Zone: Region
        :type Zone: str
        :param _Az: Availability zone
        :type Az: str
        :param _VpcId: Network
        :type VpcId: str
        :param _SubnetId: Subnet
        :type SubnetId: str
        :param _DeliverStatus: Shipping status: 1 - healthy; 2 - alarm; 3 - abnormal
        :type DeliverStatus: int
        :param _InsVersion: Kafka edition
        :type InsVersion: str
        :param _BandWidth: Peak bandwidth
        :type BandWidth: int
        :param _DiskSize: Disk capacity
        :type DiskSize: int
        """
        self._KafkaEnvName = None
        self._KafkaId = None
        self._AccessType = None
        self._AccessAddr = None
        self._Username = None
        self._Zone = None
        self._Az = None
        self._VpcId = None
        self._SubnetId = None
        self._DeliverStatus = None
        self._InsVersion = None
        self._BandWidth = None
        self._DiskSize = None

    @property
    def KafkaEnvName(self):
        """Instance name, e.g. CWPP test environment
        :rtype: str
        """
        return self._KafkaEnvName

    @KafkaEnvName.setter
    def KafkaEnvName(self, KafkaEnvName):
        self._KafkaEnvName = KafkaEnvName

    @property
    def KafkaId(self):
        """Instance ID
        :rtype: str
        """
        return self._KafkaId

    @KafkaId.setter
    def KafkaId(self, KafkaId):
        self._KafkaId = KafkaId

    @property
    def AccessType(self):
        """Access method: 1 - public network domain name access; 2 - support environment access
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType

    @property
    def AccessAddr(self):
        """Access address
        :rtype: str
        """
        return self._AccessAddr

    @AccessAddr.setter
    def AccessAddr(self, AccessAddr):
        self._AccessAddr = AccessAddr

    @property
    def Username(self):
        """Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Zone(self):
        """Region
        :rtype: str
        """
        return self._Zone

    @Zone.setter
    def Zone(self, Zone):
        self._Zone = Zone

    @property
    def Az(self):
        """Availability zone
        :rtype: str
        """
        return self._Az

    @Az.setter
    def Az(self, Az):
        self._Az = Az

    @property
    def VpcId(self):
        """Network
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """Subnet
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def DeliverStatus(self):
        """Shipping status: 1 - healthy; 2 - alarm; 3 - abnormal
        :rtype: int
        """
        return self._DeliverStatus

    @DeliverStatus.setter
    def DeliverStatus(self, DeliverStatus):
        self._DeliverStatus = DeliverStatus

    @property
    def InsVersion(self):
        """Kafka edition
        :rtype: str
        """
        return self._InsVersion

    @InsVersion.setter
    def InsVersion(self, InsVersion):
        self._InsVersion = InsVersion

    @property
    def BandWidth(self):
        """Peak bandwidth
        :rtype: int
        """
        return self._BandWidth

    @BandWidth.setter
    def BandWidth(self, BandWidth):
        self._BandWidth = BandWidth

    @property
    def DiskSize(self):
        """Disk capacity
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize


    def _deserialize(self, params):
        self._KafkaEnvName = params.get("KafkaEnvName")
        self._KafkaId = params.get("KafkaId")
        self._AccessType = params.get("AccessType")
        self._AccessAddr = params.get("AccessAddr")
        self._Username = params.get("Username")
        self._Zone = params.get("Zone")
        self._Az = params.get("Az")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._DeliverStatus = params.get("DeliverStatus")
        self._InsVersion = params.get("InsVersion")
        self._BandWidth = params.get("BandWidth")
        self._DiskSize = params.get("DiskSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLogKafkaStateResponse(AbstractModel):
    """ModifyLogKafkaState response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLogStorageConfigRequest(AbstractModel):
    """ModifyLogStorageConfig request structure.

    """

    def __init__(self):
        r"""
        :param _IsModifyPeriod: Whether to modify the validity period
        :type IsModifyPeriod: bool
        :param _Type: Storage type: string array
        :type Type: list of str
        :param _Period: Log retention days. The value 3640 indicates that the number of days is unlimited.
        :type Period: int
        """
        self._IsModifyPeriod = None
        self._Type = None
        self._Period = None

    @property
    def IsModifyPeriod(self):
        """Whether to modify the validity period
        :rtype: bool
        """
        return self._IsModifyPeriod

    @IsModifyPeriod.setter
    def IsModifyPeriod(self, IsModifyPeriod):
        self._IsModifyPeriod = IsModifyPeriod

    @property
    def Type(self):
        """Storage type: string array
        :rtype: list of str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Period(self):
        """Log retention days. The value 3640 indicates that the number of days is unlimited.
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period


    def _deserialize(self, params):
        self._IsModifyPeriod = params.get("IsModifyPeriod")
        self._Type = params.get("Type")
        self._Period = params.get("Period")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLogStorageConfigResponse(AbstractModel):
    """ModifyLogStorageConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLoginWhiteInfoRequest(AbstractModel):
    """ModifyLoginWhiteInfo request structure.

    """

    def __init__(self):
        r"""
        :param _HostLoginWhiteObj: Update the allowlist information entity
        :type HostLoginWhiteObj: :class:`tencentcloud.cwp.v20180228.models.UpdateHostLoginWhiteObj`
        """
        self._HostLoginWhiteObj = None

    @property
    def HostLoginWhiteObj(self):
        """Update the allowlist information entity
        :rtype: :class:`tencentcloud.cwp.v20180228.models.UpdateHostLoginWhiteObj`
        """
        return self._HostLoginWhiteObj

    @HostLoginWhiteObj.setter
    def HostLoginWhiteObj(self, HostLoginWhiteObj):
        self._HostLoginWhiteObj = HostLoginWhiteObj


    def _deserialize(self, params):
        if params.get("HostLoginWhiteObj") is not None:
            self._HostLoginWhiteObj = UpdateHostLoginWhiteObj()
            self._HostLoginWhiteObj._deserialize(params.get("HostLoginWhiteObj"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLoginWhiteInfoResponse(AbstractModel):
    """ModifyLoginWhiteInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyLoginWhiteRecordRequest(AbstractModel):
    """ModifyLoginWhiteRecord request structure.

    """

    def __init__(self):
        r"""
        :param _UserName: Allowlisted users (Multiple users are separated by commas.)
        :type UserName: str
        :param _SrcIp: Allowlisted dimension information recorded after the update
        :type SrcIp: str
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _Remark: Remarks
        :type Remark: str
        :param _IsGlobal: Whether it applies to all servers: 0: no; 1: yes
        :type IsGlobal: int
        :param _Id: Allowlist ID
        :type Id: int
        :param _Hosts: Server list
        :type Hosts: list of HostInfo
        :param _Places: Region list
        :type Places: list of Place
        """
        self._UserName = None
        self._SrcIp = None
        self._StartTime = None
        self._EndTime = None
        self._Remark = None
        self._IsGlobal = None
        self._Id = None
        self._Hosts = None
        self._Places = None

    @property
    def UserName(self):
        """Allowlisted users (Multiple users are separated by commas.)
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def SrcIp(self):
        """Allowlisted dimension information recorded after the update
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Remark(self):
        """Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def IsGlobal(self):
        """Whether it applies to all servers: 0: no; 1: yes
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Id(self):
        """Allowlist ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Hosts(self):
        """Server list
        :rtype: list of HostInfo
        """
        return self._Hosts

    @Hosts.setter
    def Hosts(self, Hosts):
        self._Hosts = Hosts

    @property
    def Places(self):
        """Region list
        :rtype: list of Place
        """
        return self._Places

    @Places.setter
    def Places(self, Places):
        self._Places = Places


    def _deserialize(self, params):
        self._UserName = params.get("UserName")
        self._SrcIp = params.get("SrcIp")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Remark = params.get("Remark")
        self._IsGlobal = params.get("IsGlobal")
        self._Id = params.get("Id")
        if params.get("Hosts") is not None:
            self._Hosts = []
            for item in params.get("Hosts"):
                obj = HostInfo()
                obj._deserialize(item)
                self._Hosts.append(obj)
        if params.get("Places") is not None:
            self._Places = []
            for item in params.get("Places"):
                obj = Place()
                obj._deserialize(item)
                self._Places.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLoginWhiteRecordResponse(AbstractModel):
    """ModifyLoginWhiteRecord response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyMachineAutoClearConfigRequest(AbstractModel):
    """ModifyMachineAutoClearConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ClearRule: Clean-up rule time, 0 for OFF, in days, up to 30 days
        :type ClearRule: int
        """
        self._ClearRule = None

    @property
    def ClearRule(self):
        """Clean-up rule time, 0 for OFF, in days, up to 30 days
        :rtype: int
        """
        return self._ClearRule

    @ClearRule.setter
    def ClearRule(self, ClearRule):
        self._ClearRule = ClearRule


    def _deserialize(self, params):
        self._ClearRule = params.get("ClearRule")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyMachineAutoClearConfigResponse(AbstractModel):
    """ModifyMachineAutoClearConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyMaliciousRequestWhiteListRequest(AbstractModel):
    """ModifyMaliciousRequestWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Allowlist ID
        :type Id: int
        :param _Domain: Allowlisted domain names
        :type Domain: str
        :param _Mark: Remarks
        :type Mark: str
        """
        self._Id = None
        self._Domain = None
        self._Mark = None

    @property
    def Id(self):
        """Allowlist ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Domain(self):
        """Allowlisted domain names
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def Mark(self):
        """Remarks
        :rtype: str
        """
        return self._Mark

    @Mark.setter
    def Mark(self, Mark):
        self._Mark = Mark


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Domain = params.get("Domain")
        self._Mark = params.get("Mark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyMaliciousRequestWhiteListResponse(AbstractModel):
    """ModifyMaliciousRequestWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyMalwareTimingScanSettingsRequest(AbstractModel):
    """ModifyMalwareTimingScanSettings request structure.

    """

    def __init__(self):
        r"""
        :param _CheckPattern: Detection mode. 0: full disk detection; 1: rapid detection
        :type CheckPattern: int
        :param _StartTime: Detection interval start time, such as 02:00:00
        :type StartTime: str
        :param _EndTime: Detection interval timeout end time, such as 04:00:00
        :type EndTime: str
        :param _IsGlobal: Whether all servers. 1: all; 2: specified
        :type IsGlobal: int
        :param _EnableScan: Regular detection switch. 0: off; 1: on
        :type EnableScan: int
        :param _MonitoringPattern: Monitoring mode. 0: standard; 1: deep
        :type MonitoringPattern: int
        :param _Cycle: Scan interval: defaults to 1 per day
        :type Cycle: int
        :param _RealTimeMonitoring: Real-time monitoring. 0: off; 1: on
        :type RealTimeMonitoring: int
        :param _QuuidList: Required for specified servers, a string array of host QUUIDs
        :type QuuidList: list of str
        :param _AutoIsolation: Whether to apply automatic isolation. 1: yes; 0: no
        :type AutoIsolation: int
        :param _KillProcess: Whether to terminate the process. 1: terminate; 0: not terminate
        :type KillProcess: int
        :param _DoClean: 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
        :type DoClean: int
        :param _EngineType: 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :type EngineType: int
        :param _EnableInspiredEngine: Heuristic Engine Switch: 0 OFF, 1 ON.
        :type EnableInspiredEngine: int
        :param _EnableMemShellScan: Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :type EnableMemShellScan: int
        :param _ProtectMode: Protection mode: 0: standard; 1: important period guarantee
        :type ProtectMode: int
        :param _ProtectFileScope: Scope of detection: 0: malicious files other than scripts; 1: all malicious files
        :type ProtectFileScope: int
        """
        self._CheckPattern = None
        self._StartTime = None
        self._EndTime = None
        self._IsGlobal = None
        self._EnableScan = None
        self._MonitoringPattern = None
        self._Cycle = None
        self._RealTimeMonitoring = None
        self._QuuidList = None
        self._AutoIsolation = None
        self._KillProcess = None
        self._DoClean = None
        self._EngineType = None
        self._EnableInspiredEngine = None
        self._EnableMemShellScan = None
        self._ProtectMode = None
        self._ProtectFileScope = None

    @property
    def CheckPattern(self):
        """Detection mode. 0: full disk detection; 1: rapid detection
        :rtype: int
        """
        return self._CheckPattern

    @CheckPattern.setter
    def CheckPattern(self, CheckPattern):
        self._CheckPattern = CheckPattern

    @property
    def StartTime(self):
        """Detection interval start time, such as 02:00:00
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Detection interval timeout end time, such as 04:00:00
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def IsGlobal(self):
        """Whether all servers. 1: all; 2: specified
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def EnableScan(self):
        """Regular detection switch. 0: off; 1: on
        :rtype: int
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def MonitoringPattern(self):
        """Monitoring mode. 0: standard; 1: deep
        :rtype: int
        """
        return self._MonitoringPattern

    @MonitoringPattern.setter
    def MonitoringPattern(self, MonitoringPattern):
        self._MonitoringPattern = MonitoringPattern

    @property
    def Cycle(self):
        """Scan interval: defaults to 1 per day
        :rtype: int
        """
        return self._Cycle

    @Cycle.setter
    def Cycle(self, Cycle):
        self._Cycle = Cycle

    @property
    def RealTimeMonitoring(self):
        """Real-time monitoring. 0: off; 1: on
        :rtype: int
        """
        return self._RealTimeMonitoring

    @RealTimeMonitoring.setter
    def RealTimeMonitoring(self, RealTimeMonitoring):
        self._RealTimeMonitoring = RealTimeMonitoring

    @property
    def QuuidList(self):
        """Required for specified servers, a string array of host QUUIDs
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def AutoIsolation(self):
        """Whether to apply automatic isolation. 1: yes; 0: no
        :rtype: int
        """
        return self._AutoIsolation

    @AutoIsolation.setter
    def AutoIsolation(self, AutoIsolation):
        self._AutoIsolation = AutoIsolation

    @property
    def KillProcess(self):
        """Whether to terminate the process. 1: terminate; 0: not terminate
        :rtype: int
        """
        return self._KillProcess

    @KillProcess.setter
    def KillProcess(self, KillProcess):
        self._KillProcess = KillProcess

    @property
    def DoClean(self):
        """1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
        :rtype: int
        """
        return self._DoClean

    @DoClean.setter
    def DoClean(self, DoClean):
        self._DoClean = DoClean

    @property
    def EngineType(self):
        """1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
        :rtype: int
        """
        return self._EngineType

    @EngineType.setter
    def EngineType(self, EngineType):
        self._EngineType = EngineType

    @property
    def EnableInspiredEngine(self):
        """Heuristic Engine Switch: 0 OFF, 1 ON.
        :rtype: int
        """
        return self._EnableInspiredEngine

    @EnableInspiredEngine.setter
    def EnableInspiredEngine(self, EnableInspiredEngine):
        self._EnableInspiredEngine = EnableInspiredEngine

    @property
    def EnableMemShellScan(self):
        """Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
        :rtype: int
        """
        return self._EnableMemShellScan

    @EnableMemShellScan.setter
    def EnableMemShellScan(self, EnableMemShellScan):
        self._EnableMemShellScan = EnableMemShellScan

    @property
    def ProtectMode(self):
        """Protection mode: 0: standard; 1: important period guarantee
        :rtype: int
        """
        return self._ProtectMode

    @ProtectMode.setter
    def ProtectMode(self, ProtectMode):
        self._ProtectMode = ProtectMode

    @property
    def ProtectFileScope(self):
        """Scope of detection: 0: malicious files other than scripts; 1: all malicious files
        :rtype: int
        """
        return self._ProtectFileScope

    @ProtectFileScope.setter
    def ProtectFileScope(self, ProtectFileScope):
        self._ProtectFileScope = ProtectFileScope


    def _deserialize(self, params):
        self._CheckPattern = params.get("CheckPattern")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._IsGlobal = params.get("IsGlobal")
        self._EnableScan = params.get("EnableScan")
        self._MonitoringPattern = params.get("MonitoringPattern")
        self._Cycle = params.get("Cycle")
        self._RealTimeMonitoring = params.get("RealTimeMonitoring")
        self._QuuidList = params.get("QuuidList")
        self._AutoIsolation = params.get("AutoIsolation")
        self._KillProcess = params.get("KillProcess")
        self._DoClean = params.get("DoClean")
        self._EngineType = params.get("EngineType")
        self._EnableInspiredEngine = params.get("EnableInspiredEngine")
        self._EnableMemShellScan = params.get("EnableMemShellScan")
        self._ProtectMode = params.get("ProtectMode")
        self._ProtectFileScope = params.get("ProtectFileScope")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyMalwareTimingScanSettingsResponse(AbstractModel):
    """ModifyMalwareTimingScanSettings response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyMalwareWhiteListRequest(AbstractModel):
    """ModifyMalwareWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Mode: Allowlist mode. 0: MD5 allowlist; 1: custom.
        :type Mode: int
        :param _Id: Unique rule ID
        :type Id: int
        :param _QuuidList: QUUID list
        :type QuuidList: list of str
        :param _IsGlobal: Whether the allowlist applies to all hosts. 0: no; 1: yes.
        :type IsGlobal: int
        :param _MatchType: Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
        :type MatchType: int
        :param _FileName: File Name (regular expression); up to 200 characters in length
        :type FileName: list of str
        :param _FileDirectory: File Directory (regular expression); up to 200 characters in length, content base64 encoded.
        :type FileDirectory: list of str
        :param _FileExtension: File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
        :type FileExtension: list of str
        :param _Md5List: MD5 list
        :type Md5List: list of str
        """
        self._Mode = None
        self._Id = None
        self._QuuidList = None
        self._IsGlobal = None
        self._MatchType = None
        self._FileName = None
        self._FileDirectory = None
        self._FileExtension = None
        self._Md5List = None

    @property
    def Mode(self):
        """Allowlist mode. 0: MD5 allowlist; 1: custom.
        :rtype: int
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def Id(self):
        """Unique rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def QuuidList(self):
        """QUUID list
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def IsGlobal(self):
        """Whether the allowlist applies to all hosts. 0: no; 1: yes.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def MatchType(self):
        """Matching pattern; 0 for exact match, 1 for fuzzy match (deprecated)
        :rtype: int
        """
        return self._MatchType

    @MatchType.setter
    def MatchType(self, MatchType):
        self._MatchType = MatchType

    @property
    def FileName(self):
        """File Name (regular expression); up to 200 characters in length
        :rtype: list of str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileDirectory(self):
        """File Directory (regular expression); up to 200 characters in length, content base64 encoded.
        :rtype: list of str
        """
        return self._FileDirectory

    @FileDirectory.setter
    def FileDirectory(self, FileDirectory):
        self._FileDirectory = FileDirectory

    @property
    def FileExtension(self):
        """File Suffix; Up to 200 characters in length, content base64 escaped (deprecated).
        :rtype: list of str
        """
        return self._FileExtension

    @FileExtension.setter
    def FileExtension(self, FileExtension):
        self._FileExtension = FileExtension

    @property
    def Md5List(self):
        """MD5 list
        :rtype: list of str
        """
        return self._Md5List

    @Md5List.setter
    def Md5List(self, Md5List):
        self._Md5List = Md5List


    def _deserialize(self, params):
        self._Mode = params.get("Mode")
        self._Id = params.get("Id")
        self._QuuidList = params.get("QuuidList")
        self._IsGlobal = params.get("IsGlobal")
        self._MatchType = params.get("MatchType")
        self._FileName = params.get("FileName")
        self._FileDirectory = params.get("FileDirectory")
        self._FileExtension = params.get("FileExtension")
        self._Md5List = params.get("Md5List")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyMalwareWhiteListResponse(AbstractModel):
    """ModifyMalwareWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyNetAttackSettingRequest(AbstractModel):
    """ModifyNetAttackSetting request structure.

    """

    def __init__(self):
        r"""
        :param _NetAttackEnable: 0 - Disable Network Attack Detection; 1 - Enable Network Attack Detection.
        :type NetAttackEnable: int
        :param _NetAttackAlarmStatus: 0: New warning events pending processing by default, 1: New warning events processed by default, 3: New warning events ignored by default.
        :type NetAttackAlarmStatus: int
        :param _Scope: 1 - All Ultimate edition hosts; 0 - list of hosts with Quuids
        :type Scope: int
        :param _InstanceIds: Specified hosts
        :type InstanceIds: list of str
        :param _ExcludeInstanceIds: Manually Excluded Hosts
        :type ExcludeInstanceIds: list of str
        :param _AutoInclude: New assets automatically include: 0 - Do not include, 1 - include.
        :type AutoInclude: int
        """
        self._NetAttackEnable = None
        self._NetAttackAlarmStatus = None
        self._Scope = None
        self._InstanceIds = None
        self._ExcludeInstanceIds = None
        self._AutoInclude = None

    @property
    def NetAttackEnable(self):
        """0 - Disable Network Attack Detection; 1 - Enable Network Attack Detection.
        :rtype: int
        """
        return self._NetAttackEnable

    @NetAttackEnable.setter
    def NetAttackEnable(self, NetAttackEnable):
        self._NetAttackEnable = NetAttackEnable

    @property
    def NetAttackAlarmStatus(self):
        """0: New warning events pending processing by default, 1: New warning events processed by default, 3: New warning events ignored by default.
        :rtype: int
        """
        return self._NetAttackAlarmStatus

    @NetAttackAlarmStatus.setter
    def NetAttackAlarmStatus(self, NetAttackAlarmStatus):
        self._NetAttackAlarmStatus = NetAttackAlarmStatus

    @property
    def Scope(self):
        """1 - All Ultimate edition hosts; 0 - list of hosts with Quuids
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def InstanceIds(self):
        """Specified hosts
        :rtype: list of str
        """
        return self._InstanceIds

    @InstanceIds.setter
    def InstanceIds(self, InstanceIds):
        self._InstanceIds = InstanceIds

    @property
    def ExcludeInstanceIds(self):
        """Manually Excluded Hosts
        :rtype: list of str
        """
        return self._ExcludeInstanceIds

    @ExcludeInstanceIds.setter
    def ExcludeInstanceIds(self, ExcludeInstanceIds):
        self._ExcludeInstanceIds = ExcludeInstanceIds

    @property
    def AutoInclude(self):
        """New assets automatically include: 0 - Do not include, 1 - include.
        :rtype: int
        """
        return self._AutoInclude

    @AutoInclude.setter
    def AutoInclude(self, AutoInclude):
        self._AutoInclude = AutoInclude


    def _deserialize(self, params):
        self._NetAttackEnable = params.get("NetAttackEnable")
        self._NetAttackAlarmStatus = params.get("NetAttackAlarmStatus")
        self._Scope = params.get("Scope")
        self._InstanceIds = params.get("InstanceIds")
        self._ExcludeInstanceIds = params.get("ExcludeInstanceIds")
        self._AutoInclude = params.get("AutoInclude")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyNetAttackSettingResponse(AbstractModel):
    """ModifyNetAttackSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyNetAttackWhiteListRequest(AbstractModel):
    """ModifyNetAttackWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Scope: Whether applies all hosts: 0: no; 1: yes
        :type Scope: int
        :param _SrcIp: Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24 
        :type SrcIp: list of str
        :param _DealOldEvents: Whether to allowlist all alarms that match this rule: 1: Yes, 0: No.
        :type DealOldEvents: int
        :param _Id: Rule ID
        :type Id: int
        :param _QuuidList: QUUID list
        :type QuuidList: list of str
        :param _Description: Rule description
        :type Description: str
        """
        self._Scope = None
        self._SrcIp = None
        self._DealOldEvents = None
        self._Id = None
        self._QuuidList = None
        self._Description = None

    @property
    def Scope(self):
        """Whether applies all hosts: 0: no; 1: yes
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def SrcIp(self):
        """Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24 
        :rtype: list of str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def DealOldEvents(self):
        """Whether to allowlist all alarms that match this rule: 1: Yes, 0: No.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def QuuidList(self):
        """QUUID list
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def Description(self):
        """Rule description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Scope = params.get("Scope")
        self._SrcIp = params.get("SrcIp")
        self._DealOldEvents = params.get("DealOldEvents")
        self._Id = params.get("Id")
        self._QuuidList = params.get("QuuidList")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyNetAttackWhiteListResponse(AbstractModel):
    """ModifyNetAttackWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRansomDefenseEventsStatusRequest(AbstractModel):
    """ModifyRansomDefenseEventsStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: An array of event IDs that need to be modified, and batch operation is supported.
        :type Ids: list of int non-negative
        :param _Status: Operations. 0: Pending; 1: Processed; 2: Trusted; 9: Delete Record
        :type Status: int
        :param _All: Whether to update all events with the same path.
        :type All: bool
        """
        self._Ids = None
        self._Status = None
        self._All = None

    @property
    def Ids(self):
        """An array of event IDs that need to be modified, and batch operation is supported.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Status(self):
        """Operations. 0: Pending; 1: Processed; 2: Trusted; 9: Delete Record
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def All(self):
        """Whether to update all events with the same path.
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._Status = params.get("Status")
        self._All = params.get("All")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRansomDefenseEventsStatusResponse(AbstractModel):
    """ModifyRansomDefenseEventsStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRansomDefenseStrategyStatusRequest(AbstractModel):
    """ModifyRansomDefenseStrategyStatus request structure.

    """

    def __init__(self):
        r"""
        :param _IsAll: Apply to all policies: 0 No, 1 Yes.
        :type IsAll: int
        :param _Status: 0 for Off, 1 for On, 9 for Delete
        :type Status: int
        :param _IdList: Policy ID List
        :type IdList: list of int non-negative
        """
        self._IsAll = None
        self._Status = None
        self._IdList = None

    @property
    def IsAll(self):
        """Apply to all policies: 0 No, 1 Yes.
        :rtype: int
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll

    @property
    def Status(self):
        """0 for Off, 1 for On, 9 for Delete
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IdList(self):
        """Policy ID List
        :rtype: list of int non-negative
        """
        return self._IdList

    @IdList.setter
    def IdList(self, IdList):
        self._IdList = IdList


    def _deserialize(self, params):
        self._IsAll = params.get("IsAll")
        self._Status = params.get("Status")
        self._IdList = params.get("IdList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRansomDefenseStrategyStatusResponse(AbstractModel):
    """ModifyRansomDefenseStrategyStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRiskDnsPolicyRequest(AbstractModel):
    """ModifyRiskDnsPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Data: Policy
        :type Data: :class:`tencentcloud.cwp.v20180228.models.RiskDnsPolicy`
        """
        self._Data = None

    @property
    def Data(self):
        """Policy
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RiskDnsPolicy`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = RiskDnsPolicy()
            self._Data._deserialize(params.get("Data"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRiskDnsPolicyResponse(AbstractModel):
    """ModifyRiskDnsPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRiskDnsPolicyStatusRequest(AbstractModel):
    """ModifyRiskDnsPolicyStatus request structure.

    """

    def __init__(self):
        r"""
        :param _PolicyId: Policy ID
        :type PolicyId: int
        :param _IsEnabled: Whether effective [0: effective,1: not effective]
        :type IsEnabled: int
        """
        self._PolicyId = None
        self._IsEnabled = None

    @property
    def PolicyId(self):
        """Policy ID
        :rtype: int
        """
        return self._PolicyId

    @PolicyId.setter
    def PolicyId(self, PolicyId):
        self._PolicyId = PolicyId

    @property
    def IsEnabled(self):
        """Whether effective [0: effective,1: not effective]
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled


    def _deserialize(self, params):
        self._PolicyId = params.get("PolicyId")
        self._IsEnabled = params.get("IsEnabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRiskDnsPolicyStatusResponse(AbstractModel):
    """ModifyRiskDnsPolicyStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRiskEventsStatusRequest(AbstractModel):
    """ModifyRiskEventsStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Operate: Operations - 0: Mark as Handled, 1: Ignore, 2: Delete Record, 3: Trojan Isolation, 4: Isolated Trojan Resumption, 5: Trojan Trust, 6: Trojan Untrust, 7: Kill Exceptional Process.
        :type Operate: int
        :param _RiskType: Operation event types, file scan: MALWARE, exceptional login: HOST_LOGIN, password brute attack: BRUTE_ATTACK, malicious request: MALICIOUS_REQUEST, high-risk command: BASH_EVENT, local privilege escalation: PRIVILEGE_EVENT, reverse shell: REVERSE_SHELL, exceptional process: PROCESS.
        :type RiskType: str
        :param _Ids: An array of event IDs that need to be modified, and batch operation is supported.
        :type Ids: list of int non-negative
        :param _UpdateAll: Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :type UpdateAll: bool
        :param _ExcludeId: Excluded event ID: When operating on all events, this ID needs to be excluded.
        :type ExcludeId: list of int non-negative
        :param _KillProcess: When Operate is Trojan isolation, it indicates whether to kill the process, other operations are invalid
        :type KillProcess: bool
        :param _Ip: When RiskType is cross-region log-in and IDs are left blank, you can modify the status of events from all source IPs.
        :type Ip: list of str
        :param _Filters: Filtering criteria. When RiskType is MALWARE.
1. When RiskType is MALWARE:
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status: 4 - pending; 5 -- trusted; 6 - isolated; 10 - isolation in progress; 11 - recovering from isolation</li>
When RiskType is PROCESS:
Filter criteria
<li>IpOrName - String - required: no - host IP or host name</li>
<li>VirusName - String - required: no - virus name</li>
<li>BeginTime - String - required: no - process startup time - begin</li>
<li>BeginTime - String - required: no - process startup time - end</li>
<li>Status - String - required: no - filter by status: 0 - pending; 1 - under detection; 2 - detected; 3 - exited; 4 - trusted</li>
        :type Filters: list of Filters
        """
        self._Operate = None
        self._RiskType = None
        self._Ids = None
        self._UpdateAll = None
        self._ExcludeId = None
        self._KillProcess = None
        self._Ip = None
        self._Filters = None

    @property
    def Operate(self):
        """Operations - 0: Mark as Handled, 1: Ignore, 2: Delete Record, 3: Trojan Isolation, 4: Isolated Trojan Resumption, 5: Trojan Trust, 6: Trojan Untrust, 7: Kill Exceptional Process.
        :rtype: int
        """
        return self._Operate

    @Operate.setter
    def Operate(self, Operate):
        self._Operate = Operate

    @property
    def RiskType(self):
        """Operation event types, file scan: MALWARE, exceptional login: HOST_LOGIN, password brute attack: BRUTE_ATTACK, malicious request: MALICIOUS_REQUEST, high-risk command: BASH_EVENT, local privilege escalation: PRIVILEGE_EVENT, reverse shell: REVERSE_SHELL, exceptional process: PROCESS.
        :rtype: str
        """
        return self._RiskType

    @RiskType.setter
    def RiskType(self, RiskType):
        self._RiskType = RiskType

    @property
    def Ids(self):
        """An array of event IDs that need to be modified, and batch operation is supported.
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def UpdateAll(self):
        """Whether to update all, i.e. whether to operate on all events; this parameter is invalid when IDs are not left blank.
        :rtype: bool
        """
        return self._UpdateAll

    @UpdateAll.setter
    def UpdateAll(self, UpdateAll):
        self._UpdateAll = UpdateAll

    @property
    def ExcludeId(self):
        """Excluded event ID: When operating on all events, this ID needs to be excluded.
        :rtype: list of int non-negative
        """
        return self._ExcludeId

    @ExcludeId.setter
    def ExcludeId(self, ExcludeId):
        self._ExcludeId = ExcludeId

    @property
    def KillProcess(self):
        """When Operate is Trojan isolation, it indicates whether to kill the process, other operations are invalid
        :rtype: bool
        """
        return self._KillProcess

    @KillProcess.setter
    def KillProcess(self, KillProcess):
        self._KillProcess = KillProcess

    @property
    def Ip(self):
        """When RiskType is cross-region log-in and IDs are left blank, you can modify the status of events from all source IPs.
        :rtype: list of str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def Filters(self):
        """Filtering criteria. When RiskType is MALWARE.
1. When RiskType is MALWARE:
<li>IpOrAlias - String - required: no - filter by host IP or alias</li>
<li>FilePath - String - required: no - filter by path</li>
<li>VirusName - String - required: no - filter by description</li>
<li>CreateBeginTime - String - required: no - filter by creation time - start time</li>
<li>CreateEndTime - String - required: no - filter by creation time - end time</li>
<li>Status - String - required: no - filter by status: 4 - pending; 5 -- trusted; 6 - isolated; 10 - isolation in progress; 11 - recovering from isolation</li>
When RiskType is PROCESS:
Filter criteria
<li>IpOrName - String - required: no - host IP or host name</li>
<li>VirusName - String - required: no - virus name</li>
<li>BeginTime - String - required: no - process startup time - begin</li>
<li>BeginTime - String - required: no - process startup time - end</li>
<li>Status - String - required: no - filter by status: 0 - pending; 1 - under detection; 2 - detected; 3 - exited; 4 - trusted</li>
        :rtype: list of Filters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Operate = params.get("Operate")
        self._RiskType = params.get("RiskType")
        self._Ids = params.get("Ids")
        self._UpdateAll = params.get("UpdateAll")
        self._ExcludeId = params.get("ExcludeId")
        self._KillProcess = params.get("KillProcess")
        self._Ip = params.get("Ip")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRiskEventsStatusResponse(AbstractModel):
    """ModifyRiskEventsStatus response structure.

    """

    def __init__(self):
        r"""
        :param _IsSync: Whether this operation is asynchronous. 0: operation completed; 1: asynchronous operation in progress and DescribeRiskBatchStatus needs to be called by front end to check if the operation is completed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSync: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsSync = None
        self._RequestId = None

    @property
    def IsSync(self):
        """Whether this operation is asynchronous. 0: operation completed; 1: asynchronous operation in progress and DescribeRiskBatchStatus needs to be called by front end to check if the operation is completed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsSync

    @IsSync.setter
    def IsSync(self, IsSync):
        self._IsSync = IsSync

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsSync = params.get("IsSync")
        self._RequestId = params.get("RequestId")


class ModifyUsersConfigRequest(AbstractModel):
    """ModifyUsersConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ConfigName: Configuration name
<li>license_monitor new authorization monitoring configuration: 0 - disable, 1 - enable</li>
        :type ConfigName: str
        :param _ConfigValue: Configuration value
        :type ConfigValue: str
        """
        self._ConfigName = None
        self._ConfigValue = None

    @property
    def ConfigName(self):
        """Configuration name
<li>license_monitor new authorization monitoring configuration: 0 - disable, 1 - enable</li>
        :rtype: str
        """
        return self._ConfigName

    @ConfigName.setter
    def ConfigName(self, ConfigName):
        self._ConfigName = ConfigName

    @property
    def ConfigValue(self):
        """Configuration value
        :rtype: str
        """
        return self._ConfigValue

    @ConfigValue.setter
    def ConfigValue(self, ConfigValue):
        self._ConfigValue = ConfigValue


    def _deserialize(self, params):
        self._ConfigName = params.get("ConfigName")
        self._ConfigValue = params.get("ConfigValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyUsersConfigResponse(AbstractModel):
    """ModifyUsersConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVulDefenceEventStatusRequest(AbstractModel):
    """ModifyVulDefenceEventStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Event ID
        :type Ids: list of int non-negative
        :param _Status: 0: pending; 2: processed; 3: ignored; 4: deleted.
        :type Status: int
        """
        self._Ids = None
        self._Status = None

    @property
    def Ids(self):
        """Event ID
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Status(self):
        """0: pending; 2: processed; 3: ignored; 4: deleted.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVulDefenceEventStatusResponse(AbstractModel):
    """ModifyVulDefenceEventStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVulDefenceSettingRequest(AbstractModel):
    """ModifyVulDefenceSetting request structure.

    """

    def __init__(self):
        r"""
        :param _Enable: Defense switch: 0 - off; 1 - on
        :type Enable: int
        :param _Scope: 1 - All Ultimate edition hosts; 0 - list of hosts with Quuids
        :type Scope: int
        :param _Quuids: List of Ultimate Edition hosts within the scope
        :type Quuids: list of str
        :param _ExcludeInstanceIds: Exclude the list of Ultimate Edition hosts within the scope
        :type ExcludeInstanceIds: list of str
        :param _AutoInclude: New assets automatically include: 0 - Do not include, 1 - include.
        :type AutoInclude: int
        :param _InstanceIds: List of Ultimate Edition hosts within the scope
        :type InstanceIds: list of str
        """
        self._Enable = None
        self._Scope = None
        self._Quuids = None
        self._ExcludeInstanceIds = None
        self._AutoInclude = None
        self._InstanceIds = None

    @property
    def Enable(self):
        """Defense switch: 0 - off; 1 - on
        :rtype: int
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def Scope(self):
        """1 - All Ultimate edition hosts; 0 - list of hosts with Quuids
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def Quuids(self):
        """List of Ultimate Edition hosts within the scope
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def ExcludeInstanceIds(self):
        """Exclude the list of Ultimate Edition hosts within the scope
        :rtype: list of str
        """
        return self._ExcludeInstanceIds

    @ExcludeInstanceIds.setter
    def ExcludeInstanceIds(self, ExcludeInstanceIds):
        self._ExcludeInstanceIds = ExcludeInstanceIds

    @property
    def AutoInclude(self):
        """New assets automatically include: 0 - Do not include, 1 - include.
        :rtype: int
        """
        return self._AutoInclude

    @AutoInclude.setter
    def AutoInclude(self, AutoInclude):
        self._AutoInclude = AutoInclude

    @property
    def InstanceIds(self):
        """List of Ultimate Edition hosts within the scope
        :rtype: list of str
        """
        return self._InstanceIds

    @InstanceIds.setter
    def InstanceIds(self, InstanceIds):
        self._InstanceIds = InstanceIds


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._Scope = params.get("Scope")
        self._Quuids = params.get("Quuids")
        self._ExcludeInstanceIds = params.get("ExcludeInstanceIds")
        self._AutoInclude = params.get("AutoInclude")
        self._InstanceIds = params.get("InstanceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVulDefenceSettingResponse(AbstractModel):
    """ModifyVulDefenceSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWarningHostConfigRequest(AbstractModel):
    """ModifyWarningHostConfig request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Alarm type
        :type Type: int
        :param _HostRange: Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :type HostRange: int
        :param _ItemLabels: List of Project or Tag Names, empty for custom hosts
        :type ItemLabels: list of str
        :param _Quuids: Machine list
        :type Quuids: list of str
        :param _ItemLabelIds: List of Project or Tag IDs, empty for custom hosts
        :type ItemLabelIds: list of str
        :param _ExcludedQuuids: 
        :type ExcludedQuuids: list of str
        """
        self._Type = None
        self._HostRange = None
        self._ItemLabels = None
        self._Quuids = None
        self._ItemLabelIds = None
        self._ExcludedQuuids = None

    @property
    def Type(self):
        """Alarm type
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def HostRange(self):
        """Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :rtype: int
        """
        return self._HostRange

    @HostRange.setter
    def HostRange(self, HostRange):
        self._HostRange = HostRange

    @property
    def ItemLabels(self):
        """List of Project or Tag Names, empty for custom hosts
        :rtype: list of str
        """
        return self._ItemLabels

    @ItemLabels.setter
    def ItemLabels(self, ItemLabels):
        self._ItemLabels = ItemLabels

    @property
    def Quuids(self):
        """Machine list
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def ItemLabelIds(self):
        """List of Project or Tag IDs, empty for custom hosts
        :rtype: list of str
        """
        return self._ItemLabelIds

    @ItemLabelIds.setter
    def ItemLabelIds(self, ItemLabelIds):
        self._ItemLabelIds = ItemLabelIds

    @property
    def ExcludedQuuids(self):
        """
        :rtype: list of str
        """
        return self._ExcludedQuuids

    @ExcludedQuuids.setter
    def ExcludedQuuids(self, ExcludedQuuids):
        self._ExcludedQuuids = ExcludedQuuids


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._HostRange = params.get("HostRange")
        self._ItemLabels = params.get("ItemLabels")
        self._Quuids = params.get("Quuids")
        self._ItemLabelIds = params.get("ItemLabelIds")
        self._ExcludedQuuids = params.get("ExcludedQuuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWarningHostConfigResponse(AbstractModel):
    """ModifyWarningHostConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWarningSettingRequest(AbstractModel):
    """ModifyWarningSetting request structure.

    """

    def __init__(self):
        r"""
        :param _WarningObjects: Modified alarm setting content
        :type WarningObjects: list of WarningObject
        """
        self._WarningObjects = None

    @property
    def WarningObjects(self):
        """Modified alarm setting content
        :rtype: list of WarningObject
        """
        return self._WarningObjects

    @WarningObjects.setter
    def WarningObjects(self, WarningObjects):
        self._WarningObjects = WarningObjects


    def _deserialize(self, params):
        if params.get("WarningObjects") is not None:
            self._WarningObjects = []
            for item in params.get("WarningObjects"):
                obj = WarningObject()
                obj._deserialize(item)
                self._WarningObjects.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWarningSettingResponse(AbstractModel):
    """ModifyWarningSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebHookPolicyRequest(AbstractModel):
    """ModifyWebHookPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _Id: id
        :type Id: int
        :param _Name: Policy name
        :type Name: str
        :param _Events: Event type
        :type Events: list of WebHookEventKv
        :param _HostLabels: Host range
        :type HostLabels: list of WebHookHostLabel
        :param _Receivers: Recipient
        :type Receivers: list of WebHookReceiver
        :param _Format: Format. 0: text; 1: JSON.
        :type Format: int
        :param _CustomFields: Custom passthrough field
        :type CustomFields: list of WebHookCustomField
        :param _IsDisabled: Enable/Disable [1-Disable, 0-Enable]
        :type IsDisabled: int
        :param _Quuids: Host list
        :type Quuids: list of str
        :param _ExcludedQuuids: 
        :type ExcludedQuuids: list of str
        """
        self._Id = None
        self._Name = None
        self._Events = None
        self._HostLabels = None
        self._Receivers = None
        self._Format = None
        self._CustomFields = None
        self._IsDisabled = None
        self._Quuids = None
        self._ExcludedQuuids = None

    @property
    def Id(self):
        """id
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Events(self):
        """Event type
        :rtype: list of WebHookEventKv
        """
        return self._Events

    @Events.setter
    def Events(self, Events):
        self._Events = Events

    @property
    def HostLabels(self):
        """Host range
        :rtype: list of WebHookHostLabel
        """
        return self._HostLabels

    @HostLabels.setter
    def HostLabels(self, HostLabels):
        self._HostLabels = HostLabels

    @property
    def Receivers(self):
        """Recipient
        :rtype: list of WebHookReceiver
        """
        return self._Receivers

    @Receivers.setter
    def Receivers(self, Receivers):
        self._Receivers = Receivers

    @property
    def Format(self):
        """Format. 0: text; 1: JSON.
        :rtype: int
        """
        return self._Format

    @Format.setter
    def Format(self, Format):
        self._Format = Format

    @property
    def CustomFields(self):
        """Custom passthrough field
        :rtype: list of WebHookCustomField
        """
        return self._CustomFields

    @CustomFields.setter
    def CustomFields(self, CustomFields):
        self._CustomFields = CustomFields

    @property
    def IsDisabled(self):
        """Enable/Disable [1-Disable, 0-Enable]
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled

    @property
    def Quuids(self):
        """Host list
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def ExcludedQuuids(self):
        """
        :rtype: list of str
        """
        return self._ExcludedQuuids

    @ExcludedQuuids.setter
    def ExcludedQuuids(self, ExcludedQuuids):
        self._ExcludedQuuids = ExcludedQuuids


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        if params.get("Events") is not None:
            self._Events = []
            for item in params.get("Events"):
                obj = WebHookEventKv()
                obj._deserialize(item)
                self._Events.append(obj)
        if params.get("HostLabels") is not None:
            self._HostLabels = []
            for item in params.get("HostLabels"):
                obj = WebHookHostLabel()
                obj._deserialize(item)
                self._HostLabels.append(obj)
        if params.get("Receivers") is not None:
            self._Receivers = []
            for item in params.get("Receivers"):
                obj = WebHookReceiver()
                obj._deserialize(item)
                self._Receivers.append(obj)
        self._Format = params.get("Format")
        if params.get("CustomFields") is not None:
            self._CustomFields = []
            for item in params.get("CustomFields"):
                obj = WebHookCustomField()
                obj._deserialize(item)
                self._CustomFields.append(obj)
        self._IsDisabled = params.get("IsDisabled")
        self._Quuids = params.get("Quuids")
        self._ExcludedQuuids = params.get("ExcludedQuuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebHookPolicyResponse(AbstractModel):
    """ModifyWebHookPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebHookPolicyStatusRequest(AbstractModel):
    """ModifyWebHookPolicyStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Id: id
        :type Id: int
        :param _IsDisabled: Switch: 1 - disabled; 0 - enabled
        :type IsDisabled: int
        """
        self._Id = None
        self._IsDisabled = None

    @property
    def Id(self):
        """id
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def IsDisabled(self):
        """Switch: 1 - disabled; 0 - enabled
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._IsDisabled = params.get("IsDisabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebHookPolicyStatusResponse(AbstractModel):
    """ModifyWebHookPolicyStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebHookReceiverRequest(AbstractModel):
    """ModifyWebHookReceiver request structure.

    """

    def __init__(self):
        r"""
        :param _Id: id
        :type Id: int
        :param _Name: Receiver name
        :type Name: str
        :param _Addr: webhook URL
        :type Addr: str
        :param _IsModify: Whether to modify
        :type IsModify: bool
        """
        self._Id = None
        self._Name = None
        self._Addr = None
        self._IsModify = None

    @property
    def Id(self):
        """id
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Receiver name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Addr(self):
        """webhook URL
        :rtype: str
        """
        return self._Addr

    @Addr.setter
    def Addr(self, Addr):
        self._Addr = Addr

    @property
    def IsModify(self):
        """Whether to modify
        :rtype: bool
        """
        return self._IsModify

    @IsModify.setter
    def IsModify(self, IsModify):
        self._IsModify = IsModify


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Addr = params.get("Addr")
        self._IsModify = params.get("IsModify")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebHookReceiverResponse(AbstractModel):
    """ModifyWebHookReceiver response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebHookRuleRequest(AbstractModel):
    """ModifyWebHookRule request structure.

    """

    def __init__(self):
        r"""
        :param _Data: Rule content
        :type Data: :class:`tencentcloud.cwp.v20180228.models.WebHookRuleDetail`
        """
        self._Data = None

    @property
    def Data(self):
        """Rule content
        :rtype: :class:`tencentcloud.cwp.v20180228.models.WebHookRuleDetail`
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = WebHookRuleDetail()
            self._Data._deserialize(params.get("Data"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebHookRuleResponse(AbstractModel):
    """ModifyWebHookRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebHookRuleStatusRequest(AbstractModel):
    """ModifyWebHookRuleStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _IsDisabled: Enabling status: [0: ON | 1: Off]
        :type IsDisabled: int
        """
        self._Id = None
        self._IsDisabled = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def IsDisabled(self):
        """Enabling status: [0: ON | 1: Off]
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._IsDisabled = params.get("IsDisabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebHookRuleStatusResponse(AbstractModel):
    """ModifyWebHookRuleStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyWebPageProtectSwitchRequest(AbstractModel):
    """ModifyWebPageProtectSwitch request structure.

    """

    def __init__(self):
        r"""
        :param _SwitchType: Switch type: 1 - protection switch; 2 - auto recovery switch; 3 - remove protection directory
        :type SwitchType: int
        :param _Ids: Sites that require operating switches (maximum quantity is 100)
        :type Ids: list of str
        :param _Status: 1 - on; 0 - off; required when SwitchType is 1 | 2;
        :type Status: int
        """
        self._SwitchType = None
        self._Ids = None
        self._Status = None

    @property
    def SwitchType(self):
        """Switch type: 1 - protection switch; 2 - auto recovery switch; 3 - remove protection directory
        :rtype: int
        """
        return self._SwitchType

    @SwitchType.setter
    def SwitchType(self, SwitchType):
        self._SwitchType = SwitchType

    @property
    def Ids(self):
        """Sites that require operating switches (maximum quantity is 100)
        :rtype: list of str
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Status(self):
        """1 - on; 0 - off; required when SwitchType is 1 | 2;
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._SwitchType = params.get("SwitchType")
        self._Ids = params.get("Ids")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyWebPageProtectSwitchResponse(AbstractModel):
    """ModifyWebPageProtectSwitch response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class MonthInspectionReport(AbstractModel):
    """Expert service - monthly inspection report

    """

    def __init__(self):
        r"""
        :param _ReportName: Inspection report name
        :type ReportName: str
        :param _ReportPath: Inspection report download link
        :type ReportPath: str
        :param _ModifyTime: Inspection report update time
        :type ModifyTime: str
        """
        self._ReportName = None
        self._ReportPath = None
        self._ModifyTime = None

    @property
    def ReportName(self):
        """Inspection report name
        :rtype: str
        """
        return self._ReportName

    @ReportName.setter
    def ReportName(self, ReportName):
        self._ReportName = ReportName

    @property
    def ReportPath(self):
        """Inspection report download link
        :rtype: str
        """
        return self._ReportPath

    @ReportPath.setter
    def ReportPath(self, ReportPath):
        self._ReportPath = ReportPath

    @property
    def ModifyTime(self):
        """Inspection report update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._ReportName = params.get("ReportName")
        self._ReportPath = params.get("ReportPath")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetAttackEvent(AbstractModel):
    """Network attack event

    """

    def __init__(self):
        r"""
        :param _Id: Log ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _DstPort: Target port
        :type DstPort: int
        :param _SrcIP: Source IP
        :type SrcIP: str
        :param _Location: Source location
        :type Location: str
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _MergeTime: Attack time
        :type MergeTime: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Type: Attack Status: 0: Attack Attempt 1: Confirmed Attack (Successful Attack).
        :type Type: int
        :param _Status: Processing Status: 0 Pending, 1 Processed, 2 Allowlisted, 3 Ignored, 4 Deleted, 5: Defense Enabled.
        :type Status: int
        :param _VulSupportDefense: Whether vulnerabilities support defense. 0: No 1: Yes
        :type VulSupportDefense: int
        :param _VulDefenceStatus: Whether to enable vulnerability defense: 0 - No, 1 - Yes
        :type VulDefenceStatus: int
        :param _PayVersion: Machine payment edition. 0: Basic Edition; 1: Professional Edition; 2: Premium Edition; 3: General Discount Edition
        :type PayVersion: int
        :param _Quuid: cvm uuid
        :type Quuid: str
        :param _Count: Attacks
        :type Count: int
        :param _New: Whether to add new hosts today
        :type New: bool
        """
        self._Id = None
        self._Uuid = None
        self._DstPort = None
        self._SrcIP = None
        self._Location = None
        self._VulId = None
        self._VulName = None
        self._MergeTime = None
        self._MachineExtraInfo = None
        self._Type = None
        self._Status = None
        self._VulSupportDefense = None
        self._VulDefenceStatus = None
        self._PayVersion = None
        self._Quuid = None
        self._Count = None
        self._New = None

    @property
    def Id(self):
        """Log ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def SrcIP(self):
        """Source IP
        :rtype: str
        """
        return self._SrcIP

    @SrcIP.setter
    def SrcIP(self, SrcIP):
        self._SrcIP = SrcIP

    @property
    def Location(self):
        """Source location
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def MergeTime(self):
        """Attack time
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Type(self):
        """Attack Status: 0: Attack Attempt 1: Confirmed Attack (Successful Attack).
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Status(self):
        """Processing Status: 0 Pending, 1 Processed, 2 Allowlisted, 3 Ignored, 4 Deleted, 5: Defense Enabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def VulSupportDefense(self):
        """Whether vulnerabilities support defense. 0: No 1: Yes
        :rtype: int
        """
        return self._VulSupportDefense

    @VulSupportDefense.setter
    def VulSupportDefense(self, VulSupportDefense):
        self._VulSupportDefense = VulSupportDefense

    @property
    def VulDefenceStatus(self):
        """Whether to enable vulnerability defense: 0 - No, 1 - Yes
        :rtype: int
        """
        return self._VulDefenceStatus

    @VulDefenceStatus.setter
    def VulDefenceStatus(self, VulDefenceStatus):
        self._VulDefenceStatus = VulDefenceStatus

    @property
    def PayVersion(self):
        """Machine payment edition. 0: Basic Edition; 1: Professional Edition; 2: Premium Edition; 3: General Discount Edition
        :rtype: int
        """
        return self._PayVersion

    @PayVersion.setter
    def PayVersion(self, PayVersion):
        self._PayVersion = PayVersion

    @property
    def Quuid(self):
        """cvm uuid
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Count(self):
        """Attacks
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def New(self):
        """Whether to add new hosts today
        :rtype: bool
        """
        return self._New

    @New.setter
    def New(self, New):
        self._New = New


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._DstPort = params.get("DstPort")
        self._SrcIP = params.get("SrcIP")
        self._Location = params.get("Location")
        self._VulId = params.get("VulId")
        self._VulName = params.get("VulName")
        self._MergeTime = params.get("MergeTime")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Type = params.get("Type")
        self._Status = params.get("Status")
        self._VulSupportDefense = params.get("VulSupportDefense")
        self._VulDefenceStatus = params.get("VulDefenceStatus")
        self._PayVersion = params.get("PayVersion")
        self._Quuid = params.get("Quuid")
        self._Count = params.get("Count")
        self._New = params.get("New")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetAttackEventInfo(AbstractModel):
    """Details of Network Attack Events

    """

    def __init__(self):
        r"""
        :param _Status: Processing Status: 0 Pending, 1 Processed, 2 Allowlisted, 3 Ignored, 4 Deleted, 5: Defense Enabled.
        :type Status: int
        :param _SrcIP: Attack source IP address
        :type SrcIP: str
        :param _Location: Attack Source
        :type Location: str
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _CVEId: Vulnerability CVE ID
        :type CVEId: str
        :param _AttackLevel: Vulnerability attack level
        :type AttackLevel: int
        :param _VulDefenceStatus: Vulnerability Defense Status: 0 Disabled, 1 Enabled.
        :type VulDefenceStatus: int
        :param _VulSupportDefense: Whether vulnerabilities support defense. 0: No 1: Yes
        :type VulSupportDefense: int
        :param _SvcPs: Service Process Base64 
        :type SvcPs: str
        :param _NetPayload: Attack packet
        :type NetPayload: str
        :param _AbnormalAction: Abnormal behavior
        :type AbnormalAction: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Id: Event ID
        :type Id: int
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _DstPort: Target port
        :type DstPort: int
        :param _Count: Attack count
        :type Count: int
        :param _PayVersion: Machine payment edition. 0: Basic Edition; 1: Professional Edition; 2: Premium Edition; 3: General Discount Edition
        :type PayVersion: int
        :param _Quuid: cvm uuid
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _MergeTime: Time of Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :type MergeTime: str
        :param _Type: 0: Attack Attempt 1: Successful Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: int
        :param _HostOpType: 0: No Compromised Behavior 1: RCE (command execution) 2: Dnslog 3: Writefile
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostOpType: int
        :param _HostOpProcessTree: Process Tree, needs to be decoded with base64.
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostOpProcessTree: str
        """
        self._Status = None
        self._SrcIP = None
        self._Location = None
        self._VulName = None
        self._VulId = None
        self._CVEId = None
        self._AttackLevel = None
        self._VulDefenceStatus = None
        self._VulSupportDefense = None
        self._SvcPs = None
        self._NetPayload = None
        self._AbnormalAction = None
        self._Uuid = None
        self._Id = None
        self._MachineExtraInfo = None
        self._DstPort = None
        self._Count = None
        self._PayVersion = None
        self._Quuid = None
        self._MergeTime = None
        self._Type = None
        self._HostOpType = None
        self._HostOpProcessTree = None

    @property
    def Status(self):
        """Processing Status: 0 Pending, 1 Processed, 2 Allowlisted, 3 Ignored, 4 Deleted, 5: Defense Enabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def SrcIP(self):
        """Attack source IP address
        :rtype: str
        """
        return self._SrcIP

    @SrcIP.setter
    def SrcIP(self, SrcIP):
        self._SrcIP = SrcIP

    @property
    def Location(self):
        """Attack Source
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def CVEId(self):
        """Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEId

    @CVEId.setter
    def CVEId(self, CVEId):
        self._CVEId = CVEId

    @property
    def AttackLevel(self):
        """Vulnerability attack level
        :rtype: int
        """
        return self._AttackLevel

    @AttackLevel.setter
    def AttackLevel(self, AttackLevel):
        self._AttackLevel = AttackLevel

    @property
    def VulDefenceStatus(self):
        """Vulnerability Defense Status: 0 Disabled, 1 Enabled.
        :rtype: int
        """
        return self._VulDefenceStatus

    @VulDefenceStatus.setter
    def VulDefenceStatus(self, VulDefenceStatus):
        self._VulDefenceStatus = VulDefenceStatus

    @property
    def VulSupportDefense(self):
        """Whether vulnerabilities support defense. 0: No 1: Yes
        :rtype: int
        """
        return self._VulSupportDefense

    @VulSupportDefense.setter
    def VulSupportDefense(self, VulSupportDefense):
        self._VulSupportDefense = VulSupportDefense

    @property
    def SvcPs(self):
        """Service Process Base64 
        :rtype: str
        """
        return self._SvcPs

    @SvcPs.setter
    def SvcPs(self, SvcPs):
        self._SvcPs = SvcPs

    @property
    def NetPayload(self):
        """Attack packet
        :rtype: str
        """
        return self._NetPayload

    @NetPayload.setter
    def NetPayload(self, NetPayload):
        self._NetPayload = NetPayload

    @property
    def AbnormalAction(self):
        """Abnormal behavior
        :rtype: str
        """
        return self._AbnormalAction

    @AbnormalAction.setter
    def AbnormalAction(self, AbnormalAction):
        self._AbnormalAction = AbnormalAction

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def Count(self):
        """Attack count
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def PayVersion(self):
        """Machine payment edition. 0: Basic Edition; 1: Professional Edition; 2: Premium Edition; 3: General Discount Edition
        :rtype: int
        """
        return self._PayVersion

    @PayVersion.setter
    def PayVersion(self, PayVersion):
        self._PayVersion = PayVersion

    @property
    def Quuid(self):
        """cvm uuid
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MergeTime(self):
        """Time of Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def Type(self):
        """0: Attack Attempt 1: Successful Attack
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def HostOpType(self):
        """0: No Compromised Behavior 1: RCE (command execution) 2: Dnslog 3: Writefile
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostOpType

    @HostOpType.setter
    def HostOpType(self, HostOpType):
        self._HostOpType = HostOpType

    @property
    def HostOpProcessTree(self):
        """Process Tree, needs to be decoded with base64.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostOpProcessTree

    @HostOpProcessTree.setter
    def HostOpProcessTree(self, HostOpProcessTree):
        self._HostOpProcessTree = HostOpProcessTree


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._SrcIP = params.get("SrcIP")
        self._Location = params.get("Location")
        self._VulName = params.get("VulName")
        self._VulId = params.get("VulId")
        self._CVEId = params.get("CVEId")
        self._AttackLevel = params.get("AttackLevel")
        self._VulDefenceStatus = params.get("VulDefenceStatus")
        self._VulSupportDefense = params.get("VulSupportDefense")
        self._SvcPs = params.get("SvcPs")
        self._NetPayload = params.get("NetPayload")
        self._AbnormalAction = params.get("AbnormalAction")
        self._Uuid = params.get("Uuid")
        self._Id = params.get("Id")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._DstPort = params.get("DstPort")
        self._Count = params.get("Count")
        self._PayVersion = params.get("PayVersion")
        self._Quuid = params.get("Quuid")
        self._MergeTime = params.get("MergeTime")
        self._Type = params.get("Type")
        self._HostOpType = params.get("HostOpType")
        self._HostOpProcessTree = params.get("HostOpProcessTree")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetAttackTopInfo(AbstractModel):
    """Statistics on top network attacks

    """

    def __init__(self):
        r"""
        :param _Agent: Top Statistical Data on Network Attack Host Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :type Agent: list of TopInfo
        :param _SrcIp: Top Statistical Data on Network Attack IP Source Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :type SrcIp: list of TopInfo
        :param _DstPort: Top Statistical Data on Network Attack Target Port Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :type DstPort: list of TopInfo
        :param _Vul: Top Statistical Data on Network Attack Vulnerability Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :type Vul: list of TopInfo
        """
        self._Agent = None
        self._SrcIp = None
        self._DstPort = None
        self._Vul = None

    @property
    def Agent(self):
        """Top Statistical Data on Network Attack Host Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of TopInfo
        """
        return self._Agent

    @Agent.setter
    def Agent(self, Agent):
        self._Agent = Agent

    @property
    def SrcIp(self):
        """Top Statistical Data on Network Attack IP Source Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of TopInfo
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def DstPort(self):
        """Top Statistical Data on Network Attack Target Port Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of TopInfo
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def Vul(self):
        """Top Statistical Data on Network Attack Vulnerability Dimension
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of TopInfo
        """
        return self._Vul

    @Vul.setter
    def Vul(self, Vul):
        self._Vul = Vul


    def _deserialize(self, params):
        if params.get("Agent") is not None:
            self._Agent = []
            for item in params.get("Agent"):
                obj = TopInfo()
                obj._deserialize(item)
                self._Agent.append(obj)
        if params.get("SrcIp") is not None:
            self._SrcIp = []
            for item in params.get("SrcIp"):
                obj = TopInfo()
                obj._deserialize(item)
                self._SrcIp.append(obj)
        if params.get("DstPort") is not None:
            self._DstPort = []
            for item in params.get("DstPort"):
                obj = TopInfo()
                obj._deserialize(item)
                self._DstPort.append(obj)
        if params.get("Vul") is not None:
            self._Vul = []
            for item in params.get("Vul"):
                obj = TopInfo()
                obj._deserialize(item)
                self._Vul.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetAttackTrend(AbstractModel):
    """Attack trend statistics

    """

    def __init__(self):
        r"""
        :param _DateTime: Time Point, e.g., 2023-05-06
Note: This field may return null, indicating that no valid values can be obtained.
        :type DateTime: str
        :param _AttackCount: Number of attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackCount: int
        :param _TryAttackCount: Attack Attempts
Note: This field may return null, indicating that no valid values can be obtained.
        :type TryAttackCount: int
        :param _SuccAttackCount: Attack Success Count
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuccAttackCount: int
        """
        self._DateTime = None
        self._AttackCount = None
        self._TryAttackCount = None
        self._SuccAttackCount = None

    @property
    def DateTime(self):
        """Time Point, e.g., 2023-05-06
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DateTime

    @DateTime.setter
    def DateTime(self, DateTime):
        self._DateTime = DateTime

    @property
    def AttackCount(self):
        """Number of attacks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackCount

    @AttackCount.setter
    def AttackCount(self, AttackCount):
        self._AttackCount = AttackCount

    @property
    def TryAttackCount(self):
        """Attack Attempts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TryAttackCount

    @TryAttackCount.setter
    def TryAttackCount(self, TryAttackCount):
        self._TryAttackCount = TryAttackCount

    @property
    def SuccAttackCount(self):
        """Attack Success Count
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SuccAttackCount

    @SuccAttackCount.setter
    def SuccAttackCount(self, SuccAttackCount):
        self._SuccAttackCount = SuccAttackCount


    def _deserialize(self, params):
        self._DateTime = params.get("DateTime")
        self._AttackCount = params.get("AttackCount")
        self._TryAttackCount = params.get("TryAttackCount")
        self._SuccAttackCount = params.get("SuccAttackCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetAttackWhiteRule(AbstractModel):
    """Network attack allowlist rules

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Id: int
        :param _Description: Rule description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _Scope: 0: A group of Quuid 1: All hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type Scope: int
        :param _DealOldEvents: Whether to process previous events: 0: do not process; 1: process
Note: This field may return null, indicating that no valid values can be obtained.
        :type DealOldEvents: int
        :param _Quuids: Host QUUIDs, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: str
        :param _SrcIP: Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24, separated by semicolons (;)
Note: This field may return null, indicating that no valid values can be obtained.
        :type SrcIP: str
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        """
        self._Id = None
        self._Description = None
        self._Scope = None
        self._DealOldEvents = None
        self._Quuids = None
        self._SrcIP = None
        self._CreateTime = None
        self._ModifyTime = None

    @property
    def Id(self):
        """Rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Description(self):
        """Rule description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Scope(self):
        """0: A group of Quuid 1: All hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def DealOldEvents(self):
        """Whether to process previous events: 0: do not process; 1: process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DealOldEvents

    @DealOldEvents.setter
    def DealOldEvents(self, DealOldEvents):
        self._DealOldEvents = DealOldEvents

    @property
    def Quuids(self):
        """Host QUUIDs, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def SrcIP(self):
        """Source IP. Single IP: 1.1.1.1, IP Range: 1.1.1.1-1.1.2.1, IP Range: 1.1.1.0/24, separated by semicolons (;)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SrcIP

    @SrcIP.setter
    def SrcIP(self, SrcIP):
        self._SrcIP = SrcIP

    @property
    def CreateTime(self):
        """Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Description = params.get("Description")
        self._Scope = params.get("Scope")
        self._DealOldEvents = params.get("DealOldEvents")
        self._Quuids = params.get("Quuids")
        self._SrcIP = params.get("SrcIP")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpenPortStatistics(AbstractModel):
    """Port statistics list

    """

    def __init__(self):
        r"""
        :param _Port: Port number
        :type Port: int
        :param _MachineNum: Number of Hosts
        :type MachineNum: int
        """
        self._Port = None
        self._MachineNum = None

    @property
    def Port(self):
        """Port number
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def MachineNum(self):
        """Number of Hosts
        :rtype: int
        """
        return self._MachineNum

    @MachineNum.setter
    def MachineNum(self, MachineNum):
        self._MachineNum = MachineNum


    def _deserialize(self, params):
        self._Port = params.get("Port")
        self._MachineNum = params.get("MachineNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OrderModifyObject(AbstractModel):
    """Order Modification Parameter Object

    """

    def __init__(self):
        r"""
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _NewSubProductCode: New Product Identification. PRO_VERSION: Professional Edition; FLAGSHIP: Premium Edition
        :type NewSubProductCode: str
        :param _InquireNum: Scale-up/Scale-down Count, which is ignored for reconfiguration sub-product
        :type InquireNum: int
        """
        self._ResourceId = None
        self._NewSubProductCode = None
        self._InquireNum = None

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def NewSubProductCode(self):
        """New Product Identification. PRO_VERSION: Professional Edition; FLAGSHIP: Premium Edition
        :rtype: str
        """
        return self._NewSubProductCode

    @NewSubProductCode.setter
    def NewSubProductCode(self, NewSubProductCode):
        self._NewSubProductCode = NewSubProductCode

    @property
    def InquireNum(self):
        """Scale-up/Scale-down Count, which is ignored for reconfiguration sub-product
        :rtype: int
        """
        return self._InquireNum

    @InquireNum.setter
    def InquireNum(self, InquireNum):
        self._InquireNum = InquireNum


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._NewSubProductCode = params.get("NewSubProductCode")
        self._InquireNum = params.get("InquireNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OrderResource(AbstractModel):
    """Order resources

    """

    def __init__(self):
        r"""
        :param _Id: Resource primary key ID
        :type Id: int
        :param _ResourceId: Resource ID
        :type ResourceId: str
        :param _BeginTime: Start time
        :type BeginTime: str
        :param _EndTime: Expiration time
        :type EndTime: str
        :param _LicenseType: Authorization type
        :type LicenseType: int
        """
        self._Id = None
        self._ResourceId = None
        self._BeginTime = None
        self._EndTime = None
        self._LicenseType = None

    @property
    def Id(self):
        """Resource primary key ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ResourceId(self):
        """Resource ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def BeginTime(self):
        """Start time
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def EndTime(self):
        """Expiration time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def LicenseType(self):
        """Authorization type
        :rtype: int
        """
        return self._LicenseType

    @LicenseType.setter
    def LicenseType(self, LicenseType):
        self._LicenseType = LicenseType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ResourceId = params.get("ResourceId")
        self._BeginTime = params.get("BeginTime")
        self._EndTime = params.get("EndTime")
        self._LicenseType = params.get("LicenseType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OsName(AbstractModel):
    """Operating System Name

    """

    def __init__(self):
        r"""
        :param _Name: System name
        :type Name: str
        :param _MachineOSType: Operating system type enumeration value
        :type MachineOSType: int
        """
        self._Name = None
        self._MachineOSType = None

    @property
    def Name(self):
        """System name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def MachineOSType(self):
        """Operating system type enumeration value
        :rtype: int
        """
        return self._MachineOSType

    @MachineOSType.setter
    def MachineOSType(self, MachineOSType):
        self._MachineOSType = MachineOSType


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._MachineOSType = params.get("MachineOSType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Place(AbstractModel):
    """Log-in location information

    """

    def __init__(self):
        r"""
        :param _CityId: City ID
        :type CityId: int
        :param _ProvinceId: Province ID
        :type ProvinceId: int
        :param _CountryId: Country ID. Currently, only 1 is supported, indicating China.
        :type CountryId: int
        :param _Location: Location name
        :type Location: str
        """
        self._CityId = None
        self._ProvinceId = None
        self._CountryId = None
        self._Location = None

    @property
    def CityId(self):
        """City ID
        :rtype: int
        """
        return self._CityId

    @CityId.setter
    def CityId(self, CityId):
        self._CityId = CityId

    @property
    def ProvinceId(self):
        """Province ID
        :rtype: int
        """
        return self._ProvinceId

    @ProvinceId.setter
    def ProvinceId(self, ProvinceId):
        self._ProvinceId = ProvinceId

    @property
    def CountryId(self):
        """Country ID. Currently, only 1 is supported, indicating China.
        :rtype: int
        """
        return self._CountryId

    @CountryId.setter
    def CountryId(self, CountryId):
        self._CountryId = CountryId

    @property
    def Location(self):
        """Location name
        :rtype: str
        """
        return self._Location

    @Location.setter
    def Location(self, Location):
        self._Location = Location


    def _deserialize(self, params):
        self._CityId = params.get("CityId")
        self._ProvinceId = params.get("ProvinceId")
        self._CountryId = params.get("CountryId")
        self._Location = params.get("Location")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PrivilegeEventInfo(AbstractModel):
    """Local privilege escalation data

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _Uuid: Yunjing ID
        :type Uuid: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _HostIp: Host private IP address
        :type HostIp: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _FullPath: Process path
        :type FullPath: str
        :param _CmdLine: Execute commands
        :type CmdLine: str
        :param _UserName: Username
        :type UserName: str
        :param _UserGroup: User group
        :type UserGroup: str
        :param _ProcFilePrivilege: Process file permission
        :type ProcFilePrivilege: str
        :param _ParentProcName: Parent process name
        :type ParentProcName: str
        :param _ParentProcUser: Parent process username
        :type ParentProcUser: str
        :param _ParentProcGroup: Parent process user group
        :type ParentProcGroup: str
        :param _ParentProcPath: Parent process path
        :type ParentProcPath: str
        :param _PsTree: Process tree json pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: execute commands; ssh_service: SSH service IP; ssh_source: log-in source
        :type PsTree: str
        :param _Status: Processing status: 0: pending; 2: allowlisted; 3: processed; 4: ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Machine name
        :type MachineName: str
        :param _SuggestScheme: Recommended solution
        :type SuggestScheme: str
        :param _HarmDescribe: Hazard description information
        :type HarmDescribe: str
        :param _Tags: Tag
        :type Tags: list of str
        :param _References: Reference link
        :type References: list of str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _NewCaps: Permission list (Separate multiple items with |.)
        :type NewCaps: str
        :param _MachineStatus: Host online status: OFFLINE; ONLINE
        :type MachineStatus: str
        :param _ModifyTime: Processing time
        :type ModifyTime: str
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostIp = None
        self._ProcessName = None
        self._FullPath = None
        self._CmdLine = None
        self._UserName = None
        self._UserGroup = None
        self._ProcFilePrivilege = None
        self._ParentProcName = None
        self._ParentProcUser = None
        self._ParentProcGroup = None
        self._ParentProcPath = None
        self._PsTree = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._SuggestScheme = None
        self._HarmDescribe = None
        self._Tags = None
        self._References = None
        self._MachineWanIp = None
        self._NewCaps = None
        self._MachineStatus = None
        self._ModifyTime = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Yunjing ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def FullPath(self):
        """Process path
        :rtype: str
        """
        return self._FullPath

    @FullPath.setter
    def FullPath(self, FullPath):
        self._FullPath = FullPath

    @property
    def CmdLine(self):
        """Execute commands
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def UserName(self):
        """Username
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UserGroup(self):
        """User group
        :rtype: str
        """
        return self._UserGroup

    @UserGroup.setter
    def UserGroup(self, UserGroup):
        self._UserGroup = UserGroup

    @property
    def ProcFilePrivilege(self):
        """Process file permission
        :rtype: str
        """
        return self._ProcFilePrivilege

    @ProcFilePrivilege.setter
    def ProcFilePrivilege(self, ProcFilePrivilege):
        self._ProcFilePrivilege = ProcFilePrivilege

    @property
    def ParentProcName(self):
        """Parent process name
        :rtype: str
        """
        return self._ParentProcName

    @ParentProcName.setter
    def ParentProcName(self, ParentProcName):
        self._ParentProcName = ParentProcName

    @property
    def ParentProcUser(self):
        """Parent process username
        :rtype: str
        """
        return self._ParentProcUser

    @ParentProcUser.setter
    def ParentProcUser(self, ParentProcUser):
        self._ParentProcUser = ParentProcUser

    @property
    def ParentProcGroup(self):
        """Parent process user group
        :rtype: str
        """
        return self._ParentProcGroup

    @ParentProcGroup.setter
    def ParentProcGroup(self, ParentProcGroup):
        self._ParentProcGroup = ParentProcGroup

    @property
    def ParentProcPath(self):
        """Parent process path
        :rtype: str
        """
        return self._ParentProcPath

    @ParentProcPath.setter
    def ParentProcPath(self, ParentProcPath):
        self._ParentProcPath = ParentProcPath

    @property
    def PsTree(self):
        """Process tree json pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: execute commands; ssh_service: SSH service IP; ssh_source: log-in source
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def Status(self):
        """Processing status: 0: pending; 2: allowlisted; 3: processed; 4: ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Machine name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def SuggestScheme(self):
        """Recommended solution
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def HarmDescribe(self):
        """Hazard description information
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def Tags(self):
        """Tag
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def References(self):
        """Reference link
        :rtype: list of str
        """
        return self._References

    @References.setter
    def References(self, References):
        self._References = References

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def NewCaps(self):
        """Permission list (Separate multiple items with |.)
        :rtype: str
        """
        return self._NewCaps

    @NewCaps.setter
    def NewCaps(self, NewCaps):
        self._NewCaps = NewCaps

    @property
    def MachineStatus(self):
        """Host online status: OFFLINE; ONLINE
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def ModifyTime(self):
        """Processing time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._ProcessName = params.get("ProcessName")
        self._FullPath = params.get("FullPath")
        self._CmdLine = params.get("CmdLine")
        self._UserName = params.get("UserName")
        self._UserGroup = params.get("UserGroup")
        self._ProcFilePrivilege = params.get("ProcFilePrivilege")
        self._ParentProcName = params.get("ParentProcName")
        self._ParentProcUser = params.get("ParentProcUser")
        self._ParentProcGroup = params.get("ParentProcGroup")
        self._ParentProcPath = params.get("ParentProcPath")
        self._PsTree = params.get("PsTree")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._SuggestScheme = params.get("SuggestScheme")
        self._HarmDescribe = params.get("HarmDescribe")
        self._Tags = params.get("Tags")
        self._References = params.get("References")
        self._MachineWanIp = params.get("MachineWanIp")
        self._NewCaps = params.get("NewCaps")
        self._MachineStatus = params.get("MachineStatus")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PrivilegeRule(AbstractModel):
    """Local privilege escalation rule

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _SMode: Whether the mode is S mode
        :type SMode: int
        :param _Operator: Operator
        :type Operator: str
        :param _IsGlobal: Whether the rule is global
        :type IsGlobal: int
        :param _Status: Status. 0: valid; 1: invalid.
        :type Status: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        :param _Hostip: Host IP
        :type Hostip: str
        """
        self._Id = None
        self._Uuid = None
        self._ProcessName = None
        self._SMode = None
        self._Operator = None
        self._IsGlobal = None
        self._Status = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Hostip = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def SMode(self):
        """Whether the mode is S mode
        :rtype: int
        """
        return self._SMode

    @SMode.setter
    def SMode(self, SMode):
        self._SMode = SMode

    @property
    def Operator(self):
        """Operator
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def IsGlobal(self):
        """Whether the rule is global
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Status(self):
        """Status. 0: valid; 1: invalid.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Hostip(self):
        """Host IP
        :rtype: str
        """
        return self._Hostip

    @Hostip.setter
    def Hostip(self, Hostip):
        self._Hostip = Hostip


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._ProcessName = params.get("ProcessName")
        self._SMode = params.get("SMode")
        self._Operator = params.get("Operator")
        self._IsGlobal = params.get("IsGlobal")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Hostip = params.get("Hostip")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProcessStatistics(AbstractModel):
    """Process statistics data

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _MachineNum: Number of hosts
        :type MachineNum: int
        """
        self._ProcessName = None
        self._MachineNum = None

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def MachineNum(self):
        """Number of hosts
        :rtype: int
        """
        return self._MachineNum

    @MachineNum.setter
    def MachineNum(self, MachineNum):
        self._MachineNum = MachineNum


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._MachineNum = params.get("MachineNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProductStatusInfo(AbstractModel):
    """Product trial status query API Data output parameter

    """

    def __init__(self):
        r"""
        :param _FWUserStatus: Protection status. 1: unprotected; 2: protecting; 3: in trial; 4 expired
        :type FWUserStatus: int
        :param _CanApplyTrial: Whether application for trial is available. True indicates yes.
        :type CanApplyTrial: bool
        :param _CanNotApplyReason: Reason for unavailable trial (Leave it blank if the trial is available.)
        :type CanNotApplyReason: str
        :param _LastTrialTime: Last trial end time (Leave it blank if no trial record exists.)
        :type LastTrialTime: str
        """
        self._FWUserStatus = None
        self._CanApplyTrial = None
        self._CanNotApplyReason = None
        self._LastTrialTime = None

    @property
    def FWUserStatus(self):
        """Protection status. 1: unprotected; 2: protecting; 3: in trial; 4 expired
        :rtype: int
        """
        return self._FWUserStatus

    @FWUserStatus.setter
    def FWUserStatus(self, FWUserStatus):
        self._FWUserStatus = FWUserStatus

    @property
    def CanApplyTrial(self):
        """Whether application for trial is available. True indicates yes.
        :rtype: bool
        """
        return self._CanApplyTrial

    @CanApplyTrial.setter
    def CanApplyTrial(self, CanApplyTrial):
        self._CanApplyTrial = CanApplyTrial

    @property
    def CanNotApplyReason(self):
        """Reason for unavailable trial (Leave it blank if the trial is available.)
        :rtype: str
        """
        return self._CanNotApplyReason

    @CanNotApplyReason.setter
    def CanNotApplyReason(self, CanNotApplyReason):
        self._CanNotApplyReason = CanNotApplyReason

    @property
    def LastTrialTime(self):
        """Last trial end time (Leave it blank if no trial record exists.)
        :rtype: str
        """
        return self._LastTrialTime

    @LastTrialTime.setter
    def LastTrialTime(self, LastTrialTime):
        self._LastTrialTime = LastTrialTime


    def _deserialize(self, params):
        self._FWUserStatus = params.get("FWUserStatus")
        self._CanApplyTrial = params.get("CanApplyTrial")
        self._CanNotApplyReason = params.get("CanNotApplyReason")
        self._LastTrialTime = params.get("LastTrialTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseBackup(AbstractModel):
    """List of host snapshot backup

    """

    def __init__(self):
        r"""
        :param _BackupTime: Backup time
        :type BackupTime: str
        :param _EventStatus: Ransom Status: 0 - No Alarm, 1 - Alarm Present
        :type EventStatus: int
        :param _BackupStatus: Backup Status: 0 - Backing up, 1 - Normal, 2, 3 - Failed, 4 - Snapshot expired, 9 - Snapshot deleted
        :type BackupStatus: int
        :param _DiskCount: Number of backup disk
        :type DiskCount: int
        :param _Disks: Hard Disk Information, separated by semicolons (;).
        :type Disks: str
        :param _SnapshotIds: Snapshot List, separated by semicolons (;)
        :type SnapshotIds: str
        :param _StrategyId: Policy ID
        :type StrategyId: int
        :param _StrategyStatus: Policy Status: 0 Disabled, 1 Enabled, 9 Deleted
        :type StrategyStatus: int
        :param _StrategyName: Policy name
        :type StrategyName: str
        """
        self._BackupTime = None
        self._EventStatus = None
        self._BackupStatus = None
        self._DiskCount = None
        self._Disks = None
        self._SnapshotIds = None
        self._StrategyId = None
        self._StrategyStatus = None
        self._StrategyName = None

    @property
    def BackupTime(self):
        """Backup time
        :rtype: str
        """
        return self._BackupTime

    @BackupTime.setter
    def BackupTime(self, BackupTime):
        self._BackupTime = BackupTime

    @property
    def EventStatus(self):
        """Ransom Status: 0 - No Alarm, 1 - Alarm Present
        :rtype: int
        """
        return self._EventStatus

    @EventStatus.setter
    def EventStatus(self, EventStatus):
        self._EventStatus = EventStatus

    @property
    def BackupStatus(self):
        """Backup Status: 0 - Backing up, 1 - Normal, 2, 3 - Failed, 4 - Snapshot expired, 9 - Snapshot deleted
        :rtype: int
        """
        return self._BackupStatus

    @BackupStatus.setter
    def BackupStatus(self, BackupStatus):
        self._BackupStatus = BackupStatus

    @property
    def DiskCount(self):
        """Number of backup disk
        :rtype: int
        """
        return self._DiskCount

    @DiskCount.setter
    def DiskCount(self, DiskCount):
        self._DiskCount = DiskCount

    @property
    def Disks(self):
        """Hard Disk Information, separated by semicolons (;).
        :rtype: str
        """
        return self._Disks

    @Disks.setter
    def Disks(self, Disks):
        self._Disks = Disks

    @property
    def SnapshotIds(self):
        """Snapshot List, separated by semicolons (;)
        :rtype: str
        """
        return self._SnapshotIds

    @SnapshotIds.setter
    def SnapshotIds(self, SnapshotIds):
        self._SnapshotIds = SnapshotIds

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def StrategyStatus(self):
        """Policy Status: 0 Disabled, 1 Enabled, 9 Deleted
        :rtype: int
        """
        return self._StrategyStatus

    @StrategyStatus.setter
    def StrategyStatus(self, StrategyStatus):
        self._StrategyStatus = StrategyStatus

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName


    def _deserialize(self, params):
        self._BackupTime = params.get("BackupTime")
        self._EventStatus = params.get("EventStatus")
        self._BackupStatus = params.get("BackupStatus")
        self._DiskCount = params.get("DiskCount")
        self._Disks = params.get("Disks")
        self._SnapshotIds = params.get("SnapshotIds")
        self._StrategyId = params.get("StrategyId")
        self._StrategyStatus = params.get("StrategyStatus")
        self._StrategyName = params.get("StrategyName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseEvent(AbstractModel):
    """Prevention of Ransomware, Bait and Tamper Events

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: cvm uuid
        :type Quuid: str
        :param _HostName: Host name
        :type HostName: str
        :param _Status: Event Status: 0-Pending, 1-Processed, 2-Trusted, 3-In Process, 4-Backup Resumed
        :type Status: int
        :param _BaitFilePath: Tampered File Path
        :type BaitFilePath: str
        :param _FilePath: Malicious File Path
        :type FilePath: str
        :param _Pid: Malicious Process ID
        :type Pid: int
        :param _PidParam: Malicious Process Parameters
        :type PidParam: str
        :param _FileSize: Malicious File Size
        :type FileSize: int
        :param _FileMd5: Malicious File MD5
        :type FileMd5: str
        :param _Type: Event Type: 0 Encrypted Ransom, 1 File Tampering
        :type Type: int
        :param _CreateTime: Event Sending Time
        :type CreateTime: str
        :param _InstanceId: CVM Instance ID
        :type InstanceId: str
        :param _ModifyTime: Event Modification Event
        :type ModifyTime: str
        :param _StrategyId: Policy ID
        :type StrategyId: int
        :param _StrategyName: Policy name
        :type StrategyName: str
        :param _HostIp: Host public IP address
        :type HostIp: str
        :param _WanIp: Host Intranet IP
        :type WanIp: str
        :param _PsTree: Process Tree Base64 Json
        :type PsTree: str
        :param _ProcessStartTime: Process startup time
        :type ProcessStartTime: str
        :param _SnapshotNum: Number of Snapshot Backups Owned by the Host
        :type SnapshotNum: int
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostName = None
        self._Status = None
        self._BaitFilePath = None
        self._FilePath = None
        self._Pid = None
        self._PidParam = None
        self._FileSize = None
        self._FileMd5 = None
        self._Type = None
        self._CreateTime = None
        self._InstanceId = None
        self._ModifyTime = None
        self._StrategyId = None
        self._StrategyName = None
        self._HostIp = None
        self._WanIp = None
        self._PsTree = None
        self._ProcessStartTime = None
        self._SnapshotNum = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """cvm uuid
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def Status(self):
        """Event Status: 0-Pending, 1-Processed, 2-Trusted, 3-In Process, 4-Backup Resumed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def BaitFilePath(self):
        """Tampered File Path
        :rtype: str
        """
        return self._BaitFilePath

    @BaitFilePath.setter
    def BaitFilePath(self, BaitFilePath):
        self._BaitFilePath = BaitFilePath

    @property
    def FilePath(self):
        """Malicious File Path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def Pid(self):
        """Malicious Process ID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def PidParam(self):
        """Malicious Process Parameters
        :rtype: str
        """
        return self._PidParam

    @PidParam.setter
    def PidParam(self, PidParam):
        self._PidParam = PidParam

    @property
    def FileSize(self):
        """Malicious File Size
        :rtype: int
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def FileMd5(self):
        """Malicious File MD5
        :rtype: str
        """
        return self._FileMd5

    @FileMd5.setter
    def FileMd5(self, FileMd5):
        self._FileMd5 = FileMd5

    @property
    def Type(self):
        """Event Type: 0 Encrypted Ransom, 1 File Tampering
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def CreateTime(self):
        """Event Sending Time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def InstanceId(self):
        """CVM Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def ModifyTime(self):
        """Event Modification Event
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def HostIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def WanIp(self):
        """Host Intranet IP
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def PsTree(self):
        """Process Tree Base64 Json
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def ProcessStartTime(self):
        """Process startup time
        :rtype: str
        """
        return self._ProcessStartTime

    @ProcessStartTime.setter
    def ProcessStartTime(self, ProcessStartTime):
        self._ProcessStartTime = ProcessStartTime

    @property
    def SnapshotNum(self):
        """Number of Snapshot Backups Owned by the Host
        :rtype: int
        """
        return self._SnapshotNum

    @SnapshotNum.setter
    def SnapshotNum(self, SnapshotNum):
        self._SnapshotNum = SnapshotNum


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostName = params.get("HostName")
        self._Status = params.get("Status")
        self._BaitFilePath = params.get("BaitFilePath")
        self._FilePath = params.get("FilePath")
        self._Pid = params.get("Pid")
        self._PidParam = params.get("PidParam")
        self._FileSize = params.get("FileSize")
        self._FileMd5 = params.get("FileMd5")
        self._Type = params.get("Type")
        self._CreateTime = params.get("CreateTime")
        self._InstanceId = params.get("InstanceId")
        self._ModifyTime = params.get("ModifyTime")
        self._StrategyId = params.get("StrategyId")
        self._StrategyName = params.get("StrategyName")
        self._HostIp = params.get("HostIp")
        self._WanIp = params.get("WanIp")
        self._PsTree = params.get("PsTree")
        self._ProcessStartTime = params.get("ProcessStartTime")
        self._SnapshotNum = params.get("SnapshotNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseRollbackRequest(AbstractModel):
    """RansomDefenseRollback request structure.

    """

    def __init__(self):
        r"""
        :param _BackupTime: Snapshot time
        :type BackupTime: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _DiskInfo: Information about the hard disks that need to be rolled back. Hard disks are directly separated by semicolons (;); blanks are all disks that have been snapshot: disk-id1|disk-name1;disk-id2|disk-name2.
        :type DiskInfo: str
        """
        self._BackupTime = None
        self._Quuid = None
        self._DiskInfo = None

    @property
    def BackupTime(self):
        """Snapshot time
        :rtype: str
        """
        return self._BackupTime

    @BackupTime.setter
    def BackupTime(self, BackupTime):
        self._BackupTime = BackupTime

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def DiskInfo(self):
        """Information about the hard disks that need to be rolled back. Hard disks are directly separated by semicolons (;); blanks are all disks that have been snapshot: disk-id1|disk-name1;disk-id2|disk-name2.
        :rtype: str
        """
        return self._DiskInfo

    @DiskInfo.setter
    def DiskInfo(self, DiskInfo):
        self._DiskInfo = DiskInfo


    def _deserialize(self, params):
        self._BackupTime = params.get("BackupTime")
        self._Quuid = params.get("Quuid")
        self._DiskInfo = params.get("DiskInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseRollbackResponse(AbstractModel):
    """RansomDefenseRollback response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RansomDefenseRollbackTask(AbstractModel):
    """Anti-ransomware rollback task

    """

    def __init__(self):
        r"""
        :param _Id: Task ID
        :type Id: int
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _Status: Rollback Task Status: 0 - In Progress, 1 - Succeeded, 2 - Failed
        :type Status: int
        :param _Disks: Hard drive ID list, separated by semicolons (;)
        :type Disks: str
        :param _CreateTime: Operation time
        :type CreateTime: str
        :param _BackupTime: Snapshot time
        :type BackupTime: str
        :param _ModifyTime: Status!=0 indicates the completion time.
        :type ModifyTime: str
        :param _RegionInfo: Availability zone information
        :type RegionInfo: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._MachineName = None
        self._Status = None
        self._Disks = None
        self._CreateTime = None
        self._BackupTime = None
        self._ModifyTime = None
        self._RegionInfo = None

    @property
    def Id(self):
        """Task ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def Status(self):
        """Rollback Task Status: 0 - In Progress, 1 - Succeeded, 2 - Failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Disks(self):
        """Hard drive ID list, separated by semicolons (;)
        :rtype: str
        """
        return self._Disks

    @Disks.setter
    def Disks(self, Disks):
        self._Disks = Disks

    @property
    def CreateTime(self):
        """Operation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def BackupTime(self):
        """Snapshot time
        :rtype: str
        """
        return self._BackupTime

    @BackupTime.setter
    def BackupTime(self, BackupTime):
        self._BackupTime = BackupTime

    @property
    def ModifyTime(self):
        """Status!=0 indicates the completion time.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def RegionInfo(self):
        """Availability zone information
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        return self._RegionInfo

    @RegionInfo.setter
    def RegionInfo(self, RegionInfo):
        self._RegionInfo = RegionInfo


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._MachineName = params.get("MachineName")
        self._Status = params.get("Status")
        self._Disks = params.get("Disks")
        self._CreateTime = params.get("CreateTime")
        self._BackupTime = params.get("BackupTime")
        self._ModifyTime = params.get("ModifyTime")
        if params.get("RegionInfo") is not None:
            self._RegionInfo = RegionInfo()
            self._RegionInfo._deserialize(params.get("RegionInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseStrategy(AbstractModel):
    """The TagList node in the data HostList corresponding to the host list query API

    """

    def __init__(self):
        r"""
        :param _Id: Policy ID
        :type Id: int
        :param _Uin: Operating UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uin: str
        :param _Name: Policy name
        :type Name: str
        :param _Description: Policy Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _Status: Enabling Status: 0 Disabled, 1 Enabled.
        :type Status: int
        :param _IsAll: Whether it takes effect for all hosts.
        :type IsAll: int
        :param _IncludeDir: Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :type IncludeDir: str
        :param _ExcludeDir: Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExcludeDir: str
        :param _BackupType: Backup pattern: 0 weekly, 1 daily.
Note: This field may return null, indicating that no valid values can be obtained.
        :type BackupType: int
        :param _Weekday: Backup days in a week (1-7): 1; 2; 3; 4.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Weekday: str
        :param _Hour: Backup Execution Time Point (0-23): 11:00; 12:00
        :type Hour: str
        :param _SaveDay: Storage Days, 0 for Permanent
        :type SaveDay: int
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _MachineCount: Number of Bound Machines
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineCount: int
        """
        self._Id = None
        self._Uin = None
        self._Name = None
        self._Description = None
        self._Status = None
        self._IsAll = None
        self._IncludeDir = None
        self._ExcludeDir = None
        self._BackupType = None
        self._Weekday = None
        self._Hour = None
        self._SaveDay = None
        self._CreateTime = None
        self._ModifyTime = None
        self._MachineCount = None

    @property
    def Id(self):
        """Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uin(self):
        """Operating UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def Name(self):
        """Policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """Policy Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        """Enabling Status: 0 Disabled, 1 Enabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsAll(self):
        """Whether it takes effect for all hosts.
        :rtype: int
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll

    @property
    def IncludeDir(self):
        """Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IncludeDir

    @IncludeDir.setter
    def IncludeDir(self, IncludeDir):
        self._IncludeDir = IncludeDir

    @property
    def ExcludeDir(self):
        """Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ExcludeDir

    @ExcludeDir.setter
    def ExcludeDir(self, ExcludeDir):
        self._ExcludeDir = ExcludeDir

    @property
    def BackupType(self):
        """Backup pattern: 0 weekly, 1 daily.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BackupType

    @BackupType.setter
    def BackupType(self, BackupType):
        self._BackupType = BackupType

    @property
    def Weekday(self):
        """Backup days in a week (1-7): 1; 2; 3; 4.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Weekday

    @Weekday.setter
    def Weekday(self, Weekday):
        self._Weekday = Weekday

    @property
    def Hour(self):
        """Backup Execution Time Point (0-23): 11:00; 12:00
        :rtype: str
        """
        return self._Hour

    @Hour.setter
    def Hour(self, Hour):
        self._Hour = Hour

    @property
    def SaveDay(self):
        """Storage Days, 0 for Permanent
        :rtype: int
        """
        return self._SaveDay

    @SaveDay.setter
    def SaveDay(self, SaveDay):
        self._SaveDay = SaveDay

    @property
    def CreateTime(self):
        """Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def MachineCount(self):
        """Number of Bound Machines
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MachineCount

    @MachineCount.setter
    def MachineCount(self, MachineCount):
        self._MachineCount = MachineCount


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uin = params.get("Uin")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._IsAll = params.get("IsAll")
        self._IncludeDir = params.get("IncludeDir")
        self._ExcludeDir = params.get("ExcludeDir")
        self._BackupType = params.get("BackupType")
        self._Weekday = params.get("Weekday")
        self._Hour = params.get("Hour")
        self._SaveDay = params.get("SaveDay")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._MachineCount = params.get("MachineCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseStrategyDetail(AbstractModel):
    """The TagList node in the data HostList corresponding to the host list query API

    """

    def __init__(self):
        r"""
        :param _Id: Policy ID
        :type Id: int
        :param _Uin: Operating UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uin: str
        :param _Name: Policy name
        :type Name: str
        :param _Description: Policy Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _Status: Enabling Status: 0 Disabled, 1 Enabled.
        :type Status: int
        :param _IsAll: Whether it takes effect for all hosts.
        :type IsAll: int
        :param _IncludeDir: Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :type IncludeDir: str
        :param _ExcludeDir: Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExcludeDir: str
        :param _BackupType: Backup pattern: 0 weekly, 1 daily.
Note: This field may return null, indicating that no valid values can be obtained.
        :type BackupType: int
        :param _Weekday: Backup days in a week (1-7): 1; 2; 3; 4.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Weekday: str
        :param _Hour: Backup Execution Time Point (0-23): 11:00; 12:00
        :type Hour: str
        :param _SaveDay: Storage Days, 0 for Permanent
        :type SaveDay: int
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _ModifyTime: Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _MachineCount: Number of Bound Machines
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineCount: int
        :param _EventCount: Policy Associated Event Count
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventCount: int
        """
        self._Id = None
        self._Uin = None
        self._Name = None
        self._Description = None
        self._Status = None
        self._IsAll = None
        self._IncludeDir = None
        self._ExcludeDir = None
        self._BackupType = None
        self._Weekday = None
        self._Hour = None
        self._SaveDay = None
        self._CreateTime = None
        self._ModifyTime = None
        self._MachineCount = None
        self._EventCount = None

    @property
    def Id(self):
        """Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uin(self):
        """Operating UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def Name(self):
        """Policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """Policy Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        """Enabling Status: 0 Disabled, 1 Enabled.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsAll(self):
        """Whether it takes effect for all hosts.
        :rtype: int
        """
        return self._IsAll

    @IsAll.setter
    def IsAll(self, IsAll):
        self._IsAll = IsAll

    @property
    def IncludeDir(self):
        """Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IncludeDir

    @IncludeDir.setter
    def IncludeDir(self, IncludeDir):
        self._IncludeDir = IncludeDir

    @property
    def ExcludeDir(self):
        """Includes directories, separated by semicolons (;).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ExcludeDir

    @ExcludeDir.setter
    def ExcludeDir(self, ExcludeDir):
        self._ExcludeDir = ExcludeDir

    @property
    def BackupType(self):
        """Backup pattern: 0 weekly, 1 daily.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BackupType

    @BackupType.setter
    def BackupType(self, BackupType):
        self._BackupType = BackupType

    @property
    def Weekday(self):
        """Backup days in a week (1-7): 1; 2; 3; 4.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Weekday

    @Weekday.setter
    def Weekday(self, Weekday):
        self._Weekday = Weekday

    @property
    def Hour(self):
        """Backup Execution Time Point (0-23): 11:00; 12:00
        :rtype: str
        """
        return self._Hour

    @Hour.setter
    def Hour(self, Hour):
        self._Hour = Hour

    @property
    def SaveDay(self):
        """Storage Days, 0 for Permanent
        :rtype: int
        """
        return self._SaveDay

    @SaveDay.setter
    def SaveDay(self, SaveDay):
        self._SaveDay = SaveDay

    @property
    def CreateTime(self):
        """Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last modification time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def MachineCount(self):
        """Number of Bound Machines
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MachineCount

    @MachineCount.setter
    def MachineCount(self, MachineCount):
        self._MachineCount = MachineCount

    @property
    def EventCount(self):
        """Policy Associated Event Count
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uin = params.get("Uin")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._IsAll = params.get("IsAll")
        self._IncludeDir = params.get("IncludeDir")
        self._ExcludeDir = params.get("ExcludeDir")
        self._BackupType = params.get("BackupType")
        self._Weekday = params.get("Weekday")
        self._Hour = params.get("Hour")
        self._SaveDay = params.get("SaveDay")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._MachineCount = params.get("MachineCount")
        self._EventCount = params.get("EventCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseStrategyMachineBackupInfo(AbstractModel):
    """Details of Host Backup Bound to Anti-Ransomware Policy

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _InstanceId: Host Instance ID
        :type InstanceId: str
        :param _MachineIp: Private IP address
        :type MachineIp: str
        :param _MachineWanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _CloudTags: Cloud tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tag
        :param _RegionInfo: Availability zone information
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegionInfo: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        :param _Tag: CWPP tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Status: Protection status: 0 Disabled, 1 Enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _StrategyId: Policy ID. 0 indicates no binding to any policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyId: int
        :param _DiskInfo: Hard disk information, all hard disks take effect when left blank:
Separate diskId1|diskName1;diskId2|diskName2
Note: This field may return null, indicating that no valid values can be obtained.
        :type DiskInfo: str
        :param _StrategyName: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyName: str
        :param _BackupCount: Number of Backups
Note: This field may return null, indicating that no valid values can be obtained.
        :type BackupCount: int
        :param _LastBackupStatus: Latest Backup Status: 0 - Backing Up, 1 - Normal, 2 - Failed, 9 - No Backup Yet
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastBackupStatus: int
        :param _LastBackupMessage: Reason for the Last Backup Failure
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastBackupMessage: str
        :param _LastBackupTime: Last Backup Time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastBackupTime: str
        :param _RollBackPercent: Latest Rollback Progress Percentage
Note: This field may return null, indicating that no valid values can be obtained.
        :type RollBackPercent: int
        :param _RollBackStatus: Latest Rollback Status: 0 - In Progress, 1 - Succeeded, 2 - Failed
Note: This field may return null, indicating that no valid values can be obtained.
        :type RollBackStatus: int
        :param _BackupSuccessCount: Backup Success Count
Note: This field may return null, indicating that no valid values can be obtained.
        :type BackupSuccessCount: int
        """
        self._Uuid = None
        self._Quuid = None
        self._MachineName = None
        self._InstanceId = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._CloudTags = None
        self._RegionInfo = None
        self._Tag = None
        self._Status = None
        self._StrategyId = None
        self._DiskInfo = None
        self._StrategyName = None
        self._BackupCount = None
        self._LastBackupStatus = None
        self._LastBackupMessage = None
        self._LastBackupTime = None
        self._RollBackPercent = None
        self._RollBackStatus = None
        self._BackupSuccessCount = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def InstanceId(self):
        """Host Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def MachineIp(self):
        """Private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def CloudTags(self):
        """Cloud tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tag
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def RegionInfo(self):
        """Availability zone information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        return self._RegionInfo

    @RegionInfo.setter
    def RegionInfo(self, RegionInfo):
        self._RegionInfo = RegionInfo

    @property
    def Tag(self):
        """CWPP tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Status(self):
        """Protection status: 0 Disabled, 1 Enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StrategyId(self):
        """Policy ID. 0 indicates no binding to any policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def DiskInfo(self):
        """Hard disk information, all hard disks take effect when left blank:
Separate diskId1|diskName1;diskId2|diskName2
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DiskInfo

    @DiskInfo.setter
    def DiskInfo(self, DiskInfo):
        self._DiskInfo = DiskInfo

    @property
    def StrategyName(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def BackupCount(self):
        """Number of Backups
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BackupCount

    @BackupCount.setter
    def BackupCount(self, BackupCount):
        self._BackupCount = BackupCount

    @property
    def LastBackupStatus(self):
        """Latest Backup Status: 0 - Backing Up, 1 - Normal, 2 - Failed, 9 - No Backup Yet
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._LastBackupStatus

    @LastBackupStatus.setter
    def LastBackupStatus(self, LastBackupStatus):
        self._LastBackupStatus = LastBackupStatus

    @property
    def LastBackupMessage(self):
        """Reason for the Last Backup Failure
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastBackupMessage

    @LastBackupMessage.setter
    def LastBackupMessage(self, LastBackupMessage):
        self._LastBackupMessage = LastBackupMessage

    @property
    def LastBackupTime(self):
        """Last Backup Time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastBackupTime

    @LastBackupTime.setter
    def LastBackupTime(self, LastBackupTime):
        self._LastBackupTime = LastBackupTime

    @property
    def RollBackPercent(self):
        """Latest Rollback Progress Percentage
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RollBackPercent

    @RollBackPercent.setter
    def RollBackPercent(self, RollBackPercent):
        self._RollBackPercent = RollBackPercent

    @property
    def RollBackStatus(self):
        """Latest Rollback Status: 0 - In Progress, 1 - Succeeded, 2 - Failed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RollBackStatus

    @RollBackStatus.setter
    def RollBackStatus(self, RollBackStatus):
        self._RollBackStatus = RollBackStatus

    @property
    def BackupSuccessCount(self):
        """Backup Success Count
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BackupSuccessCount

    @BackupSuccessCount.setter
    def BackupSuccessCount(self, BackupSuccessCount):
        self._BackupSuccessCount = BackupSuccessCount


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._MachineName = params.get("MachineName")
        self._InstanceId = params.get("InstanceId")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tag()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        if params.get("RegionInfo") is not None:
            self._RegionInfo = RegionInfo()
            self._RegionInfo._deserialize(params.get("RegionInfo"))
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Status = params.get("Status")
        self._StrategyId = params.get("StrategyId")
        self._DiskInfo = params.get("DiskInfo")
        self._StrategyName = params.get("StrategyName")
        self._BackupCount = params.get("BackupCount")
        self._LastBackupStatus = params.get("LastBackupStatus")
        self._LastBackupMessage = params.get("LastBackupMessage")
        self._LastBackupTime = params.get("LastBackupTime")
        self._RollBackPercent = params.get("RollBackPercent")
        self._RollBackStatus = params.get("RollBackStatus")
        self._BackupSuccessCount = params.get("BackupSuccessCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseStrategyMachineDetail(AbstractModel):
    """Anti-Ransomware Host List

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _InstanceId: Host Instance ID
        :type InstanceId: str
        :param _MachineIp: Private IP address
        :type MachineIp: str
        :param _MachineWanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _CloudTags: Cloud tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tag
        :param _RegionInfo: Availability zone information
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegionInfo: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        :param _Tag: CWPP tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of MachineTag
        :param _Status: Protection status: 0 Disabled, 1 Enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _StrategyId: Policy ID. 0 indicates no binding to any policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyId: int
        :param _DiskInfo: Hard disk information, all hard disks take effect when left blank:
Separate diskId1|diskName1;diskId2|diskName2
Note: This field may return null, indicating that no valid values can be obtained.
        :type DiskInfo: str
        :param _HostVersion: Edition information. 0: Basic Edition; 1: Pro Edition; 2: Ultimate Edition; 3: Inclusive Edition.Note: This field may return null, indicating that no valid values can be obtained.
        :type HostVersion: int
        :param _StrategyName: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyName: str
        """
        self._Uuid = None
        self._Quuid = None
        self._MachineName = None
        self._InstanceId = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._CloudTags = None
        self._RegionInfo = None
        self._Tag = None
        self._Status = None
        self._StrategyId = None
        self._DiskInfo = None
        self._HostVersion = None
        self._StrategyName = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def InstanceId(self):
        """Host Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def MachineIp(self):
        """Private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def CloudTags(self):
        """Cloud tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tag
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def RegionInfo(self):
        """Availability zone information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.RegionInfo`
        """
        return self._RegionInfo

    @RegionInfo.setter
    def RegionInfo(self, RegionInfo):
        self._RegionInfo = RegionInfo

    @property
    def Tag(self):
        """CWPP tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of MachineTag
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Status(self):
        """Protection status: 0 Disabled, 1 Enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StrategyId(self):
        """Policy ID. 0 indicates no binding to any policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def DiskInfo(self):
        """Hard disk information, all hard disks take effect when left blank:
Separate diskId1|diskName1;diskId2|diskName2
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DiskInfo

    @DiskInfo.setter
    def DiskInfo(self, DiskInfo):
        self._DiskInfo = DiskInfo

    @property
    def HostVersion(self):
        """Edition information. 0: Basic Edition; 1: Pro Edition; 2: Ultimate Edition; 3: Inclusive Edition.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostVersion

    @HostVersion.setter
    def HostVersion(self, HostVersion):
        self._HostVersion = HostVersion

    @property
    def StrategyName(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._MachineName = params.get("MachineName")
        self._InstanceId = params.get("InstanceId")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tag()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        if params.get("RegionInfo") is not None:
            self._RegionInfo = RegionInfo()
            self._RegionInfo._deserialize(params.get("RegionInfo"))
        if params.get("Tag") is not None:
            self._Tag = []
            for item in params.get("Tag"):
                obj = MachineTag()
                obj._deserialize(item)
                self._Tag.append(obj)
        self._Status = params.get("Status")
        self._StrategyId = params.get("StrategyId")
        self._DiskInfo = params.get("DiskInfo")
        self._HostVersion = params.get("HostVersion")
        self._StrategyName = params.get("StrategyName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RansomDefenseStrategyMachineInfo(AbstractModel):
    """Anti-Ransomware Machine Hard Disk Configuration

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _DiskInfo: Specified Hard Disk List. When it is empty, it means all hard disks: disk_id1|disk_name1;disk_id2|disk_name2.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DiskInfo: str
        """
        self._Uuid = None
        self._DiskInfo = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def DiskInfo(self):
        """Specified Hard Disk List. When it is empty, it means all hard disks: disk_id1|disk_name1;disk_id2|disk_name2.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DiskInfo

    @DiskInfo.setter
    def DiskInfo(self, DiskInfo):
        self._DiskInfo = DiskInfo


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._DiskInfo = params.get("DiskInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecordInfo(AbstractModel):
    """Client Exception Information Structure

    """

    def __init__(self):
        r"""
        :param _HostIP: Host IP
        :type HostIP: str
        :param _InstanceID: Host Instance ID
        :type InstanceID: str
        :param _OfflineTime: Client Offline Time
        :type OfflineTime: str
        :param _UninstallTime: Client Uninstallation Time
        :type UninstallTime: str
        :param _UninstallCmd: Client Uninstallation Call Chain
        :type UninstallCmd: str
        :param _Uuid: Client UUID
        :type Uuid: str
        """
        self._HostIP = None
        self._InstanceID = None
        self._OfflineTime = None
        self._UninstallTime = None
        self._UninstallCmd = None
        self._Uuid = None

    @property
    def HostIP(self):
        """Host IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def InstanceID(self):
        """Host Instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def OfflineTime(self):
        """Client Offline Time
        :rtype: str
        """
        return self._OfflineTime

    @OfflineTime.setter
    def OfflineTime(self, OfflineTime):
        self._OfflineTime = OfflineTime

    @property
    def UninstallTime(self):
        """Client Uninstallation Time
        :rtype: str
        """
        return self._UninstallTime

    @UninstallTime.setter
    def UninstallTime(self, UninstallTime):
        self._UninstallTime = UninstallTime

    @property
    def UninstallCmd(self):
        """Client Uninstallation Call Chain
        :rtype: str
        """
        return self._UninstallCmd

    @UninstallCmd.setter
    def UninstallCmd(self, UninstallCmd):
        self._UninstallCmd = UninstallCmd

    @property
    def Uuid(self):
        """Client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._HostIP = params.get("HostIP")
        self._InstanceID = params.get("InstanceID")
        self._OfflineTime = params.get("OfflineTime")
        self._UninstallTime = params.get("UninstallTime")
        self._UninstallCmd = params.get("UninstallCmd")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecoverMalwaresRequest(AbstractModel):
    """RecoverMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Trojan ID array (The maximum number of IDs is 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Trojan ID array (The maximum number of IDs is 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecoverMalwaresResponse(AbstractModel):
    """RecoverMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessIds: An array of IDs for successfully recovered items; if none, an empty array is returned.
        :type SuccessIds: list of int non-negative
        :param _FailedIds: An array of IDs for items that failed to be recovered; if none, an empty array is returned.
        :type FailedIds: list of int non-negative
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessIds = None
        self._FailedIds = None
        self._RequestId = None

    @property
    def SuccessIds(self):
        """An array of IDs for successfully recovered items; if none, an empty array is returned.
        :rtype: list of int non-negative
        """
        return self._SuccessIds

    @SuccessIds.setter
    def SuccessIds(self, SuccessIds):
        self._SuccessIds = SuccessIds

    @property
    def FailedIds(self):
        """An array of IDs for items that failed to be recovered; if none, an empty array is returned.
        :rtype: list of int non-negative
        """
        return self._FailedIds

    @FailedIds.setter
    def FailedIds(self, FailedIds):
        self._FailedIds = FailedIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessIds = params.get("SuccessIds")
        self._FailedIds = params.get("FailedIds")
        self._RequestId = params.get("RequestId")


class RegionInfo(AbstractModel):
    """Region information

    """

    def __init__(self):
        r"""
        :param _Region: Region identifiers, such as ap-guangzhou, ap-shanghai, and ap-beijing
        :type Region: str
        :param _RegionName: Chinese name of a region, such as South China (Guangzhou), East China (Shanghai Finance), and North China (Beijing)
        :type RegionName: str
        :param _RegionId: Region ID
        :type RegionId: int
        :param _RegionCode: Region code, such as gz, sh, and bj
        :type RegionCode: str
        :param _RegionNameEn: English name of the region
        :type RegionNameEn: str
        """
        self._Region = None
        self._RegionName = None
        self._RegionId = None
        self._RegionCode = None
        self._RegionNameEn = None

    @property
    def Region(self):
        """Region identifiers, such as ap-guangzhou, ap-shanghai, and ap-beijing
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def RegionName(self):
        """Chinese name of a region, such as South China (Guangzhou), East China (Shanghai Finance), and North China (Beijing)
        :rtype: str
        """
        return self._RegionName

    @RegionName.setter
    def RegionName(self, RegionName):
        self._RegionName = RegionName

    @property
    def RegionId(self):
        """Region ID
        :rtype: int
        """
        return self._RegionId

    @RegionId.setter
    def RegionId(self, RegionId):
        self._RegionId = RegionId

    @property
    def RegionCode(self):
        """Region code, such as gz, sh, and bj
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def RegionNameEn(self):
        """English name of the region
        :rtype: str
        """
        return self._RegionNameEn

    @RegionNameEn.setter
    def RegionNameEn(self, RegionNameEn):
        self._RegionNameEn = RegionNameEn


    def _deserialize(self, params):
        self._Region = params.get("Region")
        self._RegionName = params.get("RegionName")
        self._RegionId = params.get("RegionId")
        self._RegionCode = params.get("RegionCode")
        self._RegionNameEn = params.get("RegionNameEn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegionListDetail(AbstractModel):
    """Details of the region list

    """

    def __init__(self):
        r"""
        :param _MachineType: Machine type
CVM, Tencent Cloud Virtual Machine
LH, TencentCloud Lighthouse
ECM, Tencent Cloud Edge Computing Machine
BM, Tencent BM 1.0
Other, Other servers (non-Tencent Cloud)
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineType: str
        :param _CloudFrom: 0 Tencent Cloud
1 IDC
2 Alibaba Cloud
3 Huawei Cloud
4 Amazon
5 Microsoft
6 Google
7 Oracle
8 Digital Ocean
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudFrom: int
        :param _RegionList: List of regions
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegionList: list of RegionInfo
        """
        self._MachineType = None
        self._CloudFrom = None
        self._RegionList = None

    @property
    def MachineType(self):
        """Machine type
CVM, Tencent Cloud Virtual Machine
LH, TencentCloud Lighthouse
ECM, Tencent Cloud Edge Computing Machine
BM, Tencent BM 1.0
Other, Other servers (non-Tencent Cloud)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def CloudFrom(self):
        """0 Tencent Cloud
1 IDC
2 Alibaba Cloud
3 Huawei Cloud
4 Amazon
5 Microsoft
6 Google
7 Oracle
8 Digital Ocean
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CloudFrom

    @CloudFrom.setter
    def CloudFrom(self, CloudFrom):
        self._CloudFrom = CloudFrom

    @property
    def RegionList(self):
        """List of regions
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of RegionInfo
        """
        return self._RegionList

    @RegionList.setter
    def RegionList(self, RegionList):
        self._RegionList = RegionList


    def _deserialize(self, params):
        self._MachineType = params.get("MachineType")
        self._CloudFrom = params.get("CloudFrom")
        if params.get("RegionList") is not None:
            self._RegionList = []
            for item in params.get("RegionList"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._RegionList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegionSet(AbstractModel):
    """Region information

    """

    def __init__(self):
        r"""
        :param _RegionName: Region name
        :type RegionName: str
        :param _ZoneSet: AZ information
        :type ZoneSet: list of ZoneInfo
        """
        self._RegionName = None
        self._ZoneSet = None

    @property
    def RegionName(self):
        """Region name
        :rtype: str
        """
        return self._RegionName

    @RegionName.setter
    def RegionName(self, RegionName):
        self._RegionName = RegionName

    @property
    def ZoneSet(self):
        """AZ information
        :rtype: list of ZoneInfo
        """
        return self._ZoneSet

    @ZoneSet.setter
    def ZoneSet(self, ZoneSet):
        self._ZoneSet = ZoneSet


    def _deserialize(self, params):
        self._RegionName = params.get("RegionName")
        if params.get("ZoneSet") is not None:
            self._ZoneSet = []
            for item in params.get("ZoneSet"):
                obj = ZoneInfo()
                obj._deserialize(item)
                self._ZoneSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveLocalStorageItemRequest(AbstractModel):
    """RemoveLocalStorageItem request structure.

    """

    def __init__(self):
        r"""
        :param _Key: Key
        :type Key: str
        """
        self._Key = None

    @property
    def Key(self):
        """Key
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key


    def _deserialize(self, params):
        self._Key = params.get("Key")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveLocalStorageItemResponse(AbstractModel):
    """RemoveLocalStorageItem response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RemoveMachineRequest(AbstractModel):
    """RemoveMachine request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        """
        self._Uuid = None
        self._Quuid = None

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveMachineResponse(AbstractModel):
    """RemoveMachine response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RetryCreateSnapshotRequest(AbstractModel):
    """RetryCreateSnapshot request structure.

    """

    def __init__(self):
        r"""
        :param _FixId: Fix task ID
        :type FixId: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Id: Unique ID of the snapshot returned by the task progress
        :type Id: int
        """
        self._FixId = None
        self._Quuid = None
        self._Id = None

    @property
    def FixId(self):
        """Fix task ID
        :rtype: int
        """
        return self._FixId

    @FixId.setter
    def FixId(self, FixId):
        self._FixId = FixId

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Id(self):
        """Unique ID of the snapshot returned by the task progress
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._FixId = params.get("FixId")
        self._Quuid = params.get("Quuid")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RetryCreateSnapshotResponse(AbstractModel):
    """RetryCreateSnapshot response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RetryVulFixRequest(AbstractModel):
    """RetryVulFix request structure.

    """

    def __init__(self):
        r"""
        :param _FixId: Vulnerability ID
        :type FixId: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _VulId: Vulnerability ID
        :type VulId: int
        """
        self._FixId = None
        self._Quuid = None
        self._VulId = None

    @property
    def FixId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._FixId

    @FixId.setter
    def FixId(self, FixId):
        self._FixId = FixId

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId


    def _deserialize(self, params):
        self._FixId = params.get("FixId")
        self._Quuid = params.get("Quuid")
        self._VulId = params.get("VulId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RetryVulFixResponse(AbstractModel):
    """RetryVulFix response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ReverseShell(AbstractModel):
    """Reverse Shell data

    """

    def __init__(self):
        r"""
        :param _Id: ID primary key
        :type Id: int
        :param _Uuid: CWPP UUID
        :type Uuid: str
        :param _Quuid: Server ID
        :type Quuid: str
        :param _Hostip: Host private IP address
        :type Hostip: str
        :param _DstIp: Target IP
        :type DstIp: str
        :param _DstPort: Target port
        :type DstPort: int
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _FullPath: Process path
        :type FullPath: str
        :param _CmdLine: Command details
        :type CmdLine: str
        :param _UserName: Executing user
        :type UserName: str
        :param _UserGroup: Executing user group
        :type UserGroup: str
        :param _ParentProcName: Parent process name
        :type ParentProcName: str
        :param _ParentProcUser: Parent process user
        :type ParentProcUser: str
        :param _ParentProcGroup: Parent process user group
        :type ParentProcGroup: str
        :param _ParentProcPath: Parent process path
        :type ParentProcPath: str
        :param _Status: Processing status: 0 - pending; 2 - allowlisted; 3 - processed; 4 - ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Server name
        :type MachineName: str
        :param _ProcTree: Process tree
        :type ProcTree: str
        :param _DetectBy: Detection method: 0: behavior analysis; 1 command feature detection
        :type DetectBy: int
        :param _MachineExtraInfo:  Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Pid: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: int
        :param _RiskLevel: Threat level: 0 - medium-risk; 1 - high-risk
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: int
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._Hostip = None
        self._DstIp = None
        self._DstPort = None
        self._ProcessName = None
        self._FullPath = None
        self._CmdLine = None
        self._UserName = None
        self._UserGroup = None
        self._ParentProcName = None
        self._ParentProcUser = None
        self._ParentProcGroup = None
        self._ParentProcPath = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._ProcTree = None
        self._DetectBy = None
        self._MachineExtraInfo = None
        self._Pid = None
        self._RiskLevel = None

    @property
    def Id(self):
        """ID primary key
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Server ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Hostip(self):
        """Host private IP address
        :rtype: str
        """
        return self._Hostip

    @Hostip.setter
    def Hostip(self, Hostip):
        self._Hostip = Hostip

    @property
    def DstIp(self):
        """Target IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def FullPath(self):
        """Process path
        :rtype: str
        """
        return self._FullPath

    @FullPath.setter
    def FullPath(self, FullPath):
        self._FullPath = FullPath

    @property
    def CmdLine(self):
        """Command details
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def UserName(self):
        """Executing user
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UserGroup(self):
        """Executing user group
        :rtype: str
        """
        return self._UserGroup

    @UserGroup.setter
    def UserGroup(self, UserGroup):
        self._UserGroup = UserGroup

    @property
    def ParentProcName(self):
        """Parent process name
        :rtype: str
        """
        return self._ParentProcName

    @ParentProcName.setter
    def ParentProcName(self, ParentProcName):
        self._ParentProcName = ParentProcName

    @property
    def ParentProcUser(self):
        """Parent process user
        :rtype: str
        """
        return self._ParentProcUser

    @ParentProcUser.setter
    def ParentProcUser(self, ParentProcUser):
        self._ParentProcUser = ParentProcUser

    @property
    def ParentProcGroup(self):
        """Parent process user group
        :rtype: str
        """
        return self._ParentProcGroup

    @ParentProcGroup.setter
    def ParentProcGroup(self, ParentProcGroup):
        self._ParentProcGroup = ParentProcGroup

    @property
    def ParentProcPath(self):
        """Parent process path
        :rtype: str
        """
        return self._ParentProcPath

    @ParentProcPath.setter
    def ParentProcPath(self, ParentProcPath):
        self._ParentProcPath = ParentProcPath

    @property
    def Status(self):
        """Processing status: 0 - pending; 2 - allowlisted; 3 - processed; 4 - ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Server name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def ProcTree(self):
        """Process tree
        :rtype: str
        """
        return self._ProcTree

    @ProcTree.setter
    def ProcTree(self, ProcTree):
        self._ProcTree = ProcTree

    @property
    def DetectBy(self):
        """Detection method: 0: behavior analysis; 1 command feature detection
        :rtype: int
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy

    @property
    def MachineExtraInfo(self):
        """ Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Pid(self):
        """Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def RiskLevel(self):
        """Threat level: 0 - medium-risk; 1 - high-risk
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Hostip = params.get("Hostip")
        self._DstIp = params.get("DstIp")
        self._DstPort = params.get("DstPort")
        self._ProcessName = params.get("ProcessName")
        self._FullPath = params.get("FullPath")
        self._CmdLine = params.get("CmdLine")
        self._UserName = params.get("UserName")
        self._UserGroup = params.get("UserGroup")
        self._ParentProcName = params.get("ParentProcName")
        self._ParentProcUser = params.get("ParentProcUser")
        self._ParentProcGroup = params.get("ParentProcGroup")
        self._ParentProcPath = params.get("ParentProcPath")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._ProcTree = params.get("ProcTree")
        self._DetectBy = params.get("DetectBy")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Pid = params.get("Pid")
        self._RiskLevel = params.get("RiskLevel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReverseShellEventInfo(AbstractModel):
    """Reverse Shell data details

    """

    def __init__(self):
        r"""
        :param _Id: ID primary key
        :type Id: int
        :param _Uuid: Yunjing UUID
        :type Uuid: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _HostIp: Host private IP address
        :type HostIp: str
        :param _DstIp: Target IP
        :type DstIp: str
        :param _DstPort: Target port
        :type DstPort: int
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _FullPath: Process path
        :type FullPath: str
        :param _CmdLine: Command details
        :type CmdLine: str
        :param _UserName: User for execution
        :type UserName: str
        :param _UserGroup: User group for execution
        :type UserGroup: str
        :param _ParentProcName: Parent process name
        :type ParentProcName: str
        :param _ParentProcUser: Parent process user
        :type ParentProcUser: str
        :param _ParentProcGroup: Parent process user group
        :type ParentProcGroup: str
        :param _ParentProcPath: Parent process path
        :type ParentProcPath: str
        :param _Status: Processing status: 0: pending; 2: allowlisted; 3: processed; 4: ignored
        :type Status: int
        :param _CreateTime: Occurrence time
        :type CreateTime: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _DetectBy: Detection method
        :type DetectBy: int
        :param _PsTree: Process tree json; pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: execute commands; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :type PsTree: str
        :param _SuggestScheme: Recommended solution
        :type SuggestScheme: str
        :param _HarmDescribe: Description
        :type HarmDescribe: str
        :param _Tags: Tag
        :type Tags: list of str
        :param _References: Reference link
        :type References: list of str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _MachineStatus: Host online status: OFFLINE; ONLINE
        :type MachineStatus: str
        :param _ModifyTime: Processing time
        :type ModifyTime: str
        """
        self._Id = None
        self._Uuid = None
        self._Quuid = None
        self._HostIp = None
        self._DstIp = None
        self._DstPort = None
        self._ProcessName = None
        self._FullPath = None
        self._CmdLine = None
        self._UserName = None
        self._UserGroup = None
        self._ParentProcName = None
        self._ParentProcUser = None
        self._ParentProcGroup = None
        self._ParentProcPath = None
        self._Status = None
        self._CreateTime = None
        self._MachineName = None
        self._DetectBy = None
        self._PsTree = None
        self._SuggestScheme = None
        self._HarmDescribe = None
        self._Tags = None
        self._References = None
        self._MachineWanIp = None
        self._MachineStatus = None
        self._ModifyTime = None

    @property
    def Id(self):
        """ID primary key
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Yunjing UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def DstIp(self):
        """Target IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def FullPath(self):
        """Process path
        :rtype: str
        """
        return self._FullPath

    @FullPath.setter
    def FullPath(self, FullPath):
        self._FullPath = FullPath

    @property
    def CmdLine(self):
        """Command details
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def UserName(self):
        """User for execution
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def UserGroup(self):
        """User group for execution
        :rtype: str
        """
        return self._UserGroup

    @UserGroup.setter
    def UserGroup(self, UserGroup):
        self._UserGroup = UserGroup

    @property
    def ParentProcName(self):
        """Parent process name
        :rtype: str
        """
        return self._ParentProcName

    @ParentProcName.setter
    def ParentProcName(self, ParentProcName):
        self._ParentProcName = ParentProcName

    @property
    def ParentProcUser(self):
        """Parent process user
        :rtype: str
        """
        return self._ParentProcUser

    @ParentProcUser.setter
    def ParentProcUser(self, ParentProcUser):
        self._ParentProcUser = ParentProcUser

    @property
    def ParentProcGroup(self):
        """Parent process user group
        :rtype: str
        """
        return self._ParentProcGroup

    @ParentProcGroup.setter
    def ParentProcGroup(self, ParentProcGroup):
        self._ParentProcGroup = ParentProcGroup

    @property
    def ParentProcPath(self):
        """Parent process path
        :rtype: str
        """
        return self._ParentProcPath

    @ParentProcPath.setter
    def ParentProcPath(self, ParentProcPath):
        self._ParentProcPath = ParentProcPath

    @property
    def Status(self):
        """Processing status: 0: pending; 2: allowlisted; 3: processed; 4: ignored
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Occurrence time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def DetectBy(self):
        """Detection method
        :rtype: int
        """
        return self._DetectBy

    @DetectBy.setter
    def DetectBy(self, DetectBy):
        self._DetectBy = DetectBy

    @property
    def PsTree(self):
        """Process tree json; pid: process ID; exe: file path; account: groups and users to which the process belongs; cmdline: execute commands; ssh_service: ssh service IP, ssh_source: log-in source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PsTree

    @PsTree.setter
    def PsTree(self, PsTree):
        self._PsTree = PsTree

    @property
    def SuggestScheme(self):
        """Recommended solution
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def HarmDescribe(self):
        """Description
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def Tags(self):
        """Tag
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def References(self):
        """Reference link
        :rtype: list of str
        """
        return self._References

    @References.setter
    def References(self, References):
        self._References = References

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineStatus(self):
        """Host online status: OFFLINE; ONLINE
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def ModifyTime(self):
        """Processing time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._DstIp = params.get("DstIp")
        self._DstPort = params.get("DstPort")
        self._ProcessName = params.get("ProcessName")
        self._FullPath = params.get("FullPath")
        self._CmdLine = params.get("CmdLine")
        self._UserName = params.get("UserName")
        self._UserGroup = params.get("UserGroup")
        self._ParentProcName = params.get("ParentProcName")
        self._ParentProcUser = params.get("ParentProcUser")
        self._ParentProcGroup = params.get("ParentProcGroup")
        self._ParentProcPath = params.get("ParentProcPath")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MachineName = params.get("MachineName")
        self._DetectBy = params.get("DetectBy")
        self._PsTree = params.get("PsTree")
        self._SuggestScheme = params.get("SuggestScheme")
        self._HarmDescribe = params.get("HarmDescribe")
        self._Tags = params.get("Tags")
        self._References = params.get("References")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineStatus = params.get("MachineStatus")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReverseShellRule(AbstractModel):
    """Reverse Shell rule

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _DestIp: Target IP
        :type DestIp: str
        :param _DestPort: Target port
        :type DestPort: str
        :param _Operator: Operator
        :type Operator: str
        :param _IsGlobal: Whether a global rule
        :type IsGlobal: int
        :param _Status: Status (0: valid; 1: invalid)
        :type Status: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Modification time
        :type ModifyTime: str
        :param _Hostip: Host IP
        :type Hostip: str
        """
        self._Id = None
        self._Uuid = None
        self._ProcessName = None
        self._DestIp = None
        self._DestPort = None
        self._Operator = None
        self._IsGlobal = None
        self._Status = None
        self._CreateTime = None
        self._ModifyTime = None
        self._Hostip = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def DestIp(self):
        """Target IP
        :rtype: str
        """
        return self._DestIp

    @DestIp.setter
    def DestIp(self, DestIp):
        self._DestIp = DestIp

    @property
    def DestPort(self):
        """Target port
        :rtype: str
        """
        return self._DestPort

    @DestPort.setter
    def DestPort(self, DestPort):
        self._DestPort = DestPort

    @property
    def Operator(self):
        """Operator
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def IsGlobal(self):
        """Whether a global rule
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def Status(self):
        """Status (0: valid; 1: invalid)
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Modification time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def Hostip(self):
        """Host IP
        :rtype: str
        """
        return self._Hostip

    @Hostip.setter
    def Hostip(self, Hostip):
        self._Hostip = Hostip


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._ProcessName = params.get("ProcessName")
        self._DestIp = params.get("DestIp")
        self._DestPort = params.get("DestPort")
        self._Operator = params.get("Operator")
        self._IsGlobal = params.get("IsGlobal")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._Hostip = params.get("Hostip")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskDnsEvent(AbstractModel):
    """Malicious request event

    """

    def __init__(self):
        r"""
        :param _Id: Event ID
        :type Id: int
        :param _PolicyId: Policy ID
        :type PolicyId: int
        :param _PolicyType: Type of hit policy [-1: unknown|0: system|1: user]
        :type PolicyType: int
        :param _PolicyName: Name of hit policy
        :type PolicyName: str
        :param _ProtectLevel: Protection level [0: basic edition|1: professional edition|2: ultimate edition]
        :type ProtectLevel: int
        :param _HostId: Server ID
        :type HostId: str
        :param _HostName: Host name
        :type HostName: str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _WanIp: Public IP address
        :type WanIp: str
        :param _AgentId: Client ID
        :type AgentId: str
        :param _Domain: Access domain name
        :type Domain: str
        :param _Tags: Tag Features
        :type Tags: list of str
        :param _AccessCount: Access count
        :type AccessCount: int
        :param _ThreatDesc: Threat description
        :type ThreatDesc: str
        :param _SuggestSolution: Fixing solution
        :type SuggestSolution: str
        :param _ReferenceLink: Reference link
        :type ReferenceLink: str
        :param _HandleStatus: Processing status [0: pending|2: allowlisted|3: untrusted status|4: processed|5: ignored]
        :type HandleStatus: int
        :param _Pid: Process ID
        :type Pid: int
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessMd5: Process MD5
        :type ProcessMd5: str
        :param _CmdLine: Command line
        :type CmdLine: str
        :param _FirstTime: First access time
        :type FirstTime: str
        :param _LastTime: Last access Time
        :type LastTime: str
        :param _HostStatus: Host online status [OFFLINE: offline|ONLINE: online|UNKNOWN: unknown]
        :type HostStatus: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _OsType: [1:CentOS|2:Debian|3:Gentoo|4:Redhat|5:Ubuntu|6:Windows|7:TencentOS|8:CoreOS|9:FreeBSD|10:SUSE]
        :type OsType: int
        """
        self._Id = None
        self._PolicyId = None
        self._PolicyType = None
        self._PolicyName = None
        self._ProtectLevel = None
        self._HostId = None
        self._HostName = None
        self._HostIp = None
        self._WanIp = None
        self._AgentId = None
        self._Domain = None
        self._Tags = None
        self._AccessCount = None
        self._ThreatDesc = None
        self._SuggestSolution = None
        self._ReferenceLink = None
        self._HandleStatus = None
        self._Pid = None
        self._ProcessName = None
        self._ProcessMd5 = None
        self._CmdLine = None
        self._FirstTime = None
        self._LastTime = None
        self._HostStatus = None
        self._MachineExtraInfo = None
        self._OsType = None

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def PolicyId(self):
        """Policy ID
        :rtype: int
        """
        return self._PolicyId

    @PolicyId.setter
    def PolicyId(self, PolicyId):
        self._PolicyId = PolicyId

    @property
    def PolicyType(self):
        """Type of hit policy [-1: unknown|0: system|1: user]
        :rtype: int
        """
        return self._PolicyType

    @PolicyType.setter
    def PolicyType(self, PolicyType):
        self._PolicyType = PolicyType

    @property
    def PolicyName(self):
        """Name of hit policy
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def ProtectLevel(self):
        """Protection level [0: basic edition|1: professional edition|2: ultimate edition]
        :rtype: int
        """
        return self._ProtectLevel

    @ProtectLevel.setter
    def ProtectLevel(self, ProtectLevel):
        self._ProtectLevel = ProtectLevel

    @property
    def HostId(self):
        """Server ID
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def WanIp(self):
        """Public IP address
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def AgentId(self):
        """Client ID
        :rtype: str
        """
        return self._AgentId

    @AgentId.setter
    def AgentId(self, AgentId):
        self._AgentId = AgentId

    @property
    def Domain(self):
        """Access domain name
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def Tags(self):
        """Tag Features
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def AccessCount(self):
        """Access count
        :rtype: int
        """
        return self._AccessCount

    @AccessCount.setter
    def AccessCount(self, AccessCount):
        self._AccessCount = AccessCount

    @property
    def ThreatDesc(self):
        """Threat description
        :rtype: str
        """
        return self._ThreatDesc

    @ThreatDesc.setter
    def ThreatDesc(self, ThreatDesc):
        self._ThreatDesc = ThreatDesc

    @property
    def SuggestSolution(self):
        """Fixing solution
        :rtype: str
        """
        return self._SuggestSolution

    @SuggestSolution.setter
    def SuggestSolution(self, SuggestSolution):
        self._SuggestSolution = SuggestSolution

    @property
    def ReferenceLink(self):
        """Reference link
        :rtype: str
        """
        return self._ReferenceLink

    @ReferenceLink.setter
    def ReferenceLink(self, ReferenceLink):
        self._ReferenceLink = ReferenceLink

    @property
    def HandleStatus(self):
        """Processing status [0: pending|2: allowlisted|3: untrusted status|4: processed|5: ignored]
        :rtype: int
        """
        return self._HandleStatus

    @HandleStatus.setter
    def HandleStatus(self, HandleStatus):
        self._HandleStatus = HandleStatus

    @property
    def Pid(self):
        """Process ID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessMd5(self):
        """Process MD5
        :rtype: str
        """
        return self._ProcessMd5

    @ProcessMd5.setter
    def ProcessMd5(self, ProcessMd5):
        self._ProcessMd5 = ProcessMd5

    @property
    def CmdLine(self):
        """Command line
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def FirstTime(self):
        """First access time
        :rtype: str
        """
        return self._FirstTime

    @FirstTime.setter
    def FirstTime(self, FirstTime):
        self._FirstTime = FirstTime

    @property
    def LastTime(self):
        """Last access Time
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def HostStatus(self):
        """Host online status [OFFLINE: offline|ONLINE: online|UNKNOWN: unknown]
        :rtype: str
        """
        return self._HostStatus

    @HostStatus.setter
    def HostStatus(self, HostStatus):
        self._HostStatus = HostStatus

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def OsType(self):
        """[1:CentOS|2:Debian|3:Gentoo|4:Redhat|5:Ubuntu|6:Windows|7:TencentOS|8:CoreOS|9:FreeBSD|10:SUSE]
        :rtype: int
        """
        return self._OsType

    @OsType.setter
    def OsType(self, OsType):
        self._OsType = OsType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._PolicyId = params.get("PolicyId")
        self._PolicyType = params.get("PolicyType")
        self._PolicyName = params.get("PolicyName")
        self._ProtectLevel = params.get("ProtectLevel")
        self._HostId = params.get("HostId")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._WanIp = params.get("WanIp")
        self._AgentId = params.get("AgentId")
        self._Domain = params.get("Domain")
        self._Tags = params.get("Tags")
        self._AccessCount = params.get("AccessCount")
        self._ThreatDesc = params.get("ThreatDesc")
        self._SuggestSolution = params.get("SuggestSolution")
        self._ReferenceLink = params.get("ReferenceLink")
        self._HandleStatus = params.get("HandleStatus")
        self._Pid = params.get("Pid")
        self._ProcessName = params.get("ProcessName")
        self._ProcessMd5 = params.get("ProcessMd5")
        self._CmdLine = params.get("CmdLine")
        self._FirstTime = params.get("FirstTime")
        self._LastTime = params.get("LastTime")
        self._HostStatus = params.get("HostStatus")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._OsType = params.get("OsType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskDnsList(AbstractModel):
    """Malicious request list

    """

    def __init__(self):
        r"""
        :param _Url: External access domain name
        :type Url: str
        :param _AccessCount: Access count
        :type AccessCount: int
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessMd5: Process MD5
        :type ProcessMd5: str
        :param _GlobalRuleId: Whether the rule is global. 0: no; 1: yes.
        :type GlobalRuleId: int
        :param _UserRuleId: User rule ID
        :type UserRuleId: int
        :param _Status: Status. 0: pending; 2: added to allowlist; 3: untrusted; 4: processed; 5: ignored.
        :type Status: int
        :param _CreateTime: First access time
        :type CreateTime: str
        :param _MergeTime: Last access Time
        :type MergeTime: str
        :param _Quuid: Unique QUUID
        :type Quuid: str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _Alias: Alias
        :type Alias: str
        :param _Description: Description
        :type Description: str
        :param _Id: Unique ID
        :type Id: int
        :param _Reference: Reference
        :type Reference: str
        :param _CmdLine: Command line
        :type CmdLine: str
        :param _Pid: Process ID
        :type Pid: int
        :param _Uuid: UUID
        :type Uuid: str
        :param _SuggestScheme: Recommended solution
        :type SuggestScheme: str
        :param _Tags: Tag Features
        :type Tags: list of str
        :param _MachineWanIp: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineWanIp: str
        :param _MachineStatus: Host online status. OFFLINE: offline; ONLINE: online; UNKNOWN: unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineStatus: str
        """
        self._Url = None
        self._AccessCount = None
        self._ProcessName = None
        self._ProcessMd5 = None
        self._GlobalRuleId = None
        self._UserRuleId = None
        self._Status = None
        self._CreateTime = None
        self._MergeTime = None
        self._Quuid = None
        self._HostIp = None
        self._Alias = None
        self._Description = None
        self._Id = None
        self._Reference = None
        self._CmdLine = None
        self._Pid = None
        self._Uuid = None
        self._SuggestScheme = None
        self._Tags = None
        self._MachineWanIp = None
        self._MachineStatus = None

    @property
    def Url(self):
        """External access domain name
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def AccessCount(self):
        """Access count
        :rtype: int
        """
        return self._AccessCount

    @AccessCount.setter
    def AccessCount(self, AccessCount):
        self._AccessCount = AccessCount

    @property
    def ProcessName(self):
        """Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessMd5(self):
        """Process MD5
        :rtype: str
        """
        return self._ProcessMd5

    @ProcessMd5.setter
    def ProcessMd5(self, ProcessMd5):
        self._ProcessMd5 = ProcessMd5

    @property
    def GlobalRuleId(self):
        """Whether the rule is global. 0: no; 1: yes.
        :rtype: int
        """
        return self._GlobalRuleId

    @GlobalRuleId.setter
    def GlobalRuleId(self, GlobalRuleId):
        self._GlobalRuleId = GlobalRuleId

    @property
    def UserRuleId(self):
        """User rule ID
        :rtype: int
        """
        return self._UserRuleId

    @UserRuleId.setter
    def UserRuleId(self, UserRuleId):
        self._UserRuleId = UserRuleId

    @property
    def Status(self):
        """Status. 0: pending; 2: added to allowlist; 3: untrusted; 4: processed; 5: ignored.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """First access time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MergeTime(self):
        """Last access Time
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def Quuid(self):
        """Unique QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Alias(self):
        """Alias
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Reference(self):
        """Reference
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def CmdLine(self):
        """Command line
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def Pid(self):
        """Process ID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def Uuid(self):
        """UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def SuggestScheme(self):
        """Recommended solution
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def Tags(self):
        """Tag Features
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def MachineWanIp(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineStatus(self):
        """Host online status. OFFLINE: offline; ONLINE: online; UNKNOWN: unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._AccessCount = params.get("AccessCount")
        self._ProcessName = params.get("ProcessName")
        self._ProcessMd5 = params.get("ProcessMd5")
        self._GlobalRuleId = params.get("GlobalRuleId")
        self._UserRuleId = params.get("UserRuleId")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._MergeTime = params.get("MergeTime")
        self._Quuid = params.get("Quuid")
        self._HostIp = params.get("HostIp")
        self._Alias = params.get("Alias")
        self._Description = params.get("Description")
        self._Id = params.get("Id")
        self._Reference = params.get("Reference")
        self._CmdLine = params.get("CmdLine")
        self._Pid = params.get("Pid")
        self._Uuid = params.get("Uuid")
        self._SuggestScheme = params.get("SuggestScheme")
        self._Tags = params.get("Tags")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineStatus = params.get("MachineStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskDnsPolicy(AbstractModel):
    """Malicious request policy

    """

    def __init__(self):
        r"""
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _PolicyType: Policy type [0: system; 1: user]
        :type PolicyType: int
        :param _PolicyAction: Policy action [0: alarm; 1: allow; 2:intercept + alarm]
        :type PolicyAction: int
        :param _HostScope: Host range [1: all Professional + Ultimate Editions|2: all Ultimate Editions|0: partial hosts]
        :type HostScope: int
        :param _HostIds: Host ID
        :type HostIds: list of str
        :param _Domains: Domain name (when used as an input parameter, it needs base64 encode.)
        :type Domains: list of str
        :param _IsEnabled: Whether effective [0: effective,1: not effective]
        :type IsEnabled: int
        :param _PolicyId: Policy ID
        :type PolicyId: int
        :param _PolicyDesc: Policy description
        :type PolicyDesc: str
        :param _IsDealOldEvent: Whether to process previous events [0: no|1: yes]
        :type IsDealOldEvent: int
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _EventId: Event ID
        :type EventId: int
        """
        self._PolicyName = None
        self._PolicyType = None
        self._PolicyAction = None
        self._HostScope = None
        self._HostIds = None
        self._Domains = None
        self._IsEnabled = None
        self._PolicyId = None
        self._PolicyDesc = None
        self._IsDealOldEvent = None
        self._UpdateTime = None
        self._EventId = None

    @property
    def PolicyName(self):
        """Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def PolicyType(self):
        """Policy type [0: system; 1: user]
        :rtype: int
        """
        return self._PolicyType

    @PolicyType.setter
    def PolicyType(self, PolicyType):
        self._PolicyType = PolicyType

    @property
    def PolicyAction(self):
        """Policy action [0: alarm; 1: allow; 2:intercept + alarm]
        :rtype: int
        """
        return self._PolicyAction

    @PolicyAction.setter
    def PolicyAction(self, PolicyAction):
        self._PolicyAction = PolicyAction

    @property
    def HostScope(self):
        """Host range [1: all Professional + Ultimate Editions|2: all Ultimate Editions|0: partial hosts]
        :rtype: int
        """
        return self._HostScope

    @HostScope.setter
    def HostScope(self, HostScope):
        self._HostScope = HostScope

    @property
    def HostIds(self):
        """Host ID
        :rtype: list of str
        """
        return self._HostIds

    @HostIds.setter
    def HostIds(self, HostIds):
        self._HostIds = HostIds

    @property
    def Domains(self):
        """Domain name (when used as an input parameter, it needs base64 encode.)
        :rtype: list of str
        """
        return self._Domains

    @Domains.setter
    def Domains(self, Domains):
        self._Domains = Domains

    @property
    def IsEnabled(self):
        """Whether effective [0: effective,1: not effective]
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def PolicyId(self):
        """Policy ID
        :rtype: int
        """
        return self._PolicyId

    @PolicyId.setter
    def PolicyId(self, PolicyId):
        self._PolicyId = PolicyId

    @property
    def PolicyDesc(self):
        """Policy description
        :rtype: str
        """
        return self._PolicyDesc

    @PolicyDesc.setter
    def PolicyDesc(self, PolicyDesc):
        self._PolicyDesc = PolicyDesc

    @property
    def IsDealOldEvent(self):
        """Whether to process previous events [0: no|1: yes]
        :rtype: int
        """
        return self._IsDealOldEvent

    @IsDealOldEvent.setter
    def IsDealOldEvent(self, IsDealOldEvent):
        self._IsDealOldEvent = IsDealOldEvent

    @property
    def UpdateTime(self):
        """Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def EventId(self):
        """Event ID
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._PolicyName = params.get("PolicyName")
        self._PolicyType = params.get("PolicyType")
        self._PolicyAction = params.get("PolicyAction")
        self._HostScope = params.get("HostScope")
        self._HostIds = params.get("HostIds")
        self._Domains = params.get("Domains")
        self._IsEnabled = params.get("IsEnabled")
        self._PolicyId = params.get("PolicyId")
        self._PolicyDesc = params.get("PolicyDesc")
        self._IsDealOldEvent = params.get("IsDealOldEvent")
        self._UpdateTime = params.get("UpdateTime")
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskProcessEvent(AbstractModel):
    """Abnormal Process Event

    """

    def __init__(self):
        r"""
        :param _EventId: Event ID
        :type EventId: int
        :param _HostName: Host name
        :type HostName: str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _WanIp: Public IP address
        :type WanIp: str
        :param _ProcessId: Process ID
        :type ProcessId: int
        :param _FilePath: File path
        :type FilePath: str
        :param _CmdLine: Executed commands
        :type CmdLine: str
        :param _StartTime: Process startup time
        :type StartTime: str
        :param _DetectTime: Last detection time
        :type DetectTime: str
        :param _VirusName: Virus name
        :type VirusName: str
        :param _CheckPlatform: Trojan detection platform [1: Cloud search engine |2:TAV | 3: Binary Ai | 4: Abnormal behavior | 5: threat intelligence]
        :type CheckPlatform: list of str
        :param _VirusTags: Virus tag
        :type VirusTags: list of str
        :param _ThreatDesc: Threat description
        :type ThreatDesc: str
        :param _SuggestSolution: Recommended solution
        :type SuggestSolution: str
        :param _ReferenceLink: Reference link
        :type ReferenceLink: str
        :param _HandleStatus: Processing Status [0 Pending; 1 Processed; 2 Scanning; 3 Scanned; 4 Exited; 5 Ignore]
        :type HandleStatus: int
        :param _OnlineStatus: Host Online Status
        :type OnlineStatus: int
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._EventId = None
        self._HostName = None
        self._HostIp = None
        self._WanIp = None
        self._ProcessId = None
        self._FilePath = None
        self._CmdLine = None
        self._StartTime = None
        self._DetectTime = None
        self._VirusName = None
        self._CheckPlatform = None
        self._VirusTags = None
        self._ThreatDesc = None
        self._SuggestSolution = None
        self._ReferenceLink = None
        self._HandleStatus = None
        self._OnlineStatus = None
        self._MachineExtraInfo = None
        self._Uuid = None

    @property
    def EventId(self):
        """Event ID
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def WanIp(self):
        """Public IP address
        :rtype: str
        """
        return self._WanIp

    @WanIp.setter
    def WanIp(self, WanIp):
        self._WanIp = WanIp

    @property
    def ProcessId(self):
        """Process ID
        :rtype: int
        """
        return self._ProcessId

    @ProcessId.setter
    def ProcessId(self, ProcessId):
        self._ProcessId = ProcessId

    @property
    def FilePath(self):
        """File path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def CmdLine(self):
        """Executed commands
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def StartTime(self):
        """Process startup time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def DetectTime(self):
        """Last detection time
        :rtype: str
        """
        return self._DetectTime

    @DetectTime.setter
    def DetectTime(self, DetectTime):
        self._DetectTime = DetectTime

    @property
    def VirusName(self):
        """Virus name
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def CheckPlatform(self):
        """Trojan detection platform [1: Cloud search engine |2:TAV | 3: Binary Ai | 4: Abnormal behavior | 5: threat intelligence]
        :rtype: list of str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform

    @property
    def VirusTags(self):
        """Virus tag
        :rtype: list of str
        """
        return self._VirusTags

    @VirusTags.setter
    def VirusTags(self, VirusTags):
        self._VirusTags = VirusTags

    @property
    def ThreatDesc(self):
        """Threat description
        :rtype: str
        """
        return self._ThreatDesc

    @ThreatDesc.setter
    def ThreatDesc(self, ThreatDesc):
        self._ThreatDesc = ThreatDesc

    @property
    def SuggestSolution(self):
        """Recommended solution
        :rtype: str
        """
        return self._SuggestSolution

    @SuggestSolution.setter
    def SuggestSolution(self, SuggestSolution):
        self._SuggestSolution = SuggestSolution

    @property
    def ReferenceLink(self):
        """Reference link
        :rtype: str
        """
        return self._ReferenceLink

    @ReferenceLink.setter
    def ReferenceLink(self, ReferenceLink):
        self._ReferenceLink = ReferenceLink

    @property
    def HandleStatus(self):
        """Processing Status [0 Pending; 1 Processed; 2 Scanning; 3 Scanned; 4 Exited; 5 Ignore]
        :rtype: int
        """
        return self._HandleStatus

    @HandleStatus.setter
    def HandleStatus(self, HandleStatus):
        self._HandleStatus = HandleStatus

    @property
    def OnlineStatus(self):
        """Host Online Status
        :rtype: int
        """
        return self._OnlineStatus

    @OnlineStatus.setter
    def OnlineStatus(self, OnlineStatus):
        self._OnlineStatus = OnlineStatus

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._WanIp = params.get("WanIp")
        self._ProcessId = params.get("ProcessId")
        self._FilePath = params.get("FilePath")
        self._CmdLine = params.get("CmdLine")
        self._StartTime = params.get("StartTime")
        self._DetectTime = params.get("DetectTime")
        self._VirusName = params.get("VirusName")
        self._CheckPlatform = params.get("CheckPlatform")
        self._VirusTags = params.get("VirusTags")
        self._ThreatDesc = params.get("ThreatDesc")
        self._SuggestSolution = params.get("SuggestSolution")
        self._ReferenceLink = params.get("ReferenceLink")
        self._HandleStatus = params.get("HandleStatus")
        self._OnlineStatus = params.get("OnlineStatus")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleInfo(AbstractModel):
    """Index Rule

    """

    def __init__(self):
        r"""
        :param _FullText: Full-text index configurations
        :type FullText: :class:`tencentcloud.cwp.v20180228.models.FullTextInfo`
        :param _KeyValue: Key-value index configurations
        :type KeyValue: :class:`tencentcloud.cwp.v20180228.models.KeyValueInfo`
        :param _Tag: Meta field index configuration
        :type Tag: :class:`tencentcloud.cwp.v20180228.models.KeyValueInfo`
        """
        self._FullText = None
        self._KeyValue = None
        self._Tag = None

    @property
    def FullText(self):
        """Full-text index configurations
        :rtype: :class:`tencentcloud.cwp.v20180228.models.FullTextInfo`
        """
        return self._FullText

    @FullText.setter
    def FullText(self, FullText):
        self._FullText = FullText

    @property
    def KeyValue(self):
        """Key-value index configurations
        :rtype: :class:`tencentcloud.cwp.v20180228.models.KeyValueInfo`
        """
        return self._KeyValue

    @KeyValue.setter
    def KeyValue(self, KeyValue):
        self._KeyValue = KeyValue

    @property
    def Tag(self):
        """Meta field index configuration
        :rtype: :class:`tencentcloud.cwp.v20180228.models.KeyValueInfo`
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag


    def _deserialize(self, params):
        if params.get("FullText") is not None:
            self._FullText = FullTextInfo()
            self._FullText._deserialize(params.get("FullText"))
        if params.get("KeyValue") is not None:
            self._KeyValue = KeyValueInfo()
            self._KeyValue._deserialize(params.get("KeyValue"))
        if params.get("Tag") is not None:
            self._Tag = KeyValueInfo()
            self._Tag._deserialize(params.get("Tag"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanBaselineRequest(AbstractModel):
    """ScanBaseline request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyIdList: Policy ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :type StrategyIdList: list of int non-negative
        :param _CategoryIdList: Baseline ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :type CategoryIdList: list of int non-negative
        :param _RuleIdList: Detection item ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :type RuleIdList: list of int non-negative
        :param _QuuidList: Not required when StrategyIdList is selected, but required in other cases.
        :type QuuidList: list of str
        :param _UuidList: Host UUID array
        :type UuidList: list of str
        """
        self._StrategyIdList = None
        self._CategoryIdList = None
        self._RuleIdList = None
        self._QuuidList = None
        self._UuidList = None

    @property
    def StrategyIdList(self):
        """Policy ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :rtype: list of int non-negative
        """
        return self._StrategyIdList

    @StrategyIdList.setter
    def StrategyIdList(self, StrategyIdList):
        self._StrategyIdList = StrategyIdList

    @property
    def CategoryIdList(self):
        """Baseline ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :rtype: list of int non-negative
        """
        return self._CategoryIdList

    @CategoryIdList.setter
    def CategoryIdList(self, CategoryIdList):
        self._CategoryIdList = CategoryIdList

    @property
    def RuleIdList(self):
        """Detection item ID array (Either StrategyIdList, CategoryIdList, or RuleIdList must be selected.)
        :rtype: list of int non-negative
        """
        return self._RuleIdList

    @RuleIdList.setter
    def RuleIdList(self, RuleIdList):
        self._RuleIdList = RuleIdList

    @property
    def QuuidList(self):
        """Not required when StrategyIdList is selected, but required in other cases.
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def UuidList(self):
        """Host UUID array
        :rtype: list of str
        """
        return self._UuidList

    @UuidList.setter
    def UuidList(self, UuidList):
        self._UuidList = UuidList


    def _deserialize(self, params):
        self._StrategyIdList = params.get("StrategyIdList")
        self._CategoryIdList = params.get("CategoryIdList")
        self._RuleIdList = params.get("RuleIdList")
        self._QuuidList = params.get("QuuidList")
        self._UuidList = params.get("UuidList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanBaselineResponse(AbstractModel):
    """ScanBaseline response structure.

    """

    def __init__(self):
        r"""
        :param _ScanningQuuids: QUUID of the host being scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanningQuuids: list of str
        :param _TaskId: TaskId returned upon successful task distribution
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ScanningQuuids = None
        self._TaskId = None
        self._RequestId = None

    @property
    def ScanningQuuids(self):
        """QUUID of the host being scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ScanningQuuids

    @ScanningQuuids.setter
    def ScanningQuuids(self, ScanningQuuids):
        self._ScanningQuuids = ScanningQuuids

    @property
    def TaskId(self):
        """TaskId returned upon successful task distribution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ScanningQuuids = params.get("ScanningQuuids")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanTaskAgainRequest(AbstractModel):
    """ScanTaskAgain request structure.

    """

    def __init__(self):
        r"""
        :param _ModuleType: Module type. Currently supported values: Malware: Trojan; Vul: vulnerability; Baseline: baseline.
        :type ModuleType: str
        :param _TaskId: Task ID
        :type TaskId: int
        :param _QuuidList: String array of host QUUIDs. This parameter is effective for selected servers.
        :type QuuidList: list of str
        :param _TimeoutPeriod: Scan timeout
        :type TimeoutPeriod: int
        """
        self._ModuleType = None
        self._TaskId = None
        self._QuuidList = None
        self._TimeoutPeriod = None

    @property
    def ModuleType(self):
        """Module type. Currently supported values: Malware: Trojan; Vul: vulnerability; Baseline: baseline.
        :rtype: str
        """
        return self._ModuleType

    @ModuleType.setter
    def ModuleType(self, ModuleType):
        self._ModuleType = ModuleType

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def QuuidList(self):
        """String array of host QUUIDs. This parameter is effective for selected servers.
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def TimeoutPeriod(self):
        """Scan timeout
        :rtype: int
        """
        return self._TimeoutPeriod

    @TimeoutPeriod.setter
    def TimeoutPeriod(self, TimeoutPeriod):
        self._TimeoutPeriod = TimeoutPeriod


    def _deserialize(self, params):
        self._ModuleType = params.get("ModuleType")
        self._TaskId = params.get("TaskId")
        self._QuuidList = params.get("QuuidList")
        self._TimeoutPeriod = params.get("TimeoutPeriod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanTaskAgainResponse(AbstractModel):
    """ScanTaskAgain response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ScanTaskDetails(AbstractModel):
    """List of scan task details

    """

    def __init__(self):
        r"""
        :param _HostIp: Server IP
        :type HostIp: str
        :param _HostName: Server name
        :type HostName: str
        :param _OsName: Operating system
        :type OsName: str
        :param _RiskNum: Number of risks
        :type RiskNum: int
        :param _ScanBeginTime: Scan start time
        :type ScanBeginTime: str
        :param _ScanEndTime: Scan end time
        :type ScanEndTime: str
        :param _Uuid: UUID
        :type Uuid: str
        :param _Quuid: QUUID
        :type Quuid: str
        :param _Status: Status code
        :type Status: str
        :param _Description: Description
        :type Description: str
        :param _Id: Unique ID
        :type Id: int
        :param _FailType: Failure details
        :type FailType: int
        :param _MachineWanIp: Public IP address
        :type MachineWanIp: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._HostIp = None
        self._HostName = None
        self._OsName = None
        self._RiskNum = None
        self._ScanBeginTime = None
        self._ScanEndTime = None
        self._Uuid = None
        self._Quuid = None
        self._Status = None
        self._Description = None
        self._Id = None
        self._FailType = None
        self._MachineWanIp = None
        self._MachineExtraInfo = None

    @property
    def HostIp(self):
        """Server IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def HostName(self):
        """Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def OsName(self):
        """Operating system
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def RiskNum(self):
        """Number of risks
        :rtype: int
        """
        return self._RiskNum

    @RiskNum.setter
    def RiskNum(self, RiskNum):
        self._RiskNum = RiskNum

    @property
    def ScanBeginTime(self):
        """Scan start time
        :rtype: str
        """
        return self._ScanBeginTime

    @ScanBeginTime.setter
    def ScanBeginTime(self, ScanBeginTime):
        self._ScanBeginTime = ScanBeginTime

    @property
    def ScanEndTime(self):
        """Scan end time
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def Uuid(self):
        """UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def Quuid(self):
        """QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Status(self):
        """Status code
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Description(self):
        """Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Id(self):
        """Unique ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def FailType(self):
        """Failure details
        :rtype: int
        """
        return self._FailType

    @FailType.setter
    def FailType(self, FailType):
        self._FailType = FailType

    @property
    def MachineWanIp(self):
        """Public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._HostIp = params.get("HostIp")
        self._HostName = params.get("HostName")
        self._OsName = params.get("OsName")
        self._RiskNum = params.get("RiskNum")
        self._ScanBeginTime = params.get("ScanBeginTime")
        self._ScanEndTime = params.get("ScanEndTime")
        self._Uuid = params.get("Uuid")
        self._Quuid = params.get("Quuid")
        self._Status = params.get("Status")
        self._Description = params.get("Description")
        self._Id = params.get("Id")
        self._FailType = params.get("FailType")
        self._MachineWanIp = params.get("MachineWanIp")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanVulAgainRequest(AbstractModel):
    """ScanVulAgain request structure.

    """

    def __init__(self):
        r"""
        :param _EventIds: Vulnerability event ID string (Multiple entries are separated by English commas.)
        :type EventIds: str
        :param _Uuids: Recheck machine UUID (Multiple entries are separated by commas.)
        :type Uuids: str
        """
        self._EventIds = None
        self._Uuids = None

    @property
    def EventIds(self):
        """Vulnerability event ID string (Multiple entries are separated by English commas.)
        :rtype: str
        """
        return self._EventIds

    @EventIds.setter
    def EventIds(self, EventIds):
        self._EventIds = EventIds

    @property
    def Uuids(self):
        """Recheck machine UUID (Multiple entries are separated by commas.)
        :rtype: str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids


    def _deserialize(self, params):
        self._EventIds = params.get("EventIds")
        self._Uuids = params.get("Uuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanVulAgainResponse(AbstractModel):
    """ScanVulAgain response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ScanVulRequest(AbstractModel):
    """ScanVul request structure.

    """

    def __init__(self):
        r"""
        :param _VulLevels: Whether to count only critical vulnerabilities. 1: only critical vulnerabilities; 0: all vulnerabilities.
        :type VulLevels: str
        :param _HostType: Server type. 1: Pro Edition server; 2: selected server.
        :type HostType: int
        :param _VulCategories: Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability (separate multiple values by commas).
        :type VulCategories: str
        :param _QuuidList: String array of host QUUIDs. This parameter is effective for selected servers.
        :type QuuidList: list of str
        :param _VulEmergency: Whether it is an emergency vulnerability. 0: no; 1: yes.
        :type VulEmergency: int
        :param _TimeoutPeriod: Scan duration, in seconds. Default duration: 3,600 second.
        :type TimeoutPeriod: int
        :param _VulIds: IDs of vulnerabilities to be scanned
        :type VulIds: list of int non-negative
        :param _ScanMethod: 
        :type ScanMethod: int
        """
        self._VulLevels = None
        self._HostType = None
        self._VulCategories = None
        self._QuuidList = None
        self._VulEmergency = None
        self._TimeoutPeriod = None
        self._VulIds = None
        self._ScanMethod = None

    @property
    def VulLevels(self):
        """Whether to count only critical vulnerabilities. 1: only critical vulnerabilities; 0: all vulnerabilities.
        :rtype: str
        """
        return self._VulLevels

    @VulLevels.setter
    def VulLevels(self, VulLevels):
        self._VulLevels = VulLevels

    @property
    def HostType(self):
        """Server type. 1: Pro Edition server; 2: selected server.
        :rtype: int
        """
        return self._HostType

    @HostType.setter
    def HostType(self, HostType):
        self._HostType = HostType

    @property
    def VulCategories(self):
        """Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability (separate multiple values by commas).
        :rtype: str
        """
        return self._VulCategories

    @VulCategories.setter
    def VulCategories(self, VulCategories):
        self._VulCategories = VulCategories

    @property
    def QuuidList(self):
        """String array of host QUUIDs. This parameter is effective for selected servers.
        :rtype: list of str
        """
        return self._QuuidList

    @QuuidList.setter
    def QuuidList(self, QuuidList):
        self._QuuidList = QuuidList

    @property
    def VulEmergency(self):
        """Whether it is an emergency vulnerability. 0: no; 1: yes.
        :rtype: int
        """
        return self._VulEmergency

    @VulEmergency.setter
    def VulEmergency(self, VulEmergency):
        self._VulEmergency = VulEmergency

    @property
    def TimeoutPeriod(self):
        """Scan duration, in seconds. Default duration: 3,600 second.
        :rtype: int
        """
        return self._TimeoutPeriod

    @TimeoutPeriod.setter
    def TimeoutPeriod(self, TimeoutPeriod):
        self._TimeoutPeriod = TimeoutPeriod

    @property
    def VulIds(self):
        """IDs of vulnerabilities to be scanned
        :rtype: list of int non-negative
        """
        return self._VulIds

    @VulIds.setter
    def VulIds(self, VulIds):
        self._VulIds = VulIds

    @property
    def ScanMethod(self):
        """
        :rtype: int
        """
        return self._ScanMethod

    @ScanMethod.setter
    def ScanMethod(self, ScanMethod):
        self._ScanMethod = ScanMethod


    def _deserialize(self, params):
        self._VulLevels = params.get("VulLevels")
        self._HostType = params.get("HostType")
        self._VulCategories = params.get("VulCategories")
        self._QuuidList = params.get("QuuidList")
        self._VulEmergency = params.get("VulEmergency")
        self._TimeoutPeriod = params.get("TimeoutPeriod")
        self._VulIds = params.get("VulIds")
        self._ScanMethod = params.get("ScanMethod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanVulResponse(AbstractModel):
    """ScanVul response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanVulSettingRequest(AbstractModel):
    """ScanVulSetting request structure.

    """

    def __init__(self):
        r"""
        :param _TimerInterval: Regular detection interval (days)
        :type TimerInterval: int
        :param _VulCategories: Vulnerability type. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability. Pass in the values in array format. Example: [1,2]
        :type VulCategories: list of int non-negative
        :param _VulLevels: Severity level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical. Pass in the values in array format. Example: [1,2,3]
        :type VulLevels: list of int non-negative
        :param _TimerTime: Periodic detection time. Example: 02:10:50
        :type TimerTime: str
        :param _VulEmergency: Whether the vulnerability is an emergency vulnerability. 0: no; 1: yes.
        :type VulEmergency: int
        :param _StartTime: Scan start time. Example: 00:00
        :type StartTime: str
        :param _EndTime: Scan end time. Example: 08:00
        :type EndTime: str
        :param _EnableScan: Whether to enable scanning. 1: enable; 0: disable.
        :type EnableScan: int
        :param _Uuids: If empty, scan hosts with all Professional, Premium, and General Discount editions by default; if not empty, only scan the selected hosts.
        :type Uuids: list of str
        :param _ScanMethod: 
        :type ScanMethod: int
        """
        self._TimerInterval = None
        self._VulCategories = None
        self._VulLevels = None
        self._TimerTime = None
        self._VulEmergency = None
        self._StartTime = None
        self._EndTime = None
        self._EnableScan = None
        self._Uuids = None
        self._ScanMethod = None

    @property
    def TimerInterval(self):
        """Regular detection interval (days)
        :rtype: int
        """
        return self._TimerInterval

    @TimerInterval.setter
    def TimerInterval(self, TimerInterval):
        self._TimerInterval = TimerInterval

    @property
    def VulCategories(self):
        """Vulnerability type. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability. Pass in the values in array format. Example: [1,2]
        :rtype: list of int non-negative
        """
        return self._VulCategories

    @VulCategories.setter
    def VulCategories(self, VulCategories):
        self._VulCategories = VulCategories

    @property
    def VulLevels(self):
        """Severity level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical. Pass in the values in array format. Example: [1,2,3]
        :rtype: list of int non-negative
        """
        return self._VulLevels

    @VulLevels.setter
    def VulLevels(self, VulLevels):
        self._VulLevels = VulLevels

    @property
    def TimerTime(self):
        """Periodic detection time. Example: 02:10:50
        :rtype: str
        """
        return self._TimerTime

    @TimerTime.setter
    def TimerTime(self, TimerTime):
        self._TimerTime = TimerTime

    @property
    def VulEmergency(self):
        """Whether the vulnerability is an emergency vulnerability. 0: no; 1: yes.
        :rtype: int
        """
        return self._VulEmergency

    @VulEmergency.setter
    def VulEmergency(self, VulEmergency):
        self._VulEmergency = VulEmergency

    @property
    def StartTime(self):
        """Scan start time. Example: 00:00
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Scan end time. Example: 08:00
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def EnableScan(self):
        """Whether to enable scanning. 1: enable; 0: disable.
        :rtype: int
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def Uuids(self):
        """If empty, scan hosts with all Professional, Premium, and General Discount editions by default; if not empty, only scan the selected hosts.
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def ScanMethod(self):
        """
        :rtype: int
        """
        return self._ScanMethod

    @ScanMethod.setter
    def ScanMethod(self, ScanMethod):
        self._ScanMethod = ScanMethod


    def _deserialize(self, params):
        self._TimerInterval = params.get("TimerInterval")
        self._VulCategories = params.get("VulCategories")
        self._VulLevels = params.get("VulLevels")
        self._TimerTime = params.get("TimerTime")
        self._VulEmergency = params.get("VulEmergency")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._EnableScan = params.get("EnableScan")
        self._Uuids = params.get("Uuids")
        self._ScanMethod = params.get("ScanMethod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanVulSettingResponse(AbstractModel):
    """ScanVulSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ScreenAttackHotspot(AbstractModel):
    """Attack hot spots across the entire network on the large screen

    """

    def __init__(self):
        r"""
        :param _EventName: Event name
        :type EventName: str
        :param _SrcIp: Attacker IP address
        :type SrcIp: str
        :param _DstIp: Victim IP address
        :type DstIp: str
        :param _Region: Region
        :type Region: str
        :param _CreatedTime: Time
        :type CreatedTime: str
        """
        self._EventName = None
        self._SrcIp = None
        self._DstIp = None
        self._Region = None
        self._CreatedTime = None

    @property
    def EventName(self):
        """Event name
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def SrcIp(self):
        """Attacker IP address
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def DstIp(self):
        """Victim IP address
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def CreatedTime(self):
        """Time
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime


    def _deserialize(self, params):
        self._EventName = params.get("EventName")
        self._SrcIp = params.get("SrcIp")
        self._DstIp = params.get("DstIp")
        self._Region = params.get("Region")
        self._CreatedTime = params.get("CreatedTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenBaselineInfo(AbstractModel):
    """Large screen baseline information

    """

    def __init__(self):
        r"""
        :param _Name: Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Level: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _CategoryId: Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryId: int
        :param _LastScanTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastScanTime: str
        :param _BaselineFailCount: Baseline check items with risks
Note: This field may return null, indicating that no valid values can be obtained.
        :type BaselineFailCount: int
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        """
        self._Name = None
        self._Level = None
        self._CategoryId = None
        self._LastScanTime = None
        self._BaselineFailCount = None
        self._Uuid = None

    @property
    def Name(self):
        """Baseline name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Level(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CategoryId(self):
        """Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CategoryId

    @CategoryId.setter
    def CategoryId(self, CategoryId):
        self._CategoryId = CategoryId

    @property
    def LastScanTime(self):
        """Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastScanTime

    @LastScanTime.setter
    def LastScanTime(self, LastScanTime):
        self._LastScanTime = LastScanTime

    @property
    def BaselineFailCount(self):
        """Baseline check items with risks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._BaselineFailCount

    @BaselineFailCount.setter
    def BaselineFailCount(self, BaselineFailCount):
        self._BaselineFailCount = BaselineFailCount

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Level = params.get("Level")
        self._CategoryId = params.get("CategoryId")
        self._LastScanTime = params.get("LastScanTime")
        self._BaselineFailCount = params.get("BaselineFailCount")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenBroadcasts(AbstractModel):
    """Visualized security report on the large screen

    """

    def __init__(self):
        r"""
        :param _Title: Security report article title
        :type Title: str
        :param _Level: Severity level of security report article: 0: none; 1: critical; 2: high-risk; 3: medium-risk; 4: low-risk
        :type Level: int
        :param _Time: Release time
        :type Time: str
        :param _Id: Article ID
        :type Id: int
        """
        self._Title = None
        self._Level = None
        self._Time = None
        self._Id = None

    @property
    def Title(self):
        """Security report article title
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def Level(self):
        """Severity level of security report article: 0: none; 1: critical; 2: high-risk; 3: medium-risk; 4: low-risk
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Time(self):
        """Release time
        :rtype: str
        """
        return self._Time

    @Time.setter
    def Time(self, Time):
        self._Time = Time

    @property
    def Id(self):
        """Article ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Title = params.get("Title")
        self._Level = params.get("Level")
        self._Time = params.get("Time")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenDefendAttackLog(AbstractModel):
    """Network attack logs on the large screen

    """

    def __init__(self):
        r"""
        :param _Id: Log ID
        :type Id: int
        :param _Uuid: Client ID
        :type Uuid: str
        :param _SrcIp: Source IP
        :type SrcIp: str
        :param _SrcPort: Source port
        :type SrcPort: int
        :param _HttpMethod: Attack method
        :type HttpMethod: str
        :param _VulType: Threat type
        :type VulType: str
        :param _CreatedTime: Attack time
        :type CreatedTime: str
        :param _DstPort: Target port
        :type DstPort: int
        :param _Quuid: Host quuid
        :type Quuid: str
        :param _DstIp: Target IP
        :type DstIp: str
        """
        self._Id = None
        self._Uuid = None
        self._SrcIp = None
        self._SrcPort = None
        self._HttpMethod = None
        self._VulType = None
        self._CreatedTime = None
        self._DstPort = None
        self._Quuid = None
        self._DstIp = None

    @property
    def Id(self):
        """Log ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Client ID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def SrcIp(self):
        """Source IP
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def SrcPort(self):
        """Source port
        :rtype: int
        """
        return self._SrcPort

    @SrcPort.setter
    def SrcPort(self, SrcPort):
        self._SrcPort = SrcPort

    @property
    def HttpMethod(self):
        """Attack method
        :rtype: str
        """
        return self._HttpMethod

    @HttpMethod.setter
    def HttpMethod(self, HttpMethod):
        self._HttpMethod = HttpMethod

    @property
    def VulType(self):
        """Threat type
        :rtype: str
        """
        return self._VulType

    @VulType.setter
    def VulType(self, VulType):
        self._VulType = VulType

    @property
    def CreatedTime(self):
        """Attack time
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime

    @property
    def DstPort(self):
        """Target port
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def Quuid(self):
        """Host quuid
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def DstIp(self):
        """Target IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._SrcIp = params.get("SrcIp")
        self._SrcPort = params.get("SrcPort")
        self._HttpMethod = params.get("HttpMethod")
        self._VulType = params.get("VulType")
        self._CreatedTime = params.get("CreatedTime")
        self._DstPort = params.get("DstPort")
        self._Quuid = params.get("Quuid")
        self._DstIp = params.get("DstIp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenEmergentMsg(AbstractModel):
    """Visualized emergency notification on the large screen

    """

    def __init__(self):
        r"""
        :param _Title: Notification tag/title
        :type Title: str
        :param _Text: Notification content
        :type Text: str
        :param _Type: Redirection type: 0=vulnerability management
        :type Type: int
        """
        self._Title = None
        self._Text = None
        self._Type = None

    @property
    def Title(self):
        """Notification tag/title
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def Text(self):
        """Notification content
        :rtype: str
        """
        return self._Text

    @Text.setter
    def Text(self, Text):
        self._Text = Text

    @property
    def Type(self):
        """Redirection type: 0=vulnerability management
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Title = params.get("Title")
        self._Text = params.get("Text")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenEventsCnt(AbstractModel):
    """Intrusion detection statistics

    """

    def __init__(self):
        r"""
        :param _Title: Displayed content: Total number of pending risks and total number of affected assets
        :type Title: str
        :param _Total: Total number of events
        :type Total: int
        :param _Category: name: Specific type of the displayed content, including attack event, potential risk, compromised asset, and potentially risky asset
Value: event count after statistics
        :type Category: list of ScreenNameValue
        """
        self._Title = None
        self._Total = None
        self._Category = None

    @property
    def Title(self):
        """Displayed content: Total number of pending risks and total number of affected assets
        :rtype: str
        """
        return self._Title

    @Title.setter
    def Title(self, Title):
        self._Title = Title

    @property
    def Total(self):
        """Total number of events
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Category(self):
        """name: Specific type of the displayed content, including attack event, potential risk, compromised asset, and potentially risky asset
Value: event count after statistics
        :rtype: list of ScreenNameValue
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category


    def _deserialize(self, params):
        self._Title = params.get("Title")
        self._Total = params.get("Total")
        if params.get("Category") is not None:
            self._Category = []
            for item in params.get("Category"):
                obj = ScreenNameValue()
                obj._deserialize(item)
                self._Category.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenInvasion(AbstractModel):
    """Details of large screen intrusion event

    """

    def __init__(self):
        r"""
        :param _CreatedTime: Intrusion time
        :type CreatedTime: str
        :param _EventType: Event type. 0: virus scanning; 1: abnormal log-in; 2: password cracking; 3: malicious request; 4: high-risk command; 5: local privilege escalation; 6: reverse shell.
        :type EventType: int
        :param _Content: JSON file of the event data, which varies by event.
[Virus scanning] Virus name: VirusName, file name: FileName, file path: FilePath, file size: FileSize, file MD5: MD5, first detection time: CreateTime, last detection time: LatestScanTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Abnormal log-in] Source IP: SrcIp, location: Location, log-in username: UserName, log-in time: LoginTime
[Password cracking]Source IP: SrcIp, location: City and Country, protocol: Protocol, log-in username: UserName, port: Port, attempt count: Count, first attack time: CreateTime, last attack time: ModifyTime
[Malicious request] Malicious request domain name: Url, process: ProcessName, MD5: ProcessMd5, PID: Pid, request count: AccessCount, last request time: MergeTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[High-risk command] Hit rule name: RuleName, rule category: RuleCategory, command content: BashCmd, data source: DetectBy, Log-in user: User, PID: Pid, occurrence time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Local privilege escalation] Privilege escalation user: UserName, parent process: ParentProcName, user of parent process: ParentProcGroup, Detection time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Reverse shell] Connected process: ProcessName, executed command: CmdLine, parent process: ParentProcName, target host: DstIp, target port: DstPort, detection time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
        :type Content: str
        :param _Level: Unified event risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.
        :type Level: int
        :param _LevelZh: Level in Chinese
        :type LevelZh: str
        :param _Id: Event ID
        :type Id: int
        :param _Uuid: Host UUID
        :type Uuid: str
        """
        self._CreatedTime = None
        self._EventType = None
        self._Content = None
        self._Level = None
        self._LevelZh = None
        self._Id = None
        self._Uuid = None

    @property
    def CreatedTime(self):
        """Intrusion time
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime

    @property
    def EventType(self):
        """Event type. 0: virus scanning; 1: abnormal log-in; 2: password cracking; 3: malicious request; 4: high-risk command; 5: local privilege escalation; 6: reverse shell.
        :rtype: int
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def Content(self):
        """JSON file of the event data, which varies by event.
[Virus scanning] Virus name: VirusName, file name: FileName, file path: FilePath, file size: FileSize, file MD5: MD5, first detection time: CreateTime, last detection time: LatestScanTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Abnormal log-in] Source IP: SrcIp, location: Location, log-in username: UserName, log-in time: LoginTime
[Password cracking]Source IP: SrcIp, location: City and Country, protocol: Protocol, log-in username: UserName, port: Port, attempt count: Count, first attack time: CreateTime, last attack time: ModifyTime
[Malicious request] Malicious request domain name: Url, process: ProcessName, MD5: ProcessMd5, PID: Pid, request count: AccessCount, last request time: MergeTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[High-risk command] Hit rule name: RuleName, rule category: RuleCategory, command content: BashCmd, data source: DetectBy, Log-in user: User, PID: Pid, occurrence time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Local privilege escalation] Privilege escalation user: UserName, parent process: ParentProcName, user of parent process: ParentProcGroup, Detection time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
[Reverse shell] Connected process: ProcessName, executed command: CmdLine, parent process: ParentProcName, target host: DstIp, target port: DstPort, detection time: CreateTime, severity description: HarmDescribe, fixing suggestion: SuggestScheme
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Level(self):
        """Unified event risk level. 0: prompt; 1: low; 2: medium; 3: high; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def LevelZh(self):
        """Level in Chinese
        :rtype: str
        """
        return self._LevelZh

    @LevelZh.setter
    def LevelZh(self, LevelZh):
        self._LevelZh = LevelZh

    @property
    def Id(self):
        """Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._CreatedTime = params.get("CreatedTime")
        self._EventType = params.get("EventType")
        self._Content = params.get("Content")
        self._Level = params.get("Level")
        self._LevelZh = params.get("LevelZh")
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenMachine(AbstractModel):
    """Data of listed hosts on the large screen

    """

    def __init__(self):
        r"""
        :param _MachineName: Host name.
        :type MachineName: str
        :param _MachineOs: Host System.
        :type MachineOs: str
        :param _Uuid: Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :type Uuid: str
        :param _MachineStatus: Status of a host on the large screen. 0: agent not installed; 1: offline; 2: offline - risky; 3: offline - critical;
4: device installed - normal; 5: device installed - normal and of either Pro Edition or Ultimate Edition; 6: device installed - risky (network attack events > 0);
7: device installed - risky (network attack events > 0) and of either Pro Edition or Ultimate Edition; 8: device installed - critical (intrusion detection events > 0);
9: device installed - critical (intrusion detection events > 0) and of either Pro Edition or Ultimate Edition
        :type MachineStatus: int
        :param _Quuid: CVM or BM Machine Unique UUID.
        :type Quuid: str
        :param _VulNum: Number of vulnerabilities
        :type VulNum: int
        :param _MachineIp: Host IP.
        :type MachineIp: str
        :param _MachineWanIp: Public IP address of the host
        :type MachineWanIp: str
        :param _BaselineNum: Number of baseline risks
        :type BaselineNum: int
        :param _CyberAttackNum: Number of network risks
        :type CyberAttackNum: int
        :param _SecurityStatus: Risk status
<li>SAFE: Safe</li>
<li>RISK: Risk</li>
<li>UNKNOWN: Unknown</li>
        :type SecurityStatus: str
        :param _InvasionNum: Number of intrusion events
        :type InvasionNum: int
        :param _MachineType: Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :type MachineType: str
        :param _CpuLoad: CPU load status
        :type CpuLoad: str
        :param _CpuSize: Number of CPU cores
        :type CpuSize: float
        :param _DiskLoad: Hard disk utilization (%)
        :type DiskLoad: str
        :param _DiskSize: Hard disk capacity (GB)
        :type DiskSize: float
        :param _MemLoad: Memory utilization (%)
        :type MemLoad: str
        :param _MemSize: Memory capacity (GB)
        :type MemSize: float
        :param _CoreVersion: Kernel version
        :type CoreVersion: str
        :param _MachineExtraInfo: Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._MachineName = None
        self._MachineOs = None
        self._Uuid = None
        self._MachineStatus = None
        self._Quuid = None
        self._VulNum = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._BaselineNum = None
        self._CyberAttackNum = None
        self._SecurityStatus = None
        self._InvasionNum = None
        self._MachineType = None
        self._CpuLoad = None
        self._CpuSize = None
        self._DiskLoad = None
        self._DiskSize = None
        self._MemLoad = None
        self._MemSize = None
        self._CoreVersion = None
        self._MachineExtraInfo = None

    @property
    def MachineName(self):
        """Host name.
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineOs(self):
        """Host System.
        :rtype: str
        """
        return self._MachineOs

    @MachineOs.setter
    def MachineOs(self, MachineOs):
        self._MachineOs = MachineOs

    @property
    def Uuid(self):
        """Yunjing client UUID. If the client is offline for a long time, an empty string is returned.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineStatus(self):
        """Status of a host on the large screen. 0: agent not installed; 1: offline; 2: offline - risky; 3: offline - critical;
4: device installed - normal; 5: device installed - normal and of either Pro Edition or Ultimate Edition; 6: device installed - risky (network attack events > 0);
7: device installed - risky (network attack events > 0) and of either Pro Edition or Ultimate Edition; 8: device installed - critical (intrusion detection events > 0);
9: device installed - critical (intrusion detection events > 0) and of either Pro Edition or Ultimate Edition
        :rtype: int
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def Quuid(self):
        """CVM or BM Machine Unique UUID.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def VulNum(self):
        """Number of vulnerabilities
        :rtype: int
        """
        return self._VulNum

    @VulNum.setter
    def VulNum(self, VulNum):
        self._VulNum = VulNum

    @property
    def MachineIp(self):
        """Host IP.
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Public IP address of the host
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def BaselineNum(self):
        """Number of baseline risks
        :rtype: int
        """
        return self._BaselineNum

    @BaselineNum.setter
    def BaselineNum(self, BaselineNum):
        self._BaselineNum = BaselineNum

    @property
    def CyberAttackNum(self):
        """Number of network risks
        :rtype: int
        """
        return self._CyberAttackNum

    @CyberAttackNum.setter
    def CyberAttackNum(self, CyberAttackNum):
        self._CyberAttackNum = CyberAttackNum

    @property
    def SecurityStatus(self):
        """Risk status
<li>SAFE: Safe</li>
<li>RISK: Risk</li>
<li>UNKNOWN: Unknown</li>
        :rtype: str
        """
        return self._SecurityStatus

    @SecurityStatus.setter
    def SecurityStatus(self, SecurityStatus):
        self._SecurityStatus = SecurityStatus

    @property
    def InvasionNum(self):
        """Number of intrusion events
        :rtype: int
        """
        return self._InvasionNum

    @InvasionNum.setter
    def InvasionNum(self, InvasionNum):
        self._InvasionNum = InvasionNum

    @property
    def MachineType(self):
        """Machine Zone Type. CVM - Cloud Virtual Machine; BM: Bare Metal; ECM: Edge Computing Machine; LH: Lightweight Application Server; Other: Hybrid Cloud Zone
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def CpuLoad(self):
        """CPU load status
        :rtype: str
        """
        return self._CpuLoad

    @CpuLoad.setter
    def CpuLoad(self, CpuLoad):
        self._CpuLoad = CpuLoad

    @property
    def CpuSize(self):
        """Number of CPU cores
        :rtype: float
        """
        return self._CpuSize

    @CpuSize.setter
    def CpuSize(self, CpuSize):
        self._CpuSize = CpuSize

    @property
    def DiskLoad(self):
        """Hard disk utilization (%)
        :rtype: str
        """
        return self._DiskLoad

    @DiskLoad.setter
    def DiskLoad(self, DiskLoad):
        self._DiskLoad = DiskLoad

    @property
    def DiskSize(self):
        """Hard disk capacity (GB)
        :rtype: float
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def MemLoad(self):
        """Memory utilization (%)
        :rtype: str
        """
        return self._MemLoad

    @MemLoad.setter
    def MemLoad(self, MemLoad):
        self._MemLoad = MemLoad

    @property
    def MemSize(self):
        """Memory capacity (GB)
        :rtype: float
        """
        return self._MemSize

    @MemSize.setter
    def MemSize(self, MemSize):
        self._MemSize = MemSize

    @property
    def CoreVersion(self):
        """Kernel version
        :rtype: str
        """
        return self._CoreVersion

    @CoreVersion.setter
    def CoreVersion(self, CoreVersion):
        self._CoreVersion = CoreVersion

    @property
    def MachineExtraInfo(self):
        """Additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._MachineName = params.get("MachineName")
        self._MachineOs = params.get("MachineOs")
        self._Uuid = params.get("Uuid")
        self._MachineStatus = params.get("MachineStatus")
        self._Quuid = params.get("Quuid")
        self._VulNum = params.get("VulNum")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._BaselineNum = params.get("BaselineNum")
        self._CyberAttackNum = params.get("CyberAttackNum")
        self._SecurityStatus = params.get("SecurityStatus")
        self._InvasionNum = params.get("InvasionNum")
        self._MachineType = params.get("MachineType")
        self._CpuLoad = params.get("CpuLoad")
        self._CpuSize = params.get("CpuSize")
        self._DiskLoad = params.get("DiskLoad")
        self._DiskSize = params.get("DiskSize")
        self._MemLoad = params.get("MemLoad")
        self._MemSize = params.get("MemSize")
        self._CoreVersion = params.get("CoreVersion")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenNameValue(AbstractModel):
    """[Cloud security alarm] Visualized data Name Value Data on the large screen

    """

    def __init__(self):
        r"""
        :param _Name: Statistics type: Different APIs correspond to different content
        :type Name: str
        :param _Value: Statistics quantity
        :type Value: int
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """Statistics type: Different APIs correspond to different content
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """Statistics quantity
        :rtype: int
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenProtection(AbstractModel):
    """Visualized attack and defense status on large screen

    """

    def __init__(self):
        r"""
        :param _Name: Type value: virus scanning, brute force cracking, vulnerability scan, baseline check
        :type Name: str
        :param _Status: Virus scanning: 0: never scanned or asset not paid; 1: scanned and malicious files found; 2: scanned but isolation protection disabled; 3: scanned, protection enabled, and no risk found.
Brute force cracking: 0: protection disabled (asset not paid); 1: automatic blocking enabled.
Vulnerability scan: 0: never scanned or asset not paid; 1: vulnerability found; 2: no risk found.
Baseline check: 0: never checked or asset not paid; 1: baseline risks found; 2: no risk found.
        :type Status: int
        """
        self._Name = None
        self._Status = None

    @property
    def Name(self):
        """Type value: virus scanning, brute force cracking, vulnerability scan, baseline check
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Status(self):
        """Virus scanning: 0: never scanned or asset not paid; 1: scanned and malicious files found; 2: scanned but isolation protection disabled; 3: scanned, protection enabled, and no risk found.
Brute force cracking: 0: protection disabled (asset not paid); 1: automatic blocking enabled.
Vulnerability scan: 0: never scanned or asset not paid; 1: vulnerability found; 2: no risk found.
Baseline check: 0: never checked or asset not paid; 1: baseline risks found; 2: no risk found.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenProtectionCnt(AbstractModel):
    """CWPP security trend data

    """

    def __init__(self):
        r"""
        :param _Type: cloud: Cloud Security Engine; detect: detection engine; defend: attack defense; threat: threat intelligence; analysis: abnormal analysis; ai: AI engine
        :type Type: str
        :param _Name: cloud: Cloud Security Engine; detect: detection engine; defend: attack defense; threat: threat intelligence; analysis: abnormal analysis; ai: AI engine
        :type Name: str
        :param _Count: Total number
        :type Count: int
        """
        self._Type = None
        self._Name = None
        self._Count = None

    @property
    def Type(self):
        """cloud: Cloud Security Engine; detect: detection engine; defend: attack defense; threat: threat intelligence; analysis: abnormal analysis; ai: AI engine
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Name(self):
        """cloud: Cloud Security Engine; detect: detection engine; defend: attack defense; threat: threat intelligence; analysis: abnormal analysis; ai: AI engine
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Count(self):
        """Total number
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Name = params.get("Name")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenRegionInfo(AbstractModel):
    """Region information

    """

    def __init__(self):
        r"""
        :param _Region: Region identifiers, such as ap-guangzhou, ap-shanghai, and ap-beijing
        :type Region: str
        :param _RegionName: Chinese name of region, such as South China (Guangzhou), East China (Shanghai Finance), and North China (Beijing)
        :type RegionName: str
        :param _RegionId: Region ID
        :type RegionId: int
        :param _RegionCode: Region code, such as gz, sh, and bj
        :type RegionCode: str
        :param _RegionNameEn: English name of the region
        :type RegionNameEn: str
        """
        self._Region = None
        self._RegionName = None
        self._RegionId = None
        self._RegionCode = None
        self._RegionNameEn = None

    @property
    def Region(self):
        """Region identifiers, such as ap-guangzhou, ap-shanghai, and ap-beijing
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def RegionName(self):
        """Chinese name of region, such as South China (Guangzhou), East China (Shanghai Finance), and North China (Beijing)
        :rtype: str
        """
        return self._RegionName

    @RegionName.setter
    def RegionName(self, RegionName):
        self._RegionName = RegionName

    @property
    def RegionId(self):
        """Region ID
        :rtype: int
        """
        return self._RegionId

    @RegionId.setter
    def RegionId(self, RegionId):
        self._RegionId = RegionId

    @property
    def RegionCode(self):
        """Region code, such as gz, sh, and bj
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def RegionNameEn(self):
        """English name of the region
        :rtype: str
        """
        return self._RegionNameEn

    @RegionNameEn.setter
    def RegionNameEn(self, RegionNameEn):
        self._RegionNameEn = RegionNameEn


    def _deserialize(self, params):
        self._Region = params.get("Region")
        self._RegionName = params.get("RegionName")
        self._RegionId = params.get("RegionId")
        self._RegionCode = params.get("RegionCode")
        self._RegionNameEn = params.get("RegionNameEn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenRegionMachines(AbstractModel):
    """3D image of the host on the large screen

    """

    def __init__(self):
        r"""
        :param _Region: All regions
        :type Region: str
        :param _RegionName: Region description in Chinese
        :type RegionName: str
        :param _Machines: Host list
        :type Machines: list of ScreenMachine
        :param _TotalCount: Total number of hosts in this region
        :type TotalCount: int
        :param _RiskCnt: Number of risky hosts
        :type RiskCnt: int
        :param _AttackCnt: Number of potentially risky hosts
        :type AttackCnt: int
        :param _SafetyCnt: Number of risk-free hosts
        :type SafetyCnt: int
        :param _UnAgentOfflineCnt: Number of hosts in offline/uninstalled status
        :type UnAgentOfflineCnt: int
        :param _IgnoreCnt: Number of hosts that are omitted from displaying. When it is equal to 0, no hosts are omitted.
        :type IgnoreCnt: int
        """
        self._Region = None
        self._RegionName = None
        self._Machines = None
        self._TotalCount = None
        self._RiskCnt = None
        self._AttackCnt = None
        self._SafetyCnt = None
        self._UnAgentOfflineCnt = None
        self._IgnoreCnt = None

    @property
    def Region(self):
        """All regions
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def RegionName(self):
        """Region description in Chinese
        :rtype: str
        """
        return self._RegionName

    @RegionName.setter
    def RegionName(self, RegionName):
        self._RegionName = RegionName

    @property
    def Machines(self):
        """Host list
        :rtype: list of ScreenMachine
        """
        return self._Machines

    @Machines.setter
    def Machines(self, Machines):
        self._Machines = Machines

    @property
    def TotalCount(self):
        """Total number of hosts in this region
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RiskCnt(self):
        """Number of risky hosts
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def AttackCnt(self):
        """Number of potentially risky hosts
        :rtype: int
        """
        return self._AttackCnt

    @AttackCnt.setter
    def AttackCnt(self, AttackCnt):
        self._AttackCnt = AttackCnt

    @property
    def SafetyCnt(self):
        """Number of risk-free hosts
        :rtype: int
        """
        return self._SafetyCnt

    @SafetyCnt.setter
    def SafetyCnt(self, SafetyCnt):
        self._SafetyCnt = SafetyCnt

    @property
    def UnAgentOfflineCnt(self):
        """Number of hosts in offline/uninstalled status
        :rtype: int
        """
        return self._UnAgentOfflineCnt

    @UnAgentOfflineCnt.setter
    def UnAgentOfflineCnt(self, UnAgentOfflineCnt):
        self._UnAgentOfflineCnt = UnAgentOfflineCnt

    @property
    def IgnoreCnt(self):
        """Number of hosts that are omitted from displaying. When it is equal to 0, no hosts are omitted.
        :rtype: int
        """
        return self._IgnoreCnt

    @IgnoreCnt.setter
    def IgnoreCnt(self, IgnoreCnt):
        self._IgnoreCnt = IgnoreCnt


    def _deserialize(self, params):
        self._Region = params.get("Region")
        self._RegionName = params.get("RegionName")
        if params.get("Machines") is not None:
            self._Machines = []
            for item in params.get("Machines"):
                obj = ScreenMachine()
                obj._deserialize(item)
                self._Machines.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RiskCnt = params.get("RiskCnt")
        self._AttackCnt = params.get("AttackCnt")
        self._SafetyCnt = params.get("SafetyCnt")
        self._UnAgentOfflineCnt = params.get("UnAgentOfflineCnt")
        self._IgnoreCnt = params.get("IgnoreCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenTrendsChart(AbstractModel):
    """Attack and defense trend chart on the large screen

    """

    def __init__(self):
        r"""
        :param _X: Time on the X-axis
        :type X: str
        :param _Y: Numerical value on the Y-axis
        :type Y: int
        :param _Type: Statistical type: defense count, attack count
        :type Type: str
        """
        self._X = None
        self._Y = None
        self._Type = None

    @property
    def X(self):
        """Time on the X-axis
        :rtype: str
        """
        return self._X

    @X.setter
    def X(self, X):
        self._X = X

    @property
    def Y(self):
        """Numerical value on the Y-axis
        :rtype: int
        """
        return self._Y

    @Y.setter
    def Y(self, Y):
        self._Y = Y

    @property
    def Type(self):
        """Statistical type: defense count, attack count
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._X = params.get("X")
        self._Y = params.get("Y")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScreenVulInfo(AbstractModel):
    """Vulnerability list on big screen

    """

    def __init__(self):
        r"""
        :param _Id: Vulnerability Event ID
        :type Id: int
        :param _Name: Vulnerability name
        :type Name: str
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _LastTime: Last detection Time
        :type LastTime: str
        :param _Level: Vulnerability level 1: low-risk; 2: medium-risk; 3: high-risk; 4: prompt
        :type Level: int
        :param _Category: Vulnerability type: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type Category: int
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        """
        self._Id = None
        self._Name = None
        self._VulId = None
        self._LastTime = None
        self._Level = None
        self._Category = None
        self._Uuid = None

    @property
    def Id(self):
        """Vulnerability Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def LastTime(self):
        """Last detection Time
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def Level(self):
        """Vulnerability level 1: low-risk; 2: medium-risk; 3: high-risk; 4: prompt
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Category(self):
        """Vulnerability type: 1 - web-cms vulnerabilities; 2 - application vulnerabilities; 4 - Linux software vulnerabilities; 5 - Windows system vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._VulId = params.get("VulId")
        self._LastTime = params.get("LastTime")
        self._Level = params.get("Level")
        self._Category = params.get("Category")
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchLogRequest(AbstractModel):
    """SearchLog request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time for logs to be searched and analyzed, which is a Unix timestamp in milliseconds
        :type StartTime: int
        :param _EndTime: End time for logs to be searched and analyzed, which is a Unix timestamp in milliseconds
        :type EndTime: int
        :param _QueryString: Statement for search and analysis, with a maximum length of 12 KB
        :type QueryString: str
        :param _Count: Number of raw logs returned for a single query. Maximum value: 1000. The Context parameter can be used to obtain subsequent logs.
        :type Count: int
        :param _Sort: Order for returning the raw logs. Valid values: asc (ascending), desc (descending). Default value: desc.
        :type Sort: str
        :param _Context: Pass the Context value returned by the last API call to retrieve more subsequent logs. A total of up to 10,000 raw logs can be obtained, with a validity period of 1 hour.
        :type Context: str
        """
        self._StartTime = None
        self._EndTime = None
        self._QueryString = None
        self._Count = None
        self._Sort = None
        self._Context = None

    @property
    def StartTime(self):
        """Start time for logs to be searched and analyzed, which is a Unix timestamp in milliseconds
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time for logs to be searched and analyzed, which is a Unix timestamp in milliseconds
        :rtype: int
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def QueryString(self):
        """Statement for search and analysis, with a maximum length of 12 KB
        :rtype: str
        """
        return self._QueryString

    @QueryString.setter
    def QueryString(self, QueryString):
        self._QueryString = QueryString

    @property
    def Count(self):
        """Number of raw logs returned for a single query. Maximum value: 1000. The Context parameter can be used to obtain subsequent logs.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Sort(self):
        """Order for returning the raw logs. Valid values: asc (ascending), desc (descending). Default value: desc.
        :rtype: str
        """
        return self._Sort

    @Sort.setter
    def Sort(self, Sort):
        self._Sort = Sort

    @property
    def Context(self):
        """Pass the Context value returned by the last API call to retrieve more subsequent logs. A total of up to 10,000 raw logs can be obtained, with a validity period of 1 hour.
        :rtype: str
        """
        return self._Context

    @Context.setter
    def Context(self, Context):
        self._Context = Context


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._QueryString = params.get("QueryString")
        self._Count = params.get("Count")
        self._Sort = params.get("Sort")
        self._Context = params.get("Context")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchLogResponse(AbstractModel):
    """SearchLog response structure.

    """

    def __init__(self):
        r"""
        :param _Count: Number of raw logs matching the retrieval criteria
        :type Count: int
        :param _Context: Pass through the Context value returned by this API, which can access more logs later, with an expiration time of 1 hour.
        :type Context: str
        :param _ListOver: Whether all logs meeting the retrieval criteria have been returned. If not, use the Context parameter to retrieve more logs.
        :type ListOver: bool
        :param _Analysis: Whether the returned data is the SQL analysis result
        :type Analysis: bool
        :param _Data: Raw logs matching the retrieval criteria
        :type Data: list of LogInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Count = None
        self._Context = None
        self._ListOver = None
        self._Analysis = None
        self._Data = None
        self._RequestId = None

    @property
    def Count(self):
        """Number of raw logs matching the retrieval criteria
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Context(self):
        """Pass through the Context value returned by this API, which can access more logs later, with an expiration time of 1 hour.
        :rtype: str
        """
        return self._Context

    @Context.setter
    def Context(self, Context):
        self._Context = Context

    @property
    def ListOver(self):
        """Whether all logs meeting the retrieval criteria have been returned. If not, use the Context parameter to retrieve more logs.
        :rtype: bool
        """
        return self._ListOver

    @ListOver.setter
    def ListOver(self, ListOver):
        self._ListOver = ListOver

    @property
    def Analysis(self):
        """Whether the returned data is the SQL analysis result
        :rtype: bool
        """
        return self._Analysis

    @Analysis.setter
    def Analysis(self, Analysis):
        self._Analysis = Analysis

    @property
    def Data(self):
        """Raw logs matching the retrieval criteria
        :rtype: list of LogInfo
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._Context = params.get("Context")
        self._ListOver = params.get("ListOver")
        self._Analysis = params.get("Analysis")
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = LogInfo()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class SearchTemplate(AbstractModel):
    """Quick search template

    """

    def __init__(self):
        r"""
        :param _Name: Name for search
        :type Name: str
        :param _LogType: Index type for search
        :type LogType: str
        :param _Condition: Statement for search
        :type Condition: str
        :param _TimeRange: Time range
        :type TimeRange: str
        :param _Query: Converted search statement content
        :type Query: str
        :param _Flag: Search method. Input box: standard filtering. Search: simple.
        :type Flag: str
        :param _DisplayData: Displayed data
        :type DisplayData: str
        :param _Id: Rule ID
        :type Id: int
        """
        self._Name = None
        self._LogType = None
        self._Condition = None
        self._TimeRange = None
        self._Query = None
        self._Flag = None
        self._DisplayData = None
        self._Id = None

    @property
    def Name(self):
        """Name for search
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def LogType(self):
        """Index type for search
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def Condition(self):
        """Statement for search
        :rtype: str
        """
        return self._Condition

    @Condition.setter
    def Condition(self, Condition):
        self._Condition = Condition

    @property
    def TimeRange(self):
        """Time range
        :rtype: str
        """
        return self._TimeRange

    @TimeRange.setter
    def TimeRange(self, TimeRange):
        self._TimeRange = TimeRange

    @property
    def Query(self):
        """Converted search statement content
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query

    @property
    def Flag(self):
        """Search method. Input box: standard filtering. Search: simple.
        :rtype: str
        """
        return self._Flag

    @Flag.setter
    def Flag(self, Flag):
        self._Flag = Flag

    @property
    def DisplayData(self):
        """Displayed data
        :rtype: str
        """
        return self._DisplayData

    @DisplayData.setter
    def DisplayData(self, DisplayData):
        self._DisplayData = DisplayData

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._LogType = params.get("LogType")
        self._Condition = params.get("Condition")
        self._TimeRange = params.get("TimeRange")
        self._Query = params.get("Query")
        self._Flag = params.get("Flag")
        self._DisplayData = params.get("DisplayData")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecurityButlerInfo(AbstractModel):
    """List of security manager information

    """

    def __init__(self):
        r"""
        :param _Id: Data ID
        :type Id: int
        :param _OrderId: Order ID
        :type OrderId: int
        :param _Quuid: cvm id
        :type Quuid: str
        :param _Status: Service status. 0: in service; 1: expired; 2: terminated.
        :type Status: int
        :param _StartTime: Service start time
        :type StartTime: str
        :param _EndTime: Service end time
        :type EndTime: str
        :param _HostName: Host name
        :type HostName: str
        :param _HostIp: Host IP address
        :type HostIp: str
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _RiskCount: Number of host risks
        :type RiskCount: int
        """
        self._Id = None
        self._OrderId = None
        self._Quuid = None
        self._Status = None
        self._StartTime = None
        self._EndTime = None
        self._HostName = None
        self._HostIp = None
        self._Uuid = None
        self._RiskCount = None

    @property
    def Id(self):
        """Data ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def OrderId(self):
        """Order ID
        :rtype: int
        """
        return self._OrderId

    @OrderId.setter
    def OrderId(self, OrderId):
        self._OrderId = OrderId

    @property
    def Quuid(self):
        """cvm id
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Status(self):
        """Service status. 0: in service; 1: expired; 2: terminated.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StartTime(self):
        """Service start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """Service end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP address
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def RiskCount(self):
        """Number of host risks
        :rtype: int
        """
        return self._RiskCount

    @RiskCount.setter
    def RiskCount(self, RiskCount):
        self._RiskCount = RiskCount


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._OrderId = params.get("OrderId")
        self._Quuid = params.get("Quuid")
        self._Status = params.get("Status")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._Uuid = params.get("Uuid")
        self._RiskCount = params.get("RiskCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecurityDynamic(AbstractModel):
    """Security event message data

    """

    def __init__(self):
        r"""
        :param _Uuid: CWPP client UUID
        :type Uuid: str
        :param _EventTime: Security event occurrence time
        :type EventTime: str
        :param _EventType: Security event type
<li>MALWARE: Trojan event</li>
<li>NON_LOCAL_LOGIN: cross-region log-in</li>
<li>BRUTEATTACK_SUCCESS: successful password cracking</li>
<li>VUL: vulnerability</li>
<li>BASELINE: security baseline</li>
        :type EventType: str
        :param _Message: Security event message
        :type Message: str
        :param _SecurityLevel: Security event level
<li>RISK: critical</li>
<li>HIGH: high-risk</li>
<li>NORMAL: medium-risk</li>
<li>LOW: low-risk</li>
<li>UNKNOWNED: suspicious</li>
        :type SecurityLevel: str
        """
        self._Uuid = None
        self._EventTime = None
        self._EventType = None
        self._Message = None
        self._SecurityLevel = None

    @property
    def Uuid(self):
        """CWPP client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def EventTime(self):
        """Security event occurrence time
        :rtype: str
        """
        return self._EventTime

    @EventTime.setter
    def EventTime(self, EventTime):
        self._EventTime = EventTime

    @property
    def EventType(self):
        """Security event type
<li>MALWARE: Trojan event</li>
<li>NON_LOCAL_LOGIN: cross-region log-in</li>
<li>BRUTEATTACK_SUCCESS: successful password cracking</li>
<li>VUL: vulnerability</li>
<li>BASELINE: security baseline</li>
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def Message(self):
        """Security event message
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def SecurityLevel(self):
        """Security event level
<li>RISK: critical</li>
<li>HIGH: high-risk</li>
<li>NORMAL: medium-risk</li>
<li>LOW: low-risk</li>
<li>UNKNOWNED: suspicious</li>
        :rtype: str
        """
        return self._SecurityLevel

    @SecurityLevel.setter
    def SecurityLevel(self, SecurityLevel):
        self._SecurityLevel = SecurityLevel


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._EventTime = params.get("EventTime")
        self._EventType = params.get("EventType")
        self._Message = params.get("Message")
        self._SecurityLevel = params.get("SecurityLevel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecurityEventInfo(AbstractModel):
    """List of security event statistics

    """

    def __init__(self):
        r"""
        :param _EventCnt: Number of security events
        :type EventCnt: int
        :param _UuidCnt: Number of affected machines
        :type UuidCnt: int
        """
        self._EventCnt = None
        self._UuidCnt = None

    @property
    def EventCnt(self):
        """Number of security events
        :rtype: int
        """
        return self._EventCnt

    @EventCnt.setter
    def EventCnt(self, EventCnt):
        self._EventCnt = EventCnt

    @property
    def UuidCnt(self):
        """Number of affected machines
        :rtype: int
        """
        return self._UuidCnt

    @UuidCnt.setter
    def UuidCnt(self, UuidCnt):
        self._UuidCnt = UuidCnt


    def _deserialize(self, params):
        self._EventCnt = params.get("EventCnt")
        self._UuidCnt = params.get("UuidCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecurityTrend(AbstractModel):
    """Security trend statistics

    """

    def __init__(self):
        r"""
        :param _Date: Event time
        :type Date: str
        :param _EventNum: Number of events
        :type EventNum: int
        """
        self._Date = None
        self._EventNum = None

    @property
    def Date(self):
        """Event time
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date

    @property
    def EventNum(self):
        """Number of events
        :rtype: int
        """
        return self._EventNum

    @EventNum.setter
    def EventNum(self, EventNum):
        self._EventNum = EventNum


    def _deserialize(self, params):
        self._Date = params.get("Date")
        self._EventNum = params.get("EventNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SeparateMalwaresRequest(AbstractModel):
    """SeparateMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Trojan event ID array (The maximum number of IDs is 100.)
        :type Ids: list of int non-negative
        :param _KillProcess: Whether to kill the process
        :type KillProcess: bool
        """
        self._Ids = None
        self._KillProcess = None

    @property
    def Ids(self):
        """Trojan event ID array (The maximum number of IDs is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def KillProcess(self):
        """Whether to kill the process
        :rtype: bool
        """
        return self._KillProcess

    @KillProcess.setter
    def KillProcess(self, KillProcess):
        self._KillProcess = KillProcess


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._KillProcess = params.get("KillProcess")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SeparateMalwaresResponse(AbstractModel):
    """SeparateMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _SuccessIds: Successfully isolated arrays of IDs; if none, an empty array is returned.
        :type SuccessIds: list of int non-negative
        :param _FailedIds: Unsuccessfully isolated arrays of IDs; if none, an empty array is returned.
        :type FailedIds: list of int non-negative
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SuccessIds = None
        self._FailedIds = None
        self._RequestId = None

    @property
    def SuccessIds(self):
        """Successfully isolated arrays of IDs; if none, an empty array is returned.
        :rtype: list of int non-negative
        """
        return self._SuccessIds

    @SuccessIds.setter
    def SuccessIds(self, SuccessIds):
        self._SuccessIds = SuccessIds

    @property
    def FailedIds(self):
        """Unsuccessfully isolated arrays of IDs; if none, an empty array is returned.
        :rtype: list of int non-negative
        """
        return self._FailedIds

    @FailedIds.setter
    def FailedIds(self, FailedIds):
        self._FailedIds = FailedIds

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SuccessIds = params.get("SuccessIds")
        self._FailedIds = params.get("FailedIds")
        self._RequestId = params.get("RequestId")


class SetBashEventsStatusRequest(AbstractModel):
    """SetBashEventsStatus request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: ID array (The maximum number of IDs is 100)
        :type Ids: list of int non-negative
        :param _Status: New status (0 - pending; 1 - high-risk; 2 - normal)
        :type Status: int
        """
        self._Ids = None
        self._Status = None

    @property
    def Ids(self):
        """ID array (The maximum number of IDs is 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Status(self):
        """New status (0 - pending; 1 - high-risk; 2 - normal)
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetBashEventsStatusResponse(AbstractModel):
    """SetBashEventsStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SetLocalStorageExpireRequest(AbstractModel):
    """SetLocalStorageExpire request structure.

    """

    def __init__(self):
        r"""
        :param _Key: Key
        :type Key: str
        :param _Expire: Expiration time (unit: second)
        :type Expire: int
        """
        self._Key = None
        self._Expire = None

    @property
    def Key(self):
        """Key
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Expire(self):
        """Expiration time (unit: second)
        :rtype: int
        """
        return self._Expire

    @Expire.setter
    def Expire(self, Expire):
        self._Expire = Expire


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Expire = params.get("Expire")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetLocalStorageExpireResponse(AbstractModel):
    """SetLocalStorageExpire response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SetLocalStorageItemRequest(AbstractModel):
    """SetLocalStorageItem request structure.

    """

    def __init__(self):
        r"""
        :param _Key: Key
        :type Key: str
        :param _Value: Value
        :type Value: str
        :param _Expire: Expiration time (unit: second)
        :type Expire: int
        """
        self._Key = None
        self._Value = None
        self._Expire = None

    @property
    def Key(self):
        """Key
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """Value
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Expire(self):
        """Expiration time (unit: second)
        :rtype: int
        """
        return self._Expire

    @Expire.setter
    def Expire(self, Expire):
        self._Expire = Expire


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        self._Expire = params.get("Expire")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetLocalStorageItemResponse(AbstractModel):
    """SetLocalStorageItem response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StandardModeConfig(AbstractModel):
    """Blocking configuration in the standard mode

    """

    def __init__(self):
        r"""
        :param _Ttl: Blocking duration (unit: second)
        :type Ttl: int
        """
        self._Ttl = None

    @property
    def Ttl(self):
        """Blocking duration (unit: second)
        :rtype: int
        """
        return self._Ttl

    @Ttl.setter
    def Ttl(self, Ttl):
        self._Ttl = Ttl


    def _deserialize(self, params):
        self._Ttl = params.get("Ttl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartBaselineDetectRequest(AbstractModel):
    """StartBaselineDetect request structure.

    """

    def __init__(self):
        r"""
        :param _Param: Baseline detection parameter
        :type Param: :class:`tencentcloud.cwp.v20180228.models.BaselineDetectParam`
        """
        self._Param = None

    @property
    def Param(self):
        """Baseline detection parameter
        :rtype: :class:`tencentcloud.cwp.v20180228.models.BaselineDetectParam`
        """
        return self._Param

    @Param.setter
    def Param(self, Param):
        self._Param = Param


    def _deserialize(self, params):
        if params.get("Param") is not None:
            self._Param = BaselineDetectParam()
            self._Param._deserialize(params.get("Param"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartBaselineDetectResponse(AbstractModel):
    """StartBaselineDetect response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Scan task ID
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """Scan task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class StopAssetScanRequest(AbstractModel):
    """StopAssetScan request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAssetScanResponse(AbstractModel):
    """StopAssetScan response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopBaselineDetectRequest(AbstractModel):
    """StopBaselineDetect request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: Cancel task ID collection
        :type TaskIds: list of int
        """
        self._TaskIds = None

    @property
    def TaskIds(self):
        """Cancel task ID collection
        :rtype: list of int
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopBaselineDetectResponse(AbstractModel):
    """StopBaselineDetect response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopNoticeBanTipsRequest(AbstractModel):
    """StopNoticeBanTips request structure.

    """


class StopNoticeBanTipsResponse(AbstractModel):
    """StopNoticeBanTips response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class Strategy(AbstractModel):
    """Baseline security user policy information

    """

    def __init__(self):
        r"""
        :param _StrategyName: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyName: str
        :param _StrategyId: Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type StrategyId: int
        :param _RuleCount: Total number of baseline detection items
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleCount: int
        :param _HostCount: Number of Hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _ScanCycle: Scan cycle
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanCycle: int
        :param _ScanAt: Scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanAt: str
        :param _Enabled: Available or not?
Note: This field may return null, indicating that no valid values can be obtained.
        :type Enabled: int
        :param _PassRate: Pass rate
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassRate: int
        :param _CategoryIds: Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryIds: str
        :param _IsDefault: Whether a default policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsDefault: int
        """
        self._StrategyName = None
        self._StrategyId = None
        self._RuleCount = None
        self._HostCount = None
        self._ScanCycle = None
        self._ScanAt = None
        self._Enabled = None
        self._PassRate = None
        self._CategoryIds = None
        self._IsDefault = None

    @property
    def StrategyName(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def StrategyId(self):
        """Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def RuleCount(self):
        """Total number of baseline detection items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleCount

    @RuleCount.setter
    def RuleCount(self, RuleCount):
        self._RuleCount = RuleCount

    @property
    def HostCount(self):
        """Number of Hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ScanCycle(self):
        """Scan cycle
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanCycle

    @ScanCycle.setter
    def ScanCycle(self, ScanCycle):
        self._ScanCycle = ScanCycle

    @property
    def ScanAt(self):
        """Scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanAt

    @ScanAt.setter
    def ScanAt(self, ScanAt):
        self._ScanAt = ScanAt

    @property
    def Enabled(self):
        """Available or not?
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Enabled

    @Enabled.setter
    def Enabled(self, Enabled):
        self._Enabled = Enabled

    @property
    def PassRate(self):
        """Pass rate
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassRate

    @PassRate.setter
    def PassRate(self, PassRate):
        self._PassRate = PassRate

    @property
    def CategoryIds(self):
        """Baseline ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CategoryIds

    @CategoryIds.setter
    def CategoryIds(self, CategoryIds):
        self._CategoryIds = CategoryIds

    @property
    def IsDefault(self):
        """Whether a default policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsDefault

    @IsDefault.setter
    def IsDefault(self, IsDefault):
        self._IsDefault = IsDefault


    def _deserialize(self, params):
        self._StrategyName = params.get("StrategyName")
        self._StrategyId = params.get("StrategyId")
        self._RuleCount = params.get("RuleCount")
        self._HostCount = params.get("HostCount")
        self._ScanCycle = params.get("ScanCycle")
        self._ScanAt = params.get("ScanAt")
        self._Enabled = params.get("Enabled")
        self._PassRate = params.get("PassRate")
        self._CategoryIds = params.get("CategoryIds")
        self._IsDefault = params.get("IsDefault")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SwitchBashRulesRequest(AbstractModel):
    """SwitchBashRules request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Disabled: Whether to disable
        :type Disabled: int
        """
        self._Id = None
        self._Disabled = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Disabled(self):
        """Whether to disable
        :rtype: int
        """
        return self._Disabled

    @Disabled.setter
    def Disabled(self, Disabled):
        self._Disabled = Disabled


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Disabled = params.get("Disabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SwitchBashRulesResponse(AbstractModel):
    """SwitchBashRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SyncAssetScanRequest(AbstractModel):
    """SyncAssetScan request structure.

    """

    def __init__(self):
        r"""
        :param _Sync: Whether synchronized: true - yes; false - no; the default is false
        :type Sync: bool
        """
        self._Sync = None

    @property
    def Sync(self):
        """Whether synchronized: true - yes; false - no; the default is false
        :rtype: bool
        """
        return self._Sync

    @Sync.setter
    def Sync(self, Sync):
        self._Sync = Sync


    def _deserialize(self, params):
        self._Sync = params.get("Sync")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SyncAssetScanResponse(AbstractModel):
    """SyncAssetScan response structure.

    """

    def __init__(self):
        r"""
        :param _State: Enumeration values are (in uppercase): NOTASK (no synchronization task), SYNCING (synchronizing), and FINISHED (synchronization completed)
        :type State: str
        :param _LatestStartTime: Latest synchronization start time
        :type LatestStartTime: str
        :param _LatestEndTime: Last sync end time
        :type LatestEndTime: str
        :param _TaskId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._State = None
        self._LatestStartTime = None
        self._LatestEndTime = None
        self._TaskId = None
        self._RequestId = None

    @property
    def State(self):
        """Enumeration values are (in uppercase): NOTASK (no synchronization task), SYNCING (synchronizing), and FINISHED (synchronization completed)
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def LatestStartTime(self):
        """Latest synchronization start time
        :rtype: str
        """
        return self._LatestStartTime

    @LatestStartTime.setter
    def LatestStartTime(self, LatestStartTime):
        self._LatestStartTime = LatestStartTime

    @property
    def LatestEndTime(self):
        """Last sync end time
        :rtype: str
        """
        return self._LatestEndTime

    @LatestEndTime.setter
    def LatestEndTime(self, LatestEndTime):
        self._LatestEndTime = LatestEndTime

    @property
    def TaskId(self):
        """Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._State = params.get("State")
        self._LatestStartTime = params.get("LatestStartTime")
        self._LatestEndTime = params.get("LatestEndTime")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class SyncBaselineDetectSummaryRequest(AbstractModel):
    """SyncBaselineDetectSummary request structure.

    """

    def __init__(self):
        r"""
        :param _TaskIds: IDs for calculating the progress of ongoing check tasks. Generally, this parameter is not required.
        :type TaskIds: list of int non-negative
        """
        self._TaskIds = None

    @property
    def TaskIds(self):
        """IDs for calculating the progress of ongoing check tasks. Generally, this parameter is not required.
        :rtype: list of int non-negative
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SyncBaselineDetectSummaryResponse(AbstractModel):
    """SyncBaselineDetectSummary response structure.

    """

    def __init__(self):
        r"""
        :param _ProgressRate: Processing progress
        :type ProgressRate: int
        :param _NotPassPolicyCount: Total number of failed policies
        :type NotPassPolicyCount: int
        :param _HostCount: Total number of hosts
        :type HostCount: int
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _WillFirstScan: 1: first scan about to start; 0: already scanned.
        :type WillFirstScan: int
        :param _DetectingTaskIds: ID of ongoing detection task
        :type DetectingTaskIds: list of int
        :param _LeftMins: Remaining scanning time (minutes)
        :type LeftMins: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ProgressRate = None
        self._NotPassPolicyCount = None
        self._HostCount = None
        self._StartTime = None
        self._EndTime = None
        self._WillFirstScan = None
        self._DetectingTaskIds = None
        self._LeftMins = None
        self._RequestId = None

    @property
    def ProgressRate(self):
        """Processing progress
        :rtype: int
        """
        return self._ProgressRate

    @ProgressRate.setter
    def ProgressRate(self, ProgressRate):
        self._ProgressRate = ProgressRate

    @property
    def NotPassPolicyCount(self):
        """Total number of failed policies
        :rtype: int
        """
        return self._NotPassPolicyCount

    @NotPassPolicyCount.setter
    def NotPassPolicyCount(self, NotPassPolicyCount):
        self._NotPassPolicyCount = NotPassPolicyCount

    @property
    def HostCount(self):
        """Total number of hosts
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def WillFirstScan(self):
        """1: first scan about to start; 0: already scanned.
        :rtype: int
        """
        return self._WillFirstScan

    @WillFirstScan.setter
    def WillFirstScan(self, WillFirstScan):
        self._WillFirstScan = WillFirstScan

    @property
    def DetectingTaskIds(self):
        """ID of ongoing detection task
        :rtype: list of int
        """
        return self._DetectingTaskIds

    @DetectingTaskIds.setter
    def DetectingTaskIds(self, DetectingTaskIds):
        self._DetectingTaskIds = DetectingTaskIds

    @property
    def LeftMins(self):
        """Remaining scanning time (minutes)
        :rtype: int
        """
        return self._LeftMins

    @LeftMins.setter
    def LeftMins(self, LeftMins):
        self._LeftMins = LeftMins

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ProgressRate = params.get("ProgressRate")
        self._NotPassPolicyCount = params.get("NotPassPolicyCount")
        self._HostCount = params.get("HostCount")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._WillFirstScan = params.get("WillFirstScan")
        self._DetectingTaskIds = params.get("DetectingTaskIds")
        self._LeftMins = params.get("LeftMins")
        self._RequestId = params.get("RequestId")


class SyncMachinesRequest(AbstractModel):
    """SyncMachines request structure.

    """

    def __init__(self):
        r"""
        :param _Sync: Whether to synchronize
        :type Sync: bool
        """
        self._Sync = None

    @property
    def Sync(self):
        """Whether to synchronize
        :rtype: bool
        """
        return self._Sync

    @Sync.setter
    def Sync(self, Sync):
        self._Sync = Sync


    def _deserialize(self, params):
        self._Sync = params.get("Sync")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SyncMachinesResponse(AbstractModel):
    """SyncMachines response structure.

    """

    def __init__(self):
        r"""
        :param _State: Enumeration values are (in uppercase): NOTASK (no synchronization task), SYNCING (synchronizing), and FINISHED (synchronization completed)
        :type State: str
        :param _LatestStartTime: Latest synchronization start time
        :type LatestStartTime: str
        :param _LatestEndTime: Latest synchronization end time
        :type LatestEndTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._State = None
        self._LatestStartTime = None
        self._LatestEndTime = None
        self._RequestId = None

    @property
    def State(self):
        """Enumeration values are (in uppercase): NOTASK (no synchronization task), SYNCING (synchronizing), and FINISHED (synchronization completed)
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def LatestStartTime(self):
        """Latest synchronization start time
        :rtype: str
        """
        return self._LatestStartTime

    @LatestStartTime.setter
    def LatestStartTime(self, LatestStartTime):
        self._LatestStartTime = LatestStartTime

    @property
    def LatestEndTime(self):
        """Latest synchronization end time
        :rtype: str
        """
        return self._LatestEndTime

    @LatestEndTime.setter
    def LatestEndTime(self, LatestEndTime):
        self._LatestEndTime = LatestEndTime

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._State = params.get("State")
        self._LatestStartTime = params.get("LatestStartTime")
        self._LatestEndTime = params.get("LatestEndTime")
        self._RequestId = params.get("RequestId")


class Tag(AbstractModel):
    """Tag information

    """

    def __init__(self):
        r"""
        :param _Id: Tag ID
        :type Id: int
        :param _Name: Tag name
        :type Name: str
        :param _Count: Number of servers
        :type Count: int
        """
        self._Id = None
        self._Name = None
        self._Count = None

    @property
    def Id(self):
        """Tag ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Tag name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Count(self):
        """Number of servers
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TagMachine(AbstractModel):
    """Information on tag-related servers

    """

    def __init__(self):
        r"""
        :param _Id: ID
        :type Id: str
        :param _Quuid: Host ID
        :type Quuid: str
        :param _MachineName: Host name
        :type MachineName: str
        :param _MachineIp: Host private IP address
        :type MachineIp: str
        :param _MachineWanIp: Host public IP address
        :type MachineWanIp: str
        :param _MachineRegion: Host region
        :type MachineRegion: str
        :param _MachineType: Host region type
        :type MachineType: str
        """
        self._Id = None
        self._Quuid = None
        self._MachineName = None
        self._MachineIp = None
        self._MachineWanIp = None
        self._MachineRegion = None
        self._MachineType = None

    @property
    def Id(self):
        """ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Quuid(self):
        """Host ID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def MachineName(self):
        """Host name
        :rtype: str
        """
        return self._MachineName

    @MachineName.setter
    def MachineName(self, MachineName):
        self._MachineName = MachineName

    @property
    def MachineIp(self):
        """Host private IP address
        :rtype: str
        """
        return self._MachineIp

    @MachineIp.setter
    def MachineIp(self, MachineIp):
        self._MachineIp = MachineIp

    @property
    def MachineWanIp(self):
        """Host public IP address
        :rtype: str
        """
        return self._MachineWanIp

    @MachineWanIp.setter
    def MachineWanIp(self, MachineWanIp):
        self._MachineWanIp = MachineWanIp

    @property
    def MachineRegion(self):
        """Host region
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def MachineType(self):
        """Host region type
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Quuid = params.get("Quuid")
        self._MachineName = params.get("MachineName")
        self._MachineIp = params.get("MachineIp")
        self._MachineWanIp = params.get("MachineWanIp")
        self._MachineRegion = params.get("MachineRegion")
        self._MachineType = params.get("MachineType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Tags(AbstractModel):
    """Platform tag

    """

    def __init__(self):
        r"""
        :param _TagKey: Tag key
        :type TagKey: str
        :param _TagValue: Tag value
        :type TagValue: str
        """
        self._TagKey = None
        self._TagValue = None

    @property
    def TagKey(self):
        """Tag key
        :rtype: str
        """
        return self._TagKey

    @TagKey.setter
    def TagKey(self, TagKey):
        self._TagKey = TagKey

    @property
    def TagValue(self):
        """Tag value
        :rtype: str
        """
        return self._TagValue

    @TagValue.setter
    def TagValue(self, TagValue):
        self._TagValue = TagValue


    def _deserialize(self, params):
        self._TagKey = params.get("TagKey")
        self._TagValue = params.get("TagValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskStatus(AbstractModel):
    """Scan status list

    """

    def __init__(self):
        r"""
        :param _Scanning: Scanning (including initializing)
        :type Scanning: str
        :param _Ok: Scan terminated (including terminating)
        :type Ok: str
        :param _Fail: Scan failed
        :type Fail: str
        :param _Stop: Scan failed, with specific reason displayed: scan timeout, low client version, or client offline
Note: This field may return null, indicating that no valid values can be obtained.
        :type Stop: str
        """
        self._Scanning = None
        self._Ok = None
        self._Fail = None
        self._Stop = None

    @property
    def Scanning(self):
        """Scanning (including initializing)
        :rtype: str
        """
        return self._Scanning

    @Scanning.setter
    def Scanning(self, Scanning):
        self._Scanning = Scanning

    @property
    def Ok(self):
        """Scan terminated (including terminating)
        :rtype: str
        """
        return self._Ok

    @Ok.setter
    def Ok(self, Ok):
        self._Ok = Ok

    @property
    def Fail(self):
        """Scan failed
        :rtype: str
        """
        return self._Fail

    @Fail.setter
    def Fail(self, Fail):
        self._Fail = Fail

    @property
    def Stop(self):
        """Scan failed, with specific reason displayed: scan timeout, low client version, or client offline
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Stop

    @Stop.setter
    def Stop(self, Stop):
        self._Stop = Stop


    def _deserialize(self, params):
        self._Scanning = params.get("Scanning")
        self._Ok = params.get("Ok")
        self._Fail = params.get("Fail")
        self._Stop = params.get("Stop")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TestWebHookRuleRequest(AbstractModel):
    """TestWebHookRule request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Rule ID
        :type Id: int
        :param _Data: Test content
        :type Data: str
        """
        self._Id = None
        self._Data = None

    @property
    def Id(self):
        """Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Data(self):
        """Test content
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Data = params.get("Data")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TestWebHookRuleResponse(AbstractModel):
    """TestWebHookRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class TopInfo(AbstractModel):
    """Statistics data of top network attacks

    """

    def __init__(self):
        r"""
        :param _Value: Top statistical data, such as IP, and vulnerability name
        :type Value: str
        :param _Count: Top statistical count
        :type Count: int
        """
        self._Value = None
        self._Count = None

    @property
    def Value(self):
        """Top statistical data, such as IP, and vulnerability name
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Count(self):
        """Top statistical count
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Value = params.get("Value")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrustMalwaresRequest(AbstractModel):
    """TrustMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Trojan ID array (The maximum number of IDs at one time is 100)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Trojan ID array (The maximum number of IDs at one time is 100)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrustMalwaresResponse(AbstractModel):
    """TrustMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UntrustMalwaresRequest(AbstractModel):
    """UntrustMalwares request structure.

    """

    def __init__(self):
        r"""
        :param _Ids: Trojan ID array (The maximum number of IDs is 100.)
        :type Ids: list of int non-negative
        """
        self._Ids = None

    @property
    def Ids(self):
        """Trojan ID array (The maximum number of IDs is 100.)
        :rtype: list of int non-negative
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UntrustMalwaresResponse(AbstractModel):
    """UntrustMalwares response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateBaselineStrategyRequest(AbstractModel):
    """UpdateBaselineStrategy request structure.

    """

    def __init__(self):
        r"""
        :param _StrategyId: Policy ID
        :type StrategyId: int
        :param _StrategyName: Policy name
        :type StrategyName: str
        :param _ScanCycle: Detection period
        :type ScanCycle: int
        :param _ScanAt: Time when routine detection scans are triggered.
        :type ScanAt: str
        :param _CategoryIds: Array of baseline IDs selected under this policy
        :type CategoryIds: list of str
        :param _IsGlobal: Whether all servers are scanned: 1: yes; 0 :no. If the value is 1, all Professional Edition hosts are scanned.
        :type IsGlobal: int
        :param _MachineType: CVM type:
cvm: Tencent Cloud Virtual Machine
bm: bare metal
ecm: edge computing host
lh: Tencent Cloud Lighthouse
other: hybrid cloud machine
        :type MachineType: str
        :param _RegionCode: Host region ap-guangzhou
        :type RegionCode: str
        :param _Quuids: Host ID array
        :type Quuids: list of str
        """
        self._StrategyId = None
        self._StrategyName = None
        self._ScanCycle = None
        self._ScanAt = None
        self._CategoryIds = None
        self._IsGlobal = None
        self._MachineType = None
        self._RegionCode = None
        self._Quuids = None

    @property
    def StrategyId(self):
        """Policy ID
        :rtype: int
        """
        return self._StrategyId

    @StrategyId.setter
    def StrategyId(self, StrategyId):
        self._StrategyId = StrategyId

    @property
    def StrategyName(self):
        """Policy name
        :rtype: str
        """
        return self._StrategyName

    @StrategyName.setter
    def StrategyName(self, StrategyName):
        self._StrategyName = StrategyName

    @property
    def ScanCycle(self):
        """Detection period
        :rtype: int
        """
        return self._ScanCycle

    @ScanCycle.setter
    def ScanCycle(self, ScanCycle):
        self._ScanCycle = ScanCycle

    @property
    def ScanAt(self):
        """Time when routine detection scans are triggered.
        :rtype: str
        """
        return self._ScanAt

    @ScanAt.setter
    def ScanAt(self, ScanAt):
        self._ScanAt = ScanAt

    @property
    def CategoryIds(self):
        """Array of baseline IDs selected under this policy
        :rtype: list of str
        """
        return self._CategoryIds

    @CategoryIds.setter
    def CategoryIds(self, CategoryIds):
        self._CategoryIds = CategoryIds

    @property
    def IsGlobal(self):
        """Whether all servers are scanned: 1: yes; 0 :no. If the value is 1, all Professional Edition hosts are scanned.
        :rtype: int
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def MachineType(self):
        """CVM type:
cvm: Tencent Cloud Virtual Machine
bm: bare metal
ecm: edge computing host
lh: Tencent Cloud Lighthouse
other: hybrid cloud machine
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def RegionCode(self):
        """Host region ap-guangzhou
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def Quuids(self):
        """Host ID array
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._StrategyId = params.get("StrategyId")
        self._StrategyName = params.get("StrategyName")
        self._ScanCycle = params.get("ScanCycle")
        self._ScanAt = params.get("ScanAt")
        self._CategoryIds = params.get("CategoryIds")
        self._IsGlobal = params.get("IsGlobal")
        self._MachineType = params.get("MachineType")
        self._RegionCode = params.get("RegionCode")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateBaselineStrategyResponse(AbstractModel):
    """UpdateBaselineStrategy response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateHostLoginWhiteObj(AbstractModel):
    """Edit allowlisted entities

    """

    def __init__(self):
        r"""
        :param _Places: Region information array
        :type Places: list of Place
        :param _SrcIp: Source IP
        :type SrcIp: str
        :param _UserName: Username
        :type UserName: str
        :param _Remark: Remarks
        :type Remark: str
        :param _Id: Data ID to be updated
        :type Id: int
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._Places = None
        self._SrcIp = None
        self._UserName = None
        self._Remark = None
        self._Id = None
        self._StartTime = None
        self._EndTime = None

    @property
    def Places(self):
        """Region information array
        :rtype: list of Place
        """
        return self._Places

    @Places.setter
    def Places(self, Places):
        self._Places = Places

    @property
    def SrcIp(self):
        """Source IP
        :rtype: str
        """
        return self._SrcIp

    @SrcIp.setter
    def SrcIp(self, SrcIp):
        self._SrcIp = SrcIp

    @property
    def UserName(self):
        """Username
        :rtype: str
        """
        return self._UserName

    @UserName.setter
    def UserName(self, UserName):
        self._UserName = UserName

    @property
    def Remark(self):
        """Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def Id(self):
        """Data ID to be updated
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def StartTime(self):
        """Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        if params.get("Places") is not None:
            self._Places = []
            for item in params.get("Places"):
                obj = Place()
                obj._deserialize(item)
                self._Places.append(obj)
        self._SrcIp = params.get("SrcIp")
        self._UserName = params.get("UserName")
        self._Remark = params.get("Remark")
        self._Id = params.get("Id")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateMachineTagsRequest(AbstractModel):
    """UpdateMachineTags request structure.

    """

    def __init__(self):
        r"""
        :param _Quuid: Machine QUUID
        :type Quuid: str
        :param _TagIds: Tag ID. This operation will overwrite the existing Tag list.
        :type TagIds: list of int non-negative
        :param _MachineRegion: Server region. For example, ap-guangzhou.
        :type MachineRegion: str
        :param _MachineArea: Server type (CVM|BM|ECM|LH|Other)
        :type MachineArea: str
        """
        self._Quuid = None
        self._TagIds = None
        self._MachineRegion = None
        self._MachineArea = None

    @property
    def Quuid(self):
        """Machine QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def TagIds(self):
        """Tag ID. This operation will overwrite the existing Tag list.
        :rtype: list of int non-negative
        """
        return self._TagIds

    @TagIds.setter
    def TagIds(self, TagIds):
        self._TagIds = TagIds

    @property
    def MachineRegion(self):
        """Server region. For example, ap-guangzhou.
        :rtype: str
        """
        return self._MachineRegion

    @MachineRegion.setter
    def MachineRegion(self, MachineRegion):
        self._MachineRegion = MachineRegion

    @property
    def MachineArea(self):
        """Server type (CVM|BM|ECM|LH|Other)
        :rtype: str
        """
        return self._MachineArea

    @MachineArea.setter
    def MachineArea(self, MachineArea):
        self._MachineArea = MachineArea


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._TagIds = params.get("TagIds")
        self._MachineRegion = params.get("MachineRegion")
        self._MachineArea = params.get("MachineArea")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateMachineTagsResponse(AbstractModel):
    """UpdateMachineTags response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UsualPlace(AbstractModel):
    """Frequently used log-in location

    """

    def __init__(self):
        r"""
        :param _Id: ID
        :type Id: int
        :param _Uuid: CWPP client UUID
        :type Uuid: str
        :param _CountryId: Country ID
        :type CountryId: int
        :param _ProvinceId: Province ID
        :type ProvinceId: int
        :param _CityId: City ID
        :type CityId: int
        """
        self._Id = None
        self._Uuid = None
        self._CountryId = None
        self._ProvinceId = None
        self._CityId = None

    @property
    def Id(self):
        """ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Uuid(self):
        """CWPP client UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def CountryId(self):
        """Country ID
        :rtype: int
        """
        return self._CountryId

    @CountryId.setter
    def CountryId(self, CountryId):
        self._CountryId = CountryId

    @property
    def ProvinceId(self):
        """Province ID
        :rtype: int
        """
        return self._ProvinceId

    @ProvinceId.setter
    def ProvinceId(self, ProvinceId):
        self._ProvinceId = ProvinceId

    @property
    def CityId(self):
        """City ID
        :rtype: int
        """
        return self._CityId

    @CityId.setter
    def CityId(self, CityId):
        self._CityId = CityId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Uuid = params.get("Uuid")
        self._CountryId = params.get("CountryId")
        self._ProvinceId = params.get("ProvinceId")
        self._CityId = params.get("CityId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ValueInfo(AbstractModel):
    """Index value description

    """

    def __init__(self):
        r"""
        :param _Tokenizer: Field delimiter
        :type Tokenizer: str
        :param _Type: Field type
        :type Type: str
        :param _SqlFlag: Whether the analysis feature is enabled for the field
        :type SqlFlag: bool
        :param _ContainZH: Whether Chinese characters are contained
        :type ContainZH: bool
        """
        self._Tokenizer = None
        self._Type = None
        self._SqlFlag = None
        self._ContainZH = None

    @property
    def Tokenizer(self):
        """Field delimiter
        :rtype: str
        """
        return self._Tokenizer

    @Tokenizer.setter
    def Tokenizer(self, Tokenizer):
        self._Tokenizer = Tokenizer

    @property
    def Type(self):
        """Field type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def SqlFlag(self):
        """Whether the analysis feature is enabled for the field
        :rtype: bool
        """
        return self._SqlFlag

    @SqlFlag.setter
    def SqlFlag(self, SqlFlag):
        self._SqlFlag = SqlFlag

    @property
    def ContainZH(self):
        """Whether Chinese characters are contained
        :rtype: bool
        """
        return self._ContainZH

    @ContainZH.setter
    def ContainZH(self, ContainZH):
        self._ContainZH = ContainZH


    def _deserialize(self, params):
        self._Tokenizer = params.get("Tokenizer")
        self._Type = params.get("Type")
        self._SqlFlag = params.get("SqlFlag")
        self._ContainZH = params.get("ContainZH")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VersionWhiteConfig(AbstractModel):
    """Allowlist configuration of the authorized edition

    """

    def __init__(self):
        r"""
        :param _Deadline: Number of days before expiration
        :type Deadline: int
        :param _LicenseNum: Number of authorizations
        :type LicenseNum: int
        :param _IsApplyFor: Whether application can be made
        :type IsApplyFor: bool
        :param _SourceType: Type
        :type SourceType: int
        """
        self._Deadline = None
        self._LicenseNum = None
        self._IsApplyFor = None
        self._SourceType = None

    @property
    def Deadline(self):
        """Number of days before expiration
        :rtype: int
        """
        return self._Deadline

    @Deadline.setter
    def Deadline(self, Deadline):
        self._Deadline = Deadline

    @property
    def LicenseNum(self):
        """Number of authorizations
        :rtype: int
        """
        return self._LicenseNum

    @LicenseNum.setter
    def LicenseNum(self, LicenseNum):
        self._LicenseNum = LicenseNum

    @property
    def IsApplyFor(self):
        """Whether application can be made
        :rtype: bool
        """
        return self._IsApplyFor

    @IsApplyFor.setter
    def IsApplyFor(self, IsApplyFor):
        self._IsApplyFor = IsApplyFor

    @property
    def SourceType(self):
        """Type
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType


    def _deserialize(self, params):
        self._Deadline = params.get("Deadline")
        self._LicenseNum = params.get("LicenseNum")
        self._IsApplyFor = params.get("IsApplyFor")
        self._SourceType = params.get("SourceType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VertexDetail(AbstractModel):
    """Detailed node information

    """

    def __init__(self):
        r"""
        :param _Type: Node type. process - 1; network - 2; file - 3; SSH - 4
Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: int
        :param _Time: Time used for each node type, which is in the format of 2022-11-29 00:00:00.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Time: str
        :param _AlarmInfo: Alarm information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AlarmInfo: list of AlarmInfo
        :param _ProcName: Process name, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcName: str
        :param _CmdLine: Command line, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CmdLine: str
        :param _Pid: Process ID, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Pid: str
        :param _FileMd5: File MD5, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileMd5: str
        :param _FileContent: Content written to the file, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileContent: str
        :param _FilePath: File path, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FilePath: str
        :param _FileCreateTime: File creation time, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileCreateTime: str
        :param _Address: Request destination address, which is effective when the node type is network.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Address: str
        :param _DstPort: Target port, which is effective when the node type is network.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DstPort: int
        :param _SrcIP: Log-in source IP, which is effective when the node type is SSH.
Note: This field may return null, indicating that no valid values can be obtained.
        :type SrcIP: str
        :param _User: Log-in username and user group, which is effective when the node type is SSH.
Note: This field may return null, indicating that no valid values can be obtained.
        :type User: str
        :param _VulName: Vulnerability name, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulName: str
        :param _VulTime: Vulnerability exploitation time, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulTime: str
        :param _HttpContent: HTTP request content, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :type HttpContent: str
        :param _VulSrcIP: Vulnerability exploiter source IP, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulSrcIP: str
        :param _VertexId: Node ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type VertexId: str
        """
        self._Type = None
        self._Time = None
        self._AlarmInfo = None
        self._ProcName = None
        self._CmdLine = None
        self._Pid = None
        self._FileMd5 = None
        self._FileContent = None
        self._FilePath = None
        self._FileCreateTime = None
        self._Address = None
        self._DstPort = None
        self._SrcIP = None
        self._User = None
        self._VulName = None
        self._VulTime = None
        self._HttpContent = None
        self._VulSrcIP = None
        self._VertexId = None

    @property
    def Type(self):
        """Node type. process - 1; network - 2; file - 3; SSH - 4
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Time(self):
        """Time used for each node type, which is in the format of 2022-11-29 00:00:00.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Time

    @Time.setter
    def Time(self, Time):
        self._Time = Time

    @property
    def AlarmInfo(self):
        """Alarm information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of AlarmInfo
        """
        return self._AlarmInfo

    @AlarmInfo.setter
    def AlarmInfo(self, AlarmInfo):
        self._AlarmInfo = AlarmInfo

    @property
    def ProcName(self):
        """Process name, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcName

    @ProcName.setter
    def ProcName(self, ProcName):
        self._ProcName = ProcName

    @property
    def CmdLine(self):
        """Command line, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def Pid(self):
        """Process ID, which is effective when the node type is process.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def FileMd5(self):
        """File MD5, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileMd5

    @FileMd5.setter
    def FileMd5(self, FileMd5):
        self._FileMd5 = FileMd5

    @property
    def FileContent(self):
        """Content written to the file, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileContent

    @FileContent.setter
    def FileContent(self, FileContent):
        self._FileContent = FileContent

    @property
    def FilePath(self):
        """File path, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def FileCreateTime(self):
        """File creation time, which is effective when the node type is file.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileCreateTime

    @FileCreateTime.setter
    def FileCreateTime(self, FileCreateTime):
        self._FileCreateTime = FileCreateTime

    @property
    def Address(self):
        """Request destination address, which is effective when the node type is network.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Address

    @Address.setter
    def Address(self, Address):
        self._Address = Address

    @property
    def DstPort(self):
        """Target port, which is effective when the node type is network.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def SrcIP(self):
        """Log-in source IP, which is effective when the node type is SSH.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SrcIP

    @SrcIP.setter
    def SrcIP(self, SrcIP):
        self._SrcIP = SrcIP

    @property
    def User(self):
        """Log-in username and user group, which is effective when the node type is SSH.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def VulName(self):
        """Vulnerability name, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def VulTime(self):
        """Vulnerability exploitation time, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulTime

    @VulTime.setter
    def VulTime(self, VulTime):
        self._VulTime = VulTime

    @property
    def HttpContent(self):
        """HTTP request content, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HttpContent

    @HttpContent.setter
    def HttpContent(self, HttpContent):
        self._HttpContent = HttpContent

    @property
    def VulSrcIP(self):
        """Vulnerability exploiter source IP, which is effective when the node type is vulnerability.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulSrcIP

    @VulSrcIP.setter
    def VulSrcIP(self, VulSrcIP):
        self._VulSrcIP = VulSrcIP

    @property
    def VertexId(self):
        """Node ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VertexId

    @VertexId.setter
    def VertexId(self, VertexId):
        self._VertexId = VertexId


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Time = params.get("Time")
        if params.get("AlarmInfo") is not None:
            self._AlarmInfo = []
            for item in params.get("AlarmInfo"):
                obj = AlarmInfo()
                obj._deserialize(item)
                self._AlarmInfo.append(obj)
        self._ProcName = params.get("ProcName")
        self._CmdLine = params.get("CmdLine")
        self._Pid = params.get("Pid")
        self._FileMd5 = params.get("FileMd5")
        self._FileContent = params.get("FileContent")
        self._FilePath = params.get("FilePath")
        self._FileCreateTime = params.get("FileCreateTime")
        self._Address = params.get("Address")
        self._DstPort = params.get("DstPort")
        self._SrcIP = params.get("SrcIP")
        self._User = params.get("User")
        self._VulName = params.get("VulName")
        self._VulTime = params.get("VulTime")
        self._HttpContent = params.get("HttpContent")
        self._VulSrcIP = params.get("VulSrcIP")
        self._VertexId = params.get("VertexId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VertexInfo(AbstractModel):
    """Attack backtracking node information

    """

    def __init__(self):
        r"""
        :param _Type: Node type: process: 1; network: 2; file: 3; ssh: 4;
        :type Type: int
        :param _Vid: VID contained in this node
        :type Vid: str
        :param _ParentVid: Parent node VID of this node
        :type ParentVid: str
        :param _IsLeaf: Whether a leaf node
        :type IsLeaf: bool
        :param _ProcNamePrefix: Process name, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcNamePrefix: str
        :param _ProcNameMd5: Process name MD5, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcNameMd5: str
        :param _CmdLinePrefix: Command line, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :type CmdLinePrefix: str
        :param _CmdLineMd5: Command line MD5, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :type CmdLineMd5: str
        :param _FilePathPrefix: File path, used when Type=3
Note: This field may return null, indicating that no valid values can be obtained.
        :type FilePathPrefix: str
        :param _AddressPrefix: Request destination address, used when Type=2
Note: This field may return null, indicating that no valid values can be obtained.
        :type AddressPrefix: str
        :param _IsWeDetect: Whether a vulnerability node
        :type IsWeDetect: bool
        :param _IsAlarm: Whether an alarm node
        :type IsAlarm: bool
        :param _FilePathMd5: File path MD5, used when Type=3
Note: This field may return null, indicating that no valid values can be obtained.
        :type FilePathMd5: str
        :param _AddressMd5: Request destination address MD5, used when Type=2
Note: This field may return null, indicating that no valid values can be obtained.
        :type AddressMd5: str
        """
        self._Type = None
        self._Vid = None
        self._ParentVid = None
        self._IsLeaf = None
        self._ProcNamePrefix = None
        self._ProcNameMd5 = None
        self._CmdLinePrefix = None
        self._CmdLineMd5 = None
        self._FilePathPrefix = None
        self._AddressPrefix = None
        self._IsWeDetect = None
        self._IsAlarm = None
        self._FilePathMd5 = None
        self._AddressMd5 = None

    @property
    def Type(self):
        """Node type: process: 1; network: 2; file: 3; ssh: 4;
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Vid(self):
        """VID contained in this node
        :rtype: str
        """
        return self._Vid

    @Vid.setter
    def Vid(self, Vid):
        self._Vid = Vid

    @property
    def ParentVid(self):
        """Parent node VID of this node
        :rtype: str
        """
        return self._ParentVid

    @ParentVid.setter
    def ParentVid(self, ParentVid):
        self._ParentVid = ParentVid

    @property
    def IsLeaf(self):
        """Whether a leaf node
        :rtype: bool
        """
        return self._IsLeaf

    @IsLeaf.setter
    def IsLeaf(self, IsLeaf):
        self._IsLeaf = IsLeaf

    @property
    def ProcNamePrefix(self):
        """Process name, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcNamePrefix

    @ProcNamePrefix.setter
    def ProcNamePrefix(self, ProcNamePrefix):
        self._ProcNamePrefix = ProcNamePrefix

    @property
    def ProcNameMd5(self):
        """Process name MD5, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcNameMd5

    @ProcNameMd5.setter
    def ProcNameMd5(self, ProcNameMd5):
        self._ProcNameMd5 = ProcNameMd5

    @property
    def CmdLinePrefix(self):
        """Command line, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CmdLinePrefix

    @CmdLinePrefix.setter
    def CmdLinePrefix(self, CmdLinePrefix):
        self._CmdLinePrefix = CmdLinePrefix

    @property
    def CmdLineMd5(self):
        """Command line MD5, used when Type=1
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CmdLineMd5

    @CmdLineMd5.setter
    def CmdLineMd5(self, CmdLineMd5):
        self._CmdLineMd5 = CmdLineMd5

    @property
    def FilePathPrefix(self):
        """File path, used when Type=3
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FilePathPrefix

    @FilePathPrefix.setter
    def FilePathPrefix(self, FilePathPrefix):
        self._FilePathPrefix = FilePathPrefix

    @property
    def AddressPrefix(self):
        """Request destination address, used when Type=2
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AddressPrefix

    @AddressPrefix.setter
    def AddressPrefix(self, AddressPrefix):
        self._AddressPrefix = AddressPrefix

    @property
    def IsWeDetect(self):
        """Whether a vulnerability node
        :rtype: bool
        """
        return self._IsWeDetect

    @IsWeDetect.setter
    def IsWeDetect(self, IsWeDetect):
        self._IsWeDetect = IsWeDetect

    @property
    def IsAlarm(self):
        """Whether an alarm node
        :rtype: bool
        """
        return self._IsAlarm

    @IsAlarm.setter
    def IsAlarm(self, IsAlarm):
        self._IsAlarm = IsAlarm

    @property
    def FilePathMd5(self):
        """File path MD5, used when Type=3
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FilePathMd5

    @FilePathMd5.setter
    def FilePathMd5(self, FilePathMd5):
        self._FilePathMd5 = FilePathMd5

    @property
    def AddressMd5(self):
        """Request destination address MD5, used when Type=2
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AddressMd5

    @AddressMd5.setter
    def AddressMd5(self, AddressMd5):
        self._AddressMd5 = AddressMd5


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Vid = params.get("Vid")
        self._ParentVid = params.get("ParentVid")
        self._IsLeaf = params.get("IsLeaf")
        self._ProcNamePrefix = params.get("ProcNamePrefix")
        self._ProcNameMd5 = params.get("ProcNameMd5")
        self._CmdLinePrefix = params.get("CmdLinePrefix")
        self._CmdLineMd5 = params.get("CmdLineMd5")
        self._FilePathPrefix = params.get("FilePathPrefix")
        self._AddressPrefix = params.get("AddressPrefix")
        self._IsWeDetect = params.get("IsWeDetect")
        self._IsAlarm = params.get("IsAlarm")
        self._FilePathMd5 = params.get("FilePathMd5")
        self._AddressMd5 = params.get("AddressMd5")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceEvent(AbstractModel):
    """Vulnerability details

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _CveId: CVE ID
        :type CveId: str
        :param _Id: Vulnerability event ID
        :type Id: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Alias: Host name
        :type Alias: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _PublicIp: Public IP address
        :type PublicIp: str
        :param _EventType: 0: Attack Attempt (WeDetect); 1: Successful Attack Attempt (WeDetect); 2: RASP Defense Event
        :type EventType: int
        :param _SourceIp: Attack source IP address
        :type SourceIp: str
        :param _City: City of the attack source IP address
        :type City: str
        :param _SourcePort: Attack source port
        :type SourcePort: list of int non-negative
        :param _CreateTime: Event Creation Time
        :type CreateTime: str
        :param _MergeTime: Update Event Time
        :type MergeTime: str
        :param _Count: Number of Occurrences
        :type Count: int
        :param _Status: Status. 0: Pending; 1: Defended; 2: Processed; 3: Ignored; 4: Deleted
        :type Status: int
        :param _UpgradeType: 0: Pro Edition; 1: Ultimate Edition; 2: LH Inclusive Edition (for Lighthouse only); 3: CVM Inclusive Edition (for CVM only).
        :type UpgradeType: int
        :param _FixType: 0: do not support fixing; 1: support fixing.
        :type FixType: int
        :param _Uuid: Host UUID
        :type Uuid: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._VulId = None
        self._VulName = None
        self._CveId = None
        self._Id = None
        self._Quuid = None
        self._Alias = None
        self._PrivateIp = None
        self._PublicIp = None
        self._EventType = None
        self._SourceIp = None
        self._City = None
        self._SourcePort = None
        self._CreateTime = None
        self._MergeTime = None
        self._Count = None
        self._Status = None
        self._UpgradeType = None
        self._FixType = None
        self._Uuid = None
        self._MachineExtraInfo = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def CveId(self):
        """CVE ID
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def Id(self):
        """Vulnerability event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Alias(self):
        """Host name
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def PublicIp(self):
        """Public IP address
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def EventType(self):
        """0: Attack Attempt (WeDetect); 1: Successful Attack Attempt (WeDetect); 2: RASP Defense Event
        :rtype: int
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def SourceIp(self):
        """Attack source IP address
        :rtype: str
        """
        return self._SourceIp

    @SourceIp.setter
    def SourceIp(self, SourceIp):
        self._SourceIp = SourceIp

    @property
    def City(self):
        """City of the attack source IP address
        :rtype: str
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def SourcePort(self):
        """Attack source port
        :rtype: list of int non-negative
        """
        return self._SourcePort

    @SourcePort.setter
    def SourcePort(self, SourcePort):
        self._SourcePort = SourcePort

    @property
    def CreateTime(self):
        """Event Creation Time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MergeTime(self):
        """Update Event Time
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def Count(self):
        """Number of Occurrences
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Status(self):
        """Status. 0: Pending; 1: Defended; 2: Processed; 3: Ignored; 4: Deleted
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def UpgradeType(self):
        """0: Pro Edition; 1: Ultimate Edition; 2: LH Inclusive Edition (for Lighthouse only); 3: CVM Inclusive Edition (for CVM only).
        :rtype: int
        """
        return self._UpgradeType

    @UpgradeType.setter
    def UpgradeType(self, UpgradeType):
        self._UpgradeType = UpgradeType

    @property
    def FixType(self):
        """0: do not support fixing; 1: support fixing.
        :rtype: int
        """
        return self._FixType

    @FixType.setter
    def FixType(self, FixType):
        self._FixType = FixType

    @property
    def Uuid(self):
        """Host UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._VulName = params.get("VulName")
        self._CveId = params.get("CveId")
        self._Id = params.get("Id")
        self._Quuid = params.get("Quuid")
        self._Alias = params.get("Alias")
        self._PrivateIp = params.get("PrivateIp")
        self._PublicIp = params.get("PublicIp")
        self._EventType = params.get("EventType")
        self._SourceIp = params.get("SourceIp")
        self._City = params.get("City")
        self._SourcePort = params.get("SourcePort")
        self._CreateTime = params.get("CreateTime")
        self._MergeTime = params.get("MergeTime")
        self._Count = params.get("Count")
        self._Status = params.get("Status")
        self._UpgradeType = params.get("UpgradeType")
        self._FixType = params.get("FixType")
        self._Uuid = params.get("Uuid")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceEventDetail(AbstractModel):
    """Vulnerability details

    """

    def __init__(self):
        r"""
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _CveId: CVE ID
        :type CveId: str
        :param _Id: Vulnerability Event ID
        :type Id: int
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Alias: Host name
        :type Alias: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _PublicIp: Public IP address
        :type PublicIp: str
        :param _EventType: 0: Attack Attempt (WeDetect); 1: Successful Attack Attempt (WeDetect); 2: RASP Defense Event
        :type EventType: int
        :param _SourceIp: Attack source IP address
        :type SourceIp: str
        :param _City: City of the attack source IP address
        :type City: str
        :param _SourcePort: Attack source port
Note: This field may return null, indicating that no valid values can be obtained.
        :type SourcePort: list of int non-negative
        :param _CreateTime: Event Creation Time
        :type CreateTime: str
        :param _MergeTime: Update Event Time
        :type MergeTime: str
        :param _Count: Number of Occurrences
        :type Count: int
        :param _Status: Status. 0: Pending; 1: Defended; 2: Processed; 3: Ignored; 4: Deleted
        :type Status: int
        :param _MachineStatus: ONLINE OFFLINE
        :type MachineStatus: str
        :param _Description: Vulnerability Description Information
        :type Description: str
        :param _Fix: Fixing suggestion
        :type Fix: str
        :param _NetworkPayload: Attack Payload
        :type NetworkPayload: str
        :param _Pid: Associated Process PID
        :type Pid: int
        :param _MainClass: Associated Process Main Class Name
        :type MainClass: str
        :param _StackTrace: Stack Information (Unique for RASP)
        :type StackTrace: str
        :param _EventDetail: Vulnerability ID-Related Event Details (JSON array format, unique to RASP)
        :type EventDetail: str
        :param _ExceptionPstree: Host Compromise Event Process Tree (JSON format, unique to WeDetect)
        :type ExceptionPstree: str
        :param _MachineExtraInfo: Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._VulName = None
        self._CveId = None
        self._Id = None
        self._Quuid = None
        self._Alias = None
        self._PrivateIp = None
        self._PublicIp = None
        self._EventType = None
        self._SourceIp = None
        self._City = None
        self._SourcePort = None
        self._CreateTime = None
        self._MergeTime = None
        self._Count = None
        self._Status = None
        self._MachineStatus = None
        self._Description = None
        self._Fix = None
        self._NetworkPayload = None
        self._Pid = None
        self._MainClass = None
        self._StackTrace = None
        self._EventDetail = None
        self._ExceptionPstree = None
        self._MachineExtraInfo = None

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def CveId(self):
        """CVE ID
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def Id(self):
        """Vulnerability Event ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Alias(self):
        """Host name
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def PublicIp(self):
        """Public IP address
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def EventType(self):
        """0: Attack Attempt (WeDetect); 1: Successful Attack Attempt (WeDetect); 2: RASP Defense Event
        :rtype: int
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def SourceIp(self):
        """Attack source IP address
        :rtype: str
        """
        return self._SourceIp

    @SourceIp.setter
    def SourceIp(self, SourceIp):
        self._SourceIp = SourceIp

    @property
    def City(self):
        """City of the attack source IP address
        :rtype: str
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def SourcePort(self):
        """Attack source port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of int non-negative
        """
        return self._SourcePort

    @SourcePort.setter
    def SourcePort(self, SourcePort):
        self._SourcePort = SourcePort

    @property
    def CreateTime(self):
        """Event Creation Time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def MergeTime(self):
        """Update Event Time
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def Count(self):
        """Number of Occurrences
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Status(self):
        """Status. 0: Pending; 1: Defended; 2: Processed; 3: Ignored; 4: Deleted
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def MachineStatus(self):
        """ONLINE OFFLINE
        :rtype: str
        """
        return self._MachineStatus

    @MachineStatus.setter
    def MachineStatus(self, MachineStatus):
        self._MachineStatus = MachineStatus

    @property
    def Description(self):
        """Vulnerability Description Information
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Fix(self):
        """Fixing suggestion
        :rtype: str
        """
        return self._Fix

    @Fix.setter
    def Fix(self, Fix):
        self._Fix = Fix

    @property
    def NetworkPayload(self):
        """Attack Payload
        :rtype: str
        """
        return self._NetworkPayload

    @NetworkPayload.setter
    def NetworkPayload(self, NetworkPayload):
        self._NetworkPayload = NetworkPayload

    @property
    def Pid(self):
        """Associated Process PID
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def MainClass(self):
        """Associated Process Main Class Name
        :rtype: str
        """
        return self._MainClass

    @MainClass.setter
    def MainClass(self, MainClass):
        self._MainClass = MainClass

    @property
    def StackTrace(self):
        """Stack Information (Unique for RASP)
        :rtype: str
        """
        return self._StackTrace

    @StackTrace.setter
    def StackTrace(self, StackTrace):
        self._StackTrace = StackTrace

    @property
    def EventDetail(self):
        """Vulnerability ID-Related Event Details (JSON array format, unique to RASP)
        :rtype: str
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def ExceptionPstree(self):
        """Host Compromise Event Process Tree (JSON format, unique to WeDetect)
        :rtype: str
        """
        return self._ExceptionPstree

    @ExceptionPstree.setter
    def ExceptionPstree(self, ExceptionPstree):
        self._ExceptionPstree = ExceptionPstree

    @property
    def MachineExtraInfo(self):
        """Host Additional Information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._VulName = params.get("VulName")
        self._CveId = params.get("CveId")
        self._Id = params.get("Id")
        self._Quuid = params.get("Quuid")
        self._Alias = params.get("Alias")
        self._PrivateIp = params.get("PrivateIp")
        self._PublicIp = params.get("PublicIp")
        self._EventType = params.get("EventType")
        self._SourceIp = params.get("SourceIp")
        self._City = params.get("City")
        self._SourcePort = params.get("SourcePort")
        self._CreateTime = params.get("CreateTime")
        self._MergeTime = params.get("MergeTime")
        self._Count = params.get("Count")
        self._Status = params.get("Status")
        self._MachineStatus = params.get("MachineStatus")
        self._Description = params.get("Description")
        self._Fix = params.get("Fix")
        self._NetworkPayload = params.get("NetworkPayload")
        self._Pid = params.get("Pid")
        self._MainClass = params.get("MainClass")
        self._StackTrace = params.get("StackTrace")
        self._EventDetail = params.get("EventDetail")
        self._ExceptionPstree = params.get("ExceptionPstree")
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceOverview(AbstractModel):
    """Vulnerability defense trend page, which includes plugin status and attack defense trends. Trends are stored in three arrays of equal length, with elements corresponding one-to-one. If a certain day is missed, there will be missing data.

    """

    def __init__(self):
        r"""
        :param _Enable: Defense switch: 0 - disable; 1 - enable
        :type Enable: int
        :param _DefendHostCount: Number of hosts with defense enabled
        :type DefendHostCount: int
        :param _ExceptionCount: Number of plugin exceptions
        :type ExceptionCount: int
        :param _AttackCounts: Daily attack trends
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackCounts: list of int
        :param _DefendCounts: Daily defense trends
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefendCounts: list of int
        :param _Date: Date
Note: This field may return null, indicating that no valid values can be obtained.
        :type Date: list of str
        """
        self._Enable = None
        self._DefendHostCount = None
        self._ExceptionCount = None
        self._AttackCounts = None
        self._DefendCounts = None
        self._Date = None

    @property
    def Enable(self):
        """Defense switch: 0 - disable; 1 - enable
        :rtype: int
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def DefendHostCount(self):
        """Number of hosts with defense enabled
        :rtype: int
        """
        return self._DefendHostCount

    @DefendHostCount.setter
    def DefendHostCount(self, DefendHostCount):
        self._DefendHostCount = DefendHostCount

    @property
    def ExceptionCount(self):
        """Number of plugin exceptions
        :rtype: int
        """
        return self._ExceptionCount

    @ExceptionCount.setter
    def ExceptionCount(self, ExceptionCount):
        self._ExceptionCount = ExceptionCount

    @property
    def AttackCounts(self):
        """Daily attack trends
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of int
        """
        return self._AttackCounts

    @AttackCounts.setter
    def AttackCounts(self, AttackCounts):
        self._AttackCounts = AttackCounts

    @property
    def DefendCounts(self):
        """Daily defense trends
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of int
        """
        return self._DefendCounts

    @DefendCounts.setter
    def DefendCounts(self, DefendCounts):
        self._DefendCounts = DefendCounts

    @property
    def Date(self):
        """Date
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._DefendHostCount = params.get("DefendHostCount")
        self._ExceptionCount = params.get("ExceptionCount")
        self._AttackCounts = params.get("AttackCounts")
        self._DefendCounts = params.get("DefendCounts")
        self._Date = params.get("Date")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefencePluginDetail(AbstractModel):
    """vulnerability defense plugin status of a single process

    """

    def __init__(self):
        r"""
        :param _Pid: ID of the injected process
        :type Pid: int
        :param _MainClass: Main class name of the injected process
        :type MainClass: str
        :param _Status: Plugin status. 0: injecting; 1: injection successful; 2: plugin timed out, 3: plugin exited; 4: injection failed; 5: logically deleted.
        :type Status: int
        :param _ErrorLog: Error log
        :type ErrorLog: str
        :param _InjectLog: Injection log
        :type InjectLog: str
        """
        self._Pid = None
        self._MainClass = None
        self._Status = None
        self._ErrorLog = None
        self._InjectLog = None

    @property
    def Pid(self):
        """ID of the injected process
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def MainClass(self):
        """Main class name of the injected process
        :rtype: str
        """
        return self._MainClass

    @MainClass.setter
    def MainClass(self, MainClass):
        self._MainClass = MainClass

    @property
    def Status(self):
        """Plugin status. 0: injecting; 1: injection successful; 2: plugin timed out, 3: plugin exited; 4: injection failed; 5: logically deleted.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ErrorLog(self):
        """Error log
        :rtype: str
        """
        return self._ErrorLog

    @ErrorLog.setter
    def ErrorLog(self, ErrorLog):
        self._ErrorLog = ErrorLog

    @property
    def InjectLog(self):
        """Injection log
        :rtype: str
        """
        return self._InjectLog

    @InjectLog.setter
    def InjectLog(self, InjectLog):
        self._InjectLog = InjectLog


    def _deserialize(self, params):
        self._Pid = params.get("Pid")
        self._MainClass = params.get("MainClass")
        self._Status = params.get("Status")
        self._ErrorLog = params.get("ErrorLog")
        self._InjectLog = params.get("InjectLog")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefencePluginStatus(AbstractModel):
    """Host vulnerability defense plugin information

    """

    def __init__(self):
        r"""
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Alias: Host alias
        :type Alias: str
        :param _PrivateIp: Private IP address
        :type PrivateIp: str
        :param _PublicIp: Public IP address
        :type PublicIp: str
        :param _Exception: Plugin status: 0 - normal; 1 - abnormal
        :type Exception: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Last update time
        :type ModifyTime: str
        """
        self._Quuid = None
        self._Alias = None
        self._PrivateIp = None
        self._PublicIp = None
        self._Exception = None
        self._CreateTime = None
        self._ModifyTime = None

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Alias(self):
        """Host alias
        :rtype: str
        """
        return self._Alias

    @Alias.setter
    def Alias(self, Alias):
        self._Alias = Alias

    @property
    def PrivateIp(self):
        """Private IP address
        :rtype: str
        """
        return self._PrivateIp

    @PrivateIp.setter
    def PrivateIp(self, PrivateIp):
        self._PrivateIp = PrivateIp

    @property
    def PublicIp(self):
        """Public IP address
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def Exception(self):
        """Plugin status: 0 - normal; 1 - abnormal
        :rtype: int
        """
        return self._Exception

    @Exception.setter
    def Exception(self, Exception):
        self._Exception = Exception

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        """Last update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Alias = params.get("Alias")
        self._PrivateIp = params.get("PrivateIp")
        self._PublicIp = params.get("PublicIp")
        self._Exception = params.get("Exception")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceRangeDetail(AbstractModel):
    """Vulnerability defense scope details

    """

    def __init__(self):
        r"""
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _Label: Tag
        :type Label: str
        :param _Level: Vulnerability level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :type Level: int
        :param _CvssScore: CVSS score
        :type CvssScore: float
        :param _CveId: cve id
        :type CveId: str
        :param _PublishTime: Release time
        :type PublishTime: str
        :param _VulId: Vulnerability ID
        :type VulId: int
        """
        self._VulName = None
        self._Label = None
        self._Level = None
        self._CvssScore = None
        self._CveId = None
        self._PublishTime = None
        self._VulId = None

    @property
    def VulName(self):
        """Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def Label(self):
        """Tag
        :rtype: str
        """
        return self._Label

    @Label.setter
    def Label(self, Label):
        self._Label = Label

    @property
    def Level(self):
        """Vulnerability level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CvssScore(self):
        """CVSS score
        :rtype: float
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def CveId(self):
        """cve id
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def PublishTime(self):
        """Release time
        :rtype: str
        """
        return self._PublishTime

    @PublishTime.setter
    def PublishTime(self, PublishTime):
        self._PublishTime = PublishTime

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId


    def _deserialize(self, params):
        self._VulName = params.get("VulName")
        self._Label = params.get("Label")
        self._Level = params.get("Level")
        self._CvssScore = params.get("CvssScore")
        self._CveId = params.get("CveId")
        self._PublishTime = params.get("PublishTime")
        self._VulId = params.get("VulId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDetailInfo(AbstractModel):
    """Vulnerability details

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Level: Vulnerability level
        :type Level: int
        :param _Name: Vulnerability name
        :type Name: str
        :param _CveId: CVE ID
        :type CveId: str
        :param _VulCategory: 1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 0: emergency vulnerabilities
        :type VulCategory: int
        :param _Descript: Vulnerability description
        :type Descript: str
        :param _Fix: Fixing suggestion
        :type Fix: str
        :param _Reference: Reference link
        :type Reference: str
        :param _CvssScore: CVSS score
        :type CvssScore: float
        :param _Cvss: CVSS details
        :type Cvss: str
        :param _PublishTime: Release time
        :type PublishTime: str
        """
        self._VulId = None
        self._Level = None
        self._Name = None
        self._CveId = None
        self._VulCategory = None
        self._Descript = None
        self._Fix = None
        self._Reference = None
        self._CvssScore = None
        self._Cvss = None
        self._PublishTime = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Level(self):
        """Vulnerability level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Name(self):
        """Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CveId(self):
        """CVE ID
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def VulCategory(self):
        """1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 0: emergency vulnerabilities
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def Descript(self):
        """Vulnerability description
        :rtype: str
        """
        return self._Descript

    @Descript.setter
    def Descript(self, Descript):
        self._Descript = Descript

    @property
    def Fix(self):
        """Fixing suggestion
        :rtype: str
        """
        return self._Fix

    @Fix.setter
    def Fix(self, Fix):
        self._Fix = Fix

    @property
    def Reference(self):
        """Reference link
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def CvssScore(self):
        """CVSS score
        :rtype: float
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def Cvss(self):
        """CVSS details
        :rtype: str
        """
        return self._Cvss

    @Cvss.setter
    def Cvss(self, Cvss):
        self._Cvss = Cvss

    @property
    def PublishTime(self):
        """Release time
        :rtype: str
        """
        return self._PublishTime

    @PublishTime.setter
    def PublishTime(self, PublishTime):
        self._PublishTime = PublishTime


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._Level = params.get("Level")
        self._Name = params.get("Name")
        self._CveId = params.get("CveId")
        self._VulCategory = params.get("VulCategory")
        self._Descript = params.get("Descript")
        self._Fix = params.get("Fix")
        self._Reference = params.get("Reference")
        self._CvssScore = params.get("CvssScore")
        self._Cvss = params.get("Cvss")
        self._PublishTime = params.get("PublishTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulEffectHostList(AbstractModel):
    """List of hosts affected by vulnerabilities

    """

    def __init__(self):
        r"""
        :param _EventId: Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventId: int
        :param _Status: Status. 0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 7: rolling back; 8: fixing failed.Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _LastTime: Last detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastTime: str
        :param _Level: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: int
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _HostIp: Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _AliasName: Host alias
Note: This field may return null, indicating that no valid values can be obtained.
        :type AliasName: str
        :param _Tags: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _Description: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _HostVersion: Edition information. 0: Basic Edition; 1: Pro Edition; 2: Ultimate Edition; 3: Inclusive Edition.Note: This field may return null, indicating that no valid values can be obtained.
        :type HostVersion: int
        :param _IsSupportAutoFix: Whether automatic fixing is supported. 0: not supported; 1: supported; 2: client offline; 3: manual fixing supported for Ultimate Edition hosts; 4: not supported for this model; 5: fixing, 6: fixed; 7: detecting; 9: fixing failed; 10: ignored; 11: supported for Linux but not Windows; 12: supported for Windows but not Linux; 13: fixing failed but host is offline; 14: fixing failed but host is not of the Ultimate edition; 15: manually fixed.Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSupportAutoFix: int
        :param _FixStatusMsg: Failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixStatusMsg: str
        :param _FirstDiscoveryTime: First detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstDiscoveryTime: str
        :param _InstanceState: Instance status. "PENDING": creating; "LAUNCH_FAILED" : creation failed; "RUNNING": running; "STOPPED": shut down; "STARTING": starting; "STOPPING": shutting down; "REBOOTING": restarting; "SHUTDOWN": shut down and pending termination; "TERMINATING": terminating.Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceState: str
        :param _PublicIpAddresses: Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublicIpAddresses: str
        :param _CloudTags: Cloud tag information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CloudTags: list of Tags
        :param _MachineExtraInfo: Host additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :type MachineExtraInfo: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        self._EventId = None
        self._Status = None
        self._LastTime = None
        self._Level = None
        self._Quuid = None
        self._Uuid = None
        self._HostIp = None
        self._AliasName = None
        self._Tags = None
        self._Description = None
        self._HostVersion = None
        self._IsSupportAutoFix = None
        self._FixStatusMsg = None
        self._FirstDiscoveryTime = None
        self._InstanceState = None
        self._PublicIpAddresses = None
        self._CloudTags = None
        self._MachineExtraInfo = None

    @property
    def EventId(self):
        """Event ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def Status(self):
        """Status. 0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 7: rolling back; 8: fixing failed.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def LastTime(self):
        """Last detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def Level(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def HostIp(self):
        """Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def AliasName(self):
        """Host alias
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AliasName

    @AliasName.setter
    def AliasName(self, AliasName):
        self._AliasName = AliasName

    @property
    def Tags(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Description(self):
        """Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def HostVersion(self):
        """Edition information. 0: Basic Edition; 1: Pro Edition; 2: Ultimate Edition; 3: Inclusive Edition.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostVersion

    @HostVersion.setter
    def HostVersion(self, HostVersion):
        self._HostVersion = HostVersion

    @property
    def IsSupportAutoFix(self):
        """Whether automatic fixing is supported. 0: not supported; 1: supported; 2: client offline; 3: manual fixing supported for Ultimate Edition hosts; 4: not supported for this model; 5: fixing, 6: fixed; 7: detecting; 9: fixing failed; 10: ignored; 11: supported for Linux but not Windows; 12: supported for Windows but not Linux; 13: fixing failed but host is offline; 14: fixing failed but host is not of the Ultimate edition; 15: manually fixed.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsSupportAutoFix

    @IsSupportAutoFix.setter
    def IsSupportAutoFix(self, IsSupportAutoFix):
        self._IsSupportAutoFix = IsSupportAutoFix

    @property
    def FixStatusMsg(self):
        """Failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixStatusMsg

    @FixStatusMsg.setter
    def FixStatusMsg(self, FixStatusMsg):
        self._FixStatusMsg = FixStatusMsg

    @property
    def FirstDiscoveryTime(self):
        """First detection time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstDiscoveryTime

    @FirstDiscoveryTime.setter
    def FirstDiscoveryTime(self, FirstDiscoveryTime):
        self._FirstDiscoveryTime = FirstDiscoveryTime

    @property
    def InstanceState(self):
        """Instance status. "PENDING": creating; "LAUNCH_FAILED" : creation failed; "RUNNING": running; "STOPPED": shut down; "STARTING": starting; "STOPPING": shutting down; "REBOOTING": restarting; "SHUTDOWN": shut down and pending termination; "TERMINATING": terminating.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceState

    @InstanceState.setter
    def InstanceState(self, InstanceState):
        self._InstanceState = InstanceState

    @property
    def PublicIpAddresses(self):
        """Public IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublicIpAddresses

    @PublicIpAddresses.setter
    def PublicIpAddresses(self, PublicIpAddresses):
        self._PublicIpAddresses = PublicIpAddresses

    @property
    def CloudTags(self):
        """Cloud tag information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of Tags
        """
        return self._CloudTags

    @CloudTags.setter
    def CloudTags(self, CloudTags):
        self._CloudTags = CloudTags

    @property
    def MachineExtraInfo(self):
        """Host additional information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.cwp.v20180228.models.MachineExtraInfo`
        """
        return self._MachineExtraInfo

    @MachineExtraInfo.setter
    def MachineExtraInfo(self, MachineExtraInfo):
        self._MachineExtraInfo = MachineExtraInfo


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        self._Status = params.get("Status")
        self._LastTime = params.get("LastTime")
        self._Level = params.get("Level")
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._HostIp = params.get("HostIp")
        self._AliasName = params.get("AliasName")
        self._Tags = params.get("Tags")
        self._Description = params.get("Description")
        self._HostVersion = params.get("HostVersion")
        self._IsSupportAutoFix = params.get("IsSupportAutoFix")
        self._FixStatusMsg = params.get("FixStatusMsg")
        self._FirstDiscoveryTime = params.get("FirstDiscoveryTime")
        self._InstanceState = params.get("InstanceState")
        self._PublicIpAddresses = params.get("PublicIpAddresses")
        if params.get("CloudTags") is not None:
            self._CloudTags = []
            for item in params.get("CloudTags"):
                obj = Tags()
                obj._deserialize(item)
                self._CloudTags.append(obj)
        if params.get("MachineExtraInfo") is not None:
            self._MachineExtraInfo = MachineExtraInfo()
            self._MachineExtraInfo._deserialize(params.get("MachineExtraInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulEffectModuleInfo(AbstractModel):
    """Details of components affected by vulnerabilities

    """

    def __init__(self):
        r"""
        :param _Name: Component name
        :type Name: str
        :param _Uuids: Affected host uuid
        :type Uuids: list of str
        :param _Rule: Affected component version
        :type Rule: str
        :param _Path: Component path
        :type Path: str
        :param _Version: Component version
        :type Version: str
        :param _FixCmd: Fix Command
        :type FixCmd: str
        :param _Quuids: Affected host quuid
        :type Quuids: list of str
        """
        self._Name = None
        self._Uuids = None
        self._Rule = None
        self._Path = None
        self._Version = None
        self._FixCmd = None
        self._Quuids = None

    @property
    def Name(self):
        """Component name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Uuids(self):
        """Affected host uuid
        :rtype: list of str
        """
        return self._Uuids

    @Uuids.setter
    def Uuids(self, Uuids):
        self._Uuids = Uuids

    @property
    def Rule(self):
        """Affected component version
        :rtype: str
        """
        return self._Rule

    @Rule.setter
    def Rule(self, Rule):
        self._Rule = Rule

    @property
    def Path(self):
        """Component path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Version(self):
        """Component version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def FixCmd(self):
        """Fix Command
        :rtype: str
        """
        return self._FixCmd

    @FixCmd.setter
    def FixCmd(self, FixCmd):
        self._FixCmd = FixCmd

    @property
    def Quuids(self):
        """Affected host quuid
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Uuids = params.get("Uuids")
        self._Rule = params.get("Rule")
        self._Path = params.get("Path")
        self._Version = params.get("Version")
        self._FixCmd = params.get("FixCmd")
        self._Quuids = params.get("Quuids")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulEmergentMsgInfo(AbstractModel):
    """Emergency notification entity

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _PublishTime: Vulnerability publish time
        :type PublishTime: str
        :param _Name: Vulnerability name
        :type Name: str
        """
        self._VulId = None
        self._PublishTime = None
        self._Name = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def PublishTime(self):
        """Vulnerability publish time
        :rtype: str
        """
        return self._PublishTime

    @PublishTime.setter
    def PublishTime(self, PublishTime):
        self._PublishTime = PublishTime

    @property
    def Name(self):
        """Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._PublishTime = params.get("PublishTime")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulFixStatusHostInfo(AbstractModel):
    """View the fixing status of each vulnerability on each host.

    """

    def __init__(self):
        r"""
        :param _HostName: Host name
        :type HostName: str
        :param _HostIp: Host IP
        :type HostIp: str
        :param _Quuid: Host QUUID
        :type Quuid: str
        :param _Status: Status. 0: initial status; 1: task issued (fixing); 2: completed (successful); 3: fixing failed (failed); 4: fixing failed due to snapshot creation failure (unfixed).
        :type Status: int
        :param _ModifyTime: Fixing time
        :type ModifyTime: str
        :param _FailReason: Fixing failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailReason: str
        """
        self._HostName = None
        self._HostIp = None
        self._Quuid = None
        self._Status = None
        self._ModifyTime = None
        self._FailReason = None

    @property
    def HostName(self):
        """Host name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Quuid(self):
        """Host QUUID
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Status(self):
        """Status. 0: initial status; 1: task issued (fixing); 2: completed (successful); 3: fixing failed (failed); 4: fixing failed due to snapshot creation failure (unfixed).
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ModifyTime(self):
        """Fixing time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def FailReason(self):
        """Fixing failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FailReason

    @FailReason.setter
    def FailReason(self, FailReason):
        self._FailReason = FailReason


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._Quuid = params.get("Quuid")
        self._Status = params.get("Status")
        self._ModifyTime = params.get("ModifyTime")
        self._FailReason = params.get("FailReason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulFixStatusInfo(AbstractModel):
    """View vulnerability fixing details

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulId: int
        :param _VulName: Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulName: str
        :param _Progress: Vulnerability fixing progress: 1-100;
        :type Progress: int
        :param _HostList: Vulnerability fixing status for corresponding hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostList: list of VulFixStatusHostInfo
        :param _FailCnt: Number of hosts with failed vulnerability fixing
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailCnt: int
        :param _FixSuccessCnt: Number of hosts with successful vulnerability fixing
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixSuccessCnt: int
        :param _FixMethod: 
        :type FixMethod: int
        """
        self._VulId = None
        self._VulName = None
        self._Progress = None
        self._HostList = None
        self._FailCnt = None
        self._FixSuccessCnt = None
        self._FixMethod = None

    @property
    def VulId(self):
        """Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def VulName(self):
        """Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def Progress(self):
        """Vulnerability fixing progress: 1-100;
        :rtype: int
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def HostList(self):
        """Vulnerability fixing status for corresponding hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulFixStatusHostInfo
        """
        return self._HostList

    @HostList.setter
    def HostList(self, HostList):
        self._HostList = HostList

    @property
    def FailCnt(self):
        """Number of hosts with failed vulnerability fixing
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FailCnt

    @FailCnt.setter
    def FailCnt(self, FailCnt):
        self._FailCnt = FailCnt

    @property
    def FixSuccessCnt(self):
        """Number of hosts with successful vulnerability fixing
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FixSuccessCnt

    @FixSuccessCnt.setter
    def FixSuccessCnt(self, FixSuccessCnt):
        self._FixSuccessCnt = FixSuccessCnt

    @property
    def FixMethod(self):
        """
        :rtype: int
        """
        return self._FixMethod

    @FixMethod.setter
    def FixMethod(self, FixMethod):
        self._FixMethod = FixMethod


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._VulName = params.get("VulName")
        self._Progress = params.get("Progress")
        if params.get("HostList") is not None:
            self._HostList = []
            for item in params.get("HostList"):
                obj = VulFixStatusHostInfo()
                obj._deserialize(item)
                self._HostList.append(obj)
        self._FailCnt = params.get("FailCnt")
        self._FixSuccessCnt = params.get("FixSuccessCnt")
        self._FixMethod = params.get("FixMethod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulFixStatusSnapshotInfo(AbstractModel):
    """Machine snapshot information

    """

    def __init__(self):
        r"""
        :param _Quuid: cvm id
        :type Quuid: str
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostIp: Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _SnapshotName: Snapshot name
Note: This field may return null, indicating that no valid values can be obtained.
        :type SnapshotName: str
        :param _ModifyTime: Snapshot creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _SnapshotId: Snapshot ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type SnapshotId: str
        :param _Id: Unique record ID
        :type Id: int
        :param _Status: Snapshot status. 0: initial; 1: created successfully; 2: creation failed.
        :type Status: int
        :param _FailReason: Snapshot creation failure reason
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailReason: str
        """
        self._Quuid = None
        self._HostName = None
        self._HostIp = None
        self._SnapshotName = None
        self._ModifyTime = None
        self._SnapshotId = None
        self._Id = None
        self._Status = None
        self._FailReason = None

    @property
    def Quuid(self):
        """cvm id
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def SnapshotName(self):
        """Snapshot name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SnapshotName

    @SnapshotName.setter
    def SnapshotName(self, SnapshotName):
        self._SnapshotName = SnapshotName

    @property
    def ModifyTime(self):
        """Snapshot creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def SnapshotId(self):
        """Snapshot ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SnapshotId

    @SnapshotId.setter
    def SnapshotId(self, SnapshotId):
        self._SnapshotId = SnapshotId

    @property
    def Id(self):
        """Unique record ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Status(self):
        """Snapshot status. 0: initial; 1: created successfully; 2: creation failed.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def FailReason(self):
        """Snapshot creation failure reason
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FailReason

    @FailReason.setter
    def FailReason(self, FailReason):
        self._FailReason = FailReason


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._SnapshotName = params.get("SnapshotName")
        self._ModifyTime = params.get("ModifyTime")
        self._SnapshotId = params.get("SnapshotId")
        self._Id = params.get("Id")
        self._Status = params.get("Status")
        self._FailReason = params.get("FailReason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulHostTopInfo(AbstractModel):
    """Top 5 server risk entities

    """

    def __init__(self):
        r"""
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _VulLevelList: Vulnerability level and quantity statistics list
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulLevelList: list of VulLevelCountInfo
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _Score: Top ratings
Note: This field may return null, indicating that no valid values can be obtained.
        :type Score: int
        """
        self._HostName = None
        self._VulLevelList = None
        self._Quuid = None
        self._Score = None

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def VulLevelList(self):
        """Vulnerability level and quantity statistics list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of VulLevelCountInfo
        """
        return self._VulLevelList

    @VulLevelList.setter
    def VulLevelList(self, VulLevelList):
        self._VulLevelList = VulLevelList

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Score(self):
        """Top ratings
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        if params.get("VulLevelList") is not None:
            self._VulLevelList = []
            for item in params.get("VulLevelList"):
                obj = VulLevelCountInfo()
                obj._deserialize(item)
                self._VulLevelList.append(obj)
        self._Quuid = params.get("Quuid")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulInfoByCveId(AbstractModel):
    """Query vulnerability details by cve_id

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _FixSwitch: Repair Support Status. 0-Neither Windows nor Linux supports for repair; 1-Both Windows and Linux support for repair; 2-Only Linux supports for repair; 3-Only Windows supports for repair.
        :type FixSwitch: int
        """
        self._VulId = None
        self._FixSwitch = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def FixSwitch(self):
        """Repair Support Status. 0-Neither Windows nor Linux supports for repair; 1-Both Windows and Linux support for repair; 2-Only Linux supports for repair; 3-Only Windows supports for repair.
        :rtype: int
        """
        return self._FixSwitch

    @FixSwitch.setter
    def FixSwitch(self, FixSwitch):
        self._FixSwitch = FixSwitch


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._FixSwitch = params.get("FixSwitch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulInfoHostInfo(AbstractModel):
    """Fix vulnerability second popup in batch

    """

    def __init__(self):
        r"""
        :param _HostName: Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostIp: Host IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIp: str
        :param _Tags: Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _Quuid: Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuid: str
        :param _IsSupportAutoFix: 0 - the vulnerability cannot be fixed automatically; 1 - the vulnerability can be fixed automatically; 2 - the client has been offline; 3 - the host is not the ultimate edition and can only be fixed manually; 4 - the model does not allow automatic fix; 5 - fixing; 6 - fixed; 7 - under detection; 9 - fix failed; 10 - ignored; 11 - the vulnerability is supported only on Linux, not on Windows; 12 - the vulnerability is supported only on Windows, not on Linux.
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSupportAutoFix: int
        :param _Uuid: Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :type Uuid: str
        :param _InstanceId: Host InstanceId
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        """
        self._HostName = None
        self._HostIp = None
        self._Tags = None
        self._Quuid = None
        self._IsSupportAutoFix = None
        self._Uuid = None
        self._InstanceId = None

    @property
    def HostName(self):
        """Host name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        """Host IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Tags(self):
        """Host tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Quuid(self):
        """Host QUUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def IsSupportAutoFix(self):
        """0 - the vulnerability cannot be fixed automatically; 1 - the vulnerability can be fixed automatically; 2 - the client has been offline; 3 - the host is not the ultimate edition and can only be fixed manually; 4 - the model does not allow automatic fix; 5 - fixing; 6 - fixed; 7 - under detection; 9 - fix failed; 10 - ignored; 11 - the vulnerability is supported only on Linux, not on Windows; 12 - the vulnerability is supported only on Windows, not on Linux.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsSupportAutoFix

    @IsSupportAutoFix.setter
    def IsSupportAutoFix(self, IsSupportAutoFix):
        self._IsSupportAutoFix = IsSupportAutoFix

    @property
    def Uuid(self):
        """Host UUID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def InstanceId(self):
        """Host InstanceId
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._Tags = params.get("Tags")
        self._Quuid = params.get("Quuid")
        self._IsSupportAutoFix = params.get("IsSupportAutoFix")
        self._Uuid = params.get("Uuid")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulInfoList(AbstractModel):
    """Vulnerability list on the vulnerability management page of CWPP

    """

    def __init__(self):
        r"""
        :param _Ids: IDs of events corresponding to a vulnerability, separated by commas (,)
        :type Ids: str
        :param _Name: Vulnerability name
        :type Name: str
        :param _Status: 0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 8: fixing failed
        :type Status: int
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _PublishTime: Vulnerability disclosure time
        :type PublishTime: str
        :param _LastTime: Last detection time
        :type LastTime: str
        :param _HostCount: Number of affected hosts
        :type HostCount: int
        :param _Level: Vulnerability level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :type Level: int
        :param _From: This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type From: int
        :param _Descript: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Descript: str
        :param _PublishTimeWisteria: This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublishTimeWisteria: str
        :param _NameWisteria: This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type NameWisteria: str
        :param _DescriptWisteria: This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DescriptWisteria: str
        :param _StatusStr: Event status after aggregation
Note: This field may return null, indicating that no valid values can be obtained.
        :type StatusStr: str
        :param _CveId: CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveId: str
        :param _CvssScore: CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssScore: float
        :param _Labels: Vulnerability tags, separated by multiple commas
Note: This field may return null, indicating that no valid values can be obtained.
        :type Labels: str
        :param _FixSwitch: Whether automatic fixing is supported and hosts that support automatic fixing are included. 0: no; 1: yes.Note: This field may return null, indicating that no valid values can be obtained.
        :type FixSwitch: int
        :param _TaskId: ID of the last scan task
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _IsSupportDefense: Whether defense is supported. 0: not supported; 1: supported.Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSupportDefense: int
        :param _DefenseAttackCount: Number of attacks defended
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenseAttackCount: int
        :param _FirstAppearTime: First occurrence time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstAppearTime: str
        :param _VulCategory: Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability.Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCategory: int
        :param _AttackLevel: Attack intensity
Note: This field may return null, indicating that no valid values can be obtained.
        :type AttackLevel: int
        :param _FixNoNeedRestart: Whether a restart is required after the vulnerability is fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixNoNeedRestart: bool
        :param _Method: Detection method. 0: version comparison; 1: POC verification.Note: This field may return null, indicating that no valid values can be obtained.
        :type Method: int
        """
        self._Ids = None
        self._Name = None
        self._Status = None
        self._VulId = None
        self._PublishTime = None
        self._LastTime = None
        self._HostCount = None
        self._Level = None
        self._From = None
        self._Descript = None
        self._PublishTimeWisteria = None
        self._NameWisteria = None
        self._DescriptWisteria = None
        self._StatusStr = None
        self._CveId = None
        self._CvssScore = None
        self._Labels = None
        self._FixSwitch = None
        self._TaskId = None
        self._IsSupportDefense = None
        self._DefenseAttackCount = None
        self._FirstAppearTime = None
        self._VulCategory = None
        self._AttackLevel = None
        self._FixNoNeedRestart = None
        self._Method = None

    @property
    def Ids(self):
        """IDs of events corresponding to a vulnerability, separated by commas (,)
        :rtype: str
        """
        return self._Ids

    @Ids.setter
    def Ids(self, Ids):
        self._Ids = Ids

    @property
    def Name(self):
        """Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Status(self):
        """0: pending; 1: ignored; 3: fixed; 5: detecting; 6: fixing; 8: fixing failed
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def PublishTime(self):
        """Vulnerability disclosure time
        :rtype: str
        """
        return self._PublishTime

    @PublishTime.setter
    def PublishTime(self, PublishTime):
        self._PublishTime = PublishTime

    @property
    def LastTime(self):
        """Last detection time
        :rtype: str
        """
        return self._LastTime

    @LastTime.setter
    def LastTime(self, LastTime):
        self._LastTime = LastTime

    @property
    def HostCount(self):
        """Number of affected hosts
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def Level(self):
        """Vulnerability level. 1: low-risk; 2: medium-risk; 3: high-risk; 4: critical.
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def From(self):
        """This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._From

    @From.setter
    def From(self, From):
        self._From = From

    @property
    def Descript(self):
        """Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Descript

    @Descript.setter
    def Descript(self, Descript):
        self._Descript = Descript

    @property
    def PublishTimeWisteria(self):
        """This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublishTimeWisteria

    @PublishTimeWisteria.setter
    def PublishTimeWisteria(self, PublishTimeWisteria):
        self._PublishTimeWisteria = PublishTimeWisteria

    @property
    def NameWisteria(self):
        """This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NameWisteria

    @NameWisteria.setter
    def NameWisteria(self, NameWisteria):
        self._NameWisteria = NameWisteria

    @property
    def DescriptWisteria(self):
        """This field has been deprecated.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DescriptWisteria

    @DescriptWisteria.setter
    def DescriptWisteria(self, DescriptWisteria):
        self._DescriptWisteria = DescriptWisteria

    @property
    def StatusStr(self):
        """Event status after aggregation
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StatusStr

    @StatusStr.setter
    def StatusStr(self, StatusStr):
        self._StatusStr = StatusStr

    @property
    def CveId(self):
        """CVE ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def CvssScore(self):
        """CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def Labels(self):
        """Vulnerability tags, separated by multiple commas
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def FixSwitch(self):
        """Whether automatic fixing is supported and hosts that support automatic fixing are included. 0: no; 1: yes.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FixSwitch

    @FixSwitch.setter
    def FixSwitch(self, FixSwitch):
        self._FixSwitch = FixSwitch

    @property
    def TaskId(self):
        """ID of the last scan task
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def IsSupportDefense(self):
        """Whether defense is supported. 0: not supported; 1: supported.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsSupportDefense

    @IsSupportDefense.setter
    def IsSupportDefense(self, IsSupportDefense):
        self._IsSupportDefense = IsSupportDefense

    @property
    def DefenseAttackCount(self):
        """Number of attacks defended
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenseAttackCount

    @DefenseAttackCount.setter
    def DefenseAttackCount(self, DefenseAttackCount):
        self._DefenseAttackCount = DefenseAttackCount

    @property
    def FirstAppearTime(self):
        """First occurrence time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstAppearTime

    @FirstAppearTime.setter
    def FirstAppearTime(self, FirstAppearTime):
        self._FirstAppearTime = FirstAppearTime

    @property
    def VulCategory(self):
        """Vulnerability category. 1: web CMS vulnerability; 2: application vulnerability; 4: Linux software vulnerability; 5: Windows system vulnerability.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def AttackLevel(self):
        """Attack intensity
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AttackLevel

    @AttackLevel.setter
    def AttackLevel(self, AttackLevel):
        self._AttackLevel = AttackLevel

    @property
    def FixNoNeedRestart(self):
        """Whether a restart is required after the vulnerability is fixed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._FixNoNeedRestart

    @FixNoNeedRestart.setter
    def FixNoNeedRestart(self, FixNoNeedRestart):
        self._FixNoNeedRestart = FixNoNeedRestart

    @property
    def Method(self):
        """Detection method. 0: version comparison; 1: POC verification.Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Method

    @Method.setter
    def Method(self, Method):
        self._Method = Method


    def _deserialize(self, params):
        self._Ids = params.get("Ids")
        self._Name = params.get("Name")
        self._Status = params.get("Status")
        self._VulId = params.get("VulId")
        self._PublishTime = params.get("PublishTime")
        self._LastTime = params.get("LastTime")
        self._HostCount = params.get("HostCount")
        self._Level = params.get("Level")
        self._From = params.get("From")
        self._Descript = params.get("Descript")
        self._PublishTimeWisteria = params.get("PublishTimeWisteria")
        self._NameWisteria = params.get("NameWisteria")
        self._DescriptWisteria = params.get("DescriptWisteria")
        self._StatusStr = params.get("StatusStr")
        self._CveId = params.get("CveId")
        self._CvssScore = params.get("CvssScore")
        self._Labels = params.get("Labels")
        self._FixSwitch = params.get("FixSwitch")
        self._TaskId = params.get("TaskId")
        self._IsSupportDefense = params.get("IsSupportDefense")
        self._DefenseAttackCount = params.get("DefenseAttackCount")
        self._FirstAppearTime = params.get("FirstAppearTime")
        self._VulCategory = params.get("VulCategory")
        self._AttackLevel = params.get("AttackLevel")
        self._FixNoNeedRestart = params.get("FixNoNeedRestart")
        self._Method = params.get("Method")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulLevelCountInfo(AbstractModel):
    """Number of vulnerability levels

    """

    def __init__(self):
        r"""
        :param _VulLevel: Vulnerability level
        :type VulLevel: int
        :param _VulCount: Number of vulnerabilities
        :type VulCount: int
        """
        self._VulLevel = None
        self._VulCount = None

    @property
    def VulLevel(self):
        """Vulnerability level
        :rtype: int
        """
        return self._VulLevel

    @VulLevel.setter
    def VulLevel(self, VulLevel):
        self._VulLevel = VulLevel

    @property
    def VulCount(self):
        """Number of vulnerabilities
        :rtype: int
        """
        return self._VulCount

    @VulCount.setter
    def VulCount(self, VulCount):
        self._VulCount = VulCount


    def _deserialize(self, params):
        self._VulLevel = params.get("VulLevel")
        self._VulCount = params.get("VulCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulLevelInfo(AbstractModel):
    """The statistical entity representing the distribution of vulnerabilities by severity level

    """

    def __init__(self):
        r"""
        :param _VulLevel: // Severity level: 1 - low-risk; 2 - medium-risk; 3 - high-risk; 4 - critical
        :type VulLevel: int
        :param _Count: Quantity
        :type Count: int
        """
        self._VulLevel = None
        self._Count = None

    @property
    def VulLevel(self):
        """// Severity level: 1 - low-risk; 2 - medium-risk; 3 - high-risk; 4 - critical
        :rtype: int
        """
        return self._VulLevel

    @VulLevel.setter
    def VulLevel(self, VulLevel):
        self._VulLevel = VulLevel

    @property
    def Count(self):
        """Quantity
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._VulLevel = params.get("VulLevel")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulOverview(AbstractModel):
    """Vulnerability overview

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _TodayCount: Number of new key-value pairs today
        :type TodayCount: int
        """
        self._TotalCount = None
        self._TodayCount = None

    @property
    def TotalCount(self):
        """Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TodayCount(self):
        """Number of new key-value pairs today
        :rtype: int
        """
        return self._TodayCount

    @TodayCount.setter
    def TodayCount(self, TodayCount):
        self._TodayCount = TodayCount


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._TodayCount = params.get("TodayCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulStoreListInfo(AbstractModel):
    """Information on the vulnerability database list

    """

    def __init__(self):
        r"""
        :param _VulId: Vulnerability ID
        :type VulId: int
        :param _Level: Vulnerability level
        :type Level: int
        :param _Name: Vulnerability name
        :type Name: str
        :param _CveId: CVE ID
        :type CveId: str
        :param _VulCategory: 1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 0: emergency vulnerabilities.
        :type VulCategory: int
        :param _PublishDate: Release time
        :type PublishDate: str
        :param _Method: Vulnerability Detection Method: 0 - Version Comparison, 1 - POC Verification
        :type Method: int
        :param _AttackLevel: Vulnerability attack level
        :type AttackLevel: int
        :param _FixSwitch: Whether automatic vulnerability fixing is supported
0: not supported on Windows/Linux; 1: supported on Windows/Linux; 2: supported on Linux only; 3: supported on Windows only.
        :type FixSwitch: int
        :param _SupportDefense: Whether defense against vulnerabilities is supported
0: not supported; 1: supported.
        :type SupportDefense: int
        """
        self._VulId = None
        self._Level = None
        self._Name = None
        self._CveId = None
        self._VulCategory = None
        self._PublishDate = None
        self._Method = None
        self._AttackLevel = None
        self._FixSwitch = None
        self._SupportDefense = None

    @property
    def VulId(self):
        """Vulnerability ID
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId

    @property
    def Level(self):
        """Vulnerability level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Name(self):
        """Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CveId(self):
        """CVE ID
        :rtype: str
        """
        return self._CveId

    @CveId.setter
    def CveId(self, CveId):
        self._CveId = CveId

    @property
    def VulCategory(self):
        """1: web-cms vulnerabilities; 2: application vulnerabilities; 4: Linux software vulnerabilities; 5: Windows system vulnerabilities; 0: emergency vulnerabilities.
        :rtype: int
        """
        return self._VulCategory

    @VulCategory.setter
    def VulCategory(self, VulCategory):
        self._VulCategory = VulCategory

    @property
    def PublishDate(self):
        """Release time
        :rtype: str
        """
        return self._PublishDate

    @PublishDate.setter
    def PublishDate(self, PublishDate):
        self._PublishDate = PublishDate

    @property
    def Method(self):
        """Vulnerability Detection Method: 0 - Version Comparison, 1 - POC Verification
        :rtype: int
        """
        return self._Method

    @Method.setter
    def Method(self, Method):
        self._Method = Method

    @property
    def AttackLevel(self):
        """Vulnerability attack level
        :rtype: int
        """
        return self._AttackLevel

    @AttackLevel.setter
    def AttackLevel(self, AttackLevel):
        self._AttackLevel = AttackLevel

    @property
    def FixSwitch(self):
        """Whether automatic vulnerability fixing is supported
0: not supported on Windows/Linux; 1: supported on Windows/Linux; 2: supported on Linux only; 3: supported on Windows only.
        :rtype: int
        """
        return self._FixSwitch

    @FixSwitch.setter
    def FixSwitch(self, FixSwitch):
        self._FixSwitch = FixSwitch

    @property
    def SupportDefense(self):
        """Whether defense against vulnerabilities is supported
0: not supported; 1: supported.
        :rtype: int
        """
        return self._SupportDefense

    @SupportDefense.setter
    def SupportDefense(self, SupportDefense):
        self._SupportDefense = SupportDefense


    def _deserialize(self, params):
        self._VulId = params.get("VulId")
        self._Level = params.get("Level")
        self._Name = params.get("Name")
        self._CveId = params.get("CveId")
        self._VulCategory = params.get("VulCategory")
        self._PublishDate = params.get("PublishDate")
        self._Method = params.get("Method")
        self._AttackLevel = params.get("AttackLevel")
        self._FixSwitch = params.get("FixSwitch")
        self._SupportDefense = params.get("SupportDefense")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulTopInfo(AbstractModel):
    """The statistical entity representing top vulnerabilities

    """

    def __init__(self):
        r"""
        :param _VulName: Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulName: str
        :param _VulLevel: Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulLevel: int
        :param _VulCount: Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCount: int
        :param _VulId: Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulId: int
        """
        self._VulName = None
        self._VulLevel = None
        self._VulCount = None
        self._VulId = None

    @property
    def VulName(self):
        """Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def VulLevel(self):
        """Hazard level: 1-Low-risk; 2-Medium-risk; 3-High-risk; 4-Critical
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulLevel

    @VulLevel.setter
    def VulLevel(self, VulLevel):
        self._VulLevel = VulLevel

    @property
    def VulCount(self):
        """Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCount

    @VulCount.setter
    def VulCount(self, VulCount):
        self._VulCount = VulCount

    @property
    def VulId(self):
        """Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulId

    @VulId.setter
    def VulId(self, VulId):
        self._VulId = VulId


    def _deserialize(self, params):
        self._VulName = params.get("VulName")
        self._VulLevel = params.get("VulLevel")
        self._VulCount = params.get("VulCount")
        self._VulId = params.get("VulId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WarningInfoObj(AbstractModel):
    """List of alarm settings

    """

    def __init__(self):
        r"""
        :param _Type: Event alarm type. 1: offline; 2: Trojan; 3: abnormal log-in; 4: brute force cracking; 5: vulnerability (including types of values 9, 10, 11, and 12); 6: high-risk command; 7: reverse shell; 8: local privilege escalation; 9: application vulnerability; 10: web CMS vulnerability; 11: emergency vulnerability; 12: security baseline; 13: tampering prevention; 14: malicious request; 15: network attack; 16: Windows system vulnerability; 17: Linux software vulnerability; 18: core file monitoring; 19: client uninstallation; 20: client offline.
        :type Type: int
        :param _DisablePhoneWarning: 1: disable alarm; 0: enable alarm
        :type DisablePhoneWarning: int
        :param _BeginTime: Start time. Format: HH:mm.
        :type BeginTime: str
        :param _EndTime: End time. Format: HH:mm.
        :type EndTime: str
        :param _TimeZone: Time zone information
        :type TimeZone: str
        :param _ControlBit: Vulnerability level control bit (corresponding to the decimal storage in the database)
        :type ControlBit: int
        :param _ControlBits: Vulnerability level control bits in binary. Each bit indicates the enabling status of the corresponding vulnerability level on the page: low, medium, and high (0: disabled; 1: enabled). For example, 101 indicates that both low and high levels are enabled.
        :type ControlBits: str
        :param _HostRange: Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostRange: int
        :param _Count: Configured Number of Hosts in the Range of Alarm, used by the frontend to decide when to display prompt information.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Count: int
        """
        self._Type = None
        self._DisablePhoneWarning = None
        self._BeginTime = None
        self._EndTime = None
        self._TimeZone = None
        self._ControlBit = None
        self._ControlBits = None
        self._HostRange = None
        self._Count = None

    @property
    def Type(self):
        """Event alarm type. 1: offline; 2: Trojan; 3: abnormal log-in; 4: brute force cracking; 5: vulnerability (including types of values 9, 10, 11, and 12); 6: high-risk command; 7: reverse shell; 8: local privilege escalation; 9: application vulnerability; 10: web CMS vulnerability; 11: emergency vulnerability; 12: security baseline; 13: tampering prevention; 14: malicious request; 15: network attack; 16: Windows system vulnerability; 17: Linux software vulnerability; 18: core file monitoring; 19: client uninstallation; 20: client offline.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def DisablePhoneWarning(self):
        """1: disable alarm; 0: enable alarm
        :rtype: int
        """
        return self._DisablePhoneWarning

    @DisablePhoneWarning.setter
    def DisablePhoneWarning(self, DisablePhoneWarning):
        self._DisablePhoneWarning = DisablePhoneWarning

    @property
    def BeginTime(self):
        """Start time. Format: HH:mm.
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def EndTime(self):
        """End time. Format: HH:mm.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def TimeZone(self):
        """Time zone information
        :rtype: str
        """
        return self._TimeZone

    @TimeZone.setter
    def TimeZone(self, TimeZone):
        self._TimeZone = TimeZone

    @property
    def ControlBit(self):
        """Vulnerability level control bit (corresponding to the decimal storage in the database)
        :rtype: int
        """
        return self._ControlBit

    @ControlBit.setter
    def ControlBit(self, ControlBit):
        self._ControlBit = ControlBit

    @property
    def ControlBits(self):
        """Vulnerability level control bits in binary. Each bit indicates the enabling status of the corresponding vulnerability level on the page: low, medium, and high (0: disabled; 1: enabled). For example, 101 indicates that both low and high levels are enabled.
        :rtype: str
        """
        return self._ControlBits

    @ControlBits.setter
    def ControlBits(self, ControlBits):
        self._ControlBits = ControlBits

    @property
    def HostRange(self):
        """Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostRange

    @HostRange.setter
    def HostRange(self, HostRange):
        self._HostRange = HostRange

    @property
    def Count(self):
        """Configured Number of Hosts in the Range of Alarm, used by the frontend to decide when to display prompt information.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._DisablePhoneWarning = params.get("DisablePhoneWarning")
        self._BeginTime = params.get("BeginTime")
        self._EndTime = params.get("EndTime")
        self._TimeZone = params.get("TimeZone")
        self._ControlBit = params.get("ControlBit")
        self._ControlBits = params.get("ControlBits")
        self._HostRange = params.get("HostRange")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WarningObject(AbstractModel):
    """Parameters used to update alarms or inserted into alarms

    """

    def __init__(self):
        r"""
        :param _Type: Event Alarm Type. 1: Offline; 2: Trojan; 3: Exceptional login; 4: Brute force; 5: Vulnerability (split into four types ranging from 9 to 12); 6: High-risk command; 7: Reverse sell; 8: Local privilege escalation;, 9: System component vulnerabilities; 10: Web application vulnerabilities; 11: Emergency vulnerabilities; 12: Security baseline; 14: Malicious request; 15: Network attack; 16: Windows system vulnerabilities; 17: Linux software vulnerabilities
        :type Type: int
        :param _DisablePhoneWarning: 1: disable alarm; 0: enable alarm.
        :type DisablePhoneWarning: int
        :param _BeginTime: Start time. Format: HH:mm.
        :type BeginTime: str
        :param _EndTime: End time. Format: HH:mm.
        :type EndTime: str
        :param _ControlBits: 1. Vulnerability level control bits in binary. Each bit corresponds to the vulnerability level enabling status on the corresponding page. Level: low, medium, high (0: disabled; 1: enabled). Example: 101, indicating both the low and high levels are enabled. 2. Brute force cracking control bits in binary. 01: notify upon successful brute force cracking; 10: notify upon brute force cracking failure.
        :type ControlBits: str
        :param _HostRange: Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :type HostRange: int
        """
        self._Type = None
        self._DisablePhoneWarning = None
        self._BeginTime = None
        self._EndTime = None
        self._ControlBits = None
        self._HostRange = None

    @property
    def Type(self):
        """Event Alarm Type. 1: Offline; 2: Trojan; 3: Exceptional login; 4: Brute force; 5: Vulnerability (split into four types ranging from 9 to 12); 6: High-risk command; 7: Reverse sell; 8: Local privilege escalation;, 9: System component vulnerabilities; 10: Web application vulnerabilities; 11: Emergency vulnerabilities; 12: Security baseline; 14: Malicious request; 15: Network attack; 16: Windows system vulnerabilities; 17: Linux software vulnerabilities
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def DisablePhoneWarning(self):
        """1: disable alarm; 0: enable alarm.
        :rtype: int
        """
        return self._DisablePhoneWarning

    @DisablePhoneWarning.setter
    def DisablePhoneWarning(self, DisablePhoneWarning):
        self._DisablePhoneWarning = DisablePhoneWarning

    @property
    def BeginTime(self):
        """Start time. Format: HH:mm.
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def EndTime(self):
        """End time. Format: HH:mm.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ControlBits(self):
        """1. Vulnerability level control bits in binary. Each bit corresponds to the vulnerability level enabling status on the corresponding page. Level: low, medium, high (0: disabled; 1: enabled). Example: 101, indicating both the low and high levels are enabled. 2. Brute force cracking control bits in binary. 01: notify upon successful brute force cracking; 10: notify upon brute force cracking failure.
        :rtype: str
        """
        return self._ControlBits

    @ControlBits.setter
    def ControlBits(self, ControlBits):
        self._ControlBits = ControlBits

    @property
    def HostRange(self):
        """Alarm Host Range Type. 0: All Hosts; 1: By Project; 2: By Tencent Cloud Tag; 3: By Host Security Tag; 4: Custom Hosts
        :rtype: int
        """
        return self._HostRange

    @HostRange.setter
    def HostRange(self, HostRange):
        self._HostRange = HostRange


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._DisablePhoneWarning = params.get("DisablePhoneWarning")
        self._BeginTime = params.get("BeginTime")
        self._EndTime = params.get("EndTime")
        self._ControlBits = params.get("ControlBits")
        self._HostRange = params.get("HostRange")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookCustomField(AbstractModel):
    """Custom passthrough field structure

    """

    def __init__(self):
        r"""
        :param _Key: key
Note: This field may return null, indicating that no valid values can be obtained.
        :type Key: str
        :param _Value: value
Note: This field may return null, indicating that no valid values can be obtained.
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """key
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """value
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookEventKv(AbstractModel):
    """Enterprise WeChat Robot Event Types

    """

    def __init__(self):
        r"""
        :param _Type: Event type
        :type Type: int
        :param _ControlBit: Event content
        :type ControlBit: str
        """
        self._Type = None
        self._ControlBit = None

    @property
    def Type(self):
        """Event type
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ControlBit(self):
        """Event content
        :rtype: str
        """
        return self._ControlBit

    @ControlBit.setter
    def ControlBit(self, ControlBit):
        self._ControlBit = ControlBit


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._ControlBit = params.get("ControlBit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookHostLabel(AbstractModel):
    """Enterprise WeChat Robot Host Range

    """

    def __init__(self):
        r"""
        :param _Type: Host Range [1: Project |2: Tencent Cloud Tag | 3: Host Security Tag | 4: Optional] Empty array means all.
        :type Type: int
        :param _Values: Host Project or Tag Content
        :type Values: list of str
        """
        self._Type = None
        self._Values = None

    @property
    def Type(self):
        """Host Range [1: Project |2: Tencent Cloud Tag | 3: Host Security Tag | 4: Optional] Empty array means all.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Values(self):
        """Host Project or Tag Content
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookPolicy(AbstractModel):
    """Policy

    """

    def __init__(self):
        r"""
        :param _Id: id
Note: This field may return null, indicating that no valid values can be obtained.
        :type Id: int
        :param _Name: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Events: Event type
Note: This field may return null, indicating that no valid values can be obtained.
        :type Events: list of WebHookEventKv
        :param _HostLabels: Host range
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostLabels: list of WebHookHostLabel
        :param _Receivers: Recipient
Note: This field may return null, indicating that no valid values can be obtained.
        :type Receivers: list of WebHookReceiver
        :param _Format: Format. 0: text; 1: JSON.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Format: int
        :param _CustomFields: Custom passthrough field
Note: This field may return null, indicating that no valid values can be obtained.
        :type CustomFields: list of WebHookCustomField
        :param _IsDisabled: Enable/Disable [1-Disable, 0-Enable]
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsDisabled: int
        :param _Quuids: Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :type Quuids: list of str
        :param _HostCount: Number of hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        """
        self._Id = None
        self._Name = None
        self._Events = None
        self._HostLabels = None
        self._Receivers = None
        self._Format = None
        self._CustomFields = None
        self._IsDisabled = None
        self._Quuids = None
        self._HostCount = None

    @property
    def Id(self):
        """id
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Events(self):
        """Event type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of WebHookEventKv
        """
        return self._Events

    @Events.setter
    def Events(self, Events):
        self._Events = Events

    @property
    def HostLabels(self):
        """Host range
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of WebHookHostLabel
        """
        return self._HostLabels

    @HostLabels.setter
    def HostLabels(self, HostLabels):
        self._HostLabels = HostLabels

    @property
    def Receivers(self):
        """Recipient
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of WebHookReceiver
        """
        return self._Receivers

    @Receivers.setter
    def Receivers(self, Receivers):
        self._Receivers = Receivers

    @property
    def Format(self):
        """Format. 0: text; 1: JSON.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Format

    @Format.setter
    def Format(self, Format):
        self._Format = Format

    @property
    def CustomFields(self):
        """Custom passthrough field
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of WebHookCustomField
        """
        return self._CustomFields

    @CustomFields.setter
    def CustomFields(self, CustomFields):
        self._CustomFields = CustomFields

    @property
    def IsDisabled(self):
        """Enable/Disable [1-Disable, 0-Enable]
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled

    @property
    def Quuids(self):
        """Host list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Quuids

    @Quuids.setter
    def Quuids(self, Quuids):
        self._Quuids = Quuids

    @property
    def HostCount(self):
        """Number of hosts
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        if params.get("Events") is not None:
            self._Events = []
            for item in params.get("Events"):
                obj = WebHookEventKv()
                obj._deserialize(item)
                self._Events.append(obj)
        if params.get("HostLabels") is not None:
            self._HostLabels = []
            for item in params.get("HostLabels"):
                obj = WebHookHostLabel()
                obj._deserialize(item)
                self._HostLabels.append(obj)
        if params.get("Receivers") is not None:
            self._Receivers = []
            for item in params.get("Receivers"):
                obj = WebHookReceiver()
                obj._deserialize(item)
                self._Receivers.append(obj)
        self._Format = params.get("Format")
        if params.get("CustomFields") is not None:
            self._CustomFields = []
            for item in params.get("CustomFields"):
                obj = WebHookCustomField()
                obj._deserialize(item)
                self._CustomFields.append(obj)
        self._IsDisabled = params.get("IsDisabled")
        self._Quuids = params.get("Quuids")
        self._HostCount = params.get("HostCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookReceiver(AbstractModel):
    """Alarm recipient

    """

    def __init__(self):
        r"""
        :param _Id: id
Note: This field may return null, indicating that no valid values can be obtained.
        :type Id: int
        :param _Name: Recipient name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Addr: Webhook URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type Addr: str
        """
        self._Id = None
        self._Name = None
        self._Addr = None

    @property
    def Id(self):
        """id
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """Recipient name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Addr(self):
        """Webhook URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Addr

    @Addr.setter
    def Addr(self, Addr):
        self._Addr = Addr


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Addr = params.get("Addr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookReceiverUsage(AbstractModel):
    """Usage information on associated policies of the alarm recipient

    """

    def __init__(self):
        r"""
        :param _ReceiverId: Recipient ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReceiverId: int
        :param _ReceiverName: Recipient name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReceiverName: str
        :param _PolicyName: Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :type PolicyName: str
        """
        self._ReceiverId = None
        self._ReceiverName = None
        self._PolicyName = None

    @property
    def ReceiverId(self):
        """Recipient ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ReceiverId

    @ReceiverId.setter
    def ReceiverId(self, ReceiverId):
        self._ReceiverId = ReceiverId

    @property
    def ReceiverName(self):
        """Recipient name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ReceiverName

    @ReceiverName.setter
    def ReceiverName(self, ReceiverName):
        self._ReceiverName = ReceiverName

    @property
    def PolicyName(self):
        """Policy name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName


    def _deserialize(self, params):
        self._ReceiverId = params.get("ReceiverId")
        self._ReceiverName = params.get("ReceiverName")
        self._PolicyName = params.get("PolicyName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookRuleDetail(AbstractModel):
    """Enterprise WeChat Robot Rule Details

    """

    def __init__(self):
        r"""
        :param _RuleName: Rule name
        :type RuleName: str
        :param _HookAddr: Chatbot address
        :type HookAddr: str
        :param _RuleItems: Event type
        :type RuleItems: list of WebHookEventKv
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleRemark: Remarks
        :type RuleRemark: str
        :param _HostLabels: Host scope
        :type HostLabels: list of WebHookHostLabel
        :param _HostIds: Host ID List
        :type HostIds: list of str
        :param _IsDisabled: Whether it is disabled [1: disabled|0: enabled]
        :type IsDisabled: int
        """
        self._RuleName = None
        self._HookAddr = None
        self._RuleItems = None
        self._RuleId = None
        self._RuleRemark = None
        self._HostLabels = None
        self._HostIds = None
        self._IsDisabled = None

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def HookAddr(self):
        """Chatbot address
        :rtype: str
        """
        return self._HookAddr

    @HookAddr.setter
    def HookAddr(self, HookAddr):
        self._HookAddr = HookAddr

    @property
    def RuleItems(self):
        """Event type
        :rtype: list of WebHookEventKv
        """
        return self._RuleItems

    @RuleItems.setter
    def RuleItems(self, RuleItems):
        self._RuleItems = RuleItems

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleRemark(self):
        """Remarks
        :rtype: str
        """
        return self._RuleRemark

    @RuleRemark.setter
    def RuleRemark(self, RuleRemark):
        self._RuleRemark = RuleRemark

    @property
    def HostLabels(self):
        """Host scope
        :rtype: list of WebHookHostLabel
        """
        return self._HostLabels

    @HostLabels.setter
    def HostLabels(self, HostLabels):
        self._HostLabels = HostLabels

    @property
    def HostIds(self):
        """Host ID List
        :rtype: list of str
        """
        return self._HostIds

    @HostIds.setter
    def HostIds(self, HostIds):
        self._HostIds = HostIds

    @property
    def IsDisabled(self):
        """Whether it is disabled [1: disabled|0: enabled]
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        self._HookAddr = params.get("HookAddr")
        if params.get("RuleItems") is not None:
            self._RuleItems = []
            for item in params.get("RuleItems"):
                obj = WebHookEventKv()
                obj._deserialize(item)
                self._RuleItems.append(obj)
        self._RuleId = params.get("RuleId")
        self._RuleRemark = params.get("RuleRemark")
        if params.get("HostLabels") is not None:
            self._HostLabels = []
            for item in params.get("HostLabels"):
                obj = WebHookHostLabel()
                obj._deserialize(item)
                self._HostLabels.append(obj)
        self._HostIds = params.get("HostIds")
        self._IsDisabled = params.get("IsDisabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WebHookRuleSummary(AbstractModel):
    """Enterprise WeChat Robot Rule Summary

    """

    def __init__(self):
        r"""
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _RuleName: Rule name
        :type RuleName: str
        :param _HookAddr: Robot Address
        :type HookAddr: str
        :param _RuleRemark: Remarks
        :type RuleRemark: str
        :param _RuleItems: Event type
        :type RuleItems: list of WebHookEventKv
        :param _HostLabels: Host range
        :type HostLabels: list of WebHookHostLabel
        :param _IsDisabled: Enable/Disable [1-Disable, 0-Enable]
        :type IsDisabled: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _HostCount: Number of hosts
        :type HostCount: int
        """
        self._RuleId = None
        self._RuleName = None
        self._HookAddr = None
        self._RuleRemark = None
        self._RuleItems = None
        self._HostLabels = None
        self._IsDisabled = None
        self._CreateTime = None
        self._UpdateTime = None
        self._HostCount = None

    @property
    def RuleId(self):
        """Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        """Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def HookAddr(self):
        """Robot Address
        :rtype: str
        """
        return self._HookAddr

    @HookAddr.setter
    def HookAddr(self, HookAddr):
        self._HookAddr = HookAddr

    @property
    def RuleRemark(self):
        """Remarks
        :rtype: str
        """
        return self._RuleRemark

    @RuleRemark.setter
    def RuleRemark(self, RuleRemark):
        self._RuleRemark = RuleRemark

    @property
    def RuleItems(self):
        """Event type
        :rtype: list of WebHookEventKv
        """
        return self._RuleItems

    @RuleItems.setter
    def RuleItems(self, RuleItems):
        self._RuleItems = RuleItems

    @property
    def HostLabels(self):
        """Host range
        :rtype: list of WebHookHostLabel
        """
        return self._HostLabels

    @HostLabels.setter
    def HostLabels(self, HostLabels):
        self._HostLabels = HostLabels

    @property
    def IsDisabled(self):
        """Enable/Disable [1-Disable, 0-Enable]
        :rtype: int
        """
        return self._IsDisabled

    @IsDisabled.setter
    def IsDisabled(self, IsDisabled):
        self._IsDisabled = IsDisabled

    @property
    def CreateTime(self):
        """Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def HostCount(self):
        """Number of hosts
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._HookAddr = params.get("HookAddr")
        self._RuleRemark = params.get("RuleRemark")
        if params.get("RuleItems") is not None:
            self._RuleItems = []
            for item in params.get("RuleItems"):
                obj = WebHookEventKv()
                obj._deserialize(item)
                self._RuleItems.append(obj)
        if params.get("HostLabels") is not None:
            self._HostLabels = []
            for item in params.get("HostLabels"):
                obj = WebHookHostLabel()
                obj._deserialize(item)
                self._HostLabels.append(obj)
        self._IsDisabled = params.get("IsDisabled")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._HostCount = params.get("HostCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ZoneInfo(AbstractModel):
    """Availability zone information

    """

    def __init__(self):
        r"""
        :param _ZoneName: Availability zone name
        :type ZoneName: str
        """
        self._ZoneName = None

    @property
    def ZoneName(self):
        """Availability zone name
        :rtype: str
        """
        return self._ZoneName

    @ZoneName.setter
    def ZoneName(self, ZoneName):
        self._ZoneName = ZoneName


    def _deserialize(self, params):
        self._ZoneName = params.get("ZoneName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        