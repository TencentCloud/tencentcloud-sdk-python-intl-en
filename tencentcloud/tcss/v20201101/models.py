# -*- coding: utf8 -*-
# Copyright (c) 2017-2025 Tencent. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings

from tencentcloud.common.abstract_model import AbstractModel


class ABTestConfig(AbstractModel):
    r"""Canary project configuration

    """

    def __init__(self):
        r"""
        :param _ProjectName: Canary project name
        :type ProjectName: str
        :param _Status: Valid values: `true` (in canary upgrade); `false` (not in canary upgrade).
        :type Status: bool
        """
        self._ProjectName = None
        self._Status = None

    @property
    def ProjectName(self):
        r"""Canary project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Status(self):
        r"""Valid values: `true` (in canary upgrade); `false` (not in canary upgrade).
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessChildRuleInfo(AbstractModel):
    r"""Container runtime security - Sub-policy information

    """

    def __init__(self):
        r"""
        :param _RuleMode: Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :type RuleMode: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _RuleId: Sub-policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: str
        :param _RuleLevel: Severity. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleLevel: str
        """
        self._RuleMode = None
        self._ProcessPath = None
        self._RuleId = None
        self._RuleLevel = None

    @property
    def RuleMode(self):
        r"""Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._RuleMode

    @RuleMode.setter
    def RuleMode(self, RuleMode):
        self._RuleMode = RuleMode

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def RuleId(self):
        r"""Sub-policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleLevel(self):
        r"""Severity. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel


    def _deserialize(self, params):
        self._RuleMode = params.get("RuleMode")
        self._ProcessPath = params.get("ProcessPath")
        self._RuleId = params.get("RuleId")
        self._RuleLevel = params.get("RuleLevel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessEventDescription(AbstractModel):
    r"""Description of the abnormal container process event at runtime

    """

    def __init__(self):
        r"""
        :param _Description: Event rule
        :type Description: str
        :param _Solution: Solution
        :type Solution: str
        :param _Remark: Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        :param _MatchRule: Details of the hit rule
        :type MatchRule: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessChildRuleInfo`
        :param _RuleName: Name of the hit rule. Valid values: `PROXY_TOOL` (proxy); `TRANSFER_CONTROL` (lateral movement); `ATTACK_CMD` (malicious command); `REVERSE_SHELL` (reverse shell); `FILELESS` (fileless execution); `RISK_CMD` (high-risk command); `ABNORMAL_CHILD_PROC` (unusual start found in the child process of the sensitive service); `USER_DEFINED_RULE` (custom rule).
        :type RuleName: str
        :param _RuleId: ID of the hit rule
        :type RuleId: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        :param _GroupName: Name of the hit policy. Valid values: `SYSTEM_DEFINED_RULE` (preset policy); name of the custom policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :type GroupName: str
        """
        self._Description = None
        self._Solution = None
        self._Remark = None
        self._MatchRule = None
        self._RuleName = None
        self._RuleId = None
        self._OperationTime = None
        self._GroupName = None

    @property
    def Description(self):
        r"""Event rule
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Solution(self):
        r"""Solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Remark(self):
        r"""Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def MatchRule(self):
        r"""Details of the hit rule
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessChildRuleInfo`
        """
        return self._MatchRule

    @MatchRule.setter
    def MatchRule(self, MatchRule):
        self._MatchRule = MatchRule

    @property
    def RuleName(self):
        r"""Name of the hit rule. Valid values: `PROXY_TOOL` (proxy); `TRANSFER_CONTROL` (lateral movement); `ATTACK_CMD` (malicious command); `REVERSE_SHELL` (reverse shell); `FILELESS` (fileless execution); `RISK_CMD` (high-risk command); `ABNORMAL_CHILD_PROC` (unusual start found in the child process of the sensitive service); `USER_DEFINED_RULE` (custom rule).
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleId(self):
        r"""ID of the hit rule
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime

    @property
    def GroupName(self):
        r"""Name of the hit policy. Valid values: `SYSTEM_DEFINED_RULE` (preset policy); name of the custom policy.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Solution = params.get("Solution")
        self._Remark = params.get("Remark")
        if params.get("MatchRule") is not None:
            self._MatchRule = AbnormalProcessChildRuleInfo()
            self._MatchRule._deserialize(params.get("MatchRule"))
        self._RuleName = params.get("RuleName")
        self._RuleId = params.get("RuleId")
        self._OperationTime = params.get("OperationTime")
        self._GroupName = params.get("GroupName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessEventInfo(AbstractModel):
    r"""Container runtime security - Information of the abnormal process

    """

    def __init__(self):
        r"""
        :param _ProcessPath: Process directory
        :type ProcessPath: str
        :param _EventType: Event type. `MALICE_PROCESS_START`: Malicious process startup.
        :type EventType: str
        :param _MatchRuleName: Name of the hit rule. Valid values: `PROXY_TOOL` (proxy); `TRANSFER_CONTROL` (lateral movement); `ATTACK_CMD` (malicious command); `REVERSE_SHELL` (reverse shell); `FILELESS` (fileless execution); `RISK_CMD` (high-risk command); `ABNORMAL_CHILD_PROC` (unusual start found in the child process of the sensitive service); `USER_DEFINED_RULE` (custom rule).
        :type MatchRuleName: str
        :param _FoundTime: Generation time
        :type FoundTime: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Behavior: Action execution result. `BEHAVIOR_NONE`: None.
    `BEHAVIOR_ALERT`: Alert.
    `BEHAVIOR_RELEASE`: Allow.
    `BEHAVIOR_HOLDUP_FAILED`: Failed to block.
    `BEHAVIOR_HOLDUP_SUCCESSED`: Blocked.
        :type Behavior: str
        :param _Status: Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :type Status: str
        :param _Id: Unique event ID
        :type Id: str
        :param _ImageId: Image ID, which is used for redirect.
        :type ImageId: str
        :param _ContainerId: Container ID, which is used for redirect.
        :type ContainerId: str
        :param _Solution: Event solution
        :type Solution: str
        :param _Description: Event description
        :type Description: str
        :param _MatchRuleId: Hit policy ID
        :type MatchRuleId: str
        :param _MatchAction: Action of the hit rule:
`RULE_MODE_RELEASE`: Allow.
`RULE_MODE_ALERT`: Alert.
`RULE_MODE_HOLDUP`: Block.
        :type MatchAction: str
        :param _MatchProcessPath: Information of the process that hits the rule
        :type MatchProcessPath: str
        :param _RuleExist: Whether the rule exists
        :type RuleExist: bool
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _RuleId: Rule group ID
        :type RuleId: str
        :param _MatchGroupName: Name of the hit policy. Valid values: `SYSTEM_DEFINED_RULE` (preset policy); name of the custom policy.
        :type MatchGroupName: str
        :param _MatchRuleLevel: Level of the hit rule. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
        :type MatchRuleLevel: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _PodName: Pod name
        :type PodName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _NodeUniqueID: Cluster ID
        :type NodeUniqueID: str
        :param _PublicIP: Node public IP
        :type PublicIP: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _HostID: uuid
        :type HostID: str
        :param _HostIP: Private IP of the node
        :type HostIP: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._ProcessPath = None
        self._EventType = None
        self._MatchRuleName = None
        self._FoundTime = None
        self._ContainerName = None
        self._ImageName = None
        self._Behavior = None
        self._Status = None
        self._Id = None
        self._ImageId = None
        self._ContainerId = None
        self._Solution = None
        self._Description = None
        self._MatchRuleId = None
        self._MatchAction = None
        self._MatchProcessPath = None
        self._RuleExist = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._RuleId = None
        self._MatchGroupName = None
        self._MatchRuleLevel = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None
        self._ClusterID = None
        self._NodeType = None
        self._PodName = None
        self._PodIP = None
        self._NodeUniqueID = None
        self._PublicIP = None
        self._NodeName = None
        self._NodeID = None
        self._HostID = None
        self._HostIP = None
        self._ClusterName = None

    @property
    def ProcessPath(self):
        r"""Process directory
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def EventType(self):
        r"""Event type. `MALICE_PROCESS_START`: Malicious process startup.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def MatchRuleName(self):
        r"""Name of the hit rule. Valid values: `PROXY_TOOL` (proxy); `TRANSFER_CONTROL` (lateral movement); `ATTACK_CMD` (malicious command); `REVERSE_SHELL` (reverse shell); `FILELESS` (fileless execution); `RISK_CMD` (high-risk command); `ABNORMAL_CHILD_PROC` (unusual start found in the child process of the sensitive service); `USER_DEFINED_RULE` (custom rule).
        :rtype: str
        """
        return self._MatchRuleName

    @MatchRuleName.setter
    def MatchRuleName(self, MatchRuleName):
        self._MatchRuleName = MatchRuleName

    @property
    def FoundTime(self):
        r"""Generation time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Behavior(self):
        r"""Action execution result. `BEHAVIOR_NONE`: None.
    `BEHAVIOR_ALERT`: Alert.
    `BEHAVIOR_RELEASE`: Allow.
    `BEHAVIOR_HOLDUP_FAILED`: Failed to block.
    `BEHAVIOR_HOLDUP_SUCCESSED`: Blocked.
        :rtype: str
        """
        return self._Behavior

    @Behavior.setter
    def Behavior(self, Behavior):
        self._Behavior = Behavior

    @property
    def Status(self):
        r"""Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ImageId(self):
        r"""Image ID, which is used for redirect.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ContainerId(self):
        r"""Container ID, which is used for redirect.
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def Solution(self):
        r"""Event solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Description(self):
        r"""Event description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def MatchRuleId(self):
        r"""Hit policy ID
        :rtype: str
        """
        return self._MatchRuleId

    @MatchRuleId.setter
    def MatchRuleId(self, MatchRuleId):
        self._MatchRuleId = MatchRuleId

    @property
    def MatchAction(self):
        r"""Action of the hit rule:
`RULE_MODE_RELEASE`: Allow.
`RULE_MODE_ALERT`: Alert.
`RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._MatchAction

    @MatchAction.setter
    def MatchAction(self, MatchAction):
        self._MatchAction = MatchAction

    @property
    def MatchProcessPath(self):
        r"""Information of the process that hits the rule
        :rtype: str
        """
        return self._MatchProcessPath

    @MatchProcessPath.setter
    def MatchProcessPath(self, MatchProcessPath):
        self._MatchProcessPath = MatchProcessPath

    @property
    def RuleExist(self):
        r"""Whether the rule exists
        :rtype: bool
        """
        return self._RuleExist

    @RuleExist.setter
    def RuleExist(self, RuleExist):
        self._RuleExist = RuleExist

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def RuleId(self):
        r"""Rule group ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def MatchGroupName(self):
        r"""Name of the hit policy. Valid values: `SYSTEM_DEFINED_RULE` (preset policy); name of the custom policy.
        :rtype: str
        """
        return self._MatchGroupName

    @MatchGroupName.setter
    def MatchGroupName(self, MatchGroupName):
        self._MatchGroupName = MatchGroupName

    @property
    def MatchRuleLevel(self):
        r"""Level of the hit rule. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
        :rtype: str
        """
        return self._MatchRuleLevel

    @MatchRuleLevel.setter
    def MatchRuleLevel(self, MatchRuleLevel):
        self._MatchRuleLevel = MatchRuleLevel

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def NodeUniqueID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PublicIP(self):
        r"""Node public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def HostID(self):
        r"""uuid
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Private IP of the node
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._ProcessPath = params.get("ProcessPath")
        self._EventType = params.get("EventType")
        self._MatchRuleName = params.get("MatchRuleName")
        self._FoundTime = params.get("FoundTime")
        self._ContainerName = params.get("ContainerName")
        self._ImageName = params.get("ImageName")
        self._Behavior = params.get("Behavior")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._ImageId = params.get("ImageId")
        self._ContainerId = params.get("ContainerId")
        self._Solution = params.get("Solution")
        self._Description = params.get("Description")
        self._MatchRuleId = params.get("MatchRuleId")
        self._MatchAction = params.get("MatchAction")
        self._MatchProcessPath = params.get("MatchProcessPath")
        self._RuleExist = params.get("RuleExist")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._RuleId = params.get("RuleId")
        self._MatchGroupName = params.get("MatchGroupName")
        self._MatchRuleLevel = params.get("MatchRuleLevel")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        self._ClusterID = params.get("ClusterID")
        self._NodeType = params.get("NodeType")
        self._PodName = params.get("PodName")
        self._PodIP = params.get("PodIP")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PublicIP = params.get("PublicIP")
        self._NodeName = params.get("NodeName")
        self._NodeID = params.get("NodeID")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessEventTendencyInfo(AbstractModel):
    r"""Trend of pending abnormal process events

    """

    def __init__(self):
        r"""
        :param _Date: Date
        :type Date: str
        :param _ProxyToolEventCount: Number of pending proxy events
        :type ProxyToolEventCount: int
        :param _TransferControlEventCount: Number of pending lateral movement events
        :type TransferControlEventCount: int
        :param _AttackCmdEventCount: Number of pending malicious command events
        :type AttackCmdEventCount: int
        :param _ReverseShellEventCount: Number of pending reverse shell events
        :type ReverseShellEventCount: int
        :param _FilelessEventCount: Number of pending fileless execution events
        :type FilelessEventCount: int
        :param _RiskCmdEventCount: Number of pending high-risk command events
        :type RiskCmdEventCount: int
        :param _AbnormalChildProcessEventCount: Number of pending events of unusual startups found in the child process of the sensitive service
        :type AbnormalChildProcessEventCount: int
        :param _UserDefinedRuleEventCount: Number of pending custom rule events
        :type UserDefinedRuleEventCount: int
        """
        self._Date = None
        self._ProxyToolEventCount = None
        self._TransferControlEventCount = None
        self._AttackCmdEventCount = None
        self._ReverseShellEventCount = None
        self._FilelessEventCount = None
        self._RiskCmdEventCount = None
        self._AbnormalChildProcessEventCount = None
        self._UserDefinedRuleEventCount = None

    @property
    def Date(self):
        r"""Date
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date

    @property
    def ProxyToolEventCount(self):
        r"""Number of pending proxy events
        :rtype: int
        """
        return self._ProxyToolEventCount

    @ProxyToolEventCount.setter
    def ProxyToolEventCount(self, ProxyToolEventCount):
        self._ProxyToolEventCount = ProxyToolEventCount

    @property
    def TransferControlEventCount(self):
        r"""Number of pending lateral movement events
        :rtype: int
        """
        return self._TransferControlEventCount

    @TransferControlEventCount.setter
    def TransferControlEventCount(self, TransferControlEventCount):
        self._TransferControlEventCount = TransferControlEventCount

    @property
    def AttackCmdEventCount(self):
        r"""Number of pending malicious command events
        :rtype: int
        """
        return self._AttackCmdEventCount

    @AttackCmdEventCount.setter
    def AttackCmdEventCount(self, AttackCmdEventCount):
        self._AttackCmdEventCount = AttackCmdEventCount

    @property
    def ReverseShellEventCount(self):
        r"""Number of pending reverse shell events
        :rtype: int
        """
        return self._ReverseShellEventCount

    @ReverseShellEventCount.setter
    def ReverseShellEventCount(self, ReverseShellEventCount):
        self._ReverseShellEventCount = ReverseShellEventCount

    @property
    def FilelessEventCount(self):
        r"""Number of pending fileless execution events
        :rtype: int
        """
        return self._FilelessEventCount

    @FilelessEventCount.setter
    def FilelessEventCount(self, FilelessEventCount):
        self._FilelessEventCount = FilelessEventCount

    @property
    def RiskCmdEventCount(self):
        r"""Number of pending high-risk command events
        :rtype: int
        """
        return self._RiskCmdEventCount

    @RiskCmdEventCount.setter
    def RiskCmdEventCount(self, RiskCmdEventCount):
        self._RiskCmdEventCount = RiskCmdEventCount

    @property
    def AbnormalChildProcessEventCount(self):
        r"""Number of pending events of unusual startups found in the child process of the sensitive service
        :rtype: int
        """
        return self._AbnormalChildProcessEventCount

    @AbnormalChildProcessEventCount.setter
    def AbnormalChildProcessEventCount(self, AbnormalChildProcessEventCount):
        self._AbnormalChildProcessEventCount = AbnormalChildProcessEventCount

    @property
    def UserDefinedRuleEventCount(self):
        r"""Number of pending custom rule events
        :rtype: int
        """
        return self._UserDefinedRuleEventCount

    @UserDefinedRuleEventCount.setter
    def UserDefinedRuleEventCount(self, UserDefinedRuleEventCount):
        self._UserDefinedRuleEventCount = UserDefinedRuleEventCount


    def _deserialize(self, params):
        self._Date = params.get("Date")
        self._ProxyToolEventCount = params.get("ProxyToolEventCount")
        self._TransferControlEventCount = params.get("TransferControlEventCount")
        self._AttackCmdEventCount = params.get("AttackCmdEventCount")
        self._ReverseShellEventCount = params.get("ReverseShellEventCount")
        self._FilelessEventCount = params.get("FilelessEventCount")
        self._RiskCmdEventCount = params.get("RiskCmdEventCount")
        self._AbnormalChildProcessEventCount = params.get("AbnormalChildProcessEventCount")
        self._UserDefinedRuleEventCount = params.get("UserDefinedRuleEventCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessRuleInfo(AbstractModel):
    r"""Runtime security - Abnormal process detection policy

    """

    def __init__(self):
        r"""
        :param _IsEnable: Valid values: `true` (enabled); `false` (disabled).
        :type IsEnable: bool
        :param _ImageIds: IDs of associated images. An empty array indicates all images.
        :type ImageIds: list of str
        :param _ChildRules: Array of sub-policies of the user policy
        :type ChildRules: list of AbnormalProcessChildRuleInfo
        :param _RuleName: Policy name
        :type RuleName: str
        :param _RuleId: Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: str
        :param _SystemChildRules: Array of sub-policies of the preset policy
        :type SystemChildRules: list of AbnormalProcessSystemChildRuleInfo
        :param _IsDefault: Whether it is the default preset policy
        :type IsDefault: bool
        """
        self._IsEnable = None
        self._ImageIds = None
        self._ChildRules = None
        self._RuleName = None
        self._RuleId = None
        self._SystemChildRules = None
        self._IsDefault = None

    @property
    def IsEnable(self):
        r"""Valid values: `true` (enabled); `false` (disabled).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable

    @property
    def ImageIds(self):
        r"""IDs of associated images. An empty array indicates all images.
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds

    @property
    def ChildRules(self):
        r"""Array of sub-policies of the user policy
        :rtype: list of AbnormalProcessChildRuleInfo
        """
        return self._ChildRules

    @ChildRules.setter
    def ChildRules(self, ChildRules):
        self._ChildRules = ChildRules

    @property
    def RuleName(self):
        r"""Policy name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleId(self):
        r"""Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def SystemChildRules(self):
        r"""Array of sub-policies of the preset policy
        :rtype: list of AbnormalProcessSystemChildRuleInfo
        """
        return self._SystemChildRules

    @SystemChildRules.setter
    def SystemChildRules(self, SystemChildRules):
        self._SystemChildRules = SystemChildRules

    @property
    def IsDefault(self):
        r"""Whether it is the default preset policy
        :rtype: bool
        """
        return self._IsDefault

    @IsDefault.setter
    def IsDefault(self, IsDefault):
        self._IsDefault = IsDefault


    def _deserialize(self, params):
        self._IsEnable = params.get("IsEnable")
        self._ImageIds = params.get("ImageIds")
        if params.get("ChildRules") is not None:
            self._ChildRules = []
            for item in params.get("ChildRules"):
                obj = AbnormalProcessChildRuleInfo()
                obj._deserialize(item)
                self._ChildRules.append(obj)
        self._RuleName = params.get("RuleName")
        self._RuleId = params.get("RuleId")
        if params.get("SystemChildRules") is not None:
            self._SystemChildRules = []
            for item in params.get("SystemChildRules"):
                obj = AbnormalProcessSystemChildRuleInfo()
                obj._deserialize(item)
                self._SystemChildRules.append(obj)
        self._IsDefault = params.get("IsDefault")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AbnormalProcessSystemChildRuleInfo(AbstractModel):
    r"""Information of the sub-policy of the preset policy for abnormal processes

    """

    def __init__(self):
        r"""
        :param _RuleId: Sub-policy ID
        :type RuleId: str
        :param _IsEnable: Sub-policy status. Valid values: `true` (enabled); `false` (disabled).
        :type IsEnable: bool
        :param _RuleMode: Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :type RuleMode: str
        :param _RuleType: Behavior type detected by the sub-policy
`PROXY_TOOL`: Proxy.
`TRANSFER_CONTROL`: Lateral movement.
`ATTACK_CMD`: Malicious command.
`REVERSE_SHELL`: Reverse shell.
`FILELESS`: Fileless execution.
`RISK_CMD`: High-risk command.
`ABNORMAL_CHILD_PROC`: Unusual start found in the child process of the sensitive service.
        :type RuleType: str
        :param _RuleLevel: Severity. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleLevel: str
        """
        self._RuleId = None
        self._IsEnable = None
        self._RuleMode = None
        self._RuleType = None
        self._RuleLevel = None

    @property
    def RuleId(self):
        r"""Sub-policy ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def IsEnable(self):
        r"""Sub-policy status. Valid values: `true` (enabled); `false` (disabled).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable

    @property
    def RuleMode(self):
        r"""Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._RuleMode

    @RuleMode.setter
    def RuleMode(self, RuleMode):
        self._RuleMode = RuleMode

    @property
    def RuleType(self):
        r"""Behavior type detected by the sub-policy
`PROXY_TOOL`: Proxy.
`TRANSFER_CONTROL`: Lateral movement.
`ATTACK_CMD`: Malicious command.
`REVERSE_SHELL`: Reverse shell.
`FILELESS`: Fileless execution.
`RISK_CMD`: High-risk command.
`ABNORMAL_CHILD_PROC`: Unusual start found in the child process of the sensitive service.
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def RuleLevel(self):
        r"""Severity. Valid values: `HIGH` (high); `MIDDLE` (medium); `LOW` (low).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleLevel

    @RuleLevel.setter
    def RuleLevel(self, RuleLevel):
        self._RuleLevel = RuleLevel


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._IsEnable = params.get("IsEnable")
        self._RuleMode = params.get("RuleMode")
        self._RuleType = params.get("RuleType")
        self._RuleLevel = params.get("RuleLevel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccessControlChildRuleInfo(AbstractModel):
    r"""Container runtime security - Information of the access control sub-policy

    """

    def __init__(self):
        r"""
        :param _RuleMode: Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :type RuleMode: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _TargetFilePath: Accessed file path, which is valid only for access control.
        :type TargetFilePath: str
        :param _RuleId: Sub-policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: str
        """
        self._RuleMode = None
        self._ProcessPath = None
        self._TargetFilePath = None
        self._RuleId = None

    @property
    def RuleMode(self):
        r"""Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._RuleMode

    @RuleMode.setter
    def RuleMode(self, RuleMode):
        self._RuleMode = RuleMode

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def TargetFilePath(self):
        r"""Accessed file path, which is valid only for access control.
        :rtype: str
        """
        return self._TargetFilePath

    @TargetFilePath.setter
    def TargetFilePath(self, TargetFilePath):
        self._TargetFilePath = TargetFilePath

    @property
    def RuleId(self):
        r"""Sub-policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId


    def _deserialize(self, params):
        self._RuleMode = params.get("RuleMode")
        self._ProcessPath = params.get("ProcessPath")
        self._TargetFilePath = params.get("TargetFilePath")
        self._RuleId = params.get("RuleId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccessControlEventDescription(AbstractModel):
    r"""Description of the container access control event at runtime

    """

    def __init__(self):
        r"""
        :param _Description: Event rule
        :type Description: str
        :param _Solution: Solution
        :type Solution: str
        :param _Remark: Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        :param _MatchRule: Details of the hit rule
        :type MatchRule: :class:`tencentcloud.tcss.v20201101.models.AccessControlChildRuleInfo`
        :param _RuleName: Name of the hit rule
        :type RuleName: str
        :param _RuleId: ID of the hit rule
        :type RuleId: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        """
        self._Description = None
        self._Solution = None
        self._Remark = None
        self._MatchRule = None
        self._RuleName = None
        self._RuleId = None
        self._OperationTime = None

    @property
    def Description(self):
        r"""Event rule
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Solution(self):
        r"""Solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Remark(self):
        r"""Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def MatchRule(self):
        r"""Details of the hit rule
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AccessControlChildRuleInfo`
        """
        return self._MatchRule

    @MatchRule.setter
    def MatchRule(self, MatchRule):
        self._MatchRule = MatchRule

    @property
    def RuleName(self):
        r"""Name of the hit rule
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleId(self):
        r"""ID of the hit rule
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Solution = params.get("Solution")
        self._Remark = params.get("Remark")
        if params.get("MatchRule") is not None:
            self._MatchRule = AccessControlChildRuleInfo()
            self._MatchRule._deserialize(params.get("MatchRule"))
        self._RuleName = params.get("RuleName")
        self._RuleId = params.get("RuleId")
        self._OperationTime = params.get("OperationTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccessControlEventInfo(AbstractModel):
    r"""Container runtime security - Information of the access control event

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _MatchRuleName: Name of the hit rule
        :type MatchRuleName: str
        :param _FoundTime: Generation time
        :type FoundTime: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Behavior: Action execution result. `BEHAVIOR_NONE`: None.
    `BEHAVIOR_ALERT`: Alert.
    `BEHAVIOR_RELEASE`: Allow.
    `BEHAVIOR_HOLDUP_FAILED`: Failed to block.
    `BEHAVIOR_HOLDUP_SUCCESSED`: Blocked.
        :type Behavior: str
        :param _Status: Status. `0`: Pending. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :type Status: str
        :param _Id: Unique event ID
        :type Id: str
        :param _FileName: Filename
        :type FileName: str
        :param _EventType: Event type. `FILE_ABNORMAL_READ`: Abnormal file read.
        :type EventType: str
        :param _ImageId: Image ID, which is used for redirect.
        :type ImageId: str
        :param _ContainerId: Container ID, which is used for redirect.
        :type ContainerId: str
        :param _Solution: Event solution
        :type Solution: str
        :param _Description: Event description
        :type Description: str
        :param _MatchRuleId: Hit policy ID
        :type MatchRuleId: str
        :param _MatchAction: Action of the hit rule:
`RULE_MODE_RELEASE`: Allow.
`RULE_MODE_ALERT`: Alert.
`RULE_MODE_HOLDUP`: Block.
        :type MatchAction: str
        :param _MatchProcessPath: Information of the process that hits the rule
        :type MatchProcessPath: str
        :param _MatchFilePath: Information of the file that hits the rule
        :type MatchFilePath: str
        :param _FilePath: File path containing the name
        :type FilePath: str
        :param _RuleExist: Whether the rule exists
        :type RuleExist: bool
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _RuleId: Rule group ID
        :type RuleId: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        :param _NodeName: Node name: For super nodes, the node_id is displayed.
        :type NodeName: str
        :param _PodName: Pod name
        :type PodName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _NodeUniqueID: Node unique ID. It's used for super nodes.
        :type NodeUniqueID: str
        :param _PublicIP: Node public IP
        :type PublicIP: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _HostID: uuid
        :type HostID: str
        :param _HostIP: Private IP of the node
        :type HostIP: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._ProcessName = None
        self._MatchRuleName = None
        self._FoundTime = None
        self._ContainerName = None
        self._ImageName = None
        self._Behavior = None
        self._Status = None
        self._Id = None
        self._FileName = None
        self._EventType = None
        self._ImageId = None
        self._ContainerId = None
        self._Solution = None
        self._Description = None
        self._MatchRuleId = None
        self._MatchAction = None
        self._MatchProcessPath = None
        self._MatchFilePath = None
        self._FilePath = None
        self._RuleExist = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._RuleId = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None
        self._NodeName = None
        self._PodName = None
        self._PodIP = None
        self._NodeType = None
        self._ClusterID = None
        self._NodeUniqueID = None
        self._PublicIP = None
        self._NodeID = None
        self._HostID = None
        self._HostIP = None
        self._ClusterName = None

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def MatchRuleName(self):
        r"""Name of the hit rule
        :rtype: str
        """
        return self._MatchRuleName

    @MatchRuleName.setter
    def MatchRuleName(self, MatchRuleName):
        self._MatchRuleName = MatchRuleName

    @property
    def FoundTime(self):
        r"""Generation time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Behavior(self):
        r"""Action execution result. `BEHAVIOR_NONE`: None.
    `BEHAVIOR_ALERT`: Alert.
    `BEHAVIOR_RELEASE`: Allow.
    `BEHAVIOR_HOLDUP_FAILED`: Failed to block.
    `BEHAVIOR_HOLDUP_SUCCESSED`: Blocked.
        :rtype: str
        """
        return self._Behavior

    @Behavior.setter
    def Behavior(self, Behavior):
        self._Behavior = Behavior

    @property
    def Status(self):
        r"""Status. `0`: Pending. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def FileName(self):
        r"""Filename
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def EventType(self):
        r"""Event type. `FILE_ABNORMAL_READ`: Abnormal file read.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def ImageId(self):
        r"""Image ID, which is used for redirect.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ContainerId(self):
        r"""Container ID, which is used for redirect.
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def Solution(self):
        r"""Event solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Description(self):
        r"""Event description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def MatchRuleId(self):
        r"""Hit policy ID
        :rtype: str
        """
        return self._MatchRuleId

    @MatchRuleId.setter
    def MatchRuleId(self, MatchRuleId):
        self._MatchRuleId = MatchRuleId

    @property
    def MatchAction(self):
        r"""Action of the hit rule:
`RULE_MODE_RELEASE`: Allow.
`RULE_MODE_ALERT`: Alert.
`RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._MatchAction

    @MatchAction.setter
    def MatchAction(self, MatchAction):
        self._MatchAction = MatchAction

    @property
    def MatchProcessPath(self):
        r"""Information of the process that hits the rule
        :rtype: str
        """
        return self._MatchProcessPath

    @MatchProcessPath.setter
    def MatchProcessPath(self, MatchProcessPath):
        self._MatchProcessPath = MatchProcessPath

    @property
    def MatchFilePath(self):
        r"""Information of the file that hits the rule
        :rtype: str
        """
        return self._MatchFilePath

    @MatchFilePath.setter
    def MatchFilePath(self, MatchFilePath):
        self._MatchFilePath = MatchFilePath

    @property
    def FilePath(self):
        r"""File path containing the name
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def RuleExist(self):
        r"""Whether the rule exists
        :rtype: bool
        """
        return self._RuleExist

    @RuleExist.setter
    def RuleExist(self, RuleExist):
        self._RuleExist = RuleExist

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def RuleId(self):
        r"""Rule group ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def NodeName(self):
        r"""Node name: For super nodes, the node_id is displayed.
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def NodeUniqueID(self):
        r"""Node unique ID. It's used for super nodes.
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PublicIP(self):
        r"""Node public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def HostID(self):
        r"""uuid
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Private IP of the node
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._MatchRuleName = params.get("MatchRuleName")
        self._FoundTime = params.get("FoundTime")
        self._ContainerName = params.get("ContainerName")
        self._ImageName = params.get("ImageName")
        self._Behavior = params.get("Behavior")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._FileName = params.get("FileName")
        self._EventType = params.get("EventType")
        self._ImageId = params.get("ImageId")
        self._ContainerId = params.get("ContainerId")
        self._Solution = params.get("Solution")
        self._Description = params.get("Description")
        self._MatchRuleId = params.get("MatchRuleId")
        self._MatchAction = params.get("MatchAction")
        self._MatchProcessPath = params.get("MatchProcessPath")
        self._MatchFilePath = params.get("MatchFilePath")
        self._FilePath = params.get("FilePath")
        self._RuleExist = params.get("RuleExist")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._RuleId = params.get("RuleId")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        self._NodeName = params.get("NodeName")
        self._PodName = params.get("PodName")
        self._PodIP = params.get("PodIP")
        self._NodeType = params.get("NodeType")
        self._ClusterID = params.get("ClusterID")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PublicIP = params.get("PublicIP")
        self._NodeID = params.get("NodeID")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccessControlRuleInfo(AbstractModel):
    r"""Container runtime - Access control policy information

    """

    def __init__(self):
        r"""
        :param _IsEnable: Switch. Valid values: `true` (on); `false` (off).
        :type IsEnable: bool
        :param _ImageIds: IDs of associated images. An empty array indicates all images.
        :type ImageIds: list of str
        :param _ChildRules: Array of sub-policies of the user policy
        :type ChildRules: list of AccessControlChildRuleInfo
        :param _RuleName: Policy name
        :type RuleName: str
        :param _RuleId: Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: str
        :param _SystemChildRules: Array of sub-policies of the preset policy
        :type SystemChildRules: list of AccessControlSystemChildRuleInfo
        :param _IsDefault: Whether it is the default preset policy
        :type IsDefault: bool
        """
        self._IsEnable = None
        self._ImageIds = None
        self._ChildRules = None
        self._RuleName = None
        self._RuleId = None
        self._SystemChildRules = None
        self._IsDefault = None

    @property
    def IsEnable(self):
        r"""Switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable

    @property
    def ImageIds(self):
        r"""IDs of associated images. An empty array indicates all images.
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds

    @property
    def ChildRules(self):
        r"""Array of sub-policies of the user policy
        :rtype: list of AccessControlChildRuleInfo
        """
        return self._ChildRules

    @ChildRules.setter
    def ChildRules(self, ChildRules):
        self._ChildRules = ChildRules

    @property
    def RuleName(self):
        r"""Policy name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleId(self):
        r"""Policy ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def SystemChildRules(self):
        r"""Array of sub-policies of the preset policy
        :rtype: list of AccessControlSystemChildRuleInfo
        """
        return self._SystemChildRules

    @SystemChildRules.setter
    def SystemChildRules(self, SystemChildRules):
        self._SystemChildRules = SystemChildRules

    @property
    def IsDefault(self):
        r"""Whether it is the default preset policy
        :rtype: bool
        """
        return self._IsDefault

    @IsDefault.setter
    def IsDefault(self, IsDefault):
        self._IsDefault = IsDefault


    def _deserialize(self, params):
        self._IsEnable = params.get("IsEnable")
        self._ImageIds = params.get("ImageIds")
        if params.get("ChildRules") is not None:
            self._ChildRules = []
            for item in params.get("ChildRules"):
                obj = AccessControlChildRuleInfo()
                obj._deserialize(item)
                self._ChildRules.append(obj)
        self._RuleName = params.get("RuleName")
        self._RuleId = params.get("RuleId")
        if params.get("SystemChildRules") is not None:
            self._SystemChildRules = []
            for item in params.get("SystemChildRules"):
                obj = AccessControlSystemChildRuleInfo()
                obj._deserialize(item)
                self._SystemChildRules.append(obj)
        self._IsDefault = params.get("IsDefault")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AccessControlSystemChildRuleInfo(AbstractModel):
    r"""Container runtime security - Information of the sub-policy of the preset access control policy

    """

    def __init__(self):
        r"""
        :param _RuleId: Sub-policy ID
        :type RuleId: str
        :param _RuleMode: Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :type RuleMode: str
        :param _IsEnable: Sub-policy status. Valid values: `true` (enabled); `false` (disabled).
        :type IsEnable: bool
        :param _RuleType: Intrusion behavior type detected by the sub-policy
`CHANGE_CRONTAB`: Tampering with the scheduled task.
`CHANGE_SYS_BIN`: Tampering with the system program.
`CHANGE_USRCFG`: Tampering with user configuration.
        :type RuleType: str
        """
        self._RuleId = None
        self._RuleMode = None
        self._IsEnable = None
        self._RuleType = None

    @property
    def RuleId(self):
        r"""Sub-policy ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleMode(self):
        r"""Policy mode. `RULE_MODE_RELEASE`: Allow.
   `RULE_MODE_ALERT`: Alert.
   `RULE_MODE_HOLDUP`: Block.
        :rtype: str
        """
        return self._RuleMode

    @RuleMode.setter
    def RuleMode(self, RuleMode):
        self._RuleMode = RuleMode

    @property
    def IsEnable(self):
        r"""Sub-policy status. Valid values: `true` (enabled); `false` (disabled).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable

    @property
    def RuleType(self):
        r"""Intrusion behavior type detected by the sub-policy
`CHANGE_CRONTAB`: Tampering with the scheduled task.
`CHANGE_SYS_BIN`: Tampering with the system program.
`CHANGE_USRCFG`: Tampering with user configuration.
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._RuleMode = params.get("RuleMode")
        self._IsEnable = params.get("IsEnable")
        self._RuleType = params.get("RuleType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddAndPublishNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""AddAndPublishNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _FromPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type FromPolicyRule: int
        :param _ToPolicyRule: Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type ToPolicyRule: int
        :param _PodSelector: Pod selector
        :type PodSelector: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _Description: Policy description
        :type Description: str
        :param _CustomPolicy: Custom rule
        :type CustomPolicy: list of NetworkCustomPolicy
        """
        self._ClusterId = None
        self._PolicyName = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._PodSelector = None
        self._Namespace = None
        self._Description = None
        self._CustomPolicy = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def FromPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def PodSelector(self):
        r"""Pod selector
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CustomPolicy(self):
        r"""Custom rule
        :rtype: list of NetworkCustomPolicy
        """
        return self._CustomPolicy

    @CustomPolicy.setter
    def CustomPolicy(self, CustomPolicy):
        self._CustomPolicy = CustomPolicy


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        self._PodSelector = params.get("PodSelector")
        self._Namespace = params.get("Namespace")
        self._Description = params.get("Description")
        if params.get("CustomPolicy") is not None:
            self._CustomPolicy = []
            for item in params.get("CustomPolicy"):
                obj = NetworkCustomPolicy()
                obj._deserialize(item)
                self._CustomPolicy.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddAndPublishNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""AddAndPublishNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class AddAndPublishNetworkFirewallPolicyYamlDetailRequest(AbstractModel):
    r"""AddAndPublishNetworkFirewallPolicyYamlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _Yaml: Base64-encoded NetworkPolicy YAML string
        :type Yaml: str
        :param _Description: Policy description
        :type Description: str
        """
        self._ClusterId = None
        self._PolicyName = None
        self._Yaml = None
        self._Description = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def Yaml(self):
        r"""Base64-encoded NetworkPolicy YAML string
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddAndPublishNetworkFirewallPolicyYamlDetailResponse(AbstractModel):
    r"""AddAndPublishNetworkFirewallPolicyYamlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class AddAssetImageRegistryRegistryDetailRequest(AbstractModel):
    r"""AddAssetImageRegistryRegistryDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Repository name
        :type Name: str
        :param _Username: Username
        :type Username: str
        :param _Password: Password
        :type Password: str
        :param _Url: Repository URL
        :type Url: str
        :param _RegistryType: Repository type, which can be `harbor`.
        :type RegistryType: str
        :param _NetType: Network type, which can be `public` (public network).
        :type NetType: str
        :param _RegistryVersion: Repository version
        :type RegistryVersion: str
        :param _RegistryRegion: Region. Default value: `default`.
        :type RegistryRegion: str
        :param _SpeedLimit: Speed limit
        :type SpeedLimit: int
        :param _Insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :type Insecure: int
        """
        self._Name = None
        self._Username = None
        self._Password = None
        self._Url = None
        self._RegistryType = None
        self._NetType = None
        self._RegistryVersion = None
        self._RegistryRegion = None
        self._SpeedLimit = None
        self._Insecure = None

    @property
    def Name(self):
        r"""Repository name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Username(self):
        r"""Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Password(self):
        r"""Password
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password

    @property
    def Url(self):
        r"""Repository URL
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RegistryType(self):
        r"""Repository type, which can be `harbor`.
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def NetType(self):
        r"""Network type, which can be `public` (public network).
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegistryVersion(self):
        r"""Repository version
        :rtype: str
        """
        return self._RegistryVersion

    @RegistryVersion.setter
    def RegistryVersion(self, RegistryVersion):
        self._RegistryVersion = RegistryVersion

    @property
    def RegistryRegion(self):
        r"""Region. Default value: `default`.
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def SpeedLimit(self):
        r"""Speed limit
        :rtype: int
        """
        return self._SpeedLimit

    @SpeedLimit.setter
    def SpeedLimit(self, SpeedLimit):
        self._SpeedLimit = SpeedLimit

    @property
    def Insecure(self):
        r"""Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :rtype: int
        """
        return self._Insecure

    @Insecure.setter
    def Insecure(self, Insecure):
        self._Insecure = Insecure


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Username = params.get("Username")
        self._Password = params.get("Password")
        self._Url = params.get("Url")
        self._RegistryType = params.get("RegistryType")
        self._NetType = params.get("NetType")
        self._RegistryVersion = params.get("RegistryVersion")
        self._RegistryRegion = params.get("RegistryRegion")
        self._SpeedLimit = params.get("SpeedLimit")
        self._Insecure = params.get("Insecure")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddAssetImageRegistryRegistryDetailResponse(AbstractModel):
    r"""AddAssetImageRegistryRegistryDetail response structure.

    """

    def __init__(self):
        r"""
        :param _HealthCheckErr: Connection error message
Note: This field may return null, indicating that no valid values can be obtained.
        :type HealthCheckErr: str
        :param _NameRepeatErr: Name error message
Note: This field may return null, indicating that no valid values can be obtained.
        :type NameRepeatErr: str
        :param _RegistryId: Unique repository ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HealthCheckErr = None
        self._NameRepeatErr = None
        self._RegistryId = None
        self._RequestId = None

    @property
    def HealthCheckErr(self):
        r"""Connection error message
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HealthCheckErr

    @HealthCheckErr.setter
    def HealthCheckErr(self, HealthCheckErr):
        self._HealthCheckErr = HealthCheckErr

    @property
    def NameRepeatErr(self):
        r"""Name error message
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NameRepeatErr

    @NameRepeatErr.setter
    def NameRepeatErr(self, NameRepeatErr):
        self._NameRepeatErr = NameRepeatErr

    @property
    def RegistryId(self):
        r"""Unique repository ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HealthCheckErr = params.get("HealthCheckErr")
        self._NameRepeatErr = params.get("NameRepeatErr")
        self._RegistryId = params.get("RegistryId")
        self._RequestId = params.get("RequestId")


class AddComplianceAssetPolicySetToWhitelistRequest(AbstractModel):
    r"""AddComplianceAssetPolicySetToWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _AssetPolicySetList: List of asset IDs and check item IDs
        :type AssetPolicySetList: list of ComplianceAssetPolicySetItem
        """
        self._AssetPolicySetList = None

    @property
    def AssetPolicySetList(self):
        r"""List of asset IDs and check item IDs
        :rtype: list of ComplianceAssetPolicySetItem
        """
        return self._AssetPolicySetList

    @AssetPolicySetList.setter
    def AssetPolicySetList(self, AssetPolicySetList):
        self._AssetPolicySetList = AssetPolicySetList


    def _deserialize(self, params):
        if params.get("AssetPolicySetList") is not None:
            self._AssetPolicySetList = []
            for item in params.get("AssetPolicySetList"):
                obj = ComplianceAssetPolicySetItem()
                obj._deserialize(item)
                self._AssetPolicySetList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddComplianceAssetPolicySetToWhitelistResponse(AbstractModel):
    r"""AddComplianceAssetPolicySetToWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddCompliancePolicyAssetSetToWhitelistRequest(AbstractModel):
    r"""AddCompliancePolicyAssetSetToWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: Check item ID
        :type CustomerPolicyItemId: int
        :param _CustomerAssetItemIdSet: List of IDs of assets to be ignored in the specified check item
        :type CustomerAssetItemIdSet: list of int non-negative
        """
        self._CustomerPolicyItemId = None
        self._CustomerAssetItemIdSet = None

    @property
    def CustomerPolicyItemId(self):
        r"""Check item ID
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def CustomerAssetItemIdSet(self):
        r"""List of IDs of assets to be ignored in the specified check item
        :rtype: list of int non-negative
        """
        return self._CustomerAssetItemIdSet

    @CustomerAssetItemIdSet.setter
    def CustomerAssetItemIdSet(self, CustomerAssetItemIdSet):
        self._CustomerAssetItemIdSet = CustomerAssetItemIdSet


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._CustomerAssetItemIdSet = params.get("CustomerAssetItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddCompliancePolicyAssetSetToWhitelistResponse(AbstractModel):
    r"""AddCompliancePolicyAssetSetToWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddCompliancePolicyItemToWhitelistRequest(AbstractModel):
    r"""AddCompliancePolicyItemToWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemIdSet: List of IDs of check items to be ignored
        :type CustomerPolicyItemIdSet: list of int non-negative
        """
        self._CustomerPolicyItemIdSet = None

    @property
    def CustomerPolicyItemIdSet(self):
        r"""List of IDs of check items to be ignored
        :rtype: list of int non-negative
        """
        return self._CustomerPolicyItemIdSet

    @CustomerPolicyItemIdSet.setter
    def CustomerPolicyItemIdSet(self, CustomerPolicyItemIdSet):
        self._CustomerPolicyItemIdSet = CustomerPolicyItemIdSet


    def _deserialize(self, params):
        self._CustomerPolicyItemIdSet = params.get("CustomerPolicyItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddCompliancePolicyItemToWhitelistResponse(AbstractModel):
    r"""AddCompliancePolicyItemToWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditAbnormalProcessRuleRequest(AbstractModel):
    r"""AddEditAbnormalProcessRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleInfo: Information of the added policy. The policy ID is empty here but cannot be empty when you edit a policy.
        :type RuleInfo: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessRuleInfo`
        :param _EventId: Required only when an item is allowed
        :type EventId: str
        """
        self._RuleInfo = None
        self._EventId = None

    @property
    def RuleInfo(self):
        r"""Information of the added policy. The policy ID is empty here but cannot be empty when you edit a policy.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessRuleInfo`
        """
        return self._RuleInfo

    @RuleInfo.setter
    def RuleInfo(self, RuleInfo):
        self._RuleInfo = RuleInfo

    @property
    def EventId(self):
        r"""Required only when an item is allowed
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        if params.get("RuleInfo") is not None:
            self._RuleInfo = AbnormalProcessRuleInfo()
            self._RuleInfo._deserialize(params.get("RuleInfo"))
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditAbnormalProcessRuleResponse(AbstractModel):
    r"""AddEditAbnormalProcessRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditAccessControlRuleRequest(AbstractModel):
    r"""AddEditAccessControlRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleInfo: Information of the added policy. The policy ID is empty here but cannot be empty when you edit a policy.
        :type RuleInfo: :class:`tencentcloud.tcss.v20201101.models.AccessControlRuleInfo`
        :param _EventId: Used only for an allowed item
        :type EventId: str
        """
        self._RuleInfo = None
        self._EventId = None

    @property
    def RuleInfo(self):
        r"""Information of the added policy. The policy ID is empty here but cannot be empty when you edit a policy.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AccessControlRuleInfo`
        """
        return self._RuleInfo

    @RuleInfo.setter
    def RuleInfo(self, RuleInfo):
        self._RuleInfo = RuleInfo

    @property
    def EventId(self):
        r"""Used only for an allowed item
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        if params.get("RuleInfo") is not None:
            self._RuleInfo = AccessControlRuleInfo()
            self._RuleInfo._deserialize(params.get("RuleInfo"))
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditAccessControlRuleResponse(AbstractModel):
    r"""AddEditAccessControlRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditImageAutoAuthorizedRuleRequest(AbstractModel):
    r"""AddEditImageAutoAuthorizedRule request structure.

    """

    def __init__(self):
        r"""
        :param _RangeType: Scope. Valid values: `MANUAL` (specified servers); `ALL` (all images).
        :type RangeType: str
        :param _MaxDailyCount: Maximum number of image licenses per day. `0`: Unlimited.
        :type MaxDailyCount: int
        :param _IsEnabled: Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :type IsEnabled: int
        :param _HostIdSet: IDs of specified servers. This parameter is required when the scope is `MANUAL` and `HostIdFilters` is empty.
        :type HostIdSet: list of str
        :param _RuleId: Rule ID, which is required during editing.
        :type RuleId: int
        :param _HostIdFilters: Filter. This parameter is required when the scope is `MANUAL` and `HostIdSet` is empty.
        :type HostIdFilters: list of AssetFilters
        :param _ExcludeHostIdSet: Specified server IDs to be excluded
        :type ExcludeHostIdSet: list of str
        """
        self._RangeType = None
        self._MaxDailyCount = None
        self._IsEnabled = None
        self._HostIdSet = None
        self._RuleId = None
        self._HostIdFilters = None
        self._ExcludeHostIdSet = None

    @property
    def RangeType(self):
        r"""Scope. Valid values: `MANUAL` (specified servers); `ALL` (all images).
        :rtype: str
        """
        return self._RangeType

    @RangeType.setter
    def RangeType(self, RangeType):
        self._RangeType = RangeType

    @property
    def MaxDailyCount(self):
        r"""Maximum number of image licenses per day. `0`: Unlimited.
        :rtype: int
        """
        return self._MaxDailyCount

    @MaxDailyCount.setter
    def MaxDailyCount(self, MaxDailyCount):
        self._MaxDailyCount = MaxDailyCount

    @property
    def IsEnabled(self):
        r"""Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def HostIdSet(self):
        r"""IDs of specified servers. This parameter is required when the scope is `MANUAL` and `HostIdFilters` is empty.
        :rtype: list of str
        """
        return self._HostIdSet

    @HostIdSet.setter
    def HostIdSet(self, HostIdSet):
        self._HostIdSet = HostIdSet

    @property
    def RuleId(self):
        r"""Rule ID, which is required during editing.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def HostIdFilters(self):
        r"""Filter. This parameter is required when the scope is `MANUAL` and `HostIdSet` is empty.
        :rtype: list of AssetFilters
        """
        return self._HostIdFilters

    @HostIdFilters.setter
    def HostIdFilters(self, HostIdFilters):
        self._HostIdFilters = HostIdFilters

    @property
    def ExcludeHostIdSet(self):
        r"""Specified server IDs to be excluded
        :rtype: list of str
        """
        return self._ExcludeHostIdSet

    @ExcludeHostIdSet.setter
    def ExcludeHostIdSet(self, ExcludeHostIdSet):
        self._ExcludeHostIdSet = ExcludeHostIdSet


    def _deserialize(self, params):
        self._RangeType = params.get("RangeType")
        self._MaxDailyCount = params.get("MaxDailyCount")
        self._IsEnabled = params.get("IsEnabled")
        self._HostIdSet = params.get("HostIdSet")
        self._RuleId = params.get("RuleId")
        if params.get("HostIdFilters") is not None:
            self._HostIdFilters = []
            for item in params.get("HostIdFilters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._HostIdFilters.append(obj)
        self._ExcludeHostIdSet = params.get("ExcludeHostIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditImageAutoAuthorizedRuleResponse(AbstractModel):
    r"""AddEditImageAutoAuthorizedRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditReverseShellWhiteListRequest(AbstractModel):
    r"""AddEditReverseShellWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListInfo: Information of the allowed item to be added or edited. When an allowed item is added, `WhiteListInfo.id` can be empty; when an allowed item is edited, `WhiteListInfo.id` cannot be empty.
        :type WhiteListInfo: :class:`tencentcloud.tcss.v20201101.models.ReverseShellWhiteListInfo`
        :param _EventId: Used only when an event is added to the allowlist
        :type EventId: str
        """
        self._WhiteListInfo = None
        self._EventId = None

    @property
    def WhiteListInfo(self):
        r"""Information of the allowed item to be added or edited. When an allowed item is added, `WhiteListInfo.id` can be empty; when an allowed item is edited, `WhiteListInfo.id` cannot be empty.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ReverseShellWhiteListInfo`
        """
        return self._WhiteListInfo

    @WhiteListInfo.setter
    def WhiteListInfo(self, WhiteListInfo):
        self._WhiteListInfo = WhiteListInfo

    @property
    def EventId(self):
        r"""Used only when an event is added to the allowlist
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        if params.get("WhiteListInfo") is not None:
            self._WhiteListInfo = ReverseShellWhiteListInfo()
            self._WhiteListInfo._deserialize(params.get("WhiteListInfo"))
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditReverseShellWhiteListResponse(AbstractModel):
    r"""AddEditReverseShellWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditRiskSyscallWhiteListRequest(AbstractModel):
    r"""AddEditRiskSyscallWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Used only when an event is added to the allowlist
        :type EventId: str
        :param _WhiteListInfo: Information of the allowed item to be added or edited. When an allowed item is added, `WhiteListInfo.id` can be empty; when an allowed item is edited, `WhiteListInfo.id` cannot be empty.
        :type WhiteListInfo: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallWhiteListInfo`
        """
        self._EventId = None
        self._WhiteListInfo = None

    @property
    def EventId(self):
        r"""Used only when an event is added to the allowlist
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def WhiteListInfo(self):
        r"""Information of the allowed item to be added or edited. When an allowed item is added, `WhiteListInfo.id` can be empty; when an allowed item is edited, `WhiteListInfo.id` cannot be empty.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallWhiteListInfo`
        """
        return self._WhiteListInfo

    @WhiteListInfo.setter
    def WhiteListInfo(self, WhiteListInfo):
        self._WhiteListInfo = WhiteListInfo


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        if params.get("WhiteListInfo") is not None:
            self._WhiteListInfo = RiskSyscallWhiteListInfo()
            self._WhiteListInfo._deserialize(params.get("WhiteListInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditRiskSyscallWhiteListResponse(AbstractModel):
    r"""AddEditRiskSyscallWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEditWarningRulesRequest(AbstractModel):
    r"""AddEditWarningRules request structure.

    """

    def __init__(self):
        r"""
        :param _WarningRules: Alert switch policy
        :type WarningRules: list of WarningRule
        """
        self._WarningRules = None

    @property
    def WarningRules(self):
        r"""Alert switch policy
        :rtype: list of WarningRule
        """
        return self._WarningRules

    @WarningRules.setter
    def WarningRules(self, WarningRules):
        self._WarningRules = WarningRules


    def _deserialize(self, params):
        if params.get("WarningRules") is not None:
            self._WarningRules = []
            for item in params.get("WarningRules"):
                obj = WarningRule()
                obj._deserialize(item)
                self._WarningRules.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEditWarningRulesResponse(AbstractModel):
    r"""AddEditWarningRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddEscapeWhiteListRequest(AbstractModel):
    r"""AddEscapeWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _EventType: Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :type EventType: list of str
        :param _ImageIDs: Array of allowed image IDs
        :type ImageIDs: list of str
        """
        self._EventType = None
        self._ImageIDs = None

    @property
    def EventType(self):
        r"""Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :rtype: list of str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def ImageIDs(self):
        r"""Array of allowed image IDs
        :rtype: list of str
        """
        return self._ImageIDs

    @ImageIDs.setter
    def ImageIDs(self, ImageIDs):
        self._ImageIDs = ImageIDs


    def _deserialize(self, params):
        self._EventType = params.get("EventType")
        self._ImageIDs = params.get("ImageIDs")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddEscapeWhiteListResponse(AbstractModel):
    r"""AddEscapeWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddIgnoreVulRequest(AbstractModel):
    r"""AddIgnoreVul request structure.

    """

    def __init__(self):
        r"""
        :param _List: List of POC IDs
        :type List: list of ModifyIgnoreVul
        """
        self._List = None

    @property
    def List(self):
        r"""List of POC IDs
        :rtype: list of ModifyIgnoreVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ModifyIgnoreVul()
                obj._deserialize(item)
                self._List.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddIgnoreVulResponse(AbstractModel):
    r"""AddIgnoreVul response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class AddNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""AddNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _FromPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type FromPolicyRule: int
        :param _ToPolicyRule: Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type ToPolicyRule: int
        :param _PodSelector: Pod selector
        :type PodSelector: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _Description: Policy description
        :type Description: str
        :param _CustomPolicy: Custom rule
        :type CustomPolicy: list of NetworkCustomPolicy
        """
        self._ClusterId = None
        self._PolicyName = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._PodSelector = None
        self._Namespace = None
        self._Description = None
        self._CustomPolicy = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def FromPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def PodSelector(self):
        r"""Pod selector
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CustomPolicy(self):
        r"""Custom rule
        :rtype: list of NetworkCustomPolicy
        """
        return self._CustomPolicy

    @CustomPolicy.setter
    def CustomPolicy(self, CustomPolicy):
        self._CustomPolicy = CustomPolicy


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        self._PodSelector = params.get("PodSelector")
        self._Namespace = params.get("Namespace")
        self._Description = params.get("Description")
        if params.get("CustomPolicy") is not None:
            self._CustomPolicy = []
            for item in params.get("CustomPolicy"):
                obj = NetworkCustomPolicy()
                obj._deserialize(item)
                self._CustomPolicy.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""AddNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class AddNetworkFirewallPolicyYamlDetailRequest(AbstractModel):
    r"""AddNetworkFirewallPolicyYamlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _Yaml: Base64-encoded NetworkPolicy YAML string
        :type Yaml: str
        :param _Description: Policy description
        :type Description: str
        """
        self._ClusterId = None
        self._PolicyName = None
        self._Yaml = None
        self._Description = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def Yaml(self):
        r"""Base64-encoded NetworkPolicy YAML string
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddNetworkFirewallPolicyYamlDetailResponse(AbstractModel):
    r"""AddNetworkFirewallPolicyYamlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class AffectedNodeItem(AbstractModel):
    r"""Structure of the affected node type

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _PrivateIpAddresses: Private IP
        :type PrivateIpAddresses: str
        :param _InstanceRole: Node role, such as `Master` and `Work`.
        :type InstanceRole: str
        :param _ClusterVersion: K8s version
        :type ClusterVersion: str
        :param _ContainerRuntime: Runtime component. Valid values: `docker`, `containerd`.
        :type ContainerRuntime: str
        :param _Region: Region
        :type Region: str
        :param _VerifyInfo: Verification information of the check result
        :type VerifyInfo: str
        :param _NodeName: Node name
        :type NodeName: str
        """
        self._ClusterId = None
        self._ClusterName = None
        self._InstanceId = None
        self._PrivateIpAddresses = None
        self._InstanceRole = None
        self._ClusterVersion = None
        self._ContainerRuntime = None
        self._Region = None
        self._VerifyInfo = None
        self._NodeName = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def InstanceId(self):
        r"""Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def PrivateIpAddresses(self):
        r"""Private IP
        :rtype: str
        """
        return self._PrivateIpAddresses

    @PrivateIpAddresses.setter
    def PrivateIpAddresses(self, PrivateIpAddresses):
        self._PrivateIpAddresses = PrivateIpAddresses

    @property
    def InstanceRole(self):
        r"""Node role, such as `Master` and `Work`.
        :rtype: str
        """
        return self._InstanceRole

    @InstanceRole.setter
    def InstanceRole(self, InstanceRole):
        self._InstanceRole = InstanceRole

    @property
    def ClusterVersion(self):
        r"""K8s version
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def ContainerRuntime(self):
        r"""Runtime component. Valid values: `docker`, `containerd`.
        :rtype: str
        """
        return self._ContainerRuntime

    @ContainerRuntime.setter
    def ContainerRuntime(self, ContainerRuntime):
        self._ContainerRuntime = ContainerRuntime

    @property
    def Region(self):
        r"""Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def VerifyInfo(self):
        r"""Verification information of the check result
        :rtype: str
        """
        return self._VerifyInfo

    @VerifyInfo.setter
    def VerifyInfo(self, VerifyInfo):
        self._VerifyInfo = VerifyInfo

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._InstanceId = params.get("InstanceId")
        self._PrivateIpAddresses = params.get("PrivateIpAddresses")
        self._InstanceRole = params.get("InstanceRole")
        self._ClusterVersion = params.get("ClusterVersion")
        self._ContainerRuntime = params.get("ContainerRuntime")
        self._Region = params.get("Region")
        self._VerifyInfo = params.get("VerifyInfo")
        self._NodeName = params.get("NodeName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AffectedWorkloadItem(AbstractModel):
    r"""Affected workload item in the cluster security check

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _WorkloadName: Workload name
        :type WorkloadName: str
        :param _WorkloadType: Workload type
        :type WorkloadType: str
        :param _Region: Region
        :type Region: str
        :param _VerifyInfo: Verification information of the check result
        :type VerifyInfo: str
        """
        self._ClusterId = None
        self._ClusterName = None
        self._WorkloadName = None
        self._WorkloadType = None
        self._Region = None
        self._VerifyInfo = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def WorkloadName(self):
        r"""Workload name
        :rtype: str
        """
        return self._WorkloadName

    @WorkloadName.setter
    def WorkloadName(self, WorkloadName):
        self._WorkloadName = WorkloadName

    @property
    def WorkloadType(self):
        r"""Workload type
        :rtype: str
        """
        return self._WorkloadType

    @WorkloadType.setter
    def WorkloadType(self, WorkloadType):
        self._WorkloadType = WorkloadType

    @property
    def Region(self):
        r"""Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def VerifyInfo(self):
        r"""Verification information of the check result
        :rtype: str
        """
        return self._VerifyInfo

    @VerifyInfo.setter
    def VerifyInfo(self, VerifyInfo):
        self._VerifyInfo = VerifyInfo


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._WorkloadName = params.get("WorkloadName")
        self._WorkloadType = params.get("WorkloadType")
        self._Region = params.get("Region")
        self._VerifyInfo = params.get("VerifyInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetClusterListItem(AbstractModel):
    r"""List of clusters

    """

    def __init__(self):
        r"""
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _Status: Cluster status
`CSR_RUNNING`: Running
`CSR_EXCEPTION`: Abnormal
`CSR_DEL`: Deleted
        :type Status: str
        :param _BindRuleName: Bound rule name
        :type BindRuleName: str
        :param _ClusterType: Cluster type:
`CT_TKE`: TKE cluster
`CT_USER_CREATE`: External cluster
`CT_TKE_SERVERLESS`: TKE Serverless cluster
        :type ClusterType: str
        :param _ClusterVersion: Cluster version
        :type ClusterVersion: str
        :param _MemLimit: MEM usage
        :type MemLimit: int
        :param _CpuLimit: cpu
        :type CpuLimit: int
        """
        self._ClusterID = None
        self._ClusterName = None
        self._Status = None
        self._BindRuleName = None
        self._ClusterType = None
        self._ClusterVersion = None
        self._MemLimit = None
        self._CpuLimit = None

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def Status(self):
        r"""Cluster status
`CSR_RUNNING`: Running
`CSR_EXCEPTION`: Abnormal
`CSR_DEL`: Deleted
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def BindRuleName(self):
        r"""Bound rule name
        :rtype: str
        """
        return self._BindRuleName

    @BindRuleName.setter
    def BindRuleName(self, BindRuleName):
        self._BindRuleName = BindRuleName

    @property
    def ClusterType(self):
        r"""Cluster type:
`CT_TKE`: TKE cluster
`CT_USER_CREATE`: External cluster
`CT_TKE_SERVERLESS`: TKE Serverless cluster
        :rtype: str
        """
        return self._ClusterType

    @ClusterType.setter
    def ClusterType(self, ClusterType):
        self._ClusterType = ClusterType

    @property
    def ClusterVersion(self):
        r"""Cluster version
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def MemLimit(self):
        r"""MEM usage
        :rtype: int
        """
        return self._MemLimit

    @MemLimit.setter
    def MemLimit(self, MemLimit):
        self._MemLimit = MemLimit

    @property
    def CpuLimit(self):
        r"""cpu
        :rtype: int
        """
        return self._CpuLimit

    @CpuLimit.setter
    def CpuLimit(self, CpuLimit):
        self._CpuLimit = CpuLimit


    def _deserialize(self, params):
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._Status = params.get("Status")
        self._BindRuleName = params.get("BindRuleName")
        self._ClusterType = params.get("ClusterType")
        self._ClusterVersion = params.get("ClusterVersion")
        self._MemLimit = params.get("MemLimit")
        self._CpuLimit = params.get("CpuLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetFilters(AbstractModel):
    r"""TCSS
    Key-value pair filter for conditional filtering queries, such as filter ID, name, and status
    If more than one filter exists, the logical relationship between these filters is `AND`.
    If multiple values exist in one filter, the logical relationship between these values is `OR`.

    """

    def __init__(self):
        r"""
        :param _Name: Filter name
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Whether to use fuzzy query
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        r"""Filter name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        r"""One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        r"""Whether to use fuzzy query
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AssetSimpleImageInfo(AbstractModel):
    r"""Brief information of the image

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ContainerCnt: Number of associated containers
        :type ContainerCnt: int
        :param _ScanTime: Last scan time
        :type ScanTime: str
        :param _Size: Image size
        :type Size: int
        """
        self._ImageID = None
        self._ImageName = None
        self._ContainerCnt = None
        self._ScanTime = None
        self._Size = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ContainerCnt(self):
        r"""Number of associated containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def ScanTime(self):
        r"""Last scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def Size(self):
        r"""Image size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._ContainerCnt = params.get("ContainerCnt")
        self._ScanTime = params.get("ScanTime")
        self._Size = params.get("Size")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AutoAuthorizedImageInfo(AbstractModel):
    r"""Result of the automatic image licensing

    """

    def __init__(self):
        r"""
        :param _ImageId: Image ID
        :type ImageId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _AuthorizedTime: Licensing time
        :type AuthorizedTime: str
        :param _Status: Licensing result. Valid values: `SUCCESS` (success); `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :type Status: str
        :param _IsAuthorized: Whether it is licensed. Valid values: `1` (yes); `0` (no).
        :type IsAuthorized: int
        """
        self._ImageId = None
        self._ImageName = None
        self._AuthorizedTime = None
        self._Status = None
        self._IsAuthorized = None

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def AuthorizedTime(self):
        r"""Licensing time
        :rtype: str
        """
        return self._AuthorizedTime

    @AuthorizedTime.setter
    def AuthorizedTime(self, AuthorizedTime):
        self._AuthorizedTime = AuthorizedTime

    @property
    def Status(self):
        r"""Licensing result. Valid values: `SUCCESS` (success); `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsAuthorized(self):
        r"""Whether it is licensed. Valid values: `1` (yes); `0` (no).
        :rtype: int
        """
        return self._IsAuthorized

    @IsAuthorized.setter
    def IsAuthorized(self, IsAuthorized):
        self._IsAuthorized = IsAuthorized


    def _deserialize(self, params):
        self._ImageId = params.get("ImageId")
        self._ImageName = params.get("ImageName")
        self._AuthorizedTime = params.get("AuthorizedTime")
        self._Status = params.get("Status")
        self._IsAuthorized = params.get("IsAuthorized")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AutoAuthorizedRuleHostInfo(AbstractModel):
    r"""List of servers licensed based on the automatic image licensing rule

    """

    def __init__(self):
        r"""
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP, which is the private IP
        :type HostIP: str
        :param _HostName: Server name
        :type HostName: str
        :param _ImageCnt: Number of images
        :type ImageCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _InstanceID: Server instance ID
        :type InstanceID: str
        :param _MachineType: Server source. Valid values: `CVM`, `ECM`, `LH`, `BM`, `Other`. The first four values indicate Tencent Cloud instances, while the last one indicates non-Tencent Cloud instances.
        :type MachineType: str
        :param _DockerVersion: Docker version
        :type DockerVersion: str
        :param _Status: Agent status
        :type Status: str
        """
        self._HostID = None
        self._HostIP = None
        self._HostName = None
        self._ImageCnt = None
        self._ContainerCnt = None
        self._PublicIp = None
        self._InstanceID = None
        self._MachineType = None
        self._DockerVersion = None
        self._Status = None

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP, which is the private IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def ImageCnt(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def InstanceID(self):
        r"""Server instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def MachineType(self):
        r"""Server source. Valid values: `CVM`, `ECM`, `LH`, `BM`, `Other`. The first four values indicate Tencent Cloud instances, while the last one indicates non-Tencent Cloud instances.
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def DockerVersion(self):
        r"""Docker version
        :rtype: str
        """
        return self._DockerVersion

    @DockerVersion.setter
    def DockerVersion(self, DockerVersion):
        self._DockerVersion = DockerVersion

    @property
    def Status(self):
        r"""Agent status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._HostName = params.get("HostName")
        self._ImageCnt = params.get("ImageCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._PublicIp = params.get("PublicIp")
        self._InstanceID = params.get("InstanceID")
        self._MachineType = params.get("MachineType")
        self._DockerVersion = params.get("DockerVersion")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CKafkaInstanceInfo(AbstractModel):
    r"""Optional information of the security log Kafka

    """

    def __init__(self):
        r"""
        :param _InstanceID: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceID: str
        :param _InstanceName: Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceName: str
        :param _TopicList: Topic list
Note: This field may return null, indicating that no valid values can be obtained.
        :type TopicList: list of CKafkaTopicInfo
        :param _RouteList: Route list
Note: This field may return null, indicating that no valid values can be obtained.
        :type RouteList: list of CkafkaRouteInfo
        :param _KafkaVersion: Kafka version number
Note: This field may return null, indicating that no valid values can be obtained.
        :type KafkaVersion: str
        """
        self._InstanceID = None
        self._InstanceName = None
        self._TopicList = None
        self._RouteList = None
        self._KafkaVersion = None

    @property
    def InstanceID(self):
        r"""Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def InstanceName(self):
        r"""Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def TopicList(self):
        r"""Topic list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of CKafkaTopicInfo
        """
        return self._TopicList

    @TopicList.setter
    def TopicList(self, TopicList):
        self._TopicList = TopicList

    @property
    def RouteList(self):
        r"""Route list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of CkafkaRouteInfo
        """
        return self._RouteList

    @RouteList.setter
    def RouteList(self, RouteList):
        self._RouteList = RouteList

    @property
    def KafkaVersion(self):
        r"""Kafka version number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._KafkaVersion

    @KafkaVersion.setter
    def KafkaVersion(self, KafkaVersion):
        self._KafkaVersion = KafkaVersion


    def _deserialize(self, params):
        self._InstanceID = params.get("InstanceID")
        self._InstanceName = params.get("InstanceName")
        if params.get("TopicList") is not None:
            self._TopicList = []
            for item in params.get("TopicList"):
                obj = CKafkaTopicInfo()
                obj._deserialize(item)
                self._TopicList.append(obj)
        if params.get("RouteList") is not None:
            self._RouteList = []
            for item in params.get("RouteList"):
                obj = CkafkaRouteInfo()
                obj._deserialize(item)
                self._RouteList.append(obj)
        self._KafkaVersion = params.get("KafkaVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CKafkaTopicInfo(AbstractModel):
    r"""CKafka topic information

    """

    def __init__(self):
        r"""
        :param _TopicID: Topic ID
        :type TopicID: str
        :param _TopicName: Topic name
        :type TopicName: str
        """
        self._TopicID = None
        self._TopicName = None

    @property
    def TopicID(self):
        r"""Topic ID
        :rtype: str
        """
        return self._TopicID

    @TopicID.setter
    def TopicID(self, TopicID):
        self._TopicID = TopicID

    @property
    def TopicName(self):
        r"""Topic name
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName


    def _deserialize(self, params):
        self._TopicID = params.get("TopicID")
        self._TopicName = params.get("TopicName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckNetworkFirewallPolicyYamlRequest(AbstractModel):
    r"""CheckNetworkFirewallPolicyYaml request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _Yaml: Base64-encoded NetworkPolicy YAML string
        :type Yaml: str
        :param _Description: Policy description
        :type Description: str
        """
        self._ClusterId = None
        self._PolicyName = None
        self._Yaml = None
        self._Description = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def Yaml(self):
        r"""Base64-encoded NetworkPolicy YAML string
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckNetworkFirewallPolicyYamlResponse(AbstractModel):
    r"""CheckNetworkFirewallPolicyYaml response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CheckRepeatAssetImageRegistryRequest(AbstractModel):
    r"""CheckRepeatAssetImageRegistry request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Repository name
        :type Name: str
        """
        self._Name = None

    @property
    def Name(self):
        r"""Repository name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckRepeatAssetImageRegistryResponse(AbstractModel):
    r"""CheckRepeatAssetImageRegistry response structure.

    """

    def __init__(self):
        r"""
        :param _IsRepeat: Whether it is repeated
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsRepeat: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsRepeat = None
        self._RequestId = None

    @property
    def IsRepeat(self):
        r"""Whether it is repeated
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._IsRepeat

    @IsRepeat.setter
    def IsRepeat(self, IsRepeat):
        self._IsRepeat = IsRepeat

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsRepeat = params.get("IsRepeat")
        self._RequestId = params.get("RequestId")


class CkafkaRouteInfo(AbstractModel):
    r"""CKafka route details

    """

    def __init__(self):
        r"""
        :param _RouteID: Route ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RouteID: int
        :param _Domain: Domain name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Domain: str
        :param _DomainPort: Domain port
Note: This field may return null, indicating that no valid values can be obtained.
        :type DomainPort: int
        :param _Vip: VIP
Note: This field may return null, indicating that no valid values can be obtained.
        :type Vip: str
        :param _VipType: VIP type
Note: This field may return null, indicating that no valid values can be obtained.
        :type VipType: int
        :param _AccessType: Access type
// `0`: PLAINTEXT (plaintext method, which does not carry user information and is supported for legacy versions and Community Edition)
	// `1`: SASL_PLAINTEXT (plaintext method, which authenticates the login through SASL before data start and is supported only for Community Edition)
	// `2`: SSL (SSL-encrypted communication, which does not carry user information and is supported for legacy versions and Community Edition)
	// `3`: SASL_SSL (SSL-encrypted communication, which authenticates the login through SASL before data start and is supported only for Community Edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :type AccessType: int
        """
        self._RouteID = None
        self._Domain = None
        self._DomainPort = None
        self._Vip = None
        self._VipType = None
        self._AccessType = None

    @property
    def RouteID(self):
        r"""Route ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RouteID

    @RouteID.setter
    def RouteID(self, RouteID):
        self._RouteID = RouteID

    @property
    def Domain(self):
        r"""Domain name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def DomainPort(self):
        r"""Domain port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DomainPort

    @DomainPort.setter
    def DomainPort(self, DomainPort):
        self._DomainPort = DomainPort

    @property
    def Vip(self):
        r"""VIP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Vip

    @Vip.setter
    def Vip(self, Vip):
        self._Vip = Vip

    @property
    def VipType(self):
        r"""VIP type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VipType

    @VipType.setter
    def VipType(self, VipType):
        self._VipType = VipType

    @property
    def AccessType(self):
        r"""Access type
// `0`: PLAINTEXT (plaintext method, which does not carry user information and is supported for legacy versions and Community Edition)
	// `1`: SASL_PLAINTEXT (plaintext method, which authenticates the login through SASL before data start and is supported only for Community Edition)
	// `2`: SSL (SSL-encrypted communication, which does not carry user information and is supported for legacy versions and Community Edition)
	// `3`: SASL_SSL (SSL-encrypted communication, which authenticates the login through SASL before data start and is supported only for Community Edition)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType


    def _deserialize(self, params):
        self._RouteID = params.get("RouteID")
        self._Domain = params.get("Domain")
        self._DomainPort = params.get("DomainPort")
        self._Vip = params.get("Vip")
        self._VipType = params.get("VipType")
        self._AccessType = params.get("AccessType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClsLogsetInfo(AbstractModel):
    r"""CLS logset information

    """

    def __init__(self):
        r"""
        :param _LogsetID: Logset ID
        :type LogsetID: str
        :param _LogsetName: Logset name
Note: This field may return null, indicating that no valid values can be obtained.
        :type LogsetName: str
        :param _TopicList: List of CLS topics
Note: This field may return null, indicating that no valid values can be obtained.
        :type TopicList: list of ClsTopicInfo
        """
        self._LogsetID = None
        self._LogsetName = None
        self._TopicList = None

    @property
    def LogsetID(self):
        r"""Logset ID
        :rtype: str
        """
        return self._LogsetID

    @LogsetID.setter
    def LogsetID(self, LogsetID):
        self._LogsetID = LogsetID

    @property
    def LogsetName(self):
        r"""Logset name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LogsetName

    @LogsetName.setter
    def LogsetName(self, LogsetName):
        self._LogsetName = LogsetName

    @property
    def TopicList(self):
        r"""List of CLS topics
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ClsTopicInfo
        """
        return self._TopicList

    @TopicList.setter
    def TopicList(self, TopicList):
        self._TopicList = TopicList


    def _deserialize(self, params):
        self._LogsetID = params.get("LogsetID")
        self._LogsetName = params.get("LogsetName")
        if params.get("TopicList") is not None:
            self._TopicList = []
            for item in params.get("TopicList"):
                obj = ClsTopicInfo()
                obj._deserialize(item)
                self._TopicList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClsTopicInfo(AbstractModel):
    r"""CLS topic information

    """

    def __init__(self):
        r"""
        :param _TopicID: Topic ID
        :type TopicID: str
        :param _TopicName: Topic name
        :type TopicName: str
        """
        self._TopicID = None
        self._TopicName = None

    @property
    def TopicID(self):
        r"""Topic ID
        :rtype: str
        """
        return self._TopicID

    @TopicID.setter
    def TopicID(self, TopicID):
        self._TopicID = TopicID

    @property
    def TopicName(self):
        r"""Topic name
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName


    def _deserialize(self, params):
        self._TopicID = params.get("TopicID")
        self._TopicName = params.get("TopicName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterCheckItem(AbstractModel):
    r"""Details of a cluster security check item

    """

    def __init__(self):
        r"""
        :param _CheckItemId: Unique ID of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckItemId: int
        :param _Name: Name of the risk item
        :type Name: str
        :param _ItemDetail: Detailed description of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :type ItemDetail: str
        :param _RiskLevel: Severity. Valid values: `Serious` (critical); `High` (high); `Middle` (medium); `Hint` (prompt).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: str
        :param _RiskTarget: Check target and risky target. Valid values: `Runc`, `Kubelet`, `Containerd`, `Pods`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskTarget: str
        :param _RiskType: Risk type. Valid values: `CVERisk` (vulnerability risk); `ConfigRisk` (configuration risk).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskType: str
        :param _RiskAttribute: Risk type of the check item. Valid values: `PrivilegePromotion` (privilege escalation); `RefuseService` (service rejected); `DirectoryEscape` (directory traversal); `UnauthorizedAccess` (unauthorized access); `PrivilegeAndAccessControl` (permissions, privileges, and access controls); `SensitiveInfoLeak` (sensitive data leakage).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskAttribute: str
        :param _RiskProperty: Risk characteristic and tag. Valid values: `ExistEXP` (an EXP exists); `ExistPOC` (a POC exists); `NoNeedReboot` (restart not required); `ServerRestart` (service restart); `RemoteInfoLeak` (remote information leakage); `RemoteRefuseService` (remote denial of service); `RemoteExploit` (remote exploit); `RemoteExecute` (remote execution).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskProperty: str
        :param _CVENumber: CVE No.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVENumber: str
        :param _DiscoverTime: Disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :type DiscoverTime: str
        :param _Solution: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type Solution: str
        :param _CVSS: CVSS information, which is used for drawing.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVSS: str
        :param _CVSSScore: CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVSSScore: str
        :param _RelateLink: Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :type RelateLink: str
        :param _AffectedType: Affected type. Valid values: `Node`, `Workload`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type AffectedType: str
        :param _AffectedVersion: Affected version information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AffectedVersion: str
        :param _IgnoredAssetNum: Number of ignored assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type IgnoredAssetNum: int
        :param _IsIgnored: Whether to ignore the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsIgnored: bool
        :param _RiskAssessment: Impact assessment
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskAssessment: str
        """
        self._CheckItemId = None
        self._Name = None
        self._ItemDetail = None
        self._RiskLevel = None
        self._RiskTarget = None
        self._RiskType = None
        self._RiskAttribute = None
        self._RiskProperty = None
        self._CVENumber = None
        self._DiscoverTime = None
        self._Solution = None
        self._CVSS = None
        self._CVSSScore = None
        self._RelateLink = None
        self._AffectedType = None
        self._AffectedVersion = None
        self._IgnoredAssetNum = None
        self._IsIgnored = None
        self._RiskAssessment = None

    @property
    def CheckItemId(self):
        r"""Unique ID of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CheckItemId

    @CheckItemId.setter
    def CheckItemId(self, CheckItemId):
        self._CheckItemId = CheckItemId

    @property
    def Name(self):
        r"""Name of the risk item
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ItemDetail(self):
        r"""Detailed description of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ItemDetail

    @ItemDetail.setter
    def ItemDetail(self, ItemDetail):
        self._ItemDetail = ItemDetail

    @property
    def RiskLevel(self):
        r"""Severity. Valid values: `Serious` (critical); `High` (high); `Middle` (medium); `Hint` (prompt).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def RiskTarget(self):
        r"""Check target and risky target. Valid values: `Runc`, `Kubelet`, `Containerd`, `Pods`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskTarget

    @RiskTarget.setter
    def RiskTarget(self, RiskTarget):
        self._RiskTarget = RiskTarget

    @property
    def RiskType(self):
        r"""Risk type. Valid values: `CVERisk` (vulnerability risk); `ConfigRisk` (configuration risk).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskType

    @RiskType.setter
    def RiskType(self, RiskType):
        self._RiskType = RiskType

    @property
    def RiskAttribute(self):
        r"""Risk type of the check item. Valid values: `PrivilegePromotion` (privilege escalation); `RefuseService` (service rejected); `DirectoryEscape` (directory traversal); `UnauthorizedAccess` (unauthorized access); `PrivilegeAndAccessControl` (permissions, privileges, and access controls); `SensitiveInfoLeak` (sensitive data leakage).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskAttribute

    @RiskAttribute.setter
    def RiskAttribute(self, RiskAttribute):
        self._RiskAttribute = RiskAttribute

    @property
    def RiskProperty(self):
        r"""Risk characteristic and tag. Valid values: `ExistEXP` (an EXP exists); `ExistPOC` (a POC exists); `NoNeedReboot` (restart not required); `ServerRestart` (service restart); `RemoteInfoLeak` (remote information leakage); `RemoteRefuseService` (remote denial of service); `RemoteExploit` (remote exploit); `RemoteExecute` (remote execution).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskProperty

    @RiskProperty.setter
    def RiskProperty(self, RiskProperty):
        self._RiskProperty = RiskProperty

    @property
    def CVENumber(self):
        r"""CVE No.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CVENumber

    @CVENumber.setter
    def CVENumber(self, CVENumber):
        self._CVENumber = CVENumber

    @property
    def DiscoverTime(self):
        r"""Disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DiscoverTime

    @DiscoverTime.setter
    def DiscoverTime(self, DiscoverTime):
        self._DiscoverTime = DiscoverTime

    @property
    def Solution(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def CVSS(self):
        r"""CVSS information, which is used for drawing.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CVSS

    @CVSS.setter
    def CVSS(self, CVSS):
        self._CVSS = CVSS

    @property
    def CVSSScore(self):
        r"""CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CVSSScore

    @CVSSScore.setter
    def CVSSScore(self, CVSSScore):
        self._CVSSScore = CVSSScore

    @property
    def RelateLink(self):
        r"""Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RelateLink

    @RelateLink.setter
    def RelateLink(self, RelateLink):
        self._RelateLink = RelateLink

    @property
    def AffectedType(self):
        r"""Affected type. Valid values: `Node`, `Workload`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AffectedType

    @AffectedType.setter
    def AffectedType(self, AffectedType):
        self._AffectedType = AffectedType

    @property
    def AffectedVersion(self):
        r"""Affected version information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AffectedVersion

    @AffectedVersion.setter
    def AffectedVersion(self, AffectedVersion):
        self._AffectedVersion = AffectedVersion

    @property
    def IgnoredAssetNum(self):
        r"""Number of ignored assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IgnoredAssetNum

    @IgnoredAssetNum.setter
    def IgnoredAssetNum(self, IgnoredAssetNum):
        self._IgnoredAssetNum = IgnoredAssetNum

    @property
    def IsIgnored(self):
        r"""Whether to ignore the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._IsIgnored

    @IsIgnored.setter
    def IsIgnored(self, IsIgnored):
        self._IsIgnored = IsIgnored

    @property
    def RiskAssessment(self):
        r"""Impact assessment
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskAssessment

    @RiskAssessment.setter
    def RiskAssessment(self, RiskAssessment):
        self._RiskAssessment = RiskAssessment


    def _deserialize(self, params):
        self._CheckItemId = params.get("CheckItemId")
        self._Name = params.get("Name")
        self._ItemDetail = params.get("ItemDetail")
        self._RiskLevel = params.get("RiskLevel")
        self._RiskTarget = params.get("RiskTarget")
        self._RiskType = params.get("RiskType")
        self._RiskAttribute = params.get("RiskAttribute")
        self._RiskProperty = params.get("RiskProperty")
        self._CVENumber = params.get("CVENumber")
        self._DiscoverTime = params.get("DiscoverTime")
        self._Solution = params.get("Solution")
        self._CVSS = params.get("CVSS")
        self._CVSSScore = params.get("CVSSScore")
        self._RelateLink = params.get("RelateLink")
        self._AffectedType = params.get("AffectedType")
        self._AffectedVersion = params.get("AffectedVersion")
        self._IgnoredAssetNum = params.get("IgnoredAssetNum")
        self._IsIgnored = params.get("IsIgnored")
        self._RiskAssessment = params.get("RiskAssessment")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterCheckTaskItem(AbstractModel):
    r"""Input parameters for a cluster check task

    """

    def __init__(self):
        r"""
        :param _ClusterId: ID of the specified cluster to be scanned
        :type ClusterId: str
        :param _ClusterRegion: Cluster region
        :type ClusterRegion: str
        :param _NodeIp: IP of the specified node to be scanned
        :type NodeIp: str
        :param _WorkloadName: Name of the specified workload to be scanned
        :type WorkloadName: str
        """
        self._ClusterId = None
        self._ClusterRegion = None
        self._NodeIp = None
        self._WorkloadName = None

    @property
    def ClusterId(self):
        r"""ID of the specified cluster to be scanned
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterRegion(self):
        r"""Cluster region
        :rtype: str
        """
        return self._ClusterRegion

    @ClusterRegion.setter
    def ClusterRegion(self, ClusterRegion):
        self._ClusterRegion = ClusterRegion

    @property
    def NodeIp(self):
        r"""IP of the specified node to be scanned
        :rtype: str
        """
        return self._NodeIp

    @NodeIp.setter
    def NodeIp(self, NodeIp):
        self._NodeIp = NodeIp

    @property
    def WorkloadName(self):
        r"""Name of the specified workload to be scanned
        :rtype: str
        """
        return self._WorkloadName

    @WorkloadName.setter
    def WorkloadName(self, WorkloadName):
        self._WorkloadName = WorkloadName


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterRegion = params.get("ClusterRegion")
        self._NodeIp = params.get("NodeIp")
        self._WorkloadName = params.get("WorkloadName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterCreateComponentItem(AbstractModel):
    r"""Input parameters for `CreateCheckComponent`, which are used to batch install defenders.

    """

    def __init__(self):
        r"""
        :param _ClusterId: ID of the cluster for which to install the component
        :type ClusterId: str
        :param _ClusterRegion: Cluster region
        :type ClusterRegion: str
        """
        self._ClusterId = None
        self._ClusterRegion = None

    @property
    def ClusterId(self):
        r"""ID of the cluster for which to install the component
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterRegion(self):
        r"""Cluster region
        :rtype: str
        """
        return self._ClusterRegion

    @ClusterRegion.setter
    def ClusterRegion(self, ClusterRegion):
        self._ClusterRegion = ClusterRegion


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterRegion = params.get("ClusterRegion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterCustomParameters(AbstractModel):
    r"""Custom parameters of the cluster

    """

    def __init__(self):
        r"""
        :param _Name: Parameter name
        :type Name: str
        :param _Values: Parameter value
        :type Values: list of str
        """
        self._Name = None
        self._Values = None

    @property
    def Name(self):
        r"""Parameter name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        r"""Parameter value
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterInfoItem(AbstractModel):
    r"""Response parameters structure of the cluster asset

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _ClusterVersion: Cluster version
        :type ClusterVersion: str
        :param _ClusterOs: Cluster OS
        :type ClusterOs: str
        :param _ClusterType: Cluster type
        :type ClusterType: str
        :param _ClusterNodeNum: Number of nodes in the cluster
        :type ClusterNodeNum: int
        :param _Region: Cluster region
        :type Region: str
        :param _DefenderStatus: Status of the monitoring component. Valid values: `Defender_Uninstall`, `Defender_Normal`, `Defender_Error`, `Defender_Installing`.
        :type DefenderStatus: str
        :param _ClusterStatus: Cluster status
        :type ClusterStatus: str
        :param _ClusterCheckMode: Cluster check mode. Valid values: `Cluster_Normal`, `Cluster_Actived`.
        :type ClusterCheckMode: str
        :param _ClusterAutoCheck: Whether automatic and regular check is enabled
        :type ClusterAutoCheck: bool
        :param _DefenderErrorReason: Cause of the failure to deploy the defender. When it is `UserDaemonSetNotReady`, `UnreadyNodeNum` is changed to "The defenders on N nodes are ready". If it is another value, the error message is directly displayed.
        :type DefenderErrorReason: str
        :param _UnreadyNodeNum: Number of nodes where the defender is not ready
        :type UnreadyNodeNum: int
        :param _SeriousRiskCount: Number of critical check items
        :type SeriousRiskCount: int
        :param _HighRiskCount: Number of high-risk check items
        :type HighRiskCount: int
        :param _MiddleRiskCount: Number of medium-risk check items
        :type MiddleRiskCount: int
        :param _HintRiskCount: Number of prompt-risk check items
        :type HintRiskCount: int
        :param _CheckFailReason: Check failure cause
        :type CheckFailReason: str
        :param _CheckStatus: Check status. Valid values: `Task_Running`, `NoRisk`, `HasRisk`, `Uncheck`, `Task_Error`.
        :type CheckStatus: str
        :param _TaskCreateTime: Task creation time and check time
        :type TaskCreateTime: str
        """
        self._ClusterId = None
        self._ClusterName = None
        self._ClusterVersion = None
        self._ClusterOs = None
        self._ClusterType = None
        self._ClusterNodeNum = None
        self._Region = None
        self._DefenderStatus = None
        self._ClusterStatus = None
        self._ClusterCheckMode = None
        self._ClusterAutoCheck = None
        self._DefenderErrorReason = None
        self._UnreadyNodeNum = None
        self._SeriousRiskCount = None
        self._HighRiskCount = None
        self._MiddleRiskCount = None
        self._HintRiskCount = None
        self._CheckFailReason = None
        self._CheckStatus = None
        self._TaskCreateTime = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterVersion(self):
        r"""Cluster version
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def ClusterOs(self):
        r"""Cluster OS
        :rtype: str
        """
        return self._ClusterOs

    @ClusterOs.setter
    def ClusterOs(self, ClusterOs):
        self._ClusterOs = ClusterOs

    @property
    def ClusterType(self):
        r"""Cluster type
        :rtype: str
        """
        return self._ClusterType

    @ClusterType.setter
    def ClusterType(self, ClusterType):
        self._ClusterType = ClusterType

    @property
    def ClusterNodeNum(self):
        r"""Number of nodes in the cluster
        :rtype: int
        """
        return self._ClusterNodeNum

    @ClusterNodeNum.setter
    def ClusterNodeNum(self, ClusterNodeNum):
        self._ClusterNodeNum = ClusterNodeNum

    @property
    def Region(self):
        r"""Cluster region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def DefenderStatus(self):
        r"""Status of the monitoring component. Valid values: `Defender_Uninstall`, `Defender_Normal`, `Defender_Error`, `Defender_Installing`.
        :rtype: str
        """
        return self._DefenderStatus

    @DefenderStatus.setter
    def DefenderStatus(self, DefenderStatus):
        self._DefenderStatus = DefenderStatus

    @property
    def ClusterStatus(self):
        r"""Cluster status
        :rtype: str
        """
        return self._ClusterStatus

    @ClusterStatus.setter
    def ClusterStatus(self, ClusterStatus):
        self._ClusterStatus = ClusterStatus

    @property
    def ClusterCheckMode(self):
        r"""Cluster check mode. Valid values: `Cluster_Normal`, `Cluster_Actived`.
        :rtype: str
        """
        return self._ClusterCheckMode

    @ClusterCheckMode.setter
    def ClusterCheckMode(self, ClusterCheckMode):
        self._ClusterCheckMode = ClusterCheckMode

    @property
    def ClusterAutoCheck(self):
        r"""Whether automatic and regular check is enabled
        :rtype: bool
        """
        return self._ClusterAutoCheck

    @ClusterAutoCheck.setter
    def ClusterAutoCheck(self, ClusterAutoCheck):
        self._ClusterAutoCheck = ClusterAutoCheck

    @property
    def DefenderErrorReason(self):
        r"""Cause of the failure to deploy the defender. When it is `UserDaemonSetNotReady`, `UnreadyNodeNum` is changed to "The defenders on N nodes are ready". If it is another value, the error message is directly displayed.
        :rtype: str
        """
        return self._DefenderErrorReason

    @DefenderErrorReason.setter
    def DefenderErrorReason(self, DefenderErrorReason):
        self._DefenderErrorReason = DefenderErrorReason

    @property
    def UnreadyNodeNum(self):
        r"""Number of nodes where the defender is not ready
        :rtype: int
        """
        return self._UnreadyNodeNum

    @UnreadyNodeNum.setter
    def UnreadyNodeNum(self, UnreadyNodeNum):
        self._UnreadyNodeNum = UnreadyNodeNum

    @property
    def SeriousRiskCount(self):
        r"""Number of critical check items
        :rtype: int
        """
        return self._SeriousRiskCount

    @SeriousRiskCount.setter
    def SeriousRiskCount(self, SeriousRiskCount):
        self._SeriousRiskCount = SeriousRiskCount

    @property
    def HighRiskCount(self):
        r"""Number of high-risk check items
        :rtype: int
        """
        return self._HighRiskCount

    @HighRiskCount.setter
    def HighRiskCount(self, HighRiskCount):
        self._HighRiskCount = HighRiskCount

    @property
    def MiddleRiskCount(self):
        r"""Number of medium-risk check items
        :rtype: int
        """
        return self._MiddleRiskCount

    @MiddleRiskCount.setter
    def MiddleRiskCount(self, MiddleRiskCount):
        self._MiddleRiskCount = MiddleRiskCount

    @property
    def HintRiskCount(self):
        r"""Number of prompt-risk check items
        :rtype: int
        """
        return self._HintRiskCount

    @HintRiskCount.setter
    def HintRiskCount(self, HintRiskCount):
        self._HintRiskCount = HintRiskCount

    @property
    def CheckFailReason(self):
        r"""Check failure cause
        :rtype: str
        """
        return self._CheckFailReason

    @CheckFailReason.setter
    def CheckFailReason(self, CheckFailReason):
        self._CheckFailReason = CheckFailReason

    @property
    def CheckStatus(self):
        r"""Check status. Valid values: `Task_Running`, `NoRisk`, `HasRisk`, `Uncheck`, `Task_Error`.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def TaskCreateTime(self):
        r"""Task creation time and check time
        :rtype: str
        """
        return self._TaskCreateTime

    @TaskCreateTime.setter
    def TaskCreateTime(self, TaskCreateTime):
        self._TaskCreateTime = TaskCreateTime


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._ClusterVersion = params.get("ClusterVersion")
        self._ClusterOs = params.get("ClusterOs")
        self._ClusterType = params.get("ClusterType")
        self._ClusterNodeNum = params.get("ClusterNodeNum")
        self._Region = params.get("Region")
        self._DefenderStatus = params.get("DefenderStatus")
        self._ClusterStatus = params.get("ClusterStatus")
        self._ClusterCheckMode = params.get("ClusterCheckMode")
        self._ClusterAutoCheck = params.get("ClusterAutoCheck")
        self._DefenderErrorReason = params.get("DefenderErrorReason")
        self._UnreadyNodeNum = params.get("UnreadyNodeNum")
        self._SeriousRiskCount = params.get("SeriousRiskCount")
        self._HighRiskCount = params.get("HighRiskCount")
        self._MiddleRiskCount = params.get("MiddleRiskCount")
        self._HintRiskCount = params.get("HintRiskCount")
        self._CheckFailReason = params.get("CheckFailReason")
        self._CheckStatus = params.get("CheckStatus")
        self._TaskCreateTime = params.get("TaskCreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ClusterRiskItem(AbstractModel):
    r"""A risk item is a check item with an issue found in the check, with certain information of the check result.

    """

    def __init__(self):
        r"""
        :param _CheckItem: Check item information
        :type CheckItem: :class:`tencentcloud.tcss.v20201101.models.ClusterCheckItem`
        :param _VerifyInfo: Verification information
        :type VerifyInfo: str
        :param _ErrorMessage: Event description and check error message
        :type ErrorMessage: str
        :param _AffectedClusterCount: Number of affected clusters
        :type AffectedClusterCount: int
        :param _AffectedNodeCount: Number of affected nodes
        :type AffectedNodeCount: int
        """
        self._CheckItem = None
        self._VerifyInfo = None
        self._ErrorMessage = None
        self._AffectedClusterCount = None
        self._AffectedNodeCount = None

    @property
    def CheckItem(self):
        r"""Check item information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ClusterCheckItem`
        """
        return self._CheckItem

    @CheckItem.setter
    def CheckItem(self, CheckItem):
        self._CheckItem = CheckItem

    @property
    def VerifyInfo(self):
        r"""Verification information
        :rtype: str
        """
        return self._VerifyInfo

    @VerifyInfo.setter
    def VerifyInfo(self, VerifyInfo):
        self._VerifyInfo = VerifyInfo

    @property
    def ErrorMessage(self):
        r"""Event description and check error message
        :rtype: str
        """
        return self._ErrorMessage

    @ErrorMessage.setter
    def ErrorMessage(self, ErrorMessage):
        self._ErrorMessage = ErrorMessage

    @property
    def AffectedClusterCount(self):
        r"""Number of affected clusters
        :rtype: int
        """
        return self._AffectedClusterCount

    @AffectedClusterCount.setter
    def AffectedClusterCount(self, AffectedClusterCount):
        self._AffectedClusterCount = AffectedClusterCount

    @property
    def AffectedNodeCount(self):
        r"""Number of affected nodes
        :rtype: int
        """
        return self._AffectedNodeCount

    @AffectedNodeCount.setter
    def AffectedNodeCount(self, AffectedNodeCount):
        self._AffectedNodeCount = AffectedNodeCount


    def _deserialize(self, params):
        if params.get("CheckItem") is not None:
            self._CheckItem = ClusterCheckItem()
            self._CheckItem._deserialize(params.get("CheckItem"))
        self._VerifyInfo = params.get("VerifyInfo")
        self._ErrorMessage = params.get("ErrorMessage")
        self._AffectedClusterCount = params.get("AffectedClusterCount")
        self._AffectedNodeCount = params.get("AffectedNodeCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAffectedAsset(AbstractModel):
    r"""Information of the asset affected by the check item

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Unique ID of the customer asset
        :type CustomerAssetId: int
        :param _AssetName: Asset name
        :type AssetName: str
        :param _AssetType: Asset type
        :type AssetType: str
        :param _CheckStatus: Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _LastCheckTime: Last check time in the format of "YYYY-MM-DD HH:m::SS"

It is "0000-00-00 00:00:00" if no check has been performed.
        :type LastCheckTime: str
        :param _CheckResult: Check result. Valid values:

`RESULT_FAILED`: Failed.

`RESULT_PASSED`: Passed.
        :type CheckResult: str
        :param _HostIP: Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIP: str
        :param _ImageTag: Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageTag: str
        :param _VerifyInfo: Verification information of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :type VerifyInfo: str
        :param _InstanceId: Instance ID
Note: This field may return `null`, indicating that no valid values can be obtained.
        :type InstanceId: str
        """
        self._CustomerAssetId = None
        self._AssetName = None
        self._AssetType = None
        self._CheckStatus = None
        self._NodeName = None
        self._LastCheckTime = None
        self._CheckResult = None
        self._HostIP = None
        self._ImageTag = None
        self._VerifyInfo = None
        self._InstanceId = None

    @property
    def CustomerAssetId(self):
        r"""Unique ID of the customer asset
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId

    @property
    def AssetName(self):
        r"""Asset name
        :rtype: str
        """
        return self._AssetName

    @AssetName.setter
    def AssetName(self, AssetName):
        self._AssetName = AssetName

    @property
    def AssetType(self):
        r"""Asset type
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def CheckStatus(self):
        r"""Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def LastCheckTime(self):
        r"""Last check time in the format of "YYYY-MM-DD HH:m::SS"

It is "0000-00-00 00:00:00" if no check has been performed.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def CheckResult(self):
        r"""Check result. Valid values:

`RESULT_FAILED`: Failed.

`RESULT_PASSED`: Passed.
        :rtype: str
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def HostIP(self):
        r"""Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ImageTag(self):
        r"""Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def VerifyInfo(self):
        r"""Verification information of the check item
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VerifyInfo

    @VerifyInfo.setter
    def VerifyInfo(self, VerifyInfo):
        self._VerifyInfo = VerifyInfo

    @property
    def InstanceId(self):
        r"""Instance ID
Note: This field may return `null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        self._AssetName = params.get("AssetName")
        self._AssetType = params.get("AssetType")
        self._CheckStatus = params.get("CheckStatus")
        self._NodeName = params.get("NodeName")
        self._LastCheckTime = params.get("LastCheckTime")
        self._CheckResult = params.get("CheckResult")
        self._HostIP = params.get("HostIP")
        self._ImageTag = params.get("ImageTag")
        self._VerifyInfo = params.get("VerifyInfo")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAssetDetailInfo(AbstractModel):
    r"""Asset details

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Customer asset ID
        :type CustomerAssetId: int
        :param _AssetType: Asset type
        :type AssetType: str
        :param _AssetName: Asset name
        :type AssetName: str
        :param _NodeName: Node name of the asset
        :type NodeName: str
        :param _HostName: Server name of the asset
        :type HostName: str
        :param _HostIP: Server IP of the asset
        :type HostIP: str
        :param _CheckStatus: Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _PassedPolicyItemCount: Number of check items that the asset passed
        :type PassedPolicyItemCount: int
        :param _FailedPolicyItemCount: Number of check items that the asset failed
        :type FailedPolicyItemCount: int
        :param _LastCheckTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastCheckTime: str
        :param _CheckResult: Check result. Valid values:
`RESULT_FAILED`: Failed.
`RESULT_PASSED`: Passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckResult: str
        :param _AssetStatus: Asset status
        :type AssetStatus: str
        :param _AssetCreateTime: Asset creation time
`ASSET_NORMAL`: Running.
`ASSET_PAUSED`: Suspended.
`ASSET_STOPPED`: Stopped.
`ASSET_ABNORMAL`: Abnormal.
        :type AssetCreateTime: str
        """
        self._CustomerAssetId = None
        self._AssetType = None
        self._AssetName = None
        self._NodeName = None
        self._HostName = None
        self._HostIP = None
        self._CheckStatus = None
        self._PassedPolicyItemCount = None
        self._FailedPolicyItemCount = None
        self._LastCheckTime = None
        self._CheckResult = None
        self._AssetStatus = None
        self._AssetCreateTime = None

    @property
    def CustomerAssetId(self):
        r"""Customer asset ID
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId

    @property
    def AssetType(self):
        r"""Asset type
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def AssetName(self):
        r"""Asset name
        :rtype: str
        """
        return self._AssetName

    @AssetName.setter
    def AssetName(self, AssetName):
        self._AssetName = AssetName

    @property
    def NodeName(self):
        r"""Node name of the asset
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def HostName(self):
        r"""Server name of the asset
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIP(self):
        r"""Server IP of the asset
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def CheckStatus(self):
        r"""Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def PassedPolicyItemCount(self):
        r"""Number of check items that the asset passed
        :rtype: int
        """
        return self._PassedPolicyItemCount

    @PassedPolicyItemCount.setter
    def PassedPolicyItemCount(self, PassedPolicyItemCount):
        self._PassedPolicyItemCount = PassedPolicyItemCount

    @property
    def FailedPolicyItemCount(self):
        r"""Number of check items that the asset failed
        :rtype: int
        """
        return self._FailedPolicyItemCount

    @FailedPolicyItemCount.setter
    def FailedPolicyItemCount(self, FailedPolicyItemCount):
        self._FailedPolicyItemCount = FailedPolicyItemCount

    @property
    def LastCheckTime(self):
        r"""Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def CheckResult(self):
        r"""Check result. Valid values:
`RESULT_FAILED`: Failed.
`RESULT_PASSED`: Passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def AssetStatus(self):
        r"""Asset status
        :rtype: str
        """
        return self._AssetStatus

    @AssetStatus.setter
    def AssetStatus(self, AssetStatus):
        self._AssetStatus = AssetStatus

    @property
    def AssetCreateTime(self):
        r"""Asset creation time
`ASSET_NORMAL`: Running.
`ASSET_PAUSED`: Suspended.
`ASSET_STOPPED`: Stopped.
`ASSET_ABNORMAL`: Abnormal.
        :rtype: str
        """
        return self._AssetCreateTime

    @AssetCreateTime.setter
    def AssetCreateTime(self, AssetCreateTime):
        self._AssetCreateTime = AssetCreateTime


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        self._AssetType = params.get("AssetType")
        self._AssetName = params.get("AssetName")
        self._NodeName = params.get("NodeName")
        self._HostName = params.get("HostName")
        self._HostIP = params.get("HostIP")
        self._CheckStatus = params.get("CheckStatus")
        self._PassedPolicyItemCount = params.get("PassedPolicyItemCount")
        self._FailedPolicyItemCount = params.get("FailedPolicyItemCount")
        self._LastCheckTime = params.get("LastCheckTime")
        self._CheckResult = params.get("CheckResult")
        self._AssetStatus = params.get("AssetStatus")
        self._AssetCreateTime = params.get("AssetCreateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAssetInfo(AbstractModel):
    r"""Asset information

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Customer asset ID
        :type CustomerAssetId: int
        :param _AssetType: Asset type
        :type AssetType: str
        :param _AssetName: Asset name
        :type AssetName: str
        :param _ImageTag: This field is the image tag when the asset is an image.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageTag: str
        :param _HostIP: Server IP of the asset
        :type HostIP: str
        :param _NodeName: Node name of the asset
        :type NodeName: str
        :param _CheckStatus: Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _PassedPolicyItemCount: Number of check items that the asset passed
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassedPolicyItemCount: int
        :param _FailedPolicyItemCount: Number of check items that the asset failed
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailedPolicyItemCount: int
        :param _LastCheckTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastCheckTime: str
        :param _CheckResult: Check result. Valid values:
`RESULT_FAILED`: Failed.
`RESULT_PASSED`: Passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckResult: str
        :param _InstanceId: Node instance ID
Note: This field may return `null`, indicating that no valid values can be obtained.
        :type InstanceId: str
        """
        self._CustomerAssetId = None
        self._AssetType = None
        self._AssetName = None
        self._ImageTag = None
        self._HostIP = None
        self._NodeName = None
        self._CheckStatus = None
        self._PassedPolicyItemCount = None
        self._FailedPolicyItemCount = None
        self._LastCheckTime = None
        self._CheckResult = None
        self._InstanceId = None

    @property
    def CustomerAssetId(self):
        r"""Customer asset ID
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId

    @property
    def AssetType(self):
        r"""Asset type
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def AssetName(self):
        r"""Asset name
        :rtype: str
        """
        return self._AssetName

    @AssetName.setter
    def AssetName(self, AssetName):
        self._AssetName = AssetName

    @property
    def ImageTag(self):
        r"""This field is the image tag when the asset is an image.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def HostIP(self):
        r"""Server IP of the asset
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def NodeName(self):
        r"""Node name of the asset
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def CheckStatus(self):
        r"""Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def PassedPolicyItemCount(self):
        r"""Number of check items that the asset passed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassedPolicyItemCount

    @PassedPolicyItemCount.setter
    def PassedPolicyItemCount(self, PassedPolicyItemCount):
        self._PassedPolicyItemCount = PassedPolicyItemCount

    @property
    def FailedPolicyItemCount(self):
        r"""Number of check items that the asset failed
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FailedPolicyItemCount

    @FailedPolicyItemCount.setter
    def FailedPolicyItemCount(self, FailedPolicyItemCount):
        self._FailedPolicyItemCount = FailedPolicyItemCount

    @property
    def LastCheckTime(self):
        r"""Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def CheckResult(self):
        r"""Check result. Valid values:
`RESULT_FAILED`: Failed.
`RESULT_PASSED`: Passed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def InstanceId(self):
        r"""Node instance ID
Note: This field may return `null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        self._AssetType = params.get("AssetType")
        self._AssetName = params.get("AssetName")
        self._ImageTag = params.get("ImageTag")
        self._HostIP = params.get("HostIP")
        self._NodeName = params.get("NodeName")
        self._CheckStatus = params.get("CheckStatus")
        self._PassedPolicyItemCount = params.get("PassedPolicyItemCount")
        self._FailedPolicyItemCount = params.get("FailedPolicyItemCount")
        self._LastCheckTime = params.get("LastCheckTime")
        self._CheckResult = params.get("CheckResult")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAssetPolicyItem(AbstractModel):
    r"""Information of a check item

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: Unique ID of the customer check item
        :type CustomerPolicyItemId: int
        :param _BasePolicyItemId: Original ID of the check item
        :type BasePolicyItemId: int
        :param _Name: Check item name
        :type Name: str
        :param _Category: Category of the check item
        :type Category: str
        :param _BenchmarkStandardId: Compliance standard ID
        :type BenchmarkStandardId: int
        :param _BenchmarkStandardName: Compliance standard name
        :type BenchmarkStandardName: str
        :param _RiskLevel: Severity
        :type RiskLevel: str
        :param _CheckStatus: Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _CheckResult: Check result
`RESULT_PASSED`: Passed.
`RESULT_FAILED`: Failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckResult: str
        :param _WhitelistId: Allowed item ID of the check item. If it exists and is not `0`, the check item is ignored.
Note: This field may return null, indicating that no valid values can be obtained.
        :type WhitelistId: int
        :param _FixSuggestion: Handling suggestion
        :type FixSuggestion: str
        :param _LastCheckTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastCheckTime: str
        :param _VerifyInfo: Verification information
Note: This field may return null, indicating that no valid values can be obtained.
        :type VerifyInfo: str
        """
        self._CustomerPolicyItemId = None
        self._BasePolicyItemId = None
        self._Name = None
        self._Category = None
        self._BenchmarkStandardId = None
        self._BenchmarkStandardName = None
        self._RiskLevel = None
        self._CheckStatus = None
        self._CheckResult = None
        self._WhitelistId = None
        self._FixSuggestion = None
        self._LastCheckTime = None
        self._VerifyInfo = None

    @property
    def CustomerPolicyItemId(self):
        r"""Unique ID of the customer check item
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def BasePolicyItemId(self):
        r"""Original ID of the check item
        :rtype: int
        """
        return self._BasePolicyItemId

    @BasePolicyItemId.setter
    def BasePolicyItemId(self, BasePolicyItemId):
        self._BasePolicyItemId = BasePolicyItemId

    @property
    def Name(self):
        r"""Check item name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Category(self):
        r"""Category of the check item
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def BenchmarkStandardId(self):
        r"""Compliance standard ID
        :rtype: int
        """
        return self._BenchmarkStandardId

    @BenchmarkStandardId.setter
    def BenchmarkStandardId(self, BenchmarkStandardId):
        self._BenchmarkStandardId = BenchmarkStandardId

    @property
    def BenchmarkStandardName(self):
        r"""Compliance standard name
        :rtype: str
        """
        return self._BenchmarkStandardName

    @BenchmarkStandardName.setter
    def BenchmarkStandardName(self, BenchmarkStandardName):
        self._BenchmarkStandardName = BenchmarkStandardName

    @property
    def RiskLevel(self):
        r"""Severity
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def CheckStatus(self):
        r"""Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def CheckResult(self):
        r"""Check result
`RESULT_PASSED`: Passed.
`RESULT_FAILED`: Failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def WhitelistId(self):
        r"""Allowed item ID of the check item. If it exists and is not `0`, the check item is ignored.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._WhitelistId

    @WhitelistId.setter
    def WhitelistId(self, WhitelistId):
        self._WhitelistId = WhitelistId

    @property
    def FixSuggestion(self):
        r"""Handling suggestion
        :rtype: str
        """
        return self._FixSuggestion

    @FixSuggestion.setter
    def FixSuggestion(self, FixSuggestion):
        self._FixSuggestion = FixSuggestion

    @property
    def LastCheckTime(self):
        r"""Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def VerifyInfo(self):
        r"""Verification information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VerifyInfo

    @VerifyInfo.setter
    def VerifyInfo(self, VerifyInfo):
        self._VerifyInfo = VerifyInfo


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._BasePolicyItemId = params.get("BasePolicyItemId")
        self._Name = params.get("Name")
        self._Category = params.get("Category")
        self._BenchmarkStandardId = params.get("BenchmarkStandardId")
        self._BenchmarkStandardName = params.get("BenchmarkStandardName")
        self._RiskLevel = params.get("RiskLevel")
        self._CheckStatus = params.get("CheckStatus")
        self._CheckResult = params.get("CheckResult")
        self._WhitelistId = params.get("WhitelistId")
        self._FixSuggestion = params.get("FixSuggestion")
        self._LastCheckTime = params.get("LastCheckTime")
        self._VerifyInfo = params.get("VerifyInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAssetPolicySetItem(AbstractModel):
    r"""List of asset IDs and check item IDs

    """

    def __init__(self):
        r"""
        :param _CustomerAssetItemId: Asset ID
        :type CustomerAssetItemId: int
        :param _CustomerPolicyItemIdSet: List of IDs of check items to be ignored in the specified asset. If it is empty, it indicates all.
        :type CustomerPolicyItemIdSet: list of int non-negative
        """
        self._CustomerAssetItemId = None
        self._CustomerPolicyItemIdSet = None

    @property
    def CustomerAssetItemId(self):
        r"""Asset ID
        :rtype: int
        """
        return self._CustomerAssetItemId

    @CustomerAssetItemId.setter
    def CustomerAssetItemId(self, CustomerAssetItemId):
        self._CustomerAssetItemId = CustomerAssetItemId

    @property
    def CustomerPolicyItemIdSet(self):
        r"""List of IDs of check items to be ignored in the specified asset. If it is empty, it indicates all.
        :rtype: list of int non-negative
        """
        return self._CustomerPolicyItemIdSet

    @CustomerPolicyItemIdSet.setter
    def CustomerPolicyItemIdSet(self, CustomerPolicyItemIdSet):
        self._CustomerPolicyItemIdSet = CustomerPolicyItemIdSet


    def _deserialize(self, params):
        self._CustomerAssetItemId = params.get("CustomerAssetItemId")
        self._CustomerPolicyItemIdSet = params.get("CustomerPolicyItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceAssetSummary(AbstractModel):
    r"""Asset overview

    """

    def __init__(self):
        r"""
        :param _AssetType: Asset type
        :type AssetType: str
        :param _IsCustomerFirstCheck: Whether it is the first check. This parameter is used together with `CheckStatus`.
        :type IsCustomerFirstCheck: bool
        :param _CheckStatus: Check status

`CHECK_UNINIT`: Feature not enabled.

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _CheckProgress: Check progress. Value range: 0-100. This field is valid only if the check is running.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckProgress: float
        :param _PassedPolicyItemCount: Number of check items that the asset passed
        :type PassedPolicyItemCount: int
        :param _FailedPolicyItemCount: Number of check items that the asset failed
        :type FailedPolicyItemCount: int
        :param _FailedCriticalPolicyItemCount: Number of critical check items that the asset failed
        :type FailedCriticalPolicyItemCount: int
        :param _FailedHighRiskPolicyItemCount: Number of high-risk check items that the asset failed
        :type FailedHighRiskPolicyItemCount: int
        :param _FailedMediumRiskPolicyItemCount: Number of medium-risk check items that the asset failed
        :type FailedMediumRiskPolicyItemCount: int
        :param _FailedLowRiskPolicyItemCount: Number of low-risk check items that the asset failed
        :type FailedLowRiskPolicyItemCount: int
        :param _NoticePolicyItemCount: Number of prompt check items of the asset
        :type NoticePolicyItemCount: int
        :param _PassedAssetCount: Number of assets that passed the check
        :type PassedAssetCount: int
        :param _FailedAssetCount: Number of assets that failed the check
        :type FailedAssetCount: int
        :param _AssetPassedRate: Asset compliance rate. Value range: 0-100.
        :type AssetPassedRate: float
        :param _ScanFailedAssetCount: Number of assets that failed the check
        :type ScanFailedAssetCount: int
        :param _CheckCostTime: Last check duration in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckCostTime: float
        :param _LastCheckTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastCheckTime: str
        :param _PeriodRule: Scheduled check rule
        :type PeriodRule: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        :param _OpenPolicyItemCount: Total number of enabled check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type OpenPolicyItemCount: int
        :param _IgnoredPolicyItemCount: Total number of ignored check items
Note: This field may return null, indicating that no valid values can be obtained.
        :type IgnoredPolicyItemCount: int
        """
        self._AssetType = None
        self._IsCustomerFirstCheck = None
        self._CheckStatus = None
        self._CheckProgress = None
        self._PassedPolicyItemCount = None
        self._FailedPolicyItemCount = None
        self._FailedCriticalPolicyItemCount = None
        self._FailedHighRiskPolicyItemCount = None
        self._FailedMediumRiskPolicyItemCount = None
        self._FailedLowRiskPolicyItemCount = None
        self._NoticePolicyItemCount = None
        self._PassedAssetCount = None
        self._FailedAssetCount = None
        self._AssetPassedRate = None
        self._ScanFailedAssetCount = None
        self._CheckCostTime = None
        self._LastCheckTime = None
        self._PeriodRule = None
        self._OpenPolicyItemCount = None
        self._IgnoredPolicyItemCount = None

    @property
    def AssetType(self):
        r"""Asset type
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def IsCustomerFirstCheck(self):
        r"""Whether it is the first check. This parameter is used together with `CheckStatus`.
        :rtype: bool
        """
        return self._IsCustomerFirstCheck

    @IsCustomerFirstCheck.setter
    def IsCustomerFirstCheck(self, IsCustomerFirstCheck):
        self._IsCustomerFirstCheck = IsCustomerFirstCheck

    @property
    def CheckStatus(self):
        r"""Check status

`CHECK_UNINIT`: Feature not enabled.

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def CheckProgress(self):
        r"""Check progress. Value range: 0-100. This field is valid only if the check is running.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CheckProgress

    @CheckProgress.setter
    def CheckProgress(self, CheckProgress):
        self._CheckProgress = CheckProgress

    @property
    def PassedPolicyItemCount(self):
        r"""Number of check items that the asset passed
        :rtype: int
        """
        return self._PassedPolicyItemCount

    @PassedPolicyItemCount.setter
    def PassedPolicyItemCount(self, PassedPolicyItemCount):
        self._PassedPolicyItemCount = PassedPolicyItemCount

    @property
    def FailedPolicyItemCount(self):
        r"""Number of check items that the asset failed
        :rtype: int
        """
        return self._FailedPolicyItemCount

    @FailedPolicyItemCount.setter
    def FailedPolicyItemCount(self, FailedPolicyItemCount):
        self._FailedPolicyItemCount = FailedPolicyItemCount

    @property
    def FailedCriticalPolicyItemCount(self):
        r"""Number of critical check items that the asset failed
        :rtype: int
        """
        return self._FailedCriticalPolicyItemCount

    @FailedCriticalPolicyItemCount.setter
    def FailedCriticalPolicyItemCount(self, FailedCriticalPolicyItemCount):
        self._FailedCriticalPolicyItemCount = FailedCriticalPolicyItemCount

    @property
    def FailedHighRiskPolicyItemCount(self):
        r"""Number of high-risk check items that the asset failed
        :rtype: int
        """
        return self._FailedHighRiskPolicyItemCount

    @FailedHighRiskPolicyItemCount.setter
    def FailedHighRiskPolicyItemCount(self, FailedHighRiskPolicyItemCount):
        self._FailedHighRiskPolicyItemCount = FailedHighRiskPolicyItemCount

    @property
    def FailedMediumRiskPolicyItemCount(self):
        r"""Number of medium-risk check items that the asset failed
        :rtype: int
        """
        return self._FailedMediumRiskPolicyItemCount

    @FailedMediumRiskPolicyItemCount.setter
    def FailedMediumRiskPolicyItemCount(self, FailedMediumRiskPolicyItemCount):
        self._FailedMediumRiskPolicyItemCount = FailedMediumRiskPolicyItemCount

    @property
    def FailedLowRiskPolicyItemCount(self):
        r"""Number of low-risk check items that the asset failed
        :rtype: int
        """
        return self._FailedLowRiskPolicyItemCount

    @FailedLowRiskPolicyItemCount.setter
    def FailedLowRiskPolicyItemCount(self, FailedLowRiskPolicyItemCount):
        self._FailedLowRiskPolicyItemCount = FailedLowRiskPolicyItemCount

    @property
    def NoticePolicyItemCount(self):
        r"""Number of prompt check items of the asset
        :rtype: int
        """
        return self._NoticePolicyItemCount

    @NoticePolicyItemCount.setter
    def NoticePolicyItemCount(self, NoticePolicyItemCount):
        self._NoticePolicyItemCount = NoticePolicyItemCount

    @property
    def PassedAssetCount(self):
        r"""Number of assets that passed the check
        :rtype: int
        """
        return self._PassedAssetCount

    @PassedAssetCount.setter
    def PassedAssetCount(self, PassedAssetCount):
        self._PassedAssetCount = PassedAssetCount

    @property
    def FailedAssetCount(self):
        r"""Number of assets that failed the check
        :rtype: int
        """
        return self._FailedAssetCount

    @FailedAssetCount.setter
    def FailedAssetCount(self, FailedAssetCount):
        self._FailedAssetCount = FailedAssetCount

    @property
    def AssetPassedRate(self):
        r"""Asset compliance rate. Value range: 0-100.
        :rtype: float
        """
        return self._AssetPassedRate

    @AssetPassedRate.setter
    def AssetPassedRate(self, AssetPassedRate):
        self._AssetPassedRate = AssetPassedRate

    @property
    def ScanFailedAssetCount(self):
        r"""Number of assets that failed the check
        :rtype: int
        """
        return self._ScanFailedAssetCount

    @ScanFailedAssetCount.setter
    def ScanFailedAssetCount(self, ScanFailedAssetCount):
        self._ScanFailedAssetCount = ScanFailedAssetCount

    @property
    def CheckCostTime(self):
        r"""Last check duration in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CheckCostTime

    @CheckCostTime.setter
    def CheckCostTime(self, CheckCostTime):
        self._CheckCostTime = CheckCostTime

    @property
    def LastCheckTime(self):
        r"""Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def PeriodRule(self):
        r"""Scheduled check rule
        :rtype: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        """
        return self._PeriodRule

    @PeriodRule.setter
    def PeriodRule(self, PeriodRule):
        self._PeriodRule = PeriodRule

    @property
    def OpenPolicyItemCount(self):
        r"""Total number of enabled check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._OpenPolicyItemCount

    @OpenPolicyItemCount.setter
    def OpenPolicyItemCount(self, OpenPolicyItemCount):
        self._OpenPolicyItemCount = OpenPolicyItemCount

    @property
    def IgnoredPolicyItemCount(self):
        r"""Total number of ignored check items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IgnoredPolicyItemCount

    @IgnoredPolicyItemCount.setter
    def IgnoredPolicyItemCount(self, IgnoredPolicyItemCount):
        self._IgnoredPolicyItemCount = IgnoredPolicyItemCount


    def _deserialize(self, params):
        self._AssetType = params.get("AssetType")
        self._IsCustomerFirstCheck = params.get("IsCustomerFirstCheck")
        self._CheckStatus = params.get("CheckStatus")
        self._CheckProgress = params.get("CheckProgress")
        self._PassedPolicyItemCount = params.get("PassedPolicyItemCount")
        self._FailedPolicyItemCount = params.get("FailedPolicyItemCount")
        self._FailedCriticalPolicyItemCount = params.get("FailedCriticalPolicyItemCount")
        self._FailedHighRiskPolicyItemCount = params.get("FailedHighRiskPolicyItemCount")
        self._FailedMediumRiskPolicyItemCount = params.get("FailedMediumRiskPolicyItemCount")
        self._FailedLowRiskPolicyItemCount = params.get("FailedLowRiskPolicyItemCount")
        self._NoticePolicyItemCount = params.get("NoticePolicyItemCount")
        self._PassedAssetCount = params.get("PassedAssetCount")
        self._FailedAssetCount = params.get("FailedAssetCount")
        self._AssetPassedRate = params.get("AssetPassedRate")
        self._ScanFailedAssetCount = params.get("ScanFailedAssetCount")
        self._CheckCostTime = params.get("CheckCostTime")
        self._LastCheckTime = params.get("LastCheckTime")
        if params.get("PeriodRule") is not None:
            self._PeriodRule = CompliancePeriodTaskRule()
            self._PeriodRule._deserialize(params.get("PeriodRule"))
        self._OpenPolicyItemCount = params.get("OpenPolicyItemCount")
        self._IgnoredPolicyItemCount = params.get("IgnoredPolicyItemCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceBenchmarkStandard(AbstractModel):
    r"""Information of a compliance standard

    """

    def __init__(self):
        r"""
        :param _StandardId: Compliance standard ID
        :type StandardId: int
        :param _Name: Compliance standard name
        :type Name: str
        :param _PolicyItemCount: Number of items contained in the compliance standard
        :type PolicyItemCount: int
        :param _Enabled: Whether to enable the standard
        :type Enabled: bool
        :param _Description: Description of the standard
        :type Description: str
        """
        self._StandardId = None
        self._Name = None
        self._PolicyItemCount = None
        self._Enabled = None
        self._Description = None

    @property
    def StandardId(self):
        r"""Compliance standard ID
        :rtype: int
        """
        return self._StandardId

    @StandardId.setter
    def StandardId(self, StandardId):
        self._StandardId = StandardId

    @property
    def Name(self):
        r"""Compliance standard name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def PolicyItemCount(self):
        r"""Number of items contained in the compliance standard
        :rtype: int
        """
        return self._PolicyItemCount

    @PolicyItemCount.setter
    def PolicyItemCount(self, PolicyItemCount):
        self._PolicyItemCount = PolicyItemCount

    @property
    def Enabled(self):
        r"""Whether to enable the standard
        :rtype: bool
        """
        return self._Enabled

    @Enabled.setter
    def Enabled(self, Enabled):
        self._Enabled = Enabled

    @property
    def Description(self):
        r"""Description of the standard
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._StandardId = params.get("StandardId")
        self._Name = params.get("Name")
        self._PolicyItemCount = params.get("PolicyItemCount")
        self._Enabled = params.get("Enabled")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceBenchmarkStandardEnable(AbstractModel):
    r"""Whether to enable the compliance standard

    """

    def __init__(self):
        r"""
        :param _StandardId: Compliance standard ID
        :type StandardId: int
        :param _Enable: Whether to enable the compliance standard
        :type Enable: bool
        """
        self._StandardId = None
        self._Enable = None

    @property
    def StandardId(self):
        r"""Compliance standard ID
        :rtype: int
        """
        return self._StandardId

    @StandardId.setter
    def StandardId(self, StandardId):
        self._StandardId = StandardId

    @property
    def Enable(self):
        r"""Whether to enable the compliance standard
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable


    def _deserialize(self, params):
        self._StandardId = params.get("StandardId")
        self._Enable = params.get("Enable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceContainerDetailInfo(AbstractModel):
    r"""Container asset details

    """

    def __init__(self):
        r"""
        :param _ContainerId: Container ID on the server
        :type ContainerId: str
        :param _PodName: Pod name of the container
Note: This field may return null, indicating that no valid values can be obtained.
        :type PodName: str
        """
        self._ContainerId = None
        self._PodName = None

    @property
    def ContainerId(self):
        r"""Container ID on the server
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def PodName(self):
        r"""Pod name of the container
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._ContainerId = params.get("ContainerId")
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceFilters(AbstractModel):
    r"""Key-value pair filter for conditional filtering queries, such as filter ID, name, and status. If more than one filter exists, the logical relationship between these filters is `AND`. If multiple values exist in one filter, the logical relationship between these values is `OR`.

    """

    def __init__(self):
        r"""
        :param _Name: Filter name
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Whether to use fuzzy query. Default value: `true`.
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        r"""Filter name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        r"""One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        r"""Whether to use fuzzy query. Default value: `true`.
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceHostDetailInfo(AbstractModel):
    r"""Server asset details

    """

    def __init__(self):
        r"""
        :param _DockerVersion: Docker version on the server
Note: This field may return null, indicating that no valid values can be obtained.
        :type DockerVersion: str
        :param _K8SVersion: K8s version on the server
Note: This field may return null, indicating that no valid values can be obtained.
        :type K8SVersion: str
        """
        self._DockerVersion = None
        self._K8SVersion = None

    @property
    def DockerVersion(self):
        r"""Docker version on the server
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DockerVersion

    @DockerVersion.setter
    def DockerVersion(self, DockerVersion):
        self._DockerVersion = DockerVersion

    @property
    def K8SVersion(self):
        r"""K8s version on the server
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._K8SVersion

    @K8SVersion.setter
    def K8SVersion(self, K8SVersion):
        self._K8SVersion = K8SVersion


    def _deserialize(self, params):
        self._DockerVersion = params.get("DockerVersion")
        self._K8SVersion = params.get("K8SVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceImageDetailInfo(AbstractModel):
    r"""Image asset details

    """

    def __init__(self):
        r"""
        :param _ImageId: Image ID on the server
        :type ImageId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageTag: Image tag
        :type ImageTag: str
        :param _Repository: Path of the remote repository of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :type Repository: str
        """
        self._ImageId = None
        self._ImageName = None
        self._ImageTag = None
        self._Repository = None

    @property
    def ImageId(self):
        r"""Image ID on the server
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def Repository(self):
        r"""Path of the remote repository of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Repository

    @Repository.setter
    def Repository(self, Repository):
        self._Repository = Repository


    def _deserialize(self, params):
        self._ImageId = params.get("ImageId")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._Repository = params.get("Repository")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceK8SDetailInfo(AbstractModel):
    r"""K8s asset details

    """

    def __init__(self):
        r"""
        :param _ClusterName: K8s cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClusterName: str
        :param _ClusterVersion: K8s cluster version
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClusterVersion: str
        """
        self._ClusterName = None
        self._ClusterVersion = None

    @property
    def ClusterName(self):
        r"""K8s cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterVersion(self):
        r"""K8s cluster version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion


    def _deserialize(self, params):
        self._ClusterName = params.get("ClusterName")
        self._ClusterVersion = params.get("ClusterVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompliancePeriodTask(AbstractModel):
    r"""Information of a scheduled task of the compliance baseline check

    """

    def __init__(self):
        r"""
        :param _PeriodTaskId: Scheduled task ID
        :type PeriodTaskId: int
        :param _AssetType: Asset type
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :type AssetType: str
        :param _LastTriggerTime: Last trigger time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastTriggerTime: str
        :param _TotalPolicyItemCount: Total number of check items
        :type TotalPolicyItemCount: int
        :param _PeriodRule: Cycle settings
        :type PeriodRule: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        :param _BenchmarkStandardSet: List of compliance standards
        :type BenchmarkStandardSet: list of ComplianceBenchmarkStandard
        """
        self._PeriodTaskId = None
        self._AssetType = None
        self._LastTriggerTime = None
        self._TotalPolicyItemCount = None
        self._PeriodRule = None
        self._BenchmarkStandardSet = None

    @property
    def PeriodTaskId(self):
        r"""Scheduled task ID
        :rtype: int
        """
        return self._PeriodTaskId

    @PeriodTaskId.setter
    def PeriodTaskId(self, PeriodTaskId):
        self._PeriodTaskId = PeriodTaskId

    @property
    def AssetType(self):
        r"""Asset type
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def LastTriggerTime(self):
        r"""Last trigger time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastTriggerTime

    @LastTriggerTime.setter
    def LastTriggerTime(self, LastTriggerTime):
        self._LastTriggerTime = LastTriggerTime

    @property
    def TotalPolicyItemCount(self):
        r"""Total number of check items
        :rtype: int
        """
        return self._TotalPolicyItemCount

    @TotalPolicyItemCount.setter
    def TotalPolicyItemCount(self, TotalPolicyItemCount):
        self._TotalPolicyItemCount = TotalPolicyItemCount

    @property
    def PeriodRule(self):
        r"""Cycle settings
        :rtype: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        """
        return self._PeriodRule

    @PeriodRule.setter
    def PeriodRule(self, PeriodRule):
        self._PeriodRule = PeriodRule

    @property
    def BenchmarkStandardSet(self):
        r"""List of compliance standards
        :rtype: list of ComplianceBenchmarkStandard
        """
        return self._BenchmarkStandardSet

    @BenchmarkStandardSet.setter
    def BenchmarkStandardSet(self, BenchmarkStandardSet):
        self._BenchmarkStandardSet = BenchmarkStandardSet


    def _deserialize(self, params):
        self._PeriodTaskId = params.get("PeriodTaskId")
        self._AssetType = params.get("AssetType")
        self._LastTriggerTime = params.get("LastTriggerTime")
        self._TotalPolicyItemCount = params.get("TotalPolicyItemCount")
        if params.get("PeriodRule") is not None:
            self._PeriodRule = CompliancePeriodTaskRule()
            self._PeriodRule._deserialize(params.get("PeriodRule"))
        if params.get("BenchmarkStandardSet") is not None:
            self._BenchmarkStandardSet = []
            for item in params.get("BenchmarkStandardSet"):
                obj = ComplianceBenchmarkStandard()
                obj._deserialize(item)
                self._BenchmarkStandardSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompliancePeriodTaskRule(AbstractModel):
    r"""Cycle of a scheduled task

    """

    def __init__(self):
        r"""
        :param _Frequency: Execution frequency (days). Valid values: `1`, `3`, `7`.
        :type Frequency: int
        :param _ExecutionTime: Execution time in the format of "HH:mm:SS"
        :type ExecutionTime: str
        :param _Enable: Whether to enable
Note: This field may return null, indicating that no valid values can be obtained.
        :type Enable: bool
        """
        self._Frequency = None
        self._ExecutionTime = None
        self._Enable = None

    @property
    def Frequency(self):
        r"""Execution frequency (days). Valid values: `1`, `3`, `7`.
        :rtype: int
        """
        return self._Frequency

    @Frequency.setter
    def Frequency(self, Frequency):
        self._Frequency = Frequency

    @property
    def ExecutionTime(self):
        r"""Execution time in the format of "HH:mm:SS"
        :rtype: str
        """
        return self._ExecutionTime

    @ExecutionTime.setter
    def ExecutionTime(self, ExecutionTime):
        self._ExecutionTime = ExecutionTime

    @property
    def Enable(self):
        r"""Whether to enable
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable


    def _deserialize(self, params):
        self._Frequency = params.get("Frequency")
        self._ExecutionTime = params.get("ExecutionTime")
        self._Enable = params.get("Enable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompliancePolicyAssetSetItem(AbstractModel):
    r"""List of check item IDs and asset IDs

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: Check item ID
        :type CustomerPolicyItemId: int
        :param _CustomerAssetItemIdSet: List of IDs of assets to be ignored in the specified check item. If it is empty, it indicates all.
        :type CustomerAssetItemIdSet: list of int non-negative
        """
        self._CustomerPolicyItemId = None
        self._CustomerAssetItemIdSet = None

    @property
    def CustomerPolicyItemId(self):
        r"""Check item ID
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def CustomerAssetItemIdSet(self):
        r"""List of IDs of assets to be ignored in the specified check item. If it is empty, it indicates all.
        :rtype: list of int non-negative
        """
        return self._CustomerAssetItemIdSet

    @CustomerAssetItemIdSet.setter
    def CustomerAssetItemIdSet(self, CustomerAssetItemIdSet):
        self._CustomerAssetItemIdSet = CustomerAssetItemIdSet


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._CustomerAssetItemIdSet = params.get("CustomerAssetItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CompliancePolicyItemSummary(AbstractModel):
    r"""Aggregated information of a check item

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: Unique ID of the customer check item
        :type CustomerPolicyItemId: int
        :param _BasePolicyItemId: Original ID of the check item
        :type BasePolicyItemId: int
        :param _Name: Check item name
        :type Name: str
        :param _Category: Category of the check item, which is an enumerated string.
        :type Category: str
        :param _BenchmarkStandardName: Compliance standard
        :type BenchmarkStandardName: str
        :param _RiskLevel: Severity. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
        :type RiskLevel: str
        :param _AssetType: Asset type of the check item
        :type AssetType: str
        :param _LastCheckTime: Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LastCheckTime: str
        :param _CheckStatus: Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _CheckResult: Check result. Valid values: `RESULT_PASSED`: Passed.

`RESULT_FAILED`: Failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckResult: str
        :param _PassedAssetCount: Number of assets that passed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :type PassedAssetCount: int
        :param _FailedAssetCount: Number of assets that failed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailedAssetCount: int
        :param _WhitelistId: Allowed item ID of the check item. If it exists and is not `0`, the check item is ignored.
Note: This field may return null, indicating that no valid values can be obtained.
        :type WhitelistId: int
        :param _FixSuggestion: Handling suggestion
        :type FixSuggestion: str
        :param _BenchmarkStandardId: Compliance standard ID
        :type BenchmarkStandardId: int
        :param _ApplicableVersion: TCSS editions that support this check item
Note: This field may return `null`, indicating that no valid value was found.
        :type ApplicableVersion: str
        """
        self._CustomerPolicyItemId = None
        self._BasePolicyItemId = None
        self._Name = None
        self._Category = None
        self._BenchmarkStandardName = None
        self._RiskLevel = None
        self._AssetType = None
        self._LastCheckTime = None
        self._CheckStatus = None
        self._CheckResult = None
        self._PassedAssetCount = None
        self._FailedAssetCount = None
        self._WhitelistId = None
        self._FixSuggestion = None
        self._BenchmarkStandardId = None
        self._ApplicableVersion = None

    @property
    def CustomerPolicyItemId(self):
        r"""Unique ID of the customer check item
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def BasePolicyItemId(self):
        r"""Original ID of the check item
        :rtype: int
        """
        return self._BasePolicyItemId

    @BasePolicyItemId.setter
    def BasePolicyItemId(self, BasePolicyItemId):
        self._BasePolicyItemId = BasePolicyItemId

    @property
    def Name(self):
        r"""Check item name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Category(self):
        r"""Category of the check item, which is an enumerated string.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def BenchmarkStandardName(self):
        r"""Compliance standard
        :rtype: str
        """
        return self._BenchmarkStandardName

    @BenchmarkStandardName.setter
    def BenchmarkStandardName(self, BenchmarkStandardName):
        self._BenchmarkStandardName = BenchmarkStandardName

    @property
    def RiskLevel(self):
        r"""Severity. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def AssetType(self):
        r"""Asset type of the check item
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def LastCheckTime(self):
        r"""Last check time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LastCheckTime

    @LastCheckTime.setter
    def LastCheckTime(self, LastCheckTime):
        self._LastCheckTime = LastCheckTime

    @property
    def CheckStatus(self):
        r"""Check status

`CHECK_INIT`: To be checked.

`CHECK_RUNNING`: Checking.

`CHECK_FINISHED`: Checked.

`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def CheckResult(self):
        r"""Check result. Valid values: `RESULT_PASSED`: Passed.

`RESULT_FAILED`: Failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def PassedAssetCount(self):
        r"""Number of assets that passed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PassedAssetCount

    @PassedAssetCount.setter
    def PassedAssetCount(self, PassedAssetCount):
        self._PassedAssetCount = PassedAssetCount

    @property
    def FailedAssetCount(self):
        r"""Number of assets that failed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FailedAssetCount

    @FailedAssetCount.setter
    def FailedAssetCount(self, FailedAssetCount):
        self._FailedAssetCount = FailedAssetCount

    @property
    def WhitelistId(self):
        r"""Allowed item ID of the check item. If it exists and is not `0`, the check item is ignored.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._WhitelistId

    @WhitelistId.setter
    def WhitelistId(self, WhitelistId):
        self._WhitelistId = WhitelistId

    @property
    def FixSuggestion(self):
        r"""Handling suggestion
        :rtype: str
        """
        return self._FixSuggestion

    @FixSuggestion.setter
    def FixSuggestion(self, FixSuggestion):
        self._FixSuggestion = FixSuggestion

    @property
    def BenchmarkStandardId(self):
        r"""Compliance standard ID
        :rtype: int
        """
        return self._BenchmarkStandardId

    @BenchmarkStandardId.setter
    def BenchmarkStandardId(self, BenchmarkStandardId):
        self._BenchmarkStandardId = BenchmarkStandardId

    @property
    def ApplicableVersion(self):
        r"""TCSS editions that support this check item
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: str
        """
        return self._ApplicableVersion

    @ApplicableVersion.setter
    def ApplicableVersion(self, ApplicableVersion):
        self._ApplicableVersion = ApplicableVersion


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._BasePolicyItemId = params.get("BasePolicyItemId")
        self._Name = params.get("Name")
        self._Category = params.get("Category")
        self._BenchmarkStandardName = params.get("BenchmarkStandardName")
        self._RiskLevel = params.get("RiskLevel")
        self._AssetType = params.get("AssetType")
        self._LastCheckTime = params.get("LastCheckTime")
        self._CheckStatus = params.get("CheckStatus")
        self._CheckResult = params.get("CheckResult")
        self._PassedAssetCount = params.get("PassedAssetCount")
        self._FailedAssetCount = params.get("FailedAssetCount")
        self._WhitelistId = params.get("WhitelistId")
        self._FixSuggestion = params.get("FixSuggestion")
        self._BenchmarkStandardId = params.get("BenchmarkStandardId")
        self._ApplicableVersion = params.get("ApplicableVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceScanFailedAsset(AbstractModel):
    r"""Information of the asset that failed the check

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Customer asset ID
        :type CustomerAssetId: int
        :param _AssetType: Asset type
        :type AssetType: str
        :param _CheckStatus: Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :type CheckStatus: str
        :param _AssetName: Asset name
        :type AssetName: str
        :param _FailureReason: Cause of the asset check failure
        :type FailureReason: str
        :param _Suggestion: Suggestion for handling the check failure
        :type Suggestion: str
        :param _CheckTime: Check time
        :type CheckTime: str
        """
        self._CustomerAssetId = None
        self._AssetType = None
        self._CheckStatus = None
        self._AssetName = None
        self._FailureReason = None
        self._Suggestion = None
        self._CheckTime = None

    @property
    def CustomerAssetId(self):
        r"""Customer asset ID
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId

    @property
    def AssetType(self):
        r"""Asset type
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def CheckStatus(self):
        r"""Check status
`CHECK_INIT`: To be checked.
`CHECK_RUNNING`: Checking.
`CHECK_FINISHED`: Checked.
`CHECK_FAILED`: Check failed.
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def AssetName(self):
        r"""Asset name
        :rtype: str
        """
        return self._AssetName

    @AssetName.setter
    def AssetName(self, AssetName):
        self._AssetName = AssetName

    @property
    def FailureReason(self):
        r"""Cause of the asset check failure
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def Suggestion(self):
        r"""Suggestion for handling the check failure
        :rtype: str
        """
        return self._Suggestion

    @Suggestion.setter
    def Suggestion(self, Suggestion):
        self._Suggestion = Suggestion

    @property
    def CheckTime(self):
        r"""Check time
        :rtype: str
        """
        return self._CheckTime

    @CheckTime.setter
    def CheckTime(self, CheckTime):
        self._CheckTime = CheckTime


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        self._AssetType = params.get("AssetType")
        self._CheckStatus = params.get("CheckStatus")
        self._AssetName = params.get("AssetName")
        self._FailureReason = params.get("FailureReason")
        self._Suggestion = params.get("Suggestion")
        self._CheckTime = params.get("CheckTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComplianceWhitelistItem(AbstractModel):
    r"""Allowed item

    """

    def __init__(self):
        r"""
        :param _WhitelistItemId: Allowed item ID
        :type WhitelistItemId: int
        :param _CustomerPolicyItemId: ID of the customer check item
        :type CustomerPolicyItemId: int
        :param _Name: Check item name
        :type Name: str
        :param _StandardName: Compliance standard name
        :type StandardName: str
        :param _StandardId: Compliance standard ID
        :type StandardId: int
        :param _AffectedAssetCount: Number of assets affected by the check item
        :type AffectedAssetCount: int
        :param _LastUpdateTime: Last update time
        :type LastUpdateTime: str
        :param _InsertTime: Allowed time
        :type InsertTime: str
        """
        self._WhitelistItemId = None
        self._CustomerPolicyItemId = None
        self._Name = None
        self._StandardName = None
        self._StandardId = None
        self._AffectedAssetCount = None
        self._LastUpdateTime = None
        self._InsertTime = None

    @property
    def WhitelistItemId(self):
        r"""Allowed item ID
        :rtype: int
        """
        return self._WhitelistItemId

    @WhitelistItemId.setter
    def WhitelistItemId(self, WhitelistItemId):
        self._WhitelistItemId = WhitelistItemId

    @property
    def CustomerPolicyItemId(self):
        r"""ID of the customer check item
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def Name(self):
        r"""Check item name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def StandardName(self):
        r"""Compliance standard name
        :rtype: str
        """
        return self._StandardName

    @StandardName.setter
    def StandardName(self, StandardName):
        self._StandardName = StandardName

    @property
    def StandardId(self):
        r"""Compliance standard ID
        :rtype: int
        """
        return self._StandardId

    @StandardId.setter
    def StandardId(self, StandardId):
        self._StandardId = StandardId

    @property
    def AffectedAssetCount(self):
        r"""Number of assets affected by the check item
        :rtype: int
        """
        return self._AffectedAssetCount

    @AffectedAssetCount.setter
    def AffectedAssetCount(self, AffectedAssetCount):
        self._AffectedAssetCount = AffectedAssetCount

    @property
    def LastUpdateTime(self):
        r"""Last update time
        :rtype: str
        """
        return self._LastUpdateTime

    @LastUpdateTime.setter
    def LastUpdateTime(self, LastUpdateTime):
        self._LastUpdateTime = LastUpdateTime

    @property
    def InsertTime(self):
        r"""Allowed time
        :rtype: str
        """
        return self._InsertTime

    @InsertTime.setter
    def InsertTime(self, InsertTime):
        self._InsertTime = InsertTime


    def _deserialize(self, params):
        self._WhitelistItemId = params.get("WhitelistItemId")
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._Name = params.get("Name")
        self._StandardName = params.get("StandardName")
        self._StandardId = params.get("StandardId")
        self._AffectedAssetCount = params.get("AffectedAssetCount")
        self._LastUpdateTime = params.get("LastUpdateTime")
        self._InsertTime = params.get("InsertTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComponentInfo(AbstractModel):
    r"""Container component information

    """

    def __init__(self):
        r"""
        :param _Name: Name
        :type Name: str
        :param _Version: Version
        :type Version: str
        """
        self._Name = None
        self._Version = None

    @property
    def Name(self):
        r"""Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        r"""Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComponentsInfo(AbstractModel):
    r"""Component information

    """

    def __init__(self):
        r"""
        :param _Component: Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Component: str
        :param _Version: Component version information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Version: str
        :param _FixedVersion: Fixed version
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type FixedVersion: str
        :param _Path: Path
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type Path: str
        :param _Type: Type
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type Type: str
        :param _Name: Add-on name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        """
        self._Component = None
        self._Version = None
        self._FixedVersion = None
        self._Path = None
        self._Type = None
        self._Name = None

    @property
    def Component(self):
        warnings.warn("parameter `Component` is deprecated", DeprecationWarning) 

        r"""Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Component

    @Component.setter
    def Component(self, Component):
        warnings.warn("parameter `Component` is deprecated", DeprecationWarning) 

        self._Component = Component

    @property
    def Version(self):
        r"""Component version information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def FixedVersion(self):
        r"""Fixed version
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixedVersion

    @FixedVersion.setter
    def FixedVersion(self, FixedVersion):
        self._FixedVersion = FixedVersion

    @property
    def Path(self):
        r"""Path
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Type(self):
        r"""Type
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Name(self):
        r"""Add-on name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Component = params.get("Component")
        self._Version = params.get("Version")
        self._FixedVersion = params.get("FixedVersion")
        self._Path = params.get("Path")
        self._Type = params.get("Type")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ConfirmNetworkFirewallPolicyRequest(AbstractModel):
    r"""ConfirmNetworkFirewallPolicy request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Array of cluster IDs
        :type Id: list of int non-negative
        """
        self._ClusterId = None
        self._Id = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Array of cluster IDs
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ConfirmNetworkFirewallPolicyResponse(AbstractModel):
    r"""ConfirmNetworkFirewallPolicy response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the confirmation task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the confirmation task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class ContainerInfo(AbstractModel):
    r"""List of containers

    """

    def __init__(self):
        r"""
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _Status: Container status
        :type Status: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _RunAs: Operator
        :type RunAs: str
        :param _Cmd: Command line
        :type Cmd: str
        :param _CPUUsage: CPU utilization * 1000
        :type CPUUsage: int
        :param _RamUsage: Memory usage in KB
        :type RamUsage: int
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _POD: Image ID
        :type POD: str
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _HostName: Server name
        :type HostName: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _NetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type NetStatus: str
        :param _NetSubStatus: Sub-status of the network
        :type NetSubStatus: str
        :param _IsolateSource: Isolation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateSource: str
        :param _IsolateTime: Isolation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateTime: str
        :param _NodeID: Super node ID
        :type NodeID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod name
        :type PodName: str
        :param _NodeType: Node type. Valid values: `NORMAL` (general node), `SUPER` (super node)
        :type NodeType: str
        :param _NodeUniqueID: UID of the super node
        :type NodeUniqueID: str
        :param _PodCpu: Number of CPU cores used by the pod
        :type PodCpu: int
        :param _PodMem: Memory specification of the Pod
        :type PodMem: int
        :param _ClusterName: 
        :type ClusterName: str
        :param _ClusterID: 
        :type ClusterID: str
        :param _PodUid: 
        :type PodUid: str
        """
        self._ContainerID = None
        self._ContainerName = None
        self._Status = None
        self._CreateTime = None
        self._RunAs = None
        self._Cmd = None
        self._CPUUsage = None
        self._RamUsage = None
        self._ImageName = None
        self._ImageID = None
        self._POD = None
        self._HostID = None
        self._HostIP = None
        self._UpdateTime = None
        self._HostName = None
        self._PublicIp = None
        self._NetStatus = None
        self._NetSubStatus = None
        self._IsolateSource = None
        self._IsolateTime = None
        self._NodeID = None
        self._PodIP = None
        self._PodName = None
        self._NodeType = None
        self._NodeUniqueID = None
        self._PodCpu = None
        self._PodMem = None
        self._ClusterName = None
        self._ClusterID = None
        self._PodUid = None

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def Status(self):
        r"""Container status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def RunAs(self):
        r"""Operator
        :rtype: str
        """
        return self._RunAs

    @RunAs.setter
    def RunAs(self, RunAs):
        self._RunAs = RunAs

    @property
    def Cmd(self):
        r"""Command line
        :rtype: str
        """
        return self._Cmd

    @Cmd.setter
    def Cmd(self, Cmd):
        self._Cmd = Cmd

    @property
    def CPUUsage(self):
        r"""CPU utilization * 1000
        :rtype: int
        """
        return self._CPUUsage

    @CPUUsage.setter
    def CPUUsage(self, CPUUsage):
        self._CPUUsage = CPUUsage

    @property
    def RamUsage(self):
        r"""Memory usage in KB
        :rtype: int
        """
        return self._RamUsage

    @RamUsage.setter
    def RamUsage(self, RamUsage):
        self._RamUsage = RamUsage

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def POD(self):
        r"""Image ID
        :rtype: str
        """
        return self._POD

    @POD.setter
    def POD(self, POD):
        self._POD = POD

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def NetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._NetStatus

    @NetStatus.setter
    def NetStatus(self, NetStatus):
        self._NetStatus = NetStatus

    @property
    def NetSubStatus(self):
        r"""Sub-status of the network
        :rtype: str
        """
        return self._NetSubStatus

    @NetSubStatus.setter
    def NetSubStatus(self, NetSubStatus):
        self._NetSubStatus = NetSubStatus

    @property
    def IsolateSource(self):
        r"""Isolation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IsolateSource

    @IsolateSource.setter
    def IsolateSource(self, IsolateSource):
        self._IsolateSource = IsolateSource

    @property
    def IsolateTime(self):
        r"""Isolation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IsolateTime

    @IsolateTime.setter
    def IsolateTime(self, IsolateTime):
        self._IsolateTime = IsolateTime

    @property
    def NodeID(self):
        r"""Super node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def NodeType(self):
        r"""Node type. Valid values: `NORMAL` (general node), `SUPER` (super node)
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of the super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PodCpu(self):
        r"""Number of CPU cores used by the pod
        :rtype: int
        """
        return self._PodCpu

    @PodCpu.setter
    def PodCpu(self, PodCpu):
        self._PodCpu = PodCpu

    @property
    def PodMem(self):
        r"""Memory specification of the Pod
        :rtype: int
        """
        return self._PodMem

    @PodMem.setter
    def PodMem(self, PodMem):
        self._PodMem = PodMem

    @property
    def ClusterName(self):
        r"""
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterID(self):
        r"""
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def PodUid(self):
        r"""
        :rtype: str
        """
        return self._PodUid

    @PodUid.setter
    def PodUid(self, PodUid):
        self._PodUid = PodUid


    def _deserialize(self, params):
        self._ContainerID = params.get("ContainerID")
        self._ContainerName = params.get("ContainerName")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._RunAs = params.get("RunAs")
        self._Cmd = params.get("Cmd")
        self._CPUUsage = params.get("CPUUsage")
        self._RamUsage = params.get("RamUsage")
        self._ImageName = params.get("ImageName")
        self._ImageID = params.get("ImageID")
        self._POD = params.get("POD")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._UpdateTime = params.get("UpdateTime")
        self._HostName = params.get("HostName")
        self._PublicIp = params.get("PublicIp")
        self._NetStatus = params.get("NetStatus")
        self._NetSubStatus = params.get("NetSubStatus")
        self._IsolateSource = params.get("IsolateSource")
        self._IsolateTime = params.get("IsolateTime")
        self._NodeID = params.get("NodeID")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PodCpu = params.get("PodCpu")
        self._PodMem = params.get("PodMem")
        self._ClusterName = params.get("ClusterName")
        self._ClusterID = params.get("ClusterID")
        self._PodUid = params.get("PodUid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ContainerMount(AbstractModel):
    r"""Container mount information

    """

    def __init__(self):
        r"""
        :param _Type: Mount type: `bind`.
        :type Type: str
        :param _Source: Host path
        :type Source: str
        :param _Destination: Path in the container
        :type Destination: str
        :param _Mode: Mode
        :type Mode: str
        :param _RW: Read/Write permission
        :type RW: bool
        :param _Propagation: Propagation type
        :type Propagation: str
        :param _Name: Name
        :type Name: str
        :param _Driver: Driver
        :type Driver: str
        """
        self._Type = None
        self._Source = None
        self._Destination = None
        self._Mode = None
        self._RW = None
        self._Propagation = None
        self._Name = None
        self._Driver = None

    @property
    def Type(self):
        r"""Mount type: `bind`.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Source(self):
        r"""Host path
        :rtype: str
        """
        return self._Source

    @Source.setter
    def Source(self, Source):
        self._Source = Source

    @property
    def Destination(self):
        r"""Path in the container
        :rtype: str
        """
        return self._Destination

    @Destination.setter
    def Destination(self, Destination):
        self._Destination = Destination

    @property
    def Mode(self):
        r"""Mode
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def RW(self):
        r"""Read/Write permission
        :rtype: bool
        """
        return self._RW

    @RW.setter
    def RW(self, RW):
        self._RW = RW

    @property
    def Propagation(self):
        r"""Propagation type
        :rtype: str
        """
        return self._Propagation

    @Propagation.setter
    def Propagation(self, Propagation):
        self._Propagation = Propagation

    @property
    def Name(self):
        r"""Name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Driver(self):
        r"""Driver
        :rtype: str
        """
        return self._Driver

    @Driver.setter
    def Driver(self, Driver):
        self._Driver = Driver


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Source = params.get("Source")
        self._Destination = params.get("Destination")
        self._Mode = params.get("Mode")
        self._RW = params.get("RW")
        self._Propagation = params.get("Propagation")
        self._Name = params.get("Name")
        self._Driver = params.get("Driver")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ContainerNetwork(AbstractModel):
    r"""Container network information

    """

    def __init__(self):
        r"""
        :param _EndpointID: Endpoint ID
        :type EndpointID: str
        :param _Mode: Mode: `bridge`.
        :type Mode: str
        :param _Name: Network name
        :type Name: str
        :param _NetworkID: Network ID
        :type NetworkID: str
        :param _Gateway: Gateway
        :type Gateway: str
        :param _Ipv4: IPv4 address
        :type Ipv4: str
        :param _Ipv6: IPv6 address
        :type Ipv6: str
        :param _MAC: MAC address
        :type MAC: str
        """
        self._EndpointID = None
        self._Mode = None
        self._Name = None
        self._NetworkID = None
        self._Gateway = None
        self._Ipv4 = None
        self._Ipv6 = None
        self._MAC = None

    @property
    def EndpointID(self):
        r"""Endpoint ID
        :rtype: str
        """
        return self._EndpointID

    @EndpointID.setter
    def EndpointID(self, EndpointID):
        self._EndpointID = EndpointID

    @property
    def Mode(self):
        r"""Mode: `bridge`.
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def Name(self):
        r"""Network name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def NetworkID(self):
        r"""Network ID
        :rtype: str
        """
        return self._NetworkID

    @NetworkID.setter
    def NetworkID(self, NetworkID):
        self._NetworkID = NetworkID

    @property
    def Gateway(self):
        r"""Gateway
        :rtype: str
        """
        return self._Gateway

    @Gateway.setter
    def Gateway(self, Gateway):
        self._Gateway = Gateway

    @property
    def Ipv4(self):
        r"""IPv4 address
        :rtype: str
        """
        return self._Ipv4

    @Ipv4.setter
    def Ipv4(self, Ipv4):
        self._Ipv4 = Ipv4

    @property
    def Ipv6(self):
        r"""IPv6 address
        :rtype: str
        """
        return self._Ipv6

    @Ipv6.setter
    def Ipv6(self, Ipv6):
        self._Ipv6 = Ipv6

    @property
    def MAC(self):
        r"""MAC address
        :rtype: str
        """
        return self._MAC

    @MAC.setter
    def MAC(self, MAC):
        self._MAC = MAC


    def _deserialize(self, params):
        self._EndpointID = params.get("EndpointID")
        self._Mode = params.get("Mode")
        self._Name = params.get("Name")
        self._NetworkID = params.get("NetworkID")
        self._Gateway = params.get("Gateway")
        self._Ipv4 = params.get("Ipv4")
        self._Ipv6 = params.get("Ipv6")
        self._MAC = params.get("MAC")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAbnormalProcessRulesExportJobRequest(AbstractModel):
    r"""CreateAbnormalProcessRulesExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter conditions
<li>`RuleType` - String  - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Fields to export
        :type ExportField: list of str
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filter conditions
<li>`RuleType` - String  - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Fields to export
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAbnormalProcessRulesExportJobResponse(AbstractModel):
    r"""CreateAbnormalProcessRulesExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the exportation task. You can query the task progress by using this ID in the console.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the exportation task. You can query the task progress by using this ID in the console.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateAccessControlsRuleExportJobRequest(AbstractModel):
    r"""CreateAccessControlsRuleExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter conditions
<li>`RuleType` - String  - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: list of str
        :param _ExportField: Fields to export
        :type ExportField: list of str
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filter conditions
<li>`RuleType` - String  - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: list of str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Fields to export
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAccessControlsRuleExportJobResponse(AbstractModel):
    r"""CreateAccessControlsRuleExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the exportation task. You can query the task progress by using this ID in the console.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the exportation task. You can query the task progress by using this ID in the console.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateAssetImageRegistryScanTaskOneKeyRequest(AbstractModel):
    r"""CreateAssetImageRegistryScanTaskOneKey request structure.

    """

    def __init__(self):
        r"""
        :param _All: Whether to scan all images
        :type All: bool
        :param _Images: List of scanned images
        :type Images: list of ImageInfo
        :param _ScanType: Array of scan types
        :type ScanType: list of str
        :param _Id: List of IDs of scanned images
        :type Id: list of int non-negative
        """
        self._All = None
        self._Images = None
        self._ScanType = None
        self._Id = None

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""Whether to scan all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Images(self):
        r"""List of scanned images
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def ScanType(self):
        r"""Array of scan types
        :rtype: list of str
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType

    @property
    def Id(self):
        r"""List of IDs of scanned images
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._All = params.get("All")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._ScanType = params.get("ScanType")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAssetImageRegistryScanTaskOneKeyResponse(AbstractModel):
    r"""CreateAssetImageRegistryScanTaskOneKey response structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: 
        :type TaskID: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskID = None
        self._RequestId = None

    @property
    def TaskID(self):
        r"""
        :rtype: int
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._RequestId = params.get("RequestId")


class CreateAssetImageRegistryScanTaskRequest(AbstractModel):
    r"""CreateAssetImageRegistryScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _All: Whether to scan all images
        :type All: bool
        :param _Images: List of scanned images
        :type Images: list of ImageInfo
        :param _ScanType: Array of scan types
        :type ScanType: list of str
        :param _Id: List of scanned images
        :type Id: list of int non-negative
        :param _Filters: Filter
        :type Filters: list of AssetFilters
        :param _ExcludeImageList: List of images not to be scanned, which is used together with `Filters`.
        :type ExcludeImageList: list of int non-negative
        :param _OnlyScanLatest: Whether to scan only the latest repository images, which is used together with `Filters`.
        :type OnlyScanLatest: bool
        """
        self._All = None
        self._Images = None
        self._ScanType = None
        self._Id = None
        self._Filters = None
        self._ExcludeImageList = None
        self._OnlyScanLatest = None

    @property
    def All(self):
        r"""Whether to scan all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Images(self):
        r"""List of scanned images
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def ScanType(self):
        r"""Array of scan types
        :rtype: list of str
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType

    @property
    def Id(self):
        r"""List of scanned images
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Filters(self):
        r"""Filter
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExcludeImageList(self):
        r"""List of images not to be scanned, which is used together with `Filters`.
        :rtype: list of int non-negative
        """
        return self._ExcludeImageList

    @ExcludeImageList.setter
    def ExcludeImageList(self, ExcludeImageList):
        self._ExcludeImageList = ExcludeImageList

    @property
    def OnlyScanLatest(self):
        r"""Whether to scan only the latest repository images, which is used together with `Filters`.
        :rtype: bool
        """
        return self._OnlyScanLatest

    @OnlyScanLatest.setter
    def OnlyScanLatest(self, OnlyScanLatest):
        self._OnlyScanLatest = OnlyScanLatest


    def _deserialize(self, params):
        self._All = params.get("All")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._ScanType = params.get("ScanType")
        self._Id = params.get("Id")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExcludeImageList = params.get("ExcludeImageList")
        self._OnlyScanLatest = params.get("OnlyScanLatest")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAssetImageRegistryScanTaskResponse(AbstractModel):
    r"""CreateAssetImageRegistryScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: 
        :type TaskID: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskID = None
        self._RequestId = None

    @property
    def TaskID(self):
        r"""
        :rtype: int
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._RequestId = params.get("RequestId")


class CreateAssetImageScanSettingRequest(AbstractModel):
    r"""CreateAssetImageScanSetting request structure.

    """

    def __init__(self):
        r"""
        :param _Enable: Switch
        :type Enable: bool
        :param _ScanTime: Scan time
        :type ScanTime: str
        :param _ScanPeriod: Scan cycle
        :type ScanPeriod: int
        :param _ScanVirus: Trojan scan
        :type ScanVirus: bool
        :param _ScanRisk: Sensitive data scan
        :type ScanRisk: bool
        :param _ScanVul: Vulnerability scan
        :type ScanVul: bool
        :param _All: All images
        :type All: bool
        :param _Images: Custom image
        :type Images: list of str
        """
        self._Enable = None
        self._ScanTime = None
        self._ScanPeriod = None
        self._ScanVirus = None
        self._ScanRisk = None
        self._ScanVul = None
        self._All = None
        self._Images = None

    @property
    def Enable(self):
        r"""Switch
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def ScanTime(self):
        r"""Scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanPeriod(self):
        r"""Scan cycle
        :rtype: int
        """
        return self._ScanPeriod

    @ScanPeriod.setter
    def ScanPeriod(self, ScanPeriod):
        self._ScanPeriod = ScanPeriod

    @property
    def ScanVirus(self):
        r"""Trojan scan
        :rtype: bool
        """
        return self._ScanVirus

    @ScanVirus.setter
    def ScanVirus(self, ScanVirus):
        self._ScanVirus = ScanVirus

    @property
    def ScanRisk(self):
        r"""Sensitive data scan
        :rtype: bool
        """
        return self._ScanRisk

    @ScanRisk.setter
    def ScanRisk(self, ScanRisk):
        self._ScanRisk = ScanRisk

    @property
    def ScanVul(self):
        r"""Vulnerability scan
        :rtype: bool
        """
        return self._ScanVul

    @ScanVul.setter
    def ScanVul(self, ScanVul):
        self._ScanVul = ScanVul

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""All images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Images(self):
        r"""Custom image
        :rtype: list of str
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._ScanTime = params.get("ScanTime")
        self._ScanPeriod = params.get("ScanPeriod")
        self._ScanVirus = params.get("ScanVirus")
        self._ScanRisk = params.get("ScanRisk")
        self._ScanVul = params.get("ScanVul")
        self._All = params.get("All")
        self._Images = params.get("Images")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAssetImageScanSettingResponse(AbstractModel):
    r"""CreateAssetImageScanSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateAssetImageScanTaskRequest(AbstractModel):
    r"""CreateAssetImageScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _All: Whether to scan all images.
        :type All: bool
        :param _Images: List of images to be scanned.
        :type Images: list of str
        :param _ScanVul: Scan for vulnerabilities.
        :type ScanVul: bool
        :param _ScanVirus: Scan for trojans.
        :type ScanVirus: bool
        :param _ScanRisk: Scan for risks.
        :type ScanRisk: bool
        :param _Filters: Filter
        :type Filters: list of AssetFilters
        :param _ExcludeImageIds: Specified image IDs to be excluded
        :type ExcludeImageIds: list of str
        """
        self._All = None
        self._Images = None
        self._ScanVul = None
        self._ScanVirus = None
        self._ScanRisk = None
        self._Filters = None
        self._ExcludeImageIds = None

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""Whether to scan all images.
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Images(self):
        r"""List of images to be scanned.
        :rtype: list of str
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def ScanVul(self):
        r"""Scan for vulnerabilities.
        :rtype: bool
        """
        return self._ScanVul

    @ScanVul.setter
    def ScanVul(self, ScanVul):
        self._ScanVul = ScanVul

    @property
    def ScanVirus(self):
        r"""Scan for trojans.
        :rtype: bool
        """
        return self._ScanVirus

    @ScanVirus.setter
    def ScanVirus(self, ScanVirus):
        self._ScanVirus = ScanVirus

    @property
    def ScanRisk(self):
        r"""Scan for risks.
        :rtype: bool
        """
        return self._ScanRisk

    @ScanRisk.setter
    def ScanRisk(self, ScanRisk):
        self._ScanRisk = ScanRisk

    @property
    def Filters(self):
        r"""Filter
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExcludeImageIds(self):
        r"""Specified image IDs to be excluded
        :rtype: list of str
        """
        return self._ExcludeImageIds

    @ExcludeImageIds.setter
    def ExcludeImageIds(self, ExcludeImageIds):
        self._ExcludeImageIds = ExcludeImageIds


    def _deserialize(self, params):
        self._All = params.get("All")
        self._Images = params.get("Images")
        self._ScanVul = params.get("ScanVul")
        self._ScanVirus = params.get("ScanVirus")
        self._ScanRisk = params.get("ScanRisk")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExcludeImageIds = params.get("ExcludeImageIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAssetImageScanTaskResponse(AbstractModel):
    r"""CreateAssetImageScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskID = None
        self._RequestId = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._RequestId = params.get("RequestId")


class CreateAssetImageVirusExportJobRequest(AbstractModel):
    r"""CreateAssetImageVirusExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Filters: Number of results to be returned. Default value: `10`. Maximum value: `10000`.
        :type Filters: list of AssetFilters
        :param _Limit: Offset. Default value: `0`.
        :type Limit: int
        :param _Offset: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Offset: int
        :param _By: Sorting field
        :type By: str
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ExportField = None
        self._ImageID = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._By = None
        self._Order = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Filters(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `10000`.
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._ImageID = params.get("ImageID")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAssetImageVirusExportJobResponse(AbstractModel):
    r"""CreateAssetImageVirusExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateCheckComponentRequest(AbstractModel):
    r"""CreateCheckComponent request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterInfoList: Information of the list of clusters for installation
        :type ClusterInfoList: list of ClusterCreateComponentItem
        """
        self._ClusterInfoList = None

    @property
    def ClusterInfoList(self):
        r"""Information of the list of clusters for installation
        :rtype: list of ClusterCreateComponentItem
        """
        return self._ClusterInfoList

    @ClusterInfoList.setter
    def ClusterInfoList(self, ClusterInfoList):
        self._ClusterInfoList = ClusterInfoList


    def _deserialize(self, params):
        if params.get("ClusterInfoList") is not None:
            self._ClusterInfoList = []
            for item in params.get("ClusterInfoList"):
                obj = ClusterCreateComponentItem()
                obj._deserialize(item)
                self._ClusterInfoList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateCheckComponentResponse(AbstractModel):
    r"""CreateCheckComponent response structure.

    """

    def __init__(self):
        r"""
        :param _InstallResult: Valid values: `InstallSucc` (installed successfully); `InstallFailed` (failed to install).
        :type InstallResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._InstallResult = None
        self._RequestId = None

    @property
    def InstallResult(self):
        r"""Valid values: `InstallSucc` (installed successfully); `InstallFailed` (failed to install).
        :rtype: str
        """
        return self._InstallResult

    @InstallResult.setter
    def InstallResult(self, InstallResult):
        self._InstallResult = InstallResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._InstallResult = params.get("InstallResult")
        self._RequestId = params.get("RequestId")


class CreateClusterCheckTaskRequest(AbstractModel):
    r"""CreateClusterCheckTask request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterCheckTaskList: Information of the specified cluster to be scanned
        :type ClusterCheckTaskList: list of ClusterCheckTaskItem
        """
        self._ClusterCheckTaskList = None

    @property
    def ClusterCheckTaskList(self):
        r"""Information of the specified cluster to be scanned
        :rtype: list of ClusterCheckTaskItem
        """
        return self._ClusterCheckTaskList

    @ClusterCheckTaskList.setter
    def ClusterCheckTaskList(self, ClusterCheckTaskList):
        self._ClusterCheckTaskList = ClusterCheckTaskList


    def _deserialize(self, params):
        if params.get("ClusterCheckTaskList") is not None:
            self._ClusterCheckTaskList = []
            for item in params.get("ClusterCheckTaskList"):
                obj = ClusterCheckTaskItem()
                obj._deserialize(item)
                self._ClusterCheckTaskList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateClusterCheckTaskResponse(AbstractModel):
    r"""CreateClusterCheckTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created cluster check task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _CreateResult: Result of creating the check task. Valid values: `Succ` (success); others (failure cause).
        :type CreateResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._CreateResult = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created cluster check task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CreateResult(self):
        r"""Result of creating the check task. Valid values: `Succ` (success); others (failure cause).
        :rtype: str
        """
        return self._CreateResult

    @CreateResult.setter
    def CreateResult(self, CreateResult):
        self._CreateResult = CreateResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CreateResult = params.get("CreateResult")
        self._RequestId = params.get("RequestId")


class CreateComplianceTaskRequest(AbstractModel):
    r"""CreateComplianceTask request structure.

    """

    def __init__(self):
        r"""
        :param _AssetTypeSet: List of asset types to be scanned
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
A valid value must be entered for the `AssetTypeSet`, `PolicySetId`, or `PeriodTaskId` parameter.
        :type AssetTypeSet: list of str
        :param _PolicySetId: Policy set ID
        :type PolicySetId: int
        :param _PeriodTaskId: Scheduled task ID
        :type PeriodTaskId: int
        """
        self._AssetTypeSet = None
        self._PolicySetId = None
        self._PeriodTaskId = None

    @property
    def AssetTypeSet(self):
        r"""List of asset types to be scanned
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
A valid value must be entered for the `AssetTypeSet`, `PolicySetId`, or `PeriodTaskId` parameter.
        :rtype: list of str
        """
        return self._AssetTypeSet

    @AssetTypeSet.setter
    def AssetTypeSet(self, AssetTypeSet):
        self._AssetTypeSet = AssetTypeSet

    @property
    def PolicySetId(self):
        r"""Policy set ID
        :rtype: int
        """
        return self._PolicySetId

    @PolicySetId.setter
    def PolicySetId(self, PolicySetId):
        self._PolicySetId = PolicySetId

    @property
    def PeriodTaskId(self):
        r"""Scheduled task ID
        :rtype: int
        """
        return self._PeriodTaskId

    @PeriodTaskId.setter
    def PeriodTaskId(self, PeriodTaskId):
        self._PeriodTaskId = PeriodTaskId


    def _deserialize(self, params):
        self._AssetTypeSet = params.get("AssetTypeSet")
        self._PolicySetId = params.get("PolicySetId")
        self._PeriodTaskId = params.get("PeriodTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateComplianceTaskResponse(AbstractModel):
    r"""CreateComplianceTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created compliance check task
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created compliance check task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateComponentExportJobRequest(AbstractModel):
    r"""CreateComponentExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `desc`, `asc`.
        :type Order: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None
        self._ExportField = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `desc`, `asc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateComponentExportJobResponse(AbstractModel):
    r"""CreateComponentExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateDefenceVulExportJobRequest(AbstractModel):
    r"""CreateDefenceVulExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDefenceVulExportJobResponse(AbstractModel):
    r"""CreateDefenceVulExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateEmergencyVulExportJobRequest(AbstractModel):
    r"""CreateEmergencyVulExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateEmergencyVulExportJobResponse(AbstractModel):
    r"""CreateEmergencyVulExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateEscapeEventsExportJobRequest(AbstractModel):
    r"""CreateEscapeEventsExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field: `latest_found_time`.
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `latest_found_time`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateEscapeEventsExportJobResponse(AbstractModel):
    r"""CreateEscapeEventsExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateEscapeWhiteListExportJobRequest(AbstractModel):
    r"""CreateEscapeWhiteListExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>EventType- String - Required: No - Allowed event type. Valid values: `ESCAPE_CGROUPS` (cgroup escape); `ESCAPE_TAMPER_SENSITIVE_FILE` (file tamper escape); `ESCAPE_DOCKER_API` (Docker API access escape); `ESCAPE_VUL_OCCURRED` (vulnerability exploit); `MOUNT_SENSITIVE_PTAH` (sensitive path mount); `PRIVILEGE_CONTAINER_START` (privileged container); `PRIVILEGE` (program privilege escalation escape).</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field. Valid values: `HostCount` (number of servers); `ContainerCount` (number of containers); `UpdateTime` (update time).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>EventType- String - Required: No - Allowed event type. Valid values: `ESCAPE_CGROUPS` (cgroup escape); `ESCAPE_TAMPER_SENSITIVE_FILE` (file tamper escape); `ESCAPE_DOCKER_API` (Docker API access escape); `ESCAPE_VUL_OCCURRED` (vulnerability exploit); `MOUNT_SENSITIVE_PTAH` (sensitive path mount); `PRIVILEGE_CONTAINER_START` (privileged container); `PRIVILEGE` (program privilege escalation escape).</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field. Valid values: `HostCount` (number of servers); `ContainerCount` (number of containers); `UpdateTime` (update time).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateEscapeWhiteListExportJobResponse(AbstractModel):
    r"""CreateEscapeWhiteListExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateExportComplianceStatusListJobRequest(AbstractModel):
    r"""CreateExportComplianceStatusListJob request structure.

    """

    def __init__(self):
        r"""
        :param _AssetType: Asset type of the information to be exported
        :type AssetType: str
        :param _ExportByAsset: Export by check item or asset. Valid values: `true` (export by asset); `false` (export by check item).
        :type ExportByAsset: bool
        :param _ExportAll: Valid values: `true` (export all); `false` (export based on the `IdList`).
        :type ExportAll: bool
        :param _IdList: List of IDs of assets or check items to be exported, which is determined by the value of `ExportByAsset`.
        :type IdList: list of int non-negative
        """
        self._AssetType = None
        self._ExportByAsset = None
        self._ExportAll = None
        self._IdList = None

    @property
    def AssetType(self):
        r"""Asset type of the information to be exported
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def ExportByAsset(self):
        r"""Export by check item or asset. Valid values: `true` (export by asset); `false` (export by check item).
        :rtype: bool
        """
        return self._ExportByAsset

    @ExportByAsset.setter
    def ExportByAsset(self, ExportByAsset):
        self._ExportByAsset = ExportByAsset

    @property
    def ExportAll(self):
        r"""Valid values: `true` (export all); `false` (export based on the `IdList`).
        :rtype: bool
        """
        return self._ExportAll

    @ExportAll.setter
    def ExportAll(self, ExportAll):
        self._ExportAll = ExportAll

    @property
    def IdList(self):
        r"""List of IDs of assets or check items to be exported, which is determined by the value of `ExportByAsset`.
        :rtype: list of int non-negative
        """
        return self._IdList

    @IdList.setter
    def IdList(self, IdList):
        self._IdList = IdList


    def _deserialize(self, params):
        self._AssetType = params.get("AssetType")
        self._ExportByAsset = params.get("ExportByAsset")
        self._ExportAll = params.get("ExportAll")
        self._IdList = params.get("IdList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateExportComplianceStatusListJobResponse(AbstractModel):
    r"""CreateExportComplianceStatusListJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the created export task
Note: This field may return null, indicating that no valid values can be obtained.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the created export task
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateHostExportJobRequest(AbstractModel):
    r"""CreateHostExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>`Status` - String - Optional - Agent status. Values: `ALL`; `UNINSTALL` (Not installed); `OFFLINE`, `ONLINE`. Default to `All` if it's not specified. </li>
<li>`HostName` - String - Optional - Server name</li>
<li>`Group - String - Optional - Server group</li>
<li>`HostIP` - String - Optional - Server IP</li>
<li>`HostID - String - Optional - Server ID</li>
<li>`DockerVersion` - String - Optional - Docker version</li>
<li>`MachineType` - String - Optional - Server type. Values: `ALL`; `CVM` (Cloud Virtual Machine); `ECM` (Edge Computing Machine); `LH` (Lighthouse), `BM` (Cloud Bare Metal); `Other` (non-Tencent Cloud server). Default to `ALL` if it's not specified.</li>
<li>`DockerStatus` - String - Optional - Docker installation status. Values: `ALL`; `INSTALL` (Installed); `UNINSTALL` (Not installed)</li>
<li>`ProjectID` - String - Optional - Project ID</li>
<li>`Tag:xxx(tag:key)` - String - Optional - Tag key-value pair; Example: `Filters":[{"Name":"tag:tke-kind","Values":["service"]}]`</li>
        :type Filters: list of AssetFilters
        :param _Limit: Offset. Default value: `0`.
        :type Limit: int
        :param _Offset: The number of results to return. Default value: 10. Maximum value: 10,000.
        :type Offset: int
        :param _By: Sorting field
        :type By: str
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._By = None
        self._Order = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filters.
<li>`Status` - String - Optional - Agent status. Values: `ALL`; `UNINSTALL` (Not installed); `OFFLINE`, `ONLINE`. Default to `All` if it's not specified. </li>
<li>`HostName` - String - Optional - Server name</li>
<li>`Group - String - Optional - Server group</li>
<li>`HostIP` - String - Optional - Server IP</li>
<li>`HostID - String - Optional - Server ID</li>
<li>`DockerVersion` - String - Optional - Docker version</li>
<li>`MachineType` - String - Optional - Server type. Values: `ALL`; `CVM` (Cloud Virtual Machine); `ECM` (Edge Computing Machine); `LH` (Lighthouse), `BM` (Cloud Bare Metal); `Other` (non-Tencent Cloud server). Default to `ALL` if it's not specified.</li>
<li>`DockerStatus` - String - Optional - Docker installation status. Values: `ALL`; `INSTALL` (Installed); `UNINSTALL` (Not installed)</li>
<li>`ProjectID` - String - Optional - Project ID</li>
<li>`Tag:xxx(tag:key)` - String - Optional - Tag key-value pair; Example: `Filters":[{"Name":"tag:tke-kind","Values":["service"]}]`</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""The number of results to return. Default value: 10. Maximum value: 10,000.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateHostExportJobResponse(AbstractModel):
    r"""CreateHostExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateImageExportJobRequest(AbstractModel):
    r"""CreateImageExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :type Filters: list of RunTimeFilters
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._By = None
        self._Order = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateImageExportJobResponse(AbstractModel):
    r"""CreateImageExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _DownloadUrl: Excel file download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class CreateK8sApiAbnormalEventExportJobRequest(AbstractModel):
    r"""CreateK8sApiAbnormalEventExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>TimeRange - String - Optional - Time range. Example: ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>`MatchRules` - String - Optional - Hit rule</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
<li>`Status` - String - Optional - Event status</li>
<li>`MatchRuleType` - String - Optional - Hit rule type</li>
<li>`ClusterRunningStatus` - String - Optional - Cluster running status</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`ClusterID` - String - Optional - Cluster ID</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filters.
<li>TimeRange - String - Optional - Time range. Example: ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>`MatchRules` - String - Optional - Hit rule</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
<li>`Status` - String - Optional - Event status</li>
<li>`MatchRuleType` - String - Optional - Hit rule type</li>
<li>`ClusterRunningStatus` - String - Optional - Cluster running status</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`ClusterID` - String - Optional - Cluster ID</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateK8sApiAbnormalEventExportJobResponse(AbstractModel):
    r"""CreateK8sApiAbnormalEventExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the exportation job. You can query the job progress by using this ID on the console.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the exportation job. You can query the job progress by using this ID on the console.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateK8sApiAbnormalRuleExportJobRequest(AbstractModel):
    r"""CreateK8sApiAbnormalRuleExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>`RuleType` - String - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field
        :type By: list of str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filters.
<li>`RuleType` - String - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: list of str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateK8sApiAbnormalRuleExportJobResponse(AbstractModel):
    r"""CreateK8sApiAbnormalRuleExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the exportation job. You can query the job progress by using this ID on the console.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the exportation job. You can query the job progress by using this ID on the console.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateK8sApiAbnormalRuleInfoRequest(AbstractModel):
    r"""CreateK8sApiAbnormalRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _RuleInfo: Rule details
        :type RuleInfo: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        :param _CopySrcRuleID: The ID of the copy rule (for copy rule scenarios)
        :type CopySrcRuleID: str
        :param _EventID: Event ID (for adding events to an allowlist)
        :type EventID: int
        """
        self._RuleInfo = None
        self._CopySrcRuleID = None
        self._EventID = None

    @property
    def RuleInfo(self):
        r"""Rule details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        """
        return self._RuleInfo

    @RuleInfo.setter
    def RuleInfo(self, RuleInfo):
        self._RuleInfo = RuleInfo

    @property
    def CopySrcRuleID(self):
        r"""The ID of the copy rule (for copy rule scenarios)
        :rtype: str
        """
        return self._CopySrcRuleID

    @CopySrcRuleID.setter
    def CopySrcRuleID(self, CopySrcRuleID):
        self._CopySrcRuleID = CopySrcRuleID

    @property
    def EventID(self):
        r"""Event ID (for adding events to an allowlist)
        :rtype: int
        """
        return self._EventID

    @EventID.setter
    def EventID(self, EventID):
        self._EventID = EventID


    def _deserialize(self, params):
        if params.get("RuleInfo") is not None:
            self._RuleInfo = K8sApiAbnormalRuleInfo()
            self._RuleInfo._deserialize(params.get("RuleInfo"))
        self._CopySrcRuleID = params.get("CopySrcRuleID")
        self._EventID = params.get("EventID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateK8sApiAbnormalRuleInfoResponse(AbstractModel):
    r"""CreateK8sApiAbnormalRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RuleID: Rule ID
        :type RuleID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RuleID = None
        self._RequestId = None

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RuleID = params.get("RuleID")
        self._RequestId = params.get("RequestId")


class CreateNetworkFirewallClusterRefreshRequest(AbstractModel):
    r"""CreateNetworkFirewallClusterRefresh request structure.

    """


class CreateNetworkFirewallClusterRefreshResponse(AbstractModel):
    r"""CreateNetworkFirewallClusterRefresh response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created cluster check task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the check task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created cluster check task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the check task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CreateNetworkFirewallPolicyDiscoverRequest(AbstractModel):
    r"""CreateNetworkFirewallPolicyDiscover request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        """
        self._ClusterId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNetworkFirewallPolicyDiscoverResponse(AbstractModel):
    r"""CreateNetworkFirewallPolicyDiscover response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created cluster check task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the check task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created cluster check task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the check task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CreateNetworkFirewallPublishRequest(AbstractModel):
    r"""CreateNetworkFirewallPublish request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Array of cluster IDs
        :type Id: list of int non-negative
        """
        self._ClusterId = None
        self._Id = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Array of cluster IDs
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNetworkFirewallPublishResponse(AbstractModel):
    r"""CreateNetworkFirewallPublish response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CreateNetworkFirewallUndoPublishRequest(AbstractModel):
    r"""CreateNetworkFirewallUndoPublish request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Array of cluster IDs
        :type Id: list of int non-negative
        """
        self._ClusterId = None
        self._Id = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Array of cluster IDs
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNetworkFirewallUndoPublishResponse(AbstractModel):
    r"""CreateNetworkFirewallUndoPublish response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CreateOrModifyPostPayCoresRequest(AbstractModel):
    r"""CreateOrModifyPostPayCores request structure.

    """

    def __init__(self):
        r"""
        :param _CoresCnt: Upper limit for elastic billing. Minimum value: `500`.
        :type CoresCnt: int
        """
        self._CoresCnt = None

    @property
    def CoresCnt(self):
        r"""Upper limit for elastic billing. Minimum value: `500`.
        :rtype: int
        """
        return self._CoresCnt

    @CoresCnt.setter
    def CoresCnt(self, CoresCnt):
        self._CoresCnt = CoresCnt


    def _deserialize(self, params):
        self._CoresCnt = params.get("CoresCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateOrModifyPostPayCoresResponse(AbstractModel):
    r"""CreateOrModifyPostPayCores response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateProcessEventsExportJobRequest(AbstractModel):
    r"""CreateProcessEventsExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :type Filters: list of AssetFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field: `latest_found_time`.
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `latest_found_time`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateProcessEventsExportJobResponse(AbstractModel):
    r"""CreateProcessEventsExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateRefreshTaskRequest(AbstractModel):
    r"""CreateRefreshTask request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterIDs: 
        :type ClusterIDs: list of str
        :param _IsSyncListOnly: 
        :type IsSyncListOnly: bool
        """
        self._ClusterIDs = None
        self._IsSyncListOnly = None

    @property
    def ClusterIDs(self):
        r"""
        :rtype: list of str
        """
        return self._ClusterIDs

    @ClusterIDs.setter
    def ClusterIDs(self, ClusterIDs):
        self._ClusterIDs = ClusterIDs

    @property
    def IsSyncListOnly(self):
        r"""
        :rtype: bool
        """
        return self._IsSyncListOnly

    @IsSyncListOnly.setter
    def IsSyncListOnly(self, IsSyncListOnly):
        self._IsSyncListOnly = IsSyncListOnly


    def _deserialize(self, params):
        self._ClusterIDs = params.get("ClusterIDs")
        self._IsSyncListOnly = params.get("IsSyncListOnly")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRefreshTaskResponse(AbstractModel):
    r"""CreateRefreshTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created cluster check task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _CreateResult: Result of creating the check task. Valid values: `Succ`, `Failed`.
        :type CreateResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._CreateResult = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created cluster check task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CreateResult(self):
        r"""Result of creating the check task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._CreateResult

    @CreateResult.setter
    def CreateResult(self, CreateResult):
        self._CreateResult = CreateResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CreateResult = params.get("CreateResult")
        self._RequestId = params.get("RequestId")


class CreateRiskDnsEventExportJobRequest(AbstractModel):
    r"""CreateRiskDnsEventExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>`EventStatus` - String - Optional - Event status. Values: `EVENT_UNDEAL` (Pending); `EVENT_DEALED` (Handled); `EVENT_IGNORE` (Ignored); `EVENT_ADD_WHITE` (Added to the allowlist)</li>
<li>`ContainerStatus` - String - Optional - Container running status. `CREATED`, `RUNNING`, `PAUSED`, `STOPPED`, `RESTARTING`: `REMOVING`, `DESTROYED (Terminated)</li>
<li>`ContainerNetStatus` - String - Optional - Container network status. Values: `NORMAL`, `ISOLATED`, `ISOLATE_FAILED` (Isolation failed`; `RESTORE_FAILED` (Failed to restore from isolation), `RESTORING` (Restoring); `ISOLATING`</li>
<li>`EventType` - String - Optional - Event type. Values: `DOMAIN` (Malicious domain); `IP` (Malicious IP)</li>
<li>`TimeRange` - String - Optional - Time range, where the first value represents the start time and the second value represents the end time</li>
<li>`RiskDns` - String - Optional - Malicious domain. </li>
<li>`RiskIP`- String - Optional - Malicious IP. </li>
<li>`ContainerName` - String - Optional - Container name. </li>
<li>`ContainerID` - String - Optional - Container ID. </li>
<li>`ImageName` - String - Optional - Image name. </li>
<li>`ImageID` - String - Optional - Image ID. </li>
<li>`HostName` - String - Optional - Server name. </li>
<li>`HostIP` - String - Optional - Private IP. </li>
<li>`PublicIP` - String - Optional - Public IP. </li>
        :type Filters: list of RunTimeFilters
        :param _Limit: The number of results displayed per page. The maximum value is 100,000.
        :type Limit: int
        :param _Offset: Offset. Default value: 0
        :type Offset: int
        :param _Order: Sort order: `asc`, `desc`
        :type Order: str
        :param _By: Sorting field: Number of events: EventCount
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filters.
<li>`EventStatus` - String - Optional - Event status. Values: `EVENT_UNDEAL` (Pending); `EVENT_DEALED` (Handled); `EVENT_IGNORE` (Ignored); `EVENT_ADD_WHITE` (Added to the allowlist)</li>
<li>`ContainerStatus` - String - Optional - Container running status. `CREATED`, `RUNNING`, `PAUSED`, `STOPPED`, `RESTARTING`: `REMOVING`, `DESTROYED (Terminated)</li>
<li>`ContainerNetStatus` - String - Optional - Container network status. Values: `NORMAL`, `ISOLATED`, `ISOLATE_FAILED` (Isolation failed`; `RESTORE_FAILED` (Failed to restore from isolation), `RESTORING` (Restoring); `ISOLATING`</li>
<li>`EventType` - String - Optional - Event type. Values: `DOMAIN` (Malicious domain); `IP` (Malicious IP)</li>
<li>`TimeRange` - String - Optional - Time range, where the first value represents the start time and the second value represents the end time</li>
<li>`RiskDns` - String - Optional - Malicious domain. </li>
<li>`RiskIP`- String - Optional - Malicious IP. </li>
<li>`ContainerName` - String - Optional - Container name. </li>
<li>`ContainerID` - String - Optional - Container ID. </li>
<li>`ImageName` - String - Optional - Image name. </li>
<li>`ImageID` - String - Optional - Image ID. </li>
<li>`HostName` - String - Optional - Server name. </li>
<li>`HostIP` - String - Optional - Private IP. </li>
<li>`PublicIP` - String - Optional - Public IP. </li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""The number of results displayed per page. The maximum value is 100,000.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sort order: `asc`, `desc`
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: Number of events: EventCount
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRiskDnsEventExportJobResponse(AbstractModel):
    r"""CreateRiskDnsEventExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: ID of the exportation job. You can query the job progress by using this ID on the console.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""ID of the exportation job. You can query the job progress by using this ID on the console.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateSearchTemplateRequest(AbstractModel):
    r"""CreateSearchTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _SearchTemplate: Search template
        :type SearchTemplate: :class:`tencentcloud.tcss.v20201101.models.SearchTemplate`
        """
        self._SearchTemplate = None

    @property
    def SearchTemplate(self):
        r"""Search template
        :rtype: :class:`tencentcloud.tcss.v20201101.models.SearchTemplate`
        """
        return self._SearchTemplate

    @SearchTemplate.setter
    def SearchTemplate(self, SearchTemplate):
        self._SearchTemplate = SearchTemplate


    def _deserialize(self, params):
        if params.get("SearchTemplate") is not None:
            self._SearchTemplate = SearchTemplate()
            self._SearchTemplate._deserialize(params.get("SearchTemplate"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSearchTemplateResponse(AbstractModel):
    r"""CreateSearchTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateSystemVulExportJobRequest(AbstractModel):
    r"""CreateSystemVulExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Sub-type of the vulnerability</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Sub-type of the vulnerability</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSystemVulExportJobResponse(AbstractModel):
    r"""CreateSystemVulExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVirusScanAgainRequest(AbstractModel):
    r"""CreateVirusScanAgain request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ContainerIds: Set of IDs of containers to be scanned
        :type ContainerIds: list of str
        :param _TimeoutAll: Whether to scan all timed-out containers
        :type TimeoutAll: bool
        :param _Timeout: New timeout period
        :type Timeout: int
        """
        self._TaskId = None
        self._ContainerIds = None
        self._TimeoutAll = None
        self._Timeout = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ContainerIds(self):
        r"""Set of IDs of containers to be scanned
        :rtype: list of str
        """
        return self._ContainerIds

    @ContainerIds.setter
    def ContainerIds(self, ContainerIds):
        self._ContainerIds = ContainerIds

    @property
    def TimeoutAll(self):
        r"""Whether to scan all timed-out containers
        :rtype: bool
        """
        return self._TimeoutAll

    @TimeoutAll.setter
    def TimeoutAll(self, TimeoutAll):
        self._TimeoutAll = TimeoutAll

    @property
    def Timeout(self):
        r"""New timeout period
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ContainerIds = params.get("ContainerIds")
        self._TimeoutAll = params.get("TimeoutAll")
        self._Timeout = params.get("Timeout")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVirusScanAgainResponse(AbstractModel):
    r"""CreateVirusScanAgain response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateVirusScanTaskRequest(AbstractModel):
    r"""CreateVirusScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _ScanPathAll: Whether to scan all paths
        :type ScanPathAll: bool
        :param _ScanRangeType: Scanning scope. Valid values: `0` (container); `1` (server).
        :type ScanRangeType: int
        :param _ScanRangeAll: Valid values: `true` (all); `false` (specified).
        :type ScanRangeAll: bool
        :param _Timeout: Timeout period in hours
        :type Timeout: int
        :param _ScanPathType: Valid when `ScanPathAll` is `false`. Valid values: `0` (scan the following paths); `1` (scan all paths except the following).
        :type ScanPathType: int
        :param _ScanIds: ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :type ScanIds: list of str
        :param _ScanPath: Specified path to be excluded or scanned
        :type ScanPath: list of str
        :param _ScanPathMode: Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :type ScanPathMode: str
        """
        self._ScanPathAll = None
        self._ScanRangeType = None
        self._ScanRangeAll = None
        self._Timeout = None
        self._ScanPathType = None
        self._ScanIds = None
        self._ScanPath = None
        self._ScanPathMode = None

    @property
    def ScanPathAll(self):
        r"""Whether to scan all paths
        :rtype: bool
        """
        return self._ScanPathAll

    @ScanPathAll.setter
    def ScanPathAll(self, ScanPathAll):
        self._ScanPathAll = ScanPathAll

    @property
    def ScanRangeType(self):
        r"""Scanning scope. Valid values: `0` (container); `1` (server).
        :rtype: int
        """
        return self._ScanRangeType

    @ScanRangeType.setter
    def ScanRangeType(self, ScanRangeType):
        self._ScanRangeType = ScanRangeType

    @property
    def ScanRangeAll(self):
        r"""Valid values: `true` (all); `false` (specified).
        :rtype: bool
        """
        return self._ScanRangeAll

    @ScanRangeAll.setter
    def ScanRangeAll(self, ScanRangeAll):
        self._ScanRangeAll = ScanRangeAll

    @property
    def Timeout(self):
        r"""Timeout period in hours
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def ScanPathType(self):
        r"""Valid when `ScanPathAll` is `false`. Valid values: `0` (scan the following paths); `1` (scan all paths except the following).
        :rtype: int
        """
        return self._ScanPathType

    @ScanPathType.setter
    def ScanPathType(self, ScanPathType):
        self._ScanPathType = ScanPathType

    @property
    def ScanIds(self):
        r"""ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :rtype: list of str
        """
        return self._ScanIds

    @ScanIds.setter
    def ScanIds(self, ScanIds):
        self._ScanIds = ScanIds

    @property
    def ScanPath(self):
        r"""Specified path to be excluded or scanned
        :rtype: list of str
        """
        return self._ScanPath

    @ScanPath.setter
    def ScanPath(self, ScanPath):
        self._ScanPath = ScanPath

    @property
    def ScanPathMode(self):
        r"""Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :rtype: str
        """
        return self._ScanPathMode

    @ScanPathMode.setter
    def ScanPathMode(self, ScanPathMode):
        self._ScanPathMode = ScanPathMode


    def _deserialize(self, params):
        self._ScanPathAll = params.get("ScanPathAll")
        self._ScanRangeType = params.get("ScanRangeType")
        self._ScanRangeAll = params.get("ScanRangeAll")
        self._Timeout = params.get("Timeout")
        self._ScanPathType = params.get("ScanPathType")
        self._ScanIds = params.get("ScanIds")
        self._ScanPath = params.get("ScanPath")
        self._ScanPathMode = params.get("ScanPathMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVirusScanTaskResponse(AbstractModel):
    r"""CreateVirusScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskID = None
        self._RequestId = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._RequestId = params.get("RequestId")


class CreateVulContainerExportJobRequest(AbstractModel):
    r"""CreateVulContainerExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- String - Required: No - Container name</li>
        :type Filters: list of RunTimeFilters
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- String - Required: No - Container name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulContainerExportJobResponse(AbstractModel):
    r"""CreateVulContainerExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVulDefenceEventExportJobRequest(AbstractModel):
    r"""CreateVulDefenceEventExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>Status- String - Required: No - Plugin status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignored); `EVENT_DEFENDED` (defended).</li>
<li>ContainerStatus- String - Required: No - Container status. Valid values: `CREATED` (created); `RUNNING` (running); `PAUSED` (suspended); 	`STOPPED` (stopped); `RESTARTING` (restarting); `REMOVING` (removing); `DESTROYED` (terminated).</li>
<li>ContainerNetStatus- String - Required: No - Container network status. Valid values: `NORMAL` (not isolated); `ISOLATED` (isolated); `ISOLATE_FAILED` (isolation failed); `RESTORE_FAILED` (recovery failed); `RESTORING` (recovering); `ISOLATING` (isolating).</li>
<li>EventType - String - Required: No - Intrusion status. Valid values: `EVENT_DEFENDED` (defended successfully); `EVENT_ATTACK` (attack attempt).</li>
<li>TimeRange- String - Required: No - Time range. The first value indicates the start time, and the second the end time.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>SourceIP- string - Required: No - Attacker IP</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>HostName- string - Required: No - Server name</li>
<li>HostIP- string - Required: No - Private IP</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Maximum value: `100000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field: `EventCount` (number of events).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>Status- String - Required: No - Plugin status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignored); `EVENT_DEFENDED` (defended).</li>
<li>ContainerStatus- String - Required: No - Container status. Valid values: `CREATED` (created); `RUNNING` (running); `PAUSED` (suspended); 	`STOPPED` (stopped); `RESTARTING` (restarting); `REMOVING` (removing); `DESTROYED` (terminated).</li>
<li>ContainerNetStatus- String - Required: No - Container network status. Valid values: `NORMAL` (not isolated); `ISOLATED` (isolated); `ISOLATE_FAILED` (isolation failed); `RESTORE_FAILED` (recovery failed); `RESTORING` (recovering); `ISOLATING` (isolating).</li>
<li>EventType - String - Required: No - Intrusion status. Valid values: `EVENT_DEFENDED` (defended successfully); `EVENT_ATTACK` (attack attempt).</li>
<li>TimeRange- String - Required: No - Time range. The first value indicates the start time, and the second the end time.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>SourceIP- string - Required: No - Attacker IP</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>HostName- string - Required: No - Server name</li>
<li>HostIP- string - Required: No - Private IP</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Maximum value: `100000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `EventCount` (number of events).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulDefenceEventExportJobResponse(AbstractModel):
    r"""CreateVulDefenceEventExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVulDefenceHostExportJobRequest(AbstractModel):
    r"""CreateVulDefenceHostExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>Status- String - Required: No - Plugin status. Valid values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENCE` (not defended).</li>
<li>KeyWords- string - Required: No - Server name/IP</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Maximum value: `100000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field. Valid values: `ModifyTime` (update time); `CreateTime` (first enablement time).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>Status- String - Required: No - Plugin status. Valid values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENCE` (not defended).</li>
<li>KeyWords- string - Required: No - Server name/IP</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Maximum value: `100000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field. Valid values: `ModifyTime` (update time); `CreateTime` (first enablement time).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulDefenceHostExportJobResponse(AbstractModel):
    r"""CreateVulDefenceHostExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVulExportJobRequest(AbstractModel):
    r"""CreateVulExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `desc`, `asc`.
        :type Order: str
        """
        self._ImageID = None
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10000`. Maximum value: `10000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `desc`, `asc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulExportJobResponse(AbstractModel):
    r"""CreateVulExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVulImageExportJobRequest(AbstractModel):
    r"""CreateVulImageExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ClientIP- string - Required: No - Private IP</li>
<li>PublicIP- string - Required: No - Public IP</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>HostName- string - Required: No - Server name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ClientIP- string - Required: No - Private IP</li>
<li>PublicIP- string - Required: No - Public IP</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>HostName- string - Required: No - Server name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulImageExportJobResponse(AbstractModel):
    r"""CreateVulImageExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class CreateVulScanTaskRequest(AbstractModel):
    r"""CreateVulScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _LocalImageScanType: Local image scan scope. Valid values: `ALL` (all local images); `NOT_SCAN` (all licensed but not scanned local images); `IMAGEIDS` (IDs of specified local images).
        :type LocalImageScanType: str
        :param _LocalImageIDs: Scan by licensed local image ID, with a higher priority than scan by licensed local image that meets the condition.
        :type LocalImageIDs: list of str
        :param _RegistryImageScanType: Repository image scan scope. Valid values: `ALL` (all repository images); `NOT_SCAN` (all licensed but not scanned repository images); `IMAGEIDS` (IDs of specified repository images).
        :type RegistryImageScanType: str
        :param _RegistryImageIDs: Scan by licensed repository image ID, with a higher priority than scan by licensed repository image that meets the condition.
        :type RegistryImageIDs: list of int non-negative
        :param _LocalTaskID: ID of the task to scan local images again for vulnerabilities
        :type LocalTaskID: int
        :param _RegistryTaskID: ID of the task to scan repository images again for vulnerabilities
        :type RegistryTaskID: int
        """
        self._LocalImageScanType = None
        self._LocalImageIDs = None
        self._RegistryImageScanType = None
        self._RegistryImageIDs = None
        self._LocalTaskID = None
        self._RegistryTaskID = None

    @property
    def LocalImageScanType(self):
        r"""Local image scan scope. Valid values: `ALL` (all local images); `NOT_SCAN` (all licensed but not scanned local images); `IMAGEIDS` (IDs of specified local images).
        :rtype: str
        """
        return self._LocalImageScanType

    @LocalImageScanType.setter
    def LocalImageScanType(self, LocalImageScanType):
        self._LocalImageScanType = LocalImageScanType

    @property
    def LocalImageIDs(self):
        r"""Scan by licensed local image ID, with a higher priority than scan by licensed local image that meets the condition.
        :rtype: list of str
        """
        return self._LocalImageIDs

    @LocalImageIDs.setter
    def LocalImageIDs(self, LocalImageIDs):
        self._LocalImageIDs = LocalImageIDs

    @property
    def RegistryImageScanType(self):
        r"""Repository image scan scope. Valid values: `ALL` (all repository images); `NOT_SCAN` (all licensed but not scanned repository images); `IMAGEIDS` (IDs of specified repository images).
        :rtype: str
        """
        return self._RegistryImageScanType

    @RegistryImageScanType.setter
    def RegistryImageScanType(self, RegistryImageScanType):
        self._RegistryImageScanType = RegistryImageScanType

    @property
    def RegistryImageIDs(self):
        r"""Scan by licensed repository image ID, with a higher priority than scan by licensed repository image that meets the condition.
        :rtype: list of int non-negative
        """
        return self._RegistryImageIDs

    @RegistryImageIDs.setter
    def RegistryImageIDs(self, RegistryImageIDs):
        self._RegistryImageIDs = RegistryImageIDs

    @property
    def LocalTaskID(self):
        r"""ID of the task to scan local images again for vulnerabilities
        :rtype: int
        """
        return self._LocalTaskID

    @LocalTaskID.setter
    def LocalTaskID(self, LocalTaskID):
        self._LocalTaskID = LocalTaskID

    @property
    def RegistryTaskID(self):
        r"""ID of the task to scan repository images again for vulnerabilities
        :rtype: int
        """
        return self._RegistryTaskID

    @RegistryTaskID.setter
    def RegistryTaskID(self, RegistryTaskID):
        self._RegistryTaskID = RegistryTaskID


    def _deserialize(self, params):
        self._LocalImageScanType = params.get("LocalImageScanType")
        self._LocalImageIDs = params.get("LocalImageIDs")
        self._RegistryImageScanType = params.get("RegistryImageScanType")
        self._RegistryImageIDs = params.get("RegistryImageIDs")
        self._LocalTaskID = params.get("LocalTaskID")
        self._RegistryTaskID = params.get("RegistryTaskID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVulScanTaskResponse(AbstractModel):
    r"""CreateVulScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _LocalTaskID: ID of the task to scan local images again for vulnerabilities
        :type LocalTaskID: int
        :param _RegistryTaskID: ID of the task to scan repository images again for vulnerabilities
        :type RegistryTaskID: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LocalTaskID = None
        self._RegistryTaskID = None
        self._RequestId = None

    @property
    def LocalTaskID(self):
        r"""ID of the task to scan local images again for vulnerabilities
        :rtype: int
        """
        return self._LocalTaskID

    @LocalTaskID.setter
    def LocalTaskID(self, LocalTaskID):
        self._LocalTaskID = LocalTaskID

    @property
    def RegistryTaskID(self):
        r"""ID of the task to scan repository images again for vulnerabilities
        :rtype: int
        """
        return self._RegistryTaskID

    @RegistryTaskID.setter
    def RegistryTaskID(self, RegistryTaskID):
        self._RegistryTaskID = RegistryTaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LocalTaskID = params.get("LocalTaskID")
        self._RegistryTaskID = params.get("RegistryTaskID")
        self._RequestId = params.get("RequestId")


class CreateWebVulExportJobRequest(AbstractModel):
    r"""CreateWebVulExportJob request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Sub-type of the vulnerability</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `50000`. Maximum value: `50000`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Sub-type of the vulnerability</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateWebVulExportJobResponse(AbstractModel):
    r"""CreateWebVulExportJob response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DeleteAbnormalProcessRulesRequest(AbstractModel):
    r"""DeleteAbnormalProcessRules request structure.

    """

    def __init__(self):
        r"""
        :param _RuleIdSet: Policy IDs
        :type RuleIdSet: list of str
        """
        self._RuleIdSet = None

    @property
    def RuleIdSet(self):
        r"""Policy IDs
        :rtype: list of str
        """
        return self._RuleIdSet

    @RuleIdSet.setter
    def RuleIdSet(self, RuleIdSet):
        self._RuleIdSet = RuleIdSet


    def _deserialize(self, params):
        self._RuleIdSet = params.get("RuleIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAbnormalProcessRulesResponse(AbstractModel):
    r"""DeleteAbnormalProcessRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteAccessControlRulesRequest(AbstractModel):
    r"""DeleteAccessControlRules request structure.

    """

    def __init__(self):
        r"""
        :param _RuleIdSet: Policy IDs
        :type RuleIdSet: list of str
        """
        self._RuleIdSet = None

    @property
    def RuleIdSet(self):
        r"""Policy IDs
        :rtype: list of str
        """
        return self._RuleIdSet

    @RuleIdSet.setter
    def RuleIdSet(self, RuleIdSet):
        self._RuleIdSet = RuleIdSet


    def _deserialize(self, params):
        self._RuleIdSet = params.get("RuleIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAccessControlRulesResponse(AbstractModel):
    r"""DeleteAccessControlRules response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteComplianceAssetPolicySetFromWhitelistRequest(AbstractModel):
    r"""DeleteComplianceAssetPolicySetFromWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _AssetItemId: Asset ID
        :type AssetItemId: int
        :param _CustomerPolicyItemIdSet: List of IDs of check items to be ignored in the specified asset
        :type CustomerPolicyItemIdSet: list of int non-negative
        """
        self._AssetItemId = None
        self._CustomerPolicyItemIdSet = None

    @property
    def AssetItemId(self):
        r"""Asset ID
        :rtype: int
        """
        return self._AssetItemId

    @AssetItemId.setter
    def AssetItemId(self, AssetItemId):
        self._AssetItemId = AssetItemId

    @property
    def CustomerPolicyItemIdSet(self):
        r"""List of IDs of check items to be ignored in the specified asset
        :rtype: list of int non-negative
        """
        return self._CustomerPolicyItemIdSet

    @CustomerPolicyItemIdSet.setter
    def CustomerPolicyItemIdSet(self, CustomerPolicyItemIdSet):
        self._CustomerPolicyItemIdSet = CustomerPolicyItemIdSet


    def _deserialize(self, params):
        self._AssetItemId = params.get("AssetItemId")
        self._CustomerPolicyItemIdSet = params.get("CustomerPolicyItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteComplianceAssetPolicySetFromWhitelistResponse(AbstractModel):
    r"""DeleteComplianceAssetPolicySetFromWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteCompliancePolicyAssetSetFromWhitelistRequest(AbstractModel):
    r"""DeleteCompliancePolicyAssetSetFromWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _PolicyAssetSetList: List of check item IDs and asset IDs
        :type PolicyAssetSetList: list of CompliancePolicyAssetSetItem
        """
        self._PolicyAssetSetList = None

    @property
    def PolicyAssetSetList(self):
        r"""List of check item IDs and asset IDs
        :rtype: list of CompliancePolicyAssetSetItem
        """
        return self._PolicyAssetSetList

    @PolicyAssetSetList.setter
    def PolicyAssetSetList(self, PolicyAssetSetList):
        self._PolicyAssetSetList = PolicyAssetSetList


    def _deserialize(self, params):
        if params.get("PolicyAssetSetList") is not None:
            self._PolicyAssetSetList = []
            for item in params.get("PolicyAssetSetList"):
                obj = CompliancePolicyAssetSetItem()
                obj._deserialize(item)
                self._PolicyAssetSetList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteCompliancePolicyAssetSetFromWhitelistResponse(AbstractModel):
    r"""DeleteCompliancePolicyAssetSetFromWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteCompliancePolicyItemFromWhitelistRequest(AbstractModel):
    r"""DeleteCompliancePolicyItemFromWhitelist request structure.

    """

    def __init__(self):
        r"""
        :param _WhitelistIdSet: List of IDs of specified allowed items
        :type WhitelistIdSet: list of int non-negative
        """
        self._WhitelistIdSet = None

    @property
    def WhitelistIdSet(self):
        r"""List of IDs of specified allowed items
        :rtype: list of int non-negative
        """
        return self._WhitelistIdSet

    @WhitelistIdSet.setter
    def WhitelistIdSet(self, WhitelistIdSet):
        self._WhitelistIdSet = WhitelistIdSet


    def _deserialize(self, params):
        self._WhitelistIdSet = params.get("WhitelistIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteCompliancePolicyItemFromWhitelistResponse(AbstractModel):
    r"""DeleteCompliancePolicyItemFromWhitelist response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteEscapeWhiteListRequest(AbstractModel):
    r"""DeleteEscapeWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _IDSet: Array of allowed item IDs
        :type IDSet: list of int
        """
        self._IDSet = None

    @property
    def IDSet(self):
        r"""Array of allowed item IDs
        :rtype: list of int
        """
        return self._IDSet

    @IDSet.setter
    def IDSet(self, IDSet):
        self._IDSet = IDSet


    def _deserialize(self, params):
        self._IDSet = params.get("IDSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteEscapeWhiteListResponse(AbstractModel):
    r"""DeleteEscapeWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteIgnoreVulRequest(AbstractModel):
    r"""DeleteIgnoreVul request structure.

    """

    def __init__(self):
        r"""
        :param _List: List of POC IDs
        :type List: list of ModifyIgnoreVul
        """
        self._List = None

    @property
    def List(self):
        r"""List of POC IDs
        :rtype: list of ModifyIgnoreVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ModifyIgnoreVul()
                obj._deserialize(item)
                self._List.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteIgnoreVulResponse(AbstractModel):
    r"""DeleteIgnoreVul response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteK8sApiAbnormalRuleRequest(AbstractModel):
    r"""DeleteK8sApiAbnormalRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleIDSet: Rule ID set
        :type RuleIDSet: list of str
        """
        self._RuleIDSet = None

    @property
    def RuleIDSet(self):
        r"""Rule ID set
        :rtype: list of str
        """
        return self._RuleIDSet

    @RuleIDSet.setter
    def RuleIDSet(self, RuleIDSet):
        self._RuleIDSet = RuleIDSet


    def _deserialize(self, params):
        self._RuleIDSet = params.get("RuleIDSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteK8sApiAbnormalRuleResponse(AbstractModel):
    r"""DeleteK8sApiAbnormalRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteMachineRequest(AbstractModel):
    r"""DeleteMachine request structure.

    """

    def __init__(self):
        r"""
        :param _Uuid: Agent UUID
        :type Uuid: str
        """
        self._Uuid = None

    @property
    def Uuid(self):
        r"""Agent UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteMachineResponse(AbstractModel):
    r"""DeleteMachine response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""DeleteNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Array of cluster IDs
        :type Id: list of int non-negative
        """
        self._ClusterId = None
        self._Id = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Array of cluster IDs
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""DeleteNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the deletion task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the deletion task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class DeleteReverseShellEventsRequest(AbstractModel):
    r"""DeleteReverseShellEvents request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: Event IDs
        :type EventIdSet: list of str
        """
        self._EventIdSet = None

    @property
    def EventIdSet(self):
        r"""Event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteReverseShellEventsResponse(AbstractModel):
    r"""DeleteReverseShellEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteReverseShellWhiteListsRequest(AbstractModel):
    r"""DeleteReverseShellWhiteLists request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListIdSet: IDs of allowed items
        :type WhiteListIdSet: list of str
        """
        self._WhiteListIdSet = None

    @property
    def WhiteListIdSet(self):
        r"""IDs of allowed items
        :rtype: list of str
        """
        return self._WhiteListIdSet

    @WhiteListIdSet.setter
    def WhiteListIdSet(self, WhiteListIdSet):
        self._WhiteListIdSet = WhiteListIdSet


    def _deserialize(self, params):
        self._WhiteListIdSet = params.get("WhiteListIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteReverseShellWhiteListsResponse(AbstractModel):
    r"""DeleteReverseShellWhiteLists response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteRiskSyscallEventsRequest(AbstractModel):
    r"""DeleteRiskSyscallEvents request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: Event IDs
        :type EventIdSet: list of str
        """
        self._EventIdSet = None

    @property
    def EventIdSet(self):
        r"""Event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRiskSyscallEventsResponse(AbstractModel):
    r"""DeleteRiskSyscallEvents response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteRiskSyscallWhiteListsRequest(AbstractModel):
    r"""DeleteRiskSyscallWhiteLists request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListIdSet: IDs of allowed items
        :type WhiteListIdSet: list of str
        """
        self._WhiteListIdSet = None

    @property
    def WhiteListIdSet(self):
        r"""IDs of allowed items
        :rtype: list of str
        """
        return self._WhiteListIdSet

    @WhiteListIdSet.setter
    def WhiteListIdSet(self, WhiteListIdSet):
        self._WhiteListIdSet = WhiteListIdSet


    def _deserialize(self, params):
        self._WhiteListIdSet = params.get("WhiteListIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRiskSyscallWhiteListsResponse(AbstractModel):
    r"""DeleteRiskSyscallWhiteLists response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteSearchTemplateRequest(AbstractModel):
    r"""DeleteSearchTemplate request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Template ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        r"""Template ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteSearchTemplateResponse(AbstractModel):
    r"""DeleteSearchTemplate response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeABTestConfigRequest(AbstractModel):
    r"""DescribeABTestConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ProjectName: Canary project name
        :type ProjectName: str
        """
        self._ProjectName = None

    @property
    def ProjectName(self):
        r"""Canary project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeABTestConfigResponse(AbstractModel):
    r"""DescribeABTestConfig response structure.

    """

    def __init__(self):
        r"""
        :param _Config: Canary project configuration
        :type Config: list of ABTestConfig
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Config = None
        self._RequestId = None

    @property
    def Config(self):
        r"""Canary project configuration
        :rtype: list of ABTestConfig
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Config") is not None:
            self._Config = []
            for item in params.get("Config"):
                obj = ABTestConfig()
                obj._deserialize(item)
                self._Config.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessDetailRequest(AbstractModel):
    r"""DescribeAbnormalProcessDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        """
        self._EventId = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessDetailResponse(AbstractModel):
    r"""DescribeAbnormalProcessDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventBaseInfo: Basic information of the event
        :type EventBaseInfo: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        :param _ProcessInfo: Process information
        :type ProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        :param _ParentProcessInfo: Parent process information
        :type ParentProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        :param _EventDetail: Event description
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessEventDescription`
        :param _AncestorProcessInfo: Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventBaseInfo = None
        self._ProcessInfo = None
        self._ParentProcessInfo = None
        self._EventDetail = None
        self._AncestorProcessInfo = None
        self._RequestId = None

    @property
    def EventBaseInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        """
        return self._EventBaseInfo

    @EventBaseInfo.setter
    def EventBaseInfo(self, EventBaseInfo):
        self._EventBaseInfo = EventBaseInfo

    @property
    def ProcessInfo(self):
        r"""Process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        """
        return self._ProcessInfo

    @ProcessInfo.setter
    def ProcessInfo(self, ProcessInfo):
        self._ProcessInfo = ProcessInfo

    @property
    def ParentProcessInfo(self):
        r"""Parent process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        """
        return self._ParentProcessInfo

    @ParentProcessInfo.setter
    def ParentProcessInfo(self, ParentProcessInfo):
        self._ParentProcessInfo = ParentProcessInfo

    @property
    def EventDetail(self):
        r"""Event description
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessEventDescription`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def AncestorProcessInfo(self):
        r"""Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._AncestorProcessInfo

    @AncestorProcessInfo.setter
    def AncestorProcessInfo(self, AncestorProcessInfo):
        self._AncestorProcessInfo = AncestorProcessInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventBaseInfo") is not None:
            self._EventBaseInfo = RunTimeEventBaseInfo()
            self._EventBaseInfo._deserialize(params.get("EventBaseInfo"))
        if params.get("ProcessInfo") is not None:
            self._ProcessInfo = ProcessDetailInfo()
            self._ProcessInfo._deserialize(params.get("ProcessInfo"))
        if params.get("ParentProcessInfo") is not None:
            self._ParentProcessInfo = ProcessDetailBaseInfo()
            self._ParentProcessInfo._deserialize(params.get("ParentProcessInfo"))
        if params.get("EventDetail") is not None:
            self._EventDetail = AbnormalProcessEventDescription()
            self._EventDetail._deserialize(params.get("EventDetail"))
        if params.get("AncestorProcessInfo") is not None:
            self._AncestorProcessInfo = ProcessBaseInfo()
            self._AncestorProcessInfo._deserialize(params.get("AncestorProcessInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessEventTendencyRequest(AbstractModel):
    r"""DescribeAbnormalProcessEventTendency request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._StartTime = None
        self._EndTime = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessEventTendencyResponse(AbstractModel):
    r"""DescribeAbnormalProcessEventTendency response structure.

    """

    def __init__(self):
        r"""
        :param _List: Trend of pending abnormal process events
        :type List: list of AbnormalProcessEventTendencyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Trend of pending abnormal process events
        :rtype: list of AbnormalProcessEventTendencyInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AbnormalProcessEventTendencyInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessEventsExportRequest(AbstractModel):
    r"""DescribeAbnormalProcessEventsExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessEventsExportResponse(AbstractModel):
    r"""DescribeAbnormalProcessEventsExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessEventsRequest(AbstractModel):
    r"""DescribeAbnormalProcessEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessEventsResponse(AbstractModel):
    r"""DescribeAbnormalProcessEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _EventSet: Array of abnormal processes
        :type EventSet: list of AbnormalProcessEventInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._EventSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EventSet(self):
        r"""Array of abnormal processes
        :rtype: list of AbnormalProcessEventInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = AbnormalProcessEventInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessLevelSummaryRequest(AbstractModel):
    r"""DescribeAbnormalProcessLevelSummary request structure.

    """


class DescribeAbnormalProcessLevelSummaryResponse(AbstractModel):
    r"""DescribeAbnormalProcessLevelSummary response structure.

    """

    def __init__(self):
        r"""
        :param _HighLevelEventCount: Number of pending high-risk events of abnormal processes
        :type HighLevelEventCount: int
        :param _MediumLevelEventCount: Number of pending medium-risk events of abnormal processes
        :type MediumLevelEventCount: int
        :param _LowLevelEventCount: Number of pending low-risk events of abnormal processes
        :type LowLevelEventCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HighLevelEventCount = None
        self._MediumLevelEventCount = None
        self._LowLevelEventCount = None
        self._RequestId = None

    @property
    def HighLevelEventCount(self):
        r"""Number of pending high-risk events of abnormal processes
        :rtype: int
        """
        return self._HighLevelEventCount

    @HighLevelEventCount.setter
    def HighLevelEventCount(self, HighLevelEventCount):
        self._HighLevelEventCount = HighLevelEventCount

    @property
    def MediumLevelEventCount(self):
        r"""Number of pending medium-risk events of abnormal processes
        :rtype: int
        """
        return self._MediumLevelEventCount

    @MediumLevelEventCount.setter
    def MediumLevelEventCount(self, MediumLevelEventCount):
        self._MediumLevelEventCount = MediumLevelEventCount

    @property
    def LowLevelEventCount(self):
        r"""Number of pending low-risk events of abnormal processes
        :rtype: int
        """
        return self._LowLevelEventCount

    @LowLevelEventCount.setter
    def LowLevelEventCount(self, LowLevelEventCount):
        self._LowLevelEventCount = LowLevelEventCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HighLevelEventCount = params.get("HighLevelEventCount")
        self._MediumLevelEventCount = params.get("MediumLevelEventCount")
        self._LowLevelEventCount = params.get("LowLevelEventCount")
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessRuleDetailRequest(AbstractModel):
    r"""DescribeAbnormalProcessRuleDetail request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Unique policy ID
        :type RuleId: str
        :param _ImageId: Image ID, which is used when an image is added to the allowlist.
        :type ImageId: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        """
        self._RuleId = None
        self._ImageId = None
        self._Limit = None
        self._Offset = None

    @property
    def RuleId(self):
        r"""Unique policy ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ImageId(self):
        r"""Image ID, which is used when an image is added to the allowlist.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._ImageId = params.get("ImageId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessRuleDetailResponse(AbstractModel):
    r"""DescribeAbnormalProcessRuleDetail response structure.

    """

    def __init__(self):
        r"""
        :param _RuleDetail: Details of the abnormal process policy
        :type RuleDetail: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessRuleInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RuleDetail = None
        self._RequestId = None

    @property
    def RuleDetail(self):
        r"""Details of the abnormal process policy
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AbnormalProcessRuleInfo`
        """
        return self._RuleDetail

    @RuleDetail.setter
    def RuleDetail(self, RuleDetail):
        self._RuleDetail = RuleDetail

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RuleDetail") is not None:
            self._RuleDetail = AbnormalProcessRuleInfo()
            self._RuleDetail._deserialize(params.get("RuleDetail"))
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessRulesExportRequest(AbstractModel):
    r"""DescribeAbnormalProcessRulesExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessRulesExportResponse(AbstractModel):
    r"""DescribeAbnormalProcessRulesExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAbnormalProcessRulesRequest(AbstractModel):
    r"""DescribeAbnormalProcessRules request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAbnormalProcessRulesResponse(AbstractModel):
    r"""DescribeAbnormalProcessRules response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _RuleSet: List of abnormal process policies
        :type RuleSet: list of RuleBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._RuleSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RuleSet(self):
        r"""List of abnormal process policies
        :rtype: list of RuleBaseInfo
        """
        return self._RuleSet

    @RuleSet.setter
    def RuleSet(self, RuleSet):
        self._RuleSet = RuleSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("RuleSet") is not None:
            self._RuleSet = []
            for item in params.get("RuleSet"):
                obj = RuleBaseInfo()
                obj._deserialize(item)
                self._RuleSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAccessControlDetailRequest(AbstractModel):
    r"""DescribeAccessControlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        """
        self._EventId = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlDetailResponse(AbstractModel):
    r"""DescribeAccessControlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventBaseInfo: Basic information of the event
        :type EventBaseInfo: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        :param _ProcessInfo: Process information
        :type ProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        :param _TamperedFileInfo: Information tampered with
        :type TamperedFileInfo: :class:`tencentcloud.tcss.v20201101.models.FileAttributeInfo`
        :param _EventDetail: Event description
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.AccessControlEventDescription`
        :param _ParentProcessInfo: Parent process information
        :type ParentProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _AncestorProcessInfo: Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventBaseInfo = None
        self._ProcessInfo = None
        self._TamperedFileInfo = None
        self._EventDetail = None
        self._ParentProcessInfo = None
        self._AncestorProcessInfo = None
        self._RequestId = None

    @property
    def EventBaseInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        """
        return self._EventBaseInfo

    @EventBaseInfo.setter
    def EventBaseInfo(self, EventBaseInfo):
        self._EventBaseInfo = EventBaseInfo

    @property
    def ProcessInfo(self):
        r"""Process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        """
        return self._ProcessInfo

    @ProcessInfo.setter
    def ProcessInfo(self, ProcessInfo):
        self._ProcessInfo = ProcessInfo

    @property
    def TamperedFileInfo(self):
        r"""Information tampered with
        :rtype: :class:`tencentcloud.tcss.v20201101.models.FileAttributeInfo`
        """
        return self._TamperedFileInfo

    @TamperedFileInfo.setter
    def TamperedFileInfo(self, TamperedFileInfo):
        self._TamperedFileInfo = TamperedFileInfo

    @property
    def EventDetail(self):
        r"""Event description
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AccessControlEventDescription`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def ParentProcessInfo(self):
        r"""Parent process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._ParentProcessInfo

    @ParentProcessInfo.setter
    def ParentProcessInfo(self, ParentProcessInfo):
        self._ParentProcessInfo = ParentProcessInfo

    @property
    def AncestorProcessInfo(self):
        r"""Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._AncestorProcessInfo

    @AncestorProcessInfo.setter
    def AncestorProcessInfo(self, AncestorProcessInfo):
        self._AncestorProcessInfo = AncestorProcessInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventBaseInfo") is not None:
            self._EventBaseInfo = RunTimeEventBaseInfo()
            self._EventBaseInfo._deserialize(params.get("EventBaseInfo"))
        if params.get("ProcessInfo") is not None:
            self._ProcessInfo = ProcessDetailInfo()
            self._ProcessInfo._deserialize(params.get("ProcessInfo"))
        if params.get("TamperedFileInfo") is not None:
            self._TamperedFileInfo = FileAttributeInfo()
            self._TamperedFileInfo._deserialize(params.get("TamperedFileInfo"))
        if params.get("EventDetail") is not None:
            self._EventDetail = AccessControlEventDescription()
            self._EventDetail._deserialize(params.get("EventDetail"))
        if params.get("ParentProcessInfo") is not None:
            self._ParentProcessInfo = ProcessBaseInfo()
            self._ParentProcessInfo._deserialize(params.get("ParentProcessInfo"))
        if params.get("AncestorProcessInfo") is not None:
            self._AncestorProcessInfo = ProcessBaseInfo()
            self._AncestorProcessInfo._deserialize(params.get("AncestorProcessInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAccessControlEventsExportRequest(AbstractModel):
    r"""DescribeAccessControlEventsExport request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlEventsExportResponse(AbstractModel):
    r"""DescribeAccessControlEventsExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _JobId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._JobId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def JobId(self):
        r"""Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DescribeAccessControlEventsRequest(AbstractModel):
    r"""DescribeAccessControlEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlEventsResponse(AbstractModel):
    r"""DescribeAccessControlEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _EventSet: Array of access control events
        :type EventSet: list of AccessControlEventInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._EventSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EventSet(self):
        r"""Array of access control events
        :rtype: list of AccessControlEventInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = AccessControlEventInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAccessControlRuleDetailRequest(AbstractModel):
    r"""DescribeAccessControlRuleDetail request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Unique policy ID
        :type RuleId: str
        :param _ImageId: Image ID, which is used only when allowing an event.
        :type ImageId: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        """
        self._RuleId = None
        self._ImageId = None
        self._Limit = None
        self._Offset = None

    @property
    def RuleId(self):
        r"""Unique policy ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def ImageId(self):
        r"""Image ID, which is used only when allowing an event.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._ImageId = params.get("ImageId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlRuleDetailResponse(AbstractModel):
    r"""DescribeAccessControlRuleDetail response structure.

    """

    def __init__(self):
        r"""
        :param _RuleDetail: Runtime policy details
        :type RuleDetail: :class:`tencentcloud.tcss.v20201101.models.AccessControlRuleInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RuleDetail = None
        self._RequestId = None

    @property
    def RuleDetail(self):
        r"""Runtime policy details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.AccessControlRuleInfo`
        """
        return self._RuleDetail

    @RuleDetail.setter
    def RuleDetail(self, RuleDetail):
        self._RuleDetail = RuleDetail

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RuleDetail") is not None:
            self._RuleDetail = AccessControlRuleInfo()
            self._RuleDetail._deserialize(params.get("RuleDetail"))
        self._RequestId = params.get("RequestId")


class DescribeAccessControlRulesExportRequest(AbstractModel):
    r"""DescribeAccessControlRulesExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlRulesExportResponse(AbstractModel):
    r"""DescribeAccessControlRulesExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAccessControlRulesRequest(AbstractModel):
    r"""DescribeAccessControlRules request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAccessControlRulesResponse(AbstractModel):
    r"""DescribeAccessControlRules response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _RuleSet: List of access control policies
        :type RuleSet: list of RuleBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._RuleSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RuleSet(self):
        r"""List of access control policies
        :rtype: list of RuleBaseInfo
        """
        return self._RuleSet

    @RuleSet.setter
    def RuleSet(self, RuleSet):
        self._RuleSet = RuleSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("RuleSet") is not None:
            self._RuleSet = []
            for item in params.get("RuleSet"):
                obj = RuleBaseInfo()
                obj._deserialize(item)
                self._RuleSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAffectedClusterCountRequest(AbstractModel):
    r"""DescribeAffectedClusterCount request structure.

    """


class DescribeAffectedClusterCountResponse(AbstractModel):
    r"""DescribeAffectedClusterCount response structure.

    """

    def __init__(self):
        r"""
        :param _SeriousRiskClusterCount: Number of critical clusters
        :type SeriousRiskClusterCount: int
        :param _HighRiskClusterCount: Number of high-risk clusters
        :type HighRiskClusterCount: int
        :param _MiddleRiskClusterCount: Number of medium-risk clusters
        :type MiddleRiskClusterCount: int
        :param _HintRiskClusterCount: Number of low-risk clusters
        :type HintRiskClusterCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SeriousRiskClusterCount = None
        self._HighRiskClusterCount = None
        self._MiddleRiskClusterCount = None
        self._HintRiskClusterCount = None
        self._RequestId = None

    @property
    def SeriousRiskClusterCount(self):
        r"""Number of critical clusters
        :rtype: int
        """
        return self._SeriousRiskClusterCount

    @SeriousRiskClusterCount.setter
    def SeriousRiskClusterCount(self, SeriousRiskClusterCount):
        self._SeriousRiskClusterCount = SeriousRiskClusterCount

    @property
    def HighRiskClusterCount(self):
        r"""Number of high-risk clusters
        :rtype: int
        """
        return self._HighRiskClusterCount

    @HighRiskClusterCount.setter
    def HighRiskClusterCount(self, HighRiskClusterCount):
        self._HighRiskClusterCount = HighRiskClusterCount

    @property
    def MiddleRiskClusterCount(self):
        r"""Number of medium-risk clusters
        :rtype: int
        """
        return self._MiddleRiskClusterCount

    @MiddleRiskClusterCount.setter
    def MiddleRiskClusterCount(self, MiddleRiskClusterCount):
        self._MiddleRiskClusterCount = MiddleRiskClusterCount

    @property
    def HintRiskClusterCount(self):
        r"""Number of low-risk clusters
        :rtype: int
        """
        return self._HintRiskClusterCount

    @HintRiskClusterCount.setter
    def HintRiskClusterCount(self, HintRiskClusterCount):
        self._HintRiskClusterCount = HintRiskClusterCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SeriousRiskClusterCount = params.get("SeriousRiskClusterCount")
        self._HighRiskClusterCount = params.get("HighRiskClusterCount")
        self._MiddleRiskClusterCount = params.get("MiddleRiskClusterCount")
        self._HintRiskClusterCount = params.get("HintRiskClusterCount")
        self._RequestId = params.get("RequestId")


class DescribeAffectedNodeListRequest(AbstractModel):
    r"""DescribeAffectedNodeList request structure.

    """

    def __init__(self):
        r"""
        :param _CheckItemId: Unique ID of the check item
        :type CheckItemId: int
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `InstanceId`, `PrivateIpAddresses`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._CheckItemId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def CheckItemId(self):
        r"""Unique ID of the check item
        :rtype: int
        """
        return self._CheckItemId

    @CheckItemId.setter
    def CheckItemId(self, CheckItemId):
        self._CheckItemId = CheckItemId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `InstanceId`, `PrivateIpAddresses`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._CheckItemId = params.get("CheckItemId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAffectedNodeListResponse(AbstractModel):
    r"""DescribeAffectedNodeList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of affected nodes
        :type TotalCount: int
        :param _AffectedNodeList: List of affected nodes
        :type AffectedNodeList: list of AffectedNodeItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AffectedNodeList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of affected nodes
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AffectedNodeList(self):
        r"""List of affected nodes
        :rtype: list of AffectedNodeItem
        """
        return self._AffectedNodeList

    @AffectedNodeList.setter
    def AffectedNodeList(self, AffectedNodeList):
        self._AffectedNodeList = AffectedNodeList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AffectedNodeList") is not None:
            self._AffectedNodeList = []
            for item in params.get("AffectedNodeList"):
                obj = AffectedNodeItem()
                obj._deserialize(item)
                self._AffectedNodeList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAffectedWorkloadListRequest(AbstractModel):
    r"""DescribeAffectedWorkloadList request structure.

    """

    def __init__(self):
        r"""
        :param _CheckItemId: Unique ID of the check item
        :type CheckItemId: int
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `WorkloadType`, `ClusterId`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._CheckItemId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def CheckItemId(self):
        r"""Unique ID of the check item
        :rtype: int
        """
        return self._CheckItemId

    @CheckItemId.setter
    def CheckItemId(self, CheckItemId):
        self._CheckItemId = CheckItemId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `WorkloadType`, `ClusterId`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._CheckItemId = params.get("CheckItemId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAffectedWorkloadListResponse(AbstractModel):
    r"""DescribeAffectedWorkloadList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Number of affected workloads
        :type TotalCount: int
        :param _AffectedWorkloadList: List of affected workloads
        :type AffectedWorkloadList: list of AffectedWorkloadItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AffectedWorkloadList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Number of affected workloads
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AffectedWorkloadList(self):
        r"""List of affected workloads
        :rtype: list of AffectedWorkloadItem
        """
        return self._AffectedWorkloadList

    @AffectedWorkloadList.setter
    def AffectedWorkloadList(self, AffectedWorkloadList):
        self._AffectedWorkloadList = AffectedWorkloadList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AffectedWorkloadList") is not None:
            self._AffectedWorkloadList = []
            for item in params.get("AffectedWorkloadList"):
                obj = AffectedWorkloadItem()
                obj._deserialize(item)
                self._AffectedWorkloadList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAgentDaemonSetCmdRequest(AbstractModel):
    r"""DescribeAgentDaemonSetCmd request structure.

    """

    def __init__(self):
        r"""
        :param _IsCloud: Whether it is from Tencent Cloud
        :type IsCloud: bool
        :param _NetType: Network type. Valid values: `basic` (classic network); `private` (VPC); `public` (public network); `direct` (Direct Connect).
        :type NetType: str
        :param _RegionCode: Region, which is required when `NetType` is `direct`.
        :type RegionCode: str
        :param _VpcId: VpcId, which is required when `NetType` is `direct`.
        :type VpcId: str
        :param _ExpireDate: Command validity, which is required for non-Tencent Cloud instances.
        :type ExpireDate: str
        :param _ClusterCustomParameters: Custom parameters of the cluster
        :type ClusterCustomParameters: list of ClusterCustomParameters
        """
        self._IsCloud = None
        self._NetType = None
        self._RegionCode = None
        self._VpcId = None
        self._ExpireDate = None
        self._ClusterCustomParameters = None

    @property
    def IsCloud(self):
        r"""Whether it is from Tencent Cloud
        :rtype: bool
        """
        return self._IsCloud

    @IsCloud.setter
    def IsCloud(self, IsCloud):
        self._IsCloud = IsCloud

    @property
    def NetType(self):
        r"""Network type. Valid values: `basic` (classic network); `private` (VPC); `public` (public network); `direct` (Direct Connect).
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegionCode(self):
        r"""Region, which is required when `NetType` is `direct`.
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def VpcId(self):
        r"""VpcId, which is required when `NetType` is `direct`.
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def ExpireDate(self):
        r"""Command validity, which is required for non-Tencent Cloud instances.
        :rtype: str
        """
        return self._ExpireDate

    @ExpireDate.setter
    def ExpireDate(self, ExpireDate):
        self._ExpireDate = ExpireDate

    @property
    def ClusterCustomParameters(self):
        r"""Custom parameters of the cluster
        :rtype: list of ClusterCustomParameters
        """
        return self._ClusterCustomParameters

    @ClusterCustomParameters.setter
    def ClusterCustomParameters(self, ClusterCustomParameters):
        self._ClusterCustomParameters = ClusterCustomParameters


    def _deserialize(self, params):
        self._IsCloud = params.get("IsCloud")
        self._NetType = params.get("NetType")
        self._RegionCode = params.get("RegionCode")
        self._VpcId = params.get("VpcId")
        self._ExpireDate = params.get("ExpireDate")
        if params.get("ClusterCustomParameters") is not None:
            self._ClusterCustomParameters = []
            for item in params.get("ClusterCustomParameters"):
                obj = ClusterCustomParameters()
                obj._deserialize(item)
                self._ClusterCustomParameters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAgentDaemonSetCmdResponse(AbstractModel):
    r"""DescribeAgentDaemonSetCmd response structure.

    """

    def __init__(self):
        r"""
        :param _Command: Installation command
        :type Command: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Command = None
        self._RequestId = None

    @property
    def Command(self):
        r"""Installation command
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Command = params.get("Command")
        self._RequestId = params.get("RequestId")


class DescribeAgentInstallCommandRequest(AbstractModel):
    r"""DescribeAgentInstallCommand request structure.

    """

    def __init__(self):
        r"""
        :param _IsCloud: Whether it is from Tencent Cloud
        :type IsCloud: bool
        :param _NetType: Network type. Valid values: `basic` (classic network); `private` (VPC); `public` (public network); `direct` (Direct Connect).
        :type NetType: str
        :param _RegionCode: Region, which is required when `NetType` is `direct`.
        :type RegionCode: str
        :param _VpcId: VpcId, which is required when `NetType` is `direct`.
        :type VpcId: str
        :param _ExpireDate: Command validity, which is required for non-Tencent Cloud instances.
        :type ExpireDate: str
        :param _TagIds: Tag ID list, which is valid only when `IsCloud` is `false`.
        :type TagIds: list of int non-negative
        """
        self._IsCloud = None
        self._NetType = None
        self._RegionCode = None
        self._VpcId = None
        self._ExpireDate = None
        self._TagIds = None

    @property
    def IsCloud(self):
        r"""Whether it is from Tencent Cloud
        :rtype: bool
        """
        return self._IsCloud

    @IsCloud.setter
    def IsCloud(self, IsCloud):
        self._IsCloud = IsCloud

    @property
    def NetType(self):
        r"""Network type. Valid values: `basic` (classic network); `private` (VPC); `public` (public network); `direct` (Direct Connect).
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegionCode(self):
        r"""Region, which is required when `NetType` is `direct`.
        :rtype: str
        """
        return self._RegionCode

    @RegionCode.setter
    def RegionCode(self, RegionCode):
        self._RegionCode = RegionCode

    @property
    def VpcId(self):
        r"""VpcId, which is required when `NetType` is `direct`.
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def ExpireDate(self):
        r"""Command validity, which is required for non-Tencent Cloud instances.
        :rtype: str
        """
        return self._ExpireDate

    @ExpireDate.setter
    def ExpireDate(self, ExpireDate):
        self._ExpireDate = ExpireDate

    @property
    def TagIds(self):
        r"""Tag ID list, which is valid only when `IsCloud` is `false`.
        :rtype: list of int non-negative
        """
        return self._TagIds

    @TagIds.setter
    def TagIds(self, TagIds):
        self._TagIds = TagIds


    def _deserialize(self, params):
        self._IsCloud = params.get("IsCloud")
        self._NetType = params.get("NetType")
        self._RegionCode = params.get("RegionCode")
        self._VpcId = params.get("VpcId")
        self._ExpireDate = params.get("ExpireDate")
        self._TagIds = params.get("TagIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAgentInstallCommandResponse(AbstractModel):
    r"""DescribeAgentInstallCommand response structure.

    """

    def __init__(self):
        r"""
        :param _LinuxCommand: Linux installation command
        :type LinuxCommand: str
        :param _WindowsCommand: Windows installation command (Windows 2008 or later)
        :type WindowsCommand: str
        :param _WindowsStepOne: Step 1 in the Window installation command (Windows 2003)
        :type WindowsStepOne: str
        :param _WindowsStepTwo: Step 2 in the Window installation command (Windows 2003)
        :type WindowsStepTwo: str
        :param _WindowsDownloadUrl: Download URL of the agent for Windows
        :type WindowsDownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LinuxCommand = None
        self._WindowsCommand = None
        self._WindowsStepOne = None
        self._WindowsStepTwo = None
        self._WindowsDownloadUrl = None
        self._RequestId = None

    @property
    def LinuxCommand(self):
        r"""Linux installation command
        :rtype: str
        """
        return self._LinuxCommand

    @LinuxCommand.setter
    def LinuxCommand(self, LinuxCommand):
        self._LinuxCommand = LinuxCommand

    @property
    def WindowsCommand(self):
        r"""Windows installation command (Windows 2008 or later)
        :rtype: str
        """
        return self._WindowsCommand

    @WindowsCommand.setter
    def WindowsCommand(self, WindowsCommand):
        self._WindowsCommand = WindowsCommand

    @property
    def WindowsStepOne(self):
        r"""Step 1 in the Window installation command (Windows 2003)
        :rtype: str
        """
        return self._WindowsStepOne

    @WindowsStepOne.setter
    def WindowsStepOne(self, WindowsStepOne):
        self._WindowsStepOne = WindowsStepOne

    @property
    def WindowsStepTwo(self):
        r"""Step 2 in the Window installation command (Windows 2003)
        :rtype: str
        """
        return self._WindowsStepTwo

    @WindowsStepTwo.setter
    def WindowsStepTwo(self, WindowsStepTwo):
        self._WindowsStepTwo = WindowsStepTwo

    @property
    def WindowsDownloadUrl(self):
        r"""Download URL of the agent for Windows
        :rtype: str
        """
        return self._WindowsDownloadUrl

    @WindowsDownloadUrl.setter
    def WindowsDownloadUrl(self, WindowsDownloadUrl):
        self._WindowsDownloadUrl = WindowsDownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LinuxCommand = params.get("LinuxCommand")
        self._WindowsCommand = params.get("WindowsCommand")
        self._WindowsStepOne = params.get("WindowsStepOne")
        self._WindowsStepTwo = params.get("WindowsStepTwo")
        self._WindowsDownloadUrl = params.get("WindowsDownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetAppServiceListRequest(AbstractModel):
    r"""DescribeAssetAppServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
        :type Filters: list of AssetFilters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetAppServiceListResponse(AbstractModel):
    r"""DescribeAssetAppServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of database services
        :type List: list of ServiceInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of database services
        :rtype: list of ServiceInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ServiceInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetClusterListRequest(AbstractModel):
    r"""DescribeAssetClusterList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>`ClusterID` - String - Optional - Cluster ID</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`Status` - String - Optional - Cluster status</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0
        :type Offset: int
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field.
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filters.
<li>`ClusterID` - String - Optional - Cluster ID</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`Status` - String - Optional - Cluster status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetClusterListResponse(AbstractModel):
    r"""DescribeAssetClusterList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Cluster list
        :type List: list of AssetClusterListItem
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""Cluster list
        :rtype: list of AssetClusterListItem
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AssetClusterListItem()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetComponentListRequest(AbstractModel):
    r"""DescribeAssetComponentList request structure.

    """

    def __init__(self):
        r"""
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
        :type Filters: list of AssetFilters
        """
        self._ContainerID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ContainerID = params.get("ContainerID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetComponentListResponse(AbstractModel):
    r"""DescribeAssetComponentList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of components
        :type List: list of ComponentInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of components
        :rtype: list of ComponentInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ComponentInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetContainerDetailRequest(AbstractModel):
    r"""DescribeAssetContainerDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ContainerId: Container ID
        :type ContainerId: str
        """
        self._ContainerId = None

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId


    def _deserialize(self, params):
        self._ContainerId = params.get("ContainerId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetContainerDetailResponse(AbstractModel):
    r"""DescribeAssetContainerDetail response structure.

    """

    def __init__(self):
        r"""
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _Status: Status
        :type Status: str
        :param _RunAs: Operator
        :type RunAs: str
        :param _Cmd: Command line
        :type Cmd: str
        :param _CPUUsage: CPU utilization * 1000
        :type CPUUsage: int
        :param _RamUsage: Memory usage in KB
        :type RamUsage: int
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _POD: Pod
        :type POD: str
        :param _K8sMaster: K8s master node
        :type K8sMaster: str
        :param _ProcessCnt: Number of processes in the container
        :type ProcessCnt: int
        :param _PortCnt: Number of ports in the container
        :type PortCnt: int
        :param _ComponentCnt: Number of components
        :type ComponentCnt: int
        :param _AppCnt: Number of applications
        :type AppCnt: int
        :param _WebServiceCnt: Number of web services
        :type WebServiceCnt: int
        :param _Mounts: Mount
        :type Mounts: list of ContainerMount
        :param _Network: Container network information
        :type Network: :class:`tencentcloud.tcss.v20201101.models.ContainerNetwork`
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ImageCreateTime: Image creation time
        :type ImageCreateTime: str
        :param _ImageSize: Image size
        :type ImageSize: int
        :param _HostStatus: Server status. Valid values: `offline`, `online`, `pause`.
        :type HostStatus: str
        :param _NetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type NetStatus: str
        :param _NetSubStatus: Sub-status of the network
        :type NetSubStatus: str
        :param _IsolateSource: Isolation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateSource: str
        :param _IsolateTime: Isolation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateTime: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _NodeSubNetID: Node subnet ID
        :type NodeSubNetID: str
        :param _NodeSubNetName: Node subnet name
        :type NodeSubNetName: str
        :param _NodeSubNetCIDR: Subnet IP range
        :type NodeSubNetCIDR: str
        :param _PodName: Pod name
        :type PodName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodStatus: Pod status
        :type PodStatus: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _NodeType: Node type. Values: `NORMAL` (default), `SUPER`
        :type NodeType: str
        :param _NodeUniqueID: UID of the super node
        :type NodeUniqueID: str
        :param _PublicIP: Public IP
        :type PublicIP: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HostID = None
        self._HostIP = None
        self._ContainerName = None
        self._Status = None
        self._RunAs = None
        self._Cmd = None
        self._CPUUsage = None
        self._RamUsage = None
        self._ImageName = None
        self._ImageID = None
        self._POD = None
        self._K8sMaster = None
        self._ProcessCnt = None
        self._PortCnt = None
        self._ComponentCnt = None
        self._AppCnt = None
        self._WebServiceCnt = None
        self._Mounts = None
        self._Network = None
        self._CreateTime = None
        self._ImageCreateTime = None
        self._ImageSize = None
        self._HostStatus = None
        self._NetStatus = None
        self._NetSubStatus = None
        self._IsolateSource = None
        self._IsolateTime = None
        self._NodeID = None
        self._NodeName = None
        self._NodeSubNetID = None
        self._NodeSubNetName = None
        self._NodeSubNetCIDR = None
        self._PodName = None
        self._PodIP = None
        self._PodStatus = None
        self._ClusterID = None
        self._ClusterName = None
        self._NodeType = None
        self._NodeUniqueID = None
        self._PublicIP = None
        self._RequestId = None

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def Status(self):
        r"""Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RunAs(self):
        r"""Operator
        :rtype: str
        """
        return self._RunAs

    @RunAs.setter
    def RunAs(self, RunAs):
        self._RunAs = RunAs

    @property
    def Cmd(self):
        r"""Command line
        :rtype: str
        """
        return self._Cmd

    @Cmd.setter
    def Cmd(self, Cmd):
        self._Cmd = Cmd

    @property
    def CPUUsage(self):
        r"""CPU utilization * 1000
        :rtype: int
        """
        return self._CPUUsage

    @CPUUsage.setter
    def CPUUsage(self, CPUUsage):
        self._CPUUsage = CPUUsage

    @property
    def RamUsage(self):
        r"""Memory usage in KB
        :rtype: int
        """
        return self._RamUsage

    @RamUsage.setter
    def RamUsage(self, RamUsage):
        self._RamUsage = RamUsage

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def POD(self):
        r"""Pod
        :rtype: str
        """
        return self._POD

    @POD.setter
    def POD(self, POD):
        self._POD = POD

    @property
    def K8sMaster(self):
        r"""K8s master node
        :rtype: str
        """
        return self._K8sMaster

    @K8sMaster.setter
    def K8sMaster(self, K8sMaster):
        self._K8sMaster = K8sMaster

    @property
    def ProcessCnt(self):
        r"""Number of processes in the container
        :rtype: int
        """
        return self._ProcessCnt

    @ProcessCnt.setter
    def ProcessCnt(self, ProcessCnt):
        self._ProcessCnt = ProcessCnt

    @property
    def PortCnt(self):
        r"""Number of ports in the container
        :rtype: int
        """
        return self._PortCnt

    @PortCnt.setter
    def PortCnt(self, PortCnt):
        self._PortCnt = PortCnt

    @property
    def ComponentCnt(self):
        r"""Number of components
        :rtype: int
        """
        return self._ComponentCnt

    @ComponentCnt.setter
    def ComponentCnt(self, ComponentCnt):
        self._ComponentCnt = ComponentCnt

    @property
    def AppCnt(self):
        r"""Number of applications
        :rtype: int
        """
        return self._AppCnt

    @AppCnt.setter
    def AppCnt(self, AppCnt):
        self._AppCnt = AppCnt

    @property
    def WebServiceCnt(self):
        r"""Number of web services
        :rtype: int
        """
        return self._WebServiceCnt

    @WebServiceCnt.setter
    def WebServiceCnt(self, WebServiceCnt):
        self._WebServiceCnt = WebServiceCnt

    @property
    def Mounts(self):
        r"""Mount
        :rtype: list of ContainerMount
        """
        return self._Mounts

    @Mounts.setter
    def Mounts(self, Mounts):
        self._Mounts = Mounts

    @property
    def Network(self):
        r"""Container network information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ContainerNetwork`
        """
        return self._Network

    @Network.setter
    def Network(self, Network):
        self._Network = Network

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ImageCreateTime(self):
        r"""Image creation time
        :rtype: str
        """
        return self._ImageCreateTime

    @ImageCreateTime.setter
    def ImageCreateTime(self, ImageCreateTime):
        self._ImageCreateTime = ImageCreateTime

    @property
    def ImageSize(self):
        r"""Image size
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize

    @property
    def HostStatus(self):
        r"""Server status. Valid values: `offline`, `online`, `pause`.
        :rtype: str
        """
        return self._HostStatus

    @HostStatus.setter
    def HostStatus(self, HostStatus):
        self._HostStatus = HostStatus

    @property
    def NetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._NetStatus

    @NetStatus.setter
    def NetStatus(self, NetStatus):
        self._NetStatus = NetStatus

    @property
    def NetSubStatus(self):
        r"""Sub-status of the network
        :rtype: str
        """
        return self._NetSubStatus

    @NetSubStatus.setter
    def NetSubStatus(self, NetSubStatus):
        self._NetSubStatus = NetSubStatus

    @property
    def IsolateSource(self):
        r"""Isolation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IsolateSource

    @IsolateSource.setter
    def IsolateSource(self, IsolateSource):
        self._IsolateSource = IsolateSource

    @property
    def IsolateTime(self):
        r"""Isolation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IsolateTime

    @IsolateTime.setter
    def IsolateTime(self, IsolateTime):
        self._IsolateTime = IsolateTime

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def NodeSubNetID(self):
        r"""Node subnet ID
        :rtype: str
        """
        return self._NodeSubNetID

    @NodeSubNetID.setter
    def NodeSubNetID(self, NodeSubNetID):
        self._NodeSubNetID = NodeSubNetID

    @property
    def NodeSubNetName(self):
        r"""Node subnet name
        :rtype: str
        """
        return self._NodeSubNetName

    @NodeSubNetName.setter
    def NodeSubNetName(self, NodeSubNetName):
        self._NodeSubNetName = NodeSubNetName

    @property
    def NodeSubNetCIDR(self):
        r"""Subnet IP range
        :rtype: str
        """
        return self._NodeSubNetCIDR

    @NodeSubNetCIDR.setter
    def NodeSubNetCIDR(self, NodeSubNetCIDR):
        self._NodeSubNetCIDR = NodeSubNetCIDR

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodStatus(self):
        r"""Pod status
        :rtype: str
        """
        return self._PodStatus

    @PodStatus.setter
    def PodStatus(self, PodStatus):
        self._PodStatus = PodStatus

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (default), `SUPER`
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of the super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PublicIP(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ContainerName = params.get("ContainerName")
        self._Status = params.get("Status")
        self._RunAs = params.get("RunAs")
        self._Cmd = params.get("Cmd")
        self._CPUUsage = params.get("CPUUsage")
        self._RamUsage = params.get("RamUsage")
        self._ImageName = params.get("ImageName")
        self._ImageID = params.get("ImageID")
        self._POD = params.get("POD")
        self._K8sMaster = params.get("K8sMaster")
        self._ProcessCnt = params.get("ProcessCnt")
        self._PortCnt = params.get("PortCnt")
        self._ComponentCnt = params.get("ComponentCnt")
        self._AppCnt = params.get("AppCnt")
        self._WebServiceCnt = params.get("WebServiceCnt")
        if params.get("Mounts") is not None:
            self._Mounts = []
            for item in params.get("Mounts"):
                obj = ContainerMount()
                obj._deserialize(item)
                self._Mounts.append(obj)
        if params.get("Network") is not None:
            self._Network = ContainerNetwork()
            self._Network._deserialize(params.get("Network"))
        self._CreateTime = params.get("CreateTime")
        self._ImageCreateTime = params.get("ImageCreateTime")
        self._ImageSize = params.get("ImageSize")
        self._HostStatus = params.get("HostStatus")
        self._NetStatus = params.get("NetStatus")
        self._NetSubStatus = params.get("NetSubStatus")
        self._IsolateSource = params.get("IsolateSource")
        self._IsolateTime = params.get("IsolateTime")
        self._NodeID = params.get("NodeID")
        self._NodeName = params.get("NodeName")
        self._NodeSubNetID = params.get("NodeSubNetID")
        self._NodeSubNetName = params.get("NodeSubNetName")
        self._NodeSubNetCIDR = params.get("NodeSubNetCIDR")
        self._PodName = params.get("PodName")
        self._PodIP = params.get("PodIP")
        self._PodStatus = params.get("PodStatus")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PublicIP = params.get("PublicIP")
        self._RequestId = params.get("RequestId")


class DescribeAssetContainerListRequest(AbstractModel):
    r"""DescribeAssetContainerList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter condition
<li>`ContainerName`: String - Required: No - Container name</li>
<li>`Status` - String - Required: No - Container status. Values: `0` (created); `1` (running); `2` (paused); `3` (restarting); `4` (removing); `5` (exited); `6` (dead).</li>
<li>`Runas`: String - Required: No - Operator</li>
<li>`ImageName`: String - Required: No - Image name</li>
<li>`HostIP`: String - Required: No - Server IP</li>
<li>`OrderBy` - String - Required: No - Sorting field, which supports dynamic sorting by `cpu_usage` or `mem_usage` such as ["cpu_usage","+"]. '+' indicates ascending, and '-' indicates descending.</li>
<li>`NetStatus`: String - Required: No - Container network status. Values: `normal`, `isolated`, `isolating`, `isolate_failed`, `restoring`, `restore_failed`.</li>
<li>`PodID`: String - Required: No- Pod ID </li>
<li>`NodeUniqueID`: String - Required: No - Super Node</li>
<li>`PodUid`: String - Required: No - Pod</li>
<li>`PodIP`: String - Required: No - Pod IP</li>
<li>`NodeType`: String - Required: No - Values: `NORMAL` (general nodes), `SUPER` (super nodes)</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter condition
<li>`ContainerName`: String - Required: No - Container name</li>
<li>`Status` - String - Required: No - Container status. Values: `0` (created); `1` (running); `2` (paused); `3` (restarting); `4` (removing); `5` (exited); `6` (dead).</li>
<li>`Runas`: String - Required: No - Operator</li>
<li>`ImageName`: String - Required: No - Image name</li>
<li>`HostIP`: String - Required: No - Server IP</li>
<li>`OrderBy` - String - Required: No - Sorting field, which supports dynamic sorting by `cpu_usage` or `mem_usage` such as ["cpu_usage","+"]. '+' indicates ascending, and '-' indicates descending.</li>
<li>`NetStatus`: String - Required: No - Container network status. Values: `normal`, `isolated`, `isolating`, `isolate_failed`, `restoring`, `restore_failed`.</li>
<li>`PodID`: String - Required: No- Pod ID </li>
<li>`NodeUniqueID`: String - Required: No - Super Node</li>
<li>`PodUid`: String - Required: No - Pod</li>
<li>`PodIP`: String - Required: No - Pod IP</li>
<li>`NodeType`: String - Required: No - Values: `NORMAL` (general nodes), `SUPER` (super nodes)</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetContainerListResponse(AbstractModel):
    r"""DescribeAssetContainerList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of containers
        :type List: list of ContainerInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of containers
        :rtype: list of ContainerInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ContainerInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetDBServiceListRequest(AbstractModel):
    r"""DescribeAssetDBServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
        :type Filters: list of AssetFilters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetDBServiceListResponse(AbstractModel):
    r"""DescribeAssetDBServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of database services
        :type List: list of ServiceInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of database services
        :rtype: list of ServiceInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ServiceInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetHostDetailRequest(AbstractModel):
    r"""DescribeAssetHostDetail request structure.

    """

    def __init__(self):
        r"""
        :param _HostId: Server ID
        :type HostId: str
        """
        self._HostId = None

    @property
    def HostId(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId


    def _deserialize(self, params):
        self._HostId = params.get("HostId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetHostDetailResponse(AbstractModel):
    r"""DescribeAssetHostDetail response structure.

    """

    def __init__(self):
        r"""
        :param _UUID: TCSS UUID
        :type UUID: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _HostName: Server name
        :type HostName: str
        :param _Group: Server group
        :type Group: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _OsName: OS
        :type OsName: str
        :param _AgentVersion: Agent version
        :type AgentVersion: str
        :param _KernelVersion: Kernel version
        :type KernelVersion: str
        :param _DockerVersion: Docker version
        :type DockerVersion: str
        :param _DockerAPIVersion: Docker API version
        :type DockerAPIVersion: str
        :param _DockerGoVersion: Docker version for Go
        :type DockerGoVersion: str
        :param _DockerFileSystemDriver: Docker file system type
        :type DockerFileSystemDriver: str
        :param _DockerRootDir: Docker root directory
        :type DockerRootDir: str
        :param _ImageCnt: Number of images
        :type ImageCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _K8sMasterIP: K8s IP
        :type K8sMasterIP: str
        :param _K8sVersion: K8s version
        :type K8sVersion: str
        :param _KubeProxyVersion: kube proxy
        :type KubeProxyVersion: str
        :param _Status: Valid values: `UNINSTALL` (not installed); `OFFLINE` (offline); `ONLINE` (defended).
        :type Status: str
        :param _IsContainerd: Whether it is Containerd
        :type IsContainerd: bool
        :param _MachineType: Server source. Valid values: `TENCENTCLOUD` (Tencent Cloud instance); `OTHERCLOUD` (non-Tencent Cloud instance).
        :type MachineType: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _InstanceID: Server instance ID
        :type InstanceID: str
        :param _RegionID: Region ID
        :type RegionID: int
        :param _Project: Project
        :type Project: :class:`tencentcloud.tcss.v20201101.models.ProjectInfo`
        :param _Tags: Tags
        :type Tags: list of TagInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UUID = None
        self._UpdateTime = None
        self._HostName = None
        self._Group = None
        self._HostIP = None
        self._OsName = None
        self._AgentVersion = None
        self._KernelVersion = None
        self._DockerVersion = None
        self._DockerAPIVersion = None
        self._DockerGoVersion = None
        self._DockerFileSystemDriver = None
        self._DockerRootDir = None
        self._ImageCnt = None
        self._ContainerCnt = None
        self._K8sMasterIP = None
        self._K8sVersion = None
        self._KubeProxyVersion = None
        self._Status = None
        self._IsContainerd = None
        self._MachineType = None
        self._PublicIp = None
        self._InstanceID = None
        self._RegionID = None
        self._Project = None
        self._Tags = None
        self._RequestId = None

    @property
    def UUID(self):
        r"""TCSS UUID
        :rtype: str
        """
        return self._UUID

    @UUID.setter
    def UUID(self, UUID):
        self._UUID = UUID

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def Group(self):
        r"""Server group
        :rtype: str
        """
        return self._Group

    @Group.setter
    def Group(self, Group):
        self._Group = Group

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def OsName(self):
        r"""OS
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def AgentVersion(self):
        r"""Agent version
        :rtype: str
        """
        return self._AgentVersion

    @AgentVersion.setter
    def AgentVersion(self, AgentVersion):
        self._AgentVersion = AgentVersion

    @property
    def KernelVersion(self):
        r"""Kernel version
        :rtype: str
        """
        return self._KernelVersion

    @KernelVersion.setter
    def KernelVersion(self, KernelVersion):
        self._KernelVersion = KernelVersion

    @property
    def DockerVersion(self):
        r"""Docker version
        :rtype: str
        """
        return self._DockerVersion

    @DockerVersion.setter
    def DockerVersion(self, DockerVersion):
        self._DockerVersion = DockerVersion

    @property
    def DockerAPIVersion(self):
        r"""Docker API version
        :rtype: str
        """
        return self._DockerAPIVersion

    @DockerAPIVersion.setter
    def DockerAPIVersion(self, DockerAPIVersion):
        self._DockerAPIVersion = DockerAPIVersion

    @property
    def DockerGoVersion(self):
        r"""Docker version for Go
        :rtype: str
        """
        return self._DockerGoVersion

    @DockerGoVersion.setter
    def DockerGoVersion(self, DockerGoVersion):
        self._DockerGoVersion = DockerGoVersion

    @property
    def DockerFileSystemDriver(self):
        r"""Docker file system type
        :rtype: str
        """
        return self._DockerFileSystemDriver

    @DockerFileSystemDriver.setter
    def DockerFileSystemDriver(self, DockerFileSystemDriver):
        self._DockerFileSystemDriver = DockerFileSystemDriver

    @property
    def DockerRootDir(self):
        r"""Docker root directory
        :rtype: str
        """
        return self._DockerRootDir

    @DockerRootDir.setter
    def DockerRootDir(self, DockerRootDir):
        self._DockerRootDir = DockerRootDir

    @property
    def ImageCnt(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def K8sMasterIP(self):
        r"""K8s IP
        :rtype: str
        """
        return self._K8sMasterIP

    @K8sMasterIP.setter
    def K8sMasterIP(self, K8sMasterIP):
        self._K8sMasterIP = K8sMasterIP

    @property
    def K8sVersion(self):
        r"""K8s version
        :rtype: str
        """
        return self._K8sVersion

    @K8sVersion.setter
    def K8sVersion(self, K8sVersion):
        self._K8sVersion = K8sVersion

    @property
    def KubeProxyVersion(self):
        r"""kube proxy
        :rtype: str
        """
        return self._KubeProxyVersion

    @KubeProxyVersion.setter
    def KubeProxyVersion(self, KubeProxyVersion):
        self._KubeProxyVersion = KubeProxyVersion

    @property
    def Status(self):
        r"""Valid values: `UNINSTALL` (not installed); `OFFLINE` (offline); `ONLINE` (defended).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsContainerd(self):
        r"""Whether it is Containerd
        :rtype: bool
        """
        return self._IsContainerd

    @IsContainerd.setter
    def IsContainerd(self, IsContainerd):
        self._IsContainerd = IsContainerd

    @property
    def MachineType(self):
        r"""Server source. Valid values: `TENCENTCLOUD` (Tencent Cloud instance); `OTHERCLOUD` (non-Tencent Cloud instance).
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def InstanceID(self):
        r"""Server instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def RegionID(self):
        r"""Region ID
        :rtype: int
        """
        return self._RegionID

    @RegionID.setter
    def RegionID(self, RegionID):
        self._RegionID = RegionID

    @property
    def Project(self):
        r"""Project
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProjectInfo`
        """
        return self._Project

    @Project.setter
    def Project(self, Project):
        self._Project = Project

    @property
    def Tags(self):
        r"""Tags
        :rtype: list of TagInfo
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._UUID = params.get("UUID")
        self._UpdateTime = params.get("UpdateTime")
        self._HostName = params.get("HostName")
        self._Group = params.get("Group")
        self._HostIP = params.get("HostIP")
        self._OsName = params.get("OsName")
        self._AgentVersion = params.get("AgentVersion")
        self._KernelVersion = params.get("KernelVersion")
        self._DockerVersion = params.get("DockerVersion")
        self._DockerAPIVersion = params.get("DockerAPIVersion")
        self._DockerGoVersion = params.get("DockerGoVersion")
        self._DockerFileSystemDriver = params.get("DockerFileSystemDriver")
        self._DockerRootDir = params.get("DockerRootDir")
        self._ImageCnt = params.get("ImageCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._K8sMasterIP = params.get("K8sMasterIP")
        self._K8sVersion = params.get("K8sVersion")
        self._KubeProxyVersion = params.get("KubeProxyVersion")
        self._Status = params.get("Status")
        self._IsContainerd = params.get("IsContainerd")
        self._MachineType = params.get("MachineType")
        self._PublicIp = params.get("PublicIp")
        self._InstanceID = params.get("InstanceID")
        self._RegionID = params.get("RegionID")
        if params.get("Project") is not None:
            self._Project = ProjectInfo()
            self._Project._deserialize(params.get("Project"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = TagInfo()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetHostListRequest(AbstractModel):
    r"""DescribeAssetHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filters.
<li>`Status` - String - Optional - Agent status. Values: `ALL`; `UNINSTALL` (Not installed); `OFFLINE`, `ONLINE`. Default to `All` if it's not specified. </li>
<li>`HostName` - String - Optional - Server name</li>
<li>`Group - String - Optional - Server group</li>
<li>`HostIP` - String - Optional - Server IP</li>
<li>`HostID - String - Optional - Server ID</li>
<li>`DockerVersion` - String - Optional - Docker version</li>
<li>`MachineType` - String - Optional - Server type. Values: `ALL`; `CVM` (Cloud Virtual Machine); `ECM` (Edge Computing Machine); `LH` (Lighthouse), `BM` (Cloud Bare Metal); `Other` (non-Tencent Cloud server). Default to `ALL` if it's not specified.</li>
<li>`DockerStatus` - String - Optional - Docker installation status. Values: `ALL`; `INSTALL` (Installed); `UNINSTALL` (Not installed)</li>
<li>`ProjectID` - String - Optional - Project ID</li>
<li>`Tag:xxx(tag:key)` - String - Optional - Tag key-value pair; Example: `Filters":[{"Name":"tag:tke-kind","Values":["service"]}]`</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filters.
<li>`Status` - String - Optional - Agent status. Values: `ALL`; `UNINSTALL` (Not installed); `OFFLINE`, `ONLINE`. Default to `All` if it's not specified. </li>
<li>`HostName` - String - Optional - Server name</li>
<li>`Group - String - Optional - Server group</li>
<li>`HostIP` - String - Optional - Server IP</li>
<li>`HostID - String - Optional - Server ID</li>
<li>`DockerVersion` - String - Optional - Docker version</li>
<li>`MachineType` - String - Optional - Server type. Values: `ALL`; `CVM` (Cloud Virtual Machine); `ECM` (Edge Computing Machine); `LH` (Lighthouse), `BM` (Cloud Bare Metal); `Other` (non-Tencent Cloud server). Default to `ALL` if it's not specified.</li>
<li>`DockerStatus` - String - Optional - Docker installation status. Values: `ALL`; `INSTALL` (Installed); `UNINSTALL` (Not installed)</li>
<li>`ProjectID` - String - Optional - Project ID</li>
<li>`Tag:xxx(tag:key)` - String - Optional - Tag key-value pair; Example: `Filters":[{"Name":"tag:tke-kind","Values":["service"]}]`</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetHostListResponse(AbstractModel):
    r"""DescribeAssetHostList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of servers
        :type List: list of HostInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of servers
        :rtype: list of HostInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = HostInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageBindRuleInfoRequest(AbstractModel):
    r"""DescribeAssetImageBindRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"EventType","Values":[""]}]
EventType. Valid values:
`FILE_ABNORMAL_READ`: Access control.
`MALICE_PROCESS_START`: Malicious process startup.
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"EventType","Values":[""]}]
EventType. Valid values:
`FILE_ABNORMAL_READ`: Access control.
`MALICE_PROCESS_START`: Malicious process startup.
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageBindRuleInfoResponse(AbstractModel):
    r"""DescribeAssetImageBindRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _ImageBindRuleSet: List of rules bound to images
        :type ImageBindRuleSet: list of ImagesBindRuleInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ImageBindRuleSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ImageBindRuleSet(self):
        r"""List of rules bound to images
        :rtype: list of ImagesBindRuleInfo
        """
        return self._ImageBindRuleSet

    @ImageBindRuleSet.setter
    def ImageBindRuleSet(self, ImageBindRuleSet):
        self._ImageBindRuleSet = ImageBindRuleSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ImageBindRuleSet") is not None:
            self._ImageBindRuleSet = []
            for item in params.get("ImageBindRuleSet"):
                obj = ImagesBindRuleInfo()
                obj._deserialize(item)
                self._ImageBindRuleSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAssetImageDetailRequest(AbstractModel):
    r"""DescribeAssetImageDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        """
        self._ImageID = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageDetailResponse(AbstractModel):
    r"""DescribeAssetImageDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _Size: Image size
        :type Size: int
        :param _HostCnt: Number of associated servers
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCnt: int
        :param _ContainerCnt: Number of associated containers
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerCnt: int
        :param _ScanTime: Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanTime: str
        :param _VulCnt: Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCnt: int
        :param _RiskCnt: Number of risky behaviors
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskCnt: int
        :param _SensitiveInfoCnt: Number of sensitive data items
Note: This field may return null, indicating that no valid values can be obtained.
        :type SensitiveInfoCnt: int
        :param _IsTrustImage: Whether it is a trusted image
        :type IsTrustImage: bool
        :param _OsName: Image system
        :type OsName: str
        :param _AgentError: Image scan error in the agent
Note: This field may return null, indicating that no valid values can be obtained.
        :type AgentError: str
        :param _ScanError: Image scan error on the backend
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanError: str
        :param _Architecture: System architecture
Note: This field may return null, indicating that no valid values can be obtained.
        :type Architecture: str
        :param _Author: Author
Note: This field may return null, indicating that no valid values can be obtained.
        :type Author: str
        :param _BuildHistory: Build history
Note: This field may return null, indicating that no valid values can be obtained.
        :type BuildHistory: str
        :param _ScanVirusProgress: Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusProgress: int
        :param _ScanVulProgress: Vulnerability scan progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulProgress: int
        :param _ScanRiskProgress: Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskProgress: int
        :param _ScanVirusError: Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusError: str
        :param _ScanVulError: Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulError: str
        :param _ScanRiskError: Sensitive data error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskError: str
        :param _ScanStatus: Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanStatus: str
        :param _VirusCnt: Number of viruses and trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusCnt: int
        :param _Status: Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: int
        :param _RemainScanTime: Remaining scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type RemainScanTime: int
        :param _IsAuthorized: Valid values: `1` (licensed); `0` (unlicensed).
        :type IsAuthorized: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageID = None
        self._ImageName = None
        self._CreateTime = None
        self._Size = None
        self._HostCnt = None
        self._ContainerCnt = None
        self._ScanTime = None
        self._VulCnt = None
        self._RiskCnt = None
        self._SensitiveInfoCnt = None
        self._IsTrustImage = None
        self._OsName = None
        self._AgentError = None
        self._ScanError = None
        self._Architecture = None
        self._Author = None
        self._BuildHistory = None
        self._ScanVirusProgress = None
        self._ScanVulProgress = None
        self._ScanRiskProgress = None
        self._ScanVirusError = None
        self._ScanVulError = None
        self._ScanRiskError = None
        self._ScanStatus = None
        self._VirusCnt = None
        self._Status = None
        self._RemainScanTime = None
        self._IsAuthorized = None
        self._RequestId = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Size(self):
        r"""Image size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def HostCnt(self):
        r"""Number of associated servers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCnt

    @HostCnt.setter
    def HostCnt(self, HostCnt):
        self._HostCnt = HostCnt

    @property
    def ContainerCnt(self):
        r"""Number of associated containers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def ScanTime(self):
        r"""Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def VulCnt(self):
        r"""Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCnt

    @VulCnt.setter
    def VulCnt(self, VulCnt):
        self._VulCnt = VulCnt

    @property
    def RiskCnt(self):
        r"""Number of risky behaviors
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def SensitiveInfoCnt(self):
        r"""Number of sensitive data items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SensitiveInfoCnt

    @SensitiveInfoCnt.setter
    def SensitiveInfoCnt(self, SensitiveInfoCnt):
        self._SensitiveInfoCnt = SensitiveInfoCnt

    @property
    def IsTrustImage(self):
        r"""Whether it is a trusted image
        :rtype: bool
        """
        return self._IsTrustImage

    @IsTrustImage.setter
    def IsTrustImage(self, IsTrustImage):
        self._IsTrustImage = IsTrustImage

    @property
    def OsName(self):
        r"""Image system
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def AgentError(self):
        r"""Image scan error in the agent
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AgentError

    @AgentError.setter
    def AgentError(self, AgentError):
        self._AgentError = AgentError

    @property
    def ScanError(self):
        r"""Image scan error on the backend
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanError

    @ScanError.setter
    def ScanError(self, ScanError):
        self._ScanError = ScanError

    @property
    def Architecture(self):
        r"""System architecture
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Architecture

    @Architecture.setter
    def Architecture(self, Architecture):
        self._Architecture = Architecture

    @property
    def Author(self):
        r"""Author
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Author

    @Author.setter
    def Author(self, Author):
        self._Author = Author

    @property
    def BuildHistory(self):
        r"""Build history
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._BuildHistory

    @BuildHistory.setter
    def BuildHistory(self, BuildHistory):
        self._BuildHistory = BuildHistory

    @property
    def ScanVirusProgress(self):
        r"""Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVirusProgress

    @ScanVirusProgress.setter
    def ScanVirusProgress(self, ScanVirusProgress):
        self._ScanVirusProgress = ScanVirusProgress

    @property
    def ScanVulProgress(self):
        r"""Vulnerability scan progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVulProgress

    @ScanVulProgress.setter
    def ScanVulProgress(self, ScanVulProgress):
        self._ScanVulProgress = ScanVulProgress

    @property
    def ScanRiskProgress(self):
        r"""Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRiskProgress

    @ScanRiskProgress.setter
    def ScanRiskProgress(self, ScanRiskProgress):
        self._ScanRiskProgress = ScanRiskProgress

    @property
    def ScanVirusError(self):
        r"""Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVirusError

    @ScanVirusError.setter
    def ScanVirusError(self, ScanVirusError):
        self._ScanVirusError = ScanVirusError

    @property
    def ScanVulError(self):
        r"""Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVulError

    @ScanVulError.setter
    def ScanVulError(self, ScanVulError):
        self._ScanVulError = ScanVulError

    @property
    def ScanRiskError(self):
        r"""Sensitive data error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanRiskError

    @ScanRiskError.setter
    def ScanRiskError(self, ScanRiskError):
        self._ScanRiskError = ScanRiskError

    @property
    def ScanStatus(self):
        r"""Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def VirusCnt(self):
        r"""Number of viruses and trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VirusCnt

    @VirusCnt.setter
    def VirusCnt(self, VirusCnt):
        self._VirusCnt = VirusCnt

    @property
    def Status(self):
        r"""Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RemainScanTime(self):
        r"""Remaining scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RemainScanTime

    @RemainScanTime.setter
    def RemainScanTime(self, RemainScanTime):
        self._RemainScanTime = RemainScanTime

    @property
    def IsAuthorized(self):
        r"""Valid values: `1` (licensed); `0` (unlicensed).
        :rtype: int
        """
        return self._IsAuthorized

    @IsAuthorized.setter
    def IsAuthorized(self, IsAuthorized):
        self._IsAuthorized = IsAuthorized

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._CreateTime = params.get("CreateTime")
        self._Size = params.get("Size")
        self._HostCnt = params.get("HostCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._ScanTime = params.get("ScanTime")
        self._VulCnt = params.get("VulCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._SensitiveInfoCnt = params.get("SensitiveInfoCnt")
        self._IsTrustImage = params.get("IsTrustImage")
        self._OsName = params.get("OsName")
        self._AgentError = params.get("AgentError")
        self._ScanError = params.get("ScanError")
        self._Architecture = params.get("Architecture")
        self._Author = params.get("Author")
        self._BuildHistory = params.get("BuildHistory")
        self._ScanVirusProgress = params.get("ScanVirusProgress")
        self._ScanVulProgress = params.get("ScanVulProgress")
        self._ScanRiskProgress = params.get("ScanRiskProgress")
        self._ScanVirusError = params.get("ScanVirusError")
        self._ScanVulError = params.get("ScanVulError")
        self._ScanRiskError = params.get("ScanRiskError")
        self._ScanStatus = params.get("ScanStatus")
        self._VirusCnt = params.get("VirusCnt")
        self._Status = params.get("Status")
        self._RemainScanTime = params.get("RemainScanTime")
        self._IsAuthorized = params.get("IsAuthorized")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageHostListRequest(AbstractModel):
    r"""DescribeAssetImageHostList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter. Valid values: `ImageID`, `HostID`.
        :type Filters: list of AssetFilters
        """
        self._Filters = None

    @property
    def Filters(self):
        r"""Filter. Valid values: `ImageID`, `HostID`.
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageHostListResponse(AbstractModel):
    r"""DescribeAssetImageHostList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of images
        :type List: list of ImageHost
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of images
        :rtype: list of ImageHost
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageHost()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageListExportRequest(AbstractModel):
    r"""DescribeAssetImageListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageListExportResponse(AbstractModel):
    r"""DescribeAssetImageListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageListRequest(AbstractModel):
    r"""DescribeAssetImageList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus - String - Required: No - Image scanning status. Valid values: `notScan`, `scanning`, `scanned`, `scanErr`.</li>
<li>ImageID- String - Required: No - Image ID</li>
<li>SecurityRisk- String - Required: No - Security risks. Valid values: `VulCnt`, `VirusCnt`, `RiskCnt`, `IsTrustImage`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageListResponse(AbstractModel):
    r"""DescribeAssetImageList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of images
        :type List: list of ImagesInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of images
        :rtype: list of ImagesInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImagesInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryAssetStatusRequest(AbstractModel):
    r"""DescribeAssetImageRegistryAssetStatus request structure.

    """


class DescribeAssetImageRegistryAssetStatusResponse(AbstractModel):
    r"""DescribeAssetImageRegistryAssetStatus response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Update progress. Valid values: `doing` (updating); `success` (updated successfully); `failed` (failed to update).
        :type Status: str
        :param _Err: Error message
Note: This field may return null, indicating that no valid values can be obtained.
        :type Err: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._Err = None
        self._RequestId = None

    @property
    def Status(self):
        r"""Update progress. Valid values: `doing` (updating); `success` (updated successfully); `failed` (failed to update).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Err(self):
        r"""Error message
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Err

    @Err.setter
    def Err(self, Err):
        self._Err = Err

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._Err = params.get("Err")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryDetailRequest(AbstractModel):
    r"""DescribeAssetImageRegistryDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: List of repository IDs
        :type Id: int
        :param _ImageId: Image ID
        :type ImageId: str
        """
        self._Id = None
        self._ImageId = None

    @property
    def Id(self):
        r"""List of repository IDs
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ImageId = params.get("ImageId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryDetailResponse(AbstractModel):
    r"""DescribeAssetImageRegistryDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ImageDigest: Image digest
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageDigest: str
        :param _ImageRepoAddress: Image address
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageRepoAddress: str
        :param _RegistryType: Image type
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryType: str
        :param _ImageName: Repository name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageName: str
        :param _ImageTag: Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageTag: str
        :param _ScanTime: Scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanTime: str
        :param _ScanStatus: Scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanStatus: str
        :param _VulCnt: Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCnt: int
        :param _VirusCnt: Number of viruses and trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusCnt: int
        :param _RiskCnt: Number of risky behaviors
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskCnt: int
        :param _SentiveInfoCnt: Number of sensitive data items
Note: This field may return null, indicating that no valid values can be obtained.
        :type SentiveInfoCnt: int
        :param _OsName: Image system
Note: This field may return null, indicating that no valid values can be obtained.
        :type OsName: str
        :param _ScanVirusError: Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusError: str
        :param _ScanVulError: Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulError: str
        :param _LayerInfo: Layer file information
Note: This field may return null, indicating that no valid values can be obtained.
        :type LayerInfo: str
        :param _InstanceId: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        :param _InstanceName: Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceName: str
        :param _Namespace: Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :type Namespace: str
        :param _ScanRiskError: High-risk scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskError: str
        :param _ScanVirusProgress: Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusProgress: int
        :param _ScanVulProgress: Vulnerability scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulProgress: int
        :param _ScanRiskProgress: Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskProgress: int
        :param _ScanRemainTime: Remaining scan time in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRemainTime: int
        :param _CveStatus: CVE scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveStatus: str
        :param _RiskStatus: High-risk scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskStatus: str
        :param _VirusStatus: Trojan scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusStatus: str
        :param _Progress: Overall progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type Progress: int
        :param _IsAuthorized: Licensing status
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsAuthorized: int
        :param _ImageSize: Image size
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageSize: int
        :param _ImageId: Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageId: str
        :param _RegistryRegion: Image region
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryRegion: str
        :param _ImageCreateTime: Image creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageCreateTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageDigest = None
        self._ImageRepoAddress = None
        self._RegistryType = None
        self._ImageName = None
        self._ImageTag = None
        self._ScanTime = None
        self._ScanStatus = None
        self._VulCnt = None
        self._VirusCnt = None
        self._RiskCnt = None
        self._SentiveInfoCnt = None
        self._OsName = None
        self._ScanVirusError = None
        self._ScanVulError = None
        self._LayerInfo = None
        self._InstanceId = None
        self._InstanceName = None
        self._Namespace = None
        self._ScanRiskError = None
        self._ScanVirusProgress = None
        self._ScanVulProgress = None
        self._ScanRiskProgress = None
        self._ScanRemainTime = None
        self._CveStatus = None
        self._RiskStatus = None
        self._VirusStatus = None
        self._Progress = None
        self._IsAuthorized = None
        self._ImageSize = None
        self._ImageId = None
        self._RegistryRegion = None
        self._ImageCreateTime = None
        self._RequestId = None

    @property
    def ImageDigest(self):
        r"""Image digest
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageDigest

    @ImageDigest.setter
    def ImageDigest(self, ImageDigest):
        self._ImageDigest = ImageDigest

    @property
    def ImageRepoAddress(self):
        r"""Image address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageRepoAddress

    @ImageRepoAddress.setter
    def ImageRepoAddress(self, ImageRepoAddress):
        self._ImageRepoAddress = ImageRepoAddress

    @property
    def RegistryType(self):
        r"""Image type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def ImageName(self):
        r"""Repository name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def ScanTime(self):
        r"""Scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanStatus(self):
        r"""Scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def VulCnt(self):
        r"""Number of vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCnt

    @VulCnt.setter
    def VulCnt(self, VulCnt):
        self._VulCnt = VulCnt

    @property
    def VirusCnt(self):
        r"""Number of viruses and trojans
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VirusCnt

    @VirusCnt.setter
    def VirusCnt(self, VirusCnt):
        self._VirusCnt = VirusCnt

    @property
    def RiskCnt(self):
        r"""Number of risky behaviors
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def SentiveInfoCnt(self):
        warnings.warn("parameter `SentiveInfoCnt` is deprecated", DeprecationWarning) 

        r"""Number of sensitive data items
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SentiveInfoCnt

    @SentiveInfoCnt.setter
    def SentiveInfoCnt(self, SentiveInfoCnt):
        warnings.warn("parameter `SentiveInfoCnt` is deprecated", DeprecationWarning) 

        self._SentiveInfoCnt = SentiveInfoCnt

    @property
    def OsName(self):
        r"""Image system
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def ScanVirusError(self):
        r"""Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVirusError

    @ScanVirusError.setter
    def ScanVirusError(self, ScanVirusError):
        self._ScanVirusError = ScanVirusError

    @property
    def ScanVulError(self):
        r"""Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVulError

    @ScanVulError.setter
    def ScanVulError(self, ScanVulError):
        self._ScanVulError = ScanVulError

    @property
    def LayerInfo(self):
        r"""Layer file information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LayerInfo

    @LayerInfo.setter
    def LayerInfo(self, LayerInfo):
        self._LayerInfo = LayerInfo

    @property
    def InstanceId(self):
        r"""Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def InstanceName(self):
        r"""Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Namespace(self):
        r"""Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ScanRiskError(self):
        r"""High-risk scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanRiskError

    @ScanRiskError.setter
    def ScanRiskError(self, ScanRiskError):
        self._ScanRiskError = ScanRiskError

    @property
    def ScanVirusProgress(self):
        r"""Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVirusProgress

    @ScanVirusProgress.setter
    def ScanVirusProgress(self, ScanVirusProgress):
        self._ScanVirusProgress = ScanVirusProgress

    @property
    def ScanVulProgress(self):
        r"""Vulnerability scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVulProgress

    @ScanVulProgress.setter
    def ScanVulProgress(self, ScanVulProgress):
        self._ScanVulProgress = ScanVulProgress

    @property
    def ScanRiskProgress(self):
        r"""Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRiskProgress

    @ScanRiskProgress.setter
    def ScanRiskProgress(self, ScanRiskProgress):
        self._ScanRiskProgress = ScanRiskProgress

    @property
    def ScanRemainTime(self):
        r"""Remaining scan time in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRemainTime

    @ScanRemainTime.setter
    def ScanRemainTime(self, ScanRemainTime):
        self._ScanRemainTime = ScanRemainTime

    @property
    def CveStatus(self):
        r"""CVE scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveStatus

    @CveStatus.setter
    def CveStatus(self, CveStatus):
        self._CveStatus = CveStatus

    @property
    def RiskStatus(self):
        r"""High-risk scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskStatus

    @RiskStatus.setter
    def RiskStatus(self, RiskStatus):
        self._RiskStatus = RiskStatus

    @property
    def VirusStatus(self):
        r"""Trojan scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusStatus

    @VirusStatus.setter
    def VirusStatus(self, VirusStatus):
        self._VirusStatus = VirusStatus

    @property
    def Progress(self):
        r"""Overall progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def IsAuthorized(self):
        r"""Licensing status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsAuthorized

    @IsAuthorized.setter
    def IsAuthorized(self, IsAuthorized):
        self._IsAuthorized = IsAuthorized

    @property
    def ImageSize(self):
        r"""Image size
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize

    @property
    def ImageId(self):
        r"""Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def RegistryRegion(self):
        r"""Image region
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def ImageCreateTime(self):
        r"""Image creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageCreateTime

    @ImageCreateTime.setter
    def ImageCreateTime(self, ImageCreateTime):
        self._ImageCreateTime = ImageCreateTime

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageDigest = params.get("ImageDigest")
        self._ImageRepoAddress = params.get("ImageRepoAddress")
        self._RegistryType = params.get("RegistryType")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._ScanTime = params.get("ScanTime")
        self._ScanStatus = params.get("ScanStatus")
        self._VulCnt = params.get("VulCnt")
        self._VirusCnt = params.get("VirusCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._SentiveInfoCnt = params.get("SentiveInfoCnt")
        self._OsName = params.get("OsName")
        self._ScanVirusError = params.get("ScanVirusError")
        self._ScanVulError = params.get("ScanVulError")
        self._LayerInfo = params.get("LayerInfo")
        self._InstanceId = params.get("InstanceId")
        self._InstanceName = params.get("InstanceName")
        self._Namespace = params.get("Namespace")
        self._ScanRiskError = params.get("ScanRiskError")
        self._ScanVirusProgress = params.get("ScanVirusProgress")
        self._ScanVulProgress = params.get("ScanVulProgress")
        self._ScanRiskProgress = params.get("ScanRiskProgress")
        self._ScanRemainTime = params.get("ScanRemainTime")
        self._CveStatus = params.get("CveStatus")
        self._RiskStatus = params.get("RiskStatus")
        self._VirusStatus = params.get("VirusStatus")
        self._Progress = params.get("Progress")
        self._IsAuthorized = params.get("IsAuthorized")
        self._ImageSize = params.get("ImageSize")
        self._ImageId = params.get("ImageId")
        self._RegistryRegion = params.get("RegistryRegion")
        self._ImageCreateTime = params.get("ImageCreateTime")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryListExportRequest(AbstractModel):
    r"""DescribeAssetImageRegistryListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Sorting field
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _OnlyShowLatest: Whether to show only the latest repository images. Default value: `false`.
        :type OnlyShowLatest: bool
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None
        self._OnlyShowLatest = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Sorting field
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OnlyShowLatest(self):
        r"""Whether to show only the latest repository images. Default value: `false`.
        :rtype: bool
        """
        return self._OnlyShowLatest

    @OnlyShowLatest.setter
    def OnlyShowLatest(self, OnlyShowLatest):
        self._OnlyShowLatest = OnlyShowLatest


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._OnlyShowLatest = params.get("OnlyShowLatest")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryListExportResponse(AbstractModel):
    r"""DescribeAssetImageRegistryListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryListRequest(AbstractModel):
    r"""DescribeAssetImageRegistryList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter field
`IsAuthorized` (whether licensed). Valid values: `all` (all); `0` (unlicensed); `1` (licensed).
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _OnlyShowLatest: Whether to show only the latest repository images. Default value: `false`.
        :type OnlyShowLatest: bool
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None
        self._OnlyShowLatest = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter field
`IsAuthorized` (whether licensed). Valid values: `all` (all); `0` (unlicensed); `1` (licensed).
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OnlyShowLatest(self):
        r"""Whether to show only the latest repository images. Default value: `false`.
        :rtype: bool
        """
        return self._OnlyShowLatest

    @OnlyShowLatest.setter
    def OnlyShowLatest(self, OnlyShowLatest):
        self._OnlyShowLatest = OnlyShowLatest


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._OnlyShowLatest = params.get("OnlyShowLatest")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryListResponse(AbstractModel):
    r"""DescribeAssetImageRegistryList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of image repositories
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ImageRepoInfo
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of image repositories
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageRepoInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageRepoInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryRegistryDetailRequest(AbstractModel):
    r"""DescribeAssetImageRegistryRegistryDetail request structure.

    """

    def __init__(self):
        r"""
        :param _RegistryId: Unique repository ID
        :type RegistryId: int
        """
        self._RegistryId = None

    @property
    def RegistryId(self):
        r"""Unique repository ID
        :rtype: int
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId


    def _deserialize(self, params):
        self._RegistryId = params.get("RegistryId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryRegistryDetailResponse(AbstractModel):
    r"""DescribeAssetImageRegistryRegistryDetail response structure.

    """

    def __init__(self):
        r"""
        :param _Name: Repository name
        :type Name: str
        :param _Username: Username
        :type Username: str
        :param _Password: Password
        :type Password: str
        :param _Url: Repository URL
        :type Url: str
        :param _RegistryType: Repository type, which can be `harbor`.
        :type RegistryType: str
        :param _RegistryVersion: Repository version
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryVersion: str
        :param _NetType: Network type, which can be `public` (public network).
        :type NetType: str
        :param _RegistryRegion: Region. Default value: `default`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryRegion: str
        :param _SpeedLimit: Speed limit
Note: This field may return null, indicating that no valid values can be obtained.
        :type SpeedLimit: int
        :param _Insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
Note: This field may return null, indicating that no valid values can be obtained.
        :type Insecure: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Name = None
        self._Username = None
        self._Password = None
        self._Url = None
        self._RegistryType = None
        self._RegistryVersion = None
        self._NetType = None
        self._RegistryRegion = None
        self._SpeedLimit = None
        self._Insecure = None
        self._RequestId = None

    @property
    def Name(self):
        r"""Repository name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Username(self):
        r"""Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Password(self):
        r"""Password
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password

    @property
    def Url(self):
        r"""Repository URL
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RegistryType(self):
        r"""Repository type, which can be `harbor`.
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def RegistryVersion(self):
        r"""Repository version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegistryVersion

    @RegistryVersion.setter
    def RegistryVersion(self, RegistryVersion):
        self._RegistryVersion = RegistryVersion

    @property
    def NetType(self):
        r"""Network type, which can be `public` (public network).
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegistryRegion(self):
        r"""Region. Default value: `default`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def SpeedLimit(self):
        r"""Speed limit
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SpeedLimit

    @SpeedLimit.setter
    def SpeedLimit(self, SpeedLimit):
        self._SpeedLimit = SpeedLimit

    @property
    def Insecure(self):
        r"""Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Insecure

    @Insecure.setter
    def Insecure(self, Insecure):
        self._Insecure = Insecure

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Username = params.get("Username")
        self._Password = params.get("Password")
        self._Url = params.get("Url")
        self._RegistryType = params.get("RegistryType")
        self._RegistryVersion = params.get("RegistryVersion")
        self._NetType = params.get("NetType")
        self._RegistryRegion = params.get("RegistryRegion")
        self._SpeedLimit = params.get("SpeedLimit")
        self._Insecure = params.get("Insecure")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryRegistryListRequest(AbstractModel):
    r"""DescribeAssetImageRegistryRegistryList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number to return, default is 10, maximum is 100
        :type Limit: int
        :param _Offset: Offset, the default is 0
        :type Offset: int
        :param _Filters: Filter field IsAuthorized Whether to authorize. The value can be all, 0 unauthorized, 1 authorized
        :type Filters: list of AssetFilters
        :param _By: Sort field
        :type By: str
        :param _Order: Sort by asc, desc
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number to return, default is 10, maximum is 100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset, the default is 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter field IsAuthorized Whether to authorize. The value can be all, 0 unauthorized, 1 authorized
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sort field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sort by asc, desc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryRegistryListResponse(AbstractModel):
    r"""DescribeAssetImageRegistryRegistryList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Mirror repository list
        :type List: list of ImageRepoRegistryInfo
        :param _TotalCount: Total quantity
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""Mirror repository list
        :rtype: list of ImageRepoRegistryInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total quantity
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageRepoRegistryInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryRiskInfoListRequest(AbstractModel):
    r"""DescribeAssetImageRegistryRiskInfoList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image ID
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _By: Sorting field: `Level`.
        :type By: str
        :param _Order: Sorting order. Valid values: `+`, `-`.
        :type Order: str
        :param _Id: Image ID
        :type Id: int
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._By = None
        self._Order = None
        self._Id = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image ID
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def By(self):
        r"""Sorting field: `Level`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `+`, `-`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._By = params.get("By")
        self._Order = params.get("Order")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryRiskInfoListResponse(AbstractModel):
    r"""DescribeAssetImageRegistryRiskInfoList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ImageRisk
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageRisk
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageRisk()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryRiskListExportRequest(AbstractModel):
    r"""DescribeAssetImageRegistryRiskListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image information
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _Id: Image ID
        :type Id: int
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._Id = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryRiskListExportResponse(AbstractModel):
    r"""DescribeAssetImageRegistryRiskListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryScanStatusOneKeyRequest(AbstractModel):
    r"""DescribeAssetImageRegistryScanStatusOneKey request structure.

    """

    def __init__(self):
        r"""
        :param _Images: List of images for which to get the progress
        :type Images: list of ImageInfo
        :param _All: Whether to get all images
        :type All: bool
        :param _Id: List of IDs of images for which to get the progress
        :type Id: list of int non-negative
        """
        self._Images = None
        self._All = None
        self._Id = None

    @property
    def Images(self):
        r"""List of images for which to get the progress
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def All(self):
        r"""Whether to get all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Id(self):
        r"""List of IDs of images for which to get the progress
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._All = params.get("All")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryScanStatusOneKeyResponse(AbstractModel):
    r"""DescribeAssetImageRegistryScanStatusOneKey response structure.

    """

    def __init__(self):
        r"""
        :param _ImageTotal: Number of images
        :type ImageTotal: int
        :param _ImageScanCnt: Number of scanned images
        :type ImageScanCnt: int
        :param _ImageStatus: Scanning progress list
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageStatus: list of ImageProgress
        :param _SuccessCount: Number of successfully scanned images
        :type SuccessCount: int
        :param _RiskCount: Number of risks
        :type RiskCount: int
        :param _Schedule: Scanning progress
        :type Schedule: int
        :param _Status: Scanning status
        :type Status: str
        :param _ScanRemainTime: Remaining scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRemainTime: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageTotal = None
        self._ImageScanCnt = None
        self._ImageStatus = None
        self._SuccessCount = None
        self._RiskCount = None
        self._Schedule = None
        self._Status = None
        self._ScanRemainTime = None
        self._RequestId = None

    @property
    def ImageTotal(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageTotal

    @ImageTotal.setter
    def ImageTotal(self, ImageTotal):
        self._ImageTotal = ImageTotal

    @property
    def ImageScanCnt(self):
        r"""Number of scanned images
        :rtype: int
        """
        return self._ImageScanCnt

    @ImageScanCnt.setter
    def ImageScanCnt(self, ImageScanCnt):
        self._ImageScanCnt = ImageScanCnt

    @property
    def ImageStatus(self):
        r"""Scanning progress list
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageProgress
        """
        return self._ImageStatus

    @ImageStatus.setter
    def ImageStatus(self, ImageStatus):
        self._ImageStatus = ImageStatus

    @property
    def SuccessCount(self):
        r"""Number of successfully scanned images
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def RiskCount(self):
        r"""Number of risks
        :rtype: int
        """
        return self._RiskCount

    @RiskCount.setter
    def RiskCount(self, RiskCount):
        self._RiskCount = RiskCount

    @property
    def Schedule(self):
        r"""Scanning progress
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def Status(self):
        r"""Scanning status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ScanRemainTime(self):
        r"""Remaining scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRemainTime

    @ScanRemainTime.setter
    def ScanRemainTime(self, ScanRemainTime):
        self._ScanRemainTime = ScanRemainTime

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageTotal = params.get("ImageTotal")
        self._ImageScanCnt = params.get("ImageScanCnt")
        if params.get("ImageStatus") is not None:
            self._ImageStatus = []
            for item in params.get("ImageStatus"):
                obj = ImageProgress()
                obj._deserialize(item)
                self._ImageStatus.append(obj)
        self._SuccessCount = params.get("SuccessCount")
        self._RiskCount = params.get("RiskCount")
        self._Schedule = params.get("Schedule")
        self._Status = params.get("Status")
        self._ScanRemainTime = params.get("ScanRemainTime")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistrySummaryRequest(AbstractModel):
    r"""DescribeAssetImageRegistrySummary request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: 
        :type Filters: list of AssetFilters
        """
        self._Filters = None

    @property
    def Filters(self):
        r"""
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistrySummaryResponse(AbstractModel):
    r"""DescribeAssetImageRegistrySummary response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryVirusListExportRequest(AbstractModel):
    r"""DescribeAssetImageRegistryVirusListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image information
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _Id: Image ID
        :type Id: int
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._Id = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryVirusListExportResponse(AbstractModel):
    r"""DescribeAssetImageRegistryVirusListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryVirusListRequest(AbstractModel):
    r"""DescribeAssetImageRegistryVirusList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image information
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _Id: Image ID
        :type Id: int
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._Id = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryVirusListResponse(AbstractModel):
    r"""DescribeAssetImageRegistryVirusList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ImageVirus
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageVirus
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageVirus()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryVulListExportRequest(AbstractModel):
    r"""DescribeAssetImageRegistryVulListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image information
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _Id: Image ID
        :type Id: int
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._Id = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryVulListExportResponse(AbstractModel):
    r"""DescribeAssetImageRegistryVulListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRegistryVulListRequest(AbstractModel):
    r"""DescribeAssetImageRegistryVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :type Filters: list of AssetFilters
        :param _ImageInfo: Image information
        :type ImageInfo: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        :param _Id: Image ID
        :type Id: int
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._ImageInfo = None
        self._Id = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Vulnerability level</li>
<li>Name - String - Required: No - Vulnerability name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ImageInfo(self):
        r"""Image information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Id(self):
        r"""Image ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRegistryVulListResponse(AbstractModel):
    r"""DescribeAssetImageRegistryVulList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type List: list of ImageVul
        :param _TotalCount: Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of image vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageVul()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRiskListExportRequest(AbstractModel):
    r"""DescribeAssetImageRiskListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Filters: Filter
<li>Level- String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Behavior - String - Required: No - Risky behavior. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Type - String - Required: No - Risk type. Valid values: `1`, `2`.</li>
        :type Filters: list of AssetFilters
        """
        self._ExportField = None
        self._ImageID = None
        self._Filters = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Behavior - String - Required: No - Risky behavior. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Type - String - Required: No - Risk type. Valid values: `1`, `2`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._ImageID = params.get("ImageID")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRiskListExportResponse(AbstractModel):
    r"""DescribeAssetImageRiskListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageRiskListRequest(AbstractModel):
    r"""DescribeAssetImageRiskList request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Behavior - String - Required: No - Risky behavior. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Type - String - Required: No - Risk type. Valid values: `1`, `2`.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order
        :type Order: str
        """
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Behavior - String - Required: No - Risky behavior. Valid values: `1`, `2`, `3`, `4`.</li>
<li>Type - String - Required: No - Risk type. Valid values: `1`, `2`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageRiskListResponse(AbstractModel):
    r"""DescribeAssetImageRiskList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of viruses in the image
        :type List: list of ImageRiskInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of viruses in the image
        :rtype: list of ImageRiskInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageRiskInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageScanSettingRequest(AbstractModel):
    r"""DescribeAssetImageScanSetting request structure.

    """


class DescribeAssetImageScanSettingResponse(AbstractModel):
    r"""DescribeAssetImageScanSetting response structure.

    """

    def __init__(self):
        r"""
        :param _Enable: Switch
        :type Enable: bool
        :param _ScanTime: Scan time, which is a complete time and parsed as hour/minute/second in time zone 0 on the backend.
        :type ScanTime: str
        :param _ScanPeriod: Scan interval
        :type ScanPeriod: int
        :param _ScanVirus: Trojan scan
        :type ScanVirus: bool
        :param _ScanRisk: Sensitive data scan
        :type ScanRisk: bool
        :param _ScanVul: Vulnerability scan
        :type ScanVul: bool
        :param _All: Scan of all images
        :type All: bool
        :param _Images: Scan of specified images
        :type Images: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Enable = None
        self._ScanTime = None
        self._ScanPeriod = None
        self._ScanVirus = None
        self._ScanRisk = None
        self._ScanVul = None
        self._All = None
        self._Images = None
        self._RequestId = None

    @property
    def Enable(self):
        r"""Switch
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def ScanTime(self):
        r"""Scan time, which is a complete time and parsed as hour/minute/second in time zone 0 on the backend.
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanPeriod(self):
        r"""Scan interval
        :rtype: int
        """
        return self._ScanPeriod

    @ScanPeriod.setter
    def ScanPeriod(self, ScanPeriod):
        self._ScanPeriod = ScanPeriod

    @property
    def ScanVirus(self):
        r"""Trojan scan
        :rtype: bool
        """
        return self._ScanVirus

    @ScanVirus.setter
    def ScanVirus(self, ScanVirus):
        self._ScanVirus = ScanVirus

    @property
    def ScanRisk(self):
        r"""Sensitive data scan
        :rtype: bool
        """
        return self._ScanRisk

    @ScanRisk.setter
    def ScanRisk(self, ScanRisk):
        self._ScanRisk = ScanRisk

    @property
    def ScanVul(self):
        r"""Vulnerability scan
        :rtype: bool
        """
        return self._ScanVul

    @ScanVul.setter
    def ScanVul(self, ScanVul):
        self._ScanVul = ScanVul

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""Scan of all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Images(self):
        r"""Scan of specified images
        :rtype: list of str
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._ScanTime = params.get("ScanTime")
        self._ScanPeriod = params.get("ScanPeriod")
        self._ScanVirus = params.get("ScanVirus")
        self._ScanRisk = params.get("ScanRisk")
        self._ScanVul = params.get("ScanVul")
        self._All = params.get("All")
        self._Images = params.get("Images")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageScanStatusRequest(AbstractModel):
    r"""DescribeAssetImageScanStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        """
        self._TaskID = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageScanStatusResponse(AbstractModel):
    r"""DescribeAssetImageScanStatus response structure.

    """

    def __init__(self):
        r"""
        :param _ImageTotal: Number of images
        :type ImageTotal: int
        :param _ImageScanCnt: Number of scanned images
        :type ImageScanCnt: int
        :param _Status: Scanning status
        :type Status: str
        :param _Schedule: Scanning progress, the value of which is calculated as `ImageScanCnt`/`ImageTotal` * 100.
        :type Schedule: int
        :param _SuccessCount: Number of successfully scanned images
        :type SuccessCount: int
        :param _RiskCount: Number of risks
        :type RiskCount: int
        :param _LeftSeconds: Remaining scan time
        :type LeftSeconds: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageTotal = None
        self._ImageScanCnt = None
        self._Status = None
        self._Schedule = None
        self._SuccessCount = None
        self._RiskCount = None
        self._LeftSeconds = None
        self._RequestId = None

    @property
    def ImageTotal(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageTotal

    @ImageTotal.setter
    def ImageTotal(self, ImageTotal):
        self._ImageTotal = ImageTotal

    @property
    def ImageScanCnt(self):
        r"""Number of scanned images
        :rtype: int
        """
        return self._ImageScanCnt

    @ImageScanCnt.setter
    def ImageScanCnt(self, ImageScanCnt):
        self._ImageScanCnt = ImageScanCnt

    @property
    def Status(self):
        r"""Scanning status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Schedule(self):
        r"""Scanning progress, the value of which is calculated as `ImageScanCnt`/`ImageTotal` * 100.
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def SuccessCount(self):
        r"""Number of successfully scanned images
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def RiskCount(self):
        r"""Number of risks
        :rtype: int
        """
        return self._RiskCount

    @RiskCount.setter
    def RiskCount(self, RiskCount):
        self._RiskCount = RiskCount

    @property
    def LeftSeconds(self):
        r"""Remaining scan time
        :rtype: int
        """
        return self._LeftSeconds

    @LeftSeconds.setter
    def LeftSeconds(self, LeftSeconds):
        self._LeftSeconds = LeftSeconds

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageTotal = params.get("ImageTotal")
        self._ImageScanCnt = params.get("ImageScanCnt")
        self._Status = params.get("Status")
        self._Schedule = params.get("Schedule")
        self._SuccessCount = params.get("SuccessCount")
        self._RiskCount = params.get("RiskCount")
        self._LeftSeconds = params.get("LeftSeconds")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageScanTaskRequest(AbstractModel):
    r"""DescribeAssetImageScanTask request structure.

    """


class DescribeAssetImageScanTaskResponse(AbstractModel):
    r"""DescribeAssetImageScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskID = None
        self._RequestId = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageSimpleListRequest(AbstractModel):
    r"""DescribeAssetImageSimpleList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Keywords- String - Required: No - Image name/ID</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Keywords- String - Required: No - Image name/ID</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageSimpleListResponse(AbstractModel):
    r"""DescribeAssetImageSimpleList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of images
        :type List: list of AssetSimpleImageInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of images
        :rtype: list of AssetSimpleImageInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AssetSimpleImageInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageVirusListExportRequest(AbstractModel):
    r"""DescribeAssetImageVirusListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Fields supported in the list
        :type ExportField: list of str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Filters: Filter
<li>Name- String - Required: No - Image name</li>
<li>RiskLevel - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :type Filters: list of AssetFilters
        """
        self._ExportField = None
        self._ImageID = None
        self._Filters = None

    @property
    def ExportField(self):
        r"""Fields supported in the list
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Filters(self):
        r"""Filter
<li>Name- String - Required: No - Image name</li>
<li>RiskLevel - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._ImageID = params.get("ImageID")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageVirusListExportResponse(AbstractModel):
    r"""DescribeAssetImageVirusListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
        :type DownloadUrl: str
        :param _JobId: Task ID
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._JobId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def JobId(self):
        r"""Task ID
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageVirusListRequest(AbstractModel):
    r"""DescribeAssetImageVirusList request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Name- String - Required: No - Image name</li>
<li>RiskLevel - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :type Filters: list of AssetFilters
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Name- String - Required: No - Image name</li>
<li>RiskLevel - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageVirusListResponse(AbstractModel):
    r"""DescribeAssetImageVirusList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of viruses in the image
        :type List: list of ImageVirusInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _VirusScanStatus: Virus scanning status
`0`: Not scanned.
`1`: Scanning.
`2`: Scanned.
`3`: Scan error.
`4`: Scan canceled.
        :type VirusScanStatus: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._VirusScanStatus = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of viruses in the image
        :rtype: list of ImageVirusInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def VirusScanStatus(self):
        r"""Virus scanning status
`0`: Not scanned.
`1`: Scanning.
`2`: Scanned.
`3`: Scan error.
`4`: Scan canceled.
        :rtype: int
        """
        return self._VirusScanStatus

    @VirusScanStatus.setter
    def VirusScanStatus(self, VirusScanStatus):
        self._VirusScanStatus = VirusScanStatus

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageVirusInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._VirusScanStatus = params.get("VirusScanStatus")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageVulListExportRequest(AbstractModel):
    r"""DescribeAssetImageVulListExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Name- String - Required: No - Vulnerability name</li>
<li>Level - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :type Filters: list of AssetFilters
        """
        self._ExportField = None
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Name- String - Required: No - Vulnerability name</li>
<li>Level - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageVulListExportResponse(AbstractModel):
    r"""DescribeAssetImageVulListExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel file download URL
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel file download URL
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeAssetImageVulListRequest(AbstractModel):
    r"""DescribeAssetImageVulList request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Name- String - Required: No - Vulnerability name</li>
<li>Level - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field: `Level`.
        :type By: str
        :param _Order: Sorting order. Valid values: `+`, `-`.
        :type Order: str
        """
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Name- String - Required: No - Vulnerability name</li>
<li>Level - String - Required: No - Risk level. Valid values: `1`, `2`, `3`, `4`.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field: `Level`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `+`, `-`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetImageVulListResponse(AbstractModel):
    r"""DescribeAssetImageVulList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of image vulnerabilities
        :type List: list of ImagesVul
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of image vulnerabilities
        :rtype: list of ImagesVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImagesVul()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetPortListRequest(AbstractModel):
    r"""DescribeAssetPortList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>All - String - Required: No - Optional field for the fuzzy query</li>
<li>RunAs - String - Required: No - Operator</li>
<li>ContainerID - String - Required: No - Container ID</li>
<li>HostID- String - Required: Yes - Server ID</li>
<li>HostIP- string - Required: No - Server IP</li>
<li>ProcessName- string - Required: No - Process name</li>
        :type Filters: list of AssetFilters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>All - String - Required: No - Optional field for the fuzzy query</li>
<li>RunAs - String - Required: No - Operator</li>
<li>ContainerID - String - Required: No - Container ID</li>
<li>HostID- String - Required: Yes - Server ID</li>
<li>HostIP- string - Required: No - Server IP</li>
<li>ProcessName- string - Required: No - Process name</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetPortListResponse(AbstractModel):
    r"""DescribeAssetPortList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of ports
        :type List: list of PortInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of ports
        :rtype: list of PortInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = PortInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetProcessListRequest(AbstractModel):
    r"""DescribeAssetProcessList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>RunAs - String - Required: No - Operator</li>
<li>ContainerID - String - Required: No - Container ID</li>
<li>HostID- String - Required: Yes - Server ID</li>
<li>HostIP- string - Required: No - Server IP</li>
<li>ProcessName- string - Required: No - Process name</li>
<li>Pid- string - Required: No - Process ID (associated process)</li>
        :type Filters: list of AssetFilters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>RunAs - String - Required: No - Operator</li>
<li>ContainerID - String - Required: No - Container ID</li>
<li>HostID- String - Required: Yes - Server ID</li>
<li>HostIP- string - Required: No - Server IP</li>
<li>ProcessName- string - Required: No - Process name</li>
<li>Pid- string - Required: No - Process ID (associated process)</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetProcessListResponse(AbstractModel):
    r"""DescribeAssetProcessList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of ports
        :type List: list of ProcessInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of ports
        :rtype: list of ProcessInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ProcessInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAssetSummaryRequest(AbstractModel):
    r"""DescribeAssetSummary request structure.

    """


class DescribeAssetSummaryResponse(AbstractModel):
    r"""DescribeAssetSummary response structure.

    """

    def __init__(self):
        r"""
        :param _AppCnt: Number of applications
        :type AppCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _ContainerPause: Number of paused containers
        :type ContainerPause: int
        :param _ContainerRunning: Number of running containers
        :type ContainerRunning: int
        :param _ContainerStop: Number of stopped containers
        :type ContainerStop: int
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _DbCnt: Number of databases
        :type DbCnt: int
        :param _ImageCnt: Number of images
        :type ImageCnt: int
        :param _HostOnline: Number of online servers
        :type HostOnline: int
        :param _HostCnt: Number of servers
        :type HostCnt: int
        :param _ImageHasRiskInfoCnt: Number of images at risk
        :type ImageHasRiskInfoCnt: int
        :param _ImageHasVirusCnt: Number of images with viruses
        :type ImageHasVirusCnt: int
        :param _ImageHasVulsCnt: Number of images with vulnerabilities
        :type ImageHasVulsCnt: int
        :param _ImageUntrustCnt: Number of untrusted images
        :type ImageUntrustCnt: int
        :param _ListenPortCnt: Number of listened ports
        :type ListenPortCnt: int
        :param _ProcessCnt: Number of processes
        :type ProcessCnt: int
        :param _WebServiceCnt: Number of web services
        :type WebServiceCnt: int
        :param _LatestImageScanTime: Last image scan time
        :type LatestImageScanTime: str
        :param _ImageUnsafeCnt: Number of images at risk
        :type ImageUnsafeCnt: int
        :param _HostUnInstallCnt: Number of servers not installed with the agent
        :type HostUnInstallCnt: int
        :param _SuperNodeCnt: Number of super nodes
        :type SuperNodeCnt: int
        :param _SuperNodeRunningCnt: Number of running super nodes
        :type SuperNodeRunningCnt: int
        :param _TodayNewImageCnt: 
        :type TodayNewImageCnt: int
        :param _TodayUnsafeImageCnt: 
        :type TodayUnsafeImageCnt: int
        :param _RecommendedFixImageCnt: 
        :type RecommendedFixImageCnt: int
        :param _ScannedImageCnt: 
        :type ScannedImageCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AppCnt = None
        self._ContainerCnt = None
        self._ContainerPause = None
        self._ContainerRunning = None
        self._ContainerStop = None
        self._CreateTime = None
        self._DbCnt = None
        self._ImageCnt = None
        self._HostOnline = None
        self._HostCnt = None
        self._ImageHasRiskInfoCnt = None
        self._ImageHasVirusCnt = None
        self._ImageHasVulsCnt = None
        self._ImageUntrustCnt = None
        self._ListenPortCnt = None
        self._ProcessCnt = None
        self._WebServiceCnt = None
        self._LatestImageScanTime = None
        self._ImageUnsafeCnt = None
        self._HostUnInstallCnt = None
        self._SuperNodeCnt = None
        self._SuperNodeRunningCnt = None
        self._TodayNewImageCnt = None
        self._TodayUnsafeImageCnt = None
        self._RecommendedFixImageCnt = None
        self._ScannedImageCnt = None
        self._RequestId = None

    @property
    def AppCnt(self):
        r"""Number of applications
        :rtype: int
        """
        return self._AppCnt

    @AppCnt.setter
    def AppCnt(self, AppCnt):
        self._AppCnt = AppCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def ContainerPause(self):
        r"""Number of paused containers
        :rtype: int
        """
        return self._ContainerPause

    @ContainerPause.setter
    def ContainerPause(self, ContainerPause):
        self._ContainerPause = ContainerPause

    @property
    def ContainerRunning(self):
        r"""Number of running containers
        :rtype: int
        """
        return self._ContainerRunning

    @ContainerRunning.setter
    def ContainerRunning(self, ContainerRunning):
        self._ContainerRunning = ContainerRunning

    @property
    def ContainerStop(self):
        r"""Number of stopped containers
        :rtype: int
        """
        return self._ContainerStop

    @ContainerStop.setter
    def ContainerStop(self, ContainerStop):
        self._ContainerStop = ContainerStop

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def DbCnt(self):
        r"""Number of databases
        :rtype: int
        """
        return self._DbCnt

    @DbCnt.setter
    def DbCnt(self, DbCnt):
        self._DbCnt = DbCnt

    @property
    def ImageCnt(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def HostOnline(self):
        r"""Number of online servers
        :rtype: int
        """
        return self._HostOnline

    @HostOnline.setter
    def HostOnline(self, HostOnline):
        self._HostOnline = HostOnline

    @property
    def HostCnt(self):
        r"""Number of servers
        :rtype: int
        """
        return self._HostCnt

    @HostCnt.setter
    def HostCnt(self, HostCnt):
        self._HostCnt = HostCnt

    @property
    def ImageHasRiskInfoCnt(self):
        r"""Number of images at risk
        :rtype: int
        """
        return self._ImageHasRiskInfoCnt

    @ImageHasRiskInfoCnt.setter
    def ImageHasRiskInfoCnt(self, ImageHasRiskInfoCnt):
        self._ImageHasRiskInfoCnt = ImageHasRiskInfoCnt

    @property
    def ImageHasVirusCnt(self):
        r"""Number of images with viruses
        :rtype: int
        """
        return self._ImageHasVirusCnt

    @ImageHasVirusCnt.setter
    def ImageHasVirusCnt(self, ImageHasVirusCnt):
        self._ImageHasVirusCnt = ImageHasVirusCnt

    @property
    def ImageHasVulsCnt(self):
        r"""Number of images with vulnerabilities
        :rtype: int
        """
        return self._ImageHasVulsCnt

    @ImageHasVulsCnt.setter
    def ImageHasVulsCnt(self, ImageHasVulsCnt):
        self._ImageHasVulsCnt = ImageHasVulsCnt

    @property
    def ImageUntrustCnt(self):
        r"""Number of untrusted images
        :rtype: int
        """
        return self._ImageUntrustCnt

    @ImageUntrustCnt.setter
    def ImageUntrustCnt(self, ImageUntrustCnt):
        self._ImageUntrustCnt = ImageUntrustCnt

    @property
    def ListenPortCnt(self):
        r"""Number of listened ports
        :rtype: int
        """
        return self._ListenPortCnt

    @ListenPortCnt.setter
    def ListenPortCnt(self, ListenPortCnt):
        self._ListenPortCnt = ListenPortCnt

    @property
    def ProcessCnt(self):
        r"""Number of processes
        :rtype: int
        """
        return self._ProcessCnt

    @ProcessCnt.setter
    def ProcessCnt(self, ProcessCnt):
        self._ProcessCnt = ProcessCnt

    @property
    def WebServiceCnt(self):
        r"""Number of web services
        :rtype: int
        """
        return self._WebServiceCnt

    @WebServiceCnt.setter
    def WebServiceCnt(self, WebServiceCnt):
        self._WebServiceCnt = WebServiceCnt

    @property
    def LatestImageScanTime(self):
        r"""Last image scan time
        :rtype: str
        """
        return self._LatestImageScanTime

    @LatestImageScanTime.setter
    def LatestImageScanTime(self, LatestImageScanTime):
        self._LatestImageScanTime = LatestImageScanTime

    @property
    def ImageUnsafeCnt(self):
        r"""Number of images at risk
        :rtype: int
        """
        return self._ImageUnsafeCnt

    @ImageUnsafeCnt.setter
    def ImageUnsafeCnt(self, ImageUnsafeCnt):
        self._ImageUnsafeCnt = ImageUnsafeCnt

    @property
    def HostUnInstallCnt(self):
        r"""Number of servers not installed with the agent
        :rtype: int
        """
        return self._HostUnInstallCnt

    @HostUnInstallCnt.setter
    def HostUnInstallCnt(self, HostUnInstallCnt):
        self._HostUnInstallCnt = HostUnInstallCnt

    @property
    def SuperNodeCnt(self):
        r"""Number of super nodes
        :rtype: int
        """
        return self._SuperNodeCnt

    @SuperNodeCnt.setter
    def SuperNodeCnt(self, SuperNodeCnt):
        self._SuperNodeCnt = SuperNodeCnt

    @property
    def SuperNodeRunningCnt(self):
        r"""Number of running super nodes
        :rtype: int
        """
        return self._SuperNodeRunningCnt

    @SuperNodeRunningCnt.setter
    def SuperNodeRunningCnt(self, SuperNodeRunningCnt):
        self._SuperNodeRunningCnt = SuperNodeRunningCnt

    @property
    def TodayNewImageCnt(self):
        r"""
        :rtype: int
        """
        return self._TodayNewImageCnt

    @TodayNewImageCnt.setter
    def TodayNewImageCnt(self, TodayNewImageCnt):
        self._TodayNewImageCnt = TodayNewImageCnt

    @property
    def TodayUnsafeImageCnt(self):
        r"""
        :rtype: int
        """
        return self._TodayUnsafeImageCnt

    @TodayUnsafeImageCnt.setter
    def TodayUnsafeImageCnt(self, TodayUnsafeImageCnt):
        self._TodayUnsafeImageCnt = TodayUnsafeImageCnt

    @property
    def RecommendedFixImageCnt(self):
        r"""
        :rtype: int
        """
        return self._RecommendedFixImageCnt

    @RecommendedFixImageCnt.setter
    def RecommendedFixImageCnt(self, RecommendedFixImageCnt):
        self._RecommendedFixImageCnt = RecommendedFixImageCnt

    @property
    def ScannedImageCnt(self):
        r"""
        :rtype: int
        """
        return self._ScannedImageCnt

    @ScannedImageCnt.setter
    def ScannedImageCnt(self, ScannedImageCnt):
        self._ScannedImageCnt = ScannedImageCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AppCnt = params.get("AppCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._ContainerPause = params.get("ContainerPause")
        self._ContainerRunning = params.get("ContainerRunning")
        self._ContainerStop = params.get("ContainerStop")
        self._CreateTime = params.get("CreateTime")
        self._DbCnt = params.get("DbCnt")
        self._ImageCnt = params.get("ImageCnt")
        self._HostOnline = params.get("HostOnline")
        self._HostCnt = params.get("HostCnt")
        self._ImageHasRiskInfoCnt = params.get("ImageHasRiskInfoCnt")
        self._ImageHasVirusCnt = params.get("ImageHasVirusCnt")
        self._ImageHasVulsCnt = params.get("ImageHasVulsCnt")
        self._ImageUntrustCnt = params.get("ImageUntrustCnt")
        self._ListenPortCnt = params.get("ListenPortCnt")
        self._ProcessCnt = params.get("ProcessCnt")
        self._WebServiceCnt = params.get("WebServiceCnt")
        self._LatestImageScanTime = params.get("LatestImageScanTime")
        self._ImageUnsafeCnt = params.get("ImageUnsafeCnt")
        self._HostUnInstallCnt = params.get("HostUnInstallCnt")
        self._SuperNodeCnt = params.get("SuperNodeCnt")
        self._SuperNodeRunningCnt = params.get("SuperNodeRunningCnt")
        self._TodayNewImageCnt = params.get("TodayNewImageCnt")
        self._TodayUnsafeImageCnt = params.get("TodayUnsafeImageCnt")
        self._RecommendedFixImageCnt = params.get("RecommendedFixImageCnt")
        self._ScannedImageCnt = params.get("ScannedImageCnt")
        self._RequestId = params.get("RequestId")


class DescribeAssetSyncLastTimeRequest(AbstractModel):
    r"""DescribeAssetSyncLastTime request structure.

    """


class DescribeAssetSyncLastTimeResponse(AbstractModel):
    r"""DescribeAssetSyncLastTime response structure.

    """

    def __init__(self):
        r"""
        :param _AssetSyncLastTime: Last asset sync time
        :type AssetSyncLastTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AssetSyncLastTime = None
        self._RequestId = None

    @property
    def AssetSyncLastTime(self):
        r"""Last asset sync time
        :rtype: str
        """
        return self._AssetSyncLastTime

    @AssetSyncLastTime.setter
    def AssetSyncLastTime(self, AssetSyncLastTime):
        self._AssetSyncLastTime = AssetSyncLastTime

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AssetSyncLastTime = params.get("AssetSyncLastTime")
        self._RequestId = params.get("RequestId")


class DescribeAssetWebServiceListRequest(AbstractModel):
    r"""DescribeAssetWebServiceList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
<li>Type- String - Required: No - Server status. "Apache"
"Jboss"
"lighttpd"
"Nginx"
"Tomcat"</li>
        :type Filters: list of AssetFilters
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Keywords- String - Required: No - Optional field for the fuzzy query</li>
<li>Type- String - Required: No - Server status. "Apache"
"Jboss"
"lighttpd"
"Nginx"
"Tomcat"</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAssetWebServiceListResponse(AbstractModel):
    r"""DescribeAssetWebServiceList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of servers
        :type List: list of ServiceInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of servers
        :rtype: list of ServiceInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ServiceInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoAuthorizedRuleHostRequest(AbstractModel):
    r"""DescribeAutoAuthorizedRuleHost request structure.

    """

    def __init__(self):
        r"""
        :param _RuleId: Rule ID
        :type RuleId: int
        :param _Limit: Number of results to be returned. Default value: `all`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting field
        :type Order: str
        :param _By: Sorting order. Valid values: `asc`, `desc`.
        :type By: str
        """
        self._RuleId = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def RuleId(self):
        r"""Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `all`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting field
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._RuleId = params.get("RuleId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoAuthorizedRuleHostResponse(AbstractModel):
    r"""DescribeAutoAuthorizedRuleHost response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of servers licensed based on the automatic image licensing rule
        :type List: list of AutoAuthorizedRuleHostInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of servers licensed based on the automatic image licensing rule
        :rtype: list of AutoAuthorizedRuleHostInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AutoAuthorizedRuleHostInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeCheckItemListRequest(AbstractModel):
    r"""DescribeCheckItemList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name. Valid values: `risk_level` (risk level); `risk_target` (check target and risky target); `risk_type` (risk type); `risk_attri` (risk type of the check item).
        :type Filters: list of ComplianceFilters
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name. Valid values: `risk_level` (risk level); `risk_target` (check target and risky target); `risk_type` (risk type); `risk_attri` (risk type of the check item).
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCheckItemListResponse(AbstractModel):
    r"""DescribeCheckItemList response structure.

    """

    def __init__(self):
        r"""
        :param _ClusterCheckItems: Array of check item details
        :type ClusterCheckItems: list of ClusterCheckItem
        :param _TotalCount: Total number of check items
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ClusterCheckItems = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ClusterCheckItems(self):
        r"""Array of check item details
        :rtype: list of ClusterCheckItem
        """
        return self._ClusterCheckItems

    @ClusterCheckItems.setter
    def ClusterCheckItems(self, ClusterCheckItems):
        self._ClusterCheckItems = ClusterCheckItems

    @property
    def TotalCount(self):
        r"""Total number of check items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ClusterCheckItems") is not None:
            self._ClusterCheckItems = []
            for item in params.get("ClusterCheckItems"):
                obj = ClusterCheckItem()
                obj._deserialize(item)
                self._ClusterCheckItems.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeClusterDetailRequest(AbstractModel):
    r"""DescribeClusterDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        """
        self._ClusterId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeClusterDetailResponse(AbstractModel):
    r"""DescribeClusterDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _ScanTaskProgress: Progress of the current cluster scan task. `100` indicates that the scan is completed.
        :type ScanTaskProgress: int
        :param _ClusterVersion: Cluster version
        :type ClusterVersion: str
        :param _ContainerRuntime: Runtime component
        :type ContainerRuntime: str
        :param _ClusterNodeNum: Number of nodes in the cluster
        :type ClusterNodeNum: int
        :param _ClusterStatus: Cluster status. Valid values: `Running`, `Creating`, `Abnormal`.
        :type ClusterStatus: str
        :param _ClusterType: Cluster type. Valid values: `MANAGED_CLUSTER` (managed cluster); `INDEPENDENT_CLUSTER` (self-deployed cluster).
        :type ClusterType: str
        :param _Region: Cluster region
        :type Region: str
        :param _SeriousRiskCount: Number of critical check items
        :type SeriousRiskCount: int
        :param _HighRiskCount: Number of high-risk check items
        :type HighRiskCount: int
        :param _MiddleRiskCount: Number of medium-risk check items
        :type MiddleRiskCount: int
        :param _HintRiskCount: Number of prompt-risk check items
        :type HintRiskCount: int
        :param _CheckStatus: Status of the check task
        :type CheckStatus: str
        :param _DefenderStatus: Status of the defender
        :type DefenderStatus: str
        :param _TaskCreateTime: Creation time of the scan task
        :type TaskCreateTime: str
        :param _NetworkType: Network type. Valid values: `PublicNetwork` (public network); `VPCNetwork` (VPC).
        :type NetworkType: str
        :param _ApiServerAddress: API server address
        :type ApiServerAddress: str
        :param _NodeCount: Number of nodes
        :type NodeCount: int
        :param _NamespaceCount: Number of namespaces
        :type NamespaceCount: int
        :param _WorkloadCount: Number of workloads
        :type WorkloadCount: int
        :param _PodCount: Number of Pods
        :type PodCount: int
        :param _ServiceCount: Number of Services
        :type ServiceCount: int
        :param _IngressCount: Number of Ingresses
        :type IngressCount: int
        :param _MasterIps: IPs of the primary nodes
        :type MasterIps: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ClusterId = None
        self._ClusterName = None
        self._ScanTaskProgress = None
        self._ClusterVersion = None
        self._ContainerRuntime = None
        self._ClusterNodeNum = None
        self._ClusterStatus = None
        self._ClusterType = None
        self._Region = None
        self._SeriousRiskCount = None
        self._HighRiskCount = None
        self._MiddleRiskCount = None
        self._HintRiskCount = None
        self._CheckStatus = None
        self._DefenderStatus = None
        self._TaskCreateTime = None
        self._NetworkType = None
        self._ApiServerAddress = None
        self._NodeCount = None
        self._NamespaceCount = None
        self._WorkloadCount = None
        self._PodCount = None
        self._ServiceCount = None
        self._IngressCount = None
        self._MasterIps = None
        self._RequestId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ScanTaskProgress(self):
        r"""Progress of the current cluster scan task. `100` indicates that the scan is completed.
        :rtype: int
        """
        return self._ScanTaskProgress

    @ScanTaskProgress.setter
    def ScanTaskProgress(self, ScanTaskProgress):
        self._ScanTaskProgress = ScanTaskProgress

    @property
    def ClusterVersion(self):
        r"""Cluster version
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def ContainerRuntime(self):
        r"""Runtime component
        :rtype: str
        """
        return self._ContainerRuntime

    @ContainerRuntime.setter
    def ContainerRuntime(self, ContainerRuntime):
        self._ContainerRuntime = ContainerRuntime

    @property
    def ClusterNodeNum(self):
        r"""Number of nodes in the cluster
        :rtype: int
        """
        return self._ClusterNodeNum

    @ClusterNodeNum.setter
    def ClusterNodeNum(self, ClusterNodeNum):
        self._ClusterNodeNum = ClusterNodeNum

    @property
    def ClusterStatus(self):
        r"""Cluster status. Valid values: `Running`, `Creating`, `Abnormal`.
        :rtype: str
        """
        return self._ClusterStatus

    @ClusterStatus.setter
    def ClusterStatus(self, ClusterStatus):
        self._ClusterStatus = ClusterStatus

    @property
    def ClusterType(self):
        r"""Cluster type. Valid values: `MANAGED_CLUSTER` (managed cluster); `INDEPENDENT_CLUSTER` (self-deployed cluster).
        :rtype: str
        """
        return self._ClusterType

    @ClusterType.setter
    def ClusterType(self, ClusterType):
        self._ClusterType = ClusterType

    @property
    def Region(self):
        r"""Cluster region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def SeriousRiskCount(self):
        r"""Number of critical check items
        :rtype: int
        """
        return self._SeriousRiskCount

    @SeriousRiskCount.setter
    def SeriousRiskCount(self, SeriousRiskCount):
        self._SeriousRiskCount = SeriousRiskCount

    @property
    def HighRiskCount(self):
        r"""Number of high-risk check items
        :rtype: int
        """
        return self._HighRiskCount

    @HighRiskCount.setter
    def HighRiskCount(self, HighRiskCount):
        self._HighRiskCount = HighRiskCount

    @property
    def MiddleRiskCount(self):
        r"""Number of medium-risk check items
        :rtype: int
        """
        return self._MiddleRiskCount

    @MiddleRiskCount.setter
    def MiddleRiskCount(self, MiddleRiskCount):
        self._MiddleRiskCount = MiddleRiskCount

    @property
    def HintRiskCount(self):
        r"""Number of prompt-risk check items
        :rtype: int
        """
        return self._HintRiskCount

    @HintRiskCount.setter
    def HintRiskCount(self, HintRiskCount):
        self._HintRiskCount = HintRiskCount

    @property
    def CheckStatus(self):
        r"""Status of the check task
        :rtype: str
        """
        return self._CheckStatus

    @CheckStatus.setter
    def CheckStatus(self, CheckStatus):
        self._CheckStatus = CheckStatus

    @property
    def DefenderStatus(self):
        r"""Status of the defender
        :rtype: str
        """
        return self._DefenderStatus

    @DefenderStatus.setter
    def DefenderStatus(self, DefenderStatus):
        self._DefenderStatus = DefenderStatus

    @property
    def TaskCreateTime(self):
        r"""Creation time of the scan task
        :rtype: str
        """
        return self._TaskCreateTime

    @TaskCreateTime.setter
    def TaskCreateTime(self, TaskCreateTime):
        self._TaskCreateTime = TaskCreateTime

    @property
    def NetworkType(self):
        r"""Network type. Valid values: `PublicNetwork` (public network); `VPCNetwork` (VPC).
        :rtype: str
        """
        return self._NetworkType

    @NetworkType.setter
    def NetworkType(self, NetworkType):
        self._NetworkType = NetworkType

    @property
    def ApiServerAddress(self):
        r"""API server address
        :rtype: str
        """
        return self._ApiServerAddress

    @ApiServerAddress.setter
    def ApiServerAddress(self, ApiServerAddress):
        self._ApiServerAddress = ApiServerAddress

    @property
    def NodeCount(self):
        r"""Number of nodes
        :rtype: int
        """
        return self._NodeCount

    @NodeCount.setter
    def NodeCount(self, NodeCount):
        self._NodeCount = NodeCount

    @property
    def NamespaceCount(self):
        r"""Number of namespaces
        :rtype: int
        """
        return self._NamespaceCount

    @NamespaceCount.setter
    def NamespaceCount(self, NamespaceCount):
        self._NamespaceCount = NamespaceCount

    @property
    def WorkloadCount(self):
        r"""Number of workloads
        :rtype: int
        """
        return self._WorkloadCount

    @WorkloadCount.setter
    def WorkloadCount(self, WorkloadCount):
        self._WorkloadCount = WorkloadCount

    @property
    def PodCount(self):
        r"""Number of Pods
        :rtype: int
        """
        return self._PodCount

    @PodCount.setter
    def PodCount(self, PodCount):
        self._PodCount = PodCount

    @property
    def ServiceCount(self):
        r"""Number of Services
        :rtype: int
        """
        return self._ServiceCount

    @ServiceCount.setter
    def ServiceCount(self, ServiceCount):
        self._ServiceCount = ServiceCount

    @property
    def IngressCount(self):
        r"""Number of Ingresses
        :rtype: int
        """
        return self._IngressCount

    @IngressCount.setter
    def IngressCount(self, IngressCount):
        self._IngressCount = IngressCount

    @property
    def MasterIps(self):
        r"""IPs of the primary nodes
        :rtype: str
        """
        return self._MasterIps

    @MasterIps.setter
    def MasterIps(self, MasterIps):
        self._MasterIps = MasterIps

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._ScanTaskProgress = params.get("ScanTaskProgress")
        self._ClusterVersion = params.get("ClusterVersion")
        self._ContainerRuntime = params.get("ContainerRuntime")
        self._ClusterNodeNum = params.get("ClusterNodeNum")
        self._ClusterStatus = params.get("ClusterStatus")
        self._ClusterType = params.get("ClusterType")
        self._Region = params.get("Region")
        self._SeriousRiskCount = params.get("SeriousRiskCount")
        self._HighRiskCount = params.get("HighRiskCount")
        self._MiddleRiskCount = params.get("MiddleRiskCount")
        self._HintRiskCount = params.get("HintRiskCount")
        self._CheckStatus = params.get("CheckStatus")
        self._DefenderStatus = params.get("DefenderStatus")
        self._TaskCreateTime = params.get("TaskCreateTime")
        self._NetworkType = params.get("NetworkType")
        self._ApiServerAddress = params.get("ApiServerAddress")
        self._NodeCount = params.get("NodeCount")
        self._NamespaceCount = params.get("NamespaceCount")
        self._WorkloadCount = params.get("WorkloadCount")
        self._PodCount = params.get("PodCount")
        self._ServiceCount = params.get("ServiceCount")
        self._IngressCount = params.get("IngressCount")
        self._MasterIps = params.get("MasterIps")
        self._RequestId = params.get("RequestId")


class DescribeClusterSummaryRequest(AbstractModel):
    r"""DescribeClusterSummary request structure.

    """


class DescribeClusterSummaryResponse(AbstractModel):
    r"""DescribeClusterSummary response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _RiskClusterCount: Number of clusters at risk
        :type RiskClusterCount: int
        :param _UncheckClusterCount: Number of clusters not checked
        :type UncheckClusterCount: int
        :param _ManagedClusterCount: Number of managed clusters
        :type ManagedClusterCount: int
        :param _IndependentClusterCount: Number of self-deployed clusters
        :type IndependentClusterCount: int
        :param _NoRiskClusterCount: Number of clusters involving no risks
        :type NoRiskClusterCount: int
        :param _CheckedClusterCount: Number of checked clusters
        :type CheckedClusterCount: int
        :param _AutoCheckClusterCount: Number of clusters automatically checked
        :type AutoCheckClusterCount: int
        :param _ManualCheckClusterCount: Number of clusters manually checked
        :type ManualCheckClusterCount: int
        :param _FailedClusterCount: Number of clusters that failed the check
        :type FailedClusterCount: int
        :param _NotImportedClusterCount: Number of clusters not imported
        :type NotImportedClusterCount: int
        :param _ServerlessClusterCount: Number of EKS clusters
        :type ServerlessClusterCount: int
        :param _TkeClusterCount: 
        :type TkeClusterCount: int
        :param _UserCreateTencentClusterCount: 
        :type UserCreateTencentClusterCount: int
        :param _UserCreateHybridClusterCount: 
        :type UserCreateHybridClusterCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._RiskClusterCount = None
        self._UncheckClusterCount = None
        self._ManagedClusterCount = None
        self._IndependentClusterCount = None
        self._NoRiskClusterCount = None
        self._CheckedClusterCount = None
        self._AutoCheckClusterCount = None
        self._ManualCheckClusterCount = None
        self._FailedClusterCount = None
        self._NotImportedClusterCount = None
        self._ServerlessClusterCount = None
        self._TkeClusterCount = None
        self._UserCreateTencentClusterCount = None
        self._UserCreateHybridClusterCount = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RiskClusterCount(self):
        r"""Number of clusters at risk
        :rtype: int
        """
        return self._RiskClusterCount

    @RiskClusterCount.setter
    def RiskClusterCount(self, RiskClusterCount):
        self._RiskClusterCount = RiskClusterCount

    @property
    def UncheckClusterCount(self):
        r"""Number of clusters not checked
        :rtype: int
        """
        return self._UncheckClusterCount

    @UncheckClusterCount.setter
    def UncheckClusterCount(self, UncheckClusterCount):
        self._UncheckClusterCount = UncheckClusterCount

    @property
    def ManagedClusterCount(self):
        r"""Number of managed clusters
        :rtype: int
        """
        return self._ManagedClusterCount

    @ManagedClusterCount.setter
    def ManagedClusterCount(self, ManagedClusterCount):
        self._ManagedClusterCount = ManagedClusterCount

    @property
    def IndependentClusterCount(self):
        r"""Number of self-deployed clusters
        :rtype: int
        """
        return self._IndependentClusterCount

    @IndependentClusterCount.setter
    def IndependentClusterCount(self, IndependentClusterCount):
        self._IndependentClusterCount = IndependentClusterCount

    @property
    def NoRiskClusterCount(self):
        r"""Number of clusters involving no risks
        :rtype: int
        """
        return self._NoRiskClusterCount

    @NoRiskClusterCount.setter
    def NoRiskClusterCount(self, NoRiskClusterCount):
        self._NoRiskClusterCount = NoRiskClusterCount

    @property
    def CheckedClusterCount(self):
        r"""Number of checked clusters
        :rtype: int
        """
        return self._CheckedClusterCount

    @CheckedClusterCount.setter
    def CheckedClusterCount(self, CheckedClusterCount):
        self._CheckedClusterCount = CheckedClusterCount

    @property
    def AutoCheckClusterCount(self):
        r"""Number of clusters automatically checked
        :rtype: int
        """
        return self._AutoCheckClusterCount

    @AutoCheckClusterCount.setter
    def AutoCheckClusterCount(self, AutoCheckClusterCount):
        self._AutoCheckClusterCount = AutoCheckClusterCount

    @property
    def ManualCheckClusterCount(self):
        r"""Number of clusters manually checked
        :rtype: int
        """
        return self._ManualCheckClusterCount

    @ManualCheckClusterCount.setter
    def ManualCheckClusterCount(self, ManualCheckClusterCount):
        self._ManualCheckClusterCount = ManualCheckClusterCount

    @property
    def FailedClusterCount(self):
        r"""Number of clusters that failed the check
        :rtype: int
        """
        return self._FailedClusterCount

    @FailedClusterCount.setter
    def FailedClusterCount(self, FailedClusterCount):
        self._FailedClusterCount = FailedClusterCount

    @property
    def NotImportedClusterCount(self):
        r"""Number of clusters not imported
        :rtype: int
        """
        return self._NotImportedClusterCount

    @NotImportedClusterCount.setter
    def NotImportedClusterCount(self, NotImportedClusterCount):
        self._NotImportedClusterCount = NotImportedClusterCount

    @property
    def ServerlessClusterCount(self):
        r"""Number of EKS clusters
        :rtype: int
        """
        return self._ServerlessClusterCount

    @ServerlessClusterCount.setter
    def ServerlessClusterCount(self, ServerlessClusterCount):
        self._ServerlessClusterCount = ServerlessClusterCount

    @property
    def TkeClusterCount(self):
        r"""
        :rtype: int
        """
        return self._TkeClusterCount

    @TkeClusterCount.setter
    def TkeClusterCount(self, TkeClusterCount):
        self._TkeClusterCount = TkeClusterCount

    @property
    def UserCreateTencentClusterCount(self):
        r"""
        :rtype: int
        """
        return self._UserCreateTencentClusterCount

    @UserCreateTencentClusterCount.setter
    def UserCreateTencentClusterCount(self, UserCreateTencentClusterCount):
        self._UserCreateTencentClusterCount = UserCreateTencentClusterCount

    @property
    def UserCreateHybridClusterCount(self):
        r"""
        :rtype: int
        """
        return self._UserCreateHybridClusterCount

    @UserCreateHybridClusterCount.setter
    def UserCreateHybridClusterCount(self, UserCreateHybridClusterCount):
        self._UserCreateHybridClusterCount = UserCreateHybridClusterCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._RiskClusterCount = params.get("RiskClusterCount")
        self._UncheckClusterCount = params.get("UncheckClusterCount")
        self._ManagedClusterCount = params.get("ManagedClusterCount")
        self._IndependentClusterCount = params.get("IndependentClusterCount")
        self._NoRiskClusterCount = params.get("NoRiskClusterCount")
        self._CheckedClusterCount = params.get("CheckedClusterCount")
        self._AutoCheckClusterCount = params.get("AutoCheckClusterCount")
        self._ManualCheckClusterCount = params.get("ManualCheckClusterCount")
        self._FailedClusterCount = params.get("FailedClusterCount")
        self._NotImportedClusterCount = params.get("NotImportedClusterCount")
        self._ServerlessClusterCount = params.get("ServerlessClusterCount")
        self._TkeClusterCount = params.get("TkeClusterCount")
        self._UserCreateTencentClusterCount = params.get("UserCreateTencentClusterCount")
        self._UserCreateHybridClusterCount = params.get("UserCreateHybridClusterCount")
        self._RequestId = params.get("RequestId")


class DescribeComplianceAssetDetailInfoRequest(AbstractModel):
    r"""DescribeComplianceAssetDetailInfo request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Customer asset ID
        :type CustomerAssetId: int
        """
        self._CustomerAssetId = None

    @property
    def CustomerAssetId(self):
        r"""Customer asset ID
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceAssetDetailInfoResponse(AbstractModel):
    r"""DescribeComplianceAssetDetailInfo response structure.

    """

    def __init__(self):
        r"""
        :param _AssetDetailInfo: Asset details
        :type AssetDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ComplianceAssetDetailInfo`
        :param _ContainerDetailInfo: This field is returned when the asset is a container.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ComplianceContainerDetailInfo`
        :param _ImageDetailInfo: This field is returned when the asset is an image.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ComplianceImageDetailInfo`
        :param _HostDetailInfo: This field is returned when the asset is a server.
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ComplianceHostDetailInfo`
        :param _K8SDetailInfo: This field is returned when the asset is a K8s asset.
Note: This field may return null, indicating that no valid values can be obtained.
        :type K8SDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ComplianceK8SDetailInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AssetDetailInfo = None
        self._ContainerDetailInfo = None
        self._ImageDetailInfo = None
        self._HostDetailInfo = None
        self._K8SDetailInfo = None
        self._RequestId = None

    @property
    def AssetDetailInfo(self):
        r"""Asset details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ComplianceAssetDetailInfo`
        """
        return self._AssetDetailInfo

    @AssetDetailInfo.setter
    def AssetDetailInfo(self, AssetDetailInfo):
        self._AssetDetailInfo = AssetDetailInfo

    @property
    def ContainerDetailInfo(self):
        r"""This field is returned when the asset is a container.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ComplianceContainerDetailInfo`
        """
        return self._ContainerDetailInfo

    @ContainerDetailInfo.setter
    def ContainerDetailInfo(self, ContainerDetailInfo):
        self._ContainerDetailInfo = ContainerDetailInfo

    @property
    def ImageDetailInfo(self):
        r"""This field is returned when the asset is an image.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ComplianceImageDetailInfo`
        """
        return self._ImageDetailInfo

    @ImageDetailInfo.setter
    def ImageDetailInfo(self, ImageDetailInfo):
        self._ImageDetailInfo = ImageDetailInfo

    @property
    def HostDetailInfo(self):
        r"""This field is returned when the asset is a server.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ComplianceHostDetailInfo`
        """
        return self._HostDetailInfo

    @HostDetailInfo.setter
    def HostDetailInfo(self, HostDetailInfo):
        self._HostDetailInfo = HostDetailInfo

    @property
    def K8SDetailInfo(self):
        r"""This field is returned when the asset is a K8s asset.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ComplianceK8SDetailInfo`
        """
        return self._K8SDetailInfo

    @K8SDetailInfo.setter
    def K8SDetailInfo(self, K8SDetailInfo):
        self._K8SDetailInfo = K8SDetailInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AssetDetailInfo") is not None:
            self._AssetDetailInfo = ComplianceAssetDetailInfo()
            self._AssetDetailInfo._deserialize(params.get("AssetDetailInfo"))
        if params.get("ContainerDetailInfo") is not None:
            self._ContainerDetailInfo = ComplianceContainerDetailInfo()
            self._ContainerDetailInfo._deserialize(params.get("ContainerDetailInfo"))
        if params.get("ImageDetailInfo") is not None:
            self._ImageDetailInfo = ComplianceImageDetailInfo()
            self._ImageDetailInfo._deserialize(params.get("ImageDetailInfo"))
        if params.get("HostDetailInfo") is not None:
            self._HostDetailInfo = ComplianceHostDetailInfo()
            self._HostDetailInfo._deserialize(params.get("HostDetailInfo"))
        if params.get("K8SDetailInfo") is not None:
            self._K8SDetailInfo = ComplianceK8SDetailInfo()
            self._K8SDetailInfo._deserialize(params.get("K8SDetailInfo"))
        self._RequestId = params.get("RequestId")


class DescribeComplianceAssetListRequest(AbstractModel):
    r"""DescribeComplianceAssetList request structure.

    """

    def __init__(self):
        r"""
        :param _AssetTypeSet: List of asset types
        :type AssetTypeSet: list of str
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Query filter
        :type Filters: list of ComplianceFilters
        """
        self._AssetTypeSet = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def AssetTypeSet(self):
        r"""List of asset types
        :rtype: list of str
        """
        return self._AssetTypeSet

    @AssetTypeSet.setter
    def AssetTypeSet(self, AssetTypeSet):
        self._AssetTypeSet = AssetTypeSet

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Query filter
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._AssetTypeSet = params.get("AssetTypeSet")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceAssetListResponse(AbstractModel):
    r"""DescribeComplianceAssetList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of assets
        :type TotalCount: int
        :param _AssetInfoList: List of assets
Note: This field may return null, indicating that no valid values can be obtained.
        :type AssetInfoList: list of ComplianceAssetInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AssetInfoList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of assets
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AssetInfoList(self):
        r"""List of assets
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ComplianceAssetInfo
        """
        return self._AssetInfoList

    @AssetInfoList.setter
    def AssetInfoList(self, AssetInfoList):
        self._AssetInfoList = AssetInfoList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AssetInfoList") is not None:
            self._AssetInfoList = []
            for item in params.get("AssetInfoList"):
                obj = ComplianceAssetInfo()
                obj._deserialize(item)
                self._AssetInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComplianceAssetPolicyItemListRequest(AbstractModel):
    r"""DescribeComplianceAssetPolicyItemList request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerAssetId: Customer asset ID
        :type CustomerAssetId: int
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be obtained. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Filter list, which is supported by the `Name` field.
RiskLevel
        :type Filters: list of ComplianceFilters
        """
        self._CustomerAssetId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def CustomerAssetId(self):
        r"""Customer asset ID
        :rtype: int
        """
        return self._CustomerAssetId

    @CustomerAssetId.setter
    def CustomerAssetId(self, CustomerAssetId):
        self._CustomerAssetId = CustomerAssetId

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be obtained. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Filter list, which is supported by the `Name` field.
RiskLevel
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._CustomerAssetId = params.get("CustomerAssetId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceAssetPolicyItemListResponse(AbstractModel):
    r"""DescribeComplianceAssetPolicyItemList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of check items, which is `0` if the baseline check is not enabled.
        :type TotalCount: int
        :param _AssetPolicyItemList: List of check items of an asset
        :type AssetPolicyItemList: list of ComplianceAssetPolicyItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AssetPolicyItemList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of check items, which is `0` if the baseline check is not enabled.
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AssetPolicyItemList(self):
        r"""List of check items of an asset
        :rtype: list of ComplianceAssetPolicyItem
        """
        return self._AssetPolicyItemList

    @AssetPolicyItemList.setter
    def AssetPolicyItemList(self, AssetPolicyItemList):
        self._AssetPolicyItemList = AssetPolicyItemList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AssetPolicyItemList") is not None:
            self._AssetPolicyItemList = []
            for item in params.get("AssetPolicyItemList"):
                obj = ComplianceAssetPolicyItem()
                obj._deserialize(item)
                self._AssetPolicyItemList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeCompliancePeriodTaskListRequest(AbstractModel):
    r"""DescribeCompliancePeriodTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _AssetType: Asset type. Valid values:
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :type AssetType: str
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        """
        self._AssetType = None
        self._Offset = None
        self._Limit = None

    @property
    def AssetType(self):
        r"""Asset type. Valid values:
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._AssetType = params.get("AssetType")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCompliancePeriodTaskListResponse(AbstractModel):
    r"""DescribeCompliancePeriodTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of scheduled tasks
        :type TotalCount: int
        :param _PeriodTaskSet: List of scheduled task information
        :type PeriodTaskSet: list of CompliancePeriodTask
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._PeriodTaskSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of scheduled tasks
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PeriodTaskSet(self):
        r"""List of scheduled task information
        :rtype: list of CompliancePeriodTask
        """
        return self._PeriodTaskSet

    @PeriodTaskSet.setter
    def PeriodTaskSet(self, PeriodTaskSet):
        self._PeriodTaskSet = PeriodTaskSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PeriodTaskSet") is not None:
            self._PeriodTaskSet = []
            for item in params.get("PeriodTaskSet"):
                obj = CompliancePeriodTask()
                obj._deserialize(item)
                self._PeriodTaskSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeCompliancePolicyItemAffectedAssetListRequest(AbstractModel):
    r"""DescribeCompliancePolicyItemAffectedAssetList request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: `CustomerPolicyItemId` returned by `DescribeComplianceTaskPolicyItemSummaryList`, which indicates the check item ID.
        :type CustomerPolicyItemId: int
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Filter
Name - String
Name. Valid values: `NodeName`, `CheckResult`.
        :type Filters: list of ComplianceFilters
        """
        self._CustomerPolicyItemId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def CustomerPolicyItemId(self):
        r"""`CustomerPolicyItemId` returned by `DescribeComplianceTaskPolicyItemSummaryList`, which indicates the check item ID.
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Filter
Name - String
Name. Valid values: `NodeName`, `CheckResult`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCompliancePolicyItemAffectedAssetListResponse(AbstractModel):
    r"""DescribeCompliancePolicyItemAffectedAssetList response structure.

    """

    def __init__(self):
        r"""
        :param _AffectedAssetList: List of assets affected by each check item
        :type AffectedAssetList: list of ComplianceAffectedAsset
        :param _TotalCount: Total number of assets affected by the check item
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AffectedAssetList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AffectedAssetList(self):
        r"""List of assets affected by each check item
        :rtype: list of ComplianceAffectedAsset
        """
        return self._AffectedAssetList

    @AffectedAssetList.setter
    def AffectedAssetList(self, AffectedAssetList):
        self._AffectedAssetList = AffectedAssetList

    @property
    def TotalCount(self):
        r"""Total number of assets affected by the check item
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AffectedAssetList") is not None:
            self._AffectedAssetList = []
            for item in params.get("AffectedAssetList"):
                obj = ComplianceAffectedAsset()
                obj._deserialize(item)
                self._AffectedAssetList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeCompliancePolicyItemAffectedSummaryRequest(AbstractModel):
    r"""DescribeCompliancePolicyItemAffectedSummary request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: `CustomerPolicyItemId` returned by `DescribeComplianceTaskPolicyItemSummaryList`, which indicates the check item ID.
        :type CustomerPolicyItemId: int
        """
        self._CustomerPolicyItemId = None

    @property
    def CustomerPolicyItemId(self):
        r"""`CustomerPolicyItemId` returned by `DescribeComplianceTaskPolicyItemSummaryList`, which indicates the check item ID.
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCompliancePolicyItemAffectedSummaryResponse(AbstractModel):
    r"""DescribeCompliancePolicyItemAffectedSummary response structure.

    """

    def __init__(self):
        r"""
        :param _PolicyItemSummary: Aggregated information of the assets affected by each check item
        :type PolicyItemSummary: :class:`tencentcloud.tcss.v20201101.models.CompliancePolicyItemSummary`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PolicyItemSummary = None
        self._RequestId = None

    @property
    def PolicyItemSummary(self):
        r"""Aggregated information of the assets affected by each check item
        :rtype: :class:`tencentcloud.tcss.v20201101.models.CompliancePolicyItemSummary`
        """
        return self._PolicyItemSummary

    @PolicyItemSummary.setter
    def PolicyItemSummary(self, PolicyItemSummary):
        self._PolicyItemSummary = PolicyItemSummary

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("PolicyItemSummary") is not None:
            self._PolicyItemSummary = CompliancePolicyItemSummary()
            self._PolicyItemSummary._deserialize(params.get("PolicyItemSummary"))
        self._RequestId = params.get("RequestId")


class DescribeComplianceScanFailedAssetListRequest(AbstractModel):
    r"""DescribeComplianceScanFailedAssetList request structure.

    """

    def __init__(self):
        r"""
        :param _AssetTypeSet: List of asset types
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :type AssetTypeSet: list of str
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Query filter
        :type Filters: list of ComplianceFilters
        """
        self._AssetTypeSet = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def AssetTypeSet(self):
        r"""List of asset types
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :rtype: list of str
        """
        return self._AssetTypeSet

    @AssetTypeSet.setter
    def AssetTypeSet(self, AssetTypeSet):
        self._AssetTypeSet = AssetTypeSet

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Query filter
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._AssetTypeSet = params.get("AssetTypeSet")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceScanFailedAssetListResponse(AbstractModel):
    r"""DescribeComplianceScanFailedAssetList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of assets that failed the check
        :type TotalCount: int
        :param _ScanFailedAssetList: List of aggregated information of each type of asset that failed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanFailedAssetList: list of ComplianceScanFailedAsset
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ScanFailedAssetList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of assets that failed the check
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ScanFailedAssetList(self):
        r"""List of aggregated information of each type of asset that failed the check
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ComplianceScanFailedAsset
        """
        return self._ScanFailedAssetList

    @ScanFailedAssetList.setter
    def ScanFailedAssetList(self, ScanFailedAssetList):
        self._ScanFailedAssetList = ScanFailedAssetList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ScanFailedAssetList") is not None:
            self._ScanFailedAssetList = []
            for item in params.get("ScanFailedAssetList"):
                obj = ComplianceScanFailedAsset()
                obj._deserialize(item)
                self._ScanFailedAssetList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComplianceTaskAssetSummaryRequest(AbstractModel):
    r"""DescribeComplianceTaskAssetSummary request structure.

    """

    def __init__(self):
        r"""
        :param _AssetTypeSet: List of asset types
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :type AssetTypeSet: list of str
        """
        self._AssetTypeSet = None

    @property
    def AssetTypeSet(self):
        r"""List of asset types
`ASSET_CONTAINER`: Container.
`ASSET_IMAGE`: Image.
`ASSET_HOST`: Server.
`ASSET_K8S`: K8s asset.
        :rtype: list of str
        """
        return self._AssetTypeSet

    @AssetTypeSet.setter
    def AssetTypeSet(self, AssetTypeSet):
        self._AssetTypeSet = AssetTypeSet


    def _deserialize(self, params):
        self._AssetTypeSet = params.get("AssetTypeSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceTaskAssetSummaryResponse(AbstractModel):
    r"""DescribeComplianceTaskAssetSummary response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Status

`USER_UNINIT`: Not initialized.
`USER_INITIALIZING`: Initializing.
`USER_NORMAL`: Normal.
        :type Status: str
        :param _AssetSummaryList: List of aggregated information of each type of asset
        :type AssetSummaryList: list of ComplianceAssetSummary
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._AssetSummaryList = None
        self._RequestId = None

    @property
    def Status(self):
        r"""Status

`USER_UNINIT`: Not initialized.
`USER_INITIALIZING`: Initializing.
`USER_NORMAL`: Normal.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def AssetSummaryList(self):
        r"""List of aggregated information of each type of asset
        :rtype: list of ComplianceAssetSummary
        """
        return self._AssetSummaryList

    @AssetSummaryList.setter
    def AssetSummaryList(self, AssetSummaryList):
        self._AssetSummaryList = AssetSummaryList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        if params.get("AssetSummaryList") is not None:
            self._AssetSummaryList = []
            for item in params.get("AssetSummaryList"):
                obj = ComplianceAssetSummary()
                obj._deserialize(item)
                self._AssetSummaryList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComplianceTaskPolicyItemSummaryListRequest(AbstractModel):
    r"""DescribeComplianceTaskPolicyItemSummaryList request structure.

    """

    def __init__(self):
        r"""
        :param _AssetType: Asset type, which indicates to only query check items related to the specified asset type.

`ASSET_CONTAINER`: Container.

`ASSET_IMAGE`: Image.

`ASSET_HOST`: Server.

`ASSET_K8S`: K8s asset.
        :type AssetType: str
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Filter
Name - String
Name. Valid values: `ItemType`, `StandardId`, `RiskLevel`.
`ClusterName` is also available for K8s assets.
        :type Filters: list of ComplianceFilters
        """
        self._AssetType = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def AssetType(self):
        r"""Asset type, which indicates to only query check items related to the specified asset type.

`ASSET_CONTAINER`: Container.

`ASSET_IMAGE`: Image.

`ASSET_HOST`: Server.

`ASSET_K8S`: K8s asset.
        :rtype: str
        """
        return self._AssetType

    @AssetType.setter
    def AssetType(self, AssetType):
        self._AssetType = AssetType

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Filter
Name - String
Name. Valid values: `ItemType`, `StandardId`, `RiskLevel`.
`ClusterName` is also available for K8s assets.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._AssetType = params.get("AssetType")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceTaskPolicyItemSummaryListResponse(AbstractModel):
    r"""DescribeComplianceTaskPolicyItemSummaryList response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the last compliance check task, which is the source of the displayed data.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskId: int
        :param _TotalCount: Total number of check items
        :type TotalCount: int
        :param _PolicyItemSummaryList: List of the aggregated information of each check item
        :type PolicyItemSummaryList: list of CompliancePolicyItemSummary
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._TotalCount = None
        self._PolicyItemSummaryList = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the last compliance check task, which is the source of the displayed data.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TotalCount(self):
        r"""Total number of check items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PolicyItemSummaryList(self):
        r"""List of the aggregated information of each check item
        :rtype: list of CompliancePolicyItemSummary
        """
        return self._PolicyItemSummaryList

    @PolicyItemSummaryList.setter
    def PolicyItemSummaryList(self, PolicyItemSummaryList):
        self._PolicyItemSummaryList = PolicyItemSummaryList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TotalCount = params.get("TotalCount")
        if params.get("PolicyItemSummaryList") is not None:
            self._PolicyItemSummaryList = []
            for item in params.get("PolicyItemSummaryList"):
                obj = CompliancePolicyItemSummary()
                obj._deserialize(item)
                self._PolicyItemSummaryList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComplianceWhitelistItemListRequest(AbstractModel):
    r"""DescribeComplianceWhitelistItemList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Initial offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be obtained. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _AssetTypeSet: List of asset types
        :type AssetTypeSet: list of str
        :param _Filters: Query filter
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `desc`, `asc`.
        :type Order: str
        """
        self._Offset = None
        self._Limit = None
        self._AssetTypeSet = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Offset(self):
        r"""Initial offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be obtained. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def AssetTypeSet(self):
        r"""List of asset types
        :rtype: list of str
        """
        return self._AssetTypeSet

    @AssetTypeSet.setter
    def AssetTypeSet(self, AssetTypeSet):
        self._AssetTypeSet = AssetTypeSet

    @property
    def Filters(self):
        r"""Query filter
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `desc`, `asc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._AssetTypeSet = params.get("AssetTypeSet")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComplianceWhitelistItemListResponse(AbstractModel):
    r"""DescribeComplianceWhitelistItemList response structure.

    """

    def __init__(self):
        r"""
        :param _WhitelistItemSet: Allowlist
        :type WhitelistItemSet: list of ComplianceWhitelistItem
        :param _TotalCount: Total number of allowed items
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WhitelistItemSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def WhitelistItemSet(self):
        r"""Allowlist
        :rtype: list of ComplianceWhitelistItem
        """
        return self._WhitelistItemSet

    @WhitelistItemSet.setter
    def WhitelistItemSet(self, WhitelistItemSet):
        self._WhitelistItemSet = WhitelistItemSet

    @property
    def TotalCount(self):
        r"""Total number of allowed items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WhitelistItemSet") is not None:
            self._WhitelistItemSet = []
            for item in params.get("WhitelistItemSet"):
                obj = ComplianceWhitelistItem()
                obj._deserialize(item)
                self._WhitelistItemSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeContainerAssetSummaryRequest(AbstractModel):
    r"""DescribeContainerAssetSummary request structure.

    """


class DescribeContainerAssetSummaryResponse(AbstractModel):
    r"""DescribeContainerAssetSummary response structure.

    """

    def __init__(self):
        r"""
        :param _ContainerTotalCnt: Total number of containers
        :type ContainerTotalCnt: int
        :param _ContainerRunningCnt: Number of running containers
        :type ContainerRunningCnt: int
        :param _ContainerPauseCnt: Number of suspended containers
        :type ContainerPauseCnt: int
        :param _ContainerStopped: Number of stopped containers
        :type ContainerStopped: int
        :param _ImageCnt: Number of local images
        :type ImageCnt: int
        :param _HostCnt: Number of server nodes
        :type HostCnt: int
        :param _HostRunningCnt: Number of running nodes on the server
        :type HostRunningCnt: int
        :param _HostOfflineCnt: Number of offline nodes on the server
        :type HostOfflineCnt: int
        :param _ImageRegistryCnt: Number of image repositories
        :type ImageRegistryCnt: int
        :param _ImageTotalCnt: Total number of images
        :type ImageTotalCnt: int
        :param _HostUnInstallCnt: Number of servers not installed with the agent
        :type HostUnInstallCnt: int
        :param _HostSuperNodeCnt: Number of super nodes
        :type HostSuperNodeCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ContainerTotalCnt = None
        self._ContainerRunningCnt = None
        self._ContainerPauseCnt = None
        self._ContainerStopped = None
        self._ImageCnt = None
        self._HostCnt = None
        self._HostRunningCnt = None
        self._HostOfflineCnt = None
        self._ImageRegistryCnt = None
        self._ImageTotalCnt = None
        self._HostUnInstallCnt = None
        self._HostSuperNodeCnt = None
        self._RequestId = None

    @property
    def ContainerTotalCnt(self):
        r"""Total number of containers
        :rtype: int
        """
        return self._ContainerTotalCnt

    @ContainerTotalCnt.setter
    def ContainerTotalCnt(self, ContainerTotalCnt):
        self._ContainerTotalCnt = ContainerTotalCnt

    @property
    def ContainerRunningCnt(self):
        r"""Number of running containers
        :rtype: int
        """
        return self._ContainerRunningCnt

    @ContainerRunningCnt.setter
    def ContainerRunningCnt(self, ContainerRunningCnt):
        self._ContainerRunningCnt = ContainerRunningCnt

    @property
    def ContainerPauseCnt(self):
        r"""Number of suspended containers
        :rtype: int
        """
        return self._ContainerPauseCnt

    @ContainerPauseCnt.setter
    def ContainerPauseCnt(self, ContainerPauseCnt):
        self._ContainerPauseCnt = ContainerPauseCnt

    @property
    def ContainerStopped(self):
        r"""Number of stopped containers
        :rtype: int
        """
        return self._ContainerStopped

    @ContainerStopped.setter
    def ContainerStopped(self, ContainerStopped):
        self._ContainerStopped = ContainerStopped

    @property
    def ImageCnt(self):
        r"""Number of local images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def HostCnt(self):
        r"""Number of server nodes
        :rtype: int
        """
        return self._HostCnt

    @HostCnt.setter
    def HostCnt(self, HostCnt):
        self._HostCnt = HostCnt

    @property
    def HostRunningCnt(self):
        r"""Number of running nodes on the server
        :rtype: int
        """
        return self._HostRunningCnt

    @HostRunningCnt.setter
    def HostRunningCnt(self, HostRunningCnt):
        self._HostRunningCnt = HostRunningCnt

    @property
    def HostOfflineCnt(self):
        r"""Number of offline nodes on the server
        :rtype: int
        """
        return self._HostOfflineCnt

    @HostOfflineCnt.setter
    def HostOfflineCnt(self, HostOfflineCnt):
        self._HostOfflineCnt = HostOfflineCnt

    @property
    def ImageRegistryCnt(self):
        r"""Number of image repositories
        :rtype: int
        """
        return self._ImageRegistryCnt

    @ImageRegistryCnt.setter
    def ImageRegistryCnt(self, ImageRegistryCnt):
        self._ImageRegistryCnt = ImageRegistryCnt

    @property
    def ImageTotalCnt(self):
        r"""Total number of images
        :rtype: int
        """
        return self._ImageTotalCnt

    @ImageTotalCnt.setter
    def ImageTotalCnt(self, ImageTotalCnt):
        self._ImageTotalCnt = ImageTotalCnt

    @property
    def HostUnInstallCnt(self):
        r"""Number of servers not installed with the agent
        :rtype: int
        """
        return self._HostUnInstallCnt

    @HostUnInstallCnt.setter
    def HostUnInstallCnt(self, HostUnInstallCnt):
        self._HostUnInstallCnt = HostUnInstallCnt

    @property
    def HostSuperNodeCnt(self):
        r"""Number of super nodes
        :rtype: int
        """
        return self._HostSuperNodeCnt

    @HostSuperNodeCnt.setter
    def HostSuperNodeCnt(self, HostSuperNodeCnt):
        self._HostSuperNodeCnt = HostSuperNodeCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ContainerTotalCnt = params.get("ContainerTotalCnt")
        self._ContainerRunningCnt = params.get("ContainerRunningCnt")
        self._ContainerPauseCnt = params.get("ContainerPauseCnt")
        self._ContainerStopped = params.get("ContainerStopped")
        self._ImageCnt = params.get("ImageCnt")
        self._HostCnt = params.get("HostCnt")
        self._HostRunningCnt = params.get("HostRunningCnt")
        self._HostOfflineCnt = params.get("HostOfflineCnt")
        self._ImageRegistryCnt = params.get("ImageRegistryCnt")
        self._ImageTotalCnt = params.get("ImageTotalCnt")
        self._HostUnInstallCnt = params.get("HostUnInstallCnt")
        self._HostSuperNodeCnt = params.get("HostSuperNodeCnt")
        self._RequestId = params.get("RequestId")


class DescribeContainerSecEventSummaryRequest(AbstractModel):
    r"""DescribeContainerSecEventSummary request structure.

    """


class DescribeContainerSecEventSummaryResponse(AbstractModel):
    r"""DescribeContainerSecEventSummary response structure.

    """

    def __init__(self):
        r"""
        :param _UnhandledEscapeCnt: Pending escape event
        :type UnhandledEscapeCnt: int
        :param _UnhandledReverseShellCnt: Pending reverse shell event
        :type UnhandledReverseShellCnt: int
        :param _UnhandledRiskSyscallCnt: Pending high-risk syscall
        :type UnhandledRiskSyscallCnt: int
        :param _UnhandledAbnormalProcessCnt: Pending abnormal process
        :type UnhandledAbnormalProcessCnt: int
        :param _UnhandledFileCnt: Pending file tampering event
        :type UnhandledFileCnt: int
        :param _UnhandledVirusEventCnt: Pending trojan event
        :type UnhandledVirusEventCnt: int
        :param _UnhandledMaliciousConnectionEventCnt: Unhandled malicious outgoing connections
        :type UnhandledMaliciousConnectionEventCnt: int
        :param _UnhandledK8sApiEventCnt: Unhandled K8sApi events
Note: This field may return `null`, indicating that no valid value was found.
        :type UnhandledK8sApiEventCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UnhandledEscapeCnt = None
        self._UnhandledReverseShellCnt = None
        self._UnhandledRiskSyscallCnt = None
        self._UnhandledAbnormalProcessCnt = None
        self._UnhandledFileCnt = None
        self._UnhandledVirusEventCnt = None
        self._UnhandledMaliciousConnectionEventCnt = None
        self._UnhandledK8sApiEventCnt = None
        self._RequestId = None

    @property
    def UnhandledEscapeCnt(self):
        r"""Pending escape event
        :rtype: int
        """
        return self._UnhandledEscapeCnt

    @UnhandledEscapeCnt.setter
    def UnhandledEscapeCnt(self, UnhandledEscapeCnt):
        self._UnhandledEscapeCnt = UnhandledEscapeCnt

    @property
    def UnhandledReverseShellCnt(self):
        r"""Pending reverse shell event
        :rtype: int
        """
        return self._UnhandledReverseShellCnt

    @UnhandledReverseShellCnt.setter
    def UnhandledReverseShellCnt(self, UnhandledReverseShellCnt):
        self._UnhandledReverseShellCnt = UnhandledReverseShellCnt

    @property
    def UnhandledRiskSyscallCnt(self):
        r"""Pending high-risk syscall
        :rtype: int
        """
        return self._UnhandledRiskSyscallCnt

    @UnhandledRiskSyscallCnt.setter
    def UnhandledRiskSyscallCnt(self, UnhandledRiskSyscallCnt):
        self._UnhandledRiskSyscallCnt = UnhandledRiskSyscallCnt

    @property
    def UnhandledAbnormalProcessCnt(self):
        r"""Pending abnormal process
        :rtype: int
        """
        return self._UnhandledAbnormalProcessCnt

    @UnhandledAbnormalProcessCnt.setter
    def UnhandledAbnormalProcessCnt(self, UnhandledAbnormalProcessCnt):
        self._UnhandledAbnormalProcessCnt = UnhandledAbnormalProcessCnt

    @property
    def UnhandledFileCnt(self):
        r"""Pending file tampering event
        :rtype: int
        """
        return self._UnhandledFileCnt

    @UnhandledFileCnt.setter
    def UnhandledFileCnt(self, UnhandledFileCnt):
        self._UnhandledFileCnt = UnhandledFileCnt

    @property
    def UnhandledVirusEventCnt(self):
        r"""Pending trojan event
        :rtype: int
        """
        return self._UnhandledVirusEventCnt

    @UnhandledVirusEventCnt.setter
    def UnhandledVirusEventCnt(self, UnhandledVirusEventCnt):
        self._UnhandledVirusEventCnt = UnhandledVirusEventCnt

    @property
    def UnhandledMaliciousConnectionEventCnt(self):
        r"""Unhandled malicious outgoing connections
        :rtype: int
        """
        return self._UnhandledMaliciousConnectionEventCnt

    @UnhandledMaliciousConnectionEventCnt.setter
    def UnhandledMaliciousConnectionEventCnt(self, UnhandledMaliciousConnectionEventCnt):
        self._UnhandledMaliciousConnectionEventCnt = UnhandledMaliciousConnectionEventCnt

    @property
    def UnhandledK8sApiEventCnt(self):
        r"""Unhandled K8sApi events
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: int
        """
        return self._UnhandledK8sApiEventCnt

    @UnhandledK8sApiEventCnt.setter
    def UnhandledK8sApiEventCnt(self, UnhandledK8sApiEventCnt):
        self._UnhandledK8sApiEventCnt = UnhandledK8sApiEventCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._UnhandledEscapeCnt = params.get("UnhandledEscapeCnt")
        self._UnhandledReverseShellCnt = params.get("UnhandledReverseShellCnt")
        self._UnhandledRiskSyscallCnt = params.get("UnhandledRiskSyscallCnt")
        self._UnhandledAbnormalProcessCnt = params.get("UnhandledAbnormalProcessCnt")
        self._UnhandledFileCnt = params.get("UnhandledFileCnt")
        self._UnhandledVirusEventCnt = params.get("UnhandledVirusEventCnt")
        self._UnhandledMaliciousConnectionEventCnt = params.get("UnhandledMaliciousConnectionEventCnt")
        self._UnhandledK8sApiEventCnt = params.get("UnhandledK8sApiEventCnt")
        self._RequestId = params.get("RequestId")


class DescribeESAggregationsRequest(AbstractModel):
    r"""DescribeESAggregations request structure.

    """

    def __init__(self):
        r"""
        :param _Query: ES aggregation condition in JSON
        :type Query: str
        """
        self._Query = None

    @property
    def Query(self):
        r"""ES aggregation condition in JSON
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query


    def _deserialize(self, params):
        self._Query = params.get("Query")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeESAggregationsResponse(AbstractModel):
    r"""DescribeESAggregations response structure.

    """

    def __init__(self):
        r"""
        :param _Data: ES aggregation result in JSON
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        r"""ES aggregation result in JSON
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeESHitsRequest(AbstractModel):
    r"""DescribeESHits request structure.

    """

    def __init__(self):
        r"""
        :param _Query: ES query condition in JSON
        :type Query: str
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Maximum value: `100`.
        :type Limit: int
        """
        self._Query = None
        self._Offset = None
        self._Limit = None

    @property
    def Query(self):
        r"""ES query condition in JSON
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Query = params.get("Query")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeESHitsResponse(AbstractModel):
    r"""DescribeESHits response structure.

    """

    def __init__(self):
        r"""
        :param _Data: ES query result in JSON
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        r"""ES query result in JSON
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeEmergencyVulListRequest(AbstractModel):
    r"""DescribeEmergencyVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEmergencyVulListResponse(AbstractModel):
    r"""DescribeEmergencyVulList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of vulnerabilities
        :type TotalCount: int
        :param _List: List of vulnerabilities
        :type List: list of EmergencyVulInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of vulnerabilities
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of vulnerabilities
        :rtype: list of EmergencyVulInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = EmergencyVulInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEscapeEventDetailRequest(AbstractModel):
    r"""DescribeEscapeEventDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        """
        self._EventId = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEscapeEventDetailResponse(AbstractModel):
    r"""DescribeEscapeEventDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventBaseInfo: Basic information of the event
        :type EventBaseInfo: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        :param _ProcessInfo: Process information
        :type ProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        :param _EventDetail: Event description
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.EscapeEventDescription`
        :param _ParentProcessInfo: Parent process information
        :type ParentProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _AncestorProcessInfo: Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventBaseInfo = None
        self._ProcessInfo = None
        self._EventDetail = None
        self._ParentProcessInfo = None
        self._AncestorProcessInfo = None
        self._RequestId = None

    @property
    def EventBaseInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        """
        return self._EventBaseInfo

    @EventBaseInfo.setter
    def EventBaseInfo(self, EventBaseInfo):
        self._EventBaseInfo = EventBaseInfo

    @property
    def ProcessInfo(self):
        r"""Process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        """
        return self._ProcessInfo

    @ProcessInfo.setter
    def ProcessInfo(self, ProcessInfo):
        self._ProcessInfo = ProcessInfo

    @property
    def EventDetail(self):
        r"""Event description
        :rtype: :class:`tencentcloud.tcss.v20201101.models.EscapeEventDescription`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def ParentProcessInfo(self):
        r"""Parent process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._ParentProcessInfo

    @ParentProcessInfo.setter
    def ParentProcessInfo(self, ParentProcessInfo):
        self._ParentProcessInfo = ParentProcessInfo

    @property
    def AncestorProcessInfo(self):
        r"""Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._AncestorProcessInfo

    @AncestorProcessInfo.setter
    def AncestorProcessInfo(self, AncestorProcessInfo):
        self._AncestorProcessInfo = AncestorProcessInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventBaseInfo") is not None:
            self._EventBaseInfo = RunTimeEventBaseInfo()
            self._EventBaseInfo._deserialize(params.get("EventBaseInfo"))
        if params.get("ProcessInfo") is not None:
            self._ProcessInfo = ProcessDetailInfo()
            self._ProcessInfo._deserialize(params.get("ProcessInfo"))
        if params.get("EventDetail") is not None:
            self._EventDetail = EscapeEventDescription()
            self._EventDetail._deserialize(params.get("EventDetail"))
        if params.get("ParentProcessInfo") is not None:
            self._ParentProcessInfo = ProcessBaseInfo()
            self._ParentProcessInfo._deserialize(params.get("ParentProcessInfo"))
        if params.get("AncestorProcessInfo") is not None:
            self._AncestorProcessInfo = ProcessBaseInfo()
            self._AncestorProcessInfo._deserialize(params.get("AncestorProcessInfo"))
        self._RequestId = params.get("RequestId")


class DescribeEscapeEventInfoRequest(AbstractModel):
    r"""DescribeEscapeEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter - status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEscapeEventInfoResponse(AbstractModel):
    r"""DescribeEscapeEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _EventSet: Array of escape events
        :type EventSet: list of EscapeEventInfo
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def EventSet(self):
        r"""Array of escape events
        :rtype: list of EscapeEventInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = EscapeEventInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeEscapeEventTendencyRequest(AbstractModel):
    r"""DescribeEscapeEventTendency request structure.

    """

    def __init__(self):
        r"""
        :param _EndTime: End time
        :type EndTime: str
        :param _StartTime: Start time
        :type StartTime: str
        """
        self._EndTime = None
        self._StartTime = None

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime


    def _deserialize(self, params):
        self._EndTime = params.get("EndTime")
        self._StartTime = params.get("StartTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEscapeEventTendencyResponse(AbstractModel):
    r"""DescribeEscapeEventTendency response structure.

    """

    def __init__(self):
        r"""
        :param _List: Trend of pending escape events
        :type List: list of EscapeEventTendencyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Trend of pending escape events
        :rtype: list of EscapeEventTendencyInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = EscapeEventTendencyInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEscapeEventTypeSummaryRequest(AbstractModel):
    r"""DescribeEscapeEventTypeSummary request structure.

    """


class DescribeEscapeEventTypeSummaryResponse(AbstractModel):
    r"""DescribeEscapeEventTypeSummary response structure.

    """

    def __init__(self):
        r"""
        :param _ContainerEscapeEventCount: Number of container escape events
        :type ContainerEscapeEventCount: int
        :param _ProcessPrivilegeEventCount: Number of program privilege escalation events
        :type ProcessPrivilegeEventCount: int
        :param _RiskContainerEventCount: Number of risky container events
        :type RiskContainerEventCount: int
        :param _PendingEscapeEventCount: Number of pending escape events
        :type PendingEscapeEventCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ContainerEscapeEventCount = None
        self._ProcessPrivilegeEventCount = None
        self._RiskContainerEventCount = None
        self._PendingEscapeEventCount = None
        self._RequestId = None

    @property
    def ContainerEscapeEventCount(self):
        r"""Number of container escape events
        :rtype: int
        """
        return self._ContainerEscapeEventCount

    @ContainerEscapeEventCount.setter
    def ContainerEscapeEventCount(self, ContainerEscapeEventCount):
        self._ContainerEscapeEventCount = ContainerEscapeEventCount

    @property
    def ProcessPrivilegeEventCount(self):
        r"""Number of program privilege escalation events
        :rtype: int
        """
        return self._ProcessPrivilegeEventCount

    @ProcessPrivilegeEventCount.setter
    def ProcessPrivilegeEventCount(self, ProcessPrivilegeEventCount):
        self._ProcessPrivilegeEventCount = ProcessPrivilegeEventCount

    @property
    def RiskContainerEventCount(self):
        r"""Number of risky container events
        :rtype: int
        """
        return self._RiskContainerEventCount

    @RiskContainerEventCount.setter
    def RiskContainerEventCount(self, RiskContainerEventCount):
        self._RiskContainerEventCount = RiskContainerEventCount

    @property
    def PendingEscapeEventCount(self):
        r"""Number of pending escape events
        :rtype: int
        """
        return self._PendingEscapeEventCount

    @PendingEscapeEventCount.setter
    def PendingEscapeEventCount(self, PendingEscapeEventCount):
        self._PendingEscapeEventCount = PendingEscapeEventCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ContainerEscapeEventCount = params.get("ContainerEscapeEventCount")
        self._ProcessPrivilegeEventCount = params.get("ProcessPrivilegeEventCount")
        self._RiskContainerEventCount = params.get("RiskContainerEventCount")
        self._PendingEscapeEventCount = params.get("PendingEscapeEventCount")
        self._RequestId = params.get("RequestId")


class DescribeEscapeEventsExportRequest(AbstractModel):
    r"""DescribeEscapeEventsExport request structure.

    """

    def __init__(self):
        r"""
        :param _ExportField: Export field
        :type ExportField: list of str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._ExportField = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._ExportField = params.get("ExportField")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEscapeEventsExportResponse(AbstractModel):
    r"""DescribeEscapeEventsExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._RequestId = params.get("RequestId")


class DescribeEscapeRuleInfoRequest(AbstractModel):
    r"""DescribeEscapeRuleInfo request structure.

    """


class DescribeEscapeRuleInfoResponse(AbstractModel):
    r"""DescribeEscapeRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RuleSet: Rule information
        :type RuleSet: list of EscapeRule
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RuleSet = None
        self._RequestId = None

    @property
    def RuleSet(self):
        r"""Rule information
        :rtype: list of EscapeRule
        """
        return self._RuleSet

    @RuleSet.setter
    def RuleSet(self, RuleSet):
        self._RuleSet = RuleSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RuleSet") is not None:
            self._RuleSet = []
            for item in params.get("RuleSet"):
                obj = EscapeRule()
                obj._deserialize(item)
                self._RuleSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEscapeSafeStateRequest(AbstractModel):
    r"""DescribeEscapeSafeState request structure.

    """


class DescribeEscapeSafeStateResponse(AbstractModel):
    r"""DescribeEscapeSafeState response structure.

    """

    def __init__(self):
        r"""
        :param _IsSafe: Valid values: `Unsafe` (at risk); `Safe` (no risks); `UnKnown` (unknown risks).
        :type IsSafe: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsSafe = None
        self._RequestId = None

    @property
    def IsSafe(self):
        r"""Valid values: `Unsafe` (at risk); `Safe` (no risks); `UnKnown` (unknown risks).
        :rtype: str
        """
        return self._IsSafe

    @IsSafe.setter
    def IsSafe(self, IsSafe):
        self._IsSafe = IsSafe

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsSafe = params.get("IsSafe")
        self._RequestId = params.get("RequestId")


class DescribeEscapeWhiteListRequest(AbstractModel):
    r"""DescribeEscapeWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>EventType- String - Required: No - Allowed event type. Valid values: `ESCAPE_CGROUPS` (cgroup escape); `ESCAPE_TAMPER_SENSITIVE_FILE` (file tamper escape); `ESCAPE_DOCKER_API` (Docker API access escape); `ESCAPE_VUL_OCCURRED` (vulnerability exploit); `MOUNT_SENSITIVE_PTAH` (sensitive path mount); `PRIVILEGE_CONTAINER_START` (privileged container); `PRIVILEGE` (program privilege escalation escape).</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field. Valid values: `HostCount` (number of servers); `ContainerCount` (number of containers); `UpdateTime` (update time).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>EventType- String - Required: No - Allowed event type. Valid values: `ESCAPE_CGROUPS` (cgroup escape); `ESCAPE_TAMPER_SENSITIVE_FILE` (file tamper escape); `ESCAPE_DOCKER_API` (Docker API access escape); `ESCAPE_VUL_OCCURRED` (vulnerability exploit); `MOUNT_SENSITIVE_PTAH` (sensitive path mount); `PRIVILEGE_CONTAINER_START` (privileged container); `PRIVILEGE` (program privilege escalation escape).</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field. Valid values: `HostCount` (number of servers); `ContainerCount` (number of containers); `UpdateTime` (update time).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEscapeWhiteListResponse(AbstractModel):
    r"""DescribeEscapeWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Allowlist of escapes
        :type List: list of EscapeWhiteListInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""Allowlist of escapes
        :rtype: list of EscapeWhiteListInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = EscapeWhiteListInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeExportJobDownloadURLRequest(AbstractModel):
    r"""DescribeExportJobDownloadURL request structure.

    """

    def __init__(self):
        r"""
        :param _JobID: Job ID
        :type JobID: str
        """
        self._JobID = None

    @property
    def JobID(self):
        r"""Job ID
        :rtype: str
        """
        return self._JobID

    @JobID.setter
    def JobID(self, JobID):
        self._JobID = JobID


    def _deserialize(self, params):
        self._JobID = params.get("JobID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExportJobDownloadURLResponse(AbstractModel):
    r"""DescribeExportJobDownloadURL response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadURL: Download URL
        :type DownloadURL: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadURL = None
        self._RequestId = None

    @property
    def DownloadURL(self):
        r"""Download URL
        :rtype: str
        """
        return self._DownloadURL

    @DownloadURL.setter
    def DownloadURL(self, DownloadURL):
        self._DownloadURL = DownloadURL

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadURL = params.get("DownloadURL")
        self._RequestId = params.get("RequestId")


class DescribeExportJobManageListRequest(AbstractModel):
    r"""DescribeExportJobManageList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>ExportStatus- String - Optional - Export status. Value: `RUNNING` (Exporting); `SUCCESS` (Exported); `FAILURE` (Failed to export)
<li>ExportSource- String - Optional - Source of the exportation task. Values: `LocalImage` (Local image).
</li>
        :type Filters: list of RunTimeFilters
        :param _Offset: Offset. Default value: 0
        :type Offset: int
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field
InsertTime: Creation time
        :type By: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filters.
<li>ExportStatus- String - Optional - Export status. Value: `RUNNING` (Exporting); `SUCCESS` (Exported); `FAILURE` (Failed to export)
<li>ExportSource- String - Optional - Source of the exportation task. Values: `LocalImage` (Local image).
</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        r"""Offset. Default value: 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
InsertTime: Creation time
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExportJobManageListResponse(AbstractModel):
    r"""DescribeExportJobManageList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total count
        :type TotalCount: int
        :param _List: Job list
        :type List: list of ExportJobInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""Job list
        :rtype: list of ExportJobInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ExportJobInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeExportJobResultRequest(AbstractModel):
    r"""DescribeExportJobResult request structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Value of the `JobId` field returned by `CreateExportComplianceStatusListJob`
        :type JobId: str
        """
        self._JobId = None

    @property
    def JobId(self):
        r"""Value of the `JobId` field returned by `CreateExportComplianceStatusListJob`
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExportJobResultResponse(AbstractModel):
    r"""DescribeExportJobResult response structure.

    """

    def __init__(self):
        r"""
        :param _ExportStatus: Export status. Valid values: `SUCCESS`, `FAILURE`, `RUNNING`.
        :type ExportStatus: str
        :param _DownloadURL: Download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadURL: str
        :param _ExportProgress: Export progress when `ExportStatus` is `RUNNING`. Value range: Floating points between `0` and `100`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExportProgress: float
        :param _FailureMsg: Failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :type FailureMsg: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ExportStatus = None
        self._DownloadURL = None
        self._ExportProgress = None
        self._FailureMsg = None
        self._RequestId = None

    @property
    def ExportStatus(self):
        r"""Export status. Valid values: `SUCCESS`, `FAILURE`, `RUNNING`.
        :rtype: str
        """
        return self._ExportStatus

    @ExportStatus.setter
    def ExportStatus(self, ExportStatus):
        self._ExportStatus = ExportStatus

    @property
    def DownloadURL(self):
        r"""Download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadURL

    @DownloadURL.setter
    def DownloadURL(self, DownloadURL):
        self._DownloadURL = DownloadURL

    @property
    def ExportProgress(self):
        r"""Export progress when `ExportStatus` is `RUNNING`. Value range: Floating points between `0` and `100`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._ExportProgress

    @ExportProgress.setter
    def ExportProgress(self, ExportProgress):
        self._ExportProgress = ExportProgress

    @property
    def FailureMsg(self):
        r"""Failure cause
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FailureMsg

    @FailureMsg.setter
    def FailureMsg(self, FailureMsg):
        self._FailureMsg = FailureMsg

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExportStatus = params.get("ExportStatus")
        self._DownloadURL = params.get("DownloadURL")
        self._ExportProgress = params.get("ExportProgress")
        self._FailureMsg = params.get("FailureMsg")
        self._RequestId = params.get("RequestId")


class DescribeImageAuthorizedInfoRequest(AbstractModel):
    r"""DescribeImageAuthorizedInfo request structure.

    """


class DescribeImageAuthorizedInfoResponse(AbstractModel):
    r"""DescribeImageAuthorizedInfo response structure.

    """

    def __init__(self):
        r"""
        :param _TotalAuthorizedCnt: Total number of valid image licenses
        :type TotalAuthorizedCnt: int
        :param _UsedAuthorizedCnt: Number of used image licenses
        :type UsedAuthorizedCnt: int
        :param _ScannedImageCnt: Number of images with scan enabled
        :type ScannedImageCnt: int
        :param _NotScannedImageCnt: Number of images with scan not enabled
        :type NotScannedImageCnt: int
        :param _NotScannedLocalImageCnt: Number of local images with scan not enabled
        :type NotScannedLocalImageCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalAuthorizedCnt = None
        self._UsedAuthorizedCnt = None
        self._ScannedImageCnt = None
        self._NotScannedImageCnt = None
        self._NotScannedLocalImageCnt = None
        self._RequestId = None

    @property
    def TotalAuthorizedCnt(self):
        r"""Total number of valid image licenses
        :rtype: int
        """
        return self._TotalAuthorizedCnt

    @TotalAuthorizedCnt.setter
    def TotalAuthorizedCnt(self, TotalAuthorizedCnt):
        self._TotalAuthorizedCnt = TotalAuthorizedCnt

    @property
    def UsedAuthorizedCnt(self):
        r"""Number of used image licenses
        :rtype: int
        """
        return self._UsedAuthorizedCnt

    @UsedAuthorizedCnt.setter
    def UsedAuthorizedCnt(self, UsedAuthorizedCnt):
        self._UsedAuthorizedCnt = UsedAuthorizedCnt

    @property
    def ScannedImageCnt(self):
        r"""Number of images with scan enabled
        :rtype: int
        """
        return self._ScannedImageCnt

    @ScannedImageCnt.setter
    def ScannedImageCnt(self, ScannedImageCnt):
        self._ScannedImageCnt = ScannedImageCnt

    @property
    def NotScannedImageCnt(self):
        r"""Number of images with scan not enabled
        :rtype: int
        """
        return self._NotScannedImageCnt

    @NotScannedImageCnt.setter
    def NotScannedImageCnt(self, NotScannedImageCnt):
        self._NotScannedImageCnt = NotScannedImageCnt

    @property
    def NotScannedLocalImageCnt(self):
        r"""Number of local images with scan not enabled
        :rtype: int
        """
        return self._NotScannedLocalImageCnt

    @NotScannedLocalImageCnt.setter
    def NotScannedLocalImageCnt(self, NotScannedLocalImageCnt):
        self._NotScannedLocalImageCnt = NotScannedLocalImageCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalAuthorizedCnt = params.get("TotalAuthorizedCnt")
        self._UsedAuthorizedCnt = params.get("UsedAuthorizedCnt")
        self._ScannedImageCnt = params.get("ScannedImageCnt")
        self._NotScannedImageCnt = params.get("NotScannedImageCnt")
        self._NotScannedLocalImageCnt = params.get("NotScannedLocalImageCnt")
        self._RequestId = params.get("RequestId")


class DescribeImageAutoAuthorizedLogListRequest(AbstractModel):
    r"""DescribeImageAutoAuthorizedLogList request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the automatic licensing task
        :type TaskId: int
        :param _Filters: `Status` (licensing result). Valid values: `SUCCESS` (success); `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :type Filters: list of AssetFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _By: Sorting field: `AuthorizedTime`.
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._TaskId = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._By = None
        self._Order = None

    @property
    def TaskId(self):
        r"""ID of the automatic licensing task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Filters(self):
        r"""`Status` (licensing result). Valid values: `SUCCESS` (success); `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def By(self):
        r"""Sorting field: `AuthorizedTime`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageAutoAuthorizedLogListResponse(AbstractModel):
    r"""DescribeImageAutoAuthorizedLogList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of automatically licensed images
        :type List: list of AutoAuthorizedImageInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of automatically licensed images
        :rtype: list of AutoAuthorizedImageInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = AutoAuthorizedImageInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeImageAutoAuthorizedRuleRequest(AbstractModel):
    r"""DescribeImageAutoAuthorizedRule request structure.

    """


class DescribeImageAutoAuthorizedRuleResponse(AbstractModel):
    r"""DescribeImageAutoAuthorizedRule response structure.

    """

    def __init__(self):
        r"""
        :param _IsEnabled: Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :type IsEnabled: int
        :param _RangeType: Scope. Valid values: `MANUAL` (specified servers); `ALL` (all images).
Note: This field may return null, indicating that no valid values can be obtained.
        :type RangeType: str
        :param _HostCount: Number of servers when the scope is `MANUAL`
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostCount: int
        :param _MaxDailyCount: Maximum number of image licenses per day. `0`: Unlimited.
Note: This field may return null, indicating that no valid values can be obtained.
        :type MaxDailyCount: int
        :param _RuleId: Rule ID, which is `0` if not specified.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsEnabled = None
        self._RangeType = None
        self._HostCount = None
        self._MaxDailyCount = None
        self._RuleId = None
        self._RequestId = None

    @property
    def IsEnabled(self):
        r"""Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def RangeType(self):
        r"""Scope. Valid values: `MANUAL` (specified servers); `ALL` (all images).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RangeType

    @RangeType.setter
    def RangeType(self, RangeType):
        self._RangeType = RangeType

    @property
    def HostCount(self):
        r"""Number of servers when the scope is `MANUAL`
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def MaxDailyCount(self):
        r"""Maximum number of image licenses per day. `0`: Unlimited.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._MaxDailyCount

    @MaxDailyCount.setter
    def MaxDailyCount(self, MaxDailyCount):
        self._MaxDailyCount = MaxDailyCount

    @property
    def RuleId(self):
        r"""Rule ID, which is `0` if not specified.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsEnabled = params.get("IsEnabled")
        self._RangeType = params.get("RangeType")
        self._HostCount = params.get("HostCount")
        self._MaxDailyCount = params.get("MaxDailyCount")
        self._RuleId = params.get("RuleId")
        self._RequestId = params.get("RequestId")


class DescribeImageAutoAuthorizedTaskListRequest(AbstractModel):
    r"""DescribeImageAutoAuthorizedTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _Filters: Filter field
`Status` (licensing result). Valid values: `ALLSUCCSESS` (licensing succeeded); `PARTIALFAIL` (failed to license some images); `ALLFAIL` (failed to license all images).
Licensing method. Valid values: `AUTO` (automatic licensing); `MANUAL` (manual licensing).
Image source. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :type Filters: list of AssetFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        """
        self._StartTime = None
        self._EndTime = None
        self._Filters = None
        self._Limit = None
        self._Offset = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Filters(self):
        r"""Filter field
`Status` (licensing result). Valid values: `ALLSUCCSESS` (licensing succeeded); `PARTIALFAIL` (failed to license some images); `ALLFAIL` (failed to license all images).
Licensing method. Valid values: `AUTO` (automatic licensing); `MANUAL` (manual licensing).
Image source. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageAutoAuthorizedTaskListResponse(AbstractModel):
    r"""DescribeImageAutoAuthorizedTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of automatic licensing tasks
        :type List: list of ImageAutoAuthorizedTask
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of automatic licensing tasks
        :rtype: list of ImageAutoAuthorizedTask
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageAutoAuthorizedTask()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeImageComponentListRequest(AbstractModel):
    r"""DescribeImageComponentList request structure.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :type Filters: list of AssetFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `desc`, `asc`.
        :type Order: str
        """
        self._ImageID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ComponentName- String - Required: No - Image component name</li><li>ComponentVersion- String - Required: No - Image component version</li><li>ComponentType- String - Required: No - Image component type</li><li>VulLevel- String - Required: No - Vulnerability severity</li><li>HasVul- String - Required: No - Whether there is a vulnerability. Valid values: `true` (yes); `false` (no). If `ComponentName` is not passed in or is `ALL`, it indicates all.</li>
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `desc`, `asc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageComponentListResponse(AbstractModel):
    r"""DescribeImageComponentList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of image components
        :type List: list of ImageComponent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of image components
        :rtype: list of ImageComponent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ImageComponent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeImageRegistryNamespaceListRequest(AbstractModel):
    r"""DescribeImageRegistryNamespaceList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Initial offset of the query. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned by the query. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Filters: Query filter. The `Name` field can be "Namespace".
        :type Filters: list of AssetFilters
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def Offset(self):
        r"""Initial offset of the query. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned by the query. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Query filter. The `Name` field can be "Namespace".
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageRegistryNamespaceListResponse(AbstractModel):
    r"""DescribeImageRegistryNamespaceList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of namespaces that can be returned
        :type TotalCount: int
        :param _NamespaceList: List of namespaces
        :type NamespaceList: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._NamespaceList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of namespaces that can be returned
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def NamespaceList(self):
        r"""List of namespaces
        :rtype: list of str
        """
        return self._NamespaceList

    @NamespaceList.setter
    def NamespaceList(self, NamespaceList):
        self._NamespaceList = NamespaceList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._NamespaceList = params.get("NamespaceList")
        self._RequestId = params.get("RequestId")


class DescribeImageRegistryTimingScanTaskRequest(AbstractModel):
    r"""DescribeImageRegistryTimingScanTask request structure.

    """


class DescribeImageRegistryTimingScanTaskResponse(AbstractModel):
    r"""DescribeImageRegistryTimingScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _Enable: Scheduled scan switch
Note: This field may return null, indicating that no valid values can be obtained.
        :type Enable: bool
        :param _ScanTime: Scheduled scan time
        :type ScanTime: str
        :param _ScanPeriod: Scheduled scan interval
        :type ScanPeriod: int
        :param _ScanType: Array of scan types
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanType: list of str
        :param _All: Scan of all images
        :type All: bool
        :param _Images: Scan of specified images
Note: This field may return null, indicating that no valid values can be obtained.
        :type Images: list of ImageInfo
        :param _Id: ID of the specified image
Note: This field may return null, indicating that no valid values can be obtained.
        :type Id: list of int non-negative
        :param _Latest: Whether to scan the latest image tag
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type Latest: bool
        :param _ScanEndTime: 
        :type ScanEndTime: str
        :param _RegistryType: 
        :type RegistryType: list of str
        :param _ContainerRunning: 
        :type ContainerRunning: bool
        :param _ScanScope: 
        :type ScanScope: int
        :param _Namespace: 
        :type Namespace: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Enable = None
        self._ScanTime = None
        self._ScanPeriod = None
        self._ScanType = None
        self._All = None
        self._Images = None
        self._Id = None
        self._Latest = None
        self._ScanEndTime = None
        self._RegistryType = None
        self._ContainerRunning = None
        self._ScanScope = None
        self._Namespace = None
        self._RequestId = None

    @property
    def Enable(self):
        r"""Scheduled scan switch
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def ScanTime(self):
        r"""Scheduled scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanPeriod(self):
        r"""Scheduled scan interval
        :rtype: int
        """
        return self._ScanPeriod

    @ScanPeriod.setter
    def ScanPeriod(self, ScanPeriod):
        self._ScanPeriod = ScanPeriod

    @property
    def ScanType(self):
        r"""Array of scan types
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""Scan of all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Images(self):
        r"""Scan of specified images
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def Id(self):
        r"""ID of the specified image
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Latest(self):
        r"""Whether to scan the latest image tag
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._Latest

    @Latest.setter
    def Latest(self, Latest):
        self._Latest = Latest

    @property
    def ScanEndTime(self):
        r"""
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def RegistryType(self):
        r"""
        :rtype: list of str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def ContainerRunning(self):
        r"""
        :rtype: bool
        """
        return self._ContainerRunning

    @ContainerRunning.setter
    def ContainerRunning(self, ContainerRunning):
        self._ContainerRunning = ContainerRunning

    @property
    def ScanScope(self):
        r"""
        :rtype: int
        """
        return self._ScanScope

    @ScanScope.setter
    def ScanScope(self, ScanScope):
        self._ScanScope = ScanScope

    @property
    def Namespace(self):
        r"""
        :rtype: list of str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._ScanTime = params.get("ScanTime")
        self._ScanPeriod = params.get("ScanPeriod")
        self._ScanType = params.get("ScanType")
        self._All = params.get("All")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._Id = params.get("Id")
        self._Latest = params.get("Latest")
        self._ScanEndTime = params.get("ScanEndTime")
        self._RegistryType = params.get("RegistryType")
        self._ContainerRunning = params.get("ContainerRunning")
        self._ScanScope = params.get("ScanScope")
        self._Namespace = params.get("Namespace")
        self._RequestId = params.get("RequestId")


class DescribeImageRiskSummaryRequest(AbstractModel):
    r"""DescribeImageRiskSummary request structure.

    """


class DescribeImageRiskSummaryResponse(AbstractModel):
    r"""DescribeImageRiskSummary response structure.

    """

    def __init__(self):
        r"""
        :param _VulnerabilityCnt: Vulnerability
        :type VulnerabilityCnt: list of RunTimeRiskInfo
        :param _MalwareVirusCnt: Virus and trojan
        :type MalwareVirusCnt: list of RunTimeRiskInfo
        :param _RiskCnt: Sensitive data
        :type RiskCnt: list of RunTimeRiskInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulnerabilityCnt = None
        self._MalwareVirusCnt = None
        self._RiskCnt = None
        self._RequestId = None

    @property
    def VulnerabilityCnt(self):
        r"""Vulnerability
        :rtype: list of RunTimeRiskInfo
        """
        return self._VulnerabilityCnt

    @VulnerabilityCnt.setter
    def VulnerabilityCnt(self, VulnerabilityCnt):
        self._VulnerabilityCnt = VulnerabilityCnt

    @property
    def MalwareVirusCnt(self):
        r"""Virus and trojan
        :rtype: list of RunTimeRiskInfo
        """
        return self._MalwareVirusCnt

    @MalwareVirusCnt.setter
    def MalwareVirusCnt(self, MalwareVirusCnt):
        self._MalwareVirusCnt = MalwareVirusCnt

    @property
    def RiskCnt(self):
        r"""Sensitive data
        :rtype: list of RunTimeRiskInfo
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulnerabilityCnt") is not None:
            self._VulnerabilityCnt = []
            for item in params.get("VulnerabilityCnt"):
                obj = RunTimeRiskInfo()
                obj._deserialize(item)
                self._VulnerabilityCnt.append(obj)
        if params.get("MalwareVirusCnt") is not None:
            self._MalwareVirusCnt = []
            for item in params.get("MalwareVirusCnt"):
                obj = RunTimeRiskInfo()
                obj._deserialize(item)
                self._MalwareVirusCnt.append(obj)
        if params.get("RiskCnt") is not None:
            self._RiskCnt = []
            for item in params.get("RiskCnt"):
                obj = RunTimeRiskInfo()
                obj._deserialize(item)
                self._RiskCnt.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeImageRiskTendencyRequest(AbstractModel):
    r"""DescribeImageRiskTendency request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._StartTime = None
        self._EndTime = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageRiskTendencyResponse(AbstractModel):
    r"""DescribeImageRiskTendency response structure.

    """

    def __init__(self):
        r"""
        :param _ImageRiskTendencySet: List of new risk trends of local images
        :type ImageRiskTendencySet: list of ImageRiskTendencyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageRiskTendencySet = None
        self._RequestId = None

    @property
    def ImageRiskTendencySet(self):
        r"""List of new risk trends of local images
        :rtype: list of ImageRiskTendencyInfo
        """
        return self._ImageRiskTendencySet

    @ImageRiskTendencySet.setter
    def ImageRiskTendencySet(self, ImageRiskTendencySet):
        self._ImageRiskTendencySet = ImageRiskTendencySet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ImageRiskTendencySet") is not None:
            self._ImageRiskTendencySet = []
            for item in params.get("ImageRiskTendencySet"):
                obj = ImageRiskTendencyInfo()
                obj._deserialize(item)
                self._ImageRiskTendencySet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeImageSimpleListRequest(AbstractModel):
    r"""DescribeImageSimpleList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: `IsAuthorized` (whether it is licensed). Valid values: `0` (no); `1` (yes); none (all).
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""`IsAuthorized` (whether it is licensed). Valid values: `0` (no); `1` (yes); none (all).
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImageSimpleListResponse(AbstractModel):
    r"""DescribeImageSimpleList response structure.

    """

    def __init__(self):
        r"""
        :param _ImageList: List of images
        :type ImageList: list of ImageSimpleInfo
        :param _ImageCnt: Number of images
        :type ImageCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageList = None
        self._ImageCnt = None
        self._RequestId = None

    @property
    def ImageList(self):
        r"""List of images
        :rtype: list of ImageSimpleInfo
        """
        return self._ImageList

    @ImageList.setter
    def ImageList(self, ImageList):
        self._ImageList = ImageList

    @property
    def ImageCnt(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ImageList") is not None:
            self._ImageList = []
            for item in params.get("ImageList"):
                obj = ImageSimpleInfo()
                obj._deserialize(item)
                self._ImageList.append(obj)
        self._ImageCnt = params.get("ImageCnt")
        self._RequestId = params.get("RequestId")


class DescribeIndexListRequest(AbstractModel):
    r"""DescribeIndexList request structure.

    """


class DescribeIndexListResponse(AbstractModel):
    r"""DescribeIndexList response structure.

    """

    def __init__(self):
        r"""
        :param _Data: ES index information
        :type Data: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        r"""ES index information
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeInspectionReportRequest(AbstractModel):
    r"""DescribeInspectionReport request structure.

    """


class DescribeInspectionReportResponse(AbstractModel):
    r"""DescribeInspectionReport response structure.

    """

    def __init__(self):
        r"""
        :param _ReportName: Report name
        :type ReportName: str
        :param _ReportUrl: Download URL
        :type ReportUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ReportName = None
        self._ReportUrl = None
        self._RequestId = None

    @property
    def ReportName(self):
        r"""Report name
        :rtype: str
        """
        return self._ReportName

    @ReportName.setter
    def ReportName(self, ReportName):
        self._ReportName = ReportName

    @property
    def ReportUrl(self):
        r"""Download URL
        :rtype: str
        """
        return self._ReportUrl

    @ReportUrl.setter
    def ReportUrl(self, ReportUrl):
        self._ReportUrl = ReportUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ReportName = params.get("ReportName")
        self._ReportUrl = params.get("ReportUrl")
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalEventInfoRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalEventInfo request structure.

    """

    def __init__(self):
        r"""
        :param _ID: Event ID
        :type ID: int
        """
        self._ID = None

    @property
    def ID(self):
        r"""Event ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID


    def _deserialize(self, params):
        self._ID = params.get("ID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalEventInfoResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalEventInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Info: Event details
        :type Info: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalEventInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        r"""Event details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalEventInfo`
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = K8sApiAbnormalEventInfo()
            self._Info._deserialize(params.get("Info"))
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalEventListRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalEventList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>TimeRange - String - Optional - Time range. Example: ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>`MatchRules` - String - Optional - Hit rule</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
<li>`Status` - String - Optional - Event status</li>
<li>`MatchRuleType` - String - Optional - Hit rule type</li>
<li>`ClusterRunningStatus` - String - Optional - Cluster running status</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`ClusterID` - String - Optional - Cluster ID</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0
        :type Offset: int
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field
`LatestFoundTime`: Last creation time
`AlarmCount`: Number of alarms
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filters.
<li>TimeRange - String - Optional - Time range. Example: ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>`MatchRules` - String - Optional - Hit rule</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
<li>`Status` - String - Optional - Event status</li>
<li>`MatchRuleType` - String - Optional - Hit rule type</li>
<li>`ClusterRunningStatus` - String - Optional - Cluster running status</li>
<li>`ClusterName` - String - Optional - Cluster name</li>
<li>`ClusterID` - String - Optional - Cluster ID</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
`LatestFoundTime`: Last creation time
`AlarmCount`: Number of alarms
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalEventListResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalEventList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Event list
        :type List: list of K8sApiAbnormalEventListItem
        :param _TotalCount: Total count
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""Event list
        :rtype: list of K8sApiAbnormalEventListItem
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = K8sApiAbnormalEventListItem()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalRuleInfoRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _RuleID: Rule ID
        :type RuleID: str
        """
        self._RuleID = None

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID


    def _deserialize(self, params):
        self._RuleID = params.get("RuleID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalRuleInfoResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _Info: Rule details
        :type Info: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Info = None
        self._RequestId = None

    @property
    def Info(self):
        r"""Rule details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Info") is not None:
            self._Info = K8sApiAbnormalRuleInfo()
            self._Info._deserialize(params.get("Info"))
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalRuleListRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filters.
<li>`RuleType` - String - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: Offset. Default value: 0
        :type Offset: int
        :param _Order: Sort order
        :type Order: str
        :param _By: Sorting field.
<li>`UpdateTime` - String - Optional - Last updated</li>
<li>`EffectClusterCount` - String - Optional - Number of clusters affected</li>
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filters.
<li>`RuleType` - String - Optional - Rule type</li>
<li>`Status` - String - Optional - Status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: 0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sort order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field.
<li>`UpdateTime` - String - Optional - Last updated</li>
<li>`EffectClusterCount` - String - Optional - Number of clusters affected</li>
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalRuleListResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Rule list
        :type List: list of K8sApiAbnormalRuleListItem
        :param _TotalCount: Total count
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""Rule list
        :rtype: list of K8sApiAbnormalRuleListItem
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = K8sApiAbnormalRuleListItem()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalRuleScopeListRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleScopeList request structure.

    """

    def __init__(self):
        r"""
        :param _RuleID: Rule ID
        :type RuleID: str
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Filters: Filters.
<li>`Action` - String - Optional - Filter by action</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
        :type Filters: list of RunTimeFilters
        """
        self._RuleID = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Filters.
<li>`Action` - String - Optional - Filter by action</li>
<li>`RiskLevel` - String - Optional - Threat level</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._RuleID = params.get("RuleID")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalRuleScopeListResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalRuleScopeList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total count
        :type TotalCount: int
        :param _List: List
        :type List: list of K8sApiAbnormalRuleScopeInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total count
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List
        :rtype: list of K8sApiAbnormalRuleScopeInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = K8sApiAbnormalRuleScopeInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalSummaryRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalSummary request structure.

    """


class DescribeK8sApiAbnormalSummaryResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalSummary response structure.

    """

    def __init__(self):
        r"""
        :param _UnhandleEventCount: The number of pending events
        :type UnhandleEventCount: int
        :param _UnhandleHighLevelEventCount: The number of pending high-risk events
        :type UnhandleHighLevelEventCount: int
        :param _UnhandleMediumLevelEventCount: The number of pending medium-risk events
        :type UnhandleMediumLevelEventCount: int
        :param _UnhandleLowLevelEventCount: The number of pending low-risk events
        :type UnhandleLowLevelEventCount: int
        :param _UnhandleNoticeLevelEventCount: The number of pending notice-level events
        :type UnhandleNoticeLevelEventCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._UnhandleEventCount = None
        self._UnhandleHighLevelEventCount = None
        self._UnhandleMediumLevelEventCount = None
        self._UnhandleLowLevelEventCount = None
        self._UnhandleNoticeLevelEventCount = None
        self._RequestId = None

    @property
    def UnhandleEventCount(self):
        r"""The number of pending events
        :rtype: int
        """
        return self._UnhandleEventCount

    @UnhandleEventCount.setter
    def UnhandleEventCount(self, UnhandleEventCount):
        self._UnhandleEventCount = UnhandleEventCount

    @property
    def UnhandleHighLevelEventCount(self):
        r"""The number of pending high-risk events
        :rtype: int
        """
        return self._UnhandleHighLevelEventCount

    @UnhandleHighLevelEventCount.setter
    def UnhandleHighLevelEventCount(self, UnhandleHighLevelEventCount):
        self._UnhandleHighLevelEventCount = UnhandleHighLevelEventCount

    @property
    def UnhandleMediumLevelEventCount(self):
        r"""The number of pending medium-risk events
        :rtype: int
        """
        return self._UnhandleMediumLevelEventCount

    @UnhandleMediumLevelEventCount.setter
    def UnhandleMediumLevelEventCount(self, UnhandleMediumLevelEventCount):
        self._UnhandleMediumLevelEventCount = UnhandleMediumLevelEventCount

    @property
    def UnhandleLowLevelEventCount(self):
        r"""The number of pending low-risk events
        :rtype: int
        """
        return self._UnhandleLowLevelEventCount

    @UnhandleLowLevelEventCount.setter
    def UnhandleLowLevelEventCount(self, UnhandleLowLevelEventCount):
        self._UnhandleLowLevelEventCount = UnhandleLowLevelEventCount

    @property
    def UnhandleNoticeLevelEventCount(self):
        r"""The number of pending notice-level events
        :rtype: int
        """
        return self._UnhandleNoticeLevelEventCount

    @UnhandleNoticeLevelEventCount.setter
    def UnhandleNoticeLevelEventCount(self, UnhandleNoticeLevelEventCount):
        self._UnhandleNoticeLevelEventCount = UnhandleNoticeLevelEventCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._UnhandleEventCount = params.get("UnhandleEventCount")
        self._UnhandleHighLevelEventCount = params.get("UnhandleHighLevelEventCount")
        self._UnhandleMediumLevelEventCount = params.get("UnhandleMediumLevelEventCount")
        self._UnhandleLowLevelEventCount = params.get("UnhandleLowLevelEventCount")
        self._UnhandleNoticeLevelEventCount = params.get("UnhandleNoticeLevelEventCount")
        self._RequestId = params.get("RequestId")


class DescribeK8sApiAbnormalTendencyRequest(AbstractModel):
    r"""DescribeK8sApiAbnormalTendency request structure.

    """

    def __init__(self):
        r"""
        :param _TendencyPeriod: Trend period (default value: 7 days)
        :type TendencyPeriod: int
        """
        self._TendencyPeriod = None

    @property
    def TendencyPeriod(self):
        r"""Trend period (default value: 7 days)
        :rtype: int
        """
        return self._TendencyPeriod

    @TendencyPeriod.setter
    def TendencyPeriod(self, TendencyPeriod):
        self._TendencyPeriod = TendencyPeriod


    def _deserialize(self, params):
        self._TendencyPeriod = params.get("TendencyPeriod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeK8sApiAbnormalTendencyResponse(AbstractModel):
    r"""DescribeK8sApiAbnormalTendency response structure.

    """

    def __init__(self):
        r"""
        :param _List: Trend list
        :type List: list of K8sApiAbnormalTendencyItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Trend list
        :rtype: list of K8sApiAbnormalTendencyItem
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = K8sApiAbnormalTendencyItem()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLogStorageStatisticRequest(AbstractModel):
    r"""DescribeLogStorageStatistic request structure.

    """


class DescribeLogStorageStatisticResponse(AbstractModel):
    r"""DescribeLogStorageStatistic response structure.

    """

    def __init__(self):
        r"""
        :param _TotalSize: Total capacity in GB
        :type TotalSize: int
        :param _UsedSize: Used capacity in GB
        :type UsedSize: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalSize = None
        self._UsedSize = None
        self._RequestId = None

    @property
    def TotalSize(self):
        r"""Total capacity in GB
        :rtype: int
        """
        return self._TotalSize

    @TotalSize.setter
    def TotalSize(self, TotalSize):
        self._TotalSize = TotalSize

    @property
    def UsedSize(self):
        r"""Used capacity in GB
        :rtype: int
        """
        return self._UsedSize

    @UsedSize.setter
    def UsedSize(self, UsedSize):
        self._UsedSize = UsedSize

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalSize = params.get("TotalSize")
        self._UsedSize = params.get("UsedSize")
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallAuditRecordRequest(AbstractModel):
    r"""DescribeNetworkFirewallAuditRecord request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - Action
Name. Valid values: `publish`, `unpublish`, `confirm`, `add`, `update`, `delete`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - Action
Name. Valid values: `publish`, `unpublish`, `confirm`, `add`, `update`, `delete`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallAuditRecordResponse(AbstractModel):
    r"""DescribeNetworkFirewallAuditRecord response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of cluster audits
        :type TotalCount: int
        :param _AuditList: Audit details of the cluster
        :type AuditList: list of NetworkAuditRecord
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._AuditList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of cluster audits
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AuditList(self):
        r"""Audit details of the cluster
        :rtype: list of NetworkAuditRecord
        """
        return self._AuditList

    @AuditList.setter
    def AuditList(self, AuditList):
        self._AuditList = AuditList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AuditList") is not None:
            self._AuditList = []
            for item in params.get("AuditList"):
                obj = NetworkAuditRecord()
                obj._deserialize(item)
                self._AuditList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallClusterListRequest(AbstractModel):
    r"""DescribeNetworkFirewallClusterList request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallClusterListResponse(AbstractModel):
    r"""DescribeNetworkFirewallClusterList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _ClusterInfoList: Cluster details
        :type ClusterInfoList: list of NetworkClusterInfoItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ClusterInfoList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ClusterInfoList(self):
        r"""Cluster details
        :rtype: list of NetworkClusterInfoItem
        """
        return self._ClusterInfoList

    @ClusterInfoList.setter
    def ClusterInfoList(self, ClusterInfoList):
        self._ClusterInfoList = ClusterInfoList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ClusterInfoList") is not None:
            self._ClusterInfoList = []
            for item in params.get("ClusterInfoList"):
                obj = NetworkClusterInfoItem()
                obj._deserialize(item)
                self._ClusterInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallClusterRefreshStatusRequest(AbstractModel):
    r"""DescribeNetworkFirewallClusterRefreshStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallClusterRefreshStatusResponse(AbstractModel):
    r"""DescribeNetworkFirewallClusterRefreshStatus response structure.

    """

    def __init__(self):
        r"""
        :param _TaskStatus: Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :type TaskStatus: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskStatus = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        r"""Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallNamespaceLabelListRequest(AbstractModel):
    r"""DescribeNetworkFirewallNamespaceLabelList request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ClusterId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallNamespaceLabelListResponse(AbstractModel):
    r"""DescribeNetworkFirewallNamespaceLabelList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _ClusterNamespaceLabelList: Cluster namespace label details
        :type ClusterNamespaceLabelList: list of NetworkClusterNamespaceLabelInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ClusterNamespaceLabelList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ClusterNamespaceLabelList(self):
        r"""Cluster namespace label details
        :rtype: list of NetworkClusterNamespaceLabelInfo
        """
        return self._ClusterNamespaceLabelList

    @ClusterNamespaceLabelList.setter
    def ClusterNamespaceLabelList(self, ClusterNamespaceLabelList):
        self._ClusterNamespaceLabelList = ClusterNamespaceLabelList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ClusterNamespaceLabelList") is not None:
            self._ClusterNamespaceLabelList = []
            for item in params.get("ClusterNamespaceLabelList"):
                obj = NetworkClusterNamespaceLabelInfo()
                obj._deserialize(item)
                self._ClusterNamespaceLabelList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPodLabelsListRequest(AbstractModel):
    r"""DescribeNetworkFirewallPodLabelsList request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ClusterId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPodLabelsListResponse(AbstractModel):
    r"""DescribeNetworkFirewallPodLabelsList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of cluster Pods
        :type TotalCount: int
        :param _PodList: Details of the cluster Pod
Note: This field may return null, indicating that no valid values can be obtained.
        :type PodList: list of NetworkClusterPodInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._PodList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of cluster Pods
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PodList(self):
        r"""Details of the cluster Pod
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetworkClusterPodInfo
        """
        return self._PodList

    @PodList.setter
    def PodList(self, PodList):
        self._PodList = PodList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PodList") is not None:
            self._PodList = []
            for item in params.get("PodList"):
                obj = NetworkClusterPodInfo()
                obj._deserialize(item)
                self._PodList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""DescribeNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Policy ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""DescribeNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _Namespace: Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :type Namespace: str
        :param _FromPolicyRule: Inbound type
        :type FromPolicyRule: int
        :param _ToPolicyRule: Outbound type
        :type ToPolicyRule: int
        :param _CustomPolicy: Custom rule
Note: This field may return null, indicating that no valid values can be obtained.
        :type CustomPolicy: list of NetworkCustomPolicy
        :param _PodSelector: Pod selector
        :type PodSelector: str
        :param _Description: Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _PolicyCreateTime: Policy creation time
        :type PolicyCreateTime: str
        :param _PolicySourceType: Policy source type. Valid values: `System` (synched from the cluster); `Manual` (added manually).
        :type PolicySourceType: str
        :param _NetworkPolicyPlugin: Network plugin of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetworkPolicyPlugin: str
        :param _PublishStatus: Network policy status
        :type PublishStatus: str
        :param _PublishResult: Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublishResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ClusterId = None
        self._PolicyName = None
        self._Namespace = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._CustomPolicy = None
        self._PodSelector = None
        self._Description = None
        self._PolicyCreateTime = None
        self._PolicySourceType = None
        self._NetworkPolicyPlugin = None
        self._PublishStatus = None
        self._PublishResult = None
        self._RequestId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def Namespace(self):
        r"""Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def FromPolicyRule(self):
        r"""Inbound type
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Outbound type
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def CustomPolicy(self):
        r"""Custom rule
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetworkCustomPolicy
        """
        return self._CustomPolicy

    @CustomPolicy.setter
    def CustomPolicy(self, CustomPolicy):
        self._CustomPolicy = CustomPolicy

    @property
    def PodSelector(self):
        r"""Pod selector
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Description(self):
        r"""Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PolicyCreateTime(self):
        r"""Policy creation time
        :rtype: str
        """
        return self._PolicyCreateTime

    @PolicyCreateTime.setter
    def PolicyCreateTime(self, PolicyCreateTime):
        self._PolicyCreateTime = PolicyCreateTime

    @property
    def PolicySourceType(self):
        r"""Policy source type. Valid values: `System` (synched from the cluster); `Manual` (added manually).
        :rtype: str
        """
        return self._PolicySourceType

    @PolicySourceType.setter
    def PolicySourceType(self, PolicySourceType):
        self._PolicySourceType = PolicySourceType

    @property
    def NetworkPolicyPlugin(self):
        r"""Network plugin of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NetworkPolicyPlugin

    @NetworkPolicyPlugin.setter
    def NetworkPolicyPlugin(self, NetworkPolicyPlugin):
        self._NetworkPolicyPlugin = NetworkPolicyPlugin

    @property
    def PublishStatus(self):
        r"""Network policy status
        :rtype: str
        """
        return self._PublishStatus

    @PublishStatus.setter
    def PublishStatus(self, PublishStatus):
        self._PublishStatus = PublishStatus

    @property
    def PublishResult(self):
        r"""Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublishResult

    @PublishResult.setter
    def PublishResult(self, PublishResult):
        self._PublishResult = PublishResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._Namespace = params.get("Namespace")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        if params.get("CustomPolicy") is not None:
            self._CustomPolicy = []
            for item in params.get("CustomPolicy"):
                obj = NetworkCustomPolicy()
                obj._deserialize(item)
                self._CustomPolicy.append(obj)
        self._PodSelector = params.get("PodSelector")
        self._Description = params.get("Description")
        self._PolicyCreateTime = params.get("PolicyCreateTime")
        self._PolicySourceType = params.get("PolicySourceType")
        self._NetworkPolicyPlugin = params.get("NetworkPolicyPlugin")
        self._PublishStatus = params.get("PublishStatus")
        self._PublishResult = params.get("PublishResult")
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPolicyDiscoverRequest(AbstractModel):
    r"""DescribeNetworkFirewallPolicyDiscover request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPolicyDiscoverResponse(AbstractModel):
    r"""DescribeNetworkFirewallPolicyDiscover response structure.

    """

    def __init__(self):
        r"""
        :param _TaskStatus: Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :type TaskStatus: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskStatus = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        r"""Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPolicyListRequest(AbstractModel):
    r"""DescribeNetworkFirewallPolicyList request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ClusterId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPolicyListResponse(AbstractModel):
    r"""DescribeNetworkFirewallPolicyList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _NetPolicy: Cluster details
        :type NetPolicy: list of NetworkPolicyInfoItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._NetPolicy = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def NetPolicy(self):
        r"""Cluster details
        :rtype: list of NetworkPolicyInfoItem
        """
        return self._NetPolicy

    @NetPolicy.setter
    def NetPolicy(self, NetPolicy):
        self._NetPolicy = NetPolicy

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("NetPolicy") is not None:
            self._NetPolicy = []
            for item in params.get("NetPolicy"):
                obj = NetworkPolicyInfoItem()
                obj._deserialize(item)
                self._NetPolicy.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPolicyStatusRequest(AbstractModel):
    r"""DescribeNetworkFirewallPolicyStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPolicyStatusResponse(AbstractModel):
    r"""DescribeNetworkFirewallPolicyStatus response structure.

    """

    def __init__(self):
        r"""
        :param _TaskStatus: Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :type TaskStatus: str
        :param _TaskResult: Task result, such as `NameRepeat` and `K8sRuleIngressPortError`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type TaskResult: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskStatus = None
        self._TaskResult = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        r"""Task status. Valid values: `Task_Running`, `Task_Succ`, `Task_Error`, `Task_NoExist`.
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def TaskResult(self):
        r"""Task result, such as `NameRepeat` and `K8sRuleIngressPortError`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._TaskResult

    @TaskResult.setter
    def TaskResult(self, TaskResult):
        self._TaskResult = TaskResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._TaskResult = params.get("TaskResult")
        self._RequestId = params.get("RequestId")


class DescribeNetworkFirewallPolicyYamlDetailRequest(AbstractModel):
    r"""DescribeNetworkFirewallPolicyYamlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Policy ID
        :type Id: int
        """
        self._Id = None

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkFirewallPolicyYamlDetailResponse(AbstractModel):
    r"""DescribeNetworkFirewallPolicyYamlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _PolicyName: Policy name
        :type PolicyName: str
        :param _Yaml: Base64-encoded YAML string
Note: This field may return null, indicating that no valid values can be obtained.
        :type Yaml: str
        :param _Description: Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _PolicyCreateTime: Policy creation time
        :type PolicyCreateTime: str
        :param _PolicySourceType: Policy source type. Valid values: `System` (synched from the cluster); `Manual` (added manually).
        :type PolicySourceType: str
        :param _NetworkPolicyPlugin: Network plugin of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetworkPolicyPlugin: str
        :param _PublishStatus: Network policy status
        :type PublishStatus: str
        :param _PublishResult: Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublishResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ClusterId = None
        self._PolicyName = None
        self._Yaml = None
        self._Description = None
        self._PolicyCreateTime = None
        self._PolicySourceType = None
        self._NetworkPolicyPlugin = None
        self._PublishStatus = None
        self._PublishResult = None
        self._RequestId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def PolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._PolicyName

    @PolicyName.setter
    def PolicyName(self, PolicyName):
        self._PolicyName = PolicyName

    @property
    def Yaml(self):
        r"""Base64-encoded YAML string
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PolicyCreateTime(self):
        r"""Policy creation time
        :rtype: str
        """
        return self._PolicyCreateTime

    @PolicyCreateTime.setter
    def PolicyCreateTime(self, PolicyCreateTime):
        self._PolicyCreateTime = PolicyCreateTime

    @property
    def PolicySourceType(self):
        r"""Policy source type. Valid values: `System` (synched from the cluster); `Manual` (added manually).
        :rtype: str
        """
        return self._PolicySourceType

    @PolicySourceType.setter
    def PolicySourceType(self, PolicySourceType):
        self._PolicySourceType = PolicySourceType

    @property
    def NetworkPolicyPlugin(self):
        r"""Network plugin of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NetworkPolicyPlugin

    @NetworkPolicyPlugin.setter
    def NetworkPolicyPlugin(self, NetworkPolicyPlugin):
        self._NetworkPolicyPlugin = NetworkPolicyPlugin

    @property
    def PublishStatus(self):
        r"""Network policy status
        :rtype: str
        """
        return self._PublishStatus

    @PublishStatus.setter
    def PublishStatus(self, PublishStatus):
        self._PublishStatus = PublishStatus

    @property
    def PublishResult(self):
        r"""Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublishResult

    @PublishResult.setter
    def PublishResult(self, PublishResult):
        self._PublishResult = PublishResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._PolicyName = params.get("PolicyName")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        self._PolicyCreateTime = params.get("PolicyCreateTime")
        self._PolicySourceType = params.get("PolicySourceType")
        self._NetworkPolicyPlugin = params.get("NetworkPolicyPlugin")
        self._PublishStatus = params.get("PublishStatus")
        self._PublishResult = params.get("PublishResult")
        self._RequestId = params.get("RequestId")


class DescribeNewestVulRequest(AbstractModel):
    r"""DescribeNewestVul request structure.

    """


class DescribeNewestVulResponse(AbstractModel):
    r"""DescribeNewestVul response structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _SubmitTime: Disclosure time
        :type SubmitTime: str
        :param _Status: Emergency vulnerability risk information. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED` (scanned).
        :type Status: str
        :param _CVEID: Vulnerability CVE ID
        :type CVEID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PocID = None
        self._VulName = None
        self._SubmitTime = None
        self._Status = None
        self._CVEID = None
        self._RequestId = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def VulName(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def SubmitTime(self):
        r"""Disclosure time
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime

    @property
    def Status(self):
        r"""Emergency vulnerability risk information. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED` (scanned).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CVEID(self):
        r"""Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._VulName = params.get("VulName")
        self._SubmitTime = params.get("SubmitTime")
        self._Status = params.get("Status")
        self._CVEID = params.get("CVEID")
        self._RequestId = params.get("RequestId")


class DescribePostPayDetailRequest(AbstractModel):
    r"""DescribePostPayDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        """
        self._Limit = None
        self._Offset = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePostPayDetailResponse(AbstractModel):
    r"""DescribePostPayDetail response structure.

    """

    def __init__(self):
        r"""
        :param _SoftQuotaDayDetail: Elastic billing details
Note: This field may return null, indicating that no valid values can be obtained.
        :type SoftQuotaDayDetail: list of SoftQuotaDayInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SoftQuotaDayDetail = None
        self._RequestId = None

    @property
    def SoftQuotaDayDetail(self):
        r"""Elastic billing details
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of SoftQuotaDayInfo
        """
        return self._SoftQuotaDayDetail

    @SoftQuotaDayDetail.setter
    def SoftQuotaDayDetail(self, SoftQuotaDayDetail):
        self._SoftQuotaDayDetail = SoftQuotaDayDetail

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SoftQuotaDayDetail") is not None:
            self._SoftQuotaDayDetail = []
            for item in params.get("SoftQuotaDayDetail"):
                obj = SoftQuotaDayInfo()
                obj._deserialize(item)
                self._SoftQuotaDayDetail.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeProVersionInfoRequest(AbstractModel):
    r"""DescribeProVersionInfo request structure.

    """


class DescribeProVersionInfoResponse(AbstractModel):
    r"""DescribeProVersionInfo response structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time of the Pro Edition, which is not empty only when the edition is purchased.
Note: This field may return null, indicating that no valid values can be obtained.
        :type StartTime: str
        :param _EndTime: End time of the Pro Edition, which is not empty only when more resources are purchased.
Note: This field may return null, indicating that no valid values can be obtained.
        :type EndTime: str
        :param _CoresCnt: Number of cores to be purchased
        :type CoresCnt: int
        :param _MaxPostPayCoresCnt: Upper limit for elastic billing
        :type MaxPostPayCoresCnt: int
        :param _ResourceId: Resource ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ResourceId: str
        :param _BuyStatus: Purchase status
`Pending`: To be purchased.
`Normal`: Purchased.
`Isolate`: Isolated.
        :type BuyStatus: str
        :param _IsPurchased: Whether it has been purchased before. Valid values: `false` (no); `true` (yes).
        :type IsPurchased: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._StartTime = None
        self._EndTime = None
        self._CoresCnt = None
        self._MaxPostPayCoresCnt = None
        self._ResourceId = None
        self._BuyStatus = None
        self._IsPurchased = None
        self._RequestId = None

    @property
    def StartTime(self):
        r"""Start time of the Pro Edition, which is not empty only when the edition is purchased.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time of the Pro Edition, which is not empty only when more resources are purchased.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def CoresCnt(self):
        r"""Number of cores to be purchased
        :rtype: int
        """
        return self._CoresCnt

    @CoresCnt.setter
    def CoresCnt(self, CoresCnt):
        self._CoresCnt = CoresCnt

    @property
    def MaxPostPayCoresCnt(self):
        r"""Upper limit for elastic billing
        :rtype: int
        """
        return self._MaxPostPayCoresCnt

    @MaxPostPayCoresCnt.setter
    def MaxPostPayCoresCnt(self, MaxPostPayCoresCnt):
        self._MaxPostPayCoresCnt = MaxPostPayCoresCnt

    @property
    def ResourceId(self):
        r"""Resource ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def BuyStatus(self):
        r"""Purchase status
`Pending`: To be purchased.
`Normal`: Purchased.
`Isolate`: Isolated.
        :rtype: str
        """
        return self._BuyStatus

    @BuyStatus.setter
    def BuyStatus(self, BuyStatus):
        self._BuyStatus = BuyStatus

    @property
    def IsPurchased(self):
        r"""Whether it has been purchased before. Valid values: `false` (no); `true` (yes).
        :rtype: bool
        """
        return self._IsPurchased

    @IsPurchased.setter
    def IsPurchased(self, IsPurchased):
        self._IsPurchased = IsPurchased

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._CoresCnt = params.get("CoresCnt")
        self._MaxPostPayCoresCnt = params.get("MaxPostPayCoresCnt")
        self._ResourceId = params.get("ResourceId")
        self._BuyStatus = params.get("BuyStatus")
        self._IsPurchased = params.get("IsPurchased")
        self._RequestId = params.get("RequestId")


class DescribePromotionActivityRequest(AbstractModel):
    r"""DescribePromotionActivity request structure.

    """

    def __init__(self):
        r"""
        :param _ActiveID: Promotion ID
        :type ActiveID: int
        """
        self._ActiveID = None

    @property
    def ActiveID(self):
        r"""Promotion ID
        :rtype: int
        """
        return self._ActiveID

    @ActiveID.setter
    def ActiveID(self, ActiveID):
        self._ActiveID = ActiveID


    def _deserialize(self, params):
        self._ActiveID = params.get("ActiveID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePromotionActivityResponse(AbstractModel):
    r"""DescribePromotionActivity response structure.

    """

    def __init__(self):
        r"""
        :param _List: Promotion content
        :type List: list of PromotionActivityContent
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Promotion content
        :rtype: list of PromotionActivityContent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = PromotionActivityContent()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePublicKeyRequest(AbstractModel):
    r"""DescribePublicKey request structure.

    """


class DescribePublicKeyResponse(AbstractModel):
    r"""DescribePublicKey response structure.

    """

    def __init__(self):
        r"""
        :param _PublicKey: Public key
        :type PublicKey: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._PublicKey = None
        self._RequestId = None

    @property
    def PublicKey(self):
        r"""Public key
        :rtype: str
        """
        return self._PublicKey

    @PublicKey.setter
    def PublicKey(self, PublicKey):
        self._PublicKey = PublicKey

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PublicKey = params.get("PublicKey")
        self._RequestId = params.get("RequestId")


class DescribePurchaseStateInfoRequest(AbstractModel):
    r"""DescribePurchaseStateInfo request structure.

    """


class DescribePurchaseStateInfoResponse(AbstractModel):
    r"""DescribePurchaseStateInfo response structure.

    """

    def __init__(self):
        r"""
        :param _State: Valid values: `0` (available for trial and purchase); `1` (available for purchase only after failed trial review or trial expiration); `2` (trial effective); `3` (Pro Edition effective); `4` (Pro Edition expired).
        :type State: int
        :param _CoresCnt: Total number of cores
Note: This field may return null, indicating that no valid values can be obtained.
        :type CoresCnt: int
        :param _AuthorizedCoresCnt: Number of purchased cores
Note: This field may return null, indicating that no valid values can be obtained.
        :type AuthorizedCoresCnt: int
        :param _ImageCnt: Number of images
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageCnt: int
        :param _AuthorizedImageCnt: Number of licensed images
Note: This field may return null, indicating that no valid values can be obtained.
        :type AuthorizedImageCnt: int
        :param _PurchasedAuthorizedCnt: Number of purchased image licenses
Note: This field may return null, indicating that no valid values can be obtained.
        :type PurchasedAuthorizedCnt: int
        :param _ExpirationTime: Expiration time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ExpirationTime: str
        :param _AutomaticRenewal: Valid values: `0` (initial status, which is the default value and not set by the user); `1` (auto-renewal); `2` (no auto-renewal, which is specified by the user).
Note: This field may return null, indicating that no valid values can be obtained.
        :type AutomaticRenewal: int
        :param _GivenAuthorizedCnt: Number of free image licenses during the trial, which may expire.
Note: This field may return null, indicating that no valid values can be obtained.
        :type GivenAuthorizedCnt: int
        :param _BeginTime: Start time
Note: This field may return null, indicating that no valid values can be obtained.
        :type BeginTime: str
        :param _SubState: Sub-status, the meaning of which is subject to the `State` field.
Valid values when `State` is `4`: `ISOLATE` (isolated); `DESTROED` (terminated).
Note: This field may return null, indicating that no valid values can be obtained.
        :type SubState: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._State = None
        self._CoresCnt = None
        self._AuthorizedCoresCnt = None
        self._ImageCnt = None
        self._AuthorizedImageCnt = None
        self._PurchasedAuthorizedCnt = None
        self._ExpirationTime = None
        self._AutomaticRenewal = None
        self._GivenAuthorizedCnt = None
        self._BeginTime = None
        self._SubState = None
        self._RequestId = None

    @property
    def State(self):
        r"""Valid values: `0` (available for trial and purchase); `1` (available for purchase only after failed trial review or trial expiration); `2` (trial effective); `3` (Pro Edition effective); `4` (Pro Edition expired).
        :rtype: int
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def CoresCnt(self):
        r"""Total number of cores
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CoresCnt

    @CoresCnt.setter
    def CoresCnt(self, CoresCnt):
        self._CoresCnt = CoresCnt

    @property
    def AuthorizedCoresCnt(self):
        r"""Number of purchased cores
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AuthorizedCoresCnt

    @AuthorizedCoresCnt.setter
    def AuthorizedCoresCnt(self, AuthorizedCoresCnt):
        self._AuthorizedCoresCnt = AuthorizedCoresCnt

    @property
    def ImageCnt(self):
        r"""Number of images
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def AuthorizedImageCnt(self):
        r"""Number of licensed images
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AuthorizedImageCnt

    @AuthorizedImageCnt.setter
    def AuthorizedImageCnt(self, AuthorizedImageCnt):
        self._AuthorizedImageCnt = AuthorizedImageCnt

    @property
    def PurchasedAuthorizedCnt(self):
        r"""Number of purchased image licenses
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PurchasedAuthorizedCnt

    @PurchasedAuthorizedCnt.setter
    def PurchasedAuthorizedCnt(self, PurchasedAuthorizedCnt):
        self._PurchasedAuthorizedCnt = PurchasedAuthorizedCnt

    @property
    def ExpirationTime(self):
        r"""Expiration time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ExpirationTime

    @ExpirationTime.setter
    def ExpirationTime(self, ExpirationTime):
        self._ExpirationTime = ExpirationTime

    @property
    def AutomaticRenewal(self):
        r"""Valid values: `0` (initial status, which is the default value and not set by the user); `1` (auto-renewal); `2` (no auto-renewal, which is specified by the user).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AutomaticRenewal

    @AutomaticRenewal.setter
    def AutomaticRenewal(self, AutomaticRenewal):
        self._AutomaticRenewal = AutomaticRenewal

    @property
    def GivenAuthorizedCnt(self):
        r"""Number of free image licenses during the trial, which may expire.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._GivenAuthorizedCnt

    @GivenAuthorizedCnt.setter
    def GivenAuthorizedCnt(self, GivenAuthorizedCnt):
        self._GivenAuthorizedCnt = GivenAuthorizedCnt

    @property
    def BeginTime(self):
        r"""Start time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def SubState(self):
        r"""Sub-status, the meaning of which is subject to the `State` field.
Valid values when `State` is `4`: `ISOLATE` (isolated); `DESTROED` (terminated).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SubState

    @SubState.setter
    def SubState(self, SubState):
        self._SubState = SubState

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._State = params.get("State")
        self._CoresCnt = params.get("CoresCnt")
        self._AuthorizedCoresCnt = params.get("AuthorizedCoresCnt")
        self._ImageCnt = params.get("ImageCnt")
        self._AuthorizedImageCnt = params.get("AuthorizedImageCnt")
        self._PurchasedAuthorizedCnt = params.get("PurchasedAuthorizedCnt")
        self._ExpirationTime = params.get("ExpirationTime")
        self._AutomaticRenewal = params.get("AutomaticRenewal")
        self._GivenAuthorizedCnt = params.get("GivenAuthorizedCnt")
        self._BeginTime = params.get("BeginTime")
        self._SubState = params.get("SubState")
        self._RequestId = params.get("RequestId")


class DescribeRefreshTaskRequest(AbstractModel):
    r"""DescribeRefreshTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        """
        self._TaskId = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRefreshTaskResponse(AbstractModel):
    r"""DescribeRefreshTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskStatus: Refresh task status. Valid values: `Task_New`, `Task_Running`, `Task_Finish`, `Task_Error`, `Task_NoExist`.
        :type TaskStatus: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskStatus = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        r"""Refresh task status. Valid values: `Task_New`, `Task_Running`, `Task_Finish`, `Task_Error`, `Task_NoExist`.
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._RequestId = params.get("RequestId")


class DescribeReverseShellDetailRequest(AbstractModel):
    r"""DescribeReverseShellDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        """
        self._EventId = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellDetailResponse(AbstractModel):
    r"""DescribeReverseShellDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventBaseInfo: Basic information of the event
        :type EventBaseInfo: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        :param _ProcessInfo: Process information
        :type ProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        :param _ParentProcessInfo: Parent process information
        :type ParentProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        :param _EventDetail: Event description
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.ReverseShellEventDescription`
        :param _AncestorProcessInfo: Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventBaseInfo = None
        self._ProcessInfo = None
        self._ParentProcessInfo = None
        self._EventDetail = None
        self._AncestorProcessInfo = None
        self._RequestId = None

    @property
    def EventBaseInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        """
        return self._EventBaseInfo

    @EventBaseInfo.setter
    def EventBaseInfo(self, EventBaseInfo):
        self._EventBaseInfo = EventBaseInfo

    @property
    def ProcessInfo(self):
        r"""Process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        """
        return self._ProcessInfo

    @ProcessInfo.setter
    def ProcessInfo(self, ProcessInfo):
        self._ProcessInfo = ProcessInfo

    @property
    def ParentProcessInfo(self):
        r"""Parent process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        """
        return self._ParentProcessInfo

    @ParentProcessInfo.setter
    def ParentProcessInfo(self, ParentProcessInfo):
        self._ParentProcessInfo = ParentProcessInfo

    @property
    def EventDetail(self):
        r"""Event description
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ReverseShellEventDescription`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def AncestorProcessInfo(self):
        r"""Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._AncestorProcessInfo

    @AncestorProcessInfo.setter
    def AncestorProcessInfo(self, AncestorProcessInfo):
        self._AncestorProcessInfo = AncestorProcessInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventBaseInfo") is not None:
            self._EventBaseInfo = RunTimeEventBaseInfo()
            self._EventBaseInfo._deserialize(params.get("EventBaseInfo"))
        if params.get("ProcessInfo") is not None:
            self._ProcessInfo = ProcessDetailInfo()
            self._ProcessInfo._deserialize(params.get("ProcessInfo"))
        if params.get("ParentProcessInfo") is not None:
            self._ParentProcessInfo = ProcessDetailBaseInfo()
            self._ParentProcessInfo._deserialize(params.get("ParentProcessInfo"))
        if params.get("EventDetail") is not None:
            self._EventDetail = ReverseShellEventDescription()
            self._EventDetail._deserialize(params.get("EventDetail"))
        if params.get("AncestorProcessInfo") is not None:
            self._AncestorProcessInfo = ProcessBaseInfo()
            self._AncestorProcessInfo._deserialize(params.get("AncestorProcessInfo"))
        self._RequestId = params.get("RequestId")


class DescribeReverseShellEventsExportRequest(AbstractModel):
    r"""DescribeReverseShellEventsExport request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellEventsExportResponse(AbstractModel):
    r"""DescribeReverseShellEventsExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _JobId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._JobId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def JobId(self):
        r"""Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DescribeReverseShellEventsRequest(AbstractModel):
    r"""DescribeReverseShellEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameters
`InnerNetAlarmShow` - int - Required: Values: `1` (show private network alert); `0` (do not show)
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameters
`InnerNetAlarmShow` - int - Required: Values: `1` (show private network alert); `0` (do not show)
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellEventsResponse(AbstractModel):
    r"""DescribeReverseShellEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _EventSet: Array of reverse shells
        :type EventSet: list of ReverseShellEventInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._EventSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EventSet(self):
        r"""Array of reverse shells
        :rtype: list of ReverseShellEventInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = ReverseShellEventInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeReverseShellWhiteListDetailRequest(AbstractModel):
    r"""DescribeReverseShellWhiteListDetail request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListId: Allowed item ID
        :type WhiteListId: str
        """
        self._WhiteListId = None

    @property
    def WhiteListId(self):
        r"""Allowed item ID
        :rtype: str
        """
        return self._WhiteListId

    @WhiteListId.setter
    def WhiteListId(self, WhiteListId):
        self._WhiteListId = WhiteListId


    def _deserialize(self, params):
        self._WhiteListId = params.get("WhiteListId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellWhiteListDetailResponse(AbstractModel):
    r"""DescribeReverseShellWhiteListDetail response structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListDetailInfo: Basic information of the event
        :type WhiteListDetailInfo: :class:`tencentcloud.tcss.v20201101.models.ReverseShellWhiteListInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WhiteListDetailInfo = None
        self._RequestId = None

    @property
    def WhiteListDetailInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ReverseShellWhiteListInfo`
        """
        return self._WhiteListDetailInfo

    @WhiteListDetailInfo.setter
    def WhiteListDetailInfo(self, WhiteListDetailInfo):
        self._WhiteListDetailInfo = WhiteListDetailInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WhiteListDetailInfo") is not None:
            self._WhiteListDetailInfo = ReverseShellWhiteListInfo()
            self._WhiteListDetailInfo._deserialize(params.get("WhiteListDetailInfo"))
        self._RequestId = params.get("RequestId")


class DescribeReverseShellWhiteListsRequest(AbstractModel):
    r"""DescribeReverseShellWhiteLists request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeReverseShellWhiteListsResponse(AbstractModel):
    r"""DescribeReverseShellWhiteLists response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _WhiteListSet: Allowlist
        :type WhiteListSet: list of ReverseShellWhiteListBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._WhiteListSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def WhiteListSet(self):
        r"""Allowlist
        :rtype: list of ReverseShellWhiteListBaseInfo
        """
        return self._WhiteListSet

    @WhiteListSet.setter
    def WhiteListSet(self, WhiteListSet):
        self._WhiteListSet = WhiteListSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("WhiteListSet") is not None:
            self._WhiteListSet = []
            for item in params.get("WhiteListSet"):
                obj = ReverseShellWhiteListBaseInfo()
                obj._deserialize(item)
                self._WhiteListSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRiskListRequest(AbstractModel):
    r"""DescribeRiskList request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: ID of the cluster to be queried. If it is not specified, all risk items will be queried.
        :type ClusterId: str
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `RiskLevel` (risk level); `RiskTarget` (check target and risky target); `RiskType` (risk type); `RiskAttribute` (risk type of the check item).
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._ClusterId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def ClusterId(self):
        r"""ID of the cluster to be queried. If it is not specified, all risk items will be queried.
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `RiskLevel` (risk level); `RiskTarget` (check target and risky target); `RiskType` (risk type); `RiskAttribute` (risk type of the check item).
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskListResponse(AbstractModel):
    r"""DescribeRiskList response structure.

    """

    def __init__(self):
        r"""
        :param _ClusterRiskItems: Array of risk details
        :type ClusterRiskItems: list of ClusterRiskItem
        :param _TotalCount: Total number of risk items
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ClusterRiskItems = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ClusterRiskItems(self):
        r"""Array of risk details
        :rtype: list of ClusterRiskItem
        """
        return self._ClusterRiskItems

    @ClusterRiskItems.setter
    def ClusterRiskItems(self, ClusterRiskItems):
        self._ClusterRiskItems = ClusterRiskItems

    @property
    def TotalCount(self):
        r"""Total number of risk items
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ClusterRiskItems") is not None:
            self._ClusterRiskItems = []
            for item in params.get("ClusterRiskItems"):
                obj = ClusterRiskItem()
                obj._deserialize(item)
                self._ClusterRiskItems.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallDetailRequest(AbstractModel):
    r"""DescribeRiskSyscallDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        """
        self._EventId = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskSyscallDetailResponse(AbstractModel):
    r"""DescribeRiskSyscallDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventBaseInfo: Basic information of the event
        :type EventBaseInfo: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        :param _ProcessInfo: Process information
        :type ProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        :param _ParentProcessInfo: Parent process information
        :type ParentProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        :param _EventDetail: Event description
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallEventDescription`
        :param _AncestorProcessInfo: Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessInfo: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventBaseInfo = None
        self._ProcessInfo = None
        self._ParentProcessInfo = None
        self._EventDetail = None
        self._AncestorProcessInfo = None
        self._RequestId = None

    @property
    def EventBaseInfo(self):
        r"""Basic information of the event
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RunTimeEventBaseInfo`
        """
        return self._EventBaseInfo

    @EventBaseInfo.setter
    def EventBaseInfo(self, EventBaseInfo):
        self._EventBaseInfo = EventBaseInfo

    @property
    def ProcessInfo(self):
        r"""Process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailInfo`
        """
        return self._ProcessInfo

    @ProcessInfo.setter
    def ProcessInfo(self, ProcessInfo):
        self._ProcessInfo = ProcessInfo

    @property
    def ParentProcessInfo(self):
        r"""Parent process information
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessDetailBaseInfo`
        """
        return self._ParentProcessInfo

    @ParentProcessInfo.setter
    def ParentProcessInfo(self, ParentProcessInfo):
        self._ParentProcessInfo = ParentProcessInfo

    @property
    def EventDetail(self):
        r"""Event description
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallEventDescription`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def AncestorProcessInfo(self):
        r"""Ancestor process information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProcessBaseInfo`
        """
        return self._AncestorProcessInfo

    @AncestorProcessInfo.setter
    def AncestorProcessInfo(self, AncestorProcessInfo):
        self._AncestorProcessInfo = AncestorProcessInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventBaseInfo") is not None:
            self._EventBaseInfo = RunTimeEventBaseInfo()
            self._EventBaseInfo._deserialize(params.get("EventBaseInfo"))
        if params.get("ProcessInfo") is not None:
            self._ProcessInfo = ProcessDetailInfo()
            self._ProcessInfo._deserialize(params.get("ProcessInfo"))
        if params.get("ParentProcessInfo") is not None:
            self._ParentProcessInfo = ProcessDetailBaseInfo()
            self._ParentProcessInfo._deserialize(params.get("ParentProcessInfo"))
        if params.get("EventDetail") is not None:
            self._EventDetail = RiskSyscallEventDescription()
            self._EventDetail._deserialize(params.get("EventDetail"))
        if params.get("AncestorProcessInfo") is not None:
            self._AncestorProcessInfo = ProcessBaseInfo()
            self._AncestorProcessInfo._deserialize(params.get("AncestorProcessInfo"))
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallEventsExportRequest(AbstractModel):
    r"""DescribeRiskSyscallEventsExport request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskSyscallEventsExportResponse(AbstractModel):
    r"""DescribeRiskSyscallEventsExport response structure.

    """

    def __init__(self):
        r"""
        :param _DownloadUrl: Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type DownloadUrl: str
        :param _JobId: Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DownloadUrl = None
        self._JobId = None
        self._RequestId = None

    @property
    def DownloadUrl(self):
        r"""Excel download URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def JobId(self):
        r"""Task ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadUrl = params.get("DownloadUrl")
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallEventsRequest(AbstractModel):
    r"""DescribeRiskSyscallEvents request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskSyscallEventsResponse(AbstractModel):
    r"""DescribeRiskSyscallEvents response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _EventSet: Array of high-risk syscalls
        :type EventSet: list of RiskSyscallEventInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._EventSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EventSet(self):
        r"""Array of high-risk syscalls
        :rtype: list of RiskSyscallEventInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = RiskSyscallEventInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallNamesRequest(AbstractModel):
    r"""DescribeRiskSyscallNames request structure.

    """


class DescribeRiskSyscallNamesResponse(AbstractModel):
    r"""DescribeRiskSyscallNames response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _SyscallNames: List of syscall names
        :type SyscallNames: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._SyscallNames = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def SyscallNames(self):
        r"""List of syscall names
        :rtype: list of str
        """
        return self._SyscallNames

    @SyscallNames.setter
    def SyscallNames(self, SyscallNames):
        self._SyscallNames = SyscallNames

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._SyscallNames = params.get("SyscallNames")
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallWhiteListDetailRequest(AbstractModel):
    r"""DescribeRiskSyscallWhiteListDetail request structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListId: Allowed item ID
        :type WhiteListId: str
        """
        self._WhiteListId = None

    @property
    def WhiteListId(self):
        r"""Allowed item ID
        :rtype: str
        """
        return self._WhiteListId

    @WhiteListId.setter
    def WhiteListId(self, WhiteListId):
        self._WhiteListId = WhiteListId


    def _deserialize(self, params):
        self._WhiteListId = params.get("WhiteListId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskSyscallWhiteListDetailResponse(AbstractModel):
    r"""DescribeRiskSyscallWhiteListDetail response structure.

    """

    def __init__(self):
        r"""
        :param _WhiteListDetailInfo: Basic information of the allowlist
        :type WhiteListDetailInfo: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallWhiteListInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WhiteListDetailInfo = None
        self._RequestId = None

    @property
    def WhiteListDetailInfo(self):
        r"""Basic information of the allowlist
        :rtype: :class:`tencentcloud.tcss.v20201101.models.RiskSyscallWhiteListInfo`
        """
        return self._WhiteListDetailInfo

    @WhiteListDetailInfo.setter
    def WhiteListDetailInfo(self, WhiteListDetailInfo):
        self._WhiteListDetailInfo = WhiteListDetailInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WhiteListDetailInfo") is not None:
            self._WhiteListDetailInfo = RiskSyscallWhiteListInfo()
            self._WhiteListDetailInfo._deserialize(params.get("WhiteListDetailInfo"))
        self._RequestId = params.get("RequestId")


class DescribeRiskSyscallWhiteListsRequest(AbstractModel):
    r"""DescribeRiskSyscallWhiteLists request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :type Filters: list of RunTimeFilters
        :param _Order: Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter parameter. "Filters":[{"Name":"Status","Values":["2"]}]
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRiskSyscallWhiteListsResponse(AbstractModel):
    r"""DescribeRiskSyscallWhiteLists response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of events
        :type TotalCount: int
        :param _WhiteListSet: Allowlist
        :type WhiteListSet: list of RiskSyscallWhiteListBaseInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._WhiteListSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def WhiteListSet(self):
        r"""Allowlist
        :rtype: list of RiskSyscallWhiteListBaseInfo
        """
        return self._WhiteListSet

    @WhiteListSet.setter
    def WhiteListSet(self, WhiteListSet):
        self._WhiteListSet = WhiteListSet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("WhiteListSet") is not None:
            self._WhiteListSet = []
            for item in params.get("WhiteListSet"):
                obj = RiskSyscallWhiteListBaseInfo()
                obj._deserialize(item)
                self._WhiteListSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeScanIgnoreVulListRequest(AbstractModel):
    r"""DescribeScanIgnoreVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>CVEID- string - Required: No - CVE No.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order. Valid values: `DESC`, `ASC`.
        :type Order: str
        :param _By: Sorting field: `UpdateTime`.
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>CVEID- string - Required: No - CVE No.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order. Valid values: `DESC`, `ASC`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `UpdateTime`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScanIgnoreVulListResponse(AbstractModel):
    r"""DescribeScanIgnoreVulList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of vulnerabilities
        :type List: list of ScanIgnoreVul
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of vulnerabilities
        :rtype: list of ScanIgnoreVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = ScanIgnoreVul()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSearchExportListRequest(AbstractModel):
    r"""DescribeSearchExportList request structure.

    """

    def __init__(self):
        r"""
        :param _Query: ES query condition in JSON
        :type Query: str
        """
        self._Query = None

    @property
    def Query(self):
        r"""ES query condition in JSON
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query


    def _deserialize(self, params):
        self._Query = params.get("Query")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSearchExportListResponse(AbstractModel):
    r"""DescribeSearchExportList response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class DescribeSearchLogsRequest(AbstractModel):
    r"""DescribeSearchLogs request structure.

    """


class DescribeSearchLogsResponse(AbstractModel):
    r"""DescribeSearchLogs response structure.

    """

    def __init__(self):
        r"""
        :param _Data: Historical search records, the latest ten of which are retained.
        :type Data: list of str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        r"""Historical search records, the latest ten of which are retained.
        :rtype: list of str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeSearchTemplatesRequest(AbstractModel):
    r"""DescribeSearchTemplates request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        """
        self._Offset = None
        self._Limit = None

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSearchTemplatesResponse(AbstractModel):
    r"""DescribeSearchTemplates response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: Template list
        :type List: list of SearchTemplate
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""Template list
        :rtype: list of SearchTemplate
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SearchTemplate()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecEventsTendencyRequest(AbstractModel):
    r"""DescribeSecEventsTendency request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._StartTime = None
        self._EndTime = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecEventsTendencyResponse(AbstractModel):
    r"""DescribeSecEventsTendency response structure.

    """

    def __init__(self):
        r"""
        :param _EventTendencySet: List of trends of security events at runtime
        :type EventTendencySet: list of SecTendencyEventInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventTendencySet = None
        self._RequestId = None

    @property
    def EventTendencySet(self):
        r"""List of trends of security events at runtime
        :rtype: list of SecTendencyEventInfo
        """
        return self._EventTendencySet

    @EventTendencySet.setter
    def EventTendencySet(self, EventTendencySet):
        self._EventTendencySet = EventTendencySet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventTendencySet") is not None:
            self._EventTendencySet = []
            for item in params.get("EventTendencySet"):
                obj = SecTendencyEventInfo()
                obj._deserialize(item)
                self._EventTendencySet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogAlertMsgRequest(AbstractModel):
    r"""DescribeSecLogAlertMsg request structure.

    """

    def __init__(self):
        r"""
        :param _Type: Alert type
Log storage alert: log_reserve_full
Log storage period alert: log_save_day_limit
Unavailable Kafka instance/public domain name: kafka_instance_domain_unavailable
Incorrect Kafka username/password: kafka_user_passwd_wrong
Kafka backend error field: kafka_field_wrong
        :type Type: list of str
        """
        self._Type = None

    @property
    def Type(self):
        r"""Alert type
Log storage alert: log_reserve_full
Log storage period alert: log_save_day_limit
Unavailable Kafka instance/public domain name: kafka_instance_domain_unavailable
Incorrect Kafka username/password: kafka_user_passwd_wrong
Kafka backend error field: kafka_field_wrong
        :rtype: list of str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecLogAlertMsgResponse(AbstractModel):
    r"""DescribeSecLogAlertMsg response structure.

    """

    def __init__(self):
        r"""
        :param _List: Alert message queue
        :type List: list of SecLogAlertMsgInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Alert message queue
        :rtype: list of SecLogAlertMsgInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SecLogAlertMsgInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogCleanSettingInfoRequest(AbstractModel):
    r"""DescribeSecLogCleanSettingInfo request structure.

    """


class DescribeSecLogCleanSettingInfoResponse(AbstractModel):
    r"""DescribeSecLogCleanSettingInfo response structure.

    """

    def __init__(self):
        r"""
        :param _ReservesLimit: Minimum storage for triggering clearing
        :type ReservesLimit: int
        :param _ReservesDeadline: Storage limit for stopping clearing
        :type ReservesDeadline: int
        :param _DayLimit: Storage period for triggering clearing
        :type DayLimit: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ReservesLimit = None
        self._ReservesDeadline = None
        self._DayLimit = None
        self._RequestId = None

    @property
    def ReservesLimit(self):
        r"""Minimum storage for triggering clearing
        :rtype: int
        """
        return self._ReservesLimit

    @ReservesLimit.setter
    def ReservesLimit(self, ReservesLimit):
        self._ReservesLimit = ReservesLimit

    @property
    def ReservesDeadline(self):
        r"""Storage limit for stopping clearing
        :rtype: int
        """
        return self._ReservesDeadline

    @ReservesDeadline.setter
    def ReservesDeadline(self, ReservesDeadline):
        self._ReservesDeadline = ReservesDeadline

    @property
    def DayLimit(self):
        r"""Storage period for triggering clearing
        :rtype: int
        """
        return self._DayLimit

    @DayLimit.setter
    def DayLimit(self, DayLimit):
        self._DayLimit = DayLimit

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ReservesLimit = params.get("ReservesLimit")
        self._ReservesDeadline = params.get("ReservesDeadline")
        self._DayLimit = params.get("DayLimit")
        self._RequestId = params.get("RequestId")


class DescribeSecLogDeliveryClsOptionsRequest(AbstractModel):
    r"""DescribeSecLogDeliveryClsOptions request structure.

    """

    def __init__(self):
        r"""
        :param _ClsRegion: Region
        :type ClsRegion: str
        """
        self._ClsRegion = None

    @property
    def ClsRegion(self):
        r"""Region
        :rtype: str
        """
        return self._ClsRegion

    @ClsRegion.setter
    def ClsRegion(self, ClsRegion):
        self._ClsRegion = ClsRegion


    def _deserialize(self, params):
        self._ClsRegion = params.get("ClsRegion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecLogDeliveryClsOptionsResponse(AbstractModel):
    r"""DescribeSecLogDeliveryClsOptions response structure.

    """

    def __init__(self):
        r"""
        :param _LogSetList: List of optional CLS logsets, which is returned only when `ClsRegion` is not empty.
        :type LogSetList: list of ClsLogsetInfo
        :param _RegionList: List of optional regions, which is returned only when `ClsRegion` is empty.
        :type RegionList: list of RegionInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LogSetList = None
        self._RegionList = None
        self._RequestId = None

    @property
    def LogSetList(self):
        r"""List of optional CLS logsets, which is returned only when `ClsRegion` is not empty.
        :rtype: list of ClsLogsetInfo
        """
        return self._LogSetList

    @LogSetList.setter
    def LogSetList(self, LogSetList):
        self._LogSetList = LogSetList

    @property
    def RegionList(self):
        r"""List of optional regions, which is returned only when `ClsRegion` is empty.
        :rtype: list of RegionInfo
        """
        return self._RegionList

    @RegionList.setter
    def RegionList(self, RegionList):
        self._RegionList = RegionList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LogSetList") is not None:
            self._LogSetList = []
            for item in params.get("LogSetList"):
                obj = ClsLogsetInfo()
                obj._deserialize(item)
                self._LogSetList.append(obj)
        if params.get("RegionList") is not None:
            self._RegionList = []
            for item in params.get("RegionList"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._RegionList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogDeliveryClsSettingRequest(AbstractModel):
    r"""DescribeSecLogDeliveryClsSetting request structure.

    """


class DescribeSecLogDeliveryClsSettingResponse(AbstractModel):
    r"""DescribeSecLogDeliveryClsSetting response structure.

    """

    def __init__(self):
        r"""
        :param _LogTypeList: List of log types
        :type LogTypeList: list of SecLogDeliveryClsSettingInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LogTypeList = None
        self._RequestId = None

    @property
    def LogTypeList(self):
        r"""List of log types
        :rtype: list of SecLogDeliveryClsSettingInfo
        """
        return self._LogTypeList

    @LogTypeList.setter
    def LogTypeList(self, LogTypeList):
        self._LogTypeList = LogTypeList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LogTypeList") is not None:
            self._LogTypeList = []
            for item in params.get("LogTypeList"):
                obj = SecLogDeliveryClsSettingInfo()
                obj._deserialize(item)
                self._LogTypeList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogDeliveryKafkaOptionsRequest(AbstractModel):
    r"""DescribeSecLogDeliveryKafkaOptions request structure.

    """

    def __init__(self):
        r"""
        :param _RegionID: Region. If this field was left blank, return all available regions.
        :type RegionID: str
        """
        self._RegionID = None

    @property
    def RegionID(self):
        r"""Region. If this field was left blank, return all available regions.
        :rtype: str
        """
        return self._RegionID

    @RegionID.setter
    def RegionID(self, RegionID):
        self._RegionID = RegionID


    def _deserialize(self, params):
        self._RegionID = params.get("RegionID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecLogDeliveryKafkaOptionsResponse(AbstractModel):
    r"""DescribeSecLogDeliveryKafkaOptions response structure.

    """

    def __init__(self):
        r"""
        :param _InstanceList: Instance list
        :type InstanceList: list of CKafkaInstanceInfo
        :param _RegionList: Region list
        :type RegionList: list of RegionInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._InstanceList = None
        self._RegionList = None
        self._RequestId = None

    @property
    def InstanceList(self):
        r"""Instance list
        :rtype: list of CKafkaInstanceInfo
        """
        return self._InstanceList

    @InstanceList.setter
    def InstanceList(self, InstanceList):
        self._InstanceList = InstanceList

    @property
    def RegionList(self):
        r"""Region list
        :rtype: list of RegionInfo
        """
        return self._RegionList

    @RegionList.setter
    def RegionList(self, RegionList):
        self._RegionList = RegionList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("InstanceList") is not None:
            self._InstanceList = []
            for item in params.get("InstanceList"):
                obj = CKafkaInstanceInfo()
                obj._deserialize(item)
                self._InstanceList.append(obj)
        if params.get("RegionList") is not None:
            self._RegionList = []
            for item in params.get("RegionList"):
                obj = RegionInfo()
                obj._deserialize(item)
                self._RegionList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogDeliveryKafkaSettingRequest(AbstractModel):
    r"""DescribeSecLogDeliveryKafkaSetting request structure.

    """


class DescribeSecLogDeliveryKafkaSettingResponse(AbstractModel):
    r"""DescribeSecLogDeliveryKafkaSetting response structure.

    """

    def __init__(self):
        r"""
        :param _InstanceID: Message queue instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceID: str
        :param _InstanceName: Message queue instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceName: str
        :param _Domain: Domain
Note: This field may return null, indicating that no valid values can be obtained.
        :type Domain: str
        :param _LogTypeList: List of log types
Note: This field may return null, indicating that no valid values can be obtained.
        :type LogTypeList: list of SecLogDeliveryKafkaSettingInfo
        :param _User: Username
Note: This field may return null, indicating that no valid values can be obtained.
        :type User: str
        :param _RegionID: Region ID
Note: This field may return `null`, indicating that no valid value was found.
        :type RegionID: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._InstanceID = None
        self._InstanceName = None
        self._Domain = None
        self._LogTypeList = None
        self._User = None
        self._RegionID = None
        self._RequestId = None

    @property
    def InstanceID(self):
        r"""Message queue instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def InstanceName(self):
        r"""Message queue instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Domain(self):
        r"""Domain
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def LogTypeList(self):
        r"""List of log types
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of SecLogDeliveryKafkaSettingInfo
        """
        return self._LogTypeList

    @LogTypeList.setter
    def LogTypeList(self, LogTypeList):
        self._LogTypeList = LogTypeList

    @property
    def User(self):
        r"""Username
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def RegionID(self):
        r"""Region ID
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: str
        """
        return self._RegionID

    @RegionID.setter
    def RegionID(self, RegionID):
        self._RegionID = RegionID

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._InstanceID = params.get("InstanceID")
        self._InstanceName = params.get("InstanceName")
        self._Domain = params.get("Domain")
        if params.get("LogTypeList") is not None:
            self._LogTypeList = []
            for item in params.get("LogTypeList"):
                obj = SecLogDeliveryKafkaSettingInfo()
                obj._deserialize(item)
                self._LogTypeList.append(obj)
        self._User = params.get("User")
        self._RegionID = params.get("RegionID")
        self._RequestId = params.get("RequestId")


class DescribeSecLogJoinObjectListRequest(AbstractModel):
    r"""DescribeSecLogJoinObjectList request structure.

    """

    def __init__(self):
        r"""
        :param _LogType: Log type
Container bash: "container_bash",
Container startup: "container_launch",
K8s API: "k8s_api"
        :type LogType: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filters.
<li>`Status` - String - Optional - Host status</li>
<li>`HostIP` - String - Optional - Private IP of the host</li>
<li>`PublicIP` - String - Optional - Public IP of the host</li>
<li>`HostName - String - Optional - Host name</li>
        :type Filters: list of RunTimeFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order
        :type Order: str
        """
        self._LogType = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def LogType(self):
        r"""Log type
Container bash: "container_bash",
Container startup: "container_launch",
K8s API: "k8s_api"
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filters.
<li>`Status` - String - Optional - Host status</li>
<li>`HostIP` - String - Optional - Private IP of the host</li>
<li>`PublicIP` - String - Optional - Public IP of the host</li>
<li>`HostName - String - Optional - Host name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._LogType = params.get("LogType")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSecLogJoinObjectListResponse(AbstractModel):
    r"""DescribeSecLogJoinObjectList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of accessed objects
        :type List: list of SecLogJoinObjectInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of accessed objects
        :rtype: list of SecLogJoinObjectInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SecLogJoinObjectInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogJoinTypeListRequest(AbstractModel):
    r"""DescribeSecLogJoinTypeList request structure.

    """


class DescribeSecLogJoinTypeListResponse(AbstractModel):
    r"""DescribeSecLogJoinTypeList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of log access types
        :type List: list of SecLogJoinInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of log access types
        :rtype: list of SecLogJoinInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SecLogJoinInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSecLogKafkaUINRequest(AbstractModel):
    r"""DescribeSecLogKafkaUIN request structure.

    """


class DescribeSecLogKafkaUINResponse(AbstractModel):
    r"""DescribeSecLogKafkaUIN response structure.

    """

    def __init__(self):
        r"""
        :param _DstUIN: Target UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :type DstUIN: str
        :param _Status: Licensing status
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DstUIN = None
        self._Status = None
        self._RequestId = None

    @property
    def DstUIN(self):
        r"""Target UIN
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DstUIN

    @DstUIN.setter
    def DstUIN(self, DstUIN):
        self._DstUIN = DstUIN

    @property
    def Status(self):
        r"""Licensing status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DstUIN = params.get("DstUIN")
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class DescribeSecLogVasInfoRequest(AbstractModel):
    r"""DescribeSecLogVasInfo request structure.

    """


class DescribeSecLogVasInfoResponse(AbstractModel):
    r"""DescribeSecLogVasInfo response structure.

    """

    def __init__(self):
        r"""
        :param _BuyStatus: Purchase status
`Pending`: To be purchased.
`Normal`: Purchased.
`Isolate`: Isolated.
        :type BuyStatus: str
        :param _LogSaveMonth: Storage period in months
        :type LogSaveMonth: int
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _LogCapacity: Storage capacity (GB)
        :type LogCapacity: int
        :param _ResourceID: Resource ID
        :type ResourceID: str
        :param _IsPurchased: Whether it has been purchased before. Valid values: `false` (no); `true` (yes).
        :type IsPurchased: bool
        :param _TrialCapacity: Trial storage capacity (GB)
        :type TrialCapacity: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._BuyStatus = None
        self._LogSaveMonth = None
        self._StartTime = None
        self._EndTime = None
        self._LogCapacity = None
        self._ResourceID = None
        self._IsPurchased = None
        self._TrialCapacity = None
        self._RequestId = None

    @property
    def BuyStatus(self):
        r"""Purchase status
`Pending`: To be purchased.
`Normal`: Purchased.
`Isolate`: Isolated.
        :rtype: str
        """
        return self._BuyStatus

    @BuyStatus.setter
    def BuyStatus(self, BuyStatus):
        self._BuyStatus = BuyStatus

    @property
    def LogSaveMonth(self):
        r"""Storage period in months
        :rtype: int
        """
        return self._LogSaveMonth

    @LogSaveMonth.setter
    def LogSaveMonth(self, LogSaveMonth):
        self._LogSaveMonth = LogSaveMonth

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def LogCapacity(self):
        r"""Storage capacity (GB)
        :rtype: int
        """
        return self._LogCapacity

    @LogCapacity.setter
    def LogCapacity(self, LogCapacity):
        self._LogCapacity = LogCapacity

    @property
    def ResourceID(self):
        r"""Resource ID
        :rtype: str
        """
        return self._ResourceID

    @ResourceID.setter
    def ResourceID(self, ResourceID):
        self._ResourceID = ResourceID

    @property
    def IsPurchased(self):
        r"""Whether it has been purchased before. Valid values: `false` (no); `true` (yes).
        :rtype: bool
        """
        return self._IsPurchased

    @IsPurchased.setter
    def IsPurchased(self, IsPurchased):
        self._IsPurchased = IsPurchased

    @property
    def TrialCapacity(self):
        r"""Trial storage capacity (GB)
        :rtype: int
        """
        return self._TrialCapacity

    @TrialCapacity.setter
    def TrialCapacity(self, TrialCapacity):
        self._TrialCapacity = TrialCapacity

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BuyStatus = params.get("BuyStatus")
        self._LogSaveMonth = params.get("LogSaveMonth")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._LogCapacity = params.get("LogCapacity")
        self._ResourceID = params.get("ResourceID")
        self._IsPurchased = params.get("IsPurchased")
        self._TrialCapacity = params.get("TrialCapacity")
        self._RequestId = params.get("RequestId")


class DescribeSupportDefenceVulRequest(AbstractModel):
    r"""DescribeSupportDefenceVul request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field. Disclosure time: `SubmitTime`.
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>Name- string - Required: No - Vulnerability name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field. Disclosure time: `SubmitTime`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSupportDefenceVulResponse(AbstractModel):
    r"""DescribeSupportDefenceVul response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of vulnerabilities that can be prevented
        :type List: list of SupportDefenceVul
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of vulnerabilities that can be prevented
        :rtype: list of SupportDefenceVul
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SupportDefenceVul()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeSystemVulListRequest(AbstractModel):
    r"""DescribeSystemVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSystemVulListResponse(AbstractModel):
    r"""DescribeSystemVulList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of vulnerabilities
        :type TotalCount: int
        :param _List: List of vulnerabilities
        :type List: list of VulInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of vulnerabilities
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of vulnerabilities
        :rtype: list of VulInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskResultSummaryRequest(AbstractModel):
    r"""DescribeTaskResultSummary request structure.

    """


class DescribeTaskResultSummaryResponse(AbstractModel):
    r"""DescribeTaskResultSummary response structure.

    """

    def __init__(self):
        r"""
        :param _SeriousRiskNodeCount: Number of nodes affected by critical risks in the last seven days
        :type SeriousRiskNodeCount: list of int non-negative
        :param _HighRiskNodeCount: Number of nodes affected by high risks in the last seven days
        :type HighRiskNodeCount: list of int non-negative
        :param _MiddleRiskNodeCount: Number of nodes affected by medium risks in the last seven days
        :type MiddleRiskNodeCount: list of int non-negative
        :param _HintRiskNodeCount: Number of nodes affected by prompt risks in the last seven days
        :type HintRiskNodeCount: list of int non-negative
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SeriousRiskNodeCount = None
        self._HighRiskNodeCount = None
        self._MiddleRiskNodeCount = None
        self._HintRiskNodeCount = None
        self._RequestId = None

    @property
    def SeriousRiskNodeCount(self):
        r"""Number of nodes affected by critical risks in the last seven days
        :rtype: list of int non-negative
        """
        return self._SeriousRiskNodeCount

    @SeriousRiskNodeCount.setter
    def SeriousRiskNodeCount(self, SeriousRiskNodeCount):
        self._SeriousRiskNodeCount = SeriousRiskNodeCount

    @property
    def HighRiskNodeCount(self):
        r"""Number of nodes affected by high risks in the last seven days
        :rtype: list of int non-negative
        """
        return self._HighRiskNodeCount

    @HighRiskNodeCount.setter
    def HighRiskNodeCount(self, HighRiskNodeCount):
        self._HighRiskNodeCount = HighRiskNodeCount

    @property
    def MiddleRiskNodeCount(self):
        r"""Number of nodes affected by medium risks in the last seven days
        :rtype: list of int non-negative
        """
        return self._MiddleRiskNodeCount

    @MiddleRiskNodeCount.setter
    def MiddleRiskNodeCount(self, MiddleRiskNodeCount):
        self._MiddleRiskNodeCount = MiddleRiskNodeCount

    @property
    def HintRiskNodeCount(self):
        r"""Number of nodes affected by prompt risks in the last seven days
        :rtype: list of int non-negative
        """
        return self._HintRiskNodeCount

    @HintRiskNodeCount.setter
    def HintRiskNodeCount(self, HintRiskNodeCount):
        self._HintRiskNodeCount = HintRiskNodeCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SeriousRiskNodeCount = params.get("SeriousRiskNodeCount")
        self._HighRiskNodeCount = params.get("HighRiskNodeCount")
        self._MiddleRiskNodeCount = params.get("MiddleRiskNodeCount")
        self._HintRiskNodeCount = params.get("HintRiskNodeCount")
        self._RequestId = params.get("RequestId")


class DescribeTcssSummaryRequest(AbstractModel):
    r"""DescribeTcssSummary request structure.

    """


class DescribeTcssSummaryResponse(AbstractModel):
    r"""DescribeTcssSummary response structure.

    """

    def __init__(self):
        r"""
        :param _ImageCnt: Total number of images
        :type ImageCnt: int
        :param _ScannedImageCnt: Number of scanned images
        :type ScannedImageCnt: int
        :param _UnScannedImageCnt: Number of images to be scanned
        :type UnScannedImageCnt: int
        :param _LocalImageCnt: Number of local images
        :type LocalImageCnt: int
        :param _RepositoryImageCnt: Number of repository images
        :type RepositoryImageCnt: int
        :param _RiskLocalImageCnt: Number of local images at risk
        :type RiskLocalImageCnt: int
        :param _RiskRepositoryImageCnt: Number of repository images at risk
        :type RiskRepositoryImageCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _RiskContainerCnt: Number of containers at risk
        :type RiskContainerCnt: int
        :param _ClusterCnt: Number of clusters
        :type ClusterCnt: int
        :param _RiskClusterCnt: Number of clusters at risk
        :type RiskClusterCnt: int
        :param _UnScannedVulCnt: Number of vulnerabilities to be scanned
        :type UnScannedVulCnt: int
        :param _RiskVulCnt: Number of risk vulnerabilities
        :type RiskVulCnt: int
        :param _UnScannedBaseLineCnt: Number of security baseline items to be scanned
        :type UnScannedBaseLineCnt: int
        :param _RiskBaseLineCnt: Number of security baseline risks
        :type RiskBaseLineCnt: int
        :param _RuntimeUnhandleEventCnt: Number of pending (high-risk) events at runtime
        :type RuntimeUnhandleEventCnt: int
        :param _UnScannedClusterCnt: Number of clusters to be scanned
        :type UnScannedClusterCnt: int
        :param _ScanImageStatus: Whether images are scanned
        :type ScanImageStatus: bool
        :param _ScanClusterStatus: Whether clusters are scanned
        :type ScanClusterStatus: bool
        :param _ScanBaseLineStatus: Whether baseline items are scanned
        :type ScanBaseLineStatus: bool
        :param _ScanVulStatus: Whether vulnerabilities are scanned for
        :type ScanVulStatus: bool
        :param _VulRiskImageCnt: Number of images affected by vulnerabilities
        :type VulRiskImageCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageCnt = None
        self._ScannedImageCnt = None
        self._UnScannedImageCnt = None
        self._LocalImageCnt = None
        self._RepositoryImageCnt = None
        self._RiskLocalImageCnt = None
        self._RiskRepositoryImageCnt = None
        self._ContainerCnt = None
        self._RiskContainerCnt = None
        self._ClusterCnt = None
        self._RiskClusterCnt = None
        self._UnScannedVulCnt = None
        self._RiskVulCnt = None
        self._UnScannedBaseLineCnt = None
        self._RiskBaseLineCnt = None
        self._RuntimeUnhandleEventCnt = None
        self._UnScannedClusterCnt = None
        self._ScanImageStatus = None
        self._ScanClusterStatus = None
        self._ScanBaseLineStatus = None
        self._ScanVulStatus = None
        self._VulRiskImageCnt = None
        self._RequestId = None

    @property
    def ImageCnt(self):
        r"""Total number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def ScannedImageCnt(self):
        r"""Number of scanned images
        :rtype: int
        """
        return self._ScannedImageCnt

    @ScannedImageCnt.setter
    def ScannedImageCnt(self, ScannedImageCnt):
        self._ScannedImageCnt = ScannedImageCnt

    @property
    def UnScannedImageCnt(self):
        r"""Number of images to be scanned
        :rtype: int
        """
        return self._UnScannedImageCnt

    @UnScannedImageCnt.setter
    def UnScannedImageCnt(self, UnScannedImageCnt):
        self._UnScannedImageCnt = UnScannedImageCnt

    @property
    def LocalImageCnt(self):
        r"""Number of local images
        :rtype: int
        """
        return self._LocalImageCnt

    @LocalImageCnt.setter
    def LocalImageCnt(self, LocalImageCnt):
        self._LocalImageCnt = LocalImageCnt

    @property
    def RepositoryImageCnt(self):
        r"""Number of repository images
        :rtype: int
        """
        return self._RepositoryImageCnt

    @RepositoryImageCnt.setter
    def RepositoryImageCnt(self, RepositoryImageCnt):
        self._RepositoryImageCnt = RepositoryImageCnt

    @property
    def RiskLocalImageCnt(self):
        r"""Number of local images at risk
        :rtype: int
        """
        return self._RiskLocalImageCnt

    @RiskLocalImageCnt.setter
    def RiskLocalImageCnt(self, RiskLocalImageCnt):
        self._RiskLocalImageCnt = RiskLocalImageCnt

    @property
    def RiskRepositoryImageCnt(self):
        r"""Number of repository images at risk
        :rtype: int
        """
        return self._RiskRepositoryImageCnt

    @RiskRepositoryImageCnt.setter
    def RiskRepositoryImageCnt(self, RiskRepositoryImageCnt):
        self._RiskRepositoryImageCnt = RiskRepositoryImageCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def RiskContainerCnt(self):
        r"""Number of containers at risk
        :rtype: int
        """
        return self._RiskContainerCnt

    @RiskContainerCnt.setter
    def RiskContainerCnt(self, RiskContainerCnt):
        self._RiskContainerCnt = RiskContainerCnt

    @property
    def ClusterCnt(self):
        r"""Number of clusters
        :rtype: int
        """
        return self._ClusterCnt

    @ClusterCnt.setter
    def ClusterCnt(self, ClusterCnt):
        self._ClusterCnt = ClusterCnt

    @property
    def RiskClusterCnt(self):
        r"""Number of clusters at risk
        :rtype: int
        """
        return self._RiskClusterCnt

    @RiskClusterCnt.setter
    def RiskClusterCnt(self, RiskClusterCnt):
        self._RiskClusterCnt = RiskClusterCnt

    @property
    def UnScannedVulCnt(self):
        r"""Number of vulnerabilities to be scanned
        :rtype: int
        """
        return self._UnScannedVulCnt

    @UnScannedVulCnt.setter
    def UnScannedVulCnt(self, UnScannedVulCnt):
        self._UnScannedVulCnt = UnScannedVulCnt

    @property
    def RiskVulCnt(self):
        r"""Number of risk vulnerabilities
        :rtype: int
        """
        return self._RiskVulCnt

    @RiskVulCnt.setter
    def RiskVulCnt(self, RiskVulCnt):
        self._RiskVulCnt = RiskVulCnt

    @property
    def UnScannedBaseLineCnt(self):
        r"""Number of security baseline items to be scanned
        :rtype: int
        """
        return self._UnScannedBaseLineCnt

    @UnScannedBaseLineCnt.setter
    def UnScannedBaseLineCnt(self, UnScannedBaseLineCnt):
        self._UnScannedBaseLineCnt = UnScannedBaseLineCnt

    @property
    def RiskBaseLineCnt(self):
        r"""Number of security baseline risks
        :rtype: int
        """
        return self._RiskBaseLineCnt

    @RiskBaseLineCnt.setter
    def RiskBaseLineCnt(self, RiskBaseLineCnt):
        self._RiskBaseLineCnt = RiskBaseLineCnt

    @property
    def RuntimeUnhandleEventCnt(self):
        r"""Number of pending (high-risk) events at runtime
        :rtype: int
        """
        return self._RuntimeUnhandleEventCnt

    @RuntimeUnhandleEventCnt.setter
    def RuntimeUnhandleEventCnt(self, RuntimeUnhandleEventCnt):
        self._RuntimeUnhandleEventCnt = RuntimeUnhandleEventCnt

    @property
    def UnScannedClusterCnt(self):
        r"""Number of clusters to be scanned
        :rtype: int
        """
        return self._UnScannedClusterCnt

    @UnScannedClusterCnt.setter
    def UnScannedClusterCnt(self, UnScannedClusterCnt):
        self._UnScannedClusterCnt = UnScannedClusterCnt

    @property
    def ScanImageStatus(self):
        r"""Whether images are scanned
        :rtype: bool
        """
        return self._ScanImageStatus

    @ScanImageStatus.setter
    def ScanImageStatus(self, ScanImageStatus):
        self._ScanImageStatus = ScanImageStatus

    @property
    def ScanClusterStatus(self):
        r"""Whether clusters are scanned
        :rtype: bool
        """
        return self._ScanClusterStatus

    @ScanClusterStatus.setter
    def ScanClusterStatus(self, ScanClusterStatus):
        self._ScanClusterStatus = ScanClusterStatus

    @property
    def ScanBaseLineStatus(self):
        r"""Whether baseline items are scanned
        :rtype: bool
        """
        return self._ScanBaseLineStatus

    @ScanBaseLineStatus.setter
    def ScanBaseLineStatus(self, ScanBaseLineStatus):
        self._ScanBaseLineStatus = ScanBaseLineStatus

    @property
    def ScanVulStatus(self):
        r"""Whether vulnerabilities are scanned for
        :rtype: bool
        """
        return self._ScanVulStatus

    @ScanVulStatus.setter
    def ScanVulStatus(self, ScanVulStatus):
        self._ScanVulStatus = ScanVulStatus

    @property
    def VulRiskImageCnt(self):
        r"""Number of images affected by vulnerabilities
        :rtype: int
        """
        return self._VulRiskImageCnt

    @VulRiskImageCnt.setter
    def VulRiskImageCnt(self, VulRiskImageCnt):
        self._VulRiskImageCnt = VulRiskImageCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageCnt = params.get("ImageCnt")
        self._ScannedImageCnt = params.get("ScannedImageCnt")
        self._UnScannedImageCnt = params.get("UnScannedImageCnt")
        self._LocalImageCnt = params.get("LocalImageCnt")
        self._RepositoryImageCnt = params.get("RepositoryImageCnt")
        self._RiskLocalImageCnt = params.get("RiskLocalImageCnt")
        self._RiskRepositoryImageCnt = params.get("RiskRepositoryImageCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._RiskContainerCnt = params.get("RiskContainerCnt")
        self._ClusterCnt = params.get("ClusterCnt")
        self._RiskClusterCnt = params.get("RiskClusterCnt")
        self._UnScannedVulCnt = params.get("UnScannedVulCnt")
        self._RiskVulCnt = params.get("RiskVulCnt")
        self._UnScannedBaseLineCnt = params.get("UnScannedBaseLineCnt")
        self._RiskBaseLineCnt = params.get("RiskBaseLineCnt")
        self._RuntimeUnhandleEventCnt = params.get("RuntimeUnhandleEventCnt")
        self._UnScannedClusterCnt = params.get("UnScannedClusterCnt")
        self._ScanImageStatus = params.get("ScanImageStatus")
        self._ScanClusterStatus = params.get("ScanClusterStatus")
        self._ScanBaseLineStatus = params.get("ScanBaseLineStatus")
        self._ScanVulStatus = params.get("ScanVulStatus")
        self._VulRiskImageCnt = params.get("VulRiskImageCnt")
        self._RequestId = params.get("RequestId")


class DescribeUnauthorizedCoresTendencyRequest(AbstractModel):
    r"""DescribeUnauthorizedCoresTendency request structure.

    """


class DescribeUnauthorizedCoresTendencyResponse(AbstractModel):
    r"""DescribeUnauthorizedCoresTendency response structure.

    """

    def __init__(self):
        r"""
        :param _List: Trend of unlicensed cores
        :type List: list of UnauthorizedCoresTendency
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""Trend of unlicensed cores
        :rtype: list of UnauthorizedCoresTendency
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = UnauthorizedCoresTendency()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeUnfinishRefreshTaskRequest(AbstractModel):
    r"""DescribeUnfinishRefreshTask request structure.

    """


class DescribeUnfinishRefreshTaskResponse(AbstractModel):
    r"""DescribeUnfinishRefreshTask response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the last task
        :type TaskId: int
        :param _TaskStatus: Task status. Valid values: `Task_New`, `Task_Running`, `Task_Finish`, `Task_Error`, `Task_NoExist`. `Task_New` and `Task_Running` indicate that a task exists and no new task can be distributed.
        :type TaskStatus: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._TaskStatus = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the last task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskStatus(self):
        r"""Task status. Valid values: `Task_New`, `Task_Running`, `Task_Finish`, `Task_Error`, `Task_NoExist`. `Task_New` and `Task_Running` indicate that a task exists and no new task can be distributed.
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskStatus = params.get("TaskStatus")
        self._RequestId = params.get("RequestId")


class DescribeUserClusterRequest(AbstractModel):
    r"""DescribeUserCluster request structure.

    """

    def __init__(self):
        r"""
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Maximum number of records per query
        :type Limit: int
        :param _Filters: Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :type Filters: list of ComplianceFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Offset(self):
        r"""Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        r"""Maximum number of records per query
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        r"""Name - String
Name. Valid values: `ClusterName`, `ClusterId`, `ClusterType`, `Region`, `ClusterCheckMode`, `ClusterAutoCheck`.
        :rtype: list of ComplianceFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = ComplianceFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUserClusterResponse(AbstractModel):
    r"""DescribeUserCluster response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of clusters
        :type TotalCount: int
        :param _ClusterInfoList: Cluster details
        :type ClusterInfoList: list of ClusterInfoItem
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._ClusterInfoList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of clusters
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ClusterInfoList(self):
        r"""Cluster details
        :rtype: list of ClusterInfoItem
        """
        return self._ClusterInfoList

    @ClusterInfoList.setter
    def ClusterInfoList(self, ClusterInfoList):
        self._ClusterInfoList = ClusterInfoList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ClusterInfoList") is not None:
            self._ClusterInfoList = []
            for item in params.get("ClusterInfoList"):
                obj = ClusterInfoItem()
                obj._deserialize(item)
                self._ClusterInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeValueAddedSrvInfoRequest(AbstractModel):
    r"""DescribeValueAddedSrvInfo request structure.

    """


class DescribeValueAddedSrvInfoResponse(AbstractModel):
    r"""DescribeValueAddedSrvInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RegistryImageCnt: Number of unlicensed repository images
        :type RegistryImageCnt: int
        :param _LocalImageCnt: Number of unlicensed local images
        :type LocalImageCnt: int
        :param _UnusedAuthorizedCnt: Number of unused image security scan licenses
        :type UnusedAuthorizedCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RegistryImageCnt = None
        self._LocalImageCnt = None
        self._UnusedAuthorizedCnt = None
        self._RequestId = None

    @property
    def RegistryImageCnt(self):
        r"""Number of unlicensed repository images
        :rtype: int
        """
        return self._RegistryImageCnt

    @RegistryImageCnt.setter
    def RegistryImageCnt(self, RegistryImageCnt):
        self._RegistryImageCnt = RegistryImageCnt

    @property
    def LocalImageCnt(self):
        r"""Number of unlicensed local images
        :rtype: int
        """
        return self._LocalImageCnt

    @LocalImageCnt.setter
    def LocalImageCnt(self, LocalImageCnt):
        self._LocalImageCnt = LocalImageCnt

    @property
    def UnusedAuthorizedCnt(self):
        r"""Number of unused image security scan licenses
        :rtype: int
        """
        return self._UnusedAuthorizedCnt

    @UnusedAuthorizedCnt.setter
    def UnusedAuthorizedCnt(self, UnusedAuthorizedCnt):
        self._UnusedAuthorizedCnt = UnusedAuthorizedCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RegistryImageCnt = params.get("RegistryImageCnt")
        self._LocalImageCnt = params.get("LocalImageCnt")
        self._UnusedAuthorizedCnt = params.get("UnusedAuthorizedCnt")
        self._RequestId = params.get("RequestId")


class DescribeVirusAutoIsolateSampleDetailRequest(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleDetail request structure.

    """

    def __init__(self):
        r"""
        :param _MD5: MD5 checksum of the file
        :type MD5: str
        """
        self._MD5 = None

    @property
    def MD5(self):
        r"""MD5 checksum of the file
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5


    def _deserialize(self, params):
        self._MD5 = params.get("MD5")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusAutoIsolateSampleDetailResponse(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleDetail response structure.

    """

    def __init__(self):
        r"""
        :param _MD5: MD5 checksum of the file
        :type MD5: str
        :param _Size: File size (B)
Note: This field may return null, indicating that no valid values can be obtained.
        :type Size: int
        :param _VirusName: Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusName: str
        :param _RiskLevel: Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: str
        :param _KillEngine: Anti-virus engine
Note: This field may return null, indicating that no valid values can be obtained.
        :type KillEngine: list of str
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _HarmDescribe: Event description
Note: This field may return null, indicating that no valid values can be obtained.
        :type HarmDescribe: str
        :param _SuggestScheme: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuggestScheme: str
        :param _ReferenceLink: Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :type ReferenceLink: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._MD5 = None
        self._Size = None
        self._VirusName = None
        self._RiskLevel = None
        self._KillEngine = None
        self._Tags = None
        self._HarmDescribe = None
        self._SuggestScheme = None
        self._ReferenceLink = None
        self._RequestId = None

    @property
    def MD5(self):
        r"""MD5 checksum of the file
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def Size(self):
        r"""File size (B)
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def VirusName(self):
        r"""Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def RiskLevel(self):
        r"""Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def KillEngine(self):
        r"""Anti-virus engine
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._KillEngine

    @KillEngine.setter
    def KillEngine(self, KillEngine):
        self._KillEngine = KillEngine

    @property
    def Tags(self):
        r"""Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def HarmDescribe(self):
        r"""Event description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def SuggestScheme(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def ReferenceLink(self):
        r"""Reference link
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ReferenceLink

    @ReferenceLink.setter
    def ReferenceLink(self, ReferenceLink):
        self._ReferenceLink = ReferenceLink

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MD5 = params.get("MD5")
        self._Size = params.get("Size")
        self._VirusName = params.get("VirusName")
        self._RiskLevel = params.get("RiskLevel")
        self._KillEngine = params.get("KillEngine")
        self._Tags = params.get("Tags")
        self._HarmDescribe = params.get("HarmDescribe")
        self._SuggestScheme = params.get("SuggestScheme")
        self._ReferenceLink = params.get("ReferenceLink")
        self._RequestId = params.get("RequestId")


class DescribeVirusAutoIsolateSampleDownloadURLRequest(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleDownloadURL request structure.

    """

    def __init__(self):
        r"""
        :param _MD5: MD5 checksum of the sample
        :type MD5: str
        """
        self._MD5 = None

    @property
    def MD5(self):
        r"""MD5 checksum of the sample
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5


    def _deserialize(self, params):
        self._MD5 = params.get("MD5")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusAutoIsolateSampleDownloadURLResponse(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleDownloadURL response structure.

    """

    def __init__(self):
        r"""
        :param _FileUrl: Sample download URL
        :type FileUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FileUrl = None
        self._RequestId = None

    @property
    def FileUrl(self):
        r"""Sample download URL
        :rtype: str
        """
        return self._FileUrl

    @FileUrl.setter
    def FileUrl(self, FileUrl):
        self._FileUrl = FileUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FileUrl = params.get("FileUrl")
        self._RequestId = params.get("RequestId")


class DescribeVirusAutoIsolateSampleListRequest(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filters.
<li>`MD5` - String - Optional - md5</li>
<li>`AutoIsolateSwitch` - String - Optional - Automatic isolation switch</li>
<li>`VirusName` - String - Optional - Virus name</li>
        :type Filters: list of RunTimeFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order
        :type Order: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filters.
<li>`MD5` - String - Optional - md5</li>
<li>`AutoIsolateSwitch` - String - Optional - Automatic isolation switch</li>
<li>`VirusName` - String - Optional - Virus name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusAutoIsolateSampleListResponse(AbstractModel):
    r"""DescribeVirusAutoIsolateSampleList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of automatically isolated trojan samples
        :type List: list of VirusAutoIsolateSampleInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of automatically isolated trojan samples
        :rtype: list of VirusAutoIsolateSampleInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VirusAutoIsolateSampleInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVirusAutoIsolateSettingRequest(AbstractModel):
    r"""DescribeVirusAutoIsolateSetting request structure.

    """


class DescribeVirusAutoIsolateSettingResponse(AbstractModel):
    r"""DescribeVirusAutoIsolateSetting response structure.

    """

    def __init__(self):
        r"""
        :param _AutoIsolateSwitch: Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :type AutoIsolateSwitch: bool
        :param _IsKillProgress: Whether the process associated with the isolated file is interrupted. Valid values: `true` (yes); `false` (no).
        :type IsKillProgress: bool
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AutoIsolateSwitch = None
        self._IsKillProgress = None
        self._RequestId = None

    @property
    def AutoIsolateSwitch(self):
        r"""Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._AutoIsolateSwitch

    @AutoIsolateSwitch.setter
    def AutoIsolateSwitch(self, AutoIsolateSwitch):
        self._AutoIsolateSwitch = AutoIsolateSwitch

    @property
    def IsKillProgress(self):
        r"""Whether the process associated with the isolated file is interrupted. Valid values: `true` (yes); `false` (no).
        :rtype: bool
        """
        return self._IsKillProgress

    @IsKillProgress.setter
    def IsKillProgress(self, IsKillProgress):
        self._IsKillProgress = IsKillProgress

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoIsolateSwitch = params.get("AutoIsolateSwitch")
        self._IsKillProgress = params.get("IsKillProgress")
        self._RequestId = params.get("RequestId")


class DescribeVirusDetailRequest(AbstractModel):
    r"""DescribeVirusDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Id: Trojan file ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        r"""Trojan file ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusDetailResponse(AbstractModel):
    r"""DescribeVirusDetail response structure.

    """

    def __init__(self):
        r"""
        :param _ImageId: Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageId: str
        :param _ImageName: Image name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageName: str
        :param _CreateTime: Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _Size: Trojan file size
Note: This field may return null, indicating that no valid values can be obtained.
        :type Size: int
        :param _FilePath: Trojan file path
Note: This field may return null, indicating that no valid values can be obtained.
        :type FilePath: str
        :param _ModifyTime: Last generation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ModifyTime: str
        :param _VirusName: Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusName: str
        :param _RiskLevel: Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: str
        :param _ContainerName: Container name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerName: str
        :param _ContainerId: Container ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerId: str
        :param _HostName: Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostId: Server ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostId: str
        :param _ProcessName: Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessName: str
        :param _ProcessPath: Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessPath: str
        :param _ProcessMd5: Process MD5
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessMd5: str
        :param _ProcessId: Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessId: int
        :param _ProcessArgv: Process parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessArgv: str
        :param _ProcessChan: Process chain
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessChan: str
        :param _ProcessAccountGroup: Process group
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessAccountGroup: str
        :param _ProcessStartAccount: Process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessStartAccount: str
        :param _ProcessFileAuthority: Process file permission
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessFileAuthority: str
        :param _SourceType: Source. Valid values: `0` (quick scan); `1` (scheduled scan); `2` (real-time monitoring).
Note: This field may return null, indicating that no valid values can be obtained.
        :type SourceType: int
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _HarmDescribe: Event description
Note: This field may return null, indicating that no valid values can be obtained.
        :type HarmDescribe: str
        :param _SuggestScheme: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type SuggestScheme: str
        :param _Mark: Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Mark: str
        :param _FileName: Suspicious file name
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileName: str
        :param _FileMd5: MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileMd5: str
        :param _EventType: Event type
Note: This field may return null, indicating that no valid values can be obtained.
        :type EventType: str
        :param _PodName: Cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :type PodName: str
        :param _Status: `DEAL_NONE`: Pending.
`DEAL_IGNORE`: Ignored.
`DEAL_ADD_WHITELIST`: Allowed.
`DEAL_DEL`: Deleted.
`DEAL_ISOLATE`: Isolated.
`DEAL_ISOLATING`: Isolating.
`DEAL_ISOLATE_FAILED`: Isolation failed.
`DEAL_RECOVERING`: Recovering.
`DEAL_RECOVER_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Status: str
        :param _SubStatus: Sub-status of the failure:
`FILE_NOT_FOUND`: The file does not exist.
`FILE_ABNORMAL`: The file is abnormal.
`FILE_ABNORMAL_DEAL_RECOVER`: The file is abnormal when recovered.
`BACKUP_FILE_NOT_FOUND`: The backup file does not exist.
`CONTAINER_NOT_FOUND_DEAL_ISOLATE`: The container does not exist during isolation.
`CONTAINER_NOT_FOUND_DEAL_RECOVER`: The container does not exist during recovery.
Note: This field may return null, indicating that no valid values can be obtained.
        :type SubStatus: str
        :param _HostIP: Private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIP: str
        :param _ClientIP: Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClientIP: str
        :param _PProcessStartUser: Parent process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :type PProcessStartUser: str
        :param _PProcessUserGroup: User group of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :type PProcessUserGroup: str
        :param _PProcessPath: Path of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :type PProcessPath: str
        :param _PProcessParam: Command line parameters of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :type PProcessParam: str
        :param _AncestorProcessStartUser: Ancestor process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessStartUser: str
        :param _AncestorProcessUserGroup: Ancestor process user group
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessUserGroup: str
        :param _AncestorProcessPath: Ancestor process path
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessPath: str
        :param _AncestorProcessParam: Command line parameters of the ancestor process
Note: This field may return null, indicating that no valid values can be obtained.
        :type AncestorProcessParam: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        :param _ContainerNetStatus: Container isolation status
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of container isolation
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _CheckPlatform: Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckPlatform: list of str
        :param _FileAccessTime: File accessed time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileAccessTime: str
        :param _FileModifyTime: File modified time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileModifyTime: str
        :param _NodeSubNetID: Node subnet ID
        :type NodeSubNetID: str
        :param _NodeSubNetName: Node subnet name
        :type NodeSubNetName: str
        :param _NodeSubNetCIDR: Subnet IP range
        :type NodeSubNetCIDR: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodStatus: Pod status
        :type PodStatus: str
        :param _NodeUniqueID: UID of the node
        :type NodeUniqueID: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _Namespace: 
        :type Namespace: str
        :param _WorkloadType: 
        :type WorkloadType: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ImageId = None
        self._ImageName = None
        self._CreateTime = None
        self._Size = None
        self._FilePath = None
        self._ModifyTime = None
        self._VirusName = None
        self._RiskLevel = None
        self._ContainerName = None
        self._ContainerId = None
        self._HostName = None
        self._HostId = None
        self._ProcessName = None
        self._ProcessPath = None
        self._ProcessMd5 = None
        self._ProcessId = None
        self._ProcessArgv = None
        self._ProcessChan = None
        self._ProcessAccountGroup = None
        self._ProcessStartAccount = None
        self._ProcessFileAuthority = None
        self._SourceType = None
        self._Tags = None
        self._HarmDescribe = None
        self._SuggestScheme = None
        self._Mark = None
        self._FileName = None
        self._FileMd5 = None
        self._EventType = None
        self._PodName = None
        self._Status = None
        self._SubStatus = None
        self._HostIP = None
        self._ClientIP = None
        self._PProcessStartUser = None
        self._PProcessUserGroup = None
        self._PProcessPath = None
        self._PProcessParam = None
        self._AncestorProcessStartUser = None
        self._AncestorProcessUserGroup = None
        self._AncestorProcessPath = None
        self._AncestorProcessParam = None
        self._OperationTime = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._CheckPlatform = None
        self._FileAccessTime = None
        self._FileModifyTime = None
        self._NodeSubNetID = None
        self._NodeSubNetName = None
        self._NodeSubNetCIDR = None
        self._ClusterID = None
        self._PodIP = None
        self._PodStatus = None
        self._NodeUniqueID = None
        self._NodeType = None
        self._NodeID = None
        self._ClusterName = None
        self._Namespace = None
        self._WorkloadType = None
        self._RequestId = None

    @property
    def ImageId(self):
        r"""Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageName(self):
        r"""Image name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def CreateTime(self):
        r"""Creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Size(self):
        r"""Trojan file size
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def FilePath(self):
        r"""Trojan file path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def ModifyTime(self):
        r"""Last generation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def VirusName(self):
        r"""Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def RiskLevel(self):
        r"""Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def ContainerName(self):
        r"""Container name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ContainerId(self):
        r"""Container ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def HostName(self):
        r"""Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostId(self):
        r"""Server ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostId

    @HostId.setter
    def HostId(self, HostId):
        self._HostId = HostId

    @property
    def ProcessName(self):
        r"""Process name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessPath(self):
        r"""Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ProcessMd5(self):
        r"""Process MD5
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessMd5

    @ProcessMd5.setter
    def ProcessMd5(self, ProcessMd5):
        self._ProcessMd5 = ProcessMd5

    @property
    def ProcessId(self):
        r"""Process ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ProcessId

    @ProcessId.setter
    def ProcessId(self, ProcessId):
        self._ProcessId = ProcessId

    @property
    def ProcessArgv(self):
        r"""Process parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessArgv

    @ProcessArgv.setter
    def ProcessArgv(self, ProcessArgv):
        self._ProcessArgv = ProcessArgv

    @property
    def ProcessChan(self):
        r"""Process chain
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessChan

    @ProcessChan.setter
    def ProcessChan(self, ProcessChan):
        self._ProcessChan = ProcessChan

    @property
    def ProcessAccountGroup(self):
        r"""Process group
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessAccountGroup

    @ProcessAccountGroup.setter
    def ProcessAccountGroup(self, ProcessAccountGroup):
        self._ProcessAccountGroup = ProcessAccountGroup

    @property
    def ProcessStartAccount(self):
        r"""Process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessStartAccount

    @ProcessStartAccount.setter
    def ProcessStartAccount(self, ProcessStartAccount):
        self._ProcessStartAccount = ProcessStartAccount

    @property
    def ProcessFileAuthority(self):
        r"""Process file permission
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessFileAuthority

    @ProcessFileAuthority.setter
    def ProcessFileAuthority(self, ProcessFileAuthority):
        self._ProcessFileAuthority = ProcessFileAuthority

    @property
    def SourceType(self):
        r"""Source. Valid values: `0` (quick scan); `1` (scheduled scan); `2` (real-time monitoring).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SourceType

    @SourceType.setter
    def SourceType(self, SourceType):
        self._SourceType = SourceType

    @property
    def Tags(self):
        r"""Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def HarmDescribe(self):
        r"""Event description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def SuggestScheme(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def Mark(self):
        r"""Remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Mark

    @Mark.setter
    def Mark(self, Mark):
        self._Mark = Mark

    @property
    def FileName(self):
        r"""Suspicious file name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileMd5(self):
        r"""MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileMd5

    @FileMd5.setter
    def FileMd5(self, FileMd5):
        self._FileMd5 = FileMd5

    @property
    def EventType(self):
        r"""Event type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def PodName(self):
        r"""Cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Status(self):
        r"""`DEAL_NONE`: Pending.
`DEAL_IGNORE`: Ignored.
`DEAL_ADD_WHITELIST`: Allowed.
`DEAL_DEL`: Deleted.
`DEAL_ISOLATE`: Isolated.
`DEAL_ISOLATING`: Isolating.
`DEAL_ISOLATE_FAILED`: Isolation failed.
`DEAL_RECOVERING`: Recovering.
`DEAL_RECOVER_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def SubStatus(self):
        r"""Sub-status of the failure:
`FILE_NOT_FOUND`: The file does not exist.
`FILE_ABNORMAL`: The file is abnormal.
`FILE_ABNORMAL_DEAL_RECOVER`: The file is abnormal when recovered.
`BACKUP_FILE_NOT_FOUND`: The backup file does not exist.
`CONTAINER_NOT_FOUND_DEAL_ISOLATE`: The container does not exist during isolation.
`CONTAINER_NOT_FOUND_DEAL_RECOVER`: The container does not exist during recovery.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SubStatus

    @SubStatus.setter
    def SubStatus(self, SubStatus):
        self._SubStatus = SubStatus

    @property
    def HostIP(self):
        r"""Private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClientIP(self):
        r"""Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClientIP

    @ClientIP.setter
    def ClientIP(self, ClientIP):
        self._ClientIP = ClientIP

    @property
    def PProcessStartUser(self):
        r"""Parent process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PProcessStartUser

    @PProcessStartUser.setter
    def PProcessStartUser(self, PProcessStartUser):
        self._PProcessStartUser = PProcessStartUser

    @property
    def PProcessUserGroup(self):
        r"""User group of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PProcessUserGroup

    @PProcessUserGroup.setter
    def PProcessUserGroup(self, PProcessUserGroup):
        self._PProcessUserGroup = PProcessUserGroup

    @property
    def PProcessPath(self):
        r"""Path of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PProcessPath

    @PProcessPath.setter
    def PProcessPath(self, PProcessPath):
        self._PProcessPath = PProcessPath

    @property
    def PProcessParam(self):
        r"""Command line parameters of the parent process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PProcessParam

    @PProcessParam.setter
    def PProcessParam(self, PProcessParam):
        self._PProcessParam = PProcessParam

    @property
    def AncestorProcessStartUser(self):
        r"""Ancestor process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AncestorProcessStartUser

    @AncestorProcessStartUser.setter
    def AncestorProcessStartUser(self, AncestorProcessStartUser):
        self._AncestorProcessStartUser = AncestorProcessStartUser

    @property
    def AncestorProcessUserGroup(self):
        r"""Ancestor process user group
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AncestorProcessUserGroup

    @AncestorProcessUserGroup.setter
    def AncestorProcessUserGroup(self, AncestorProcessUserGroup):
        self._AncestorProcessUserGroup = AncestorProcessUserGroup

    @property
    def AncestorProcessPath(self):
        r"""Ancestor process path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AncestorProcessPath

    @AncestorProcessPath.setter
    def AncestorProcessPath(self, AncestorProcessPath):
        self._AncestorProcessPath = AncestorProcessPath

    @property
    def AncestorProcessParam(self):
        r"""Command line parameters of the ancestor process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._AncestorProcessParam

    @AncestorProcessParam.setter
    def AncestorProcessParam(self, AncestorProcessParam):
        self._AncestorProcessParam = AncestorProcessParam

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime

    @property
    def ContainerNetStatus(self):
        r"""Container isolation status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of container isolation
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def CheckPlatform(self):
        r"""Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform

    @property
    def FileAccessTime(self):
        r"""File accessed time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileAccessTime

    @FileAccessTime.setter
    def FileAccessTime(self, FileAccessTime):
        self._FileAccessTime = FileAccessTime

    @property
    def FileModifyTime(self):
        r"""File modified time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileModifyTime

    @FileModifyTime.setter
    def FileModifyTime(self, FileModifyTime):
        self._FileModifyTime = FileModifyTime

    @property
    def NodeSubNetID(self):
        r"""Node subnet ID
        :rtype: str
        """
        return self._NodeSubNetID

    @NodeSubNetID.setter
    def NodeSubNetID(self, NodeSubNetID):
        self._NodeSubNetID = NodeSubNetID

    @property
    def NodeSubNetName(self):
        r"""Node subnet name
        :rtype: str
        """
        return self._NodeSubNetName

    @NodeSubNetName.setter
    def NodeSubNetName(self, NodeSubNetName):
        self._NodeSubNetName = NodeSubNetName

    @property
    def NodeSubNetCIDR(self):
        r"""Subnet IP range
        :rtype: str
        """
        return self._NodeSubNetCIDR

    @NodeSubNetCIDR.setter
    def NodeSubNetCIDR(self, NodeSubNetCIDR):
        self._NodeSubNetCIDR = NodeSubNetCIDR

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodStatus(self):
        r"""Pod status
        :rtype: str
        """
        return self._PodStatus

    @PodStatus.setter
    def PodStatus(self, PodStatus):
        self._PodStatus = PodStatus

    @property
    def NodeUniqueID(self):
        r"""UID of the node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def Namespace(self):
        r"""
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def WorkloadType(self):
        r"""
        :rtype: str
        """
        return self._WorkloadType

    @WorkloadType.setter
    def WorkloadType(self, WorkloadType):
        self._WorkloadType = WorkloadType

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ImageId = params.get("ImageId")
        self._ImageName = params.get("ImageName")
        self._CreateTime = params.get("CreateTime")
        self._Size = params.get("Size")
        self._FilePath = params.get("FilePath")
        self._ModifyTime = params.get("ModifyTime")
        self._VirusName = params.get("VirusName")
        self._RiskLevel = params.get("RiskLevel")
        self._ContainerName = params.get("ContainerName")
        self._ContainerId = params.get("ContainerId")
        self._HostName = params.get("HostName")
        self._HostId = params.get("HostId")
        self._ProcessName = params.get("ProcessName")
        self._ProcessPath = params.get("ProcessPath")
        self._ProcessMd5 = params.get("ProcessMd5")
        self._ProcessId = params.get("ProcessId")
        self._ProcessArgv = params.get("ProcessArgv")
        self._ProcessChan = params.get("ProcessChan")
        self._ProcessAccountGroup = params.get("ProcessAccountGroup")
        self._ProcessStartAccount = params.get("ProcessStartAccount")
        self._ProcessFileAuthority = params.get("ProcessFileAuthority")
        self._SourceType = params.get("SourceType")
        self._Tags = params.get("Tags")
        self._HarmDescribe = params.get("HarmDescribe")
        self._SuggestScheme = params.get("SuggestScheme")
        self._Mark = params.get("Mark")
        self._FileName = params.get("FileName")
        self._FileMd5 = params.get("FileMd5")
        self._EventType = params.get("EventType")
        self._PodName = params.get("PodName")
        self._Status = params.get("Status")
        self._SubStatus = params.get("SubStatus")
        self._HostIP = params.get("HostIP")
        self._ClientIP = params.get("ClientIP")
        self._PProcessStartUser = params.get("PProcessStartUser")
        self._PProcessUserGroup = params.get("PProcessUserGroup")
        self._PProcessPath = params.get("PProcessPath")
        self._PProcessParam = params.get("PProcessParam")
        self._AncestorProcessStartUser = params.get("AncestorProcessStartUser")
        self._AncestorProcessUserGroup = params.get("AncestorProcessUserGroup")
        self._AncestorProcessPath = params.get("AncestorProcessPath")
        self._AncestorProcessParam = params.get("AncestorProcessParam")
        self._OperationTime = params.get("OperationTime")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._CheckPlatform = params.get("CheckPlatform")
        self._FileAccessTime = params.get("FileAccessTime")
        self._FileModifyTime = params.get("FileModifyTime")
        self._NodeSubNetID = params.get("NodeSubNetID")
        self._NodeSubNetName = params.get("NodeSubNetName")
        self._NodeSubNetCIDR = params.get("NodeSubNetCIDR")
        self._ClusterID = params.get("ClusterID")
        self._PodIP = params.get("PodIP")
        self._PodStatus = params.get("PodStatus")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._NodeType = params.get("NodeType")
        self._NodeID = params.get("NodeID")
        self._ClusterName = params.get("ClusterName")
        self._Namespace = params.get("Namespace")
        self._WorkloadType = params.get("WorkloadType")
        self._RequestId = params.get("RequestId")


class DescribeVirusEventTendencyRequest(AbstractModel):
    r"""DescribeVirusEventTendency request structure.

    """

    def __init__(self):
        r"""
        :param _TendencyPeriod: Trend cycle in days. Default value: `7`.
        :type TendencyPeriod: int
        """
        self._TendencyPeriod = None

    @property
    def TendencyPeriod(self):
        r"""Trend cycle in days. Default value: `7`.
        :rtype: int
        """
        return self._TendencyPeriod

    @TendencyPeriod.setter
    def TendencyPeriod(self, TendencyPeriod):
        self._TendencyPeriod = TendencyPeriod


    def _deserialize(self, params):
        self._TendencyPeriod = params.get("TendencyPeriod")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusEventTendencyResponse(AbstractModel):
    r"""DescribeVirusEventTendency response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of trends
        :type List: list of VirusTendencyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of trends
        :rtype: list of VirusTendencyInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VirusTendencyInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVirusListRequest(AbstractModel):
    r"""DescribeVirusList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>FileName - String - Required: No - Filename</li>
<li>FilePath - String - Required: No - File path</li>
<li>VirusName - String - Required: No - Virus name</li>
<li>ContainerName- String - Required: Yes - Container name</li>
<li>ContainerId- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageId- string - Required: No - Image ID</li>
<li>IsRealTime- int - Required: No - Whether it is real-time monitoring data</li>
<li>TaskId- string - Required: No - Task ID</li>
<li>ContainerNetStatus - String - Required: No - Container network status. Valid values: `NORMAL`, `ISOLATED`, `ISOLATING`, `RESTORING`, `RESTORE_FAILED`.</li>
<li>TimeRange - string - Required: No - Time range ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>ContainerStatus - string - Required: No - Container status. Valid values: `RUNNING`, `PAUSED`, `STOPPED`, `CREATED`, `DESTROYED`, `RESTARTING`, `REMOVING`.</li>
<li>AutoIsolateMode - string - Required: No - Isolation method. Valid values: `MANUAL`, `AUTO`.</li>
<li>MD5 - string - Required: No - MD5</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>FileName - String - Required: No - Filename</li>
<li>FilePath - String - Required: No - File path</li>
<li>VirusName - String - Required: No - Virus name</li>
<li>ContainerName- String - Required: Yes - Container name</li>
<li>ContainerId- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageId- string - Required: No - Image ID</li>
<li>IsRealTime- int - Required: No - Whether it is real-time monitoring data</li>
<li>TaskId- string - Required: No - Task ID</li>
<li>ContainerNetStatus - String - Required: No - Container network status. Valid values: `NORMAL`, `ISOLATED`, `ISOLATING`, `RESTORING`, `RESTORE_FAILED`.</li>
<li>TimeRange - string - Required: No - Time range ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>ContainerStatus - string - Required: No - Container status. Valid values: `RUNNING`, `PAUSED`, `STOPPED`, `CREATED`, `DESTROYED`, `RESTARTING`, `REMOVING`.</li>
<li>AutoIsolateMode - string - Required: No - Isolation method. Valid values: `MANUAL`, `AUTO`.</li>
<li>MD5 - string - Required: No - MD5</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusListResponse(AbstractModel):
    r"""DescribeVirusList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of trojans
        :type List: list of VirusInfo
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of trojans
        :rtype: list of VirusInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VirusInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVirusManualScanEstimateTimeoutRequest(AbstractModel):
    r"""DescribeVirusManualScanEstimateTimeout request structure.

    """

    def __init__(self):
        r"""
        :param _ScanRangeType: Scanning scope. Valid values: `0` (container); `1` (server).
        :type ScanRangeType: int
        :param _ScanRangeAll: Valid values: `true` (all); `false` (specified).
        :type ScanRangeAll: bool
        :param _ScanIds: ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :type ScanIds: list of str
        """
        self._ScanRangeType = None
        self._ScanRangeAll = None
        self._ScanIds = None

    @property
    def ScanRangeType(self):
        r"""Scanning scope. Valid values: `0` (container); `1` (server).
        :rtype: int
        """
        return self._ScanRangeType

    @ScanRangeType.setter
    def ScanRangeType(self, ScanRangeType):
        self._ScanRangeType = ScanRangeType

    @property
    def ScanRangeAll(self):
        r"""Valid values: `true` (all); `false` (specified).
        :rtype: bool
        """
        return self._ScanRangeAll

    @ScanRangeAll.setter
    def ScanRangeAll(self, ScanRangeAll):
        self._ScanRangeAll = ScanRangeAll

    @property
    def ScanIds(self):
        r"""ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :rtype: list of str
        """
        return self._ScanIds

    @ScanIds.setter
    def ScanIds(self, ScanIds):
        self._ScanIds = ScanIds


    def _deserialize(self, params):
        self._ScanRangeType = params.get("ScanRangeType")
        self._ScanRangeAll = params.get("ScanRangeAll")
        self._ScanIds = params.get("ScanIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusManualScanEstimateTimeoutResponse(AbstractModel):
    r"""DescribeVirusManualScanEstimateTimeout response structure.

    """

    def __init__(self):
        r"""
        :param _Timeout: Estimated timeout period (hour)
        :type Timeout: float
        :param _ContainerScanConcurrencyCount: Number of containers scanned in parallel on a single server
        :type ContainerScanConcurrencyCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Timeout = None
        self._ContainerScanConcurrencyCount = None
        self._RequestId = None

    @property
    def Timeout(self):
        r"""Estimated timeout period (hour)
        :rtype: float
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def ContainerScanConcurrencyCount(self):
        r"""Number of containers scanned in parallel on a single server
        :rtype: int
        """
        return self._ContainerScanConcurrencyCount

    @ContainerScanConcurrencyCount.setter
    def ContainerScanConcurrencyCount(self, ContainerScanConcurrencyCount):
        self._ContainerScanConcurrencyCount = ContainerScanConcurrencyCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Timeout = params.get("Timeout")
        self._ContainerScanConcurrencyCount = params.get("ContainerScanConcurrencyCount")
        self._RequestId = params.get("RequestId")


class DescribeVirusMonitorSettingRequest(AbstractModel):
    r"""DescribeVirusMonitorSetting request structure.

    """


class DescribeVirusMonitorSettingResponse(AbstractModel):
    r"""DescribeVirusMonitorSetting response structure.

    """

    def __init__(self):
        r"""
        :param _EnableScan: Whether to enable real-time monitoring
        :type EnableScan: bool
        :param _ScanPathAll: Scan all paths
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanPathAll: bool
        :param _ScanPathType: Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanPathType: int
        :param _ScanPath: Specified path to be excluded or scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanPath: list of str
        :param _ScanPathMode: Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :type ScanPathMode: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EnableScan = None
        self._ScanPathAll = None
        self._ScanPathType = None
        self._ScanPath = None
        self._ScanPathMode = None
        self._RequestId = None

    @property
    def EnableScan(self):
        r"""Whether to enable real-time monitoring
        :rtype: bool
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def ScanPathAll(self):
        r"""Scan all paths
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._ScanPathAll

    @ScanPathAll.setter
    def ScanPathAll(self, ScanPathAll):
        self._ScanPathAll = ScanPathAll

    @property
    def ScanPathType(self):
        r"""Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanPathType

    @ScanPathType.setter
    def ScanPathType(self, ScanPathType):
        self._ScanPathType = ScanPathType

    @property
    def ScanPath(self):
        r"""Specified path to be excluded or scanned
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._ScanPath

    @ScanPath.setter
    def ScanPath(self, ScanPath):
        self._ScanPath = ScanPath

    @property
    def ScanPathMode(self):
        r"""Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :rtype: str
        """
        return self._ScanPathMode

    @ScanPathMode.setter
    def ScanPathMode(self, ScanPathMode):
        self._ScanPathMode = ScanPathMode

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EnableScan = params.get("EnableScan")
        self._ScanPathAll = params.get("ScanPathAll")
        self._ScanPathType = params.get("ScanPathType")
        self._ScanPath = params.get("ScanPath")
        self._ScanPathMode = params.get("ScanPathMode")
        self._RequestId = params.get("RequestId")


class DescribeVirusSampleDownloadUrlRequest(AbstractModel):
    r"""DescribeVirusSampleDownloadUrl request structure.

    """

    def __init__(self):
        r"""
        :param _ID: Trojan ID
        :type ID: str
        """
        self._ID = None

    @property
    def ID(self):
        r"""Trojan ID
        :rtype: str
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID


    def _deserialize(self, params):
        self._ID = params.get("ID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusSampleDownloadUrlResponse(AbstractModel):
    r"""DescribeVirusSampleDownloadUrl response structure.

    """

    def __init__(self):
        r"""
        :param _FileUrl: Sample download URL
        :type FileUrl: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._FileUrl = None
        self._RequestId = None

    @property
    def FileUrl(self):
        r"""Sample download URL
        :rtype: str
        """
        return self._FileUrl

    @FileUrl.setter
    def FileUrl(self, FileUrl):
        self._FileUrl = FileUrl

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FileUrl = params.get("FileUrl")
        self._RequestId = params.get("RequestId")


class DescribeVirusScanSettingRequest(AbstractModel):
    r"""DescribeVirusScanSetting request structure.

    """


class DescribeVirusScanSettingResponse(AbstractModel):
    r"""DescribeVirusScanSetting response structure.

    """

    def __init__(self):
        r"""
        :param _EnableScan: Whether to enable scheduled scan
        :type EnableScan: bool
        :param _Cycle: Check cycle in days
        :type Cycle: int
        :param _BeginScanAt: Scan start time
        :type BeginScanAt: str
        :param _ScanPathAll: Scan all paths
        :type ScanPathAll: bool
        :param _ScanPathType: Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
        :type ScanPathType: int
        :param _Timeout: Timeout period in hours
        :type Timeout: int
        :param _ScanRangeType: Scanning scope. Valid values: `0` (container); `1` (server).
        :type ScanRangeType: int
        :param _ScanRangeAll: Valid values: `true` (all); `false` (specified).
        :type ScanRangeAll: bool
        :param _ScanIds: ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :type ScanIds: list of str
        :param _ScanPath: Specified path to be excluded or scanned
        :type ScanPath: list of str
        :param _ClickTimeout: Timeout settings of quick check
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClickTimeout: int
        :param _ScanPathMode: Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :type ScanPathMode: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EnableScan = None
        self._Cycle = None
        self._BeginScanAt = None
        self._ScanPathAll = None
        self._ScanPathType = None
        self._Timeout = None
        self._ScanRangeType = None
        self._ScanRangeAll = None
        self._ScanIds = None
        self._ScanPath = None
        self._ClickTimeout = None
        self._ScanPathMode = None
        self._RequestId = None

    @property
    def EnableScan(self):
        r"""Whether to enable scheduled scan
        :rtype: bool
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def Cycle(self):
        r"""Check cycle in days
        :rtype: int
        """
        return self._Cycle

    @Cycle.setter
    def Cycle(self, Cycle):
        self._Cycle = Cycle

    @property
    def BeginScanAt(self):
        r"""Scan start time
        :rtype: str
        """
        return self._BeginScanAt

    @BeginScanAt.setter
    def BeginScanAt(self, BeginScanAt):
        self._BeginScanAt = BeginScanAt

    @property
    def ScanPathAll(self):
        r"""Scan all paths
        :rtype: bool
        """
        return self._ScanPathAll

    @ScanPathAll.setter
    def ScanPathAll(self, ScanPathAll):
        self._ScanPathAll = ScanPathAll

    @property
    def ScanPathType(self):
        r"""Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
        :rtype: int
        """
        return self._ScanPathType

    @ScanPathType.setter
    def ScanPathType(self, ScanPathType):
        self._ScanPathType = ScanPathType

    @property
    def Timeout(self):
        r"""Timeout period in hours
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def ScanRangeType(self):
        r"""Scanning scope. Valid values: `0` (container); `1` (server).
        :rtype: int
        """
        return self._ScanRangeType

    @ScanRangeType.setter
    def ScanRangeType(self, ScanRangeType):
        self._ScanRangeType = ScanRangeType

    @property
    def ScanRangeAll(self):
        r"""Valid values: `true` (all); `false` (specified).
        :rtype: bool
        """
        return self._ScanRangeAll

    @ScanRangeAll.setter
    def ScanRangeAll(self, ScanRangeAll):
        self._ScanRangeAll = ScanRangeAll

    @property
    def ScanIds(self):
        r"""ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :rtype: list of str
        """
        return self._ScanIds

    @ScanIds.setter
    def ScanIds(self, ScanIds):
        self._ScanIds = ScanIds

    @property
    def ScanPath(self):
        r"""Specified path to be excluded or scanned
        :rtype: list of str
        """
        return self._ScanPath

    @ScanPath.setter
    def ScanPath(self, ScanPath):
        self._ScanPath = ScanPath

    @property
    def ClickTimeout(self):
        r"""Timeout settings of quick check
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ClickTimeout

    @ClickTimeout.setter
    def ClickTimeout(self, ClickTimeout):
        self._ClickTimeout = ClickTimeout

    @property
    def ScanPathMode(self):
        r"""Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :rtype: str
        """
        return self._ScanPathMode

    @ScanPathMode.setter
    def ScanPathMode(self, ScanPathMode):
        self._ScanPathMode = ScanPathMode

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EnableScan = params.get("EnableScan")
        self._Cycle = params.get("Cycle")
        self._BeginScanAt = params.get("BeginScanAt")
        self._ScanPathAll = params.get("ScanPathAll")
        self._ScanPathType = params.get("ScanPathType")
        self._Timeout = params.get("Timeout")
        self._ScanRangeType = params.get("ScanRangeType")
        self._ScanRangeAll = params.get("ScanRangeAll")
        self._ScanIds = params.get("ScanIds")
        self._ScanPath = params.get("ScanPath")
        self._ClickTimeout = params.get("ClickTimeout")
        self._ScanPathMode = params.get("ScanPathMode")
        self._RequestId = params.get("RequestId")


class DescribeVirusScanTaskStatusRequest(AbstractModel):
    r"""DescribeVirusScanTaskStatus request structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        """
        self._TaskID = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusScanTaskStatusResponse(AbstractModel):
    r"""DescribeVirusScanTaskStatus response structure.

    """

    def __init__(self):
        r"""
        :param _ContainerTotal: Number of scanned containers
        :type ContainerTotal: int
        :param _RiskContainerCnt: Number of containers at risk
        :type RiskContainerCnt: int
        :param _Status: Scan task status:
`SCAN_NONE`: None. 
`SCAN_SCANNING`: Scanning.
`SCAN_FINISH`: Scanned. 
`SCAN_TIMEOUT`: Scan timed out.
`SCAN_CANCELING`: Canceling.
`SCAN_CANCELED`: Canceled.
        :type Status: str
        :param _Schedule: Scanning progress
        :type Schedule: int
        :param _ContainerScanCnt: Number of scanned containers
        :type ContainerScanCnt: int
        :param _RiskCnt: Number of risks
        :type RiskCnt: int
        :param _LeftSeconds: Remaining scan time
        :type LeftSeconds: int
        :param _StartTime: Scan start time
        :type StartTime: str
        :param _EndTime: Scan end time
        :type EndTime: str
        :param _ScanType: Scan type. Valid values: `CYCLE` (periodic scan); `MANUAL` (manual scan).
        :type ScanType: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._ContainerTotal = None
        self._RiskContainerCnt = None
        self._Status = None
        self._Schedule = None
        self._ContainerScanCnt = None
        self._RiskCnt = None
        self._LeftSeconds = None
        self._StartTime = None
        self._EndTime = None
        self._ScanType = None
        self._RequestId = None

    @property
    def ContainerTotal(self):
        r"""Number of scanned containers
        :rtype: int
        """
        return self._ContainerTotal

    @ContainerTotal.setter
    def ContainerTotal(self, ContainerTotal):
        self._ContainerTotal = ContainerTotal

    @property
    def RiskContainerCnt(self):
        r"""Number of containers at risk
        :rtype: int
        """
        return self._RiskContainerCnt

    @RiskContainerCnt.setter
    def RiskContainerCnt(self, RiskContainerCnt):
        self._RiskContainerCnt = RiskContainerCnt

    @property
    def Status(self):
        r"""Scan task status:
`SCAN_NONE`: None. 
`SCAN_SCANNING`: Scanning.
`SCAN_FINISH`: Scanned. 
`SCAN_TIMEOUT`: Scan timed out.
`SCAN_CANCELING`: Canceling.
`SCAN_CANCELED`: Canceled.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Schedule(self):
        r"""Scanning progress
        :rtype: int
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def ContainerScanCnt(self):
        r"""Number of scanned containers
        :rtype: int
        """
        return self._ContainerScanCnt

    @ContainerScanCnt.setter
    def ContainerScanCnt(self, ContainerScanCnt):
        self._ContainerScanCnt = ContainerScanCnt

    @property
    def RiskCnt(self):
        r"""Number of risks
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def LeftSeconds(self):
        r"""Remaining scan time
        :rtype: int
        """
        return self._LeftSeconds

    @LeftSeconds.setter
    def LeftSeconds(self, LeftSeconds):
        self._LeftSeconds = LeftSeconds

    @property
    def StartTime(self):
        r"""Scan start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""Scan end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ScanType(self):
        r"""Scan type. Valid values: `CYCLE` (periodic scan); `MANUAL` (manual scan).
        :rtype: str
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ContainerTotal = params.get("ContainerTotal")
        self._RiskContainerCnt = params.get("RiskContainerCnt")
        self._Status = params.get("Status")
        self._Schedule = params.get("Schedule")
        self._ContainerScanCnt = params.get("ContainerScanCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._LeftSeconds = params.get("LeftSeconds")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ScanType = params.get("ScanType")
        self._RequestId = params.get("RequestId")


class DescribeVirusScanTimeoutSettingRequest(AbstractModel):
    r"""DescribeVirusScanTimeoutSetting request structure.

    """

    def __init__(self):
        r"""
        :param _ScanType: Scan type. Valid values: `0` (quick scan); `1` (scheduled scan).
        :type ScanType: int
        """
        self._ScanType = None

    @property
    def ScanType(self):
        r"""Scan type. Valid values: `0` (quick scan); `1` (scheduled scan).
        :rtype: int
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType


    def _deserialize(self, params):
        self._ScanType = params.get("ScanType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusScanTimeoutSettingResponse(AbstractModel):
    r"""DescribeVirusScanTimeoutSetting response structure.

    """

    def __init__(self):
        r"""
        :param _Timeout: Timeout period in hours
Note: This field may return null, indicating that no valid values can be obtained.
        :type Timeout: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Timeout = None
        self._RequestId = None

    @property
    def Timeout(self):
        r"""Timeout period in hours
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Timeout = params.get("Timeout")
        self._RequestId = params.get("RequestId")


class DescribeVirusSummaryRequest(AbstractModel):
    r"""DescribeVirusSummary request structure.

    """


class DescribeVirusSummaryResponse(AbstractModel):
    r"""DescribeVirusSummary response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the last scan task
        :type TaskId: str
        :param _RiskContainerCnt: Number of containers affected by the trojan
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskContainerCnt: int
        :param _RiskCnt: Number of pending risks
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskCnt: int
        :param _VirusDataBaseModifyTime: Update time of the virus library
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusDataBaseModifyTime: str
        :param _RiskContainerIncrease: Increase in the number of containers affected by trojans from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskContainerIncrease: int
        :param _RiskIncrease: Increase in the number of pending risks from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskIncrease: int
        :param _IsolateIncrease: Increase in the number of isolated events from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateIncrease: int
        :param _IsolateCnt: Total number of isolated events
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsolateCnt: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RiskContainerCnt = None
        self._RiskCnt = None
        self._VirusDataBaseModifyTime = None
        self._RiskContainerIncrease = None
        self._RiskIncrease = None
        self._IsolateIncrease = None
        self._IsolateCnt = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the last scan task
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RiskContainerCnt(self):
        r"""Number of containers affected by the trojan
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskContainerCnt

    @RiskContainerCnt.setter
    def RiskContainerCnt(self, RiskContainerCnt):
        self._RiskContainerCnt = RiskContainerCnt

    @property
    def RiskCnt(self):
        r"""Number of pending risks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def VirusDataBaseModifyTime(self):
        r"""Update time of the virus library
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusDataBaseModifyTime

    @VirusDataBaseModifyTime.setter
    def VirusDataBaseModifyTime(self, VirusDataBaseModifyTime):
        self._VirusDataBaseModifyTime = VirusDataBaseModifyTime

    @property
    def RiskContainerIncrease(self):
        r"""Increase in the number of containers affected by trojans from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskContainerIncrease

    @RiskContainerIncrease.setter
    def RiskContainerIncrease(self, RiskContainerIncrease):
        self._RiskContainerIncrease = RiskContainerIncrease

    @property
    def RiskIncrease(self):
        r"""Increase in the number of pending risks from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskIncrease

    @RiskIncrease.setter
    def RiskIncrease(self, RiskIncrease):
        self._RiskIncrease = RiskIncrease

    @property
    def IsolateIncrease(self):
        r"""Increase in the number of isolated events from yesterday
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsolateIncrease

    @IsolateIncrease.setter
    def IsolateIncrease(self, IsolateIncrease):
        self._IsolateIncrease = IsolateIncrease

    @property
    def IsolateCnt(self):
        r"""Total number of isolated events
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._IsolateCnt

    @IsolateCnt.setter
    def IsolateCnt(self, IsolateCnt):
        self._IsolateCnt = IsolateCnt

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RiskContainerCnt = params.get("RiskContainerCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._VirusDataBaseModifyTime = params.get("VirusDataBaseModifyTime")
        self._RiskContainerIncrease = params.get("RiskContainerIncrease")
        self._RiskIncrease = params.get("RiskIncrease")
        self._IsolateIncrease = params.get("IsolateIncrease")
        self._IsolateCnt = params.get("IsolateCnt")
        self._RequestId = params.get("RequestId")


class DescribeVirusTaskListRequest(AbstractModel):
    r"""DescribeVirusTaskList request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>ContainerName- String - Required: No - Container name</li>
<li>ContainerId - String - Required: No - Container ID</li>
<li>Hostname - String - Required: No - Server name</li>
<li>HostIp- String - Required: No - Server IP</li>
<li>ImageId- String - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>Status- String - Required: No - Status</li>
        :type Filters: list of RunTimeFilters
        :param _By: Sorting field
        :type By: str
        :param _Order: Sorting order
        :type Order: str
        """
        self._TaskId = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._By = None
        self._Order = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>ContainerName- String - Required: No - Container name</li>
<li>ContainerId - String - Required: No - Container ID</li>
<li>Hostname - String - Required: No - Server name</li>
<li>HostIp- String - Required: No - Server IP</li>
<li>ImageId- String - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>Status- String - Required: No - Status</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._By = params.get("By")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVirusTaskListResponse(AbstractModel):
    r"""DescribeVirusTaskList response structure.

    """

    def __init__(self):
        r"""
        :param _List: Virus scanning list
        :type List: list of VirusTaskInfo
        :param _TotalCount: Total number (number of container tasks)
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""Virus scanning list
        :rtype: list of VirusTaskInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number (number of container tasks)
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VirusTaskInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVulContainerListRequest(AbstractModel):
    r"""DescribeVulContainerList request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- String - Required: No - Container name</li>
        :type Filters: list of RunTimeFilters
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- String - Required: No - Container name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulContainerListResponse(AbstractModel):
    r"""DescribeVulContainerList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of containers
        :type List: list of VulAffectedContainerInfo
        :param _TotalCount: Total number of containers
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of containers
        :rtype: list of VulAffectedContainerInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number of containers
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulAffectedContainerInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceEventDetailRequest(AbstractModel):
    r"""DescribeVulDefenceEventDetail request structure.

    """

    def __init__(self):
        r"""
        :param _EventID: Event ID
        :type EventID: int
        """
        self._EventID = None

    @property
    def EventID(self):
        r"""Event ID
        :rtype: int
        """
        return self._EventID

    @EventID.setter
    def EventID(self, EventID):
        self._EventID = EventID


    def _deserialize(self, params):
        self._EventID = params.get("EventID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceEventDetailResponse(AbstractModel):
    r"""DescribeVulDefenceEventDetail response structure.

    """

    def __init__(self):
        r"""
        :param _EventDetail: Exploit prevention event details
        :type EventDetail: :class:`tencentcloud.tcss.v20201101.models.VulDefenceEventDetail`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EventDetail = None
        self._RequestId = None

    @property
    def EventDetail(self):
        r"""Exploit prevention event details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.VulDefenceEventDetail`
        """
        return self._EventDetail

    @EventDetail.setter
    def EventDetail(self, EventDetail):
        self._EventDetail = EventDetail

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EventDetail") is not None:
            self._EventDetail = VulDefenceEventDetail()
            self._EventDetail._deserialize(params.get("EventDetail"))
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceEventRequest(AbstractModel):
    r"""DescribeVulDefenceEvent request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>Status- String - Required: No - Plugin status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignored); `EVENT_DEFENDED` (defended).</li>
<li>ContainerStatus- String - Required: No - Container status. Valid values: `CREATED` (created); `RUNNING` (running); `PAUSED` (suspended); 	`STOPPED` (stopped); `RESTARTING` (restarting); `REMOVING` (removing); `DESTROYED` (terminated).</li>
<li>ContainerNetStatus- String - Required: No - Container network status. Valid values: `NORMAL` (not isolated); `ISOLATED` (isolated); `ISOLATE_FAILED` (isolation failed); `RESTORE_FAILED` (recovery failed); `RESTORING` (recovering); `ISOLATING` (isolating).</li>
<li>EventType - String - Required: No - Intrusion status. Valid values: `EVENT_DEFENDED` (defended successfully); `EVENT_ATTACK` (attack attempt).</li>
<li>TimeRange- String - Required: No - Time range. The first value indicates the start time, and the second the end time.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>SourceIP- string - Required: No - Attacker IP</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>HostName- string - Required: No - Server name</li>
<li>HostIP- string - Required: No - Private IP</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field: `EventCount` (number of events).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter
<li>Status- String - Required: No - Plugin status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignored); `EVENT_DEFENDED` (defended).</li>
<li>ContainerStatus- String - Required: No - Container status. Valid values: `CREATED` (created); `RUNNING` (running); `PAUSED` (suspended); 	`STOPPED` (stopped); `RESTARTING` (restarting); `REMOVING` (removing); `DESTROYED` (terminated).</li>
<li>ContainerNetStatus- String - Required: No - Container network status. Valid values: `NORMAL` (not isolated); `ISOLATED` (isolated); `ISOLATE_FAILED` (isolation failed); `RESTORE_FAILED` (recovery failed); `RESTORING` (recovering); `ISOLATING` (isolating).</li>
<li>EventType - String - Required: No - Intrusion status. Valid values: `EVENT_DEFENDED` (defended successfully); `EVENT_ATTACK` (attack attempt).</li>
<li>TimeRange- String - Required: No - Time range. The first value indicates the start time, and the second the end time.</li>
<li>VulName- string - Required: No - Vulnerability name</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>SourceIP- string - Required: No - Attacker IP</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>HostName- string - Required: No - Server name</li>
<li>HostIP- string - Required: No - Private IP</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `EventCount` (number of events).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceEventResponse(AbstractModel):
    r"""DescribeVulDefenceEvent response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of exploit prevention events
        :type List: list of VulDefenceEvent
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of exploit prevention events
        :rtype: list of VulDefenceEvent
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefenceEvent()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceEventTendencyRequest(AbstractModel):
    r"""DescribeVulDefenceEventTendency request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        """
        self._StartTime = None
        self._EndTime = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceEventTendencyResponse(AbstractModel):
    r"""DescribeVulDefenceEventTendency response structure.

    """

    def __init__(self):
        r"""
        :param _DefendedList: Trend of exploit prevention events
        :type DefendedList: list of VulDefenceEventTendency
        :param _AttackList: Trend of vulnerability attack events
        :type AttackList: list of VulDefenceEventTendency
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._DefendedList = None
        self._AttackList = None
        self._RequestId = None

    @property
    def DefendedList(self):
        r"""Trend of exploit prevention events
        :rtype: list of VulDefenceEventTendency
        """
        return self._DefendedList

    @DefendedList.setter
    def DefendedList(self, DefendedList):
        self._DefendedList = DefendedList

    @property
    def AttackList(self):
        r"""Trend of vulnerability attack events
        :rtype: list of VulDefenceEventTendency
        """
        return self._AttackList

    @AttackList.setter
    def AttackList(self, AttackList):
        self._AttackList = AttackList

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DefendedList") is not None:
            self._DefendedList = []
            for item in params.get("DefendedList"):
                obj = VulDefenceEventTendency()
                obj._deserialize(item)
                self._DefendedList.append(obj)
        if params.get("AttackList") is not None:
            self._AttackList = []
            for item in params.get("AttackList"):
                obj = VulDefenceEventTendency()
                obj._deserialize(item)
                self._AttackList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceHostRequest(AbstractModel):
    r"""DescribeVulDefenceHost request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter condition
<li>`Status`: String - Required: No - Plugin status. Values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENCE` (not defended).</li>
<li>`HostName`: String - Required: No - Server/Super node name</li>
<li>`HostIP`: String - Required: No - Server IP </li>
<li>`NodeType`: String  - Required: No - Node type</li>
<li>`HostName` - String - Required: No - Super node name </li>
<li>`NodeSubNetCIDR`: String - Required: No - Super node CIDR block</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `asc`, `desc`.
        :type Order: str
        :param _By: Sorting field. Valid values: `ModifyTime` (update time); `CreateTime` (first enablement time).
        :type By: str
        """
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def Filters(self):
        r"""Filter condition
<li>`Status`: String - Required: No - Plugin status. Values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENCE` (not defended).</li>
<li>`HostName`: String - Required: No - Server/Super node name</li>
<li>`HostIP`: String - Required: No - Server IP </li>
<li>`NodeType`: String  - Required: No - Node type</li>
<li>`HostName` - String - Required: No - Super node name </li>
<li>`NodeSubNetCIDR`: String - Required: No - Super node CIDR block</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `asc`, `desc`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field. Valid values: `ModifyTime` (update time); `CreateTime` (first enablement time).
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefenceHostResponse(AbstractModel):
    r"""DescribeVulDefenceHost response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of servers with exploit prevention
        :type List: list of VulDefenceHost
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of servers with exploit prevention
        :rtype: list of VulDefenceHost
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefenceHost()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefencePluginRequest(AbstractModel):
    r"""DescribeVulDefencePlugin request structure.

    """

    def __init__(self):
        r"""
        :param _HostID: Host ID or unique super node ID
        :type HostID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter condition
<li>
Status- String - Required: No - Plugin status. Valid values: `INJECTING` (injecting); `SUCCESS` (injected successfully); `FAIL` (injection failed); `TIMEOUT` (plugin timed out); `QUIT` (plugin exited).
</li>
        :type Filters: list of RunTimeFilters
        """
        self._HostID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def HostID(self):
        r"""Host ID or unique super node ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter condition
<li>
Status- String - Required: No - Plugin status. Valid values: `INJECTING` (injecting); `SUCCESS` (injected successfully); `FAIL` (injection failed); `TIMEOUT` (plugin timed out); `QUIT` (plugin exited).
</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._HostID = params.get("HostID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDefencePluginResponse(AbstractModel):
    r"""DescribeVulDefencePlugin response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of exploit prevention plugins
        :type List: list of VulDefencePlugin
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of exploit prevention plugins
        :rtype: list of VulDefencePlugin
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulDefencePlugin()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulDefenceSettingRequest(AbstractModel):
    r"""DescribeVulDefenceSetting request structure.

    """


class DescribeVulDefenceSettingResponse(AbstractModel):
    r"""DescribeVulDefenceSetting response structure.

    """

    def __init__(self):
        r"""
        :param _IsEnabled: Whether it is enabled. Valid values: `0` (disabled); `1` (enabled).
        :type IsEnabled: int
        :param _Scope: Scope of servers with exploit prevention enabled. Valid values: `0` (specified servers); `1` (all servers).
        :type Scope: int
        :param _HostCount: Number of servers with exploit prevention enabled
        :type HostCount: int
        :param _ExceptionHostCount: Number of abnormal servers with exploit prevention enabled
        :type ExceptionHostCount: int
        :param _HostIDs: Specified servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIDs: list of str
        :param _HostTotalCount: Total number of servers with TCSS activated
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostTotalCount: int
        :param _SupportDefenseVulCount: Number of vulnerabilities that can be prevented
Note: This field may return null, indicating that no valid values can be obtained.
        :type SupportDefenseVulCount: int
        :param _HostNodeCount: Number of normal nodes
        :type HostNodeCount: int
        :param _SuperScope: Super node scope
        :type SuperScope: int
        :param _SuperNodeCount: Number of super nodes
        :type SuperNodeCount: int
        :param _SuperNodeIds: List of super node IDs
        :type SuperNodeIds: list of str
        :param _NodeTotalCount: Total number of super nodes with TCSS activated
        :type NodeTotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._IsEnabled = None
        self._Scope = None
        self._HostCount = None
        self._ExceptionHostCount = None
        self._HostIDs = None
        self._HostTotalCount = None
        self._SupportDefenseVulCount = None
        self._HostNodeCount = None
        self._SuperScope = None
        self._SuperNodeCount = None
        self._SuperNodeIds = None
        self._NodeTotalCount = None
        self._RequestId = None

    @property
    def IsEnabled(self):
        r"""Whether it is enabled. Valid values: `0` (disabled); `1` (enabled).
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def Scope(self):
        r"""Scope of servers with exploit prevention enabled. Valid values: `0` (specified servers); `1` (all servers).
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def HostCount(self):
        r"""Number of servers with exploit prevention enabled
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ExceptionHostCount(self):
        r"""Number of abnormal servers with exploit prevention enabled
        :rtype: int
        """
        return self._ExceptionHostCount

    @ExceptionHostCount.setter
    def ExceptionHostCount(self, ExceptionHostCount):
        self._ExceptionHostCount = ExceptionHostCount

    @property
    def HostIDs(self):
        r"""Specified servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._HostIDs

    @HostIDs.setter
    def HostIDs(self, HostIDs):
        self._HostIDs = HostIDs

    @property
    def HostTotalCount(self):
        r"""Total number of servers with TCSS activated
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._HostTotalCount

    @HostTotalCount.setter
    def HostTotalCount(self, HostTotalCount):
        self._HostTotalCount = HostTotalCount

    @property
    def SupportDefenseVulCount(self):
        r"""Number of vulnerabilities that can be prevented
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._SupportDefenseVulCount

    @SupportDefenseVulCount.setter
    def SupportDefenseVulCount(self, SupportDefenseVulCount):
        self._SupportDefenseVulCount = SupportDefenseVulCount

    @property
    def HostNodeCount(self):
        r"""Number of normal nodes
        :rtype: int
        """
        return self._HostNodeCount

    @HostNodeCount.setter
    def HostNodeCount(self, HostNodeCount):
        self._HostNodeCount = HostNodeCount

    @property
    def SuperScope(self):
        r"""Super node scope
        :rtype: int
        """
        return self._SuperScope

    @SuperScope.setter
    def SuperScope(self, SuperScope):
        self._SuperScope = SuperScope

    @property
    def SuperNodeCount(self):
        r"""Number of super nodes
        :rtype: int
        """
        return self._SuperNodeCount

    @SuperNodeCount.setter
    def SuperNodeCount(self, SuperNodeCount):
        self._SuperNodeCount = SuperNodeCount

    @property
    def SuperNodeIds(self):
        r"""List of super node IDs
        :rtype: list of str
        """
        return self._SuperNodeIds

    @SuperNodeIds.setter
    def SuperNodeIds(self, SuperNodeIds):
        self._SuperNodeIds = SuperNodeIds

    @property
    def NodeTotalCount(self):
        r"""Total number of super nodes with TCSS activated
        :rtype: int
        """
        return self._NodeTotalCount

    @NodeTotalCount.setter
    def NodeTotalCount(self, NodeTotalCount):
        self._NodeTotalCount = NodeTotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsEnabled = params.get("IsEnabled")
        self._Scope = params.get("Scope")
        self._HostCount = params.get("HostCount")
        self._ExceptionHostCount = params.get("ExceptionHostCount")
        self._HostIDs = params.get("HostIDs")
        self._HostTotalCount = params.get("HostTotalCount")
        self._SupportDefenseVulCount = params.get("SupportDefenseVulCount")
        self._HostNodeCount = params.get("HostNodeCount")
        self._SuperScope = params.get("SuperScope")
        self._SuperNodeCount = params.get("SuperNodeCount")
        self._SuperNodeIds = params.get("SuperNodeIds")
        self._NodeTotalCount = params.get("NodeTotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVulDetailRequest(AbstractModel):
    r"""DescribeVulDetail request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        """
        self._PocID = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulDetailResponse(AbstractModel):
    r"""DescribeVulDetail response structure.

    """

    def __init__(self):
        r"""
        :param _VulInfo: Vulnerability details
        :type VulInfo: :class:`tencentcloud.tcss.v20201101.models.VulDetailInfo`
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulInfo = None
        self._RequestId = None

    @property
    def VulInfo(self):
        r"""Vulnerability details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.VulDetailInfo`
        """
        return self._VulInfo

    @VulInfo.setter
    def VulInfo(self, VulInfo):
        self._VulInfo = VulInfo

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulInfo") is not None:
            self._VulInfo = VulDetailInfo()
            self._VulInfo._deserialize(params.get("VulInfo"))
        self._RequestId = params.get("RequestId")


class DescribeVulIgnoreLocalImageListRequest(AbstractModel):
    r"""DescribeVulIgnoreLocalImageList request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order. Valid values: `DESC`, `ASC`.
        :type Order: str
        :param _By: Sorting field: `ImageSize`.
        :type By: str
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order. Valid values: `DESC`, `ASC`.
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field: `ImageSize`.
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulIgnoreLocalImageListResponse(AbstractModel):
    r"""DescribeVulIgnoreLocalImageList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of images
        :type List: list of VulIgnoreLocalImage
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of images
        :rtype: list of VulIgnoreLocalImage
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulIgnoreLocalImage()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulIgnoreRegistryImageListRequest(AbstractModel):
    r"""DescribeVulIgnoreRegistryImageList request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulIgnoreRegistryImageListResponse(AbstractModel):
    r"""DescribeVulIgnoreRegistryImageList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number
        :type TotalCount: int
        :param _List: List of images
        :type List: list of VulIgnoreRegistryImage
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of images
        :rtype: list of VulIgnoreRegistryImage
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulIgnoreRegistryImage()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulImageListRequest(AbstractModel):
    r"""DescribeVulImageList request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>HostIP- string - Required: No - Private IP</li>
<li>PublicIP- string - Required: No - Public IP</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>HostName- string - Required: No - Server name</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>HostIP- string - Required: No - Private IP</li>
<li>PublicIP- string - Required: No - Public IP</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>HostName- string - Required: No - Server name</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulImageListResponse(AbstractModel):
    r"""DescribeVulImageList response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of affected images
        :type List: list of VulAffectedImageInfo
        :param _TotalCount: Total number of images
        :type TotalCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of affected images
        :rtype: list of VulAffectedImageInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def TotalCount(self):
        r"""Total number of images
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulAffectedImageInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeVulImageSummaryRequest(AbstractModel):
    r"""DescribeVulImageSummary request structure.

    """


class DescribeVulImageSummaryResponse(AbstractModel):
    r"""DescribeVulImageSummary response structure.

    """

    def __init__(self):
        r"""
        :param _SeriousVulImageCount: Number of images affected by critical or high-risk vulnerabilities
        :type SeriousVulImageCount: int
        :param _ScannedImageCount: Number of scanned images
        :type ScannedImageCount: int
        :param _VulTotalCount: Total number of vulnerabilities
        :type VulTotalCount: int
        :param _SysTemVulCount: Number of system vulnerabilities
        :type SysTemVulCount: int
        :param _WebVulCount: Number of web application vulnerabilities
        :type WebVulCount: int
        :param _AllAuthorizedImageCount: Number of licensed images
        :type AllAuthorizedImageCount: int
        :param _EmergencyVulCount: Number of emergency vulnerabilities
        :type EmergencyVulCount: int
        :param _SupportVulTotalCount: Total number of vulnerabilities that can be scanned for
        :type SupportVulTotalCount: int
        :param _VulLibraryUpdateTime: Vulnerability library update time
        :type VulLibraryUpdateTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SeriousVulImageCount = None
        self._ScannedImageCount = None
        self._VulTotalCount = None
        self._SysTemVulCount = None
        self._WebVulCount = None
        self._AllAuthorizedImageCount = None
        self._EmergencyVulCount = None
        self._SupportVulTotalCount = None
        self._VulLibraryUpdateTime = None
        self._RequestId = None

    @property
    def SeriousVulImageCount(self):
        r"""Number of images affected by critical or high-risk vulnerabilities
        :rtype: int
        """
        return self._SeriousVulImageCount

    @SeriousVulImageCount.setter
    def SeriousVulImageCount(self, SeriousVulImageCount):
        self._SeriousVulImageCount = SeriousVulImageCount

    @property
    def ScannedImageCount(self):
        r"""Number of scanned images
        :rtype: int
        """
        return self._ScannedImageCount

    @ScannedImageCount.setter
    def ScannedImageCount(self, ScannedImageCount):
        self._ScannedImageCount = ScannedImageCount

    @property
    def VulTotalCount(self):
        r"""Total number of vulnerabilities
        :rtype: int
        """
        return self._VulTotalCount

    @VulTotalCount.setter
    def VulTotalCount(self, VulTotalCount):
        self._VulTotalCount = VulTotalCount

    @property
    def SysTemVulCount(self):
        r"""Number of system vulnerabilities
        :rtype: int
        """
        return self._SysTemVulCount

    @SysTemVulCount.setter
    def SysTemVulCount(self, SysTemVulCount):
        self._SysTemVulCount = SysTemVulCount

    @property
    def WebVulCount(self):
        r"""Number of web application vulnerabilities
        :rtype: int
        """
        return self._WebVulCount

    @WebVulCount.setter
    def WebVulCount(self, WebVulCount):
        self._WebVulCount = WebVulCount

    @property
    def AllAuthorizedImageCount(self):
        r"""Number of licensed images
        :rtype: int
        """
        return self._AllAuthorizedImageCount

    @AllAuthorizedImageCount.setter
    def AllAuthorizedImageCount(self, AllAuthorizedImageCount):
        self._AllAuthorizedImageCount = AllAuthorizedImageCount

    @property
    def EmergencyVulCount(self):
        r"""Number of emergency vulnerabilities
        :rtype: int
        """
        return self._EmergencyVulCount

    @EmergencyVulCount.setter
    def EmergencyVulCount(self, EmergencyVulCount):
        self._EmergencyVulCount = EmergencyVulCount

    @property
    def SupportVulTotalCount(self):
        r"""Total number of vulnerabilities that can be scanned for
        :rtype: int
        """
        return self._SupportVulTotalCount

    @SupportVulTotalCount.setter
    def SupportVulTotalCount(self, SupportVulTotalCount):
        self._SupportVulTotalCount = SupportVulTotalCount

    @property
    def VulLibraryUpdateTime(self):
        r"""Vulnerability library update time
        :rtype: str
        """
        return self._VulLibraryUpdateTime

    @VulLibraryUpdateTime.setter
    def VulLibraryUpdateTime(self, VulLibraryUpdateTime):
        self._VulLibraryUpdateTime = VulLibraryUpdateTime

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SeriousVulImageCount = params.get("SeriousVulImageCount")
        self._ScannedImageCount = params.get("ScannedImageCount")
        self._VulTotalCount = params.get("VulTotalCount")
        self._SysTemVulCount = params.get("SysTemVulCount")
        self._WebVulCount = params.get("WebVulCount")
        self._AllAuthorizedImageCount = params.get("AllAuthorizedImageCount")
        self._EmergencyVulCount = params.get("EmergencyVulCount")
        self._SupportVulTotalCount = params.get("SupportVulTotalCount")
        self._VulLibraryUpdateTime = params.get("VulLibraryUpdateTime")
        self._RequestId = params.get("RequestId")


class DescribeVulLevelImageSummaryRequest(AbstractModel):
    r"""DescribeVulLevelImageSummary request structure.

    """


class DescribeVulLevelImageSummaryResponse(AbstractModel):
    r"""DescribeVulLevelImageSummary response structure.

    """

    def __init__(self):
        r"""
        :param _HighLevelVulLocalImagePercent: Percentage of high-risk vulnerabilities in the latest local images
        :type HighLevelVulLocalImagePercent: float
        :param _MediumLevelVulLocalImagePercent: Percentage of medium-risk vulnerabilities in the latest local images
        :type MediumLevelVulLocalImagePercent: float
        :param _LowLevelVulLocalImagePercent: Percentage of low-risk vulnerabilities in the latest local images
        :type LowLevelVulLocalImagePercent: float
        :param _CriticalLevelVulLocalImagePercent: Percentage of critical vulnerabilities in the latest local images
        :type CriticalLevelVulLocalImagePercent: float
        :param _LocalNewestImageCount: Number of affected local images on the latest version
        :type LocalNewestImageCount: int
        :param _RegistryNewestImageCount: Number of affected repository images on the latest version
        :type RegistryNewestImageCount: int
        :param _HighLevelVulRegistryImagePercent: Percentage of high-risk vulnerabilities in the latest repository image
        :type HighLevelVulRegistryImagePercent: float
        :param _MediumLevelVulRegistryImagePercent: Percentage of medium-risk vulnerabilities in the latest repository image
        :type MediumLevelVulRegistryImagePercent: float
        :param _LowLevelVulRegistryImagePercent: Percentage of low-risk vulnerabilities in the latest repository image
        :type LowLevelVulRegistryImagePercent: float
        :param _CriticalLevelVulRegistryImagePercent: Percentage of critical vulnerabilities in the latest repository image
        :type CriticalLevelVulRegistryImagePercent: float
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HighLevelVulLocalImagePercent = None
        self._MediumLevelVulLocalImagePercent = None
        self._LowLevelVulLocalImagePercent = None
        self._CriticalLevelVulLocalImagePercent = None
        self._LocalNewestImageCount = None
        self._RegistryNewestImageCount = None
        self._HighLevelVulRegistryImagePercent = None
        self._MediumLevelVulRegistryImagePercent = None
        self._LowLevelVulRegistryImagePercent = None
        self._CriticalLevelVulRegistryImagePercent = None
        self._RequestId = None

    @property
    def HighLevelVulLocalImagePercent(self):
        r"""Percentage of high-risk vulnerabilities in the latest local images
        :rtype: float
        """
        return self._HighLevelVulLocalImagePercent

    @HighLevelVulLocalImagePercent.setter
    def HighLevelVulLocalImagePercent(self, HighLevelVulLocalImagePercent):
        self._HighLevelVulLocalImagePercent = HighLevelVulLocalImagePercent

    @property
    def MediumLevelVulLocalImagePercent(self):
        r"""Percentage of medium-risk vulnerabilities in the latest local images
        :rtype: float
        """
        return self._MediumLevelVulLocalImagePercent

    @MediumLevelVulLocalImagePercent.setter
    def MediumLevelVulLocalImagePercent(self, MediumLevelVulLocalImagePercent):
        self._MediumLevelVulLocalImagePercent = MediumLevelVulLocalImagePercent

    @property
    def LowLevelVulLocalImagePercent(self):
        r"""Percentage of low-risk vulnerabilities in the latest local images
        :rtype: float
        """
        return self._LowLevelVulLocalImagePercent

    @LowLevelVulLocalImagePercent.setter
    def LowLevelVulLocalImagePercent(self, LowLevelVulLocalImagePercent):
        self._LowLevelVulLocalImagePercent = LowLevelVulLocalImagePercent

    @property
    def CriticalLevelVulLocalImagePercent(self):
        r"""Percentage of critical vulnerabilities in the latest local images
        :rtype: float
        """
        return self._CriticalLevelVulLocalImagePercent

    @CriticalLevelVulLocalImagePercent.setter
    def CriticalLevelVulLocalImagePercent(self, CriticalLevelVulLocalImagePercent):
        self._CriticalLevelVulLocalImagePercent = CriticalLevelVulLocalImagePercent

    @property
    def LocalNewestImageCount(self):
        r"""Number of affected local images on the latest version
        :rtype: int
        """
        return self._LocalNewestImageCount

    @LocalNewestImageCount.setter
    def LocalNewestImageCount(self, LocalNewestImageCount):
        self._LocalNewestImageCount = LocalNewestImageCount

    @property
    def RegistryNewestImageCount(self):
        r"""Number of affected repository images on the latest version
        :rtype: int
        """
        return self._RegistryNewestImageCount

    @RegistryNewestImageCount.setter
    def RegistryNewestImageCount(self, RegistryNewestImageCount):
        self._RegistryNewestImageCount = RegistryNewestImageCount

    @property
    def HighLevelVulRegistryImagePercent(self):
        r"""Percentage of high-risk vulnerabilities in the latest repository image
        :rtype: float
        """
        return self._HighLevelVulRegistryImagePercent

    @HighLevelVulRegistryImagePercent.setter
    def HighLevelVulRegistryImagePercent(self, HighLevelVulRegistryImagePercent):
        self._HighLevelVulRegistryImagePercent = HighLevelVulRegistryImagePercent

    @property
    def MediumLevelVulRegistryImagePercent(self):
        r"""Percentage of medium-risk vulnerabilities in the latest repository image
        :rtype: float
        """
        return self._MediumLevelVulRegistryImagePercent

    @MediumLevelVulRegistryImagePercent.setter
    def MediumLevelVulRegistryImagePercent(self, MediumLevelVulRegistryImagePercent):
        self._MediumLevelVulRegistryImagePercent = MediumLevelVulRegistryImagePercent

    @property
    def LowLevelVulRegistryImagePercent(self):
        r"""Percentage of low-risk vulnerabilities in the latest repository image
        :rtype: float
        """
        return self._LowLevelVulRegistryImagePercent

    @LowLevelVulRegistryImagePercent.setter
    def LowLevelVulRegistryImagePercent(self, LowLevelVulRegistryImagePercent):
        self._LowLevelVulRegistryImagePercent = LowLevelVulRegistryImagePercent

    @property
    def CriticalLevelVulRegistryImagePercent(self):
        r"""Percentage of critical vulnerabilities in the latest repository image
        :rtype: float
        """
        return self._CriticalLevelVulRegistryImagePercent

    @CriticalLevelVulRegistryImagePercent.setter
    def CriticalLevelVulRegistryImagePercent(self, CriticalLevelVulRegistryImagePercent):
        self._CriticalLevelVulRegistryImagePercent = CriticalLevelVulRegistryImagePercent

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HighLevelVulLocalImagePercent = params.get("HighLevelVulLocalImagePercent")
        self._MediumLevelVulLocalImagePercent = params.get("MediumLevelVulLocalImagePercent")
        self._LowLevelVulLocalImagePercent = params.get("LowLevelVulLocalImagePercent")
        self._CriticalLevelVulLocalImagePercent = params.get("CriticalLevelVulLocalImagePercent")
        self._LocalNewestImageCount = params.get("LocalNewestImageCount")
        self._RegistryNewestImageCount = params.get("RegistryNewestImageCount")
        self._HighLevelVulRegistryImagePercent = params.get("HighLevelVulRegistryImagePercent")
        self._MediumLevelVulRegistryImagePercent = params.get("MediumLevelVulRegistryImagePercent")
        self._LowLevelVulRegistryImagePercent = params.get("LowLevelVulRegistryImagePercent")
        self._CriticalLevelVulRegistryImagePercent = params.get("CriticalLevelVulRegistryImagePercent")
        self._RequestId = params.get("RequestId")


class DescribeVulLevelSummaryRequest(AbstractModel):
    r"""DescribeVulLevelSummary request structure.

    """

    def __init__(self):
        r"""
        :param _CategoryType: Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `EMERGENCY` (emergency vulnerability).
        :type CategoryType: str
        """
        self._CategoryType = None

    @property
    def CategoryType(self):
        r"""Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `EMERGENCY` (emergency vulnerability).
        :rtype: str
        """
        return self._CategoryType

    @CategoryType.setter
    def CategoryType(self, CategoryType):
        self._CategoryType = CategoryType


    def _deserialize(self, params):
        self._CategoryType = params.get("CategoryType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulLevelSummaryResponse(AbstractModel):
    r"""DescribeVulLevelSummary response structure.

    """

    def __init__(self):
        r"""
        :param _HighLevelVulCount: Number of high-risk vulnerabilities
        :type HighLevelVulCount: int
        :param _MediumLevelVulCount: Number of medium-risk vulnerabilities
        :type MediumLevelVulCount: int
        :param _LowLevelVulCount: Number of low-risk vulnerabilities
        :type LowLevelVulCount: int
        :param _CriticalLevelVulCount: Number of critical vulnerabilities
        :type CriticalLevelVulCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HighLevelVulCount = None
        self._MediumLevelVulCount = None
        self._LowLevelVulCount = None
        self._CriticalLevelVulCount = None
        self._RequestId = None

    @property
    def HighLevelVulCount(self):
        r"""Number of high-risk vulnerabilities
        :rtype: int
        """
        return self._HighLevelVulCount

    @HighLevelVulCount.setter
    def HighLevelVulCount(self, HighLevelVulCount):
        self._HighLevelVulCount = HighLevelVulCount

    @property
    def MediumLevelVulCount(self):
        r"""Number of medium-risk vulnerabilities
        :rtype: int
        """
        return self._MediumLevelVulCount

    @MediumLevelVulCount.setter
    def MediumLevelVulCount(self, MediumLevelVulCount):
        self._MediumLevelVulCount = MediumLevelVulCount

    @property
    def LowLevelVulCount(self):
        r"""Number of low-risk vulnerabilities
        :rtype: int
        """
        return self._LowLevelVulCount

    @LowLevelVulCount.setter
    def LowLevelVulCount(self, LowLevelVulCount):
        self._LowLevelVulCount = LowLevelVulCount

    @property
    def CriticalLevelVulCount(self):
        r"""Number of critical vulnerabilities
        :rtype: int
        """
        return self._CriticalLevelVulCount

    @CriticalLevelVulCount.setter
    def CriticalLevelVulCount(self, CriticalLevelVulCount):
        self._CriticalLevelVulCount = CriticalLevelVulCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HighLevelVulCount = params.get("HighLevelVulCount")
        self._MediumLevelVulCount = params.get("MediumLevelVulCount")
        self._LowLevelVulCount = params.get("LowLevelVulCount")
        self._CriticalLevelVulCount = params.get("CriticalLevelVulCount")
        self._RequestId = params.get("RequestId")


class DescribeVulRegistryImageListRequest(AbstractModel):
    r"""DescribeVulRegistryImageList request structure.

    """

    def __init__(self):
        r"""
        :param _PocID: Vulnerability ID
        :type PocID: str
        :param _Limit: The number of results returned. Default value: 10. Maximum value: 100.
        :type Limit: int
        :param _Offset: 
        :type Offset: int
        :param _Filters: Filter condition
`OnlyAffectedNewestImage`: (bool) Whether the latest image is affected.
`ImageDigest`: Image digest. Fuzzy query is supported.
`ImageId`: Image ID.
`Namespace`: Namespace. Fuzzy query is supported.
`ImageTag`: Image tag. Fuzzy query is supported.
`InstanceName`: Instance name. Fuzzy query is supported.
`ImageName`: Image name. Fuzzy query is supported.
`ImageRepoAddress`: Image address. Fuzzy query is supported.
        :type Filters: list of AssetFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._PocID = None
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def PocID(self):
        r"""Vulnerability ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Limit(self):
        r"""The number of results returned. Default value: 10. Maximum value: 100.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter condition
`OnlyAffectedNewestImage`: (bool) Whether the latest image is affected.
`ImageDigest`: Image digest. Fuzzy query is supported.
`ImageId`: Image ID.
`Namespace`: Namespace. Fuzzy query is supported.
`ImageTag`: Image tag. Fuzzy query is supported.
`InstanceName`: Instance name. Fuzzy query is supported.
`ImageName`: Image name. Fuzzy query is supported.
`ImageRepoAddress`: Image address. Fuzzy query is supported.
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulRegistryImageListResponse(AbstractModel):
    r"""DescribeVulRegistryImageList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of images
        :type TotalCount: int
        :param _List: 
        :type List: list of VulAffectedRegistryImageInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of images
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""
        :rtype: list of VulAffectedRegistryImageInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulAffectedRegistryImageInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulScanAuthorizedImageSummaryRequest(AbstractModel):
    r"""DescribeVulScanAuthorizedImageSummary request structure.

    """


class DescribeVulScanAuthorizedImageSummaryResponse(AbstractModel):
    r"""DescribeVulScanAuthorizedImageSummary response structure.

    """

    def __init__(self):
        r"""
        :param _AllAuthorizedImageCount: Number of all licensed local images
        :type AllAuthorizedImageCount: int
        :param _UnScanAuthorizedImageCount: Number of licensed but not scanned local images
        :type UnScanAuthorizedImageCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._AllAuthorizedImageCount = None
        self._UnScanAuthorizedImageCount = None
        self._RequestId = None

    @property
    def AllAuthorizedImageCount(self):
        r"""Number of all licensed local images
        :rtype: int
        """
        return self._AllAuthorizedImageCount

    @AllAuthorizedImageCount.setter
    def AllAuthorizedImageCount(self, AllAuthorizedImageCount):
        self._AllAuthorizedImageCount = AllAuthorizedImageCount

    @property
    def UnScanAuthorizedImageCount(self):
        r"""Number of licensed but not scanned local images
        :rtype: int
        """
        return self._UnScanAuthorizedImageCount

    @UnScanAuthorizedImageCount.setter
    def UnScanAuthorizedImageCount(self, UnScanAuthorizedImageCount):
        self._UnScanAuthorizedImageCount = UnScanAuthorizedImageCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AllAuthorizedImageCount = params.get("AllAuthorizedImageCount")
        self._UnScanAuthorizedImageCount = params.get("UnScanAuthorizedImageCount")
        self._RequestId = params.get("RequestId")


class DescribeVulScanInfoRequest(AbstractModel):
    r"""DescribeVulScanInfo request structure.

    """

    def __init__(self):
        r"""
        :param _LocalTaskID: ID of the task to scan local images for vulnerabilities. If it is not specified, the ID of the last scan will be returned.
        :type LocalTaskID: int
        :param _RegistryTaskID: ID of the task to scan repository images for vulnerabilities. If it is not specified, the ID of the last scan will be returned.
        :type RegistryTaskID: int
        """
        self._LocalTaskID = None
        self._RegistryTaskID = None

    @property
    def LocalTaskID(self):
        r"""ID of the task to scan local images for vulnerabilities. If it is not specified, the ID of the last scan will be returned.
        :rtype: int
        """
        return self._LocalTaskID

    @LocalTaskID.setter
    def LocalTaskID(self, LocalTaskID):
        self._LocalTaskID = LocalTaskID

    @property
    def RegistryTaskID(self):
        r"""ID of the task to scan repository images for vulnerabilities. If it is not specified, the ID of the last scan will be returned.
        :rtype: int
        """
        return self._RegistryTaskID

    @RegistryTaskID.setter
    def RegistryTaskID(self, RegistryTaskID):
        self._RegistryTaskID = RegistryTaskID


    def _deserialize(self, params):
        self._LocalTaskID = params.get("LocalTaskID")
        self._RegistryTaskID = params.get("RegistryTaskID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulScanInfoResponse(AbstractModel):
    r"""DescribeVulScanInfo response structure.

    """

    def __init__(self):
        r"""
        :param _LocalImageScanCount: Total number of local images scanned this time
        :type LocalImageScanCount: int
        :param _IgnoreVulCount: Number of ignored vulnerabilities
        :type IgnoreVulCount: int
        :param _ScanStartTime: Start time of the vulnerability scan
        :type ScanStartTime: str
        :param _ScanEndTime: End time of the vulnerability scan
        :type ScanEndTime: str
        :param _FoundRiskImageCount: Number of images found to be at risk
        :type FoundRiskImageCount: int
        :param _FoundVulCount: Number of vulnerabilities found in local images
        :type FoundVulCount: int
        :param _ScanProgress: Scanning progress
        :type ScanProgress: float
        :param _RegistryImageScanCount: Total number of repository images scanned this time
        :type RegistryImageScanCount: int
        :param _LocalTaskID: ID of the last task to scan local images for vulnerabilities
        :type LocalTaskID: int
        :param _Status: Scanning status. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED` (scanned); `CANCELED` (stopped).
        :type Status: str
        :param _RemainingTime: Remaining time in seconds
        :type RemainingTime: float
        :param _RegistryTaskID: ID of the last task to scan repository images for vulnerabilities
        :type RegistryTaskID: int
        :param _RegistryFoundVulCount: Number of vulnerabilities found in the repository
        :type RegistryFoundVulCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._LocalImageScanCount = None
        self._IgnoreVulCount = None
        self._ScanStartTime = None
        self._ScanEndTime = None
        self._FoundRiskImageCount = None
        self._FoundVulCount = None
        self._ScanProgress = None
        self._RegistryImageScanCount = None
        self._LocalTaskID = None
        self._Status = None
        self._RemainingTime = None
        self._RegistryTaskID = None
        self._RegistryFoundVulCount = None
        self._RequestId = None

    @property
    def LocalImageScanCount(self):
        r"""Total number of local images scanned this time
        :rtype: int
        """
        return self._LocalImageScanCount

    @LocalImageScanCount.setter
    def LocalImageScanCount(self, LocalImageScanCount):
        self._LocalImageScanCount = LocalImageScanCount

    @property
    def IgnoreVulCount(self):
        r"""Number of ignored vulnerabilities
        :rtype: int
        """
        return self._IgnoreVulCount

    @IgnoreVulCount.setter
    def IgnoreVulCount(self, IgnoreVulCount):
        self._IgnoreVulCount = IgnoreVulCount

    @property
    def ScanStartTime(self):
        r"""Start time of the vulnerability scan
        :rtype: str
        """
        return self._ScanStartTime

    @ScanStartTime.setter
    def ScanStartTime(self, ScanStartTime):
        self._ScanStartTime = ScanStartTime

    @property
    def ScanEndTime(self):
        r"""End time of the vulnerability scan
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def FoundRiskImageCount(self):
        r"""Number of images found to be at risk
        :rtype: int
        """
        return self._FoundRiskImageCount

    @FoundRiskImageCount.setter
    def FoundRiskImageCount(self, FoundRiskImageCount):
        self._FoundRiskImageCount = FoundRiskImageCount

    @property
    def FoundVulCount(self):
        r"""Number of vulnerabilities found in local images
        :rtype: int
        """
        return self._FoundVulCount

    @FoundVulCount.setter
    def FoundVulCount(self, FoundVulCount):
        self._FoundVulCount = FoundVulCount

    @property
    def ScanProgress(self):
        r"""Scanning progress
        :rtype: float
        """
        return self._ScanProgress

    @ScanProgress.setter
    def ScanProgress(self, ScanProgress):
        self._ScanProgress = ScanProgress

    @property
    def RegistryImageScanCount(self):
        r"""Total number of repository images scanned this time
        :rtype: int
        """
        return self._RegistryImageScanCount

    @RegistryImageScanCount.setter
    def RegistryImageScanCount(self, RegistryImageScanCount):
        self._RegistryImageScanCount = RegistryImageScanCount

    @property
    def LocalTaskID(self):
        r"""ID of the last task to scan local images for vulnerabilities
        :rtype: int
        """
        return self._LocalTaskID

    @LocalTaskID.setter
    def LocalTaskID(self, LocalTaskID):
        self._LocalTaskID = LocalTaskID

    @property
    def Status(self):
        r"""Scanning status. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED` (scanned); `CANCELED` (stopped).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RemainingTime(self):
        r"""Remaining time in seconds
        :rtype: float
        """
        return self._RemainingTime

    @RemainingTime.setter
    def RemainingTime(self, RemainingTime):
        self._RemainingTime = RemainingTime

    @property
    def RegistryTaskID(self):
        r"""ID of the last task to scan repository images for vulnerabilities
        :rtype: int
        """
        return self._RegistryTaskID

    @RegistryTaskID.setter
    def RegistryTaskID(self, RegistryTaskID):
        self._RegistryTaskID = RegistryTaskID

    @property
    def RegistryFoundVulCount(self):
        r"""Number of vulnerabilities found in the repository
        :rtype: int
        """
        return self._RegistryFoundVulCount

    @RegistryFoundVulCount.setter
    def RegistryFoundVulCount(self, RegistryFoundVulCount):
        self._RegistryFoundVulCount = RegistryFoundVulCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LocalImageScanCount = params.get("LocalImageScanCount")
        self._IgnoreVulCount = params.get("IgnoreVulCount")
        self._ScanStartTime = params.get("ScanStartTime")
        self._ScanEndTime = params.get("ScanEndTime")
        self._FoundRiskImageCount = params.get("FoundRiskImageCount")
        self._FoundVulCount = params.get("FoundVulCount")
        self._ScanProgress = params.get("ScanProgress")
        self._RegistryImageScanCount = params.get("RegistryImageScanCount")
        self._LocalTaskID = params.get("LocalTaskID")
        self._Status = params.get("Status")
        self._RemainingTime = params.get("RemainingTime")
        self._RegistryTaskID = params.get("RegistryTaskID")
        self._RegistryFoundVulCount = params.get("RegistryFoundVulCount")
        self._RequestId = params.get("RequestId")


class DescribeVulScanLocalImageListRequest(AbstractModel):
    r"""DescribeVulScanLocalImageList request structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Vulnerability scan task ID
        :type TaskID: int
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus- string - Required: No - Check status. Valid values: `WAIT_SCAN` (pending); `SCANNING` (checking); `SCANNED` (checked); `SCAN_ERR` (failed to check); `CANCELED` (check ended).</li>
        :type Filters: list of RunTimeFilters
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._TaskID = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._By = None

    @property
    def TaskID(self):
        r"""Vulnerability scan task ID
        :rtype: int
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- Bool- Required: No - Show only vulnerabilities that affect the latest image tags</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ScanStatus- string - Required: No - Check status. Valid values: `WAIT_SCAN` (pending); `SCANNING` (checking); `SCANNED` (checked); `SCAN_ERR` (failed to check); `CANCELED` (check ended).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulScanLocalImageListResponse(AbstractModel):
    r"""DescribeVulScanLocalImageList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of images
        :type TotalCount: int
        :param _List: List of images
        :type List: list of VulScanImageInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of images
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of images
        :rtype: list of VulScanImageInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulScanImageInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulSummaryRequest(AbstractModel):
    r"""DescribeVulSummary request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>OnlyAffectedNewestImage- string- Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>OnlyAffectedContainer-string- Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `ALL` (all vulnerabilities).</li>
        :type Filters: list of RunTimeFilters
        """
        self._Filters = None

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedNewestImage- string- Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>OnlyAffectedContainer-string- Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>CategoryType- string - Required: No - Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `ALL` (all vulnerabilities).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulSummaryResponse(AbstractModel):
    r"""DescribeVulSummary response structure.

    """

    def __init__(self):
        r"""
        :param _VulTotalCount: Total number of vulnerabilities
        :type VulTotalCount: int
        :param _SeriousVulCount: Number of critical and high-risk vulnerabilities
        :type SeriousVulCount: int
        :param _SuggestVulCount: Number of high-priority vulnerabilities
        :type SuggestVulCount: int
        :param _PocExpLevelVulCount: Number of vulnerabilities with POC or EXP
        :type PocExpLevelVulCount: int
        :param _RemoteExpLevelVulCount: Number of vulnerabilities with remote EXP
        :type RemoteExpLevelVulCount: int
        :param _SeriousVulNewestImageCount: Number of images on the latest version affected by critical or high-risk vulnerabilities
        :type SeriousVulNewestImageCount: int
        :param _SystemVulnerabilityFocusCount: Number of high-priority system vulnerabilities
        :type SystemVulnerabilityFocusCount: int
        :param _WebVulnerabilityFocusCount: Number of high-priority web vulnerabilities
        :type WebVulnerabilityFocusCount: int
        :param _SeriousVulnerabilityLocalImageCount: Number of affected local images
        :type SeriousVulnerabilityLocalImageCount: int
        :param _SeriousVulnerabilityRegistryImageCount: Number of affected repository images
        :type SeriousVulnerabilityRegistryImageCount: int
        :param _EmergencyVulnerabilityCount: Number of emergency vulnerabilities
        :type EmergencyVulnerabilityCount: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulTotalCount = None
        self._SeriousVulCount = None
        self._SuggestVulCount = None
        self._PocExpLevelVulCount = None
        self._RemoteExpLevelVulCount = None
        self._SeriousVulNewestImageCount = None
        self._SystemVulnerabilityFocusCount = None
        self._WebVulnerabilityFocusCount = None
        self._SeriousVulnerabilityLocalImageCount = None
        self._SeriousVulnerabilityRegistryImageCount = None
        self._EmergencyVulnerabilityCount = None
        self._RequestId = None

    @property
    def VulTotalCount(self):
        r"""Total number of vulnerabilities
        :rtype: int
        """
        return self._VulTotalCount

    @VulTotalCount.setter
    def VulTotalCount(self, VulTotalCount):
        self._VulTotalCount = VulTotalCount

    @property
    def SeriousVulCount(self):
        r"""Number of critical and high-risk vulnerabilities
        :rtype: int
        """
        return self._SeriousVulCount

    @SeriousVulCount.setter
    def SeriousVulCount(self, SeriousVulCount):
        self._SeriousVulCount = SeriousVulCount

    @property
    def SuggestVulCount(self):
        r"""Number of high-priority vulnerabilities
        :rtype: int
        """
        return self._SuggestVulCount

    @SuggestVulCount.setter
    def SuggestVulCount(self, SuggestVulCount):
        self._SuggestVulCount = SuggestVulCount

    @property
    def PocExpLevelVulCount(self):
        r"""Number of vulnerabilities with POC or EXP
        :rtype: int
        """
        return self._PocExpLevelVulCount

    @PocExpLevelVulCount.setter
    def PocExpLevelVulCount(self, PocExpLevelVulCount):
        self._PocExpLevelVulCount = PocExpLevelVulCount

    @property
    def RemoteExpLevelVulCount(self):
        r"""Number of vulnerabilities with remote EXP
        :rtype: int
        """
        return self._RemoteExpLevelVulCount

    @RemoteExpLevelVulCount.setter
    def RemoteExpLevelVulCount(self, RemoteExpLevelVulCount):
        self._RemoteExpLevelVulCount = RemoteExpLevelVulCount

    @property
    def SeriousVulNewestImageCount(self):
        r"""Number of images on the latest version affected by critical or high-risk vulnerabilities
        :rtype: int
        """
        return self._SeriousVulNewestImageCount

    @SeriousVulNewestImageCount.setter
    def SeriousVulNewestImageCount(self, SeriousVulNewestImageCount):
        self._SeriousVulNewestImageCount = SeriousVulNewestImageCount

    @property
    def SystemVulnerabilityFocusCount(self):
        r"""Number of high-priority system vulnerabilities
        :rtype: int
        """
        return self._SystemVulnerabilityFocusCount

    @SystemVulnerabilityFocusCount.setter
    def SystemVulnerabilityFocusCount(self, SystemVulnerabilityFocusCount):
        self._SystemVulnerabilityFocusCount = SystemVulnerabilityFocusCount

    @property
    def WebVulnerabilityFocusCount(self):
        r"""Number of high-priority web vulnerabilities
        :rtype: int
        """
        return self._WebVulnerabilityFocusCount

    @WebVulnerabilityFocusCount.setter
    def WebVulnerabilityFocusCount(self, WebVulnerabilityFocusCount):
        self._WebVulnerabilityFocusCount = WebVulnerabilityFocusCount

    @property
    def SeriousVulnerabilityLocalImageCount(self):
        r"""Number of affected local images
        :rtype: int
        """
        return self._SeriousVulnerabilityLocalImageCount

    @SeriousVulnerabilityLocalImageCount.setter
    def SeriousVulnerabilityLocalImageCount(self, SeriousVulnerabilityLocalImageCount):
        self._SeriousVulnerabilityLocalImageCount = SeriousVulnerabilityLocalImageCount

    @property
    def SeriousVulnerabilityRegistryImageCount(self):
        r"""Number of affected repository images
        :rtype: int
        """
        return self._SeriousVulnerabilityRegistryImageCount

    @SeriousVulnerabilityRegistryImageCount.setter
    def SeriousVulnerabilityRegistryImageCount(self, SeriousVulnerabilityRegistryImageCount):
        self._SeriousVulnerabilityRegistryImageCount = SeriousVulnerabilityRegistryImageCount

    @property
    def EmergencyVulnerabilityCount(self):
        r"""Number of emergency vulnerabilities
        :rtype: int
        """
        return self._EmergencyVulnerabilityCount

    @EmergencyVulnerabilityCount.setter
    def EmergencyVulnerabilityCount(self, EmergencyVulnerabilityCount):
        self._EmergencyVulnerabilityCount = EmergencyVulnerabilityCount

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VulTotalCount = params.get("VulTotalCount")
        self._SeriousVulCount = params.get("SeriousVulCount")
        self._SuggestVulCount = params.get("SuggestVulCount")
        self._PocExpLevelVulCount = params.get("PocExpLevelVulCount")
        self._RemoteExpLevelVulCount = params.get("RemoteExpLevelVulCount")
        self._SeriousVulNewestImageCount = params.get("SeriousVulNewestImageCount")
        self._SystemVulnerabilityFocusCount = params.get("SystemVulnerabilityFocusCount")
        self._WebVulnerabilityFocusCount = params.get("WebVulnerabilityFocusCount")
        self._SeriousVulnerabilityLocalImageCount = params.get("SeriousVulnerabilityLocalImageCount")
        self._SeriousVulnerabilityRegistryImageCount = params.get("SeriousVulnerabilityRegistryImageCount")
        self._EmergencyVulnerabilityCount = params.get("EmergencyVulnerabilityCount")
        self._RequestId = params.get("RequestId")


class DescribeVulTendencyRequest(AbstractModel):
    r"""DescribeVulTendency request structure.

    """

    def __init__(self):
        r"""
        :param _StartTime: Start time
        :type StartTime: str
        :param _EndTime: End time
        :type EndTime: str
        :param _SphereOfInfluence: Enumeration:
`LATEST`: Latest version.
`CONTAINER`: Running container.
        :type SphereOfInfluence: str
        """
        self._StartTime = None
        self._EndTime = None
        self._SphereOfInfluence = None

    @property
    def StartTime(self):
        r"""Start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""End time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def SphereOfInfluence(self):
        r"""Enumeration:
`LATEST`: Latest version.
`CONTAINER`: Running container.
        :rtype: str
        """
        return self._SphereOfInfluence

    @SphereOfInfluence.setter
    def SphereOfInfluence(self, SphereOfInfluence):
        self._SphereOfInfluence = SphereOfInfluence


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._SphereOfInfluence = params.get("SphereOfInfluence")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulTendencyResponse(AbstractModel):
    r"""DescribeVulTendency response structure.

    """

    def __init__(self):
        r"""
        :param _VulTendencySet: List of vulnerability trends
        :type VulTendencySet: list of VulTendencyInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._VulTendencySet = None
        self._RequestId = None

    @property
    def VulTendencySet(self):
        r"""List of vulnerability trends
        :rtype: list of VulTendencyInfo
        """
        return self._VulTendencySet

    @VulTendencySet.setter
    def VulTendencySet(self, VulTendencySet):
        self._VulTendencySet = VulTendencySet

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VulTendencySet") is not None:
            self._VulTendencySet = []
            for item in params.get("VulTendencySet"):
                obj = VulTendencyInfo()
                obj._deserialize(item)
                self._VulTendencySet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeVulTopRankingRequest(AbstractModel):
    r"""DescribeVulTopRanking request structure.

    """

    def __init__(self):
        r"""
        :param _CategoryType: Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `EMERGENCY` (emergency vulnerability).
        :type CategoryType: str
        """
        self._CategoryType = None

    @property
    def CategoryType(self):
        r"""Vulnerability type. Valid values: `SYSTEM` (system vulnerability); `WEB` (web application vulnerability); `EMERGENCY` (emergency vulnerability).
        :rtype: str
        """
        return self._CategoryType

    @CategoryType.setter
    def CategoryType(self, CategoryType):
        self._CategoryType = CategoryType


    def _deserialize(self, params):
        self._CategoryType = params.get("CategoryType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVulTopRankingResponse(AbstractModel):
    r"""DescribeVulTopRanking response structure.

    """

    def __init__(self):
        r"""
        :param _List: List of top vulnerabilities
        :type List: list of VulTopRankingInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._List = None
        self._RequestId = None

    @property
    def List(self):
        r"""List of top vulnerabilities
        :rtype: list of VulTopRankingInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulTopRankingInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeWarningRulesRequest(AbstractModel):
    r"""DescribeWarningRules request structure.

    """


class DescribeWarningRulesResponse(AbstractModel):
    r"""DescribeWarningRules response structure.

    """

    def __init__(self):
        r"""
        :param _WarningRules: List of alert policies
        :type WarningRules: list of WarningRule
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._WarningRules = None
        self._RequestId = None

    @property
    def WarningRules(self):
        r"""List of alert policies
        :rtype: list of WarningRule
        """
        return self._WarningRules

    @WarningRules.setter
    def WarningRules(self, WarningRules):
        self._WarningRules = WarningRules

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("WarningRules") is not None:
            self._WarningRules = []
            for item in params.get("WarningRules"):
                obj = WarningRule()
                obj._deserialize(item)
                self._WarningRules.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeWebVulListRequest(AbstractModel):
    r"""DescribeWebVulList request structure.

    """

    def __init__(self):
        r"""
        :param _Limit: Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :type Limit: int
        :param _Offset: Offset. Default value: `0`.
        :type Offset: int
        :param _Filters: Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        """
        self._Limit = None
        self._Offset = None
        self._Filters = None
        self._Order = None
        self._By = None

    @property
    def Limit(self):
        r"""Number of results to be returned. Default value: `10`. Maximum value: `100`.
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        r"""Offset. Default value: `0`.
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        r"""Filter
<li>OnlyAffectedContainer- string - Required: No - Show only vulnerabilities that affect containers. Valid values: `true`, `false`.</li>
<li>OnlyAffectedNewestImage-string - Required: No - Show only vulnerabilities that affect the latest image tags. Valid values: `true`, `false`.</li>
<li>Level- String - Required: No - Severity. Valid values: `CRITICAL` (critical); `HIGH` (high); `MIDDLE` (medium); `LOW` (low).</li>
<li>Tags- string - Required: No - Vulnerability tag. Valid values: `POC`, `EXP`.</li>
<li>CanBeFixed- string - Required: No - Whether the vulnerability can be fixed. Valid values: `true`, `false`.</li>
<li>CVEID- string - Required: No - CVE No.</li>
<li>ImageID- string - Required: No - Image ID</li>
<li>ImageName- String - Required: No - Image name</li>
<li>ContainerID- string - Required: No - Container ID</li>
<li>ContainerName- string - Required: No - Container name</li>
<li>ComponentName- string - Required: No - Component name</li>
<li>ComponentVersion- string - Required: No - Component version</li>
<li>Name- string - Required: No - Vulnerability name</li>
<li>FocusOnType - string - Required: No - Urgency. Valid values: `ALL` (all); `SERIOUS_LEVEL (critical and high risks); `IS_SUGGEST` (high-priority); `POC_EXP` (POC/EXP); `NETWORK_EXP` (remote EXP).</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeWebVulListResponse(AbstractModel):
    r"""DescribeWebVulList response structure.

    """

    def __init__(self):
        r"""
        :param _TotalCount: Total number of vulnerabilities
        :type TotalCount: int
        :param _List: List of vulnerabilities
        :type List: list of VulInfo
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TotalCount = None
        self._List = None
        self._RequestId = None

    @property
    def TotalCount(self):
        r"""Total number of vulnerabilities
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def List(self):
        r"""List of vulnerabilities
        :rtype: list of VulInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = VulInfo()
                obj._deserialize(item)
                self._List.append(obj)
        self._RequestId = params.get("RequestId")


class EmergencyVulInfo(AbstractModel):
    r"""List of emergency vulnerabilities

    """

    def __init__(self):
        r"""
        :param _Name: Vulnerability name
        :type Name: str
        :param _Tags: Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _CVSSV3Score: CVSS V3 score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVSSV3Score: float
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: str
        :param _CVEID: CVE No.
        :type CVEID: str
        :param _Category: Vulnerability type
Note: This field may return null, indicating that no valid values can be obtained.
        :type Category: str
        :param _SubmitTime: Vulnerability disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :type SubmitTime: str
        :param _LatestFoundTime: Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LatestFoundTime: str
        :param _Status: Emergency vulnerability risk information. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED_NOT_RISK` (scanned and at no risk); `SCANNED_RISK` (scanned and at risk).
        :type Status: str
        :param _ID: Vulnerability ID
        :type ID: int
        :param _PocID: POC ID
        :type PocID: str
        :param _DefenceStatus: Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceStatus: str
        :param _DefenceScope: Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceScope: str
        :param _DefenceHostCount: Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceHostCount: int
        :param _DefendedCount: Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefendedCount: int
        """
        self._Name = None
        self._Tags = None
        self._CVSSV3Score = None
        self._Level = None
        self._CVEID = None
        self._Category = None
        self._SubmitTime = None
        self._LatestFoundTime = None
        self._Status = None
        self._ID = None
        self._PocID = None
        self._DefenceStatus = None
        self._DefenceScope = None
        self._DefenceHostCount = None
        self._DefendedCount = None

    @property
    def Name(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Tags(self):
        r"""Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CVSSV3Score(self):
        r"""CVSS V3 score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CVSSV3Score

    @CVSSV3Score.setter
    def CVSSV3Score(self, CVSSV3Score):
        self._CVSSV3Score = CVSSV3Score

    @property
    def Level(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CVEID(self):
        r"""CVE No.
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def Category(self):
        r"""Vulnerability type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def SubmitTime(self):
        r"""Vulnerability disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime

    @property
    def LatestFoundTime(self):
        r"""Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def Status(self):
        r"""Emergency vulnerability risk information. Valid values: `NOT_SCAN` (not scanned); `SCANNING` (scanning); `SCANNED_NOT_RISK` (scanned and at no risk); `SCANNED_RISK` (scanned and at risk).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ID(self):
        r"""Vulnerability ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def DefenceStatus(self):
        r"""Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceStatus

    @DefenceStatus.setter
    def DefenceStatus(self, DefenceStatus):
        self._DefenceStatus = DefenceStatus

    @property
    def DefenceScope(self):
        r"""Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceScope

    @DefenceScope.setter
    def DefenceScope(self, DefenceScope):
        self._DefenceScope = DefenceScope

    @property
    def DefenceHostCount(self):
        r"""Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenceHostCount

    @DefenceHostCount.setter
    def DefenceHostCount(self, DefenceHostCount):
        self._DefenceHostCount = DefenceHostCount

    @property
    def DefendedCount(self):
        r"""Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefendedCount

    @DefendedCount.setter
    def DefendedCount(self, DefendedCount):
        self._DefendedCount = DefendedCount


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Tags = params.get("Tags")
        self._CVSSV3Score = params.get("CVSSV3Score")
        self._Level = params.get("Level")
        self._CVEID = params.get("CVEID")
        self._Category = params.get("Category")
        self._SubmitTime = params.get("SubmitTime")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._Status = params.get("Status")
        self._ID = params.get("ID")
        self._PocID = params.get("PocID")
        self._DefenceStatus = params.get("DefenceStatus")
        self._DefenceScope = params.get("DefenceScope")
        self._DefenceHostCount = params.get("DefenceHostCount")
        self._DefendedCount = params.get("DefendedCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeEventDescription(AbstractModel):
    r"""Description of the container escape event at runtime

    """

    def __init__(self):
        r"""
        :param _Description: Event rule
        :type Description: str
        :param _Solution: Solution
        :type Solution: str
        :param _Remark: Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        """
        self._Description = None
        self._Solution = None
        self._Remark = None
        self._OperationTime = None

    @property
    def Description(self):
        r"""Event rule
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Solution(self):
        r"""Solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Remark(self):
        r"""Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Solution = params.get("Solution")
        self._Remark = params.get("Remark")
        self._OperationTime = params.get("OperationTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeEventInfo(AbstractModel):
    r"""List of container escape events

    """

    def __init__(self):
        r"""
        :param _EventType: Event type.
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :type EventType: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Status: Status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :type Status: str
        :param _EventId: Unique event ID
        :type EventId: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _PodName: Pod (instance) name
        :type PodName: str
        :param _FoundTime: Generation time
        :type FoundTime: str
        :param _EventName: Event name
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
        :type EventName: str
        :param _ImageId: Image ID, which is used for redirect.
        :type ImageId: str
        :param _ContainerId: Container ID, which is used for redirect.
        :type ContainerId: str
        :param _Solution: Event solution
        :type Solution: str
        :param _Description: Event description
        :type Description: str
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _NodeIP: Node IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type NodeIP: str
        :param _HostID: Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostID: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        :param _ClusterID: ID of the cluster where the node resides
        :type ClusterID: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _NodeUniqueID: Unique node ID
        :type NodeUniqueID: str
        :param _PublicIP: Node public IP
        :type PublicIP: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _HostIP: Private IP of the node
        :type HostIP: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._EventType = None
        self._ContainerName = None
        self._ImageName = None
        self._Status = None
        self._EventId = None
        self._NodeName = None
        self._PodName = None
        self._FoundTime = None
        self._EventName = None
        self._ImageId = None
        self._ContainerId = None
        self._Solution = None
        self._Description = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._NodeIP = None
        self._HostID = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None
        self._ClusterID = None
        self._NodeType = None
        self._PodIP = None
        self._NodeUniqueID = None
        self._PublicIP = None
        self._NodeID = None
        self._HostIP = None
        self._ClusterName = None

    @property
    def EventType(self):
        r"""Event type.
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Status(self):
        r"""Status. Valid values: `EVENT_UNDEAL` (pending); `EVENT_DEALED` (processed); `EVENT_INGNORE` (ignored).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def PodName(self):
        r"""Pod (instance) name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def FoundTime(self):
        r"""Generation time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def EventName(self):
        r"""Event name
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def ImageId(self):
        r"""Image ID, which is used for redirect.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ContainerId(self):
        r"""Container ID, which is used for redirect.
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def Solution(self):
        r"""Event solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Description(self):
        r"""Event description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def NodeIP(self):
        r"""Node IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NodeIP

    @NodeIP.setter
    def NodeIP(self, NodeIP):
        self._NodeIP = NodeIP

    @property
    def HostID(self):
        r"""Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def ClusterID(self):
        r"""ID of the cluster where the node resides
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def NodeUniqueID(self):
        r"""Unique node ID
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PublicIP(self):
        r"""Node public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def HostIP(self):
        r"""Private IP of the node
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._EventType = params.get("EventType")
        self._ContainerName = params.get("ContainerName")
        self._ImageName = params.get("ImageName")
        self._Status = params.get("Status")
        self._EventId = params.get("EventId")
        self._NodeName = params.get("NodeName")
        self._PodName = params.get("PodName")
        self._FoundTime = params.get("FoundTime")
        self._EventName = params.get("EventName")
        self._ImageId = params.get("ImageId")
        self._ContainerId = params.get("ContainerId")
        self._Solution = params.get("Solution")
        self._Description = params.get("Description")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._NodeIP = params.get("NodeIP")
        self._HostID = params.get("HostID")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        self._ClusterID = params.get("ClusterID")
        self._NodeType = params.get("NodeType")
        self._PodIP = params.get("PodIP")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PublicIP = params.get("PublicIP")
        self._NodeID = params.get("NodeID")
        self._HostIP = params.get("HostIP")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeEventTendencyInfo(AbstractModel):
    r"""Trend of pending escape events

    """

    def __init__(self):
        r"""
        :param _RiskContainerEventCount: Total number of pending containers at risk
        :type RiskContainerEventCount: int
        :param _ProcessPrivilegeEventCount: Total number of pending program privilege escalation events
        :type ProcessPrivilegeEventCount: int
        :param _ContainerEscapeEventCount: Total number of pending container escape events
        :type ContainerEscapeEventCount: int
        :param _Date: Date
        :type Date: str
        """
        self._RiskContainerEventCount = None
        self._ProcessPrivilegeEventCount = None
        self._ContainerEscapeEventCount = None
        self._Date = None

    @property
    def RiskContainerEventCount(self):
        r"""Total number of pending containers at risk
        :rtype: int
        """
        return self._RiskContainerEventCount

    @RiskContainerEventCount.setter
    def RiskContainerEventCount(self, RiskContainerEventCount):
        self._RiskContainerEventCount = RiskContainerEventCount

    @property
    def ProcessPrivilegeEventCount(self):
        r"""Total number of pending program privilege escalation events
        :rtype: int
        """
        return self._ProcessPrivilegeEventCount

    @ProcessPrivilegeEventCount.setter
    def ProcessPrivilegeEventCount(self, ProcessPrivilegeEventCount):
        self._ProcessPrivilegeEventCount = ProcessPrivilegeEventCount

    @property
    def ContainerEscapeEventCount(self):
        r"""Total number of pending container escape events
        :rtype: int
        """
        return self._ContainerEscapeEventCount

    @ContainerEscapeEventCount.setter
    def ContainerEscapeEventCount(self, ContainerEscapeEventCount):
        self._ContainerEscapeEventCount = ContainerEscapeEventCount

    @property
    def Date(self):
        r"""Date
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date


    def _deserialize(self, params):
        self._RiskContainerEventCount = params.get("RiskContainerEventCount")
        self._ProcessPrivilegeEventCount = params.get("ProcessPrivilegeEventCount")
        self._ContainerEscapeEventCount = params.get("ContainerEscapeEventCount")
        self._Date = params.get("Date")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeRule(AbstractModel):
    r"""Enablement/Disablement of the container escape scan policy

    """

    def __init__(self):
        r"""
        :param _Type: Rule type   
`ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
`ESCAPE_SYSCALL`: Syscall escape.
        :type Type: str
        :param _Name: Rule name
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
        :type Name: str
        :param _IsEnable: Whether to enable. Valid values: `false` (no); `true` (yes).
        :type IsEnable: bool
        :param _Group: Rule group. Valid values: `RISK_CONTAINER` (container in risk); `PROCESS_PRIVILEGE` (program privilege escalation); `CONTAINER_ESCAPE` (container escape).
        :type Group: str
        """
        self._Type = None
        self._Name = None
        self._IsEnable = None
        self._Group = None

    @property
    def Type(self):
        r"""Rule type   
`ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
`ESCAPE_SYSCALL`: Syscall escape.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Name(self):
        r"""Rule name
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def IsEnable(self):
        r"""Whether to enable. Valid values: `false` (no); `true` (yes).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable

    @property
    def Group(self):
        r"""Rule group. Valid values: `RISK_CONTAINER` (container in risk); `PROCESS_PRIVILEGE` (program privilege escalation); `CONTAINER_ESCAPE` (container escape).
        :rtype: str
        """
        return self._Group

    @Group.setter
    def Group(self, Group):
        self._Group = Group


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Name = params.get("Name")
        self._IsEnable = params.get("IsEnable")
        self._Group = params.get("Group")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeRuleEnabled(AbstractModel):
    r"""Enablement/Disablement of the container escape scan policy

    """

    def __init__(self):
        r"""
        :param _Type: Rule type
   `ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `ESCAPE_SYSCALL`: Syscall escape.
        :type Type: str
        :param _IsEnable: Whether to enable. Valid values: `false` (no); `true` (yes).
        :type IsEnable: bool
        """
        self._Type = None
        self._IsEnable = None

    @property
    def Type(self):
        r"""Rule type
   `ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `ESCAPE_SYSCALL`: Syscall escape.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def IsEnable(self):
        r"""Whether to enable. Valid values: `false` (no); `true` (yes).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._IsEnable = params.get("IsEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EscapeWhiteListInfo(AbstractModel):
    r"""Escape allowlist

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ID: Allowed item ID
        :type ID: int
        :param _HostCount: Number of associated servers
        :type HostCount: int
        :param _ContainerCount: Number of associated containers
        :type ContainerCount: int
        :param _EventType: Allowed event type
        :type EventType: list of str
        :param _InsertTime: Creation time
        :type InsertTime: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _ImageSize: Image size
        :type ImageSize: int
        """
        self._ImageID = None
        self._ImageName = None
        self._ID = None
        self._HostCount = None
        self._ContainerCount = None
        self._EventType = None
        self._InsertTime = None
        self._UpdateTime = None
        self._ImageSize = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ID(self):
        r"""Allowed item ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def HostCount(self):
        r"""Number of associated servers
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ContainerCount(self):
        r"""Number of associated containers
        :rtype: int
        """
        return self._ContainerCount

    @ContainerCount.setter
    def ContainerCount(self, ContainerCount):
        self._ContainerCount = ContainerCount

    @property
    def EventType(self):
        r"""Allowed event type
        :rtype: list of str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def InsertTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._InsertTime

    @InsertTime.setter
    def InsertTime(self, InsertTime):
        self._InsertTime = InsertTime

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def ImageSize(self):
        r"""Image size
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._ID = params.get("ID")
        self._HostCount = params.get("HostCount")
        self._ContainerCount = params.get("ContainerCount")
        self._EventType = params.get("EventType")
        self._InsertTime = params.get("InsertTime")
        self._UpdateTime = params.get("UpdateTime")
        self._ImageSize = params.get("ImageSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportJobInfo(AbstractModel):
    r"""Export job details

    """

    def __init__(self):
        r"""
        :param _JobID: Job ID
        :type JobID: str
        :param _JobName: Job name
        :type JobName: str
        :param _Source: Source
        :type Source: str
        :param _ExportStatus: Export status
        :type ExportStatus: str
        :param _ExportProgress: Export progress
        :type ExportProgress: int
        :param _FailureMsg: Reason for failure
        :type FailureMsg: str
        :param _Timeout: Timeout threshold
        :type Timeout: str
        :param _InsertTime: Insertion time
        :type InsertTime: str
        """
        self._JobID = None
        self._JobName = None
        self._Source = None
        self._ExportStatus = None
        self._ExportProgress = None
        self._FailureMsg = None
        self._Timeout = None
        self._InsertTime = None

    @property
    def JobID(self):
        r"""Job ID
        :rtype: str
        """
        return self._JobID

    @JobID.setter
    def JobID(self, JobID):
        self._JobID = JobID

    @property
    def JobName(self):
        r"""Job name
        :rtype: str
        """
        return self._JobName

    @JobName.setter
    def JobName(self, JobName):
        self._JobName = JobName

    @property
    def Source(self):
        r"""Source
        :rtype: str
        """
        return self._Source

    @Source.setter
    def Source(self, Source):
        self._Source = Source

    @property
    def ExportStatus(self):
        r"""Export status
        :rtype: str
        """
        return self._ExportStatus

    @ExportStatus.setter
    def ExportStatus(self, ExportStatus):
        self._ExportStatus = ExportStatus

    @property
    def ExportProgress(self):
        r"""Export progress
        :rtype: int
        """
        return self._ExportProgress

    @ExportProgress.setter
    def ExportProgress(self, ExportProgress):
        self._ExportProgress = ExportProgress

    @property
    def FailureMsg(self):
        r"""Reason for failure
        :rtype: str
        """
        return self._FailureMsg

    @FailureMsg.setter
    def FailureMsg(self, FailureMsg):
        self._FailureMsg = FailureMsg

    @property
    def Timeout(self):
        r"""Timeout threshold
        :rtype: str
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def InsertTime(self):
        r"""Insertion time
        :rtype: str
        """
        return self._InsertTime

    @InsertTime.setter
    def InsertTime(self, InsertTime):
        self._InsertTime = InsertTime


    def _deserialize(self, params):
        self._JobID = params.get("JobID")
        self._JobName = params.get("JobName")
        self._Source = params.get("Source")
        self._ExportStatus = params.get("ExportStatus")
        self._ExportProgress = params.get("ExportProgress")
        self._FailureMsg = params.get("FailureMsg")
        self._Timeout = params.get("Timeout")
        self._InsertTime = params.get("InsertTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVirusListRequest(AbstractModel):
    r"""ExportVirusList request structure.

    """

    def __init__(self):
        r"""
        :param _Filters: Filter
<li>FileName - String - Required: No - Filename</li>
<li>FilePath - String - Required: No - File path</li>
<li>VirusName - String - Required: No - Virus name</li>
<li>ContainerName- String - Required: Yes - Container name</li>
<li>ContainerId- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageId- string - Required: No - Image ID</li>
<li>IsRealTime- int - Required: No - Whether it is real-time monitoring data</li>
<li>TaskId- string - Required: No - Task ID</li>
<li>TimeRange - string - Required: No - Time range ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>ContainerNetStatus - String - Required: No - Container network status. Valid values: `NORMAL`, `ISOLATED`, `ISOLATING`, `RESTORING`, `RESTORE_FAILED`.</li>
<li>ContainerStatus - string - Required: No - Container status. Valid values: `RUNNING`, `PAUSED`, `STOPPED`, `CREATED`, `DESTROYED`, `RESTARTING`, `REMOVING`.</li>
<li>AutoIsolateMode - string - Required: No - Isolation method. Valid values: `MANUAL`, `AUTO`.</li>
<li>MD5 - string - Required: No - MD5</li>
        :type Filters: list of RunTimeFilters
        :param _Order: Sorting order
        :type Order: str
        :param _By: Sorting field
        :type By: str
        :param _ExportField: Export field
        :type ExportField: list of str
        """
        self._Filters = None
        self._Order = None
        self._By = None
        self._ExportField = None

    @property
    def Filters(self):
        r"""Filter
<li>FileName - String - Required: No - Filename</li>
<li>FilePath - String - Required: No - File path</li>
<li>VirusName - String - Required: No - Virus name</li>
<li>ContainerName- String - Required: Yes - Container name</li>
<li>ContainerId- string - Required: No - Container ID</li>
<li>ImageName- string - Required: No - Image name</li>
<li>ImageId- string - Required: No - Image ID</li>
<li>IsRealTime- int - Required: No - Whether it is real-time monitoring data</li>
<li>TaskId- string - Required: No - Task ID</li>
<li>TimeRange - string - Required: No - Time range ["2022-03-31 16:55:00", "2022-03-31 17:00:00"]</li>
<li>ContainerNetStatus - String - Required: No - Container network status. Valid values: `NORMAL`, `ISOLATED`, `ISOLATING`, `RESTORING`, `RESTORE_FAILED`.</li>
<li>ContainerStatus - string - Required: No - Container status. Valid values: `RUNNING`, `PAUSED`, `STOPPED`, `CREATED`, `DESTROYED`, `RESTARTING`, `REMOVING`.</li>
<li>AutoIsolateMode - string - Required: No - Isolation method. Valid values: `MANUAL`, `AUTO`.</li>
<li>MD5 - string - Required: No - MD5</li>
        :rtype: list of RunTimeFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        r"""Sorting order
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def By(self):
        r"""Sorting field
        :rtype: str
        """
        return self._By

    @By.setter
    def By(self, By):
        self._By = By

    @property
    def ExportField(self):
        r"""Export field
        :rtype: list of str
        """
        return self._ExportField

    @ExportField.setter
    def ExportField(self, ExportField):
        self._ExportField = ExportField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = RunTimeFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._By = params.get("By")
        self._ExportField = params.get("ExportField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExportVirusListResponse(AbstractModel):
    r"""ExportVirusList response structure.

    """

    def __init__(self):
        r"""
        :param _JobId: Export task ID, which is used to query the task progress on the frontend.
        :type JobId: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._JobId = None
        self._RequestId = None

    @property
    def JobId(self):
        r"""Export task ID, which is used to query the task progress on the frontend.
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._RequestId = params.get("RequestId")


class FileAttributeInfo(AbstractModel):
    r"""Container runtime security - File attribute information

    """

    def __init__(self):
        r"""
        :param _FileName: Filename
        :type FileName: str
        :param _FileType: File type
        :type FileType: str
        :param _FileSize: File size in bytes
        :type FileSize: int
        :param _FilePath: File path
        :type FilePath: str
        :param _FileCreateTime: File creation time
        :type FileCreateTime: str
        :param _LatestTamperedFileMTime: Time when the file is last tampered with
        :type LatestTamperedFileMTime: str
        :param _NewFile: Content of the new file
        :type NewFile: str
        :param _FileDiff: Differences between old and new files
        :type FileDiff: str
        """
        self._FileName = None
        self._FileType = None
        self._FileSize = None
        self._FilePath = None
        self._FileCreateTime = None
        self._LatestTamperedFileMTime = None
        self._NewFile = None
        self._FileDiff = None

    @property
    def FileName(self):
        r"""Filename
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileType(self):
        r"""File type
        :rtype: str
        """
        return self._FileType

    @FileType.setter
    def FileType(self, FileType):
        self._FileType = FileType

    @property
    def FileSize(self):
        r"""File size in bytes
        :rtype: int
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def FilePath(self):
        r"""File path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def FileCreateTime(self):
        r"""File creation time
        :rtype: str
        """
        return self._FileCreateTime

    @FileCreateTime.setter
    def FileCreateTime(self, FileCreateTime):
        self._FileCreateTime = FileCreateTime

    @property
    def LatestTamperedFileMTime(self):
        r"""Time when the file is last tampered with
        :rtype: str
        """
        return self._LatestTamperedFileMTime

    @LatestTamperedFileMTime.setter
    def LatestTamperedFileMTime(self, LatestTamperedFileMTime):
        self._LatestTamperedFileMTime = LatestTamperedFileMTime

    @property
    def NewFile(self):
        r"""Content of the new file
        :rtype: str
        """
        return self._NewFile

    @NewFile.setter
    def NewFile(self, NewFile):
        self._NewFile = NewFile

    @property
    def FileDiff(self):
        r"""Differences between old and new files
        :rtype: str
        """
        return self._FileDiff

    @FileDiff.setter
    def FileDiff(self, FileDiff):
        self._FileDiff = FileDiff


    def _deserialize(self, params):
        self._FileName = params.get("FileName")
        self._FileType = params.get("FileType")
        self._FileSize = params.get("FileSize")
        self._FilePath = params.get("FilePath")
        self._FileCreateTime = params.get("FileCreateTime")
        self._LatestTamperedFileMTime = params.get("LatestTamperedFileMTime")
        self._NewFile = params.get("NewFile")
        self._FileDiff = params.get("FileDiff")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostInfo(AbstractModel):
    r"""List of server IDs

    """

    def __init__(self):
        r"""
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP, which is the private IP
        :type HostIP: str
        :param _HostName: Server name
        :type HostName: str
        :param _Group: Project
        :type Group: str
        :param _DockerVersion: Docker version
        :type DockerVersion: str
        :param _DockerFileSystemDriver: Docker file system type
        :type DockerFileSystemDriver: str
        :param _ImageCnt: Number of images
        :type ImageCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _Status: Agent status
        :type Status: str
        :param _IsContainerd: Whether it is Containerd
        :type IsContainerd: bool
        :param _MachineType: Server source. Valid values: `CVM`, `ECM`, `LH`, `BM`, `Other`. The first four values indicate Tencent Cloud instances, while the last one indicates non-Tencent Cloud instances.
        :type MachineType: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _Uuid: Server UUID
        :type Uuid: str
        :param _InstanceID: Server instance ID
        :type InstanceID: str
        :param _RegionID: Region ID
        :type RegionID: int
        :param _Project: Project
Note: This field may return `null`, indicating that no valid value was found.
        :type Project: :class:`tencentcloud.tcss.v20201101.models.ProjectInfo`
        :param _Tags: Tags
Note: This field may return `null`, indicating that no valid value was found.
        :type Tags: list of TagInfo
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: 
        :type ClusterName: str
        :param _ClusterAccessedStatus: 
        :type ClusterAccessedStatus: str
        """
        self._HostID = None
        self._HostIP = None
        self._HostName = None
        self._Group = None
        self._DockerVersion = None
        self._DockerFileSystemDriver = None
        self._ImageCnt = None
        self._ContainerCnt = None
        self._Status = None
        self._IsContainerd = None
        self._MachineType = None
        self._PublicIp = None
        self._Uuid = None
        self._InstanceID = None
        self._RegionID = None
        self._Project = None
        self._Tags = None
        self._ClusterID = None
        self._ClusterName = None
        self._ClusterAccessedStatus = None

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP, which is the private IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def Group(self):
        r"""Project
        :rtype: str
        """
        return self._Group

    @Group.setter
    def Group(self, Group):
        self._Group = Group

    @property
    def DockerVersion(self):
        r"""Docker version
        :rtype: str
        """
        return self._DockerVersion

    @DockerVersion.setter
    def DockerVersion(self, DockerVersion):
        self._DockerVersion = DockerVersion

    @property
    def DockerFileSystemDriver(self):
        r"""Docker file system type
        :rtype: str
        """
        return self._DockerFileSystemDriver

    @DockerFileSystemDriver.setter
    def DockerFileSystemDriver(self, DockerFileSystemDriver):
        self._DockerFileSystemDriver = DockerFileSystemDriver

    @property
    def ImageCnt(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCnt

    @ImageCnt.setter
    def ImageCnt(self, ImageCnt):
        self._ImageCnt = ImageCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def Status(self):
        r"""Agent status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsContainerd(self):
        r"""Whether it is Containerd
        :rtype: bool
        """
        return self._IsContainerd

    @IsContainerd.setter
    def IsContainerd(self, IsContainerd):
        self._IsContainerd = IsContainerd

    @property
    def MachineType(self):
        r"""Server source. Valid values: `CVM`, `ECM`, `LH`, `BM`, `Other`. The first four values indicate Tencent Cloud instances, while the last one indicates non-Tencent Cloud instances.
        :rtype: str
        """
        return self._MachineType

    @MachineType.setter
    def MachineType(self, MachineType):
        self._MachineType = MachineType

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def Uuid(self):
        r"""Server UUID
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def InstanceID(self):
        r"""Server instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def RegionID(self):
        r"""Region ID
        :rtype: int
        """
        return self._RegionID

    @RegionID.setter
    def RegionID(self, RegionID):
        self._RegionID = RegionID

    @property
    def Project(self):
        r"""Project
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.ProjectInfo`
        """
        return self._Project

    @Project.setter
    def Project(self, Project):
        self._Project = Project

    @property
    def Tags(self):
        r"""Tags
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: list of TagInfo
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterAccessedStatus(self):
        r"""
        :rtype: str
        """
        return self._ClusterAccessedStatus

    @ClusterAccessedStatus.setter
    def ClusterAccessedStatus(self, ClusterAccessedStatus):
        self._ClusterAccessedStatus = ClusterAccessedStatus


    def _deserialize(self, params):
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._HostName = params.get("HostName")
        self._Group = params.get("Group")
        self._DockerVersion = params.get("DockerVersion")
        self._DockerFileSystemDriver = params.get("DockerFileSystemDriver")
        self._ImageCnt = params.get("ImageCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._Status = params.get("Status")
        self._IsContainerd = params.get("IsContainerd")
        self._MachineType = params.get("MachineType")
        self._PublicIp = params.get("PublicIp")
        self._Uuid = params.get("Uuid")
        self._InstanceID = params.get("InstanceID")
        self._RegionID = params.get("RegionID")
        if params.get("Project") is not None:
            self._Project = ProjectInfo()
            self._Project._deserialize(params.get("Project"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = TagInfo()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._ClusterAccessedStatus = params.get("ClusterAccessedStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageAutoAuthorizedTask(AbstractModel):
    r"""Information of the automatic image licensing task

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: int
        :param _Type: Licensing method. Valid values: `AUTO` (automatic licensing); `MANUAL` (manual licensing).
        :type Type: str
        :param _AuthorizedDate: Task date
        :type AuthorizedDate: str
        :param _Source: Image source. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :type Source: str
        :param _LastAuthorizedTime: Last licensing time
        :type LastAuthorizedTime: str
        :param _SuccessCount: Number of images automatically licensed successfully
        :type SuccessCount: int
        :param _FailCount: Number of images failed to be automatically licensed
        :type FailCount: int
        :param _LatestFailCode: Error code for the last task. Valid values: `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :type LatestFailCode: str
        """
        self._TaskId = None
        self._Type = None
        self._AuthorizedDate = None
        self._Source = None
        self._LastAuthorizedTime = None
        self._SuccessCount = None
        self._FailCount = None
        self._LatestFailCode = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Type(self):
        r"""Licensing method. Valid values: `AUTO` (automatic licensing); `MANUAL` (manual licensing).
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def AuthorizedDate(self):
        r"""Task date
        :rtype: str
        """
        return self._AuthorizedDate

    @AuthorizedDate.setter
    def AuthorizedDate(self, AuthorizedDate):
        self._AuthorizedDate = AuthorizedDate

    @property
    def Source(self):
        r"""Image source. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :rtype: str
        """
        return self._Source

    @Source.setter
    def Source(self, Source):
        self._Source = Source

    @property
    def LastAuthorizedTime(self):
        r"""Last licensing time
        :rtype: str
        """
        return self._LastAuthorizedTime

    @LastAuthorizedTime.setter
    def LastAuthorizedTime(self, LastAuthorizedTime):
        self._LastAuthorizedTime = LastAuthorizedTime

    @property
    def SuccessCount(self):
        r"""Number of images automatically licensed successfully
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailCount(self):
        r"""Number of images failed to be automatically licensed
        :rtype: int
        """
        return self._FailCount

    @FailCount.setter
    def FailCount(self, FailCount):
        self._FailCount = FailCount

    @property
    def LatestFailCode(self):
        r"""Error code for the last task. Valid values: `REACH_LIMIT` (reaching the upper limit on licenses); `LICENSE_INSUFFICIENT` (insufficient licenses).
        :rtype: str
        """
        return self._LatestFailCode

    @LatestFailCode.setter
    def LatestFailCode(self, LatestFailCode):
        self._LatestFailCode = LatestFailCode


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Type = params.get("Type")
        self._AuthorizedDate = params.get("AuthorizedDate")
        self._Source = params.get("Source")
        self._LastAuthorizedTime = params.get("LastAuthorizedTime")
        self._SuccessCount = params.get("SuccessCount")
        self._FailCount = params.get("FailCount")
        self._LatestFailCode = params.get("LatestFailCode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageComponent(AbstractModel):
    r"""Information of a component in the image

    """

    def __init__(self):
        r"""
        :param _Name: Component name
        :type Name: str
        :param _Version: Component version
        :type Version: str
        :param _Path: Component path
        :type Path: str
        :param _Type: Component type
        :type Type: str
        :param _VulCount: Number of component vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :type VulCount: int
        :param _ImageID: Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageID: str
        """
        self._Name = None
        self._Version = None
        self._Path = None
        self._Type = None
        self._VulCount = None
        self._ImageID = None

    @property
    def Name(self):
        r"""Component name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        r"""Component version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Path(self):
        r"""Component path
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Type(self):
        r"""Component type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def VulCount(self):
        r"""Number of component vulnerabilities
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VulCount

    @VulCount.setter
    def VulCount(self, VulCount):
        self._VulCount = VulCount

    @property
    def ImageID(self):
        r"""Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._Path = params.get("Path")
        self._Type = params.get("Type")
        self._VulCount = params.get("VulCount")
        self._ImageID = params.get("ImageID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageHost(AbstractModel):
    r"""List of images associated with servers

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _HostID: Server ID
        :type HostID: str
        """
        self._ImageID = None
        self._HostID = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._HostID = params.get("HostID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageInfo(AbstractModel):
    r"""Basic image information

    """

    def __init__(self):
        r"""
        :param _InstanceName: Instance name
        :type InstanceName: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageTag: Image tag
        :type ImageTag: str
        :param _Force: Forced scan
        :type Force: str
        :param _ImageDigest: Image ID
        :type ImageDigest: str
        :param _RegistryType: Repository type
        :type RegistryType: str
        :param _ImageRepoAddress: Image repository address
        :type ImageRepoAddress: str
        :param _InstanceId: Instance ID
        :type InstanceId: str
        """
        self._InstanceName = None
        self._Namespace = None
        self._ImageName = None
        self._ImageTag = None
        self._Force = None
        self._ImageDigest = None
        self._RegistryType = None
        self._ImageRepoAddress = None
        self._InstanceId = None

    @property
    def InstanceName(self):
        r"""Instance name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def Force(self):
        r"""Forced scan
        :rtype: str
        """
        return self._Force

    @Force.setter
    def Force(self, Force):
        self._Force = Force

    @property
    def ImageDigest(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageDigest

    @ImageDigest.setter
    def ImageDigest(self, ImageDigest):
        self._ImageDigest = ImageDigest

    @property
    def RegistryType(self):
        r"""Repository type
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def ImageRepoAddress(self):
        r"""Image repository address
        :rtype: str
        """
        return self._ImageRepoAddress

    @ImageRepoAddress.setter
    def ImageRepoAddress(self, ImageRepoAddress):
        self._ImageRepoAddress = ImageRepoAddress

    @property
    def InstanceId(self):
        r"""Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._InstanceName = params.get("InstanceName")
        self._Namespace = params.get("Namespace")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._Force = params.get("Force")
        self._ImageDigest = params.get("ImageDigest")
        self._RegistryType = params.get("RegistryType")
        self._ImageRepoAddress = params.get("ImageRepoAddress")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageProgress(AbstractModel):
    r"""Basic image information

    """

    def __init__(self):
        r"""
        :param _ImageId: Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageId: str
        :param _RegistryType: Repository type
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryType: str
        :param _ImageRepoAddress: Image repository address
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageRepoAddress: str
        :param _InstanceId: Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceId: str
        :param _InstanceName: Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstanceName: str
        :param _Namespace: Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :type Namespace: str
        :param _ImageName: Repository name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageName: str
        :param _ImageTag: Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageTag: str
        :param _ScanStatus: Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanStatus: str
        :param _CveProgress: CVE scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveProgress: int
        :param _RiskProgress: Sensitive data scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskProgress: int
        :param _VirusProgress: Trojan scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusProgress: int
        """
        self._ImageId = None
        self._RegistryType = None
        self._ImageRepoAddress = None
        self._InstanceId = None
        self._InstanceName = None
        self._Namespace = None
        self._ImageName = None
        self._ImageTag = None
        self._ScanStatus = None
        self._CveProgress = None
        self._RiskProgress = None
        self._VirusProgress = None

    @property
    def ImageId(self):
        r"""Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def RegistryType(self):
        r"""Repository type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def ImageRepoAddress(self):
        r"""Image repository address
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageRepoAddress

    @ImageRepoAddress.setter
    def ImageRepoAddress(self, ImageRepoAddress):
        self._ImageRepoAddress = ImageRepoAddress

    @property
    def InstanceId(self):
        r"""Instance ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def InstanceName(self):
        r"""Instance name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Namespace(self):
        r"""Namespace
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ImageName(self):
        r"""Repository name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def ScanStatus(self):
        r"""Image scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def CveProgress(self):
        r"""CVE scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._CveProgress

    @CveProgress.setter
    def CveProgress(self, CveProgress):
        self._CveProgress = CveProgress

    @property
    def RiskProgress(self):
        r"""Sensitive data scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskProgress

    @RiskProgress.setter
    def RiskProgress(self, RiskProgress):
        self._RiskProgress = RiskProgress

    @property
    def VirusProgress(self):
        r"""Trojan scanning progress of the image
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._VirusProgress

    @VirusProgress.setter
    def VirusProgress(self, VirusProgress):
        self._VirusProgress = VirusProgress


    def _deserialize(self, params):
        self._ImageId = params.get("ImageId")
        self._RegistryType = params.get("RegistryType")
        self._ImageRepoAddress = params.get("ImageRepoAddress")
        self._InstanceId = params.get("InstanceId")
        self._InstanceName = params.get("InstanceName")
        self._Namespace = params.get("Namespace")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._ScanStatus = params.get("ScanStatus")
        self._CveProgress = params.get("CveProgress")
        self._RiskProgress = params.get("RiskProgress")
        self._VirusProgress = params.get("VirusProgress")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageRepoInfo(AbstractModel):
    r"""List of image repositories

    """

    def __init__(self):
        r"""
        :param _ImageDigest: Image digest
        :type ImageDigest: str
        :param _ImageRepoAddress: Image repository address
        :type ImageRepoAddress: str
        :param _RegistryType: Repository type
        :type RegistryType: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageTag: Image tag
        :type ImageTag: str
        :param _ImageSize: Image size
        :type ImageSize: int
        :param _ScanTime: Last scan time
        :type ScanTime: str
        :param _ScanStatus: Scanning status
        :type ScanStatus: str
        :param _VulCnt: Number of vulnerabilities
        :type VulCnt: int
        :param _VirusCnt: Number of viruses and trojans
        :type VirusCnt: int
        :param _RiskCnt: Number of risky behaviors
        :type RiskCnt: int
        :param _SentiveInfoCnt: Number of sensitive data items
        :type SentiveInfoCnt: int
        :param _IsTrustImage: Whether it is a trusted image
        :type IsTrustImage: bool
        :param _OsName: Image system
        :type OsName: str
        :param _ScanVirusError: Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusError: str
        :param _ScanVulError: Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulError: str
        :param _InstanceId: Instance ID
        :type InstanceId: str
        :param _InstanceName: Instance name
        :type InstanceName: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _ScanRiskError: High-risk scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskError: str
        :param _ScanVirusProgress: Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVirusProgress: int
        :param _ScanVulProgress: Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanVulProgress: int
        :param _ScanRiskProgress: Vulnerability scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRiskProgress: int
        :param _ScanRemainTime: Remaining scan time in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanRemainTime: int
        :param _CveStatus: CVE scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type CveStatus: str
        :param _RiskStatus: High-risk scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskStatus: str
        :param _VirusStatus: Trojan scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusStatus: str
        :param _Progress: Overall progress
Note: This field may return null, indicating that no valid values can be obtained.
        :type Progress: int
        :param _IsAuthorized: Licensing status
        :type IsAuthorized: int
        :param _RegistryRegion: Repository region
        :type RegistryRegion: str
        :param _Id: List of IDs
        :type Id: int
        :param _ImageId: Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageId: str
        :param _ImageCreateTime: Image creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageCreateTime: str
        :param _IsLatestImage: Whether it is the latest image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsLatestImage: bool
        """
        self._ImageDigest = None
        self._ImageRepoAddress = None
        self._RegistryType = None
        self._ImageName = None
        self._ImageTag = None
        self._ImageSize = None
        self._ScanTime = None
        self._ScanStatus = None
        self._VulCnt = None
        self._VirusCnt = None
        self._RiskCnt = None
        self._SentiveInfoCnt = None
        self._IsTrustImage = None
        self._OsName = None
        self._ScanVirusError = None
        self._ScanVulError = None
        self._InstanceId = None
        self._InstanceName = None
        self._Namespace = None
        self._ScanRiskError = None
        self._ScanVirusProgress = None
        self._ScanVulProgress = None
        self._ScanRiskProgress = None
        self._ScanRemainTime = None
        self._CveStatus = None
        self._RiskStatus = None
        self._VirusStatus = None
        self._Progress = None
        self._IsAuthorized = None
        self._RegistryRegion = None
        self._Id = None
        self._ImageId = None
        self._ImageCreateTime = None
        self._IsLatestImage = None

    @property
    def ImageDigest(self):
        r"""Image digest
        :rtype: str
        """
        return self._ImageDigest

    @ImageDigest.setter
    def ImageDigest(self, ImageDigest):
        self._ImageDigest = ImageDigest

    @property
    def ImageRepoAddress(self):
        r"""Image repository address
        :rtype: str
        """
        return self._ImageRepoAddress

    @ImageRepoAddress.setter
    def ImageRepoAddress(self, ImageRepoAddress):
        self._ImageRepoAddress = ImageRepoAddress

    @property
    def RegistryType(self):
        r"""Repository type
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def ImageSize(self):
        r"""Image size
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize

    @property
    def ScanTime(self):
        r"""Last scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanStatus(self):
        r"""Scanning status
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def VulCnt(self):
        r"""Number of vulnerabilities
        :rtype: int
        """
        return self._VulCnt

    @VulCnt.setter
    def VulCnt(self, VulCnt):
        self._VulCnt = VulCnt

    @property
    def VirusCnt(self):
        r"""Number of viruses and trojans
        :rtype: int
        """
        return self._VirusCnt

    @VirusCnt.setter
    def VirusCnt(self, VirusCnt):
        self._VirusCnt = VirusCnt

    @property
    def RiskCnt(self):
        r"""Number of risky behaviors
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def SentiveInfoCnt(self):
        warnings.warn("parameter `SentiveInfoCnt` is deprecated", DeprecationWarning) 

        r"""Number of sensitive data items
        :rtype: int
        """
        return self._SentiveInfoCnt

    @SentiveInfoCnt.setter
    def SentiveInfoCnt(self, SentiveInfoCnt):
        warnings.warn("parameter `SentiveInfoCnt` is deprecated", DeprecationWarning) 

        self._SentiveInfoCnt = SentiveInfoCnt

    @property
    def IsTrustImage(self):
        r"""Whether it is a trusted image
        :rtype: bool
        """
        return self._IsTrustImage

    @IsTrustImage.setter
    def IsTrustImage(self, IsTrustImage):
        self._IsTrustImage = IsTrustImage

    @property
    def OsName(self):
        r"""Image system
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def ScanVirusError(self):
        r"""Trojan scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVirusError

    @ScanVirusError.setter
    def ScanVirusError(self, ScanVirusError):
        self._ScanVirusError = ScanVirusError

    @property
    def ScanVulError(self):
        r"""Vulnerability scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanVulError

    @ScanVulError.setter
    def ScanVulError(self, ScanVulError):
        self._ScanVulError = ScanVulError

    @property
    def InstanceId(self):
        r"""Instance ID
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def InstanceName(self):
        r"""Instance name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ScanRiskError(self):
        r"""High-risk scan error
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanRiskError

    @ScanRiskError.setter
    def ScanRiskError(self, ScanRiskError):
        self._ScanRiskError = ScanRiskError

    @property
    def ScanVirusProgress(self):
        r"""Sensitive data scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVirusProgress

    @ScanVirusProgress.setter
    def ScanVirusProgress(self, ScanVirusProgress):
        self._ScanVirusProgress = ScanVirusProgress

    @property
    def ScanVulProgress(self):
        r"""Trojan scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanVulProgress

    @ScanVulProgress.setter
    def ScanVulProgress(self, ScanVulProgress):
        self._ScanVulProgress = ScanVulProgress

    @property
    def ScanRiskProgress(self):
        r"""Vulnerability scanning progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRiskProgress

    @ScanRiskProgress.setter
    def ScanRiskProgress(self, ScanRiskProgress):
        self._ScanRiskProgress = ScanRiskProgress

    @property
    def ScanRemainTime(self):
        r"""Remaining scan time in seconds
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ScanRemainTime

    @ScanRemainTime.setter
    def ScanRemainTime(self, ScanRemainTime):
        self._ScanRemainTime = ScanRemainTime

    @property
    def CveStatus(self):
        r"""CVE scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CveStatus

    @CveStatus.setter
    def CveStatus(self, CveStatus):
        self._CveStatus = CveStatus

    @property
    def RiskStatus(self):
        r"""High-risk scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskStatus

    @RiskStatus.setter
    def RiskStatus(self, RiskStatus):
        self._RiskStatus = RiskStatus

    @property
    def VirusStatus(self):
        r"""Trojan scanning status
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusStatus

    @VirusStatus.setter
    def VirusStatus(self, VirusStatus):
        self._VirusStatus = VirusStatus

    @property
    def Progress(self):
        r"""Overall progress
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def IsAuthorized(self):
        r"""Licensing status
        :rtype: int
        """
        return self._IsAuthorized

    @IsAuthorized.setter
    def IsAuthorized(self, IsAuthorized):
        self._IsAuthorized = IsAuthorized

    @property
    def RegistryRegion(self):
        r"""Repository region
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def Id(self):
        r"""List of IDs
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ImageId(self):
        r"""Image ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageCreateTime(self):
        r"""Image creation time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ImageCreateTime

    @ImageCreateTime.setter
    def ImageCreateTime(self, ImageCreateTime):
        self._ImageCreateTime = ImageCreateTime

    @property
    def IsLatestImage(self):
        r"""Whether it is the latest image tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: bool
        """
        return self._IsLatestImage

    @IsLatestImage.setter
    def IsLatestImage(self, IsLatestImage):
        self._IsLatestImage = IsLatestImage


    def _deserialize(self, params):
        self._ImageDigest = params.get("ImageDigest")
        self._ImageRepoAddress = params.get("ImageRepoAddress")
        self._RegistryType = params.get("RegistryType")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._ImageSize = params.get("ImageSize")
        self._ScanTime = params.get("ScanTime")
        self._ScanStatus = params.get("ScanStatus")
        self._VulCnt = params.get("VulCnt")
        self._VirusCnt = params.get("VirusCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._SentiveInfoCnt = params.get("SentiveInfoCnt")
        self._IsTrustImage = params.get("IsTrustImage")
        self._OsName = params.get("OsName")
        self._ScanVirusError = params.get("ScanVirusError")
        self._ScanVulError = params.get("ScanVulError")
        self._InstanceId = params.get("InstanceId")
        self._InstanceName = params.get("InstanceName")
        self._Namespace = params.get("Namespace")
        self._ScanRiskError = params.get("ScanRiskError")
        self._ScanVirusProgress = params.get("ScanVirusProgress")
        self._ScanVulProgress = params.get("ScanVulProgress")
        self._ScanRiskProgress = params.get("ScanRiskProgress")
        self._ScanRemainTime = params.get("ScanRemainTime")
        self._CveStatus = params.get("CveStatus")
        self._RiskStatus = params.get("RiskStatus")
        self._VirusStatus = params.get("VirusStatus")
        self._Progress = params.get("Progress")
        self._IsAuthorized = params.get("IsAuthorized")
        self._RegistryRegion = params.get("RegistryRegion")
        self._Id = params.get("Id")
        self._ImageId = params.get("ImageId")
        self._ImageCreateTime = params.get("ImageCreateTime")
        self._IsLatestImage = params.get("IsLatestImage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageRepoRegistryInfo(AbstractModel):
    r"""

    """

    def __init__(self):
        r"""
        :param _RegistryId: 
        :type RegistryId: int
        :param _Name: 
        :type Name: str
        :param _RegistryType: 
        :type RegistryType: str
        :param _Url: 
        :type Url: str
        :param _NetType: 
        :type NetType: str
        :param _RegistryRegion: 
        :type RegistryRegion: str
        :param _RegistryVersion: 
        :type RegistryVersion: str
        :param _ConnectMsg: 
        :type ConnectMsg: str
        :param _ConnDetectType: 
        :type ConnDetectType: str
        :param _ConnDetectHostCount: 
        :type ConnDetectHostCount: int
        :param _ConnDetectDetail: 
        :type ConnDetectDetail: list of RegistryConnDetectResult
        :param _InstanceID: 
        :type InstanceID: str
        :param _LatestSyncTime: 
        :type LatestSyncTime: str
        :param _SyncStatus: 
        :type SyncStatus: str
        :param _SyncFailReason: 
        :type SyncFailReason: str
        :param _SyncSolution: 
        :type SyncSolution: str
        :param _SyncMessage: 
        :type SyncMessage: str
        """
        self._RegistryId = None
        self._Name = None
        self._RegistryType = None
        self._Url = None
        self._NetType = None
        self._RegistryRegion = None
        self._RegistryVersion = None
        self._ConnectMsg = None
        self._ConnDetectType = None
        self._ConnDetectHostCount = None
        self._ConnDetectDetail = None
        self._InstanceID = None
        self._LatestSyncTime = None
        self._SyncStatus = None
        self._SyncFailReason = None
        self._SyncSolution = None
        self._SyncMessage = None

    @property
    def RegistryId(self):
        r"""
        :rtype: int
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId

    @property
    def Name(self):
        r"""
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RegistryType(self):
        r"""
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def Url(self):
        r"""
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def NetType(self):
        r"""
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegistryRegion(self):
        r"""
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def RegistryVersion(self):
        r"""
        :rtype: str
        """
        return self._RegistryVersion

    @RegistryVersion.setter
    def RegistryVersion(self, RegistryVersion):
        self._RegistryVersion = RegistryVersion

    @property
    def ConnectMsg(self):
        r"""
        :rtype: str
        """
        return self._ConnectMsg

    @ConnectMsg.setter
    def ConnectMsg(self, ConnectMsg):
        self._ConnectMsg = ConnectMsg

    @property
    def ConnDetectType(self):
        r"""
        :rtype: str
        """
        return self._ConnDetectType

    @ConnDetectType.setter
    def ConnDetectType(self, ConnDetectType):
        self._ConnDetectType = ConnDetectType

    @property
    def ConnDetectHostCount(self):
        r"""
        :rtype: int
        """
        return self._ConnDetectHostCount

    @ConnDetectHostCount.setter
    def ConnDetectHostCount(self, ConnDetectHostCount):
        self._ConnDetectHostCount = ConnDetectHostCount

    @property
    def ConnDetectDetail(self):
        r"""
        :rtype: list of RegistryConnDetectResult
        """
        return self._ConnDetectDetail

    @ConnDetectDetail.setter
    def ConnDetectDetail(self, ConnDetectDetail):
        self._ConnDetectDetail = ConnDetectDetail

    @property
    def InstanceID(self):
        r"""
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def LatestSyncTime(self):
        r"""
        :rtype: str
        """
        return self._LatestSyncTime

    @LatestSyncTime.setter
    def LatestSyncTime(self, LatestSyncTime):
        self._LatestSyncTime = LatestSyncTime

    @property
    def SyncStatus(self):
        r"""
        :rtype: str
        """
        return self._SyncStatus

    @SyncStatus.setter
    def SyncStatus(self, SyncStatus):
        self._SyncStatus = SyncStatus

    @property
    def SyncFailReason(self):
        r"""
        :rtype: str
        """
        return self._SyncFailReason

    @SyncFailReason.setter
    def SyncFailReason(self, SyncFailReason):
        self._SyncFailReason = SyncFailReason

    @property
    def SyncSolution(self):
        r"""
        :rtype: str
        """
        return self._SyncSolution

    @SyncSolution.setter
    def SyncSolution(self, SyncSolution):
        self._SyncSolution = SyncSolution

    @property
    def SyncMessage(self):
        r"""
        :rtype: str
        """
        return self._SyncMessage

    @SyncMessage.setter
    def SyncMessage(self, SyncMessage):
        self._SyncMessage = SyncMessage


    def _deserialize(self, params):
        self._RegistryId = params.get("RegistryId")
        self._Name = params.get("Name")
        self._RegistryType = params.get("RegistryType")
        self._Url = params.get("Url")
        self._NetType = params.get("NetType")
        self._RegistryRegion = params.get("RegistryRegion")
        self._RegistryVersion = params.get("RegistryVersion")
        self._ConnectMsg = params.get("ConnectMsg")
        self._ConnDetectType = params.get("ConnDetectType")
        self._ConnDetectHostCount = params.get("ConnDetectHostCount")
        if params.get("ConnDetectDetail") is not None:
            self._ConnDetectDetail = []
            for item in params.get("ConnDetectDetail"):
                obj = RegistryConnDetectResult()
                obj._deserialize(item)
                self._ConnDetectDetail.append(obj)
        self._InstanceID = params.get("InstanceID")
        self._LatestSyncTime = params.get("LatestSyncTime")
        self._SyncStatus = params.get("SyncStatus")
        self._SyncFailReason = params.get("SyncFailReason")
        self._SyncSolution = params.get("SyncSolution")
        self._SyncMessage = params.get("SyncMessage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageRisk(AbstractModel):
    r"""Information of a high-risk behavior in the image

    """

    def __init__(self):
        r"""
        :param _Behavior: High-risk behavior
Note: This field may return null, indicating that no valid values can be obtained.
        :type Behavior: int
        :param _Type: Type
Note: This field may return null, indicating that no valid values can be obtained.
        :type Type: int
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: str
        :param _Desc: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Desc: str
        :param _InstructionContent: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type InstructionContent: str
        """
        self._Behavior = None
        self._Type = None
        self._Level = None
        self._Desc = None
        self._InstructionContent = None

    @property
    def Behavior(self):
        r"""High-risk behavior
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Behavior

    @Behavior.setter
    def Behavior(self, Behavior):
        self._Behavior = Behavior

    @property
    def Type(self):
        r"""Type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Level(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Desc(self):
        r"""Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def InstructionContent(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._InstructionContent

    @InstructionContent.setter
    def InstructionContent(self, InstructionContent):
        self._InstructionContent = InstructionContent


    def _deserialize(self, params):
        self._Behavior = params.get("Behavior")
        self._Type = params.get("Type")
        self._Level = params.get("Level")
        self._Desc = params.get("Desc")
        self._InstructionContent = params.get("InstructionContent")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageRiskInfo(AbstractModel):
    r"""Image risk details

    """

    def __init__(self):
        r"""
        :param _Behavior: Behavior
        :type Behavior: int
        :param _Type: Type
        :type Type: int
        :param _Level: Level
        :type Level: int
        :param _Desc: Details
        :type Desc: str
        :param _InstructionContent: Solution
        :type InstructionContent: str
        """
        self._Behavior = None
        self._Type = None
        self._Level = None
        self._Desc = None
        self._InstructionContent = None

    @property
    def Behavior(self):
        r"""Behavior
        :rtype: int
        """
        return self._Behavior

    @Behavior.setter
    def Behavior(self, Behavior):
        self._Behavior = Behavior

    @property
    def Type(self):
        r"""Type
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Level(self):
        r"""Level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Desc(self):
        r"""Details
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def InstructionContent(self):
        r"""Solution
        :rtype: str
        """
        return self._InstructionContent

    @InstructionContent.setter
    def InstructionContent(self, InstructionContent):
        self._InstructionContent = InstructionContent


    def _deserialize(self, params):
        self._Behavior = params.get("Behavior")
        self._Type = params.get("Type")
        self._Level = params.get("Level")
        self._Desc = params.get("Desc")
        self._InstructionContent = params.get("InstructionContent")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageRiskTendencyInfo(AbstractModel):
    r"""Trend information of security events at runtime

    """

    def __init__(self):
        r"""
        :param _ImageRiskSet: List of trends
        :type ImageRiskSet: list of RunTimeTendencyInfo
        :param _ImageRiskType: Risk type:
`IRT_VULNERABILITY`: Vulnerability.
`IRT_MALWARE_VIRUS`: Virus and trojan.
`IRT_RISK`: Sensitive data.
        :type ImageRiskType: str
        """
        self._ImageRiskSet = None
        self._ImageRiskType = None

    @property
    def ImageRiskSet(self):
        r"""List of trends
        :rtype: list of RunTimeTendencyInfo
        """
        return self._ImageRiskSet

    @ImageRiskSet.setter
    def ImageRiskSet(self, ImageRiskSet):
        self._ImageRiskSet = ImageRiskSet

    @property
    def ImageRiskType(self):
        r"""Risk type:
`IRT_VULNERABILITY`: Vulnerability.
`IRT_MALWARE_VIRUS`: Virus and trojan.
`IRT_RISK`: Sensitive data.
        :rtype: str
        """
        return self._ImageRiskType

    @ImageRiskType.setter
    def ImageRiskType(self, ImageRiskType):
        self._ImageRiskType = ImageRiskType


    def _deserialize(self, params):
        if params.get("ImageRiskSet") is not None:
            self._ImageRiskSet = []
            for item in params.get("ImageRiskSet"):
                obj = RunTimeTendencyInfo()
                obj._deserialize(item)
                self._ImageRiskSet.append(obj)
        self._ImageRiskType = params.get("ImageRiskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageSimpleInfo(AbstractModel):
    r"""List of images

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Size: Image size
        :type Size: int
        :param _ImageType: Type
        :type ImageType: str
        :param _ContainerCnt: Number of associated containers
        :type ContainerCnt: int
        """
        self._ImageID = None
        self._ImageName = None
        self._Size = None
        self._ImageType = None
        self._ContainerCnt = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Size(self):
        r"""Image size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def ImageType(self):
        r"""Type
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def ContainerCnt(self):
        r"""Number of associated containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._Size = params.get("Size")
        self._ImageType = params.get("ImageType")
        self._ContainerCnt = params.get("ContainerCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageVirus(AbstractModel):
    r"""Information of a virus in the image

    """

    def __init__(self):
        r"""
        :param _Path: Path
Note: This field may return null, indicating that no valid values can be obtained.
        :type Path: str
        :param _RiskLevel: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: str
        :param _Category: Category
Note: This field may return null, indicating that no valid values can be obtained.
        :type Category: str
        :param _VirusName: Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusName: str
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _Desc: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Desc: str
        :param _Solution: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type Solution: str
        :param _FileType: File type
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileType: str
        :param _FileName: File path
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileName: str
        :param _FileMd5: MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileMd5: str
        :param _FileSize: Size
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileSize: int
        :param _FirstScanTime: First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstScanTime: str
        :param _LatestScanTime: Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LatestScanTime: str
        """
        self._Path = None
        self._RiskLevel = None
        self._Category = None
        self._VirusName = None
        self._Tags = None
        self._Desc = None
        self._Solution = None
        self._FileType = None
        self._FileName = None
        self._FileMd5 = None
        self._FileSize = None
        self._FirstScanTime = None
        self._LatestScanTime = None

    @property
    def Path(self):
        r"""Path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def RiskLevel(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def Category(self):
        r"""Category
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def VirusName(self):
        r"""Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def Tags(self):
        r"""Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Desc(self):
        r"""Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Solution(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def FileType(self):
        r"""File type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileType

    @FileType.setter
    def FileType(self, FileType):
        self._FileType = FileType

    @property
    def FileName(self):
        r"""File path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileMd5(self):
        r"""MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileMd5

    @FileMd5.setter
    def FileMd5(self, FileMd5):
        self._FileMd5 = FileMd5

    @property
    def FileSize(self):
        r"""Size
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def FirstScanTime(self):
        r"""First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstScanTime

    @FirstScanTime.setter
    def FirstScanTime(self, FirstScanTime):
        self._FirstScanTime = FirstScanTime

    @property
    def LatestScanTime(self):
        r"""Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LatestScanTime

    @LatestScanTime.setter
    def LatestScanTime(self, LatestScanTime):
        self._LatestScanTime = LatestScanTime


    def _deserialize(self, params):
        self._Path = params.get("Path")
        self._RiskLevel = params.get("RiskLevel")
        self._Category = params.get("Category")
        self._VirusName = params.get("VirusName")
        self._Tags = params.get("Tags")
        self._Desc = params.get("Desc")
        self._Solution = params.get("Solution")
        self._FileType = params.get("FileType")
        self._FileName = params.get("FileName")
        self._FileMd5 = params.get("FileMd5")
        self._FileSize = params.get("FileSize")
        self._FirstScanTime = params.get("FirstScanTime")
        self._LatestScanTime = params.get("LatestScanTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageVirusInfo(AbstractModel):
    r"""Information of a virus in the image

    """

    def __init__(self):
        r"""
        :param _Path: Path
Note: This field may return null, indicating that no valid values can be obtained.
        :type Path: str
        :param _RiskLevel: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: int
        :param _VirusName: Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :type VirusName: str
        :param _Tags: Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _Desc: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Desc: str
        :param _Solution: Fix suggestion
Note: This field may return null, indicating that no valid values can be obtained.
        :type Solution: str
        :param _Size: Size
Note: This field may return null, indicating that no valid values can be obtained.
        :type Size: int
        :param _FirstScanTime: First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FirstScanTime: str
        :param _LatestScanTime: Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LatestScanTime: str
        :param _Md5: MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :type Md5: str
        :param _FileName: Filename
Note: This field may return null, indicating that no valid values can be obtained.
        :type FileName: str
        :param _CheckPlatform: Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckPlatform: list of str
        """
        self._Path = None
        self._RiskLevel = None
        self._VirusName = None
        self._Tags = None
        self._Desc = None
        self._Solution = None
        self._Size = None
        self._FirstScanTime = None
        self._LatestScanTime = None
        self._Md5 = None
        self._FileName = None
        self._CheckPlatform = None

    @property
    def Path(self):
        r"""Path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def RiskLevel(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def VirusName(self):
        r"""Virus name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def Tags(self):
        r"""Tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Desc(self):
        r"""Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Solution(self):
        r"""Fix suggestion
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Size(self):
        r"""Size
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def FirstScanTime(self):
        r"""First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FirstScanTime

    @FirstScanTime.setter
    def FirstScanTime(self, FirstScanTime):
        self._FirstScanTime = FirstScanTime

    @property
    def LatestScanTime(self):
        r"""Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LatestScanTime

    @LatestScanTime.setter
    def LatestScanTime(self, LatestScanTime):
        self._LatestScanTime = LatestScanTime

    @property
    def Md5(self):
        r"""MD5 checksum of the file
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Md5

    @Md5.setter
    def Md5(self, Md5):
        self._Md5 = Md5

    @property
    def FileName(self):
        r"""Filename
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def CheckPlatform(self):
        r"""Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform


    def _deserialize(self, params):
        self._Path = params.get("Path")
        self._RiskLevel = params.get("RiskLevel")
        self._VirusName = params.get("VirusName")
        self._Tags = params.get("Tags")
        self._Desc = params.get("Desc")
        self._Solution = params.get("Solution")
        self._Size = params.get("Size")
        self._FirstScanTime = params.get("FirstScanTime")
        self._LatestScanTime = params.get("LatestScanTime")
        self._Md5 = params.get("Md5")
        self._FileName = params.get("FileName")
        self._CheckPlatform = params.get("CheckPlatform")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageVul(AbstractModel):
    r"""Information of a vulnerability in the image

    """

    def __init__(self):
        r"""
        :param _CVEID: Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVEID: str
        :param _POCID: POC ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type POCID: str
        :param _Name: Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Components: Component information
Note: This field may return null, indicating that no valid values can be obtained.
        :type Components: list of ComponentsInfo
        :param _Category: Category
Note: This field may return null, indicating that no valid values can be obtained.
        :type Category: str
        :param _CategoryType: Category 2
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryType: str
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: str
        :param _Des: Description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Des: str
        :param _OfficialSolution: Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type OfficialSolution: str
        :param _Reference: Reference
Note: This field may return null, indicating that no valid values can be obtained.
        :type Reference: str
        :param _DefenseSolution: Defense solution
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenseSolution: str
        :param _SubmitTime: Submission time
Note: This field may return null, indicating that no valid values can be obtained.
        :type SubmitTime: str
        :param _CvssScore: CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssScore: str
        :param _CvssVector: CVSS information
Note: This field may return null, indicating that no valid values can be obtained.
        :type CvssVector: str
        :param _IsSuggest: Whether fix is suggested
Note: This field may return null, indicating that no valid values can be obtained.
        :type IsSuggest: str
        :param _FixedVersions: Number of the fixed version
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixedVersions: str
        :param _Tag: Vulnerability tag. Valid values: `CanBeFixed`, `DynamicLevelPoc`, `DynamicLevelExp`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of str
        :param _Component: Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Component: str
        :param _Version: Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :type Version: str
        """
        self._CVEID = None
        self._POCID = None
        self._Name = None
        self._Components = None
        self._Category = None
        self._CategoryType = None
        self._Level = None
        self._Des = None
        self._OfficialSolution = None
        self._Reference = None
        self._DefenseSolution = None
        self._SubmitTime = None
        self._CvssScore = None
        self._CvssVector = None
        self._IsSuggest = None
        self._FixedVersions = None
        self._Tag = None
        self._Component = None
        self._Version = None

    @property
    def CVEID(self):
        r"""Vulnerability ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def POCID(self):
        r"""POC ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._POCID

    @POCID.setter
    def POCID(self, POCID):
        self._POCID = POCID

    @property
    def Name(self):
        r"""Vulnerability name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Components(self):
        r"""Component information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of ComponentsInfo
        """
        return self._Components

    @Components.setter
    def Components(self, Components):
        self._Components = Components

    @property
    def Category(self):
        r"""Category
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def CategoryType(self):
        r"""Category 2
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CategoryType

    @CategoryType.setter
    def CategoryType(self, CategoryType):
        self._CategoryType = CategoryType

    @property
    def Level(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Des(self):
        r"""Description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Des

    @Des.setter
    def Des(self, Des):
        self._Des = Des

    @property
    def OfficialSolution(self):
        r"""Solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OfficialSolution

    @OfficialSolution.setter
    def OfficialSolution(self, OfficialSolution):
        self._OfficialSolution = OfficialSolution

    @property
    def Reference(self):
        r"""Reference
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def DefenseSolution(self):
        r"""Defense solution
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenseSolution

    @DefenseSolution.setter
    def DefenseSolution(self, DefenseSolution):
        self._DefenseSolution = DefenseSolution

    @property
    def SubmitTime(self):
        r"""Submission time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime

    @property
    def CvssScore(self):
        r"""CVSS score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CvssScore

    @CvssScore.setter
    def CvssScore(self, CvssScore):
        self._CvssScore = CvssScore

    @property
    def CvssVector(self):
        r"""CVSS information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CvssVector

    @CvssVector.setter
    def CvssVector(self, CvssVector):
        self._CvssVector = CvssVector

    @property
    def IsSuggest(self):
        r"""Whether fix is suggested
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IsSuggest

    @IsSuggest.setter
    def IsSuggest(self, IsSuggest):
        self._IsSuggest = IsSuggest

    @property
    def FixedVersions(self):
        r"""Number of the fixed version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixedVersions

    @FixedVersions.setter
    def FixedVersions(self, FixedVersions):
        self._FixedVersions = FixedVersions

    @property
    def Tag(self):
        r"""Vulnerability tag. Valid values: `CanBeFixed`, `DynamicLevelPoc`, `DynamicLevelExp`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag

    @property
    def Component(self):
        r"""Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Component

    @Component.setter
    def Component(self, Component):
        self._Component = Component

    @property
    def Version(self):
        r"""Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version


    def _deserialize(self, params):
        self._CVEID = params.get("CVEID")
        self._POCID = params.get("POCID")
        self._Name = params.get("Name")
        if params.get("Components") is not None:
            self._Components = []
            for item in params.get("Components"):
                obj = ComponentsInfo()
                obj._deserialize(item)
                self._Components.append(obj)
        self._Category = params.get("Category")
        self._CategoryType = params.get("CategoryType")
        self._Level = params.get("Level")
        self._Des = params.get("Des")
        self._OfficialSolution = params.get("OfficialSolution")
        self._Reference = params.get("Reference")
        self._DefenseSolution = params.get("DefenseSolution")
        self._SubmitTime = params.get("SubmitTime")
        self._CvssScore = params.get("CvssScore")
        self._CvssVector = params.get("CvssVector")
        self._IsSuggest = params.get("IsSuggest")
        self._FixedVersions = params.get("FixedVersions")
        self._Tag = params.get("Tag")
        self._Component = params.get("Component")
        self._Version = params.get("Version")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImagesBindRuleInfo(AbstractModel):
    r"""Information of the runtime rule bound to the image

    """

    def __init__(self):
        r"""
        :param _ImageId: Image ID
        :type ImageId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ContainerCnt: Number of associated containers
        :type ContainerCnt: int
        :param _RuleId: Bound rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleId: str
        :param _RuleName: Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :type RuleName: str
        :param _ImageSize: Image size
Note: This field may return null, indicating that no valid values can be obtained.
        :type ImageSize: int
        :param _ScanTime: Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanTime: str
        """
        self._ImageId = None
        self._ImageName = None
        self._ContainerCnt = None
        self._RuleId = None
        self._RuleName = None
        self._ImageSize = None
        self._ScanTime = None

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ContainerCnt(self):
        r"""Number of associated containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def RuleId(self):
        r"""Bound rule ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def RuleName(self):
        r"""Rule name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def ImageSize(self):
        r"""Image size
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize

    @property
    def ScanTime(self):
        r"""Last scan time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime


    def _deserialize(self, params):
        self._ImageId = params.get("ImageId")
        self._ImageName = params.get("ImageName")
        self._ContainerCnt = params.get("ContainerCnt")
        self._RuleId = params.get("RuleId")
        self._RuleName = params.get("RuleName")
        self._ImageSize = params.get("ImageSize")
        self._ScanTime = params.get("ScanTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImagesInfo(AbstractModel):
    r"""List of image IDs

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _Size: Image size
        :type Size: int
        :param _HostCnt: Number of servers
        :type HostCnt: int
        :param _ContainerCnt: Number of containers
        :type ContainerCnt: int
        :param _ScanTime: Scan time
        :type ScanTime: str
        :param _VulCnt: Number of vulnerabilities
        :type VulCnt: int
        :param _VirusCnt: Number of viruses
        :type VirusCnt: int
        :param _RiskCnt: Number of sensitive data items
        :type RiskCnt: int
        :param _IsTrustImage: Whether it is a trusted image
        :type IsTrustImage: bool
        :param _OsName: Image system
        :type OsName: str
        :param _AgentError: Image scan error in the agent
        :type AgentError: str
        :param _ScanError: Image scan error on the backend
        :type ScanError: str
        :param _ScanStatus: Scanning status
        :type ScanStatus: str
        :param _ScanVirusError: Trojan scan error message
        :type ScanVirusError: str
        :param _ScanVulError: Vulnerability scan error message
        :type ScanVulError: str
        :param _ScanRiskError: Risk scan error message
        :type ScanRiskError: str
        :param _IsSuggest: Whether the image is of high priority. Valid values: `0` (no); others (yes).
        :type IsSuggest: int
        :param _IsAuthorized: Whether it is licensed. Valid values: `1` (yes); `0` (no).
        :type IsAuthorized: int
        :param _ComponentCnt: Number of components
        :type ComponentCnt: int
        """
        self._ImageID = None
        self._ImageName = None
        self._CreateTime = None
        self._Size = None
        self._HostCnt = None
        self._ContainerCnt = None
        self._ScanTime = None
        self._VulCnt = None
        self._VirusCnt = None
        self._RiskCnt = None
        self._IsTrustImage = None
        self._OsName = None
        self._AgentError = None
        self._ScanError = None
        self._ScanStatus = None
        self._ScanVirusError = None
        self._ScanVulError = None
        self._ScanRiskError = None
        self._IsSuggest = None
        self._IsAuthorized = None
        self._ComponentCnt = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Size(self):
        r"""Image size
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def HostCnt(self):
        r"""Number of servers
        :rtype: int
        """
        return self._HostCnt

    @HostCnt.setter
    def HostCnt(self, HostCnt):
        self._HostCnt = HostCnt

    @property
    def ContainerCnt(self):
        r"""Number of containers
        :rtype: int
        """
        return self._ContainerCnt

    @ContainerCnt.setter
    def ContainerCnt(self, ContainerCnt):
        self._ContainerCnt = ContainerCnt

    @property
    def ScanTime(self):
        r"""Scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def VulCnt(self):
        r"""Number of vulnerabilities
        :rtype: int
        """
        return self._VulCnt

    @VulCnt.setter
    def VulCnt(self, VulCnt):
        self._VulCnt = VulCnt

    @property
    def VirusCnt(self):
        r"""Number of viruses
        :rtype: int
        """
        return self._VirusCnt

    @VirusCnt.setter
    def VirusCnt(self, VirusCnt):
        self._VirusCnt = VirusCnt

    @property
    def RiskCnt(self):
        r"""Number of sensitive data items
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def IsTrustImage(self):
        r"""Whether it is a trusted image
        :rtype: bool
        """
        return self._IsTrustImage

    @IsTrustImage.setter
    def IsTrustImage(self, IsTrustImage):
        self._IsTrustImage = IsTrustImage

    @property
    def OsName(self):
        r"""Image system
        :rtype: str
        """
        return self._OsName

    @OsName.setter
    def OsName(self, OsName):
        self._OsName = OsName

    @property
    def AgentError(self):
        r"""Image scan error in the agent
        :rtype: str
        """
        return self._AgentError

    @AgentError.setter
    def AgentError(self, AgentError):
        self._AgentError = AgentError

    @property
    def ScanError(self):
        r"""Image scan error on the backend
        :rtype: str
        """
        return self._ScanError

    @ScanError.setter
    def ScanError(self, ScanError):
        self._ScanError = ScanError

    @property
    def ScanStatus(self):
        r"""Scanning status
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def ScanVirusError(self):
        r"""Trojan scan error message
        :rtype: str
        """
        return self._ScanVirusError

    @ScanVirusError.setter
    def ScanVirusError(self, ScanVirusError):
        self._ScanVirusError = ScanVirusError

    @property
    def ScanVulError(self):
        r"""Vulnerability scan error message
        :rtype: str
        """
        return self._ScanVulError

    @ScanVulError.setter
    def ScanVulError(self, ScanVulError):
        self._ScanVulError = ScanVulError

    @property
    def ScanRiskError(self):
        r"""Risk scan error message
        :rtype: str
        """
        return self._ScanRiskError

    @ScanRiskError.setter
    def ScanRiskError(self, ScanRiskError):
        self._ScanRiskError = ScanRiskError

    @property
    def IsSuggest(self):
        r"""Whether the image is of high priority. Valid values: `0` (no); others (yes).
        :rtype: int
        """
        return self._IsSuggest

    @IsSuggest.setter
    def IsSuggest(self, IsSuggest):
        self._IsSuggest = IsSuggest

    @property
    def IsAuthorized(self):
        r"""Whether it is licensed. Valid values: `1` (yes); `0` (no).
        :rtype: int
        """
        return self._IsAuthorized

    @IsAuthorized.setter
    def IsAuthorized(self, IsAuthorized):
        self._IsAuthorized = IsAuthorized

    @property
    def ComponentCnt(self):
        r"""Number of components
        :rtype: int
        """
        return self._ComponentCnt

    @ComponentCnt.setter
    def ComponentCnt(self, ComponentCnt):
        self._ComponentCnt = ComponentCnt


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._CreateTime = params.get("CreateTime")
        self._Size = params.get("Size")
        self._HostCnt = params.get("HostCnt")
        self._ContainerCnt = params.get("ContainerCnt")
        self._ScanTime = params.get("ScanTime")
        self._VulCnt = params.get("VulCnt")
        self._VirusCnt = params.get("VirusCnt")
        self._RiskCnt = params.get("RiskCnt")
        self._IsTrustImage = params.get("IsTrustImage")
        self._OsName = params.get("OsName")
        self._AgentError = params.get("AgentError")
        self._ScanError = params.get("ScanError")
        self._ScanStatus = params.get("ScanStatus")
        self._ScanVirusError = params.get("ScanVirusError")
        self._ScanVulError = params.get("ScanVulError")
        self._ScanRiskError = params.get("ScanRiskError")
        self._IsSuggest = params.get("IsSuggest")
        self._IsAuthorized = params.get("IsAuthorized")
        self._ComponentCnt = params.get("ComponentCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImagesVul(AbstractModel):
    r"""Vulnerability in the image

    """

    def __init__(self):
        r"""
        :param _CVEID: Vulnerability ID
        :type CVEID: str
        :param _Name: Vulnerability name
        :type Name: str
        :param _Component: Component
        :type Component: str
        :param _Version: Version
        :type Version: str
        :param _Category: Category
        :type Category: str
        :param _CategoryType: Category 2
        :type CategoryType: str
        :param _Level: Risk level
        :type Level: int
        :param _Des: Description
        :type Des: str
        :param _OfficialSolution: Solution
        :type OfficialSolution: str
        :param _Reference: Reference
        :type Reference: str
        :param _DefenseSolution: Defense solution
        :type DefenseSolution: str
        :param _SubmitTime: Submission time
        :type SubmitTime: str
        :param _CVSSV3Score: CVSS V3 score
        :type CVSSV3Score: float
        :param _CVSSV3Desc: CVSS V3 description
        :type CVSSV3Desc: str
        :param _IsSuggest: Whether it is of high priority. Valid values: `true` (yes); `false` (no).
        :type IsSuggest: bool
        :param _FixedVersions: Number of the fixed version
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixedVersions: str
        :param _Tag: Vulnerability tag. Valid values: `CanBeFixed`, `DynamicLevelPoc`, `DynamicLevelExp`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tag: list of str
        """
        self._CVEID = None
        self._Name = None
        self._Component = None
        self._Version = None
        self._Category = None
        self._CategoryType = None
        self._Level = None
        self._Des = None
        self._OfficialSolution = None
        self._Reference = None
        self._DefenseSolution = None
        self._SubmitTime = None
        self._CVSSV3Score = None
        self._CVSSV3Desc = None
        self._IsSuggest = None
        self._FixedVersions = None
        self._Tag = None

    @property
    def CVEID(self):
        r"""Vulnerability ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def Name(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Component(self):
        r"""Component
        :rtype: str
        """
        return self._Component

    @Component.setter
    def Component(self, Component):
        self._Component = Component

    @property
    def Version(self):
        r"""Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Category(self):
        r"""Category
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def CategoryType(self):
        r"""Category 2
        :rtype: str
        """
        return self._CategoryType

    @CategoryType.setter
    def CategoryType(self, CategoryType):
        self._CategoryType = CategoryType

    @property
    def Level(self):
        r"""Risk level
        :rtype: int
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Des(self):
        r"""Description
        :rtype: str
        """
        return self._Des

    @Des.setter
    def Des(self, Des):
        self._Des = Des

    @property
    def OfficialSolution(self):
        r"""Solution
        :rtype: str
        """
        return self._OfficialSolution

    @OfficialSolution.setter
    def OfficialSolution(self, OfficialSolution):
        self._OfficialSolution = OfficialSolution

    @property
    def Reference(self):
        r"""Reference
        :rtype: str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def DefenseSolution(self):
        r"""Defense solution
        :rtype: str
        """
        return self._DefenseSolution

    @DefenseSolution.setter
    def DefenseSolution(self, DefenseSolution):
        self._DefenseSolution = DefenseSolution

    @property
    def SubmitTime(self):
        r"""Submission time
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime

    @property
    def CVSSV3Score(self):
        r"""CVSS V3 score
        :rtype: float
        """
        return self._CVSSV3Score

    @CVSSV3Score.setter
    def CVSSV3Score(self, CVSSV3Score):
        self._CVSSV3Score = CVSSV3Score

    @property
    def CVSSV3Desc(self):
        r"""CVSS V3 description
        :rtype: str
        """
        return self._CVSSV3Desc

    @CVSSV3Desc.setter
    def CVSSV3Desc(self, CVSSV3Desc):
        self._CVSSV3Desc = CVSSV3Desc

    @property
    def IsSuggest(self):
        r"""Whether it is of high priority. Valid values: `true` (yes); `false` (no).
        :rtype: bool
        """
        return self._IsSuggest

    @IsSuggest.setter
    def IsSuggest(self, IsSuggest):
        self._IsSuggest = IsSuggest

    @property
    def FixedVersions(self):
        r"""Number of the fixed version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixedVersions

    @FixedVersions.setter
    def FixedVersions(self, FixedVersions):
        self._FixedVersions = FixedVersions

    @property
    def Tag(self):
        r"""Vulnerability tag. Valid values: `CanBeFixed`, `DynamicLevelPoc`, `DynamicLevelExp`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tag

    @Tag.setter
    def Tag(self, Tag):
        self._Tag = Tag


    def _deserialize(self, params):
        self._CVEID = params.get("CVEID")
        self._Name = params.get("Name")
        self._Component = params.get("Component")
        self._Version = params.get("Version")
        self._Category = params.get("Category")
        self._CategoryType = params.get("CategoryType")
        self._Level = params.get("Level")
        self._Des = params.get("Des")
        self._OfficialSolution = params.get("OfficialSolution")
        self._Reference = params.get("Reference")
        self._DefenseSolution = params.get("DefenseSolution")
        self._SubmitTime = params.get("SubmitTime")
        self._CVSSV3Score = params.get("CVSSV3Score")
        self._CVSSV3Desc = params.get("CVSSV3Desc")
        self._IsSuggest = params.get("IsSuggest")
        self._FixedVersions = params.get("FixedVersions")
        self._Tag = params.get("Tag")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InitializeUserComplianceEnvironmentRequest(AbstractModel):
    r"""InitializeUserComplianceEnvironment request structure.

    """


class InitializeUserComplianceEnvironmentResponse(AbstractModel):
    r"""InitializeUserComplianceEnvironment response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class K8sApiAbnormalEventInfo(AbstractModel):
    r"""K8sApi api abnormal event details

    """

    def __init__(self):
        r"""
        :param _MatchRuleName: Hit rule name
        :type MatchRuleName: str
        :param _MatchRuleType: Hit rule type
        :type MatchRuleType: str
        :param _RiskLevel: Alarm level
        :type RiskLevel: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _ClusterRunningStatus: Cluster running status
        :type ClusterRunningStatus: str
        :param _FirstCreateTime: First creation time
        :type FirstCreateTime: str
        :param _LastCreateTime: Last creation time
        :type LastCreateTime: str
        :param _AlarmCount: Number of alarms
        :type AlarmCount: int
        :param _Status: Status
`EVENT_UNDEAL`: Unhandled
`EVENT_DEALED`: Handled
`EVENT_IGNORE`: Ignored
`EVENT_DEL`: Deleted
`EVENT_ADD_WHITE`: Added to an allowlist
        :type Status: str
        :param _ClusterMasterIP: The master IP of a cluster
        :type ClusterMasterIP: str
        :param _K8sVersion: K8s version
        :type K8sVersion: str
        :param _RunningComponent: Runtime component
        :type RunningComponent: list of str
        :param _Desc: Description
        :type Desc: str
        :param _Suggestion: Suggestion
        :type Suggestion: str
        :param _Info: Request information
        :type Info: str
        :param _MatchRuleID: Rule ID
        :type MatchRuleID: str
        :param _HighLightFields: An array of highlighted fields
        :type HighLightFields: list of str
        :param _MatchRule: Hit rule
        :type MatchRule: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleScopeInfo`
        """
        self._MatchRuleName = None
        self._MatchRuleType = None
        self._RiskLevel = None
        self._ClusterID = None
        self._ClusterName = None
        self._ClusterRunningStatus = None
        self._FirstCreateTime = None
        self._LastCreateTime = None
        self._AlarmCount = None
        self._Status = None
        self._ClusterMasterIP = None
        self._K8sVersion = None
        self._RunningComponent = None
        self._Desc = None
        self._Suggestion = None
        self._Info = None
        self._MatchRuleID = None
        self._HighLightFields = None
        self._MatchRule = None

    @property
    def MatchRuleName(self):
        r"""Hit rule name
        :rtype: str
        """
        return self._MatchRuleName

    @MatchRuleName.setter
    def MatchRuleName(self, MatchRuleName):
        self._MatchRuleName = MatchRuleName

    @property
    def MatchRuleType(self):
        r"""Hit rule type
        :rtype: str
        """
        return self._MatchRuleType

    @MatchRuleType.setter
    def MatchRuleType(self, MatchRuleType):
        self._MatchRuleType = MatchRuleType

    @property
    def RiskLevel(self):
        r"""Alarm level
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterRunningStatus(self):
        r"""Cluster running status
        :rtype: str
        """
        return self._ClusterRunningStatus

    @ClusterRunningStatus.setter
    def ClusterRunningStatus(self, ClusterRunningStatus):
        self._ClusterRunningStatus = ClusterRunningStatus

    @property
    def FirstCreateTime(self):
        r"""First creation time
        :rtype: str
        """
        return self._FirstCreateTime

    @FirstCreateTime.setter
    def FirstCreateTime(self, FirstCreateTime):
        self._FirstCreateTime = FirstCreateTime

    @property
    def LastCreateTime(self):
        r"""Last creation time
        :rtype: str
        """
        return self._LastCreateTime

    @LastCreateTime.setter
    def LastCreateTime(self, LastCreateTime):
        self._LastCreateTime = LastCreateTime

    @property
    def AlarmCount(self):
        r"""Number of alarms
        :rtype: int
        """
        return self._AlarmCount

    @AlarmCount.setter
    def AlarmCount(self, AlarmCount):
        self._AlarmCount = AlarmCount

    @property
    def Status(self):
        r"""Status
`EVENT_UNDEAL`: Unhandled
`EVENT_DEALED`: Handled
`EVENT_IGNORE`: Ignored
`EVENT_DEL`: Deleted
`EVENT_ADD_WHITE`: Added to an allowlist
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ClusterMasterIP(self):
        r"""The master IP of a cluster
        :rtype: str
        """
        return self._ClusterMasterIP

    @ClusterMasterIP.setter
    def ClusterMasterIP(self, ClusterMasterIP):
        self._ClusterMasterIP = ClusterMasterIP

    @property
    def K8sVersion(self):
        r"""K8s version
        :rtype: str
        """
        return self._K8sVersion

    @K8sVersion.setter
    def K8sVersion(self, K8sVersion):
        self._K8sVersion = K8sVersion

    @property
    def RunningComponent(self):
        r"""Runtime component
        :rtype: list of str
        """
        return self._RunningComponent

    @RunningComponent.setter
    def RunningComponent(self, RunningComponent):
        self._RunningComponent = RunningComponent

    @property
    def Desc(self):
        r"""Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Suggestion(self):
        r"""Suggestion
        :rtype: str
        """
        return self._Suggestion

    @Suggestion.setter
    def Suggestion(self, Suggestion):
        self._Suggestion = Suggestion

    @property
    def Info(self):
        r"""Request information
        :rtype: str
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def MatchRuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._MatchRuleID

    @MatchRuleID.setter
    def MatchRuleID(self, MatchRuleID):
        self._MatchRuleID = MatchRuleID

    @property
    def HighLightFields(self):
        r"""An array of highlighted fields
        :rtype: list of str
        """
        return self._HighLightFields

    @HighLightFields.setter
    def HighLightFields(self, HighLightFields):
        self._HighLightFields = HighLightFields

    @property
    def MatchRule(self):
        r"""Hit rule
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleScopeInfo`
        """
        return self._MatchRule

    @MatchRule.setter
    def MatchRule(self, MatchRule):
        self._MatchRule = MatchRule


    def _deserialize(self, params):
        self._MatchRuleName = params.get("MatchRuleName")
        self._MatchRuleType = params.get("MatchRuleType")
        self._RiskLevel = params.get("RiskLevel")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._ClusterRunningStatus = params.get("ClusterRunningStatus")
        self._FirstCreateTime = params.get("FirstCreateTime")
        self._LastCreateTime = params.get("LastCreateTime")
        self._AlarmCount = params.get("AlarmCount")
        self._Status = params.get("Status")
        self._ClusterMasterIP = params.get("ClusterMasterIP")
        self._K8sVersion = params.get("K8sVersion")
        self._RunningComponent = params.get("RunningComponent")
        self._Desc = params.get("Desc")
        self._Suggestion = params.get("Suggestion")
        self._Info = params.get("Info")
        self._MatchRuleID = params.get("MatchRuleID")
        self._HighLightFields = params.get("HighLightFields")
        if params.get("MatchRule") is not None:
            self._MatchRule = K8sApiAbnormalRuleScopeInfo()
            self._MatchRule._deserialize(params.get("MatchRule"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class K8sApiAbnormalEventListItem(AbstractModel):
    r"""Items in the K8sApi abnormal event list

    """

    def __init__(self):
        r"""
        :param _ID: Event ID
        :type ID: int
        :param _MatchRuleType: Hit rule type
        :type MatchRuleType: str
        :param _RiskLevel: Threat level
        :type RiskLevel: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _ClusterRunningStatus: Cluster running status
        :type ClusterRunningStatus: str
        :param _FirstCreateTime: First creation time
        :type FirstCreateTime: str
        :param _LastCreateTime: Last creation time
        :type LastCreateTime: str
        :param _AlarmCount: Number of alarms
        :type AlarmCount: int
        :param _Status: Status
        :type Status: str
        :param _RuleType: Rule type
        :type RuleType: str
        :param _Desc: Description
        :type Desc: str
        :param _Suggestion: Solution
        :type Suggestion: str
        :param _RuleName: Rule name
        :type RuleName: str
        :param _MatchRule: Hit rule
        :type MatchRule: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleScopeInfo`
        """
        self._ID = None
        self._MatchRuleType = None
        self._RiskLevel = None
        self._ClusterID = None
        self._ClusterName = None
        self._ClusterRunningStatus = None
        self._FirstCreateTime = None
        self._LastCreateTime = None
        self._AlarmCount = None
        self._Status = None
        self._RuleType = None
        self._Desc = None
        self._Suggestion = None
        self._RuleName = None
        self._MatchRule = None

    @property
    def ID(self):
        r"""Event ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def MatchRuleType(self):
        r"""Hit rule type
        :rtype: str
        """
        return self._MatchRuleType

    @MatchRuleType.setter
    def MatchRuleType(self, MatchRuleType):
        self._MatchRuleType = MatchRuleType

    @property
    def RiskLevel(self):
        r"""Threat level
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterRunningStatus(self):
        r"""Cluster running status
        :rtype: str
        """
        return self._ClusterRunningStatus

    @ClusterRunningStatus.setter
    def ClusterRunningStatus(self, ClusterRunningStatus):
        self._ClusterRunningStatus = ClusterRunningStatus

    @property
    def FirstCreateTime(self):
        r"""First creation time
        :rtype: str
        """
        return self._FirstCreateTime

    @FirstCreateTime.setter
    def FirstCreateTime(self, FirstCreateTime):
        self._FirstCreateTime = FirstCreateTime

    @property
    def LastCreateTime(self):
        r"""Last creation time
        :rtype: str
        """
        return self._LastCreateTime

    @LastCreateTime.setter
    def LastCreateTime(self, LastCreateTime):
        self._LastCreateTime = LastCreateTime

    @property
    def AlarmCount(self):
        r"""Number of alarms
        :rtype: int
        """
        return self._AlarmCount

    @AlarmCount.setter
    def AlarmCount(self, AlarmCount):
        self._AlarmCount = AlarmCount

    @property
    def Status(self):
        r"""Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuleType(self):
        r"""Rule type
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def Desc(self):
        r"""Description
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def Suggestion(self):
        r"""Solution
        :rtype: str
        """
        return self._Suggestion

    @Suggestion.setter
    def Suggestion(self, Suggestion):
        self._Suggestion = Suggestion

    @property
    def RuleName(self):
        r"""Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def MatchRule(self):
        r"""Hit rule
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleScopeInfo`
        """
        return self._MatchRule

    @MatchRule.setter
    def MatchRule(self, MatchRule):
        self._MatchRule = MatchRule


    def _deserialize(self, params):
        self._ID = params.get("ID")
        self._MatchRuleType = params.get("MatchRuleType")
        self._RiskLevel = params.get("RiskLevel")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._ClusterRunningStatus = params.get("ClusterRunningStatus")
        self._FirstCreateTime = params.get("FirstCreateTime")
        self._LastCreateTime = params.get("LastCreateTime")
        self._AlarmCount = params.get("AlarmCount")
        self._Status = params.get("Status")
        self._RuleType = params.get("RuleType")
        self._Desc = params.get("Desc")
        self._Suggestion = params.get("Suggestion")
        self._RuleName = params.get("RuleName")
        if params.get("MatchRule") is not None:
            self._MatchRule = K8sApiAbnormalRuleScopeInfo()
            self._MatchRule._deserialize(params.get("MatchRule"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class K8sApiAbnormalRuleInfo(AbstractModel):
    r"""K8sApi abnormal request rule details

    """

    def __init__(self):
        r"""
        :param _RuleName: Rule name
        :type RuleName: str
        :param _Status: Status
        :type Status: bool
        :param _RuleInfoList: Rule information list
        :type RuleInfoList: list of K8sApiAbnormalRuleScopeInfo
        :param _EffectClusterIDSet: Effective cluster IDSet
        :type EffectClusterIDSet: list of str
        :param _RuleType: Rule type
RT_SYSTEM: System rules
RT_USER: User-defined rules
        :type RuleType: str
        :param _EffectAllCluster: Whether all clusters are effective
        :type EffectAllCluster: bool
        :param _RuleID: Rule ID
        :type RuleID: str
        """
        self._RuleName = None
        self._Status = None
        self._RuleInfoList = None
        self._EffectClusterIDSet = None
        self._RuleType = None
        self._EffectAllCluster = None
        self._RuleID = None

    @property
    def RuleName(self):
        r"""Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def Status(self):
        r"""Status
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuleInfoList(self):
        r"""Rule information list
        :rtype: list of K8sApiAbnormalRuleScopeInfo
        """
        return self._RuleInfoList

    @RuleInfoList.setter
    def RuleInfoList(self, RuleInfoList):
        self._RuleInfoList = RuleInfoList

    @property
    def EffectClusterIDSet(self):
        r"""Effective cluster IDSet
        :rtype: list of str
        """
        return self._EffectClusterIDSet

    @EffectClusterIDSet.setter
    def EffectClusterIDSet(self, EffectClusterIDSet):
        self._EffectClusterIDSet = EffectClusterIDSet

    @property
    def RuleType(self):
        r"""Rule type
RT_SYSTEM: System rules
RT_USER: User-defined rules
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def EffectAllCluster(self):
        r"""Whether all clusters are effective
        :rtype: bool
        """
        return self._EffectAllCluster

    @EffectAllCluster.setter
    def EffectAllCluster(self, EffectAllCluster):
        self._EffectAllCluster = EffectAllCluster

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID


    def _deserialize(self, params):
        self._RuleName = params.get("RuleName")
        self._Status = params.get("Status")
        if params.get("RuleInfoList") is not None:
            self._RuleInfoList = []
            for item in params.get("RuleInfoList"):
                obj = K8sApiAbnormalRuleScopeInfo()
                obj._deserialize(item)
                self._RuleInfoList.append(obj)
        self._EffectClusterIDSet = params.get("EffectClusterIDSet")
        self._RuleType = params.get("RuleType")
        self._EffectAllCluster = params.get("EffectAllCluster")
        self._RuleID = params.get("RuleID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class K8sApiAbnormalRuleListItem(AbstractModel):
    r"""Items in the list of K8sApi abnormal request rules

    """

    def __init__(self):
        r"""
        :param _RuleID: Rule ID
        :type RuleID: str
        :param _RuleName: Rule name
        :type RuleName: str
        :param _RuleType: Rule type
RT_SYSTEM System rules
RT_USER User defined
        :type RuleType: str
        :param _EffectClusterCount: Total number of affected clusters
        :type EffectClusterCount: int
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _OprUin: Edit account
        :type OprUin: str
        :param _Status: Status
        :type Status: bool
        """
        self._RuleID = None
        self._RuleName = None
        self._RuleType = None
        self._EffectClusterCount = None
        self._UpdateTime = None
        self._OprUin = None
        self._Status = None

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID

    @property
    def RuleName(self):
        r"""Rule name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def RuleType(self):
        r"""Rule type
RT_SYSTEM System rules
RT_USER User defined
        :rtype: str
        """
        return self._RuleType

    @RuleType.setter
    def RuleType(self, RuleType):
        self._RuleType = RuleType

    @property
    def EffectClusterCount(self):
        r"""Total number of affected clusters
        :rtype: int
        """
        return self._EffectClusterCount

    @EffectClusterCount.setter
    def EffectClusterCount(self, EffectClusterCount):
        self._EffectClusterCount = EffectClusterCount

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def OprUin(self):
        r"""Edit account
        :rtype: str
        """
        return self._OprUin

    @OprUin.setter
    def OprUin(self, OprUin):
        self._OprUin = OprUin

    @property
    def Status(self):
        r"""Status
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._RuleID = params.get("RuleID")
        self._RuleName = params.get("RuleName")
        self._RuleType = params.get("RuleType")
        self._EffectClusterCount = params.get("EffectClusterCount")
        self._UpdateTime = params.get("UpdateTime")
        self._OprUin = params.get("OprUin")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class K8sApiAbnormalRuleScopeInfo(AbstractModel):
    r"""Configuration range of K8sApi abnormal event rules

    """

    def __init__(self):
        r"""
        :param _Scope: Range
System event:
ANONYMOUS_ACCESS: Anonymous access
ABNORMAL_UA_REQ: Abnormal UA request
ANONYMOUS_ABNORMAL_PERMISSION: Abnormal changes on permissions of an anonymous user
GET_CREDENTIALS: Credential information acquisition
MOUNT_SENSITIVE_PATH: Sensitive path mounting
COMMAND_RUN: Command execution
PRIVILEGE_CONTAINER: Privilege container
EXCEPTION_CRONTAB_TASK: Aabnormal scheduled task
STATICS_POD: Static pod creation
ABNORMAL_CREATE_POD: Abnormal pod creation
USER_DEFINED: User defined
        :type Scope: str
        :param _Action: Action (RULE_MODE_ALERT: Alarm RULE_MODE_RELEASE: Release)
        :type Action: str
        :param _RiskLevel: Threat level: "HIGH": High-risk level; "MIDDLE": Middle-risk level; "LOW": Low-risk level; "NOTICE": Notice level
Note: This field may return `null`, indicating that no valid value was found.
        :type RiskLevel: str
        :param _Status: Switch status (true: On; false: Off): applicable to system rules.
Note: This field may return `null`, indicating that no valid value was found.
        :type Status: bool
        :param _IsDelete: Whether to delete: applicable to custom rule input parameters.
Note: This field may return `null`, indicating that no valid value was found.
        :type IsDelete: bool
        """
        self._Scope = None
        self._Action = None
        self._RiskLevel = None
        self._Status = None
        self._IsDelete = None

    @property
    def Scope(self):
        r"""Range
System event:
ANONYMOUS_ACCESS: Anonymous access
ABNORMAL_UA_REQ: Abnormal UA request
ANONYMOUS_ABNORMAL_PERMISSION: Abnormal changes on permissions of an anonymous user
GET_CREDENTIALS: Credential information acquisition
MOUNT_SENSITIVE_PATH: Sensitive path mounting
COMMAND_RUN: Command execution
PRIVILEGE_CONTAINER: Privilege container
EXCEPTION_CRONTAB_TASK: Aabnormal scheduled task
STATICS_POD: Static pod creation
ABNORMAL_CREATE_POD: Abnormal pod creation
USER_DEFINED: User defined
        :rtype: str
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def Action(self):
        r"""Action (RULE_MODE_ALERT: Alarm RULE_MODE_RELEASE: Release)
        :rtype: str
        """
        return self._Action

    @Action.setter
    def Action(self, Action):
        self._Action = Action

    @property
    def RiskLevel(self):
        r"""Threat level: "HIGH": High-risk level; "MIDDLE": Middle-risk level; "LOW": Low-risk level; "NOTICE": Notice level
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def Status(self):
        r"""Switch status (true: On; false: Off): applicable to system rules.
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def IsDelete(self):
        r"""Whether to delete: applicable to custom rule input parameters.
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: bool
        """
        return self._IsDelete

    @IsDelete.setter
    def IsDelete(self, IsDelete):
        self._IsDelete = IsDelete


    def _deserialize(self, params):
        self._Scope = params.get("Scope")
        self._Action = params.get("Action")
        self._RiskLevel = params.get("RiskLevel")
        self._Status = params.get("Status")
        self._IsDelete = params.get("IsDelete")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class K8sApiAbnormalTendencyItem(AbstractModel):
    r"""Items in the list of K8sApi abnormal request trends

    """

    def __init__(self):
        r"""
        :param _Date: Date
        :type Date: str
        :param _ExceptionUARequestCount: The number of abnormal UA request events
        :type ExceptionUARequestCount: int
        :param _AnonymousUserRightCount: The number of anonymous user permission events
        :type AnonymousUserRightCount: int
        :param _CredentialInformationObtainCount: The number of credential information acquisition events
        :type CredentialInformationObtainCount: int
        :param _SensitiveDataMountCount: The number of sensitive data mounting events
        :type SensitiveDataMountCount: int
        :param _CmdExecCount: The number of command execution events
        :type CmdExecCount: int
        :param _AbnormalScheduledTaskCount: The number of abnormal scheduled task events
        :type AbnormalScheduledTaskCount: int
        :param _StaticsPodCreateCount: The number of static pods created
        :type StaticsPodCreateCount: int
        :param _DoubtfulContainerCreateCount: The number of suspicious containers created
        :type DoubtfulContainerCreateCount: int
        :param _UserDefinedRuleCount: The number of custom rule events
        :type UserDefinedRuleCount: int
        :param _AnonymousAccessCount: The number of anonymous access events
        :type AnonymousAccessCount: int
        :param _PrivilegeContainerCount: The number of privilege container events
        :type PrivilegeContainerCount: int
        """
        self._Date = None
        self._ExceptionUARequestCount = None
        self._AnonymousUserRightCount = None
        self._CredentialInformationObtainCount = None
        self._SensitiveDataMountCount = None
        self._CmdExecCount = None
        self._AbnormalScheduledTaskCount = None
        self._StaticsPodCreateCount = None
        self._DoubtfulContainerCreateCount = None
        self._UserDefinedRuleCount = None
        self._AnonymousAccessCount = None
        self._PrivilegeContainerCount = None

    @property
    def Date(self):
        r"""Date
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date

    @property
    def ExceptionUARequestCount(self):
        r"""The number of abnormal UA request events
        :rtype: int
        """
        return self._ExceptionUARequestCount

    @ExceptionUARequestCount.setter
    def ExceptionUARequestCount(self, ExceptionUARequestCount):
        self._ExceptionUARequestCount = ExceptionUARequestCount

    @property
    def AnonymousUserRightCount(self):
        r"""The number of anonymous user permission events
        :rtype: int
        """
        return self._AnonymousUserRightCount

    @AnonymousUserRightCount.setter
    def AnonymousUserRightCount(self, AnonymousUserRightCount):
        self._AnonymousUserRightCount = AnonymousUserRightCount

    @property
    def CredentialInformationObtainCount(self):
        r"""The number of credential information acquisition events
        :rtype: int
        """
        return self._CredentialInformationObtainCount

    @CredentialInformationObtainCount.setter
    def CredentialInformationObtainCount(self, CredentialInformationObtainCount):
        self._CredentialInformationObtainCount = CredentialInformationObtainCount

    @property
    def SensitiveDataMountCount(self):
        r"""The number of sensitive data mounting events
        :rtype: int
        """
        return self._SensitiveDataMountCount

    @SensitiveDataMountCount.setter
    def SensitiveDataMountCount(self, SensitiveDataMountCount):
        self._SensitiveDataMountCount = SensitiveDataMountCount

    @property
    def CmdExecCount(self):
        r"""The number of command execution events
        :rtype: int
        """
        return self._CmdExecCount

    @CmdExecCount.setter
    def CmdExecCount(self, CmdExecCount):
        self._CmdExecCount = CmdExecCount

    @property
    def AbnormalScheduledTaskCount(self):
        r"""The number of abnormal scheduled task events
        :rtype: int
        """
        return self._AbnormalScheduledTaskCount

    @AbnormalScheduledTaskCount.setter
    def AbnormalScheduledTaskCount(self, AbnormalScheduledTaskCount):
        self._AbnormalScheduledTaskCount = AbnormalScheduledTaskCount

    @property
    def StaticsPodCreateCount(self):
        r"""The number of static pods created
        :rtype: int
        """
        return self._StaticsPodCreateCount

    @StaticsPodCreateCount.setter
    def StaticsPodCreateCount(self, StaticsPodCreateCount):
        self._StaticsPodCreateCount = StaticsPodCreateCount

    @property
    def DoubtfulContainerCreateCount(self):
        r"""The number of suspicious containers created
        :rtype: int
        """
        return self._DoubtfulContainerCreateCount

    @DoubtfulContainerCreateCount.setter
    def DoubtfulContainerCreateCount(self, DoubtfulContainerCreateCount):
        self._DoubtfulContainerCreateCount = DoubtfulContainerCreateCount

    @property
    def UserDefinedRuleCount(self):
        r"""The number of custom rule events
        :rtype: int
        """
        return self._UserDefinedRuleCount

    @UserDefinedRuleCount.setter
    def UserDefinedRuleCount(self, UserDefinedRuleCount):
        self._UserDefinedRuleCount = UserDefinedRuleCount

    @property
    def AnonymousAccessCount(self):
        r"""The number of anonymous access events
        :rtype: int
        """
        return self._AnonymousAccessCount

    @AnonymousAccessCount.setter
    def AnonymousAccessCount(self, AnonymousAccessCount):
        self._AnonymousAccessCount = AnonymousAccessCount

    @property
    def PrivilegeContainerCount(self):
        r"""The number of privilege container events
        :rtype: int
        """
        return self._PrivilegeContainerCount

    @PrivilegeContainerCount.setter
    def PrivilegeContainerCount(self, PrivilegeContainerCount):
        self._PrivilegeContainerCount = PrivilegeContainerCount


    def _deserialize(self, params):
        self._Date = params.get("Date")
        self._ExceptionUARequestCount = params.get("ExceptionUARequestCount")
        self._AnonymousUserRightCount = params.get("AnonymousUserRightCount")
        self._CredentialInformationObtainCount = params.get("CredentialInformationObtainCount")
        self._SensitiveDataMountCount = params.get("SensitiveDataMountCount")
        self._CmdExecCount = params.get("CmdExecCount")
        self._AbnormalScheduledTaskCount = params.get("AbnormalScheduledTaskCount")
        self._StaticsPodCreateCount = params.get("StaticsPodCreateCount")
        self._DoubtfulContainerCreateCount = params.get("DoubtfulContainerCreateCount")
        self._UserDefinedRuleCount = params.get("UserDefinedRuleCount")
        self._AnonymousAccessCount = params.get("AnonymousAccessCount")
        self._PrivilegeContainerCount = params.get("PrivilegeContainerCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAbnormalProcessRuleStatusRequest(AbstractModel):
    r"""ModifyAbnormalProcessRuleStatus request structure.

    """

    def __init__(self):
        r"""
        :param _RuleIdSet: Policy IDs
        :type RuleIdSet: list of str
        :param _IsEnable: Policy switch. Valid values: `true` (on); `false` (off).
        :type IsEnable: bool
        """
        self._RuleIdSet = None
        self._IsEnable = None

    @property
    def RuleIdSet(self):
        r"""Policy IDs
        :rtype: list of str
        """
        return self._RuleIdSet

    @RuleIdSet.setter
    def RuleIdSet(self, RuleIdSet):
        self._RuleIdSet = RuleIdSet

    @property
    def IsEnable(self):
        r"""Policy switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable


    def _deserialize(self, params):
        self._RuleIdSet = params.get("RuleIdSet")
        self._IsEnable = params.get("IsEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAbnormalProcessRuleStatusResponse(AbstractModel):
    r"""ModifyAbnormalProcessRuleStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAbnormalProcessStatusRequest(AbstractModel):
    r"""ModifyAbnormalProcessStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: List of event IDs
        :type EventIdSet: list of str
        :param _Status: Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _Remark: Event remarks
        :type Remark: str
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None

    @property
    def EventIdSet(self):
        r"""List of event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Event remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAbnormalProcessStatusResponse(AbstractModel):
    r"""ModifyAbnormalProcessStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAccessControlRuleStatusRequest(AbstractModel):
    r"""ModifyAccessControlRuleStatus request structure.

    """

    def __init__(self):
        r"""
        :param _RuleIdSet: Policy IDs
        :type RuleIdSet: list of str
        :param _IsEnable: Policy switch. Valid values: `true` (on); `false` (off).
        :type IsEnable: bool
        """
        self._RuleIdSet = None
        self._IsEnable = None

    @property
    def RuleIdSet(self):
        r"""Policy IDs
        :rtype: list of str
        """
        return self._RuleIdSet

    @RuleIdSet.setter
    def RuleIdSet(self, RuleIdSet):
        self._RuleIdSet = RuleIdSet

    @property
    def IsEnable(self):
        r"""Policy switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable


    def _deserialize(self, params):
        self._RuleIdSet = params.get("RuleIdSet")
        self._IsEnable = params.get("IsEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAccessControlRuleStatusResponse(AbstractModel):
    r"""ModifyAccessControlRuleStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAccessControlStatusRequest(AbstractModel):
    r"""ModifyAccessControlStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: List of event IDs
        :type EventIdSet: list of str
        :param _Status: Event status     
`EVENT_DEALED`: Processed.
     `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _Remark: Remarks
        :type Remark: str
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None

    @property
    def EventIdSet(self):
        r"""List of event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status     
`EVENT_DEALED`: Processed.
     `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAccessControlStatusResponse(AbstractModel):
    r"""ModifyAccessControlStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAssetImageRegistryScanStopOneKeyRequest(AbstractModel):
    r"""ModifyAssetImageRegistryScanStopOneKey request structure.

    """

    def __init__(self):
        r"""
        :param _All: Whether to scan all images
        :type All: bool
        :param _Images: List of scanned images
        :type Images: list of ImageInfo
        :param _Id: List of IDs of scanned images
        :type Id: list of int non-negative
        """
        self._All = None
        self._Images = None
        self._Id = None

    @property
    def All(self):
        r"""Whether to scan all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Images(self):
        r"""List of scanned images
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def Id(self):
        r"""List of IDs of scanned images
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._All = params.get("All")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAssetImageRegistryScanStopOneKeyResponse(AbstractModel):
    r"""ModifyAssetImageRegistryScanStopOneKey response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAssetImageRegistryScanStopRequest(AbstractModel):
    r"""ModifyAssetImageRegistryScanStop request structure.

    """

    def __init__(self):
        r"""
        :param _All: Whether to scan all images
        :type All: bool
        :param _Images: List of scanned images
        :type Images: list of ImageInfo
        :param _Id: List of scanned images
        :type Id: list of int non-negative
        :param _Filters: Filter
        :type Filters: list of AssetFilters
        :param _ExcludeImageList: List of images not to be scanned, which is used together with `Filters`.
        :type ExcludeImageList: list of int non-negative
        :param _OnlyScanLatest: Whether to scan only the latest repository images
        :type OnlyScanLatest: bool
        """
        self._All = None
        self._Images = None
        self._Id = None
        self._Filters = None
        self._ExcludeImageList = None
        self._OnlyScanLatest = None

    @property
    def All(self):
        r"""Whether to scan all images
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Images(self):
        r"""List of scanned images
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def Id(self):
        r"""List of scanned images
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Filters(self):
        r"""Filter
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExcludeImageList(self):
        r"""List of images not to be scanned, which is used together with `Filters`.
        :rtype: list of int non-negative
        """
        return self._ExcludeImageList

    @ExcludeImageList.setter
    def ExcludeImageList(self, ExcludeImageList):
        self._ExcludeImageList = ExcludeImageList

    @property
    def OnlyScanLatest(self):
        r"""Whether to scan only the latest repository images
        :rtype: bool
        """
        return self._OnlyScanLatest

    @OnlyScanLatest.setter
    def OnlyScanLatest(self, OnlyScanLatest):
        self._OnlyScanLatest = OnlyScanLatest


    def _deserialize(self, params):
        self._All = params.get("All")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._Id = params.get("Id")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExcludeImageList = params.get("ExcludeImageList")
        self._OnlyScanLatest = params.get("OnlyScanLatest")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAssetImageRegistryScanStopResponse(AbstractModel):
    r"""ModifyAssetImageRegistryScanStop response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAssetImageScanStopRequest(AbstractModel):
    r"""ModifyAssetImageScanStop request structure.

    """

    def __init__(self):
        r"""
        :param _TaskID: Task ID
        :type TaskID: str
        :param _Images: Image ID
        :type Images: list of str
        :param _Filters: Filter
        :type Filters: list of AssetFilters
        :param _ExcludeImageIds: Specified image IDs to be excluded
        :type ExcludeImageIds: str
        """
        self._TaskID = None
        self._Images = None
        self._Filters = None
        self._ExcludeImageIds = None

    @property
    def TaskID(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def Images(self):
        r"""Image ID
        :rtype: list of str
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def Filters(self):
        r"""Filter
        :rtype: list of AssetFilters
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def ExcludeImageIds(self):
        r"""Specified image IDs to be excluded
        :rtype: str
        """
        return self._ExcludeImageIds

    @ExcludeImageIds.setter
    def ExcludeImageIds(self, ExcludeImageIds):
        self._ExcludeImageIds = ExcludeImageIds


    def _deserialize(self, params):
        self._TaskID = params.get("TaskID")
        self._Images = params.get("Images")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._ExcludeImageIds = params.get("ExcludeImageIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAssetImageScanStopResponse(AbstractModel):
    r"""ModifyAssetImageScanStop response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Paused
        :type Status: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        r"""Paused
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class ModifyAssetRequest(AbstractModel):
    r"""ModifyAsset request structure.

    """

    def __init__(self):
        r"""
        :param _All: Sync all
        :type All: bool
        :param _Hosts: List of servers to be synced. Either this parameter or `All` (preferred) must be selected.
        :type Hosts: list of str
        """
        self._All = None
        self._Hosts = None

    @property
    def All(self):
        r"""Sync all
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def Hosts(self):
        r"""List of servers to be synced. Either this parameter or `All` (preferred) must be selected.
        :rtype: list of str
        """
        return self._Hosts

    @Hosts.setter
    def Hosts(self, Hosts):
        self._Hosts = Hosts


    def _deserialize(self, params):
        self._All = params.get("All")
        self._Hosts = params.get("Hosts")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAssetResponse(AbstractModel):
    r"""ModifyAsset response structure.

    """

    def __init__(self):
        r"""
        :param _Status: Sending result of the sync task
        :type Status: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        r"""Sending result of the sync task
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class ModifyCompliancePeriodTaskRequest(AbstractModel):
    r"""ModifyCompliancePeriodTask request structure.

    """

    def __init__(self):
        r"""
        :param _PeriodTaskId: ID of the scheduled task to be modified, which is returned by the `DescribeCompliancePeriodTaskList` API.
        :type PeriodTaskId: int
        :param _PeriodRule: Cycle rule of the scheduled task, which indicates no modification if the field is not specified.
        :type PeriodRule: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        :param _StandardSettings: Compliance standard, which indicates no modification if the field is not specified.
        :type StandardSettings: list of ComplianceBenchmarkStandardEnable
        """
        self._PeriodTaskId = None
        self._PeriodRule = None
        self._StandardSettings = None

    @property
    def PeriodTaskId(self):
        r"""ID of the scheduled task to be modified, which is returned by the `DescribeCompliancePeriodTaskList` API.
        :rtype: int
        """
        return self._PeriodTaskId

    @PeriodTaskId.setter
    def PeriodTaskId(self, PeriodTaskId):
        self._PeriodTaskId = PeriodTaskId

    @property
    def PeriodRule(self):
        r"""Cycle rule of the scheduled task, which indicates no modification if the field is not specified.
        :rtype: :class:`tencentcloud.tcss.v20201101.models.CompliancePeriodTaskRule`
        """
        return self._PeriodRule

    @PeriodRule.setter
    def PeriodRule(self, PeriodRule):
        self._PeriodRule = PeriodRule

    @property
    def StandardSettings(self):
        r"""Compliance standard, which indicates no modification if the field is not specified.
        :rtype: list of ComplianceBenchmarkStandardEnable
        """
        return self._StandardSettings

    @StandardSettings.setter
    def StandardSettings(self, StandardSettings):
        self._StandardSettings = StandardSettings


    def _deserialize(self, params):
        self._PeriodTaskId = params.get("PeriodTaskId")
        if params.get("PeriodRule") is not None:
            self._PeriodRule = CompliancePeriodTaskRule()
            self._PeriodRule._deserialize(params.get("PeriodRule"))
        if params.get("StandardSettings") is not None:
            self._StandardSettings = []
            for item in params.get("StandardSettings"):
                obj = ComplianceBenchmarkStandardEnable()
                obj._deserialize(item)
                self._StandardSettings.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyCompliancePeriodTaskResponse(AbstractModel):
    r"""ModifyCompliancePeriodTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyContainerNetStatusRequest(AbstractModel):
    r"""ModifyContainerNetStatus request structure.

    """

    def __init__(self):
        r"""
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _Status: Status
`EVENT_ISOLATE_CONTAINER`: Isolate the container.
`EVENT_RESOTRE_CONTAINER`: Recover the container.
)
        :type Status: str
        """
        self._ContainerID = None
        self._Status = None

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def Status(self):
        r"""Status
`EVENT_ISOLATE_CONTAINER`: Isolate the container.
`EVENT_RESOTRE_CONTAINER`: Recover the container.
)
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._ContainerID = params.get("ContainerID")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyContainerNetStatusResponse(AbstractModel):
    r"""ModifyContainerNetStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyEscapeEventStatusRequest(AbstractModel):
    r"""ModifyEscapeEventStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: List of event IDs
        :type EventIdSet: list of str
        :param _Status: Event status:
`EVENT_UNDEAL`: Pending (Unignored).
`EVENT_DEALED`: Processed.
`EVENT_IGNORE`: Ignored.
`EVENT_DELETE`: Deleted.
`EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _Remark: Remarks
        :type Remark: str
        :param _ImageIDs: Array of allowed image IDs
        :type ImageIDs: list of str
        :param _EventType: Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :type EventType: list of str
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None
        self._ImageIDs = None
        self._EventType = None

    @property
    def EventIdSet(self):
        r"""List of event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status:
`EVENT_UNDEAL`: Pending (Unignored).
`EVENT_DEALED`: Processed.
`EVENT_IGNORE`: Ignored.
`EVENT_DELETE`: Deleted.
`EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def ImageIDs(self):
        r"""Array of allowed image IDs
        :rtype: list of str
        """
        return self._ImageIDs

    @ImageIDs.setter
    def ImageIDs(self, ImageIDs):
        self._ImageIDs = ImageIDs

    @property
    def EventType(self):
        r"""Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :rtype: list of str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        self._ImageIDs = params.get("ImageIDs")
        self._EventType = params.get("EventType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyEscapeEventStatusResponse(AbstractModel):
    r"""ModifyEscapeEventStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyEscapeRuleRequest(AbstractModel):
    r"""ModifyEscapeRule request structure.

    """

    def __init__(self):
        r"""
        :param _RuleSet: Array to be modified
        :type RuleSet: list of EscapeRuleEnabled
        """
        self._RuleSet = None

    @property
    def RuleSet(self):
        r"""Array to be modified
        :rtype: list of EscapeRuleEnabled
        """
        return self._RuleSet

    @RuleSet.setter
    def RuleSet(self, RuleSet):
        self._RuleSet = RuleSet


    def _deserialize(self, params):
        if params.get("RuleSet") is not None:
            self._RuleSet = []
            for item in params.get("RuleSet"):
                obj = EscapeRuleEnabled()
                obj._deserialize(item)
                self._RuleSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyEscapeRuleResponse(AbstractModel):
    r"""ModifyEscapeRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyEscapeWhiteListRequest(AbstractModel):
    r"""ModifyEscapeWhiteList request structure.

    """

    def __init__(self):
        r"""
        :param _EventType: Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :type EventType: list of str
        :param _IDSet: Allowed item ID
        :type IDSet: list of int
        """
        self._EventType = None
        self._IDSet = None

    @property
    def EventType(self):
        r"""Allowed event type
   `ESCAPE_CGROUPS`: Cgroup escape.
   `ESCAPE_TAMPER_SENSITIVE_FILE`: File tamper escape.
   `ESCAPE_DOCKER_API`: Docker API access escape.
   `ESCAPE_VUL_OCCURRED`: Vulnerability exploit.
   `MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `PRIVILEGE_CONTAINER_START`: Privileged container.
   `PRIVILEGE`: Program privilege escalation escape.
        :rtype: list of str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def IDSet(self):
        r"""Allowed item ID
        :rtype: list of int
        """
        return self._IDSet

    @IDSet.setter
    def IDSet(self, IDSet):
        self._IDSet = IDSet


    def _deserialize(self, params):
        self._EventType = params.get("EventType")
        self._IDSet = params.get("IDSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyEscapeWhiteListResponse(AbstractModel):
    r"""ModifyEscapeWhiteList response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyIgnoreVul(AbstractModel):
    r"""Input parameters for adding and unignoring vulnerabilities in the scan

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _ImageIDs: IDs of images to be ignored. If it is not specified, it indicates to ignore all.
        :type ImageIDs: list of str
        :param _ImageType: When there is an image
Image type. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :type ImageType: str
        """
        self._PocID = None
        self._ImageIDs = None
        self._ImageType = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def ImageIDs(self):
        r"""IDs of images to be ignored. If it is not specified, it indicates to ignore all.
        :rtype: list of str
        """
        return self._ImageIDs

    @ImageIDs.setter
    def ImageIDs(self, ImageIDs):
        self._ImageIDs = ImageIDs

    @property
    def ImageType(self):
        r"""When there is an image
Image type. Valid values: `LOCAL` (local image); `REGISTRY` (repository image).
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._ImageIDs = params.get("ImageIDs")
        self._ImageType = params.get("ImageType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyImageAuthorizedRequest(AbstractModel):
    r"""ModifyImageAuthorized request structure.

    """

    def __init__(self):
        r"""
        :param _AllLocalImages: Whether to license all local images, which has a higher priority than licensing by local image ID. When it is `true`, `UpdatedLocalImageCnt` should be greater than `0`.
        :type AllLocalImages: bool
        :param _AllRegistryImages: Whether to license all repository images, with a higher priority than licensing by image ID. When it is `true`, `UpdatedRegistryImageCnt` should be greater than `0`.
        :type AllRegistryImages: bool
        :param _UpdatedLocalImageCnt: Specified number of local images to be licensed, with the highest priority. Any difference between this number and the actual number will be randomly ignored.
        :type UpdatedLocalImageCnt: int
        :param _UpdatedRegistryImageCnt: Specified number of repository images to be licensed, with the highest priority. Any difference between this number and the actual number will be randomly ignored.
        :type UpdatedRegistryImageCnt: int
        :param _ImageSourceType: Licensing by eligible local images. Valid values of local image source: `ASSETIMAGE` (local image list); `IMAGEALL` (local image sync). This parameter is required when `AllLocalImages` is `false`, `LocalImageIds` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :type ImageSourceType: str
        :param _LocalImageFilter: Licensing by eligible local images. This parameter is required when `AllLocalImages` is `false`, `LocalImageIds` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :type LocalImageFilter: list of AssetFilters
        :param _RegistryImageFilter: Licensing by eligible repository images. This parameter is required when `AllRegistryImages` is `false`, `RegistryImageIds` is empty, and `UpdatedRegistryImageCnt` is greater than `0`.
        :type RegistryImageFilter: list of AssetFilters
        :param _ExcludeLocalImageIds: Licensing by eligible images, excluding specified local image IDs
        :type ExcludeLocalImageIds: list of str
        :param _ExcludeRegistryImageIds: Licensing by eligible images, excluding specified repository image IDs
        :type ExcludeRegistryImageIds: list of str
        :param _LocalImageIds: Licensing by local image ID. This parameter has a higher priority than licensing by eligible images. It is required when `AllLocalImages` is `false`, `LocalImageFilter` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :type LocalImageIds: list of str
        :param _RegistryImageIds: Licensing by repository image ID. This parameter has a higher priority than licensing by eligible images. It is required when `AllRegistryImages` is `false`, `RegistryImageFilter` is empty, and `UpdatedRegistryImageCnt` is greater than `0`.
        :type RegistryImageIds: list of str
        :param _OnlyShowLatest: Whether to only include latest images. This parameter is required for repository images when `RegistryImageFilter` is not empty and `UpdatedRegistryImageCnt` is greater than `0`.
        :type OnlyShowLatest: bool
        """
        self._AllLocalImages = None
        self._AllRegistryImages = None
        self._UpdatedLocalImageCnt = None
        self._UpdatedRegistryImageCnt = None
        self._ImageSourceType = None
        self._LocalImageFilter = None
        self._RegistryImageFilter = None
        self._ExcludeLocalImageIds = None
        self._ExcludeRegistryImageIds = None
        self._LocalImageIds = None
        self._RegistryImageIds = None
        self._OnlyShowLatest = None

    @property
    def AllLocalImages(self):
        r"""Whether to license all local images, which has a higher priority than licensing by local image ID. When it is `true`, `UpdatedLocalImageCnt` should be greater than `0`.
        :rtype: bool
        """
        return self._AllLocalImages

    @AllLocalImages.setter
    def AllLocalImages(self, AllLocalImages):
        self._AllLocalImages = AllLocalImages

    @property
    def AllRegistryImages(self):
        r"""Whether to license all repository images, with a higher priority than licensing by image ID. When it is `true`, `UpdatedRegistryImageCnt` should be greater than `0`.
        :rtype: bool
        """
        return self._AllRegistryImages

    @AllRegistryImages.setter
    def AllRegistryImages(self, AllRegistryImages):
        self._AllRegistryImages = AllRegistryImages

    @property
    def UpdatedLocalImageCnt(self):
        r"""Specified number of local images to be licensed, with the highest priority. Any difference between this number and the actual number will be randomly ignored.
        :rtype: int
        """
        return self._UpdatedLocalImageCnt

    @UpdatedLocalImageCnt.setter
    def UpdatedLocalImageCnt(self, UpdatedLocalImageCnt):
        self._UpdatedLocalImageCnt = UpdatedLocalImageCnt

    @property
    def UpdatedRegistryImageCnt(self):
        r"""Specified number of repository images to be licensed, with the highest priority. Any difference between this number and the actual number will be randomly ignored.
        :rtype: int
        """
        return self._UpdatedRegistryImageCnt

    @UpdatedRegistryImageCnt.setter
    def UpdatedRegistryImageCnt(self, UpdatedRegistryImageCnt):
        self._UpdatedRegistryImageCnt = UpdatedRegistryImageCnt

    @property
    def ImageSourceType(self):
        r"""Licensing by eligible local images. Valid values of local image source: `ASSETIMAGE` (local image list); `IMAGEALL` (local image sync). This parameter is required when `AllLocalImages` is `false`, `LocalImageIds` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :rtype: str
        """
        return self._ImageSourceType

    @ImageSourceType.setter
    def ImageSourceType(self, ImageSourceType):
        self._ImageSourceType = ImageSourceType

    @property
    def LocalImageFilter(self):
        r"""Licensing by eligible local images. This parameter is required when `AllLocalImages` is `false`, `LocalImageIds` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :rtype: list of AssetFilters
        """
        return self._LocalImageFilter

    @LocalImageFilter.setter
    def LocalImageFilter(self, LocalImageFilter):
        self._LocalImageFilter = LocalImageFilter

    @property
    def RegistryImageFilter(self):
        r"""Licensing by eligible repository images. This parameter is required when `AllRegistryImages` is `false`, `RegistryImageIds` is empty, and `UpdatedRegistryImageCnt` is greater than `0`.
        :rtype: list of AssetFilters
        """
        return self._RegistryImageFilter

    @RegistryImageFilter.setter
    def RegistryImageFilter(self, RegistryImageFilter):
        self._RegistryImageFilter = RegistryImageFilter

    @property
    def ExcludeLocalImageIds(self):
        r"""Licensing by eligible images, excluding specified local image IDs
        :rtype: list of str
        """
        return self._ExcludeLocalImageIds

    @ExcludeLocalImageIds.setter
    def ExcludeLocalImageIds(self, ExcludeLocalImageIds):
        self._ExcludeLocalImageIds = ExcludeLocalImageIds

    @property
    def ExcludeRegistryImageIds(self):
        r"""Licensing by eligible images, excluding specified repository image IDs
        :rtype: list of str
        """
        return self._ExcludeRegistryImageIds

    @ExcludeRegistryImageIds.setter
    def ExcludeRegistryImageIds(self, ExcludeRegistryImageIds):
        self._ExcludeRegistryImageIds = ExcludeRegistryImageIds

    @property
    def LocalImageIds(self):
        r"""Licensing by local image ID. This parameter has a higher priority than licensing by eligible images. It is required when `AllLocalImages` is `false`, `LocalImageFilter` is empty, and `UpdatedLocalImageCnt` is greater than `0`.
        :rtype: list of str
        """
        return self._LocalImageIds

    @LocalImageIds.setter
    def LocalImageIds(self, LocalImageIds):
        self._LocalImageIds = LocalImageIds

    @property
    def RegistryImageIds(self):
        r"""Licensing by repository image ID. This parameter has a higher priority than licensing by eligible images. It is required when `AllRegistryImages` is `false`, `RegistryImageFilter` is empty, and `UpdatedRegistryImageCnt` is greater than `0`.
        :rtype: list of str
        """
        return self._RegistryImageIds

    @RegistryImageIds.setter
    def RegistryImageIds(self, RegistryImageIds):
        self._RegistryImageIds = RegistryImageIds

    @property
    def OnlyShowLatest(self):
        r"""Whether to only include latest images. This parameter is required for repository images when `RegistryImageFilter` is not empty and `UpdatedRegistryImageCnt` is greater than `0`.
        :rtype: bool
        """
        return self._OnlyShowLatest

    @OnlyShowLatest.setter
    def OnlyShowLatest(self, OnlyShowLatest):
        self._OnlyShowLatest = OnlyShowLatest


    def _deserialize(self, params):
        self._AllLocalImages = params.get("AllLocalImages")
        self._AllRegistryImages = params.get("AllRegistryImages")
        self._UpdatedLocalImageCnt = params.get("UpdatedLocalImageCnt")
        self._UpdatedRegistryImageCnt = params.get("UpdatedRegistryImageCnt")
        self._ImageSourceType = params.get("ImageSourceType")
        if params.get("LocalImageFilter") is not None:
            self._LocalImageFilter = []
            for item in params.get("LocalImageFilter"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._LocalImageFilter.append(obj)
        if params.get("RegistryImageFilter") is not None:
            self._RegistryImageFilter = []
            for item in params.get("RegistryImageFilter"):
                obj = AssetFilters()
                obj._deserialize(item)
                self._RegistryImageFilter.append(obj)
        self._ExcludeLocalImageIds = params.get("ExcludeLocalImageIds")
        self._ExcludeRegistryImageIds = params.get("ExcludeRegistryImageIds")
        self._LocalImageIds = params.get("LocalImageIds")
        self._RegistryImageIds = params.get("RegistryImageIds")
        self._OnlyShowLatest = params.get("OnlyShowLatest")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyImageAuthorizedResponse(AbstractModel):
    r"""ModifyImageAuthorized response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyK8sApiAbnormalEventStatusRequest(AbstractModel):
    r"""ModifyK8sApiAbnormalEventStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIDSet: Event ID set
        :type EventIDSet: list of int non-negative
        :param _Status: Status
        :type Status: str
        :param _Remark: Remarks
        :type Remark: str
        """
        self._EventIDSet = None
        self._Status = None
        self._Remark = None

    @property
    def EventIDSet(self):
        r"""Event ID set
        :rtype: list of int non-negative
        """
        return self._EventIDSet

    @EventIDSet.setter
    def EventIDSet(self, EventIDSet):
        self._EventIDSet = EventIDSet

    @property
    def Status(self):
        r"""Status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIDSet = params.get("EventIDSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyK8sApiAbnormalEventStatusResponse(AbstractModel):
    r"""ModifyK8sApiAbnormalEventStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyK8sApiAbnormalRuleInfoRequest(AbstractModel):
    r"""ModifyK8sApiAbnormalRuleInfo request structure.

    """

    def __init__(self):
        r"""
        :param _RuleInfo: Rule details
        :type RuleInfo: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        """
        self._RuleInfo = None

    @property
    def RuleInfo(self):
        r"""Rule details
        :rtype: :class:`tencentcloud.tcss.v20201101.models.K8sApiAbnormalRuleInfo`
        """
        return self._RuleInfo

    @RuleInfo.setter
    def RuleInfo(self, RuleInfo):
        self._RuleInfo = RuleInfo


    def _deserialize(self, params):
        if params.get("RuleInfo") is not None:
            self._RuleInfo = K8sApiAbnormalRuleInfo()
            self._RuleInfo._deserialize(params.get("RuleInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyK8sApiAbnormalRuleInfoResponse(AbstractModel):
    r"""ModifyK8sApiAbnormalRuleInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyK8sApiAbnormalRuleStatusRequest(AbstractModel):
    r"""ModifyK8sApiAbnormalRuleStatus request structure.

    """

    def __init__(self):
        r"""
        :param _RuleID: Rule ID
        :type RuleID: str
        :param _Status: Status of the rule. Values: `true` (Enabled), `false` (Disabled)
        :type Status: bool
        """
        self._RuleID = None
        self._Status = None

    @property
    def RuleID(self):
        r"""Rule ID
        :rtype: str
        """
        return self._RuleID

    @RuleID.setter
    def RuleID(self, RuleID):
        self._RuleID = RuleID

    @property
    def Status(self):
        r"""Status of the rule. Values: `true` (Enabled), `false` (Disabled)
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._RuleID = params.get("RuleID")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyK8sApiAbnormalRuleStatusResponse(AbstractModel):
    r"""ModifyK8sApiAbnormalRuleStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyReverseShellStatusRequest(AbstractModel):
    r"""ModifyReverseShellStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: List of event IDs
        :type EventIdSet: list of str
        :param _Status: Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _Remark: Event remarks
        :type Remark: str
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None

    @property
    def EventIdSet(self):
        r"""List of event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Event remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyReverseShellStatusResponse(AbstractModel):
    r"""ModifyReverseShellStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyRiskSyscallStatusRequest(AbstractModel):
    r"""ModifyRiskSyscallStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: List of event IDs
        :type EventIdSet: list of str
        :param _Status: Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _Remark: Event remarks
        :type Remark: str
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None

    @property
    def EventIdSet(self):
        r"""List of event IDs
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
     `EVENT_DEL`: Deleted.
     `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Event remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRiskSyscallStatusResponse(AbstractModel):
    r"""ModifyRiskSyscallStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogCleanSettingInfoRequest(AbstractModel):
    r"""ModifySecLogCleanSettingInfo request structure.

    """

    def __init__(self):
        r"""
        :param _ReservesLimit: Minimum storage (50-99) for triggering clearing
        :type ReservesLimit: int
        :param _ReservesDeadline: Storage limit (greater than 0 and smaller than `ReservesLimit`) for stopping clearing
        :type ReservesDeadline: int
        :param _DayLimit: Storage period (no less than one day) for triggering clearing
        :type DayLimit: int
        """
        self._ReservesLimit = None
        self._ReservesDeadline = None
        self._DayLimit = None

    @property
    def ReservesLimit(self):
        r"""Minimum storage (50-99) for triggering clearing
        :rtype: int
        """
        return self._ReservesLimit

    @ReservesLimit.setter
    def ReservesLimit(self, ReservesLimit):
        self._ReservesLimit = ReservesLimit

    @property
    def ReservesDeadline(self):
        r"""Storage limit (greater than 0 and smaller than `ReservesLimit`) for stopping clearing
        :rtype: int
        """
        return self._ReservesDeadline

    @ReservesDeadline.setter
    def ReservesDeadline(self, ReservesDeadline):
        self._ReservesDeadline = ReservesDeadline

    @property
    def DayLimit(self):
        r"""Storage period (no less than one day) for triggering clearing
        :rtype: int
        """
        return self._DayLimit

    @DayLimit.setter
    def DayLimit(self, DayLimit):
        self._DayLimit = DayLimit


    def _deserialize(self, params):
        self._ReservesLimit = params.get("ReservesLimit")
        self._ReservesDeadline = params.get("ReservesDeadline")
        self._DayLimit = params.get("DayLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogCleanSettingInfoResponse(AbstractModel):
    r"""ModifySecLogCleanSettingInfo response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogDeliveryClsSettingRequest(AbstractModel):
    r"""ModifySecLogDeliveryClsSetting request structure.

    """

    def __init__(self):
        r"""
        :param _List: Log information
        :type List: list of SecLogDeliveryClsSettingInfo
        """
        self._List = None

    @property
    def List(self):
        r"""Log information
        :rtype: list of SecLogDeliveryClsSettingInfo
        """
        return self._List

    @List.setter
    def List(self, List):
        self._List = List


    def _deserialize(self, params):
        if params.get("List") is not None:
            self._List = []
            for item in params.get("List"):
                obj = SecLogDeliveryClsSettingInfo()
                obj._deserialize(item)
                self._List.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogDeliveryClsSettingResponse(AbstractModel):
    r"""ModifySecLogDeliveryClsSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogDeliveryKafkaSettingRequest(AbstractModel):
    r"""ModifySecLogDeliveryKafkaSetting request structure.

    """

    def __init__(self):
        r"""
        :param _InstanceID: Instance ID
        :type InstanceID: str
        :param _InstanceName: Instance name
        :type InstanceName: str
        :param _Domain: Domain
        :type Domain: str
        :param _User: Username
        :type User: str
        :param _Password: Password
        :type Password: str
        :param _LogTypeList: List of log types
        :type LogTypeList: list of SecLogDeliveryKafkaSettingInfo
        :param _AccessType: Access type
        :type AccessType: int
        :param _KafkaVersion: Kafka version number
        :type KafkaVersion: str
        :param _RegionID: Region ID
        :type RegionID: str
        """
        self._InstanceID = None
        self._InstanceName = None
        self._Domain = None
        self._User = None
        self._Password = None
        self._LogTypeList = None
        self._AccessType = None
        self._KafkaVersion = None
        self._RegionID = None

    @property
    def InstanceID(self):
        r"""Instance ID
        :rtype: str
        """
        return self._InstanceID

    @InstanceID.setter
    def InstanceID(self, InstanceID):
        self._InstanceID = InstanceID

    @property
    def InstanceName(self):
        r"""Instance name
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def Domain(self):
        r"""Domain
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def User(self):
        r"""Username
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        self._User = User

    @property
    def Password(self):
        r"""Password
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password

    @property
    def LogTypeList(self):
        r"""List of log types
        :rtype: list of SecLogDeliveryKafkaSettingInfo
        """
        return self._LogTypeList

    @LogTypeList.setter
    def LogTypeList(self, LogTypeList):
        self._LogTypeList = LogTypeList

    @property
    def AccessType(self):
        r"""Access type
        :rtype: int
        """
        return self._AccessType

    @AccessType.setter
    def AccessType(self, AccessType):
        self._AccessType = AccessType

    @property
    def KafkaVersion(self):
        r"""Kafka version number
        :rtype: str
        """
        return self._KafkaVersion

    @KafkaVersion.setter
    def KafkaVersion(self, KafkaVersion):
        self._KafkaVersion = KafkaVersion

    @property
    def RegionID(self):
        r"""Region ID
        :rtype: str
        """
        return self._RegionID

    @RegionID.setter
    def RegionID(self, RegionID):
        self._RegionID = RegionID


    def _deserialize(self, params):
        self._InstanceID = params.get("InstanceID")
        self._InstanceName = params.get("InstanceName")
        self._Domain = params.get("Domain")
        self._User = params.get("User")
        self._Password = params.get("Password")
        if params.get("LogTypeList") is not None:
            self._LogTypeList = []
            for item in params.get("LogTypeList"):
                obj = SecLogDeliveryKafkaSettingInfo()
                obj._deserialize(item)
                self._LogTypeList.append(obj)
        self._AccessType = params.get("AccessType")
        self._KafkaVersion = params.get("KafkaVersion")
        self._RegionID = params.get("RegionID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogDeliveryKafkaSettingResponse(AbstractModel):
    r"""ModifySecLogDeliveryKafkaSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogJoinObjectsRequest(AbstractModel):
    r"""ModifySecLogJoinObjects request structure.

    """

    def __init__(self):
        r"""
        :param _LogType: Log type
Container bash: container_bash
Container startup: container_launch
K8s API: k8s_api
        :type LogType: str
        :param _BindList: List of QUuids of bound servers
        :type BindList: list of str
        :param _UnBindList: List of QUuids of servers to be unbound
        :type UnBindList: list of str
        :param _NodeType: Node type.
`NORMAL`: General node (default)
`SUPER`: Super node

        :type NodeType: str
        """
        self._LogType = None
        self._BindList = None
        self._UnBindList = None
        self._NodeType = None

    @property
    def LogType(self):
        r"""Log type
Container bash: container_bash
Container startup: container_launch
K8s API: k8s_api
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def BindList(self):
        r"""List of QUuids of bound servers
        :rtype: list of str
        """
        return self._BindList

    @BindList.setter
    def BindList(self, BindList):
        self._BindList = BindList

    @property
    def UnBindList(self):
        r"""List of QUuids of servers to be unbound
        :rtype: list of str
        """
        return self._UnBindList

    @UnBindList.setter
    def UnBindList(self, UnBindList):
        self._UnBindList = UnBindList

    @property
    def NodeType(self):
        r"""Node type.
`NORMAL`: General node (default)
`SUPER`: Super node

        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType


    def _deserialize(self, params):
        self._LogType = params.get("LogType")
        self._BindList = params.get("BindList")
        self._UnBindList = params.get("UnBindList")
        self._NodeType = params.get("NodeType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogJoinObjectsResponse(AbstractModel):
    r"""ModifySecLogJoinObjects response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogJoinStateRequest(AbstractModel):
    r"""ModifySecLogJoinState request structure.

    """

    def __init__(self):
        r"""
        :param _LogType: Log type
Container bash: container_bash
Container startup: container_launch
K8s API: k8s_api
        :type LogType: str
        :param _State: Status. Valid values: `true` (enabled); `false` (disabled).
        :type State: bool
        """
        self._LogType = None
        self._State = None

    @property
    def LogType(self):
        r"""Log type
Container bash: container_bash
Container startup: container_launch
K8s API: k8s_api
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def State(self):
        r"""Status. Valid values: `true` (enabled); `false` (disabled).
        :rtype: bool
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State


    def _deserialize(self, params):
        self._LogType = params.get("LogType")
        self._State = params.get("State")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogJoinStateResponse(AbstractModel):
    r"""ModifySecLogJoinState response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySecLogKafkaUINRequest(AbstractModel):
    r"""ModifySecLogKafkaUIN request structure.

    """

    def __init__(self):
        r"""
        :param _DstUIN: Target UIN
        :type DstUIN: str
        """
        self._DstUIN = None

    @property
    def DstUIN(self):
        r"""Target UIN
        :rtype: str
        """
        return self._DstUIN

    @DstUIN.setter
    def DstUIN(self, DstUIN):
        self._DstUIN = DstUIN


    def _deserialize(self, params):
        self._DstUIN = params.get("DstUIN")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySecLogKafkaUINResponse(AbstractModel):
    r"""ModifySecLogKafkaUIN response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusAutoIsolateExampleSwitchRequest(AbstractModel):
    r"""ModifyVirusAutoIsolateExampleSwitch request structure.

    """

    def __init__(self):
        r"""
        :param _MD5: MD5 checksum of the file
        :type MD5: str
        :param _Status: Switch. Valid values: `true` (on); `false` (off).
        :type Status: bool
        """
        self._MD5 = None
        self._Status = None

    @property
    def MD5(self):
        r"""MD5 checksum of the file
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def Status(self):
        r"""Switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._MD5 = params.get("MD5")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusAutoIsolateExampleSwitchResponse(AbstractModel):
    r"""ModifyVirusAutoIsolateExampleSwitch response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusAutoIsolateSettingRequest(AbstractModel):
    r"""ModifyVirusAutoIsolateSetting request structure.

    """

    def __init__(self):
        r"""
        :param _AutoIsolateSwitch: Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :type AutoIsolateSwitch: bool
        :param _IsKillProgress: Whether to interrupt the process associated with the isolated file. Valid values: `true` (yes); `false` (no).
        :type IsKillProgress: bool
        """
        self._AutoIsolateSwitch = None
        self._IsKillProgress = None

    @property
    def AutoIsolateSwitch(self):
        r"""Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._AutoIsolateSwitch

    @AutoIsolateSwitch.setter
    def AutoIsolateSwitch(self, AutoIsolateSwitch):
        self._AutoIsolateSwitch = AutoIsolateSwitch

    @property
    def IsKillProgress(self):
        r"""Whether to interrupt the process associated with the isolated file. Valid values: `true` (yes); `false` (no).
        :rtype: bool
        """
        return self._IsKillProgress

    @IsKillProgress.setter
    def IsKillProgress(self, IsKillProgress):
        self._IsKillProgress = IsKillProgress


    def _deserialize(self, params):
        self._AutoIsolateSwitch = params.get("AutoIsolateSwitch")
        self._IsKillProgress = params.get("IsKillProgress")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusAutoIsolateSettingResponse(AbstractModel):
    r"""ModifyVirusAutoIsolateSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusFileStatusRequest(AbstractModel):
    r"""ModifyVirusFileStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIdSet: IDs of events
        :type EventIdSet: list of str
        :param _Status: Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_DEL`: Deleted.
    `EVENT_ADD_WHITE`: Allowed.
    `EVENT_PENDING`: Pending.
	`EVENT_ISOLATE_CONTAINER`: Container isolated.
	`EVENT_RESOTRE_CONTAINER`: Container recovered.
        :type Status: str
        :param _Remark: Event remarks
        :type Remark: str
        :param _AutoIsolate: Whether to automatically isolate files with the same MD5 checksum
        :type AutoIsolate: bool
        """
        self._EventIdSet = None
        self._Status = None
        self._Remark = None
        self._AutoIsolate = None

    @property
    def EventIdSet(self):
        r"""IDs of events
        :rtype: list of str
        """
        return self._EventIdSet

    @EventIdSet.setter
    def EventIdSet(self, EventIdSet):
        self._EventIdSet = EventIdSet

    @property
    def Status(self):
        r"""Event status   
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_DEL`: Deleted.
    `EVENT_ADD_WHITE`: Allowed.
    `EVENT_PENDING`: Pending.
	`EVENT_ISOLATE_CONTAINER`: Container isolated.
	`EVENT_RESOTRE_CONTAINER`: Container recovered.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Event remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def AutoIsolate(self):
        r"""Whether to automatically isolate files with the same MD5 checksum
        :rtype: bool
        """
        return self._AutoIsolate

    @AutoIsolate.setter
    def AutoIsolate(self, AutoIsolate):
        self._AutoIsolate = AutoIsolate


    def _deserialize(self, params):
        self._EventIdSet = params.get("EventIdSet")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        self._AutoIsolate = params.get("AutoIsolate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusFileStatusResponse(AbstractModel):
    r"""ModifyVirusFileStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusMonitorSettingRequest(AbstractModel):
    r"""ModifyVirusMonitorSetting request structure.

    """

    def __init__(self):
        r"""
        :param _EnableScan: Whether to enable scheduled scan
        :type EnableScan: bool
        :param _ScanPathAll: Scan all paths
        :type ScanPathAll: bool
        :param _ScanPathType: Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following; the scope cannot be greater than `1`).
        :type ScanPathType: int
        :param _ScanPath: Specified path to be excluded or scanned
        :type ScanPath: list of str
        :param _ScanPathMode: Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :type ScanPathMode: str
        """
        self._EnableScan = None
        self._ScanPathAll = None
        self._ScanPathType = None
        self._ScanPath = None
        self._ScanPathMode = None

    @property
    def EnableScan(self):
        r"""Whether to enable scheduled scan
        :rtype: bool
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def ScanPathAll(self):
        r"""Scan all paths
        :rtype: bool
        """
        return self._ScanPathAll

    @ScanPathAll.setter
    def ScanPathAll(self, ScanPathAll):
        self._ScanPathAll = ScanPathAll

    @property
    def ScanPathType(self):
        r"""Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following; the scope cannot be greater than `1`).
        :rtype: int
        """
        return self._ScanPathType

    @ScanPathType.setter
    def ScanPathType(self, ScanPathType):
        self._ScanPathType = ScanPathType

    @property
    def ScanPath(self):
        r"""Specified path to be excluded or scanned
        :rtype: list of str
        """
        return self._ScanPath

    @ScanPath.setter
    def ScanPath(self, ScanPath):
        self._ScanPath = ScanPath

    @property
    def ScanPathMode(self):
        r"""Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :rtype: str
        """
        return self._ScanPathMode

    @ScanPathMode.setter
    def ScanPathMode(self, ScanPathMode):
        self._ScanPathMode = ScanPathMode


    def _deserialize(self, params):
        self._EnableScan = params.get("EnableScan")
        self._ScanPathAll = params.get("ScanPathAll")
        self._ScanPathType = params.get("ScanPathType")
        self._ScanPath = params.get("ScanPath")
        self._ScanPathMode = params.get("ScanPathMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusMonitorSettingResponse(AbstractModel):
    r"""ModifyVirusMonitorSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusScanSettingRequest(AbstractModel):
    r"""ModifyVirusScanSetting request structure.

    """

    def __init__(self):
        r"""
        :param _EnableScan: Whether to enable scheduled scan
        :type EnableScan: bool
        :param _Cycle: Check cycle in days. Valid values: `1`, `3`, `7`.
        :type Cycle: int
        :param _BeginScanAt: Scan start time
        :type BeginScanAt: str
        :param _ScanPathAll: Scan all paths. Valid values: `true` (all); `false` (specified).
        :type ScanPathAll: bool
        :param _ScanPathType: Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
        :type ScanPathType: int
        :param _Timeout: Timeout period in hours. Value range: 5-24.
        :type Timeout: int
        :param _ScanRangeType: Scanning scope. Valid values: `0` (container); `1` (server).
        :type ScanRangeType: int
        :param _ScanRangeAll: Valid values: `true` (all); `false` (specified).
        :type ScanRangeAll: bool
        :param _ScanIds: ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :type ScanIds: list of str
        :param _ScanPath: Scanned path
        :type ScanPath: list of str
        :param _ScanPathMode: Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :type ScanPathMode: str
        """
        self._EnableScan = None
        self._Cycle = None
        self._BeginScanAt = None
        self._ScanPathAll = None
        self._ScanPathType = None
        self._Timeout = None
        self._ScanRangeType = None
        self._ScanRangeAll = None
        self._ScanIds = None
        self._ScanPath = None
        self._ScanPathMode = None

    @property
    def EnableScan(self):
        r"""Whether to enable scheduled scan
        :rtype: bool
        """
        return self._EnableScan

    @EnableScan.setter
    def EnableScan(self, EnableScan):
        self._EnableScan = EnableScan

    @property
    def Cycle(self):
        r"""Check cycle in days. Valid values: `1`, `3`, `7`.
        :rtype: int
        """
        return self._Cycle

    @Cycle.setter
    def Cycle(self, Cycle):
        self._Cycle = Cycle

    @property
    def BeginScanAt(self):
        r"""Scan start time
        :rtype: str
        """
        return self._BeginScanAt

    @BeginScanAt.setter
    def BeginScanAt(self, BeginScanAt):
        self._BeginScanAt = BeginScanAt

    @property
    def ScanPathAll(self):
        r"""Scan all paths. Valid values: `true` (all); `false` (specified).
        :rtype: bool
        """
        return self._ScanPathAll

    @ScanPathAll.setter
    def ScanPathAll(self, ScanPathAll):
        self._ScanPathAll = ScanPathAll

    @property
    def ScanPathType(self):
        r"""Valid when `ScanPathAll` is `true`. Valid values of `ScanPathAll`: `0` (scan the following paths); `1` (scan all paths except the following).
        :rtype: int
        """
        return self._ScanPathType

    @ScanPathType.setter
    def ScanPathType(self, ScanPathType):
        self._ScanPathType = ScanPathType

    @property
    def Timeout(self):
        r"""Timeout period in hours. Value range: 5-24.
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def ScanRangeType(self):
        r"""Scanning scope. Valid values: `0` (container); `1` (server).
        :rtype: int
        """
        return self._ScanRangeType

    @ScanRangeType.setter
    def ScanRangeType(self, ScanRangeType):
        self._ScanRangeType = ScanRangeType

    @property
    def ScanRangeAll(self):
        r"""Valid values: `true` (all); `false` (specified).
        :rtype: bool
        """
        return self._ScanRangeAll

    @ScanRangeAll.setter
    def ScanRangeAll(self, ScanRangeAll):
        self._ScanRangeAll = ScanRangeAll

    @property
    def ScanIds(self):
        r"""ID of the specified container or server to be scanned, which is based on `ScanRangeType`.
        :rtype: list of str
        """
        return self._ScanIds

    @ScanIds.setter
    def ScanIds(self, ScanIds):
        self._ScanIds = ScanIds

    @property
    def ScanPath(self):
        r"""Scanned path
        :rtype: list of str
        """
        return self._ScanPath

    @ScanPath.setter
    def ScanPath(self, ScanPath):
        self._ScanPath = ScanPath

    @property
    def ScanPathMode(self):
        r"""Path scanning mode: 
`SCAN_PATH_ALL`: Scan all paths
`SCAN_PATH_DEFAULT`: Scan the default path
`SCAN_PATH_USER_DEFINE`: Scan the custom path

        :rtype: str
        """
        return self._ScanPathMode

    @ScanPathMode.setter
    def ScanPathMode(self, ScanPathMode):
        self._ScanPathMode = ScanPathMode


    def _deserialize(self, params):
        self._EnableScan = params.get("EnableScan")
        self._Cycle = params.get("Cycle")
        self._BeginScanAt = params.get("BeginScanAt")
        self._ScanPathAll = params.get("ScanPathAll")
        self._ScanPathType = params.get("ScanPathType")
        self._Timeout = params.get("Timeout")
        self._ScanRangeType = params.get("ScanRangeType")
        self._ScanRangeAll = params.get("ScanRangeAll")
        self._ScanIds = params.get("ScanIds")
        self._ScanPath = params.get("ScanPath")
        self._ScanPathMode = params.get("ScanPathMode")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusScanSettingResponse(AbstractModel):
    r"""ModifyVirusScanSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVirusScanTimeoutSettingRequest(AbstractModel):
    r"""ModifyVirusScanTimeoutSetting request structure.

    """

    def __init__(self):
        r"""
        :param _Timeout: Timeout period in hours. Value range: 5-24.
        :type Timeout: int
        :param _ScanType: Scan type. Valid values: `0` (quick scan); `1` (scheduled scan).
        :type ScanType: int
        """
        self._Timeout = None
        self._ScanType = None

    @property
    def Timeout(self):
        r"""Timeout period in hours. Value range: 5-24.
        :rtype: int
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout

    @property
    def ScanType(self):
        r"""Scan type. Valid values: `0` (quick scan); `1` (scheduled scan).
        :rtype: int
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType


    def _deserialize(self, params):
        self._Timeout = params.get("Timeout")
        self._ScanType = params.get("ScanType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVirusScanTimeoutSettingResponse(AbstractModel):
    r"""ModifyVirusScanTimeoutSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVulDefenceEventStatusRequest(AbstractModel):
    r"""ModifyVulDefenceEventStatus request structure.

    """

    def __init__(self):
        r"""
        :param _EventIDs: Array of event IDs
        :type EventIDs: list of int
        :param _Status: Operation status:
Valid values: `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignore); `EVENT_ISOLATE_CONTAINER` (isolate the container); `EVENT_DEL` (delete).
        :type Status: str
        :param _Remark: Remarks
        :type Remark: str
        """
        self._EventIDs = None
        self._Status = None
        self._Remark = None

    @property
    def EventIDs(self):
        r"""Array of event IDs
        :rtype: list of int
        """
        return self._EventIDs

    @EventIDs.setter
    def EventIDs(self, EventIDs):
        self._EventIDs = EventIDs

    @property
    def Status(self):
        r"""Operation status:
Valid values: `EVENT_DEALED` (processed); `EVENT_IGNORE` (ignore); `EVENT_ISOLATE_CONTAINER` (isolate the container); `EVENT_DEL` (delete).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._EventIDs = params.get("EventIDs")
        self._Status = params.get("Status")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVulDefenceEventStatusResponse(AbstractModel):
    r"""ModifyVulDefenceEventStatus response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVulDefenceSettingRequest(AbstractModel):
    r"""ModifyVulDefenceSetting request structure.

    """

    def __init__(self):
        r"""
        :param _IsEnabled: Whether it is enabled. Valid values: `0` (disabled); `1` (enabled).
        :type IsEnabled: int
        :param _Scope: Servers to enable exploit prevention. Values: `0` (custom); `1` (all).
        :type Scope: int
        :param _HostIDs: Specified servers with exploit prevention enabled
        :type HostIDs: list of str
        :param _SuperScope: Super nodes to enable exploit prevention. Values: `0` (custom); `1` (all).
        :type SuperScope: int
        :param _NodeIds: List of super node IDs
        :type NodeIds: list of str
        """
        self._IsEnabled = None
        self._Scope = None
        self._HostIDs = None
        self._SuperScope = None
        self._NodeIds = None

    @property
    def IsEnabled(self):
        r"""Whether it is enabled. Valid values: `0` (disabled); `1` (enabled).
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def Scope(self):
        r"""Servers to enable exploit prevention. Values: `0` (custom); `1` (all).
        :rtype: int
        """
        return self._Scope

    @Scope.setter
    def Scope(self, Scope):
        self._Scope = Scope

    @property
    def HostIDs(self):
        r"""Specified servers with exploit prevention enabled
        :rtype: list of str
        """
        return self._HostIDs

    @HostIDs.setter
    def HostIDs(self, HostIDs):
        self._HostIDs = HostIDs

    @property
    def SuperScope(self):
        r"""Super nodes to enable exploit prevention. Values: `0` (custom); `1` (all).
        :rtype: int
        """
        return self._SuperScope

    @SuperScope.setter
    def SuperScope(self, SuperScope):
        self._SuperScope = SuperScope

    @property
    def NodeIds(self):
        r"""List of super node IDs
        :rtype: list of str
        """
        return self._NodeIds

    @NodeIds.setter
    def NodeIds(self, NodeIds):
        self._NodeIds = NodeIds


    def _deserialize(self, params):
        self._IsEnabled = params.get("IsEnabled")
        self._Scope = params.get("Scope")
        self._HostIDs = params.get("HostIDs")
        self._SuperScope = params.get("SuperScope")
        self._NodeIds = params.get("NodeIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVulDefenceSettingResponse(AbstractModel):
    r"""ModifyVulDefenceSetting response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class NetworkAuditRecord(AbstractModel):
    r"""The structure returned by the audit of the network cluster asset

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _Region: Cluster region
        :type Region: str
        :param _Action: Action
        :type Action: str
        :param _Operation: Operator
        :type Operation: str
        :param _NetworkPolicyName: Policy name
        :type NetworkPolicyName: str
        :param _OperationTime: Operation time
        :type OperationTime: str
        :param _AppId: Operator `appid`
Note: This field may return null, indicating that no valid values can be obtained.
        :type AppId: int
        :param _Uin: Operator UIN
        :type Uin: str
        :param _PolicyId: The policy ID.
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type PolicyId: int
        """
        self._ClusterId = None
        self._ClusterName = None
        self._Region = None
        self._Action = None
        self._Operation = None
        self._NetworkPolicyName = None
        self._OperationTime = None
        self._AppId = None
        self._Uin = None
        self._PolicyId = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def Region(self):
        r"""Cluster region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Action(self):
        r"""Action
        :rtype: str
        """
        return self._Action

    @Action.setter
    def Action(self, Action):
        self._Action = Action

    @property
    def Operation(self):
        r"""Operator
        :rtype: str
        """
        return self._Operation

    @Operation.setter
    def Operation(self, Operation):
        self._Operation = Operation

    @property
    def NetworkPolicyName(self):
        r"""Policy name
        :rtype: str
        """
        return self._NetworkPolicyName

    @NetworkPolicyName.setter
    def NetworkPolicyName(self, NetworkPolicyName):
        self._NetworkPolicyName = NetworkPolicyName

    @property
    def OperationTime(self):
        r"""Operation time
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime

    @property
    def AppId(self):
        r"""Operator `appid`
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def Uin(self):
        r"""Operator UIN
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def PolicyId(self):
        r"""The policy ID.
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PolicyId

    @PolicyId.setter
    def PolicyId(self, PolicyId):
        self._PolicyId = PolicyId


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._Region = params.get("Region")
        self._Action = params.get("Action")
        self._Operation = params.get("Operation")
        self._NetworkPolicyName = params.get("NetworkPolicyName")
        self._OperationTime = params.get("OperationTime")
        self._AppId = params.get("AppId")
        self._Uin = params.get("Uin")
        self._PolicyId = params.get("PolicyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkClusterInfoItem(AbstractModel):
    r"""Response parameters structure of the network cluster asset

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _ClusterVersion: Cluster version
        :type ClusterVersion: str
        :param _ClusterOs: Cluster OS
        :type ClusterOs: str
        :param _ClusterType: Cluster type
        :type ClusterType: str
        :param _Region: Cluster region
        :type Region: str
        :param _NetworkPolicyPlugin: Cluster network plugin
        :type NetworkPolicyPlugin: str
        :param _ClusterStatus: Cluster status
        :type ClusterStatus: str
        :param _TotalRuleCount: Total number of policies
        :type TotalRuleCount: int
        :param _EnableRuleCount: Number of enabled policies
        :type EnableRuleCount: int
        :param _NetworkPolicyPluginStatus: Status of the cluster network plugin. Valid values: `Running` (normal); `Error` (abnormal).
        :type NetworkPolicyPluginStatus: str
        :param _NetworkPolicyPluginError: Error message of the cluster network plugin
Note: This field may return null, indicating that no valid values can be obtained.
        :type NetworkPolicyPluginError: str
        :param _ClusterNetworkSettings: Cluster network plugin
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type ClusterNetworkSettings: str
        """
        self._ClusterId = None
        self._ClusterName = None
        self._ClusterVersion = None
        self._ClusterOs = None
        self._ClusterType = None
        self._Region = None
        self._NetworkPolicyPlugin = None
        self._ClusterStatus = None
        self._TotalRuleCount = None
        self._EnableRuleCount = None
        self._NetworkPolicyPluginStatus = None
        self._NetworkPolicyPluginError = None
        self._ClusterNetworkSettings = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def ClusterVersion(self):
        r"""Cluster version
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def ClusterOs(self):
        r"""Cluster OS
        :rtype: str
        """
        return self._ClusterOs

    @ClusterOs.setter
    def ClusterOs(self, ClusterOs):
        self._ClusterOs = ClusterOs

    @property
    def ClusterType(self):
        r"""Cluster type
        :rtype: str
        """
        return self._ClusterType

    @ClusterType.setter
    def ClusterType(self, ClusterType):
        self._ClusterType = ClusterType

    @property
    def Region(self):
        r"""Cluster region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def NetworkPolicyPlugin(self):
        r"""Cluster network plugin
        :rtype: str
        """
        return self._NetworkPolicyPlugin

    @NetworkPolicyPlugin.setter
    def NetworkPolicyPlugin(self, NetworkPolicyPlugin):
        self._NetworkPolicyPlugin = NetworkPolicyPlugin

    @property
    def ClusterStatus(self):
        r"""Cluster status
        :rtype: str
        """
        return self._ClusterStatus

    @ClusterStatus.setter
    def ClusterStatus(self, ClusterStatus):
        self._ClusterStatus = ClusterStatus

    @property
    def TotalRuleCount(self):
        r"""Total number of policies
        :rtype: int
        """
        return self._TotalRuleCount

    @TotalRuleCount.setter
    def TotalRuleCount(self, TotalRuleCount):
        self._TotalRuleCount = TotalRuleCount

    @property
    def EnableRuleCount(self):
        r"""Number of enabled policies
        :rtype: int
        """
        return self._EnableRuleCount

    @EnableRuleCount.setter
    def EnableRuleCount(self, EnableRuleCount):
        self._EnableRuleCount = EnableRuleCount

    @property
    def NetworkPolicyPluginStatus(self):
        r"""Status of the cluster network plugin. Valid values: `Running` (normal); `Error` (abnormal).
        :rtype: str
        """
        return self._NetworkPolicyPluginStatus

    @NetworkPolicyPluginStatus.setter
    def NetworkPolicyPluginStatus(self, NetworkPolicyPluginStatus):
        self._NetworkPolicyPluginStatus = NetworkPolicyPluginStatus

    @property
    def NetworkPolicyPluginError(self):
        r"""Error message of the cluster network plugin
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NetworkPolicyPluginError

    @NetworkPolicyPluginError.setter
    def NetworkPolicyPluginError(self, NetworkPolicyPluginError):
        self._NetworkPolicyPluginError = NetworkPolicyPluginError

    @property
    def ClusterNetworkSettings(self):
        r"""Cluster network plugin
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterNetworkSettings

    @ClusterNetworkSettings.setter
    def ClusterNetworkSettings(self, ClusterNetworkSettings):
        self._ClusterNetworkSettings = ClusterNetworkSettings


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._ClusterName = params.get("ClusterName")
        self._ClusterVersion = params.get("ClusterVersion")
        self._ClusterOs = params.get("ClusterOs")
        self._ClusterType = params.get("ClusterType")
        self._Region = params.get("Region")
        self._NetworkPolicyPlugin = params.get("NetworkPolicyPlugin")
        self._ClusterStatus = params.get("ClusterStatus")
        self._TotalRuleCount = params.get("TotalRuleCount")
        self._EnableRuleCount = params.get("EnableRuleCount")
        self._NetworkPolicyPluginStatus = params.get("NetworkPolicyPluginStatus")
        self._NetworkPolicyPluginError = params.get("NetworkPolicyPluginError")
        self._ClusterNetworkSettings = params.get("ClusterNetworkSettings")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkClusterNamespaceLabelInfo(AbstractModel):
    r"""Response parameters structure of the network space label

    """

    def __init__(self):
        r"""
        :param _Labels: Network space label
        :type Labels: str
        :param _Name: Network space name
        :type Name: str
        """
        self._Labels = None
        self._Name = None

    @property
    def Labels(self):
        r"""Network space label
        :rtype: str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def Name(self):
        r"""Network space name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Labels = params.get("Labels")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkClusterPodInfo(AbstractModel):
    r"""Response parameters structure of the network cluster Pod

    """

    def __init__(self):
        r"""
        :param _PodName: Pod name
        :type PodName: str
        :param _Namespace: Pod space
Note: This field may return null, indicating that no valid values can be obtained.
        :type Namespace: str
        :param _Labels: Pod label
Note: This field may return null, indicating that no valid values can be obtained.
        :type Labels: str
        :param _WorkloadKind: Pod type
Note: This field may return null, indicating that no valid values can be obtained.
        :type WorkloadKind: str
        """
        self._PodName = None
        self._Namespace = None
        self._Labels = None
        self._WorkloadKind = None

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Namespace(self):
        r"""Pod space
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def Labels(self):
        r"""Pod label
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def WorkloadKind(self):
        r"""Pod type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._WorkloadKind

    @WorkloadKind.setter
    def WorkloadKind(self, WorkloadKind):
        self._WorkloadKind = WorkloadKind


    def _deserialize(self, params):
        self._PodName = params.get("PodName")
        self._Namespace = params.get("Namespace")
        self._Labels = params.get("Labels")
        self._WorkloadKind = params.get("WorkloadKind")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkCustomPolicy(AbstractModel):
    r"""Custom rule of the network cluster policy

    """

    def __init__(self):
        r"""
        :param _Direction: Network policy direction. Valid values: `FROM`, `TO`.
        :type Direction: str
        :param _Ports: Network policy port
Note: This field may return null, indicating that no valid values can be obtained.
        :type Ports: list of NetworkPorts
        :param _Peer: Network policy object

`PublishedNoConfirm`: Enabled and to be confirmed.

`PublishedConfirmed`: Enabled and confirmed.

`unPublishing`: Disabled.

`Publishing`: Enabled.

`unPublishEdit`: To be enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :type Peer: list of NetworkPeer
        """
        self._Direction = None
        self._Ports = None
        self._Peer = None

    @property
    def Direction(self):
        r"""Network policy direction. Valid values: `FROM`, `TO`.
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction

    @property
    def Ports(self):
        r"""Network policy port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetworkPorts
        """
        return self._Ports

    @Ports.setter
    def Ports(self, Ports):
        self._Ports = Ports

    @property
    def Peer(self):
        r"""Network policy object

`PublishedNoConfirm`: Enabled and to be confirmed.

`PublishedConfirmed`: Enabled and confirmed.

`unPublishing`: Disabled.

`Publishing`: Enabled.

`unPublishEdit`: To be enabled.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of NetworkPeer
        """
        return self._Peer

    @Peer.setter
    def Peer(self, Peer):
        self._Peer = Peer


    def _deserialize(self, params):
        self._Direction = params.get("Direction")
        if params.get("Ports") is not None:
            self._Ports = []
            for item in params.get("Ports"):
                obj = NetworkPorts()
                obj._deserialize(item)
                self._Ports.append(obj)
        if params.get("Peer") is not None:
            self._Peer = []
            for item in params.get("Peer"):
                obj = NetworkPeer()
                obj._deserialize(item)
                self._Peer.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkPeer(AbstractModel):
    r"""Custom rule of the network cluster policy

    """

    def __init__(self):
        r"""
        :param _PeerType: Object type:

Namespace: `NamespaceSelector`, which indicates that `NamespaceSelector` has a value.

Pod type: `PodSelector`, which indicates that both `NamespaceSelector` and `PodSelector` have values.

IP type: `IPBlock`, which indicates that only `IPBlock` has a value.
        :type PeerType: str
        :param _NamespaceSelector: Namespace selector
Note: This field may return null, indicating that no valid values can be obtained.
        :type NamespaceSelector: str
        :param _PodSelector: Pod selector
Note: This field may return null, indicating that no valid values can be obtained.
        :type PodSelector: str
        :param _IPBlock: IP selector
Note: This field may return null, indicating that no valid values can be obtained.
        :type IPBlock: str
        """
        self._PeerType = None
        self._NamespaceSelector = None
        self._PodSelector = None
        self._IPBlock = None

    @property
    def PeerType(self):
        r"""Object type:

Namespace: `NamespaceSelector`, which indicates that `NamespaceSelector` has a value.

Pod type: `PodSelector`, which indicates that both `NamespaceSelector` and `PodSelector` have values.

IP type: `IPBlock`, which indicates that only `IPBlock` has a value.
        :rtype: str
        """
        return self._PeerType

    @PeerType.setter
    def PeerType(self, PeerType):
        self._PeerType = PeerType

    @property
    def NamespaceSelector(self):
        r"""Namespace selector
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NamespaceSelector

    @NamespaceSelector.setter
    def NamespaceSelector(self, NamespaceSelector):
        self._NamespaceSelector = NamespaceSelector

    @property
    def PodSelector(self):
        r"""Pod selector
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def IPBlock(self):
        r"""IP selector
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._IPBlock

    @IPBlock.setter
    def IPBlock(self, IPBlock):
        self._IPBlock = IPBlock


    def _deserialize(self, params):
        self._PeerType = params.get("PeerType")
        self._NamespaceSelector = params.get("NamespaceSelector")
        self._PodSelector = params.get("PodSelector")
        self._IPBlock = params.get("IPBlock")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkPolicyInfoItem(AbstractModel):
    r"""Response parameters structure of the network cluster policy

    """

    def __init__(self):
        r"""
        :param _Name: Network policy name
        :type Name: str
        :param _Description: Network policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :type Description: str
        :param _PublishStatus: Publishing status:

`PublishedNoConfirm`: Enabled and to be confirmed.

`PublishedConfirmed`: Enabled and confirmed.

`unPublishing`: Disabled.

`Publishing`: Enabled.

`unPublishEdit`: To be enabled.
        :type PublishStatus: str
        :param _PolicySourceType: Policy type:

`System`: Synched from the cluster.

`Manual`: Added manually.
        :type PolicySourceType: str
        :param _Namespace: Policy space
        :type Namespace: str
        :param _PolicyCreateTime: Policy creation date
        :type PolicyCreateTime: str
        :param _NetworkPolicyPlugin: Policy type

kube-router: KubeRouter

cilium: Cilium
        :type NetworkPolicyPlugin: str
        :param _PublishResult: Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublishResult: str
        :param _FromPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type FromPolicyRule: int
        :param _ToPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type ToPolicyRule: int
        :param _PodSelector: Object
Note: This field may return null, indicating that no valid values can be obtained.
        :type PodSelector: str
        :param _Id: Network policy ID
        :type Id: int
        """
        self._Name = None
        self._Description = None
        self._PublishStatus = None
        self._PolicySourceType = None
        self._Namespace = None
        self._PolicyCreateTime = None
        self._NetworkPolicyPlugin = None
        self._PublishResult = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._PodSelector = None
        self._Id = None

    @property
    def Name(self):
        r"""Network policy name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        r"""Network policy description
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def PublishStatus(self):
        r"""Publishing status:

`PublishedNoConfirm`: Enabled and to be confirmed.

`PublishedConfirmed`: Enabled and confirmed.

`unPublishing`: Disabled.

`Publishing`: Enabled.

`unPublishEdit`: To be enabled.
        :rtype: str
        """
        return self._PublishStatus

    @PublishStatus.setter
    def PublishStatus(self, PublishStatus):
        self._PublishStatus = PublishStatus

    @property
    def PolicySourceType(self):
        r"""Policy type:

`System`: Synched from the cluster.

`Manual`: Added manually.
        :rtype: str
        """
        return self._PolicySourceType

    @PolicySourceType.setter
    def PolicySourceType(self, PolicySourceType):
        self._PolicySourceType = PolicySourceType

    @property
    def Namespace(self):
        r"""Policy space
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def PolicyCreateTime(self):
        r"""Policy creation date
        :rtype: str
        """
        return self._PolicyCreateTime

    @PolicyCreateTime.setter
    def PolicyCreateTime(self, PolicyCreateTime):
        self._PolicyCreateTime = PolicyCreateTime

    @property
    def NetworkPolicyPlugin(self):
        r"""Policy type

kube-router: KubeRouter

cilium: Cilium
        :rtype: str
        """
        return self._NetworkPolicyPlugin

    @NetworkPolicyPlugin.setter
    def NetworkPolicyPlugin(self, NetworkPolicyPlugin):
        self._NetworkPolicyPlugin = NetworkPolicyPlugin

    @property
    def PublishResult(self):
        r"""Policy publishing result
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublishResult

    @PublishResult.setter
    def PublishResult(self, PublishResult):
        self._PublishResult = PublishResult

    @property
    def FromPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def PodSelector(self):
        r"""Object
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Id(self):
        r"""Network policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._PublishStatus = params.get("PublishStatus")
        self._PolicySourceType = params.get("PolicySourceType")
        self._Namespace = params.get("Namespace")
        self._PolicyCreateTime = params.get("PolicyCreateTime")
        self._NetworkPolicyPlugin = params.get("NetworkPolicyPlugin")
        self._PublishResult = params.get("PublishResult")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        self._PodSelector = params.get("PodSelector")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkPorts(AbstractModel):
    r"""Port of the custom rule of the network cluster policy

    """

    def __init__(self):
        r"""
        :param _Protocol: Protocol of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type Protocol: str
        :param _Port: Port of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :type Port: str
        """
        self._Protocol = None
        self._Port = None

    @property
    def Protocol(self):
        r"""Protocol of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Protocol

    @Protocol.setter
    def Protocol(self, Protocol):
        self._Protocol = Protocol

    @property
    def Port(self):
        r"""Port of the network policy
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port


    def _deserialize(self, params):
        self._Protocol = params.get("Protocol")
        self._Port = params.get("Port")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OpenTcssTrialRequest(AbstractModel):
    r"""OpenTcssTrial request structure.

    """


class OpenTcssTrialResponse(AbstractModel):
    r"""OpenTcssTrial response structure.

    """

    def __init__(self):
        r"""
        :param _EndTime: End time of the trial
        :type EndTime: str
        :param _StartTime: Start time of the trial
        :type StartTime: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._EndTime = None
        self._StartTime = None
        self._RequestId = None

    @property
    def EndTime(self):
        r"""End time of the trial
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def StartTime(self):
        r"""Start time of the trial
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EndTime = params.get("EndTime")
        self._StartTime = params.get("StartTime")
        self._RequestId = params.get("RequestId")


class PortInfo(AbstractModel):
    r"""List of ports

    """

    def __init__(self):
        r"""
        :param _Type: Type
        :type Type: str
        :param _PublicIP: Public IP
        :type PublicIP: str
        :param _PublicPort: Server port
        :type PublicPort: int
        :param _ContainerPort: Container port
        :type ContainerPort: int
        :param _ContainerPID: Container PID
        :type ContainerPID: int
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ListenContainer: Monitored address in the container
        :type ListenContainer: str
        :param _ListenHost: Monitored address outside the container
        :type ListenHost: str
        :param _RunAs: Operating account
        :type RunAs: str
        :param _HostName: Server name
        :type HostName: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod name
        :type PodName: str
        :param _NodeType: Node type.
        :type NodeType: str
        :param _NodeUniqueID: UID of the super node
        :type NodeUniqueID: str
        """
        self._Type = None
        self._PublicIP = None
        self._PublicPort = None
        self._ContainerPort = None
        self._ContainerPID = None
        self._ContainerName = None
        self._HostID = None
        self._HostIP = None
        self._ProcessName = None
        self._ListenContainer = None
        self._ListenHost = None
        self._RunAs = None
        self._HostName = None
        self._PublicIp = None
        self._NodeID = None
        self._PodIP = None
        self._PodName = None
        self._NodeType = None
        self._NodeUniqueID = None

    @property
    def Type(self):
        r"""Type
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def PublicIP(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def PublicPort(self):
        r"""Server port
        :rtype: int
        """
        return self._PublicPort

    @PublicPort.setter
    def PublicPort(self, PublicPort):
        self._PublicPort = PublicPort

    @property
    def ContainerPort(self):
        r"""Container port
        :rtype: int
        """
        return self._ContainerPort

    @ContainerPort.setter
    def ContainerPort(self, ContainerPort):
        self._ContainerPort = ContainerPort

    @property
    def ContainerPID(self):
        r"""Container PID
        :rtype: int
        """
        return self._ContainerPID

    @ContainerPID.setter
    def ContainerPID(self, ContainerPID):
        self._ContainerPID = ContainerPID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ListenContainer(self):
        r"""Monitored address in the container
        :rtype: str
        """
        return self._ListenContainer

    @ListenContainer.setter
    def ListenContainer(self, ListenContainer):
        self._ListenContainer = ListenContainer

    @property
    def ListenHost(self):
        r"""Monitored address outside the container
        :rtype: str
        """
        return self._ListenHost

    @ListenHost.setter
    def ListenHost(self, ListenHost):
        self._ListenHost = ListenHost

    @property
    def RunAs(self):
        r"""Operating account
        :rtype: str
        """
        return self._RunAs

    @RunAs.setter
    def RunAs(self, RunAs):
        self._RunAs = RunAs

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def NodeType(self):
        r"""Node type.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of the super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._PublicIP = params.get("PublicIP")
        self._PublicPort = params.get("PublicPort")
        self._ContainerPort = params.get("ContainerPort")
        self._ContainerPID = params.get("ContainerPID")
        self._ContainerName = params.get("ContainerName")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ProcessName = params.get("ProcessName")
        self._ListenContainer = params.get("ListenContainer")
        self._ListenHost = params.get("ListenHost")
        self._RunAs = params.get("RunAs")
        self._HostName = params.get("HostName")
        self._PublicIp = params.get("PublicIp")
        self._NodeID = params.get("NodeID")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProcessBaseInfo(AbstractModel):
    r"""Runtime security - Basic process information

    """

    def __init__(self):
        r"""
        :param _ProcessStartUser: Process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessStartUser: str
        :param _ProcessUserGroup: Process user group
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessUserGroup: str
        :param _ProcessPath: Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessPath: str
        :param _ProcessParam: Process command line parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :type ProcessParam: str
        """
        self._ProcessStartUser = None
        self._ProcessUserGroup = None
        self._ProcessPath = None
        self._ProcessParam = None

    @property
    def ProcessStartUser(self):
        r"""Process initiator
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessStartUser

    @ProcessStartUser.setter
    def ProcessStartUser(self, ProcessStartUser):
        self._ProcessStartUser = ProcessStartUser

    @property
    def ProcessUserGroup(self):
        r"""Process user group
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessUserGroup

    @ProcessUserGroup.setter
    def ProcessUserGroup(self, ProcessUserGroup):
        self._ProcessUserGroup = ProcessUserGroup

    @property
    def ProcessPath(self):
        r"""Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ProcessParam(self):
        r"""Process command line parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ProcessParam

    @ProcessParam.setter
    def ProcessParam(self, ProcessParam):
        self._ProcessParam = ProcessParam


    def _deserialize(self, params):
        self._ProcessStartUser = params.get("ProcessStartUser")
        self._ProcessUserGroup = params.get("ProcessUserGroup")
        self._ProcessPath = params.get("ProcessPath")
        self._ProcessParam = params.get("ProcessParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProcessDetailBaseInfo(AbstractModel):
    r"""Runtime security details - Basic process information

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessId: Process PID
        :type ProcessId: int
        :param _ProcessStartUser: Process initiator
        :type ProcessStartUser: str
        :param _ProcessUserGroup: Process user group
        :type ProcessUserGroup: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _ProcessParam: Process command line parameter
        :type ProcessParam: str
        """
        self._ProcessName = None
        self._ProcessId = None
        self._ProcessStartUser = None
        self._ProcessUserGroup = None
        self._ProcessPath = None
        self._ProcessParam = None

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessId(self):
        r"""Process PID
        :rtype: int
        """
        return self._ProcessId

    @ProcessId.setter
    def ProcessId(self, ProcessId):
        self._ProcessId = ProcessId

    @property
    def ProcessStartUser(self):
        r"""Process initiator
        :rtype: str
        """
        return self._ProcessStartUser

    @ProcessStartUser.setter
    def ProcessStartUser(self, ProcessStartUser):
        self._ProcessStartUser = ProcessStartUser

    @property
    def ProcessUserGroup(self):
        r"""Process user group
        :rtype: str
        """
        return self._ProcessUserGroup

    @ProcessUserGroup.setter
    def ProcessUserGroup(self, ProcessUserGroup):
        self._ProcessUserGroup = ProcessUserGroup

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ProcessParam(self):
        r"""Process command line parameter
        :rtype: str
        """
        return self._ProcessParam

    @ProcessParam.setter
    def ProcessParam(self, ProcessParam):
        self._ProcessParam = ProcessParam


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._ProcessId = params.get("ProcessId")
        self._ProcessStartUser = params.get("ProcessStartUser")
        self._ProcessUserGroup = params.get("ProcessUserGroup")
        self._ProcessPath = params.get("ProcessPath")
        self._ProcessParam = params.get("ProcessParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProcessDetailInfo(AbstractModel):
    r"""Runtime security details - Process information

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessAuthority: Process permission
        :type ProcessAuthority: str
        :param _ProcessId: Process PID
        :type ProcessId: int
        :param _ProcessStartUser: Process initiator
        :type ProcessStartUser: str
        :param _ProcessUserGroup: Process user group
        :type ProcessUserGroup: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _ProcessTree: Process tree
        :type ProcessTree: str
        :param _ProcessMd5: Process MD5
        :type ProcessMd5: str
        :param _ProcessParam: Process command line parameter
        :type ProcessParam: str
        """
        self._ProcessName = None
        self._ProcessAuthority = None
        self._ProcessId = None
        self._ProcessStartUser = None
        self._ProcessUserGroup = None
        self._ProcessPath = None
        self._ProcessTree = None
        self._ProcessMd5 = None
        self._ProcessParam = None

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessAuthority(self):
        r"""Process permission
        :rtype: str
        """
        return self._ProcessAuthority

    @ProcessAuthority.setter
    def ProcessAuthority(self, ProcessAuthority):
        self._ProcessAuthority = ProcessAuthority

    @property
    def ProcessId(self):
        r"""Process PID
        :rtype: int
        """
        return self._ProcessId

    @ProcessId.setter
    def ProcessId(self, ProcessId):
        self._ProcessId = ProcessId

    @property
    def ProcessStartUser(self):
        r"""Process initiator
        :rtype: str
        """
        return self._ProcessStartUser

    @ProcessStartUser.setter
    def ProcessStartUser(self, ProcessStartUser):
        self._ProcessStartUser = ProcessStartUser

    @property
    def ProcessUserGroup(self):
        r"""Process user group
        :rtype: str
        """
        return self._ProcessUserGroup

    @ProcessUserGroup.setter
    def ProcessUserGroup(self, ProcessUserGroup):
        self._ProcessUserGroup = ProcessUserGroup

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ProcessTree(self):
        r"""Process tree
        :rtype: str
        """
        return self._ProcessTree

    @ProcessTree.setter
    def ProcessTree(self, ProcessTree):
        self._ProcessTree = ProcessTree

    @property
    def ProcessMd5(self):
        r"""Process MD5
        :rtype: str
        """
        return self._ProcessMd5

    @ProcessMd5.setter
    def ProcessMd5(self, ProcessMd5):
        self._ProcessMd5 = ProcessMd5

    @property
    def ProcessParam(self):
        r"""Process command line parameter
        :rtype: str
        """
        return self._ProcessParam

    @ProcessParam.setter
    def ProcessParam(self, ProcessParam):
        self._ProcessParam = ProcessParam


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._ProcessAuthority = params.get("ProcessAuthority")
        self._ProcessId = params.get("ProcessId")
        self._ProcessStartUser = params.get("ProcessStartUser")
        self._ProcessUserGroup = params.get("ProcessUserGroup")
        self._ProcessPath = params.get("ProcessPath")
        self._ProcessTree = params.get("ProcessTree")
        self._ProcessMd5 = params.get("ProcessMd5")
        self._ProcessParam = params.get("ProcessParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProcessInfo(AbstractModel):
    r"""List of processes

    """

    def __init__(self):
        r"""
        :param _StartTime: Process start time
        :type StartTime: str
        :param _RunAs: Operator
        :type RunAs: str
        :param _CmdLine: Command line parameter
        :type CmdLine: str
        :param _Exe: Exe path
        :type Exe: str
        :param _PID: Server PID
        :type PID: int
        :param _ContainerPID: Container PID
        :type ContainerPID: int
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _HostName: Server name
        :type HostName: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod name
        :type PodName: str
        :param _NodeType: Node type.
        :type NodeType: str
        :param _NodeUniqueID: UID of the super node
        :type NodeUniqueID: str
        """
        self._StartTime = None
        self._RunAs = None
        self._CmdLine = None
        self._Exe = None
        self._PID = None
        self._ContainerPID = None
        self._ContainerName = None
        self._HostID = None
        self._HostIP = None
        self._ProcessName = None
        self._HostName = None
        self._PublicIp = None
        self._NodeID = None
        self._PodIP = None
        self._PodName = None
        self._NodeType = None
        self._NodeUniqueID = None

    @property
    def StartTime(self):
        r"""Process start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def RunAs(self):
        r"""Operator
        :rtype: str
        """
        return self._RunAs

    @RunAs.setter
    def RunAs(self, RunAs):
        self._RunAs = RunAs

    @property
    def CmdLine(self):
        r"""Command line parameter
        :rtype: str
        """
        return self._CmdLine

    @CmdLine.setter
    def CmdLine(self, CmdLine):
        self._CmdLine = CmdLine

    @property
    def Exe(self):
        r"""Exe path
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def PID(self):
        r"""Server PID
        :rtype: int
        """
        return self._PID

    @PID.setter
    def PID(self, PID):
        self._PID = PID

    @property
    def ContainerPID(self):
        r"""Container PID
        :rtype: int
        """
        return self._ContainerPID

    @ContainerPID.setter
    def ContainerPID(self, ContainerPID):
        self._ContainerPID = ContainerPID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def NodeType(self):
        r"""Node type.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of the super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._RunAs = params.get("RunAs")
        self._CmdLine = params.get("CmdLine")
        self._Exe = params.get("Exe")
        self._PID = params.get("PID")
        self._ContainerPID = params.get("ContainerPID")
        self._ContainerName = params.get("ContainerName")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ProcessName = params.get("ProcessName")
        self._HostName = params.get("HostName")
        self._PublicIp = params.get("PublicIp")
        self._NodeID = params.get("NodeID")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProjectInfo(AbstractModel):
    r"""The project to which the host belongs

    """

    def __init__(self):
        r"""
        :param _ProjectName: Project name
        :type ProjectName: str
        :param _ProjectID: Project ID
        :type ProjectID: int
        """
        self._ProjectName = None
        self._ProjectID = None

    @property
    def ProjectName(self):
        r"""Project name
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def ProjectID(self):
        r"""Project ID
        :rtype: int
        """
        return self._ProjectID

    @ProjectID.setter
    def ProjectID(self, ProjectID):
        self._ProjectID = ProjectID


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        self._ProjectID = params.get("ProjectID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PromotionActivityContent(AbstractModel):
    r"""Promotion content

    """

    def __init__(self):
        r"""
        :param _MonthNum: Number of months
        :type MonthNum: int
        :param _CoresCountLimit: Minimum number of cores
        :type CoresCountLimit: int
        :param _ProfessionalDiscount: Discount on the Pro Edition
        :type ProfessionalDiscount: int
        :param _ImageAuthorizationNum: Number of free images
        :type ImageAuthorizationNum: int
        """
        self._MonthNum = None
        self._CoresCountLimit = None
        self._ProfessionalDiscount = None
        self._ImageAuthorizationNum = None

    @property
    def MonthNum(self):
        r"""Number of months
        :rtype: int
        """
        return self._MonthNum

    @MonthNum.setter
    def MonthNum(self, MonthNum):
        self._MonthNum = MonthNum

    @property
    def CoresCountLimit(self):
        r"""Minimum number of cores
        :rtype: int
        """
        return self._CoresCountLimit

    @CoresCountLimit.setter
    def CoresCountLimit(self, CoresCountLimit):
        self._CoresCountLimit = CoresCountLimit

    @property
    def ProfessionalDiscount(self):
        r"""Discount on the Pro Edition
        :rtype: int
        """
        return self._ProfessionalDiscount

    @ProfessionalDiscount.setter
    def ProfessionalDiscount(self, ProfessionalDiscount):
        self._ProfessionalDiscount = ProfessionalDiscount

    @property
    def ImageAuthorizationNum(self):
        r"""Number of free images
        :rtype: int
        """
        return self._ImageAuthorizationNum

    @ImageAuthorizationNum.setter
    def ImageAuthorizationNum(self, ImageAuthorizationNum):
        self._ImageAuthorizationNum = ImageAuthorizationNum


    def _deserialize(self, params):
        self._MonthNum = params.get("MonthNum")
        self._CoresCountLimit = params.get("CoresCountLimit")
        self._ProfessionalDiscount = params.get("ProfessionalDiscount")
        self._ImageAuthorizationNum = params.get("ImageAuthorizationNum")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RaspInfo(AbstractModel):
    r"""RASP information of vulnerability defense plugin

    """

    def __init__(self):
        r"""
        :param _Name: RASP name
        :type Name: str
        :param _Value: RASP description
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        r"""RASP name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        r"""RASP description
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegionInfo(AbstractModel):
    r"""Region information

    """

    def __init__(self):
        r"""
        :param _Region: Region identifier
        :type Region: str
        :param _RegionName: Region name
        :type RegionName: str
        """
        self._Region = None
        self._RegionName = None

    @property
    def Region(self):
        r"""Region identifier
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def RegionName(self):
        r"""Region name
        :rtype: str
        """
        return self._RegionName

    @RegionName.setter
    def RegionName(self, RegionName):
        self._RegionName = RegionName


    def _deserialize(self, params):
        self._Region = params.get("Region")
        self._RegionName = params.get("RegionName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RegistryConnDetectResult(AbstractModel):
    r"""

    """

    def __init__(self):
        r"""
        :param _Quuid: 
        :type Quuid: str
        :param _Uuid: 
        :type Uuid: str
        :param _ConnDetectStatus: 
        :type ConnDetectStatus: str
        :param _ConnDetectMessage: 
        :type ConnDetectMessage: str
        :param _Solution: 
        :type Solution: str
        :param _FailReason: 
        :type FailReason: str
        """
        self._Quuid = None
        self._Uuid = None
        self._ConnDetectStatus = None
        self._ConnDetectMessage = None
        self._Solution = None
        self._FailReason = None

    @property
    def Quuid(self):
        r"""
        :rtype: str
        """
        return self._Quuid

    @Quuid.setter
    def Quuid(self, Quuid):
        self._Quuid = Quuid

    @property
    def Uuid(self):
        r"""
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def ConnDetectStatus(self):
        r"""
        :rtype: str
        """
        return self._ConnDetectStatus

    @ConnDetectStatus.setter
    def ConnDetectStatus(self, ConnDetectStatus):
        self._ConnDetectStatus = ConnDetectStatus

    @property
    def ConnDetectMessage(self):
        r"""
        :rtype: str
        """
        return self._ConnDetectMessage

    @ConnDetectMessage.setter
    def ConnDetectMessage(self, ConnDetectMessage):
        self._ConnDetectMessage = ConnDetectMessage

    @property
    def Solution(self):
        r"""
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def FailReason(self):
        r"""
        :rtype: str
        """
        return self._FailReason

    @FailReason.setter
    def FailReason(self, FailReason):
        self._FailReason = FailReason


    def _deserialize(self, params):
        self._Quuid = params.get("Quuid")
        self._Uuid = params.get("Uuid")
        self._ConnDetectStatus = params.get("ConnDetectStatus")
        self._ConnDetectMessage = params.get("ConnDetectMessage")
        self._Solution = params.get("Solution")
        self._FailReason = params.get("FailReason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveAssetImageRegistryRegistryDetailRequest(AbstractModel):
    r"""RemoveAssetImageRegistryRegistryDetail request structure.

    """

    def __init__(self):
        r"""
        :param _RegistryId: Unique repository ID
        :type RegistryId: int
        """
        self._RegistryId = None

    @property
    def RegistryId(self):
        r"""Unique repository ID
        :rtype: int
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId


    def _deserialize(self, params):
        self._RegistryId = params.get("RegistryId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RemoveAssetImageRegistryRegistryDetailResponse(AbstractModel):
    r"""RemoveAssetImageRegistryRegistryDetail response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RenewImageAuthorizeStateRequest(AbstractModel):
    r"""RenewImageAuthorizeState request structure.

    """

    def __init__(self):
        r"""
        :param _AllImages: Whether all images are unlicensed
        :type AllImages: bool
        :param _ImageIds: Image IDs
        :type ImageIds: list of str
        """
        self._AllImages = None
        self._ImageIds = None

    @property
    def AllImages(self):
        r"""Whether all images are unlicensed
        :rtype: bool
        """
        return self._AllImages

    @AllImages.setter
    def AllImages(self, AllImages):
        self._AllImages = AllImages

    @property
    def ImageIds(self):
        r"""Image IDs
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds


    def _deserialize(self, params):
        self._AllImages = params.get("AllImages")
        self._ImageIds = params.get("ImageIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RenewImageAuthorizeStateResponse(AbstractModel):
    r"""RenewImageAuthorizeState response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ResetSecLogTopicConfigRequest(AbstractModel):
    r"""ResetSecLogTopicConfig request structure.

    """

    def __init__(self):
        r"""
        :param _ConfigType: Configuration type. Valid values: `ckafka`, `cls`.
        :type ConfigType: str
        :param _LogType: Log type
        :type LogType: str
        """
        self._ConfigType = None
        self._LogType = None

    @property
    def ConfigType(self):
        r"""Configuration type. Valid values: `ckafka`, `cls`.
        :rtype: str
        """
        return self._ConfigType

    @ConfigType.setter
    def ConfigType(self, ConfigType):
        self._ConfigType = ConfigType

    @property
    def LogType(self):
        r"""Log type
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType


    def _deserialize(self, params):
        self._ConfigType = params.get("ConfigType")
        self._LogType = params.get("LogType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResetSecLogTopicConfigResponse(AbstractModel):
    r"""ResetSecLogTopicConfig response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ReverseShellEventDescription(AbstractModel):
    r"""Description of the container reverse shell event at runtime

    """

    def __init__(self):
        r"""
        :param _Description: Description
        :type Description: str
        :param _Solution: Solution
        :type Solution: str
        :param _Remark: Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        :param _DstAddress: Destination address
        :type DstAddress: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        """
        self._Description = None
        self._Solution = None
        self._Remark = None
        self._DstAddress = None
        self._OperationTime = None

    @property
    def Description(self):
        r"""Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Solution(self):
        r"""Solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Remark(self):
        r"""Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def DstAddress(self):
        r"""Destination address
        :rtype: str
        """
        return self._DstAddress

    @DstAddress.setter
    def DstAddress(self, DstAddress):
        self._DstAddress = DstAddress

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Solution = params.get("Solution")
        self._Remark = params.get("Remark")
        self._DstAddress = params.get("DstAddress")
        self._OperationTime = params.get("OperationTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReverseShellEventInfo(AbstractModel):
    r"""Container runtime security - Information of the reverse shell

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _ImageId: Image ID
        :type ImageId: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _FoundTime: Generation time
        :type FoundTime: str
        :param _Solution: Event solution
        :type Solution: str
        :param _Description: Event description
        :type Description: str
        :param _Status: Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _EventId: Event ID
        :type EventId: str
        :param _Remark: Remarks
        :type Remark: str
        :param _PProcessName: Parent process name
        :type PProcessName: str
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _DstAddress: Destination address
        :type DstAddress: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        """
        self._ProcessName = None
        self._ProcessPath = None
        self._ImageId = None
        self._ContainerId = None
        self._ImageName = None
        self._ContainerName = None
        self._FoundTime = None
        self._Solution = None
        self._Description = None
        self._Status = None
        self._EventId = None
        self._Remark = None
        self._PProcessName = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._DstAddress = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def FoundTime(self):
        r"""Generation time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def Solution(self):
        r"""Event solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Description(self):
        r"""Event description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        r"""Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventId(self):
        r"""Event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def PProcessName(self):
        r"""Parent process name
        :rtype: str
        """
        return self._PProcessName

    @PProcessName.setter
    def PProcessName(self, PProcessName):
        self._PProcessName = PProcessName

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def DstAddress(self):
        r"""Destination address
        :rtype: str
        """
        return self._DstAddress

    @DstAddress.setter
    def DstAddress(self, DstAddress):
        self._DstAddress = DstAddress

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._ProcessPath = params.get("ProcessPath")
        self._ImageId = params.get("ImageId")
        self._ContainerId = params.get("ContainerId")
        self._ImageName = params.get("ImageName")
        self._ContainerName = params.get("ContainerName")
        self._FoundTime = params.get("FoundTime")
        self._Solution = params.get("Solution")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._EventId = params.get("EventId")
        self._Remark = params.get("Remark")
        self._PProcessName = params.get("PProcessName")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._DstAddress = params.get("DstAddress")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReverseShellWhiteListBaseInfo(AbstractModel):
    r"""Information of an allowed reverse shell

    """

    def __init__(self):
        r"""
        :param _Id: Allowed item ID
        :type Id: str
        :param _ImageCount: Number of images
        :type ImageCount: int
        :param _ProcessName: Connection process name
        :type ProcessName: str
        :param _DstIp: Destination address IP
        :type DstIp: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _DstPort: Target port
        :type DstPort: str
        :param _IsGlobal: Whether it is allowed globally. `true`: Yes.
        :type IsGlobal: bool
        :param _ImageIds: Array of image IDs. An empty array indicates all.
        :type ImageIds: list of str
        """
        self._Id = None
        self._ImageCount = None
        self._ProcessName = None
        self._DstIp = None
        self._CreateTime = None
        self._UpdateTime = None
        self._DstPort = None
        self._IsGlobal = None
        self._ImageIds = None

    @property
    def Id(self):
        r"""Allowed item ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ImageCount(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCount

    @ImageCount.setter
    def ImageCount(self, ImageCount):
        self._ImageCount = ImageCount

    @property
    def ProcessName(self):
        r"""Connection process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def DstIp(self):
        r"""Destination address IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DstPort(self):
        r"""Target port
        :rtype: str
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def IsGlobal(self):
        r"""Whether it is allowed globally. `true`: Yes.
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def ImageIds(self):
        r"""Array of image IDs. An empty array indicates all.
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ImageCount = params.get("ImageCount")
        self._ProcessName = params.get("ProcessName")
        self._DstIp = params.get("DstIp")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._DstPort = params.get("DstPort")
        self._IsGlobal = params.get("IsGlobal")
        self._ImageIds = params.get("ImageIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReverseShellWhiteListInfo(AbstractModel):
    r"""Information of an allowed reverse shell

    """

    def __init__(self):
        r"""
        :param _DstIp: Target IP
        :type DstIp: str
        :param _DstPort: Target port
        :type DstPort: str
        :param _ProcessName: Target process
        :type ProcessName: str
        :param _ImageIds: Array of image IDs. An empty array indicates all.
        :type ImageIds: list of str
        :param _Id: Allowed item ID, which is empty if the item is newly created.
        :type Id: str
        """
        self._DstIp = None
        self._DstPort = None
        self._ProcessName = None
        self._ImageIds = None
        self._Id = None

    @property
    def DstIp(self):
        r"""Target IP
        :rtype: str
        """
        return self._DstIp

    @DstIp.setter
    def DstIp(self, DstIp):
        self._DstIp = DstIp

    @property
    def DstPort(self):
        r"""Target port
        :rtype: str
        """
        return self._DstPort

    @DstPort.setter
    def DstPort(self, DstPort):
        self._DstPort = DstPort

    @property
    def ProcessName(self):
        r"""Target process
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ImageIds(self):
        r"""Array of image IDs. An empty array indicates all.
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds

    @property
    def Id(self):
        r"""Allowed item ID, which is empty if the item is newly created.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._DstIp = params.get("DstIp")
        self._DstPort = params.get("DstPort")
        self._ProcessName = params.get("ProcessName")
        self._ImageIds = params.get("ImageIds")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskSyscallEventDescription(AbstractModel):
    r"""Description of the high-risk container syscall event at runtime

    """

    def __init__(self):
        r"""
        :param _Description: Description
        :type Description: str
        :param _Solution: Solution
        :type Solution: str
        :param _Remark: Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :type Remark: str
        :param _SyscallName: Syscall name
        :type SyscallName: str
        :param _OperationTime: Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :type OperationTime: str
        """
        self._Description = None
        self._Solution = None
        self._Remark = None
        self._SyscallName = None
        self._OperationTime = None

    @property
    def Description(self):
        r"""Description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Solution(self):
        r"""Solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Remark(self):
        r"""Event remarks
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def SyscallName(self):
        r"""Syscall name
        :rtype: str
        """
        return self._SyscallName

    @SyscallName.setter
    def SyscallName(self, SyscallName):
        self._SyscallName = SyscallName

    @property
    def OperationTime(self):
        r"""Last processing time of the event
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._OperationTime

    @OperationTime.setter
    def OperationTime(self, OperationTime):
        self._OperationTime = OperationTime


    def _deserialize(self, params):
        self._Description = params.get("Description")
        self._Solution = params.get("Solution")
        self._Remark = params.get("Remark")
        self._SyscallName = params.get("SyscallName")
        self._OperationTime = params.get("OperationTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskSyscallEventInfo(AbstractModel):
    r"""Container runtime security - Information of the high-risk syscall

    """

    def __init__(self):
        r"""
        :param _ProcessName: Process name
        :type ProcessName: str
        :param _ProcessPath: Process path
        :type ProcessPath: str
        :param _ImageId: Image ID
        :type ImageId: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _FoundTime: Generation time
        :type FoundTime: str
        :param _Solution: Event solution
        :type Solution: str
        :param _Description: Event description
        :type Description: str
        :param _SyscallName: Syscall name
        :type SyscallName: str
        :param _Status: Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_ADD_WHITE`: Allowed.
        :type Status: str
        :param _EventId: Event ID
        :type EventId: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _PodName: Pod (instance) name
        :type PodName: str
        :param _Remark: Remarks
        :type Remark: str
        :param _RuleExist: Whether the system monitoring rule name exists
        :type RuleExist: bool
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _NodeUniqueID: Unique node ID
        :type NodeUniqueID: str
        :param _PublicIP: Node public IP
        :type PublicIP: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _HostID: uuid
        :type HostID: str
        :param _HostIP: Private IP of the node
        :type HostIP: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._ProcessName = None
        self._ProcessPath = None
        self._ImageId = None
        self._ContainerId = None
        self._ImageName = None
        self._ContainerName = None
        self._FoundTime = None
        self._Solution = None
        self._Description = None
        self._SyscallName = None
        self._Status = None
        self._EventId = None
        self._NodeName = None
        self._PodName = None
        self._Remark = None
        self._RuleExist = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None
        self._NodeType = None
        self._ClusterID = None
        self._PodIP = None
        self._NodeUniqueID = None
        self._PublicIP = None
        self._NodeID = None
        self._HostID = None
        self._HostIP = None
        self._ClusterName = None

    @property
    def ProcessName(self):
        r"""Process name
        :rtype: str
        """
        return self._ProcessName

    @ProcessName.setter
    def ProcessName(self, ProcessName):
        self._ProcessName = ProcessName

    @property
    def ProcessPath(self):
        r"""Process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def FoundTime(self):
        r"""Generation time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def Solution(self):
        r"""Event solution
        :rtype: str
        """
        return self._Solution

    @Solution.setter
    def Solution(self, Solution):
        self._Solution = Solution

    @property
    def Description(self):
        r"""Event description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def SyscallName(self):
        r"""Syscall name
        :rtype: str
        """
        return self._SyscallName

    @SyscallName.setter
    def SyscallName(self, SyscallName):
        self._SyscallName = SyscallName

    @property
    def Status(self):
        r"""Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
    `EVENT_ADD_WHITE`: Allowed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventId(self):
        r"""Event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def PodName(self):
        r"""Pod (instance) name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Remark(self):
        r"""Remarks
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def RuleExist(self):
        r"""Whether the system monitoring rule name exists
        :rtype: bool
        """
        return self._RuleExist

    @RuleExist.setter
    def RuleExist(self, RuleExist):
        self._RuleExist = RuleExist

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def NodeUniqueID(self):
        r"""Unique node ID
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def PublicIP(self):
        r"""Node public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def HostID(self):
        r"""uuid
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Private IP of the node
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._ProcessName = params.get("ProcessName")
        self._ProcessPath = params.get("ProcessPath")
        self._ImageId = params.get("ImageId")
        self._ContainerId = params.get("ContainerId")
        self._ImageName = params.get("ImageName")
        self._ContainerName = params.get("ContainerName")
        self._FoundTime = params.get("FoundTime")
        self._Solution = params.get("Solution")
        self._Description = params.get("Description")
        self._SyscallName = params.get("SyscallName")
        self._Status = params.get("Status")
        self._EventId = params.get("EventId")
        self._NodeName = params.get("NodeName")
        self._PodName = params.get("PodName")
        self._Remark = params.get("Remark")
        self._RuleExist = params.get("RuleExist")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        self._NodeType = params.get("NodeType")
        self._ClusterID = params.get("ClusterID")
        self._PodIP = params.get("PodIP")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._PublicIP = params.get("PublicIP")
        self._NodeID = params.get("NodeID")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskSyscallWhiteListBaseInfo(AbstractModel):
    r"""Information of the allowlist of high-risk syscalls

    """

    def __init__(self):
        r"""
        :param _Id: Allowed item ID
        :type Id: str
        :param _ImageCount: Number of images
        :type ImageCount: int
        :param _ProcessPath: Connection process path
        :type ProcessPath: str
        :param _SyscallNames: List of syscall names
        :type SyscallNames: list of str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _IsGlobal: Whether it is allowed globally. `true`: Yes.
        :type IsGlobal: bool
        :param _ImageIds: Array of image IDs
        :type ImageIds: list of str
        """
        self._Id = None
        self._ImageCount = None
        self._ProcessPath = None
        self._SyscallNames = None
        self._CreateTime = None
        self._UpdateTime = None
        self._IsGlobal = None
        self._ImageIds = None

    @property
    def Id(self):
        r"""Allowed item ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ImageCount(self):
        r"""Number of images
        :rtype: int
        """
        return self._ImageCount

    @ImageCount.setter
    def ImageCount(self, ImageCount):
        self._ImageCount = ImageCount

    @property
    def ProcessPath(self):
        r"""Connection process path
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def SyscallNames(self):
        r"""List of syscall names
        :rtype: list of str
        """
        return self._SyscallNames

    @SyscallNames.setter
    def SyscallNames(self, SyscallNames):
        self._SyscallNames = SyscallNames

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def IsGlobal(self):
        r"""Whether it is allowed globally. `true`: Yes.
        :rtype: bool
        """
        return self._IsGlobal

    @IsGlobal.setter
    def IsGlobal(self, IsGlobal):
        self._IsGlobal = IsGlobal

    @property
    def ImageIds(self):
        r"""Array of image IDs
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ImageCount = params.get("ImageCount")
        self._ProcessPath = params.get("ProcessPath")
        self._SyscallNames = params.get("SyscallNames")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._IsGlobal = params.get("IsGlobal")
        self._ImageIds = params.get("ImageIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RiskSyscallWhiteListInfo(AbstractModel):
    r"""Information of the allowlist of high-risk syscalls

    """

    def __init__(self):
        r"""
        :param _ImageIds: Array of image IDs. An empty array indicates all.
        :type ImageIds: list of str
        :param _SyscallNames: Syscall name. The `DescribeRiskSyscallNames` API can be called to get the list of enumerated values.
        :type SyscallNames: list of str
        :param _ProcessPath: Target process
        :type ProcessPath: str
        :param _Id: Allowed item ID, which is empty if the item is newly created.
        :type Id: str
        """
        self._ImageIds = None
        self._SyscallNames = None
        self._ProcessPath = None
        self._Id = None

    @property
    def ImageIds(self):
        r"""Array of image IDs. An empty array indicates all.
        :rtype: list of str
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds

    @property
    def SyscallNames(self):
        r"""Syscall name. The `DescribeRiskSyscallNames` API can be called to get the list of enumerated values.
        :rtype: list of str
        """
        return self._SyscallNames

    @SyscallNames.setter
    def SyscallNames(self, SyscallNames):
        self._SyscallNames = SyscallNames

    @property
    def ProcessPath(self):
        r"""Target process
        :rtype: str
        """
        return self._ProcessPath

    @ProcessPath.setter
    def ProcessPath(self, ProcessPath):
        self._ProcessPath = ProcessPath

    @property
    def Id(self):
        r"""Allowed item ID, which is empty if the item is newly created.
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._ImageIds = params.get("ImageIds")
        self._SyscallNames = params.get("SyscallNames")
        self._ProcessPath = params.get("ProcessPath")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RuleBaseInfo(AbstractModel):
    r"""Runtime security - Basic policy information

    """

    def __init__(self):
        r"""
        :param _IsDefault: Valid values: `true` (default policy); `false` (custom policy).
        :type IsDefault: bool
        :param _EffectImageCount: Number of associated images
        :type EffectImageCount: int
        :param _RuleId: Policy ID
        :type RuleId: str
        :param _UpdateTime: Policy update time, which can be empty.
Note: This field may return null, indicating that no valid values can be obtained.
        :type UpdateTime: str
        :param _RuleName: Policy name
        :type RuleName: str
        :param _EditUserName: Name of the editing user
        :type EditUserName: str
        :param _IsEnable: Valid values: `true` (enable the policy); `false` (disable the policy).
        :type IsEnable: bool
        """
        self._IsDefault = None
        self._EffectImageCount = None
        self._RuleId = None
        self._UpdateTime = None
        self._RuleName = None
        self._EditUserName = None
        self._IsEnable = None

    @property
    def IsDefault(self):
        r"""Valid values: `true` (default policy); `false` (custom policy).
        :rtype: bool
        """
        return self._IsDefault

    @IsDefault.setter
    def IsDefault(self, IsDefault):
        self._IsDefault = IsDefault

    @property
    def EffectImageCount(self):
        r"""Number of associated images
        :rtype: int
        """
        return self._EffectImageCount

    @EffectImageCount.setter
    def EffectImageCount(self, EffectImageCount):
        self._EffectImageCount = EffectImageCount

    @property
    def RuleId(self):
        r"""Policy ID
        :rtype: str
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId

    @property
    def UpdateTime(self):
        r"""Policy update time, which can be empty.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def RuleName(self):
        r"""Policy name
        :rtype: str
        """
        return self._RuleName

    @RuleName.setter
    def RuleName(self, RuleName):
        self._RuleName = RuleName

    @property
    def EditUserName(self):
        r"""Name of the editing user
        :rtype: str
        """
        return self._EditUserName

    @EditUserName.setter
    def EditUserName(self, EditUserName):
        self._EditUserName = EditUserName

    @property
    def IsEnable(self):
        r"""Valid values: `true` (enable the policy); `false` (disable the policy).
        :rtype: bool
        """
        return self._IsEnable

    @IsEnable.setter
    def IsEnable(self, IsEnable):
        self._IsEnable = IsEnable


    def _deserialize(self, params):
        self._IsDefault = params.get("IsDefault")
        self._EffectImageCount = params.get("EffectImageCount")
        self._RuleId = params.get("RuleId")
        self._UpdateTime = params.get("UpdateTime")
        self._RuleName = params.get("RuleName")
        self._EditUserName = params.get("EditUserName")
        self._IsEnable = params.get("IsEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunTimeEventBaseInfo(AbstractModel):
    r"""Runtime security - Basic event information

    """

    def __init__(self):
        r"""
        :param _EventId: Unique event ID
        :type EventId: str
        :param _FoundTime: Event discovery time
        :type FoundTime: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageId: Image ID
        :type ImageId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _Status: Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :type Status: str
        :param _EventName: Event name:
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
Malicious process startup
File tampering
        :type EventName: str
        :param _EventType: Event type
   `ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `ESCAPE_SYSCALL`: Syscall escape.
        :type EventType: str
        :param _EventCount: Number of events
        :type EventCount: int
        :param _LatestFoundTime: Last generation time
        :type LatestFoundTime: str
        :param _HostIP: Private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIP: str
        :param _ClientIP: Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClientIP: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _NodeType: Node type. Valid values: `NORMAL` (general node), `SUPER` (super node)
        :type NodeType: str
        :param _NodeSubNetID: Node subnet ID
        :type NodeSubNetID: str
        :param _NodeSubNetName: Node subnet name
        :type NodeSubNetName: str
        :param _NodeSubNetCIDR: Subnet IP range
        :type NodeSubNetCIDR: str
        :param _PodName: Pod name
        :type PodName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodStatus: Pod status
        :type PodStatus: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _NodeUniqueID: Unique node ID
        :type NodeUniqueID: str
        :param _HostID: uuid
        :type HostID: str
        :param _Namespace: 
        :type Namespace: str
        :param _WorkloadType: 
        :type WorkloadType: str
        """
        self._EventId = None
        self._FoundTime = None
        self._ContainerId = None
        self._ContainerName = None
        self._ImageId = None
        self._ImageName = None
        self._NodeName = None
        self._Status = None
        self._EventName = None
        self._EventType = None
        self._EventCount = None
        self._LatestFoundTime = None
        self._HostIP = None
        self._ClientIP = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._NodeID = None
        self._NodeType = None
        self._NodeSubNetID = None
        self._NodeSubNetName = None
        self._NodeSubNetCIDR = None
        self._PodName = None
        self._PodIP = None
        self._PodStatus = None
        self._ClusterID = None
        self._ClusterName = None
        self._NodeUniqueID = None
        self._HostID = None
        self._Namespace = None
        self._WorkloadType = None

    @property
    def EventId(self):
        r"""Unique event ID
        :rtype: str
        """
        return self._EventId

    @EventId.setter
    def EventId(self, EventId):
        self._EventId = EventId

    @property
    def FoundTime(self):
        r"""Event discovery time
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def Status(self):
        r"""Status. `EVENT_UNDEAL`: Pending.
    `EVENT_DEALED`: Processed.
    `EVENT_INGNORE`: Ignored.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventName(self):
        r"""Event name:
Host file access escape
Syscall escape
Mount namespace escape
Program privilege escalation escape
Privileged container startup escape
Sensitive path mount
Malicious process startup
File tampering
        :rtype: str
        """
        return self._EventName

    @EventName.setter
    def EventName(self, EventName):
        self._EventName = EventName

    @property
    def EventType(self):
        r"""Event type
   `ESCAPE_HOST_ACESS_FILE`: Host file access escape.
   `ESCAPE_MOUNT_NAMESPACE`: Mount namespace escape.
   `ESCAPE_PRIVILEDGE`: Program privilege escalation escape.
   `ESCAPE_PRIVILEDGE_CONTAINER_START`: Privileged container startup escape.
   `ESCAPE_MOUNT_SENSITIVE_PTAH`: Sensitive path mount.
   `ESCAPE_SYSCALL`: Syscall escape.
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def LatestFoundTime(self):
        r"""Last generation time
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def HostIP(self):
        r"""Private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ClientIP(self):
        r"""Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClientIP

    @ClientIP.setter
    def ClientIP(self, ClientIP):
        self._ClientIP = ClientIP

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
"NODE_DESTROYED"      // The node is terminated.
"CONTAINER_EXITED"    // The container exited.
"CONTAINER_DESTROYED" // The container was terminated.
"SHARED_HOST"         // The container shares the network with the server.
"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def NodeType(self):
        r"""Node type. Valid values: `NORMAL` (general node), `SUPER` (super node)
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeSubNetID(self):
        r"""Node subnet ID
        :rtype: str
        """
        return self._NodeSubNetID

    @NodeSubNetID.setter
    def NodeSubNetID(self, NodeSubNetID):
        self._NodeSubNetID = NodeSubNetID

    @property
    def NodeSubNetName(self):
        r"""Node subnet name
        :rtype: str
        """
        return self._NodeSubNetName

    @NodeSubNetName.setter
    def NodeSubNetName(self, NodeSubNetName):
        self._NodeSubNetName = NodeSubNetName

    @property
    def NodeSubNetCIDR(self):
        r"""Subnet IP range
        :rtype: str
        """
        return self._NodeSubNetCIDR

    @NodeSubNetCIDR.setter
    def NodeSubNetCIDR(self, NodeSubNetCIDR):
        self._NodeSubNetCIDR = NodeSubNetCIDR

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodStatus(self):
        r"""Pod status
        :rtype: str
        """
        return self._PodStatus

    @PodStatus.setter
    def PodStatus(self, PodStatus):
        self._PodStatus = PodStatus

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def NodeUniqueID(self):
        r"""Unique node ID
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def HostID(self):
        r"""uuid
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def Namespace(self):
        r"""
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def WorkloadType(self):
        r"""
        :rtype: str
        """
        return self._WorkloadType

    @WorkloadType.setter
    def WorkloadType(self, WorkloadType):
        self._WorkloadType = WorkloadType


    def _deserialize(self, params):
        self._EventId = params.get("EventId")
        self._FoundTime = params.get("FoundTime")
        self._ContainerId = params.get("ContainerId")
        self._ContainerName = params.get("ContainerName")
        self._ImageId = params.get("ImageId")
        self._ImageName = params.get("ImageName")
        self._NodeName = params.get("NodeName")
        self._Status = params.get("Status")
        self._EventName = params.get("EventName")
        self._EventType = params.get("EventType")
        self._EventCount = params.get("EventCount")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._HostIP = params.get("HostIP")
        self._ClientIP = params.get("ClientIP")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._NodeID = params.get("NodeID")
        self._NodeType = params.get("NodeType")
        self._NodeSubNetID = params.get("NodeSubNetID")
        self._NodeSubNetName = params.get("NodeSubNetName")
        self._NodeSubNetCIDR = params.get("NodeSubNetCIDR")
        self._PodName = params.get("PodName")
        self._PodIP = params.get("PodIP")
        self._PodStatus = params.get("PodStatus")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._HostID = params.get("HostID")
        self._Namespace = params.get("Namespace")
        self._WorkloadType = params.get("WorkloadType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunTimeFilters(AbstractModel):
    r"""TCSS
    Key-value pair filter for conditional filtering queries, such as filter ID, name, and status
    If more than one filter exists, the logical relationship between these filters is `AND`.
    If multiple values exist in one filter, the logical relationship between these values is `OR`.

    """

    def __init__(self):
        r"""
        :param _Name: Filter name
        :type Name: str
        :param _Values: One or more filter values
        :type Values: list of str
        :param _ExactMatch: Whether to use fuzzy query
        :type ExactMatch: bool
        """
        self._Name = None
        self._Values = None
        self._ExactMatch = None

    @property
    def Name(self):
        r"""Filter name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        r"""One or more filter values
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ExactMatch(self):
        r"""Whether to use fuzzy query
        :rtype: bool
        """
        return self._ExactMatch

    @ExactMatch.setter
    def ExactMatch(self, ExactMatch):
        self._ExactMatch = ExactMatch


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._ExactMatch = params.get("ExactMatch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunTimeRiskInfo(AbstractModel):
    r"""Runtime risk information

    """

    def __init__(self):
        r"""
        :param _Cnt: Number
        :type Cnt: int
        :param _Level: Risk level:
`CRITICAL`: Critical.
`HIGH`: High.
`MEDIUM`: Medium.
`LOW`: Low.
        :type Level: str
        """
        self._Cnt = None
        self._Level = None

    @property
    def Cnt(self):
        r"""Number
        :rtype: int
        """
        return self._Cnt

    @Cnt.setter
    def Cnt(self, Cnt):
        self._Cnt = Cnt

    @property
    def Level(self):
        r"""Risk level:
`CRITICAL`: Critical.
`HIGH`: High.
`MEDIUM`: Medium.
`LOW`: Low.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level


    def _deserialize(self, params):
        self._Cnt = params.get("Cnt")
        self._Level = params.get("Level")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunTimeTendencyInfo(AbstractModel):
    r"""Runtime trend information

    """

    def __init__(self):
        r"""
        :param _CurTime: The time of the day
        :type CurTime: str
        :param _Cnt: Current quantity
        :type Cnt: int
        """
        self._CurTime = None
        self._Cnt = None

    @property
    def CurTime(self):
        r"""The time of the day
        :rtype: str
        """
        return self._CurTime

    @CurTime.setter
    def CurTime(self, CurTime):
        self._CurTime = CurTime

    @property
    def Cnt(self):
        r"""Current quantity
        :rtype: int
        """
        return self._Cnt

    @Cnt.setter
    def Cnt(self, Cnt):
        self._Cnt = Cnt


    def _deserialize(self, params):
        self._CurTime = params.get("CurTime")
        self._Cnt = params.get("Cnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanComplianceAssetsByPolicyItemRequest(AbstractModel):
    r"""ScanComplianceAssetsByPolicyItem request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemId: ID of the specified check item
        :type CustomerPolicyItemId: int
        :param _CustomerAssetIdSet: List of IDs of customer assets to be scanned again
        :type CustomerAssetIdSet: list of int non-negative
        """
        self._CustomerPolicyItemId = None
        self._CustomerAssetIdSet = None

    @property
    def CustomerPolicyItemId(self):
        r"""ID of the specified check item
        :rtype: int
        """
        return self._CustomerPolicyItemId

    @CustomerPolicyItemId.setter
    def CustomerPolicyItemId(self, CustomerPolicyItemId):
        self._CustomerPolicyItemId = CustomerPolicyItemId

    @property
    def CustomerAssetIdSet(self):
        r"""List of IDs of customer assets to be scanned again
        :rtype: list of int non-negative
        """
        return self._CustomerAssetIdSet

    @CustomerAssetIdSet.setter
    def CustomerAssetIdSet(self, CustomerAssetIdSet):
        self._CustomerAssetIdSet = CustomerAssetIdSet


    def _deserialize(self, params):
        self._CustomerPolicyItemId = params.get("CustomerPolicyItemId")
        self._CustomerAssetIdSet = params.get("CustomerAssetIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanComplianceAssetsByPolicyItemResponse(AbstractModel):
    r"""ScanComplianceAssetsByPolicyItem response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of another check task
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of another check task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanComplianceAssetsRequest(AbstractModel):
    r"""ScanComplianceAssets request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerAssetIdSet: List of IDs of customer assets to be scanned again
        :type CustomerAssetIdSet: list of int non-negative
        """
        self._CustomerAssetIdSet = None

    @property
    def CustomerAssetIdSet(self):
        r"""List of IDs of customer assets to be scanned again
        :rtype: list of int non-negative
        """
        return self._CustomerAssetIdSet

    @CustomerAssetIdSet.setter
    def CustomerAssetIdSet(self, CustomerAssetIdSet):
        self._CustomerAssetIdSet = CustomerAssetIdSet


    def _deserialize(self, params):
        self._CustomerAssetIdSet = params.get("CustomerAssetIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanComplianceAssetsResponse(AbstractModel):
    r"""ScanComplianceAssets response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of another check task
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of another check task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanCompliancePolicyItemsRequest(AbstractModel):
    r"""ScanCompliancePolicyItems request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerPolicyItemIdSet: List of customer check items to be scanned again
        :type CustomerPolicyItemIdSet: list of int non-negative
        """
        self._CustomerPolicyItemIdSet = None

    @property
    def CustomerPolicyItemIdSet(self):
        r"""List of customer check items to be scanned again
        :rtype: list of int non-negative
        """
        return self._CustomerPolicyItemIdSet

    @CustomerPolicyItemIdSet.setter
    def CustomerPolicyItemIdSet(self, CustomerPolicyItemIdSet):
        self._CustomerPolicyItemIdSet = CustomerPolicyItemIdSet


    def _deserialize(self, params):
        self._CustomerPolicyItemIdSet = params.get("CustomerPolicyItemIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanCompliancePolicyItemsResponse(AbstractModel):
    r"""ScanCompliancePolicyItems response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of another check task
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of another check task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanComplianceScanFailedAssetsRequest(AbstractModel):
    r"""ScanComplianceScanFailedAssets request structure.

    """

    def __init__(self):
        r"""
        :param _CustomerAssetIdSet: List of IDs of customer assets to be scanned again
        :type CustomerAssetIdSet: list of int non-negative
        """
        self._CustomerAssetIdSet = None

    @property
    def CustomerAssetIdSet(self):
        r"""List of IDs of customer assets to be scanned again
        :rtype: list of int non-negative
        """
        return self._CustomerAssetIdSet

    @CustomerAssetIdSet.setter
    def CustomerAssetIdSet(self, CustomerAssetIdSet):
        self._CustomerAssetIdSet = CustomerAssetIdSet


    def _deserialize(self, params):
        self._CustomerAssetIdSet = params.get("CustomerAssetIdSet")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScanComplianceScanFailedAssetsResponse(AbstractModel):
    r"""ScanComplianceScanFailedAssets response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of another check task
        :type TaskId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of another check task
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ScanIgnoreVul(AbstractModel):
    r"""Scan for ignored vulnerabilities

    """

    def __init__(self):
        r"""
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _CVEID: Vulnerability CVE ID
        :type CVEID: str
        :param _PocID: POC ID
        :type PocID: str
        :param _RegistryImageCount: Number of ignored repository images
        :type RegistryImageCount: int
        :param _UpdateTime: Update time
        :type UpdateTime: str
        :param _IsIgnoreAll: Whether to ignore all images. Valid values: `0` (no); `1` (yes).
        :type IsIgnoreAll: int
        :param _LocalImageCount: Number of ignored local images
        :type LocalImageCount: int
        """
        self._VulName = None
        self._CVEID = None
        self._PocID = None
        self._RegistryImageCount = None
        self._UpdateTime = None
        self._IsIgnoreAll = None
        self._LocalImageCount = None

    @property
    def VulName(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def CVEID(self):
        r"""Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def RegistryImageCount(self):
        r"""Number of ignored repository images
        :rtype: int
        """
        return self._RegistryImageCount

    @RegistryImageCount.setter
    def RegistryImageCount(self, RegistryImageCount):
        self._RegistryImageCount = RegistryImageCount

    @property
    def UpdateTime(self):
        r"""Update time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def IsIgnoreAll(self):
        r"""Whether to ignore all images. Valid values: `0` (no); `1` (yes).
        :rtype: int
        """
        return self._IsIgnoreAll

    @IsIgnoreAll.setter
    def IsIgnoreAll(self, IsIgnoreAll):
        self._IsIgnoreAll = IsIgnoreAll

    @property
    def LocalImageCount(self):
        r"""Number of ignored local images
        :rtype: int
        """
        return self._LocalImageCount

    @LocalImageCount.setter
    def LocalImageCount(self, LocalImageCount):
        self._LocalImageCount = LocalImageCount


    def _deserialize(self, params):
        self._VulName = params.get("VulName")
        self._CVEID = params.get("CVEID")
        self._PocID = params.get("PocID")
        self._RegistryImageCount = params.get("RegistryImageCount")
        self._UpdateTime = params.get("UpdateTime")
        self._IsIgnoreAll = params.get("IsIgnoreAll")
        self._LocalImageCount = params.get("LocalImageCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SearchTemplate(AbstractModel):
    r"""Quick search template

    """

    def __init__(self):
        r"""
        :param _Name: Search name
        :type Name: str
        :param _LogType: Search index type
        :type LogType: str
        :param _Condition: Search statement
        :type Condition: str
        :param _TimeRange: Time range
        :type TimeRange: str
        :param _Query: Converted search statement content
        :type Query: str
        :param _Flag: Search method. Valid values: `standard` (search in the search box); `simple` (search by filter).
        :type Flag: str
        :param _DisplayData: Displayed data
        :type DisplayData: str
        :param _Id: Rule ID
        :type Id: int
        """
        self._Name = None
        self._LogType = None
        self._Condition = None
        self._TimeRange = None
        self._Query = None
        self._Flag = None
        self._DisplayData = None
        self._Id = None

    @property
    def Name(self):
        r"""Search name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def LogType(self):
        r"""Search index type
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def Condition(self):
        r"""Search statement
        :rtype: str
        """
        return self._Condition

    @Condition.setter
    def Condition(self, Condition):
        self._Condition = Condition

    @property
    def TimeRange(self):
        r"""Time range
        :rtype: str
        """
        return self._TimeRange

    @TimeRange.setter
    def TimeRange(self, TimeRange):
        self._TimeRange = TimeRange

    @property
    def Query(self):
        r"""Converted search statement content
        :rtype: str
        """
        return self._Query

    @Query.setter
    def Query(self, Query):
        self._Query = Query

    @property
    def Flag(self):
        r"""Search method. Valid values: `standard` (search in the search box); `simple` (search by filter).
        :rtype: str
        """
        return self._Flag

    @Flag.setter
    def Flag(self, Flag):
        self._Flag = Flag

    @property
    def DisplayData(self):
        r"""Displayed data
        :rtype: str
        """
        return self._DisplayData

    @DisplayData.setter
    def DisplayData(self, DisplayData):
        self._DisplayData = DisplayData

    @property
    def Id(self):
        r"""Rule ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._LogType = params.get("LogType")
        self._Condition = params.get("Condition")
        self._TimeRange = params.get("TimeRange")
        self._Query = params.get("Query")
        self._Flag = params.get("Flag")
        self._DisplayData = params.get("DisplayData")
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecLogAlertMsgInfo(AbstractModel):
    r"""Security log alert message

    """

    def __init__(self):
        r"""
        :param _MsgType: Alert type
        :type MsgType: str
        :param _MsgValue: Alert value
        :type MsgValue: str
        :param _State: Status. Valid values: `0` (disabled); `1` (enabled).
        :type State: bool
        """
        self._MsgType = None
        self._MsgValue = None
        self._State = None

    @property
    def MsgType(self):
        r"""Alert type
        :rtype: str
        """
        return self._MsgType

    @MsgType.setter
    def MsgType(self, MsgType):
        self._MsgType = MsgType

    @property
    def MsgValue(self):
        r"""Alert value
        :rtype: str
        """
        return self._MsgValue

    @MsgValue.setter
    def MsgValue(self, MsgValue):
        self._MsgValue = MsgValue

    @property
    def State(self):
        r"""Status. Valid values: `0` (disabled); `1` (enabled).
        :rtype: bool
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State


    def _deserialize(self, params):
        self._MsgType = params.get("MsgType")
        self._MsgValue = params.get("MsgValue")
        self._State = params.get("State")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecLogDeliveryClsSettingInfo(AbstractModel):
    r"""Security log - Settings of delivery to CLS

    """

    def __init__(self):
        r"""
        :param _LogType: Log type
        :type LogType: str
        :param _State: Delivery status. Valid values: `true` (enabled); `false` (disabled).
        :type State: bool
        :param _Region: Region
        :type Region: str
        :param _LogSet: Logset
        :type LogSet: str
        :param _TopicID: Topic ID
        :type TopicID: str
        :param _LogSetName: Logset name
Note: This field may return null, indicating that no valid values can be obtained.
        :type LogSetName: str
        :param _TopicName: Topic name
Note: This field may return null, indicating that no valid values can be obtained.
        :type TopicName: str
        """
        self._LogType = None
        self._State = None
        self._Region = None
        self._LogSet = None
        self._TopicID = None
        self._LogSetName = None
        self._TopicName = None

    @property
    def LogType(self):
        r"""Log type
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def State(self):
        r"""Delivery status. Valid values: `true` (enabled); `false` (disabled).
        :rtype: bool
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def Region(self):
        r"""Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def LogSet(self):
        r"""Logset
        :rtype: str
        """
        return self._LogSet

    @LogSet.setter
    def LogSet(self, LogSet):
        self._LogSet = LogSet

    @property
    def TopicID(self):
        r"""Topic ID
        :rtype: str
        """
        return self._TopicID

    @TopicID.setter
    def TopicID(self, TopicID):
        self._TopicID = TopicID

    @property
    def LogSetName(self):
        r"""Logset name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LogSetName

    @LogSetName.setter
    def LogSetName(self, LogSetName):
        self._LogSetName = LogSetName

    @property
    def TopicName(self):
        r"""Topic name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName


    def _deserialize(self, params):
        self._LogType = params.get("LogType")
        self._State = params.get("State")
        self._Region = params.get("Region")
        self._LogSet = params.get("LogSet")
        self._TopicID = params.get("TopicID")
        self._LogSetName = params.get("LogSetName")
        self._TopicName = params.get("TopicName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecLogDeliveryKafkaSettingInfo(AbstractModel):
    r"""Settings of security log delivery to Kafka

    """

    def __init__(self):
        r"""
        :param _LogType: Log type
        :type LogType: str
        :param _TopicID: Topic ID
        :type TopicID: str
        :param _TopicName: Topic name
Note: This field may return null, indicating that no valid values can be obtained.
        :type TopicName: str
        :param _State: Delivery status. Valid values: `false` (disabled); `true` (enabled).
        :type State: bool
        """
        self._LogType = None
        self._TopicID = None
        self._TopicName = None
        self._State = None

    @property
    def LogType(self):
        r"""Log type
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType

    @property
    def TopicID(self):
        r"""Topic ID
        :rtype: str
        """
        return self._TopicID

    @TopicID.setter
    def TopicID(self, TopicID):
        self._TopicID = TopicID

    @property
    def TopicName(self):
        r"""Topic name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._TopicName

    @TopicName.setter
    def TopicName(self, TopicName):
        self._TopicName = TopicName

    @property
    def State(self):
        r"""Delivery status. Valid values: `false` (disabled); `true` (enabled).
        :rtype: bool
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State


    def _deserialize(self, params):
        self._LogType = params.get("LogType")
        self._TopicID = params.get("TopicID")
        self._TopicName = params.get("TopicName")
        self._State = params.get("State")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecLogJoinInfo(AbstractModel):
    r"""Security log access details

    """

    def __init__(self):
        r"""
        :param _Count: Number of connected general nodes
        :type Count: int
        :param _SuperNodeCount: Number of connected super nodes
        :type SuperNodeCount: int
        :param _IsJoined: Whether it is accessed. Valid values: `true` (accessed); `false` (not accessed).
        :type IsJoined: bool
        :param _LogType: Log type (
Container bash: "container_bash"
Container startup: "container_launch"
K8s API: "k8s_api"
)
        :type LogType: str
        """
        self._Count = None
        self._SuperNodeCount = None
        self._IsJoined = None
        self._LogType = None

    @property
    def Count(self):
        r"""Number of connected general nodes
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def SuperNodeCount(self):
        r"""Number of connected super nodes
        :rtype: int
        """
        return self._SuperNodeCount

    @SuperNodeCount.setter
    def SuperNodeCount(self, SuperNodeCount):
        self._SuperNodeCount = SuperNodeCount

    @property
    def IsJoined(self):
        r"""Whether it is accessed. Valid values: `true` (accessed); `false` (not accessed).
        :rtype: bool
        """
        return self._IsJoined

    @IsJoined.setter
    def IsJoined(self, IsJoined):
        self._IsJoined = IsJoined

    @property
    def LogType(self):
        r"""Log type (
Container bash: "container_bash"
Container startup: "container_launch"
K8s API: "k8s_api"
)
        :rtype: str
        """
        return self._LogType

    @LogType.setter
    def LogType(self, LogType):
        self._LogType = LogType


    def _deserialize(self, params):
        self._Count = params.get("Count")
        self._SuperNodeCount = params.get("SuperNodeCount")
        self._IsJoined = params.get("IsJoined")
        self._LogType = params.get("LogType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecLogJoinObjectInfo(AbstractModel):
    r"""Details of the accessed security log object

    """

    def __init__(self):
        r"""
        :param _HostID: Server ID
        :type HostID: str
        :param _HostName: Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostName: str
        :param _HostIP: Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIP: str
        :param _HostStatus: Server status
        :type HostStatus: str
        :param _ClusterID: Cluster ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClusterID: str
        :param _ClusterName: Cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClusterName: str
        :param _PublicIP: Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type PublicIP: str
        :param _JoinState: Access status. Valid values: `true` (accessed); `false` (not accessed).
        :type JoinState: bool
        :param _ClusterVersion: Cluster version
Note: This field may return null, indicating that no valid values can be obtained.
        :type ClusterVersion: str
        :param _ClusterMainAddress: Master node address of the cluster
        :type ClusterMainAddress: str
        """
        self._HostID = None
        self._HostName = None
        self._HostIP = None
        self._HostStatus = None
        self._ClusterID = None
        self._ClusterName = None
        self._PublicIP = None
        self._JoinState = None
        self._ClusterVersion = None
        self._ClusterMainAddress = None

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostName(self):
        r"""Server name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIP(self):
        r"""Server IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def HostStatus(self):
        r"""Server status
        :rtype: str
        """
        return self._HostStatus

    @HostStatus.setter
    def HostStatus(self, HostStatus):
        self._HostStatus = HostStatus

    @property
    def ClusterID(self):
        r"""Cluster ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def PublicIP(self):
        r"""Public IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def JoinState(self):
        r"""Access status. Valid values: `true` (accessed); `false` (not accessed).
        :rtype: bool
        """
        return self._JoinState

    @JoinState.setter
    def JoinState(self, JoinState):
        self._JoinState = JoinState

    @property
    def ClusterVersion(self):
        r"""Cluster version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ClusterVersion

    @ClusterVersion.setter
    def ClusterVersion(self, ClusterVersion):
        self._ClusterVersion = ClusterVersion

    @property
    def ClusterMainAddress(self):
        r"""Master node address of the cluster
        :rtype: str
        """
        return self._ClusterMainAddress

    @ClusterMainAddress.setter
    def ClusterMainAddress(self, ClusterMainAddress):
        self._ClusterMainAddress = ClusterMainAddress


    def _deserialize(self, params):
        self._HostID = params.get("HostID")
        self._HostName = params.get("HostName")
        self._HostIP = params.get("HostIP")
        self._HostStatus = params.get("HostStatus")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._PublicIP = params.get("PublicIP")
        self._JoinState = params.get("JoinState")
        self._ClusterVersion = params.get("ClusterVersion")
        self._ClusterMainAddress = params.get("ClusterMainAddress")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SecTendencyEventInfo(AbstractModel):
    r"""Trend information of security events at runtime

    """

    def __init__(self):
        r"""
        :param _EventSet: List of trends
        :type EventSet: list of RunTimeTendencyInfo
        :param _EventType: Event type:
ET_ESCAPE: Container escape
ET_REVERSE_SHELL: Reverse shell
ET_RISK_SYSCALL: High-risk system calls
ET_ABNORMAL_PROCESS: Abnormal process
ET_ACCESS_CONTROL: File tampering
ET_VIRUS: Trojan event
ET_MALICIOUS_CONNECTION: Malicious connection event
        :type EventType: str
        """
        self._EventSet = None
        self._EventType = None

    @property
    def EventSet(self):
        r"""List of trends
        :rtype: list of RunTimeTendencyInfo
        """
        return self._EventSet

    @EventSet.setter
    def EventSet(self, EventSet):
        self._EventSet = EventSet

    @property
    def EventType(self):
        r"""Event type:
ET_ESCAPE: Container escape
ET_REVERSE_SHELL: Reverse shell
ET_RISK_SYSCALL: High-risk system calls
ET_ABNORMAL_PROCESS: Abnormal process
ET_ACCESS_CONTROL: File tampering
ET_VIRUS: Trojan event
ET_MALICIOUS_CONNECTION: Malicious connection event
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType


    def _deserialize(self, params):
        if params.get("EventSet") is not None:
            self._EventSet = []
            for item in params.get("EventSet"):
                obj = RunTimeTendencyInfo()
                obj._deserialize(item)
                self._EventSet.append(obj)
        self._EventType = params.get("EventType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceInfo(AbstractModel):
    r"""Information list of TCSS

    """

    def __init__(self):
        r"""
        :param _ServiceID: Service ID
        :type ServiceID: str
        :param _HostID: Server ID
        :type HostID: str
        :param _HostIP: Server IP
        :type HostIP: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _Type: Service name, such as `nginx` and `redis`
        :type Type: str
        :param _Version: Version
        :type Version: str
        :param _RunAs: Account
        :type RunAs: str
        :param _Listen: Listened port
        :type Listen: list of str
        :param _Config: Configuration
        :type Config: str
        :param _ProcessCnt: Number of associated processes
        :type ProcessCnt: int
        :param _AccessLog: Access log
        :type AccessLog: str
        :param _ErrorLog: Error log
        :type ErrorLog: str
        :param _DataPath: Data directory
        :type DataPath: str
        :param _WebRoot: Web directory
        :type WebRoot: str
        :param _Pids: ID of the associated process
        :type Pids: list of int non-negative
        :param _MainType: Service type. Valid values: `app`, `web`, `db`.
        :type MainType: str
        :param _Exe: Execution file
        :type Exe: str
        :param _Parameter: Service command line parameter
        :type Parameter: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _HostName: Server name
        :type HostName: str
        :param _PublicIp: Public IP
        :type PublicIp: str
        :param _NodeID: Node ID
        :type NodeID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod name
        :type PodName: str
        :param _NodeType: Node type.
        :type NodeType: str
        :param _NodeUniqueID: UID of the super node
        :type NodeUniqueID: str
        """
        self._ServiceID = None
        self._HostID = None
        self._HostIP = None
        self._ContainerName = None
        self._Type = None
        self._Version = None
        self._RunAs = None
        self._Listen = None
        self._Config = None
        self._ProcessCnt = None
        self._AccessLog = None
        self._ErrorLog = None
        self._DataPath = None
        self._WebRoot = None
        self._Pids = None
        self._MainType = None
        self._Exe = None
        self._Parameter = None
        self._ContainerId = None
        self._HostName = None
        self._PublicIp = None
        self._NodeID = None
        self._PodIP = None
        self._PodName = None
        self._NodeType = None
        self._NodeUniqueID = None

    @property
    def ServiceID(self):
        r"""Service ID
        :rtype: str
        """
        return self._ServiceID

    @ServiceID.setter
    def ServiceID(self, ServiceID):
        self._ServiceID = ServiceID

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def HostIP(self):
        r"""Server IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def Type(self):
        r"""Service name, such as `nginx` and `redis`
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Version(self):
        r"""Version
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def RunAs(self):
        r"""Account
        :rtype: str
        """
        return self._RunAs

    @RunAs.setter
    def RunAs(self, RunAs):
        self._RunAs = RunAs

    @property
    def Listen(self):
        r"""Listened port
        :rtype: list of str
        """
        return self._Listen

    @Listen.setter
    def Listen(self, Listen):
        self._Listen = Listen

    @property
    def Config(self):
        r"""Configuration
        :rtype: str
        """
        return self._Config

    @Config.setter
    def Config(self, Config):
        self._Config = Config

    @property
    def ProcessCnt(self):
        r"""Number of associated processes
        :rtype: int
        """
        return self._ProcessCnt

    @ProcessCnt.setter
    def ProcessCnt(self, ProcessCnt):
        self._ProcessCnt = ProcessCnt

    @property
    def AccessLog(self):
        r"""Access log
        :rtype: str
        """
        return self._AccessLog

    @AccessLog.setter
    def AccessLog(self, AccessLog):
        self._AccessLog = AccessLog

    @property
    def ErrorLog(self):
        r"""Error log
        :rtype: str
        """
        return self._ErrorLog

    @ErrorLog.setter
    def ErrorLog(self, ErrorLog):
        self._ErrorLog = ErrorLog

    @property
    def DataPath(self):
        r"""Data directory
        :rtype: str
        """
        return self._DataPath

    @DataPath.setter
    def DataPath(self, DataPath):
        self._DataPath = DataPath

    @property
    def WebRoot(self):
        r"""Web directory
        :rtype: str
        """
        return self._WebRoot

    @WebRoot.setter
    def WebRoot(self, WebRoot):
        self._WebRoot = WebRoot

    @property
    def Pids(self):
        r"""ID of the associated process
        :rtype: list of int non-negative
        """
        return self._Pids

    @Pids.setter
    def Pids(self, Pids):
        self._Pids = Pids

    @property
    def MainType(self):
        r"""Service type. Valid values: `app`, `web`, `db`.
        :rtype: str
        """
        return self._MainType

    @MainType.setter
    def MainType(self, MainType):
        self._MainType = MainType

    @property
    def Exe(self):
        r"""Execution file
        :rtype: str
        """
        return self._Exe

    @Exe.setter
    def Exe(self, Exe):
        self._Exe = Exe

    @property
    def Parameter(self):
        r"""Service command line parameter
        :rtype: str
        """
        return self._Parameter

    @Parameter.setter
    def Parameter(self, Parameter):
        self._Parameter = Parameter

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def PublicIp(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIp

    @PublicIp.setter
    def PublicIp(self, PublicIp):
        self._PublicIp = PublicIp

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def NodeType(self):
        r"""Node type.
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of the super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID


    def _deserialize(self, params):
        self._ServiceID = params.get("ServiceID")
        self._HostID = params.get("HostID")
        self._HostIP = params.get("HostIP")
        self._ContainerName = params.get("ContainerName")
        self._Type = params.get("Type")
        self._Version = params.get("Version")
        self._RunAs = params.get("RunAs")
        self._Listen = params.get("Listen")
        self._Config = params.get("Config")
        self._ProcessCnt = params.get("ProcessCnt")
        self._AccessLog = params.get("AccessLog")
        self._ErrorLog = params.get("ErrorLog")
        self._DataPath = params.get("DataPath")
        self._WebRoot = params.get("WebRoot")
        self._Pids = params.get("Pids")
        self._MainType = params.get("MainType")
        self._Exe = params.get("Exe")
        self._Parameter = params.get("Parameter")
        self._ContainerId = params.get("ContainerId")
        self._HostName = params.get("HostName")
        self._PublicIp = params.get("PublicIp")
        self._NodeID = params.get("NodeID")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetCheckModeRequest(AbstractModel):
    r"""SetCheckMode request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterIds: List of cluster IDs to be set
        :type ClusterIds: list of str
        :param _ClusterCheckMode: Cluster check mode. Valid values: `Cluster_Normal` (normal mode); `Cluster_Actived` (proactive mode); `Cluster_Unset` (not set).
        :type ClusterCheckMode: str
        :param _ClusterAutoCheck: Valid values: `0` (not set); `1` (on); `2` (off).
        :type ClusterAutoCheck: int
        """
        self._ClusterIds = None
        self._ClusterCheckMode = None
        self._ClusterAutoCheck = None

    @property
    def ClusterIds(self):
        r"""List of cluster IDs to be set
        :rtype: list of str
        """
        return self._ClusterIds

    @ClusterIds.setter
    def ClusterIds(self, ClusterIds):
        self._ClusterIds = ClusterIds

    @property
    def ClusterCheckMode(self):
        r"""Cluster check mode. Valid values: `Cluster_Normal` (normal mode); `Cluster_Actived` (proactive mode); `Cluster_Unset` (not set).
        :rtype: str
        """
        return self._ClusterCheckMode

    @ClusterCheckMode.setter
    def ClusterCheckMode(self, ClusterCheckMode):
        self._ClusterCheckMode = ClusterCheckMode

    @property
    def ClusterAutoCheck(self):
        r"""Valid values: `0` (not set); `1` (on); `2` (off).
        :rtype: int
        """
        return self._ClusterAutoCheck

    @ClusterAutoCheck.setter
    def ClusterAutoCheck(self, ClusterAutoCheck):
        self._ClusterAutoCheck = ClusterAutoCheck


    def _deserialize(self, params):
        self._ClusterIds = params.get("ClusterIds")
        self._ClusterCheckMode = params.get("ClusterCheckMode")
        self._ClusterAutoCheck = params.get("ClusterAutoCheck")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetCheckModeResponse(AbstractModel):
    r"""SetCheckMode response structure.

    """

    def __init__(self):
        r"""
        :param _SetCheckResult: Valid values: `Succ` (set successfully); `Failed` (failed to set).
        :type SetCheckResult: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._SetCheckResult = None
        self._RequestId = None

    @property
    def SetCheckResult(self):
        r"""Valid values: `Succ` (set successfully); `Failed` (failed to set).
        :rtype: str
        """
        return self._SetCheckResult

    @SetCheckResult.setter
    def SetCheckResult(self, SetCheckResult):
        self._SetCheckResult = SetCheckResult

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SetCheckResult = params.get("SetCheckResult")
        self._RequestId = params.get("RequestId")


class SoftQuotaDayInfo(AbstractModel):
    r"""Pay-as-you-go billing details

    """

    def __init__(self):
        r"""
        :param _PayTime: Deduction time
        :type PayTime: str
        :param _CoresCnt: Number of billed cores
        :type CoresCnt: int
        """
        self._PayTime = None
        self._CoresCnt = None

    @property
    def PayTime(self):
        r"""Deduction time
        :rtype: str
        """
        return self._PayTime

    @PayTime.setter
    def PayTime(self, PayTime):
        self._PayTime = PayTime

    @property
    def CoresCnt(self):
        r"""Number of billed cores
        :rtype: int
        """
        return self._CoresCnt

    @CoresCnt.setter
    def CoresCnt(self, CoresCnt):
        self._CoresCnt = CoresCnt


    def _deserialize(self, params):
        self._PayTime = params.get("PayTime")
        self._CoresCnt = params.get("CoresCnt")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopVirusScanTaskRequest(AbstractModel):
    r"""StopVirusScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: Task ID
        :type TaskId: str
        :param _ContainerIds: ID of the container to be stopped. If it is left empty, the entire task will be stopped.
        :type ContainerIds: list of str
        """
        self._TaskId = None
        self._ContainerIds = None

    @property
    def TaskId(self):
        r"""Task ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ContainerIds(self):
        r"""ID of the container to be stopped. If it is left empty, the entire task will be stopped.
        :rtype: list of str
        """
        return self._ContainerIds

    @ContainerIds.setter
    def ContainerIds(self, ContainerIds):
        self._ContainerIds = ContainerIds


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ContainerIds = params.get("ContainerIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopVirusScanTaskResponse(AbstractModel):
    r"""StopVirusScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopVulScanTaskRequest(AbstractModel):
    r"""StopVulScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _LocalTaskID: ID of the task to scan local images for vulnerabilities
        :type LocalTaskID: int
        :param _LocalImageIDs: Local image ID. If it is not specified, it indicates all.
        :type LocalImageIDs: list of str
        :param _RegistryImageIDs: Repository image ID. If it is not specified, it indicates all.
        :type RegistryImageIDs: list of int non-negative
        :param _RegistryTaskID: ID of the task to scan repository images for vulnerabilities
        :type RegistryTaskID: int
        """
        self._LocalTaskID = None
        self._LocalImageIDs = None
        self._RegistryImageIDs = None
        self._RegistryTaskID = None

    @property
    def LocalTaskID(self):
        r"""ID of the task to scan local images for vulnerabilities
        :rtype: int
        """
        return self._LocalTaskID

    @LocalTaskID.setter
    def LocalTaskID(self, LocalTaskID):
        self._LocalTaskID = LocalTaskID

    @property
    def LocalImageIDs(self):
        r"""Local image ID. If it is not specified, it indicates all.
        :rtype: list of str
        """
        return self._LocalImageIDs

    @LocalImageIDs.setter
    def LocalImageIDs(self, LocalImageIDs):
        self._LocalImageIDs = LocalImageIDs

    @property
    def RegistryImageIDs(self):
        r"""Repository image ID. If it is not specified, it indicates all.
        :rtype: list of int non-negative
        """
        return self._RegistryImageIDs

    @RegistryImageIDs.setter
    def RegistryImageIDs(self, RegistryImageIDs):
        self._RegistryImageIDs = RegistryImageIDs

    @property
    def RegistryTaskID(self):
        r"""ID of the task to scan repository images for vulnerabilities
        :rtype: int
        """
        return self._RegistryTaskID

    @RegistryTaskID.setter
    def RegistryTaskID(self, RegistryTaskID):
        self._RegistryTaskID = RegistryTaskID


    def _deserialize(self, params):
        self._LocalTaskID = params.get("LocalTaskID")
        self._LocalImageIDs = params.get("LocalImageIDs")
        self._RegistryImageIDs = params.get("RegistryImageIDs")
        self._RegistryTaskID = params.get("RegistryTaskID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopVulScanTaskResponse(AbstractModel):
    r"""StopVulScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SupportDefenceVul(AbstractModel):
    r"""Vulnerability that can be prevented

    """

    def __init__(self):
        r"""
        :param _PocID: POC ID
        :type PocID: str
        :param _Name: Vulnerability name
        :type Name: str
        :param _Tags: Vulnerability tag
        :type Tags: list of str
        :param _CVSSV3Score: Vulnerability CVSS
        :type CVSSV3Score: float
        :param _Level: Vulnerability severity
        :type Level: str
        :param _CVEID: Vulnerability CVE ID
        :type CVEID: str
        :param _SubmitTime: Vulnerability disclosure time
        :type SubmitTime: str
        """
        self._PocID = None
        self._Name = None
        self._Tags = None
        self._CVSSV3Score = None
        self._Level = None
        self._CVEID = None
        self._SubmitTime = None

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def Name(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Tags(self):
        r"""Vulnerability tag
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CVSSV3Score(self):
        r"""Vulnerability CVSS
        :rtype: float
        """
        return self._CVSSV3Score

    @CVSSV3Score.setter
    def CVSSV3Score(self, CVSSV3Score):
        self._CVSSV3Score = CVSSV3Score

    @property
    def Level(self):
        r"""Vulnerability severity
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CVEID(self):
        r"""Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def SubmitTime(self):
        r"""Vulnerability disclosure time
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime


    def _deserialize(self, params):
        self._PocID = params.get("PocID")
        self._Name = params.get("Name")
        self._Tags = params.get("Tags")
        self._CVSSV3Score = params.get("CVSSV3Score")
        self._Level = params.get("Level")
        self._CVEID = params.get("CVEID")
        self._SubmitTime = params.get("SubmitTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SwitchImageAutoAuthorizedRuleRequest(AbstractModel):
    r"""SwitchImageAutoAuthorizedRule request structure.

    """

    def __init__(self):
        r"""
        :param _IsEnabled: Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :type IsEnabled: int
        :param _RuleId: Rule ID
        :type RuleId: int
        """
        self._IsEnabled = None
        self._RuleId = None

    @property
    def IsEnabled(self):
        r"""Whether the rule takes effect. Valid values: `0` (no); `1` (yes).
        :rtype: int
        """
        return self._IsEnabled

    @IsEnabled.setter
    def IsEnabled(self, IsEnabled):
        self._IsEnabled = IsEnabled

    @property
    def RuleId(self):
        r"""Rule ID
        :rtype: int
        """
        return self._RuleId

    @RuleId.setter
    def RuleId(self, RuleId):
        self._RuleId = RuleId


    def _deserialize(self, params):
        self._IsEnabled = params.get("IsEnabled")
        self._RuleId = params.get("RuleId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SwitchImageAutoAuthorizedRuleResponse(AbstractModel):
    r"""SwitchImageAutoAuthorizedRule response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SyncAssetImageRegistryAssetRequest(AbstractModel):
    r"""SyncAssetImageRegistryAsset request structure.

    """

    def __init__(self):
        r"""
        :param _All: 
        :type All: bool
        :param _RegistryIds: 
        :type RegistryIds: list of int non-negative
        """
        self._All = None
        self._RegistryIds = None

    @property
    def All(self):
        r"""
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        self._All = All

    @property
    def RegistryIds(self):
        r"""
        :rtype: list of int non-negative
        """
        return self._RegistryIds

    @RegistryIds.setter
    def RegistryIds(self, RegistryIds):
        self._RegistryIds = RegistryIds


    def _deserialize(self, params):
        self._All = params.get("All")
        self._RegistryIds = params.get("RegistryIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SyncAssetImageRegistryAssetResponse(AbstractModel):
    r"""SyncAssetImageRegistryAsset response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class TagInfo(AbstractModel):
    r"""Host tag information

    """

    def __init__(self):
        r"""
        :param _TagKey: Tag key
        :type TagKey: str
        :param _TagValue: Tag value
        :type TagValue: str
        """
        self._TagKey = None
        self._TagValue = None

    @property
    def TagKey(self):
        r"""Tag key
        :rtype: str
        """
        return self._TagKey

    @TagKey.setter
    def TagKey(self, TagKey):
        self._TagKey = TagKey

    @property
    def TagValue(self):
        r"""Tag value
        :rtype: str
        """
        return self._TagValue

    @TagValue.setter
    def TagValue(self, TagValue):
        self._TagValue = TagValue


    def _deserialize(self, params):
        self._TagKey = params.get("TagKey")
        self._TagValue = params.get("TagValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UnauthorizedCoresTendency(AbstractModel):
    r"""Trend of unlicensed cores

    """

    def __init__(self):
        r"""
        :param _DateTime: Date
        :type DateTime: str
        :param _CoresCount: Number of unlicensed cores
        :type CoresCount: int
        """
        self._DateTime = None
        self._CoresCount = None

    @property
    def DateTime(self):
        r"""Date
        :rtype: str
        """
        return self._DateTime

    @DateTime.setter
    def DateTime(self, DateTime):
        self._DateTime = DateTime

    @property
    def CoresCount(self):
        r"""Number of unlicensed cores
        :rtype: int
        """
        return self._CoresCount

    @CoresCount.setter
    def CoresCount(self, CoresCount):
        self._CoresCount = CoresCount


    def _deserialize(self, params):
        self._DateTime = params.get("DateTime")
        self._CoresCount = params.get("CoresCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAndPublishNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""UpdateAndPublishNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Policy ID
        :type Id: int
        :param _FromPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type FromPolicyRule: int
        :param _ToPolicyRule: Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type ToPolicyRule: int
        :param _PodSelector: Pod selector
        :type PodSelector: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _Description: Policy description
        :type Description: str
        :param _CustomPolicy: Custom rule
        :type CustomPolicy: list of NetworkCustomPolicy
        """
        self._ClusterId = None
        self._Id = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._PodSelector = None
        self._Namespace = None
        self._Description = None
        self._CustomPolicy = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def FromPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def PodSelector(self):
        r"""Pod selector
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CustomPolicy(self):
        r"""Custom rule
        :rtype: list of NetworkCustomPolicy
        """
        return self._CustomPolicy

    @CustomPolicy.setter
    def CustomPolicy(self, CustomPolicy):
        self._CustomPolicy = CustomPolicy


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        self._PodSelector = params.get("PodSelector")
        self._Namespace = params.get("Namespace")
        self._Description = params.get("Description")
        if params.get("CustomPolicy") is not None:
            self._CustomPolicy = []
            for item in params.get("CustomPolicy"):
                obj = NetworkCustomPolicy()
                obj._deserialize(item)
                self._CustomPolicy.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAndPublishNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""UpdateAndPublishNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class UpdateAndPublishNetworkFirewallPolicyYamlDetailRequest(AbstractModel):
    r"""UpdateAndPublishNetworkFirewallPolicyYamlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Policy ID
        :type Id: int
        :param _Yaml: Base64-encoded NetworkPolicy YAML string
        :type Yaml: str
        :param _Description: Policy description
        :type Description: str
        """
        self._ClusterId = None
        self._Id = None
        self._Yaml = None
        self._Description = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Yaml(self):
        r"""Base64-encoded NetworkPolicy YAML string
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAndPublishNetworkFirewallPolicyYamlDetailResponse(AbstractModel):
    r"""UpdateAndPublishNetworkFirewallPolicyYamlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class UpdateAssetImageRegistryRegistryDetailRequest(AbstractModel):
    r"""UpdateAssetImageRegistryRegistryDetail request structure.

    """

    def __init__(self):
        r"""
        :param _Name: Repository name
        :type Name: str
        :param _Username: Username
        :type Username: str
        :param _Password: Password
        :type Password: str
        :param _Url: Repository URL
        :type Url: str
        :param _RegistryType: Repository type, which can be `harbor`.
        :type RegistryType: str
        :param _NetType: Network type, which can be `public` (public network).
        :type NetType: str
        :param _RegistryVersion: Repository version
        :type RegistryVersion: str
        :param _RegistryRegion: Region. Default value: `default`.
        :type RegistryRegion: str
        :param _SpeedLimit: Speed limit
        :type SpeedLimit: int
        :param _Insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :type Insecure: int
        """
        self._Name = None
        self._Username = None
        self._Password = None
        self._Url = None
        self._RegistryType = None
        self._NetType = None
        self._RegistryVersion = None
        self._RegistryRegion = None
        self._SpeedLimit = None
        self._Insecure = None

    @property
    def Name(self):
        r"""Repository name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Username(self):
        r"""Username
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Password(self):
        r"""Password
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password

    @property
    def Url(self):
        r"""Repository URL
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RegistryType(self):
        r"""Repository type, which can be `harbor`.
        :rtype: str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def NetType(self):
        r"""Network type, which can be `public` (public network).
        :rtype: str
        """
        return self._NetType

    @NetType.setter
    def NetType(self, NetType):
        self._NetType = NetType

    @property
    def RegistryVersion(self):
        r"""Repository version
        :rtype: str
        """
        return self._RegistryVersion

    @RegistryVersion.setter
    def RegistryVersion(self, RegistryVersion):
        self._RegistryVersion = RegistryVersion

    @property
    def RegistryRegion(self):
        r"""Region. Default value: `default`.
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def SpeedLimit(self):
        r"""Speed limit
        :rtype: int
        """
        return self._SpeedLimit

    @SpeedLimit.setter
    def SpeedLimit(self, SpeedLimit):
        self._SpeedLimit = SpeedLimit

    @property
    def Insecure(self):
        r"""Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :rtype: int
        """
        return self._Insecure

    @Insecure.setter
    def Insecure(self, Insecure):
        self._Insecure = Insecure


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Username = params.get("Username")
        self._Password = params.get("Password")
        self._Url = params.get("Url")
        self._RegistryType = params.get("RegistryType")
        self._NetType = params.get("NetType")
        self._RegistryVersion = params.get("RegistryVersion")
        self._RegistryRegion = params.get("RegistryRegion")
        self._SpeedLimit = params.get("SpeedLimit")
        self._Insecure = params.get("Insecure")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAssetImageRegistryRegistryDetailResponse(AbstractModel):
    r"""UpdateAssetImageRegistryRegistryDetail response structure.

    """

    def __init__(self):
        r"""
        :param _HealthCheckErr: Connection error message
Note: This field may return null, indicating that no valid values can be obtained.
        :type HealthCheckErr: str
        :param _NameRepeatErr: Name error message
Note: This field may return null, indicating that no valid values can be obtained.
        :type NameRepeatErr: str
        :param _RegistryId: Unique repository ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryId: int
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._HealthCheckErr = None
        self._NameRepeatErr = None
        self._RegistryId = None
        self._RequestId = None

    @property
    def HealthCheckErr(self):
        r"""Connection error message
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HealthCheckErr

    @HealthCheckErr.setter
    def HealthCheckErr(self, HealthCheckErr):
        self._HealthCheckErr = HealthCheckErr

    @property
    def NameRepeatErr(self):
        r"""Name error message
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._NameRepeatErr

    @NameRepeatErr.setter
    def NameRepeatErr(self, NameRepeatErr):
        self._NameRepeatErr = NameRepeatErr

    @property
    def RegistryId(self):
        r"""Unique repository ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HealthCheckErr = params.get("HealthCheckErr")
        self._NameRepeatErr = params.get("NameRepeatErr")
        self._RegistryId = params.get("RegistryId")
        self._RequestId = params.get("RequestId")


class UpdateImageRegistryTimingScanTaskRequest(AbstractModel):
    r"""UpdateImageRegistryTimingScanTask request structure.

    """

    def __init__(self):
        r"""
        :param _ScanPeriod: Scheduled scan cycle
        :type ScanPeriod: int
        :param _Enable: Scheduled scan switch
        :type Enable: bool
        :param _ScanTime: Scheduled scan time
        :type ScanTime: str
        :param _ScanType: Array of the scanned trojan types
        :type ScanType: list of str
        :param _Images: Scanned image
        :type Images: list of ImageInfo
        :param _All: Whether to scan all
        :type All: bool
        :param _Id: ID of the image to be scanned
        :type Id: list of int non-negative
        :param _Latest: Whether to scan for the latest version
        :type Latest: bool
        :param _ContainerRunning: 
        :type ContainerRunning: bool
        :param _ScanEndTime: 
        :type ScanEndTime: str
        :param _ScanScope: 
        :type ScanScope: int
        :param _RegistryType: 
        :type RegistryType: list of str
        :param _Namespace: 
        :type Namespace: list of str
        """
        self._ScanPeriod = None
        self._Enable = None
        self._ScanTime = None
        self._ScanType = None
        self._Images = None
        self._All = None
        self._Id = None
        self._Latest = None
        self._ContainerRunning = None
        self._ScanEndTime = None
        self._ScanScope = None
        self._RegistryType = None
        self._Namespace = None

    @property
    def ScanPeriod(self):
        r"""Scheduled scan cycle
        :rtype: int
        """
        return self._ScanPeriod

    @ScanPeriod.setter
    def ScanPeriod(self, ScanPeriod):
        self._ScanPeriod = ScanPeriod

    @property
    def Enable(self):
        r"""Scheduled scan switch
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def ScanTime(self):
        r"""Scheduled scan time
        :rtype: str
        """
        return self._ScanTime

    @ScanTime.setter
    def ScanTime(self, ScanTime):
        self._ScanTime = ScanTime

    @property
    def ScanType(self):
        r"""Array of the scanned trojan types
        :rtype: list of str
        """
        return self._ScanType

    @ScanType.setter
    def ScanType(self, ScanType):
        self._ScanType = ScanType

    @property
    def Images(self):
        r"""Scanned image
        :rtype: list of ImageInfo
        """
        return self._Images

    @Images.setter
    def Images(self, Images):
        self._Images = Images

    @property
    def All(self):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        r"""Whether to scan all
        :rtype: bool
        """
        return self._All

    @All.setter
    def All(self, All):
        warnings.warn("parameter `All` is deprecated", DeprecationWarning) 

        self._All = All

    @property
    def Id(self):
        r"""ID of the image to be scanned
        :rtype: list of int non-negative
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Latest(self):
        r"""Whether to scan for the latest version
        :rtype: bool
        """
        return self._Latest

    @Latest.setter
    def Latest(self, Latest):
        self._Latest = Latest

    @property
    def ContainerRunning(self):
        r"""
        :rtype: bool
        """
        return self._ContainerRunning

    @ContainerRunning.setter
    def ContainerRunning(self, ContainerRunning):
        self._ContainerRunning = ContainerRunning

    @property
    def ScanEndTime(self):
        r"""
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def ScanScope(self):
        r"""
        :rtype: int
        """
        return self._ScanScope

    @ScanScope.setter
    def ScanScope(self, ScanScope):
        self._ScanScope = ScanScope

    @property
    def RegistryType(self):
        r"""
        :rtype: list of str
        """
        return self._RegistryType

    @RegistryType.setter
    def RegistryType(self, RegistryType):
        self._RegistryType = RegistryType

    @property
    def Namespace(self):
        r"""
        :rtype: list of str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace


    def _deserialize(self, params):
        self._ScanPeriod = params.get("ScanPeriod")
        self._Enable = params.get("Enable")
        self._ScanTime = params.get("ScanTime")
        self._ScanType = params.get("ScanType")
        if params.get("Images") is not None:
            self._Images = []
            for item in params.get("Images"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._Images.append(obj)
        self._All = params.get("All")
        self._Id = params.get("Id")
        self._Latest = params.get("Latest")
        self._ContainerRunning = params.get("ContainerRunning")
        self._ScanEndTime = params.get("ScanEndTime")
        self._ScanScope = params.get("ScanScope")
        self._RegistryType = params.get("RegistryType")
        self._Namespace = params.get("Namespace")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateImageRegistryTimingScanTaskResponse(AbstractModel):
    r"""UpdateImageRegistryTimingScanTask response structure.

    """

    def __init__(self):
        r"""
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateNetworkFirewallPolicyDetailRequest(AbstractModel):
    r"""UpdateNetworkFirewallPolicyDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Policy ID
        :type Id: int
        :param _FromPolicyRule: Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type FromPolicyRule: int
        :param _ToPolicyRule: Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :type ToPolicyRule: int
        :param _PodSelector: Pod selector
        :type PodSelector: str
        :param _Namespace: Namespace
        :type Namespace: str
        :param _Description: Policy description
        :type Description: str
        :param _CustomPolicy: Custom rule
        :type CustomPolicy: list of NetworkCustomPolicy
        """
        self._ClusterId = None
        self._Id = None
        self._FromPolicyRule = None
        self._ToPolicyRule = None
        self._PodSelector = None
        self._Namespace = None
        self._Description = None
        self._CustomPolicy = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def FromPolicyRule(self):
        r"""Inbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._FromPolicyRule

    @FromPolicyRule.setter
    def FromPolicyRule(self, FromPolicyRule):
        self._FromPolicyRule = FromPolicyRule

    @property
    def ToPolicyRule(self):
        r"""Outbound rule

`1`: Allow all.

`2`: Reject all.

`3`: Custom.
        :rtype: int
        """
        return self._ToPolicyRule

    @ToPolicyRule.setter
    def ToPolicyRule(self, ToPolicyRule):
        self._ToPolicyRule = ToPolicyRule

    @property
    def PodSelector(self):
        r"""Pod selector
        :rtype: str
        """
        return self._PodSelector

    @PodSelector.setter
    def PodSelector(self, PodSelector):
        self._PodSelector = PodSelector

    @property
    def Namespace(self):
        r"""Namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CustomPolicy(self):
        r"""Custom rule
        :rtype: list of NetworkCustomPolicy
        """
        return self._CustomPolicy

    @CustomPolicy.setter
    def CustomPolicy(self, CustomPolicy):
        self._CustomPolicy = CustomPolicy


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        self._FromPolicyRule = params.get("FromPolicyRule")
        self._ToPolicyRule = params.get("ToPolicyRule")
        self._PodSelector = params.get("PodSelector")
        self._Namespace = params.get("Namespace")
        self._Description = params.get("Description")
        if params.get("CustomPolicy") is not None:
            self._CustomPolicy = []
            for item in params.get("CustomPolicy"):
                obj = NetworkCustomPolicy()
                obj._deserialize(item)
                self._CustomPolicy.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateNetworkFirewallPolicyDetailResponse(AbstractModel):
    r"""UpdateNetworkFirewallPolicyDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class UpdateNetworkFirewallPolicyYamlDetailRequest(AbstractModel):
    r"""UpdateNetworkFirewallPolicyYamlDetail request structure.

    """

    def __init__(self):
        r"""
        :param _ClusterId: Cluster ID
        :type ClusterId: str
        :param _Id: Policy ID
        :type Id: int
        :param _Yaml: Base64-encoded NetworkPolicy YAML string
        :type Yaml: str
        :param _Description: Policy description
        :type Description: str
        """
        self._ClusterId = None
        self._Id = None
        self._Yaml = None
        self._Description = None

    @property
    def ClusterId(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Id(self):
        r"""Policy ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Yaml(self):
        r"""Base64-encoded NetworkPolicy YAML string
        :rtype: str
        """
        return self._Yaml

    @Yaml.setter
    def Yaml(self, Yaml):
        self._Yaml = Yaml

    @property
    def Description(self):
        r"""Policy description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClusterId = params.get("ClusterId")
        self._Id = params.get("Id")
        self._Yaml = params.get("Yaml")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateNetworkFirewallPolicyYamlDetailResponse(AbstractModel):
    r"""UpdateNetworkFirewallPolicyYamlDetail response structure.

    """

    def __init__(self):
        r"""
        :param _TaskId: ID of the created task. `0` indicates that the creation failed.
        :type TaskId: int
        :param _Result: Result of creating the task. Valid values: `Succ`, `Failed`.
        :type Result: str
        :param _RequestId: The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :type RequestId: str
        """
        self._TaskId = None
        self._Result = None
        self._RequestId = None

    @property
    def TaskId(self):
        r"""ID of the created task. `0` indicates that the creation failed.
        :rtype: int
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Result(self):
        r"""Result of creating the task. Valid values: `Succ`, `Failed`.
        :rtype: str
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        r"""The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class VirusAutoIsolateSampleInfo(AbstractModel):
    r"""Information of the automatically isolated trojan sample

    """

    def __init__(self):
        r"""
        :param _MD5: MD5 checksum of the file
        :type MD5: str
        :param _VirusName: Virus name
        :type VirusName: str
        :param _ModifyTime: Last edit time
        :type ModifyTime: str
        :param _AutoIsolateSwitch: Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :type AutoIsolateSwitch: bool
        """
        self._MD5 = None
        self._VirusName = None
        self._ModifyTime = None
        self._AutoIsolateSwitch = None

    @property
    def MD5(self):
        r"""MD5 checksum of the file
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def VirusName(self):
        r"""Virus name
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def ModifyTime(self):
        r"""Last edit time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def AutoIsolateSwitch(self):
        r"""Automatic isolation switch. Valid values: `true` (on); `false` (off).
        :rtype: bool
        """
        return self._AutoIsolateSwitch

    @AutoIsolateSwitch.setter
    def AutoIsolateSwitch(self, AutoIsolateSwitch):
        self._AutoIsolateSwitch = AutoIsolateSwitch


    def _deserialize(self, params):
        self._MD5 = params.get("MD5")
        self._VirusName = params.get("VirusName")
        self._ModifyTime = params.get("ModifyTime")
        self._AutoIsolateSwitch = params.get("AutoIsolateSwitch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VirusInfo(AbstractModel):
    r"""List of trojans at runtime

    """

    def __init__(self):
        r"""
        :param _FileName: Filename
        :type FileName: str
        :param _FilePath: File path
        :type FilePath: str
        :param _VirusName: Virus name
        :type VirusName: str
        :param _CreateTime: Creation time
        :type CreateTime: str
        :param _ModifyTime: Update time
        :type ModifyTime: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :type ContainerStatus: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageId: Image ID
        :type ImageId: str
        :param _Status: `DEAL_NONE`: Pending.
`DEAL_IGNORE`: Ignored.
`DEAL_ADD_WHITELIST`: Allowed.
`DEAL_DEL`: Deleted.
`DEAL_ISOLATE`: Isolated.
`DEAL_ISOLATING`: Isolating.
`DEAL_ISOLATE_FAILED`: Isolation failed.
`DEAL_RECOVERING`: Recovering.
`DEAL_RECOVER_FAILED`: Recovery failed.
        :type Status: str
        :param _Id: Event ID
        :type Id: str
        :param _HarmDescribe: Event description
        :type HarmDescribe: str
        :param _SuggestScheme: Solution
        :type SuggestScheme: str
        :param _SubStatus: Sub-status of the failure:
`FILE_NOT_FOUND`: The file does not exist.
`FILE_ABNORMAL`: The file is abnormal.
`FILE_ABNORMAL_DEAL_RECOVER`: The file is abnormal when recovered.
`BACKUP_FILE_NOT_FOUND`: The backup file does not exist.
`CONTAINER_NOT_FOUND_DEAL_ISOLATE`: The container does not exist during isolation.
`CONTAINER_NOT_FOUND_DEAL_RECOVER`: The container does not exist during recovery.
`TIMEOUT`: Timed out.
`TOO_MANY`: Too many tasks.
`OFFLINE`: Offline.
`INTERNAL`: Internal service error.
`VALIDATION`: Invalid parameter.
        :type SubStatus: str
        :param _ContainerNetStatus: Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
        :type ContainerIsolateOperationSrc: str
        :param _MD5: MD5 checksum
Note: This field may return null, indicating that no valid values can be obtained.
        :type MD5: str
        :param _RiskLevel: Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type RiskLevel: str
        :param _CheckPlatform: Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :type CheckPlatform: list of str
        :param _NodeID: Node ID.
        :type NodeID: str
        :param _NodeName: Node name
        :type NodeName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod (instance) name
        :type PodName: str
        :param _ClusterID: ID of the cluster where the node resides
        :type ClusterID: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _PublicIP: Public IP of the node
        :type PublicIP: str
        :param _InnerIP: Node private IP
        :type InnerIP: str
        :param _NodeUniqueID: UID of the node
        :type NodeUniqueID: str
        :param _HostID: ID for the general node
        :type HostID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._FileName = None
        self._FilePath = None
        self._VirusName = None
        self._CreateTime = None
        self._ModifyTime = None
        self._ContainerName = None
        self._ContainerId = None
        self._ContainerStatus = None
        self._ImageName = None
        self._ImageId = None
        self._Status = None
        self._Id = None
        self._HarmDescribe = None
        self._SuggestScheme = None
        self._SubStatus = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._MD5 = None
        self._RiskLevel = None
        self._CheckPlatform = None
        self._NodeID = None
        self._NodeName = None
        self._PodIP = None
        self._PodName = None
        self._ClusterID = None
        self._NodeType = None
        self._PublicIP = None
        self._InnerIP = None
        self._NodeUniqueID = None
        self._HostID = None
        self._ClusterName = None

    @property
    def FileName(self):
        r"""Filename
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FilePath(self):
        r"""File path
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def VirusName(self):
        r"""Virus name
        :rtype: str
        """
        return self._VirusName

    @VirusName.setter
    def VirusName(self, VirusName):
        self._VirusName = VirusName

    @property
    def CreateTime(self):
        r"""Creation time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        r"""Update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def Status(self):
        r"""`DEAL_NONE`: Pending.
`DEAL_IGNORE`: Ignored.
`DEAL_ADD_WHITELIST`: Allowed.
`DEAL_DEL`: Deleted.
`DEAL_ISOLATE`: Isolated.
`DEAL_ISOLATING`: Isolating.
`DEAL_ISOLATE_FAILED`: Isolation failed.
`DEAL_RECOVERING`: Recovering.
`DEAL_RECOVER_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Id(self):
        r"""Event ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def HarmDescribe(self):
        r"""Event description
        :rtype: str
        """
        return self._HarmDescribe

    @HarmDescribe.setter
    def HarmDescribe(self, HarmDescribe):
        self._HarmDescribe = HarmDescribe

    @property
    def SuggestScheme(self):
        r"""Solution
        :rtype: str
        """
        return self._SuggestScheme

    @SuggestScheme.setter
    def SuggestScheme(self, SuggestScheme):
        self._SuggestScheme = SuggestScheme

    @property
    def SubStatus(self):
        r"""Sub-status of the failure:
`FILE_NOT_FOUND`: The file does not exist.
`FILE_ABNORMAL`: The file is abnormal.
`FILE_ABNORMAL_DEAL_RECOVER`: The file is abnormal when recovered.
`BACKUP_FILE_NOT_FOUND`: The backup file does not exist.
`CONTAINER_NOT_FOUND_DEAL_ISOLATE`: The container does not exist during isolation.
`CONTAINER_NOT_FOUND_DEAL_RECOVER`: The container does not exist during recovery.
`TIMEOUT`: Timed out.
`TOO_MANY`: Too many tasks.
`OFFLINE`: Offline.
`INTERNAL`: Internal service error.
`VALIDATION`: Invalid parameter.
        :rtype: str
        """
        return self._SubStatus

    @SubStatus.setter
    def SubStatus(self, SubStatus):
        self._SubStatus = SubStatus

    @property
    def ContainerNetStatus(self):
        r"""Network status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def MD5(self):
        r"""MD5 checksum
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5

    @property
    def RiskLevel(self):
        r"""Risk level. Valid values: `RISK_CRITICAL`, `RISK_HIGH`, `RISK_MEDIUM`, `RISK_LOW`, `RISK_NOTICE`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._RiskLevel

    @RiskLevel.setter
    def RiskLevel(self, RiskLevel):
        self._RiskLevel = RiskLevel

    @property
    def CheckPlatform(self):
        r"""Check platform
`1`: Tencent Cloud Security Engine.
`2`: tav.
`3`: binaryAi.
`4`: Unusual behavior.
`5`: Threat intelligence.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._CheckPlatform

    @CheckPlatform.setter
    def CheckPlatform(self, CheckPlatform):
        self._CheckPlatform = CheckPlatform

    @property
    def NodeID(self):
        r"""Node ID.
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def NodeName(self):
        r"""Node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod (instance) name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def ClusterID(self):
        r"""ID of the cluster where the node resides
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def PublicIP(self):
        r"""Public IP of the node
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def InnerIP(self):
        r"""Node private IP
        :rtype: str
        """
        return self._InnerIP

    @InnerIP.setter
    def InnerIP(self, InnerIP):
        self._InnerIP = InnerIP

    @property
    def NodeUniqueID(self):
        r"""UID of the node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def HostID(self):
        r"""ID for the general node
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._FileName = params.get("FileName")
        self._FilePath = params.get("FilePath")
        self._VirusName = params.get("VirusName")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._ContainerName = params.get("ContainerName")
        self._ContainerId = params.get("ContainerId")
        self._ContainerStatus = params.get("ContainerStatus")
        self._ImageName = params.get("ImageName")
        self._ImageId = params.get("ImageId")
        self._Status = params.get("Status")
        self._Id = params.get("Id")
        self._HarmDescribe = params.get("HarmDescribe")
        self._SuggestScheme = params.get("SuggestScheme")
        self._SubStatus = params.get("SubStatus")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._MD5 = params.get("MD5")
        self._RiskLevel = params.get("RiskLevel")
        self._CheckPlatform = params.get("CheckPlatform")
        self._NodeID = params.get("NodeID")
        self._NodeName = params.get("NodeName")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        self._ClusterID = params.get("ClusterID")
        self._NodeType = params.get("NodeType")
        self._PublicIP = params.get("PublicIP")
        self._InnerIP = params.get("InnerIP")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._HostID = params.get("HostID")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VirusTaskInfo(AbstractModel):
    r"""List of containers in the virus scanning task at runtime

    """

    def __init__(self):
        r"""
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ContainerId: Container ID
        :type ContainerId: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageId: Image ID
        :type ImageId: str
        :param _HostName: Node name
        :type HostName: str
        :param _HostIp: Private IP of the node
        :type HostIp: str
        :param _Status: Scanning status:
`WAIT`: Pending scanning.
`FAILED`: Failed.
`SCANNING`: Scanning.
`FINISHED`: Ended.
`CANCELING`: Canceling.
`CANCELED`: Canceled.
`CANCEL_FAILED`: Failed to cancel.
        :type Status: str
        :param _StartTime: Check start time
        :type StartTime: str
        :param _EndTime: Check end time
        :type EndTime: str
        :param _RiskCnt: Number of risks
        :type RiskCnt: int
        :param _Id: Event ID
        :type Id: str
        :param _ErrorMsg: Cause:
`SEND_SUCCESSED`: Task submitted.
`SCAN_WAIT`: Waiting to scan...
`OFFLINE`: Offline.
`SEND_FAILED`: Failed to deploy.
`TIMEOUT`: Timed out.
`LOW_AGENT_VERSION`: The Agent version is too old.
`AGENT_NOT_FOUND`: The image's agent doesn't exist.
`TOO_MANY`: Too many tasks.
`VALIDATION`: Invalid parameter.
`INTERNAL`: Internal service error.
`MISC`: Other errors.
`UNAUTH`: The image is not assigned with a license.
`SEND_CANCEL_SUCCESSED`: Task submitted.
        :type ErrorMsg: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _PublicIP: Public IP of the node
        :type PublicIP: str
        :param _NodeID: Node ID
        :type NodeID: str
        """
        self._ContainerName = None
        self._ContainerId = None
        self._ImageName = None
        self._ImageId = None
        self._HostName = None
        self._HostIp = None
        self._Status = None
        self._StartTime = None
        self._EndTime = None
        self._RiskCnt = None
        self._Id = None
        self._ErrorMsg = None
        self._NodeType = None
        self._PublicIP = None
        self._NodeID = None

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ContainerId(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageId(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def HostName(self):
        r"""Node name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIp(self):
        r"""Private IP of the node
        :rtype: str
        """
        return self._HostIp

    @HostIp.setter
    def HostIp(self, HostIp):
        self._HostIp = HostIp

    @property
    def Status(self):
        r"""Scanning status:
`WAIT`: Pending scanning.
`FAILED`: Failed.
`SCANNING`: Scanning.
`FINISHED`: Ended.
`CANCELING`: Canceling.
`CANCELED`: Canceled.
`CANCEL_FAILED`: Failed to cancel.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StartTime(self):
        r"""Check start time
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        r"""Check end time
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def RiskCnt(self):
        r"""Number of risks
        :rtype: int
        """
        return self._RiskCnt

    @RiskCnt.setter
    def RiskCnt(self, RiskCnt):
        self._RiskCnt = RiskCnt

    @property
    def Id(self):
        r"""Event ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ErrorMsg(self):
        r"""Cause:
`SEND_SUCCESSED`: Task submitted.
`SCAN_WAIT`: Waiting to scan...
`OFFLINE`: Offline.
`SEND_FAILED`: Failed to deploy.
`TIMEOUT`: Timed out.
`LOW_AGENT_VERSION`: The Agent version is too old.
`AGENT_NOT_FOUND`: The image's agent doesn't exist.
`TOO_MANY`: Too many tasks.
`VALIDATION`: Invalid parameter.
`INTERNAL`: Internal service error.
`MISC`: Other errors.
`UNAUTH`: The image is not assigned with a license.
`SEND_CANCEL_SUCCESSED`: Task submitted.
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def PublicIP(self):
        r"""Public IP of the node
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeID(self):
        r"""Node ID
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID


    def _deserialize(self, params):
        self._ContainerName = params.get("ContainerName")
        self._ContainerId = params.get("ContainerId")
        self._ImageName = params.get("ImageName")
        self._ImageId = params.get("ImageId")
        self._HostName = params.get("HostName")
        self._HostIp = params.get("HostIp")
        self._Status = params.get("Status")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._RiskCnt = params.get("RiskCnt")
        self._Id = params.get("Id")
        self._ErrorMsg = params.get("ErrorMsg")
        self._NodeType = params.get("NodeType")
        self._PublicIP = params.get("PublicIP")
        self._NodeID = params.get("NodeID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VirusTendencyInfo(AbstractModel):
    r"""Trojan trend details

    """

    def __init__(self):
        r"""
        :param _Date: Date
        :type Date: str
        :param _PendingEventCount: Total number of pending events
        :type PendingEventCount: int
        :param _RiskContainerCount: Total number of containers at risk
        :type RiskContainerCount: int
        :param _EventCount: Total number of events
        :type EventCount: int
        :param _IsolateEventCount: Total number of isolated events
        :type IsolateEventCount: int
        """
        self._Date = None
        self._PendingEventCount = None
        self._RiskContainerCount = None
        self._EventCount = None
        self._IsolateEventCount = None

    @property
    def Date(self):
        r"""Date
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date

    @property
    def PendingEventCount(self):
        r"""Total number of pending events
        :rtype: int
        """
        return self._PendingEventCount

    @PendingEventCount.setter
    def PendingEventCount(self, PendingEventCount):
        self._PendingEventCount = PendingEventCount

    @property
    def RiskContainerCount(self):
        r"""Total number of containers at risk
        :rtype: int
        """
        return self._RiskContainerCount

    @RiskContainerCount.setter
    def RiskContainerCount(self, RiskContainerCount):
        self._RiskContainerCount = RiskContainerCount

    @property
    def EventCount(self):
        r"""Total number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def IsolateEventCount(self):
        r"""Total number of isolated events
        :rtype: int
        """
        return self._IsolateEventCount

    @IsolateEventCount.setter
    def IsolateEventCount(self, IsolateEventCount):
        self._IsolateEventCount = IsolateEventCount


    def _deserialize(self, params):
        self._Date = params.get("Date")
        self._PendingEventCount = params.get("PendingEventCount")
        self._RiskContainerCount = params.get("RiskContainerCount")
        self._EventCount = params.get("EventCount")
        self._IsolateEventCount = params.get("IsolateEventCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulAffectedComponentInfo(AbstractModel):
    r"""Information of the component affected by the vulnerability

    """

    def __init__(self):
        r"""
        :param _Name: Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Version: Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :type Version: list of str
        :param _FixedVersion: Fixed component version
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixedVersion: list of str
        """
        self._Name = None
        self._Version = None
        self._FixedVersion = None

    @property
    def Name(self):
        r"""Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        r"""Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def FixedVersion(self):
        r"""Fixed component version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._FixedVersion

    @FixedVersion.setter
    def FixedVersion(self, FixedVersion):
        self._FixedVersion = FixedVersion


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._FixedVersion = params.get("FixedVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulAffectedContainerInfo(AbstractModel):
    r"""Information of the container affected by the vulnerability

    """

    def __init__(self):
        r"""
        :param _HostIP: Private IP
        :type HostIP: str
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _PodName: Pod name
        :type PodName: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _HostName: Server name
        :type HostName: str
        :param _HostID: Server ID
        :type HostID: str
        :param _PublicIP: Public IP
        :type PublicIP: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _NodeUniqueID: UID of a super node
        :type NodeUniqueID: str
        :param _NodeID: ID of a super node
        :type NodeID: str
        :param _NodeName: Super node name
        :type NodeName: str
        """
        self._HostIP = None
        self._ContainerID = None
        self._ContainerName = None
        self._PodName = None
        self._PodIP = None
        self._HostName = None
        self._HostID = None
        self._PublicIP = None
        self._ClusterID = None
        self._ClusterName = None
        self._NodeType = None
        self._NodeUniqueID = None
        self._NodeID = None
        self._NodeName = None

    @property
    def HostIP(self):
        r"""Private IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def HostName(self):
        r"""Server name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostID(self):
        r"""Server ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def PublicIP(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeUniqueID(self):
        r"""UID of a super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def NodeID(self):
        r"""ID of a super node
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def NodeName(self):
        r"""Super node name
        :rtype: str
        """
        return self._NodeName

    @NodeName.setter
    def NodeName(self, NodeName):
        self._NodeName = NodeName


    def _deserialize(self, params):
        self._HostIP = params.get("HostIP")
        self._ContainerID = params.get("ContainerID")
        self._ContainerName = params.get("ContainerName")
        self._PodName = params.get("PodName")
        self._PodIP = params.get("PodIP")
        self._HostName = params.get("HostName")
        self._HostID = params.get("HostID")
        self._PublicIP = params.get("PublicIP")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._NodeType = params.get("NodeType")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._NodeID = params.get("NodeID")
        self._NodeName = params.get("NodeName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulAffectedImageComponentInfo(AbstractModel):
    r"""Information of the component affected by the vulnerability

    """

    def __init__(self):
        r"""
        :param _Name: Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :type Name: str
        :param _Version: Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :type Version: str
        :param _FixedVersion: Fixed component version
Note: This field may return null, indicating that no valid values can be obtained.
        :type FixedVersion: str
        :param _Path: Component path
Note: This field may return null, indicating that no valid values can be obtained.
        :type Path: str
        """
        self._Name = None
        self._Version = None
        self._FixedVersion = None
        self._Path = None

    @property
    def Name(self):
        r"""Component name
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Version(self):
        r"""Component version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def FixedVersion(self):
        r"""Fixed component version
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FixedVersion

    @FixedVersion.setter
    def FixedVersion(self, FixedVersion):
        self._FixedVersion = FixedVersion

    @property
    def Path(self):
        r"""Component path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Version = params.get("Version")
        self._FixedVersion = params.get("FixedVersion")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulAffectedImageInfo(AbstractModel):
    r"""Information of the image affected by the vulnerability

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _HostCount: Number of associated servers
        :type HostCount: int
        :param _ContainerCount: Number of associated containers
        :type ContainerCount: int
        :param _ComponentList: List of components
        :type ComponentList: list of VulAffectedImageComponentInfo
        """
        self._ImageID = None
        self._ImageName = None
        self._HostCount = None
        self._ContainerCount = None
        self._ComponentList = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def HostCount(self):
        r"""Number of associated servers
        :rtype: int
        """
        return self._HostCount

    @HostCount.setter
    def HostCount(self, HostCount):
        self._HostCount = HostCount

    @property
    def ContainerCount(self):
        r"""Number of associated containers
        :rtype: int
        """
        return self._ContainerCount

    @ContainerCount.setter
    def ContainerCount(self, ContainerCount):
        self._ContainerCount = ContainerCount

    @property
    def ComponentList(self):
        r"""List of components
        :rtype: list of VulAffectedImageComponentInfo
        """
        return self._ComponentList

    @ComponentList.setter
    def ComponentList(self, ComponentList):
        self._ComponentList = ComponentList


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._HostCount = params.get("HostCount")
        self._ContainerCount = params.get("ContainerCount")
        if params.get("ComponentList") is not None:
            self._ComponentList = []
            for item in params.get("ComponentList"):
                obj = VulAffectedImageComponentInfo()
                obj._deserialize(item)
                self._ComponentList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulAffectedRegistryImageInfo(AbstractModel):
    r"""This API is used to query the list of repository images affected by a specific vulnerability.

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageTag: Image tag
        :type ImageTag: str
        :param _Namespace: Image namespace
        :type Namespace: str
        :param _ImageRepoAddress: Image address
        :type ImageRepoAddress: str
        :param _ComponentList: List of components
        :type ComponentList: list of VulAffectedImageComponentInfo
        :param _IsLatestImage: Whether it is the latest image tag
        :type IsLatestImage: bool
        :param _ImageAssetId: Internal image asset ID
        :type ImageAssetId: int
        """
        self._ImageID = None
        self._ImageName = None
        self._ImageTag = None
        self._Namespace = None
        self._ImageRepoAddress = None
        self._ComponentList = None
        self._IsLatestImage = None
        self._ImageAssetId = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageTag(self):
        r"""Image tag
        :rtype: str
        """
        return self._ImageTag

    @ImageTag.setter
    def ImageTag(self, ImageTag):
        self._ImageTag = ImageTag

    @property
    def Namespace(self):
        r"""Image namespace
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ImageRepoAddress(self):
        r"""Image address
        :rtype: str
        """
        return self._ImageRepoAddress

    @ImageRepoAddress.setter
    def ImageRepoAddress(self, ImageRepoAddress):
        self._ImageRepoAddress = ImageRepoAddress

    @property
    def ComponentList(self):
        r"""List of components
        :rtype: list of VulAffectedImageComponentInfo
        """
        return self._ComponentList

    @ComponentList.setter
    def ComponentList(self, ComponentList):
        self._ComponentList = ComponentList

    @property
    def IsLatestImage(self):
        r"""Whether it is the latest image tag
        :rtype: bool
        """
        return self._IsLatestImage

    @IsLatestImage.setter
    def IsLatestImage(self, IsLatestImage):
        self._IsLatestImage = IsLatestImage

    @property
    def ImageAssetId(self):
        r"""Internal image asset ID
        :rtype: int
        """
        return self._ImageAssetId

    @ImageAssetId.setter
    def ImageAssetId(self, ImageAssetId):
        self._ImageAssetId = ImageAssetId


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._ImageTag = params.get("ImageTag")
        self._Namespace = params.get("Namespace")
        self._ImageRepoAddress = params.get("ImageRepoAddress")
        if params.get("ComponentList") is not None:
            self._ComponentList = []
            for item in params.get("ComponentList"):
                obj = VulAffectedImageComponentInfo()
                obj._deserialize(item)
                self._ComponentList.append(obj)
        self._IsLatestImage = params.get("IsLatestImage")
        self._ImageAssetId = params.get("ImageAssetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceEvent(AbstractModel):
    r"""Exploit prevention event details

    """

    def __init__(self):
        r"""
        :param _CVEID: Vulnerability CVE ID
        :type CVEID: str
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _PocID: POC ID
        :type PocID: str
        :param _EventType: Intrusion status
        :type EventType: str
        :param _SourceIP: Attacker IP
        :type SourceIP: str
        :param _City: Region of the attacker IP
        :type City: str
        :param _EventCount: Number of events
        :type EventCount: int
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Status: Processing status
        :type Status: str
        :param _EventID: Event ID
        :type EventID: int
        :param _CreateTime: First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type CreateTime: str
        :param _ContainerNetStatus: Isolation status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :type ContainerNetStatus: str
        :param _MergeTime: Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type MergeTime: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _QUUID: Node QUuid/Super node ID
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type QUUID: str
        :param _HostIP: Server private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :type HostIP: str
        :param _HostName: General node/Super node name
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type HostName: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _PublicIP: Public IP
        :type PublicIP: str
        :param _NodeUniqueID: UID of a super node
        :type NodeUniqueID: str
        :param _NodeID: ID of a super node
        :type NodeID: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        """
        self._CVEID = None
        self._VulName = None
        self._PocID = None
        self._EventType = None
        self._SourceIP = None
        self._City = None
        self._EventCount = None
        self._ContainerID = None
        self._ContainerName = None
        self._ImageID = None
        self._ImageName = None
        self._Status = None
        self._EventID = None
        self._CreateTime = None
        self._ContainerNetStatus = None
        self._MergeTime = None
        self._ContainerStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._QUUID = None
        self._HostIP = None
        self._HostName = None
        self._NodeType = None
        self._PublicIP = None
        self._NodeUniqueID = None
        self._NodeID = None
        self._ClusterID = None
        self._ClusterName = None

    @property
    def CVEID(self):
        r"""Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def VulName(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def EventType(self):
        r"""Intrusion status
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def SourceIP(self):
        r"""Attacker IP
        :rtype: str
        """
        return self._SourceIP

    @SourceIP.setter
    def SourceIP(self, SourceIP):
        self._SourceIP = SourceIP

    @property
    def City(self):
        r"""Region of the attacker IP
        :rtype: str
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Status(self):
        r"""Processing status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EventID(self):
        r"""Event ID
        :rtype: int
        """
        return self._EventID

    @EventID.setter
    def EventID(self, EventID):
        self._EventID = EventID

    @property
    def CreateTime(self):
        r"""First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ContainerNetStatus(self):
        r"""Isolation status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def MergeTime(self):
        r"""Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MergeTime

    @MergeTime.setter
    def MergeTime(self, MergeTime):
        self._MergeTime = MergeTime

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def QUUID(self):
        r"""Node QUuid/Super node ID
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._QUUID

    @QUUID.setter
    def QUUID(self, QUUID):
        self._QUUID = QUUID

    @property
    def HostIP(self):
        r"""Server private IP
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def HostName(self):
        r"""General node/Super node name
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def PublicIP(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def NodeUniqueID(self):
        r"""UID of a super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def NodeID(self):
        r"""ID of a super node
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName


    def _deserialize(self, params):
        self._CVEID = params.get("CVEID")
        self._VulName = params.get("VulName")
        self._PocID = params.get("PocID")
        self._EventType = params.get("EventType")
        self._SourceIP = params.get("SourceIP")
        self._City = params.get("City")
        self._EventCount = params.get("EventCount")
        self._ContainerID = params.get("ContainerID")
        self._ContainerName = params.get("ContainerName")
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._Status = params.get("Status")
        self._EventID = params.get("EventID")
        self._CreateTime = params.get("CreateTime")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._MergeTime = params.get("MergeTime")
        self._ContainerStatus = params.get("ContainerStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._QUUID = params.get("QUUID")
        self._HostIP = params.get("HostIP")
        self._HostName = params.get("HostName")
        self._NodeType = params.get("NodeType")
        self._PublicIP = params.get("PublicIP")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._NodeID = params.get("NodeID")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceEventDetail(AbstractModel):
    r"""Exploit prevention event details

    """

    def __init__(self):
        r"""
        :param _CVEID: Vulnerability CVE ID
        :type CVEID: str
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _PocID: POC ID
        :type PocID: str
        :param _EventType: Intrusion status
        :type EventType: str
        :param _SourceIP: Attacker IP
        :type SourceIP: str
        :param _City: Region of the attacker IP
        :type City: str
        :param _EventCount: Number of events
        :type EventCount: int
        :param _ContainerID: Container ID
        :type ContainerID: str
        :param _ContainerName: Container name
        :type ContainerName: str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Status: Processing status
        :type Status: str
        :param _SourcePort: Attacker port
        :type SourcePort: list of str
        :param _EventID: Event ID
        :type EventID: int
        :param _HostName: General node/Super node name
        :type HostName: str
        :param _HostIP: Server private IP
        :type HostIP: str
        :param _PublicIP: Server public IP
        :type PublicIP: str
        :param _PodName: Pod name
        :type PodName: str
        :param _Description: Harm description
        :type Description: str
        :param _OfficialSolution: Fix suggestion
        :type OfficialSolution: str
        :param _NetworkPayload: Attack packet
        :type NetworkPayload: str
        :param _PID: Process PID
Note: This field may return null, indicating that no valid values can be obtained.
        :type PID: int
        :param _MainClass: Main class name of the process
Note: This field may return null, indicating that no valid values can be obtained.
        :type MainClass: str
        :param _StackTrace: Stack information
Note: This field may return null, indicating that no valid values can be obtained.
        :type StackTrace: str
        :param _ServerAccount: Listened account
Note: This field may return null, indicating that no valid values can be obtained.
        :type ServerAccount: str
        :param _ServerPort: Listened port
Note: This field may return null, indicating that no valid values can be obtained.
        :type ServerPort: str
        :param _ServerExe: Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :type ServerExe: str
        :param _ServerArg: Process command line parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :type ServerArg: str
        :param _QUUID: Node QUuid/Super node ID
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :type QUUID: str
        :param _ContainerNetStatus: Isolation status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetStatus: str
        :param _ContainerNetSubStatus: Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerNetSubStatus: str
        :param _ContainerIsolateOperationSrc: Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerIsolateOperationSrc: str
        :param _ContainerStatus: Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerStatus: str
        :param _JNDIUrl: API URL
Note: This field may return null, indicating that no valid values can be obtained.
        :type JNDIUrl: str
        :param _RaspDetail: RASP details
Note: This field may return `null`, indicating that no valid value was found.
        :type RaspDetail: list of RaspInfo
        :param _NodeSubNetName: Super node subnet name
        :type NodeSubNetName: str
        :param _NodeSubNetCIDR: Super node subnet IP range
        :type NodeSubNetCIDR: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _NodeID: ID of a super node
        :type NodeID: str
        :param _NodeUniqueID: UID of a super node
        :type NodeUniqueID: str
        :param _NodeSubNetID: Super node subnet ID
        :type NodeSubNetID: str
        :param _ClusterID: Cluster ID
        :type ClusterID: str
        :param _ClusterName: Cluster name
        :type ClusterName: str
        :param _Namespace: 
        :type Namespace: str
        :param _WorkloadType: 
        :type WorkloadType: str
        """
        self._CVEID = None
        self._VulName = None
        self._PocID = None
        self._EventType = None
        self._SourceIP = None
        self._City = None
        self._EventCount = None
        self._ContainerID = None
        self._ContainerName = None
        self._ImageID = None
        self._ImageName = None
        self._Status = None
        self._SourcePort = None
        self._EventID = None
        self._HostName = None
        self._HostIP = None
        self._PublicIP = None
        self._PodName = None
        self._Description = None
        self._OfficialSolution = None
        self._NetworkPayload = None
        self._PID = None
        self._MainClass = None
        self._StackTrace = None
        self._ServerAccount = None
        self._ServerPort = None
        self._ServerExe = None
        self._ServerArg = None
        self._QUUID = None
        self._ContainerNetStatus = None
        self._ContainerNetSubStatus = None
        self._ContainerIsolateOperationSrc = None
        self._ContainerStatus = None
        self._JNDIUrl = None
        self._RaspDetail = None
        self._NodeSubNetName = None
        self._NodeSubNetCIDR = None
        self._PodIP = None
        self._NodeType = None
        self._NodeID = None
        self._NodeUniqueID = None
        self._NodeSubNetID = None
        self._ClusterID = None
        self._ClusterName = None
        self._Namespace = None
        self._WorkloadType = None

    @property
    def CVEID(self):
        r"""Vulnerability CVE ID
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def VulName(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def EventType(self):
        r"""Intrusion status
        :rtype: str
        """
        return self._EventType

    @EventType.setter
    def EventType(self, EventType):
        self._EventType = EventType

    @property
    def SourceIP(self):
        r"""Attacker IP
        :rtype: str
        """
        return self._SourceIP

    @SourceIP.setter
    def SourceIP(self, SourceIP):
        self._SourceIP = SourceIP

    @property
    def City(self):
        r"""Region of the attacker IP
        :rtype: str
        """
        return self._City

    @City.setter
    def City(self, City):
        self._City = City

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount

    @property
    def ContainerID(self):
        r"""Container ID
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        self._ContainerID = ContainerID

    @property
    def ContainerName(self):
        r"""Container name
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        self._ContainerName = ContainerName

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Status(self):
        r"""Processing status
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def SourcePort(self):
        r"""Attacker port
        :rtype: list of str
        """
        return self._SourcePort

    @SourcePort.setter
    def SourcePort(self, SourcePort):
        self._SourcePort = SourcePort

    @property
    def EventID(self):
        r"""Event ID
        :rtype: int
        """
        return self._EventID

    @EventID.setter
    def EventID(self, EventID):
        self._EventID = EventID

    @property
    def HostName(self):
        r"""General node/Super node name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIP(self):
        r"""Server private IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def PublicIP(self):
        r"""Server public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Description(self):
        r"""Harm description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def OfficialSolution(self):
        r"""Fix suggestion
        :rtype: str
        """
        return self._OfficialSolution

    @OfficialSolution.setter
    def OfficialSolution(self, OfficialSolution):
        self._OfficialSolution = OfficialSolution

    @property
    def NetworkPayload(self):
        r"""Attack packet
        :rtype: str
        """
        return self._NetworkPayload

    @NetworkPayload.setter
    def NetworkPayload(self, NetworkPayload):
        self._NetworkPayload = NetworkPayload

    @property
    def PID(self):
        r"""Process PID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._PID

    @PID.setter
    def PID(self, PID):
        self._PID = PID

    @property
    def MainClass(self):
        r"""Main class name of the process
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._MainClass

    @MainClass.setter
    def MainClass(self, MainClass):
        self._MainClass = MainClass

    @property
    def StackTrace(self):
        r"""Stack information
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._StackTrace

    @StackTrace.setter
    def StackTrace(self, StackTrace):
        self._StackTrace = StackTrace

    @property
    def ServerAccount(self):
        r"""Listened account
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ServerAccount

    @ServerAccount.setter
    def ServerAccount(self, ServerAccount):
        self._ServerAccount = ServerAccount

    @property
    def ServerPort(self):
        r"""Listened port
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ServerPort

    @ServerPort.setter
    def ServerPort(self, ServerPort):
        self._ServerPort = ServerPort

    @property
    def ServerExe(self):
        r"""Process path
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ServerExe

    @ServerExe.setter
    def ServerExe(self, ServerExe):
        self._ServerExe = ServerExe

    @property
    def ServerArg(self):
        r"""Process command line parameter
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ServerArg

    @ServerArg.setter
    def ServerArg(self, ServerArg):
        self._ServerArg = ServerArg

    @property
    def QUUID(self):
        r"""Node QUuid/Super node ID
Note: This field may return·`null`, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._QUUID

    @QUUID.setter
    def QUUID(self, QUUID):
        self._QUUID = QUUID

    @property
    def ContainerNetStatus(self):
        r"""Isolation status
`NORMAL`: 	Not isolated.
`ISOLATED`: 		Isolated.
`ISOLATING`: 		Isolating.
`ISOLATE_FAILED`: 	Isolation failed.
`RESTORING`: Recovering.
`RESTORE_FAILED`: Recovery failed.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetStatus

    @ContainerNetStatus.setter
    def ContainerNetStatus(self, ContainerNetStatus):
        self._ContainerNetStatus = ContainerNetStatus

    @property
    def ContainerNetSubStatus(self):
        r"""Sub-status of the container
"AGENT_OFFLINE"       // The agent is offline.
	"NODE_DESTROYED"      // The node is terminated.
	"CONTAINER_EXITED"    // The container exited.
	"CONTAINER_DESTROYED" // The container was terminated.
	"SHARED_HOST"         // The container shares the network with the server.
	"RESOURCE_LIMIT"      // The number of resources to be isolated exceeds the limit.
	"UNKNOW"              // The reason is unknown.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerNetSubStatus

    @ContainerNetSubStatus.setter
    def ContainerNetSubStatus(self, ContainerNetSubStatus):
        self._ContainerNetSubStatus = ContainerNetSubStatus

    @property
    def ContainerIsolateOperationSrc(self):
        r"""Container isolation operation source
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerIsolateOperationSrc

    @ContainerIsolateOperationSrc.setter
    def ContainerIsolateOperationSrc(self, ContainerIsolateOperationSrc):
        self._ContainerIsolateOperationSrc = ContainerIsolateOperationSrc

    @property
    def ContainerStatus(self):
        r"""Container status
`RUNNING`: Running.
`PAUSED`: Paused.
`STOPPED`: Stopped.
`CREATED`: Created.
`DESTROYED`: Terminated.
`RESTARTING`: Restarting.
`REMOVING`: Removing.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ContainerStatus

    @ContainerStatus.setter
    def ContainerStatus(self, ContainerStatus):
        self._ContainerStatus = ContainerStatus

    @property
    def JNDIUrl(self):
        r"""API URL
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._JNDIUrl

    @JNDIUrl.setter
    def JNDIUrl(self, JNDIUrl):
        self._JNDIUrl = JNDIUrl

    @property
    def RaspDetail(self):
        r"""RASP details
Note: This field may return `null`, indicating that no valid value was found.
        :rtype: list of RaspInfo
        """
        return self._RaspDetail

    @RaspDetail.setter
    def RaspDetail(self, RaspDetail):
        self._RaspDetail = RaspDetail

    @property
    def NodeSubNetName(self):
        r"""Super node subnet name
        :rtype: str
        """
        return self._NodeSubNetName

    @NodeSubNetName.setter
    def NodeSubNetName(self, NodeSubNetName):
        self._NodeSubNetName = NodeSubNetName

    @property
    def NodeSubNetCIDR(self):
        r"""Super node subnet IP range
        :rtype: str
        """
        return self._NodeSubNetCIDR

    @NodeSubNetCIDR.setter
    def NodeSubNetCIDR(self, NodeSubNetCIDR):
        self._NodeSubNetCIDR = NodeSubNetCIDR

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeID(self):
        r"""ID of a super node
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def NodeUniqueID(self):
        r"""UID of a super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def NodeSubNetID(self):
        r"""Super node subnet ID
        :rtype: str
        """
        return self._NodeSubNetID

    @NodeSubNetID.setter
    def NodeSubNetID(self, NodeSubNetID):
        self._NodeSubNetID = NodeSubNetID

    @property
    def ClusterID(self):
        r"""Cluster ID
        :rtype: str
        """
        return self._ClusterID

    @ClusterID.setter
    def ClusterID(self, ClusterID):
        self._ClusterID = ClusterID

    @property
    def ClusterName(self):
        r"""Cluster name
        :rtype: str
        """
        return self._ClusterName

    @ClusterName.setter
    def ClusterName(self, ClusterName):
        self._ClusterName = ClusterName

    @property
    def Namespace(self):
        r"""
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def WorkloadType(self):
        r"""
        :rtype: str
        """
        return self._WorkloadType

    @WorkloadType.setter
    def WorkloadType(self, WorkloadType):
        self._WorkloadType = WorkloadType


    def _deserialize(self, params):
        self._CVEID = params.get("CVEID")
        self._VulName = params.get("VulName")
        self._PocID = params.get("PocID")
        self._EventType = params.get("EventType")
        self._SourceIP = params.get("SourceIP")
        self._City = params.get("City")
        self._EventCount = params.get("EventCount")
        self._ContainerID = params.get("ContainerID")
        self._ContainerName = params.get("ContainerName")
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._Status = params.get("Status")
        self._SourcePort = params.get("SourcePort")
        self._EventID = params.get("EventID")
        self._HostName = params.get("HostName")
        self._HostIP = params.get("HostIP")
        self._PublicIP = params.get("PublicIP")
        self._PodName = params.get("PodName")
        self._Description = params.get("Description")
        self._OfficialSolution = params.get("OfficialSolution")
        self._NetworkPayload = params.get("NetworkPayload")
        self._PID = params.get("PID")
        self._MainClass = params.get("MainClass")
        self._StackTrace = params.get("StackTrace")
        self._ServerAccount = params.get("ServerAccount")
        self._ServerPort = params.get("ServerPort")
        self._ServerExe = params.get("ServerExe")
        self._ServerArg = params.get("ServerArg")
        self._QUUID = params.get("QUUID")
        self._ContainerNetStatus = params.get("ContainerNetStatus")
        self._ContainerNetSubStatus = params.get("ContainerNetSubStatus")
        self._ContainerIsolateOperationSrc = params.get("ContainerIsolateOperationSrc")
        self._ContainerStatus = params.get("ContainerStatus")
        self._JNDIUrl = params.get("JNDIUrl")
        if params.get("RaspDetail") is not None:
            self._RaspDetail = []
            for item in params.get("RaspDetail"):
                obj = RaspInfo()
                obj._deserialize(item)
                self._RaspDetail.append(obj)
        self._NodeSubNetName = params.get("NodeSubNetName")
        self._NodeSubNetCIDR = params.get("NodeSubNetCIDR")
        self._PodIP = params.get("PodIP")
        self._NodeType = params.get("NodeType")
        self._NodeID = params.get("NodeID")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._NodeSubNetID = params.get("NodeSubNetID")
        self._ClusterID = params.get("ClusterID")
        self._ClusterName = params.get("ClusterName")
        self._Namespace = params.get("Namespace")
        self._WorkloadType = params.get("WorkloadType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceEventTendency(AbstractModel):
    r"""Trend of exploit prevention events

    """

    def __init__(self):
        r"""
        :param _Date: Date
        :type Date: str
        :param _EventCount: Number of events
        :type EventCount: int
        """
        self._Date = None
        self._EventCount = None

    @property
    def Date(self):
        r"""Date
        :rtype: str
        """
        return self._Date

    @Date.setter
    def Date(self, Date):
        self._Date = Date

    @property
    def EventCount(self):
        r"""Number of events
        :rtype: int
        """
        return self._EventCount

    @EventCount.setter
    def EventCount(self, EventCount):
        self._EventCount = EventCount


    def _deserialize(self, params):
        self._Date = params.get("Date")
        self._EventCount = params.get("EventCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefenceHost(AbstractModel):
    r"""Information of the server with exploit prevention enabled

    """

    def __init__(self):
        r"""
        :param _HostName: General node/Super node name
        :type HostName: str
        :param _HostIP: Server IP, which is the private IP
        :type HostIP: str
        :param _HostID: Node QUuid/Super node ID
        :type HostID: str
        :param _Status: Plugin status. Valid values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENDED` (not defended).
        :type Status: str
        :param _PublicIP: Public IP
        :type PublicIP: str
        :param _CreateTime: First enablement time
        :type CreateTime: str
        :param _ModifyTime: Update time
        :type ModifyTime: str
        :param _NodeType: Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :type NodeType: str
        :param _NodeSubNetName: Super node subnet name
        :type NodeSubNetName: str
        :param _NodeSubNetCIDR: Super node subnet IP range
        :type NodeSubNetCIDR: str
        :param _NodeSubNetID: Super node subnet ID
        :type NodeSubNetID: str
        :param _NodeUniqueID: UID of a super node
        :type NodeUniqueID: str
        :param _NodeID: ID of a super node
        :type NodeID: str
        :param _PodIP: Pod IP
        :type PodIP: str
        :param _PodName: Pod name
        :type PodName: str
        """
        self._HostName = None
        self._HostIP = None
        self._HostID = None
        self._Status = None
        self._PublicIP = None
        self._CreateTime = None
        self._ModifyTime = None
        self._NodeType = None
        self._NodeSubNetName = None
        self._NodeSubNetCIDR = None
        self._NodeSubNetID = None
        self._NodeUniqueID = None
        self._NodeID = None
        self._PodIP = None
        self._PodName = None

    @property
    def HostName(self):
        r"""General node/Super node name
        :rtype: str
        """
        return self._HostName

    @HostName.setter
    def HostName(self, HostName):
        self._HostName = HostName

    @property
    def HostIP(self):
        r"""Server IP, which is the private IP
        :rtype: str
        """
        return self._HostIP

    @HostIP.setter
    def HostIP(self, HostIP):
        self._HostIP = HostIP

    @property
    def HostID(self):
        r"""Node QUuid/Super node ID
        :rtype: str
        """
        return self._HostID

    @HostID.setter
    def HostID(self, HostID):
        self._HostID = HostID

    @property
    def Status(self):
        r"""Plugin status. Valid values: `SUCCESS` (normal); `FAIL` (abnormal); `NO_DEFENDED` (not defended).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def PublicIP(self):
        r"""Public IP
        :rtype: str
        """
        return self._PublicIP

    @PublicIP.setter
    def PublicIP(self, PublicIP):
        self._PublicIP = PublicIP

    @property
    def CreateTime(self):
        r"""First enablement time
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModifyTime(self):
        r"""Update time
        :rtype: str
        """
        return self._ModifyTime

    @ModifyTime.setter
    def ModifyTime(self, ModifyTime):
        self._ModifyTime = ModifyTime

    @property
    def NodeType(self):
        r"""Node type. Values: `NORMAL` (general node), `SUPER` (super node).
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def NodeSubNetName(self):
        r"""Super node subnet name
        :rtype: str
        """
        return self._NodeSubNetName

    @NodeSubNetName.setter
    def NodeSubNetName(self, NodeSubNetName):
        self._NodeSubNetName = NodeSubNetName

    @property
    def NodeSubNetCIDR(self):
        r"""Super node subnet IP range
        :rtype: str
        """
        return self._NodeSubNetCIDR

    @NodeSubNetCIDR.setter
    def NodeSubNetCIDR(self, NodeSubNetCIDR):
        self._NodeSubNetCIDR = NodeSubNetCIDR

    @property
    def NodeSubNetID(self):
        r"""Super node subnet ID
        :rtype: str
        """
        return self._NodeSubNetID

    @NodeSubNetID.setter
    def NodeSubNetID(self, NodeSubNetID):
        self._NodeSubNetID = NodeSubNetID

    @property
    def NodeUniqueID(self):
        r"""UID of a super node
        :rtype: str
        """
        return self._NodeUniqueID

    @NodeUniqueID.setter
    def NodeUniqueID(self, NodeUniqueID):
        self._NodeUniqueID = NodeUniqueID

    @property
    def NodeID(self):
        r"""ID of a super node
        :rtype: str
        """
        return self._NodeID

    @NodeID.setter
    def NodeID(self, NodeID):
        self._NodeID = NodeID

    @property
    def PodIP(self):
        r"""Pod IP
        :rtype: str
        """
        return self._PodIP

    @PodIP.setter
    def PodIP(self, PodIP):
        self._PodIP = PodIP

    @property
    def PodName(self):
        r"""Pod name
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._HostName = params.get("HostName")
        self._HostIP = params.get("HostIP")
        self._HostID = params.get("HostID")
        self._Status = params.get("Status")
        self._PublicIP = params.get("PublicIP")
        self._CreateTime = params.get("CreateTime")
        self._ModifyTime = params.get("ModifyTime")
        self._NodeType = params.get("NodeType")
        self._NodeSubNetName = params.get("NodeSubNetName")
        self._NodeSubNetCIDR = params.get("NodeSubNetCIDR")
        self._NodeSubNetID = params.get("NodeSubNetID")
        self._NodeUniqueID = params.get("NodeUniqueID")
        self._NodeID = params.get("NodeID")
        self._PodIP = params.get("PodIP")
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDefencePlugin(AbstractModel):
    r"""Vulnerability protection plugin information

    """

    def __init__(self):
        r"""
        :param _PID: PID of the Java process
        :type PID: int
        :param _MainClass: Main class name of the process
        :type MainClass: str
        :param _Status: Plugin status. Valid values: `INJECTING` (injecting); `SUCCESS` (injected successfully); `FAIL` (injection failed); `TIMEOUT` (plugin timed out); `QUIT` (plugin exited).
        :type Status: str
        :param _ErrorLog: Error log
        :type ErrorLog: str
        """
        self._PID = None
        self._MainClass = None
        self._Status = None
        self._ErrorLog = None

    @property
    def PID(self):
        r"""PID of the Java process
        :rtype: int
        """
        return self._PID

    @PID.setter
    def PID(self, PID):
        self._PID = PID

    @property
    def MainClass(self):
        r"""Main class name of the process
        :rtype: str
        """
        return self._MainClass

    @MainClass.setter
    def MainClass(self, MainClass):
        self._MainClass = MainClass

    @property
    def Status(self):
        r"""Plugin status. Valid values: `INJECTING` (injecting); `SUCCESS` (injected successfully); `FAIL` (injection failed); `TIMEOUT` (plugin timed out); `QUIT` (plugin exited).
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ErrorLog(self):
        r"""Error log
        :rtype: str
        """
        return self._ErrorLog

    @ErrorLog.setter
    def ErrorLog(self, ErrorLog):
        self._ErrorLog = ErrorLog


    def _deserialize(self, params):
        self._PID = params.get("PID")
        self._MainClass = params.get("MainClass")
        self._Status = params.get("Status")
        self._ErrorLog = params.get("ErrorLog")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulDetailInfo(AbstractModel):
    r"""Vulnerability details

    """

    def __init__(self):
        r"""
        :param _CVEID: CVE No.
        :type CVEID: str
        :param _Name: Vulnerability name
        :type Name: str
        :param _Tags: Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _CategoryType: Vulnerability type
Note: This field may return null, indicating that no valid values can be obtained.
        :type CategoryType: str
        :param _Level: Vulnerability severity
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: str
        :param _SubmitTime: Vulnerability disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :type SubmitTime: str
        :param _Description: Vulnerability description
        :type Description: str
        :param _CVSSV3Desc: CVSS V3 description
        :type CVSSV3Desc: str
        :param _OfficialSolution: Vulnerability fix suggestion
        :type OfficialSolution: str
        :param _DefenseSolution: Mitigation measure
        :type DefenseSolution: str
        :param _Reference: Reference link
        :type Reference: list of str
        :param _CVSSV3Score: CVSS V3 score
        :type CVSSV3Score: float
        :param _ComponentList: List of components affected by vulnerabilities
        :type ComponentList: list of VulAffectedComponentInfo
        :param _LocalImageCount: Number of affected local images
        :type LocalImageCount: int
        :param _ContainerCount: Number of affected containers
        :type ContainerCount: int
        :param _RegistryImageCount: Number of affected repository images
        :type RegistryImageCount: int
        :param _Category: Vulnerability sub-category
        :type Category: str
        :param _LocalNewestImageCount: Number of affected local images on the latest version
        :type LocalNewestImageCount: int
        :param _RegistryNewestImageCount: Number of affected repository images on the latest version
        :type RegistryNewestImageCount: int
        :param _PocID: POC ID
        :type PocID: str
        :param _DefenceStatus: Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceStatus: str
        :param _DefenceScope: Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceScope: str
        :param _DefenceHostCount: Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceHostCount: int
        :param _DefendedCount: Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefendedCount: int
        :param _ScanStatus: Whether it is scanned. Valid values: `NOT_SCAN` (not scanned); `SCANNED` (scanned).
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanStatus: str
        """
        self._CVEID = None
        self._Name = None
        self._Tags = None
        self._CategoryType = None
        self._Level = None
        self._SubmitTime = None
        self._Description = None
        self._CVSSV3Desc = None
        self._OfficialSolution = None
        self._DefenseSolution = None
        self._Reference = None
        self._CVSSV3Score = None
        self._ComponentList = None
        self._LocalImageCount = None
        self._ContainerCount = None
        self._RegistryImageCount = None
        self._Category = None
        self._LocalNewestImageCount = None
        self._RegistryNewestImageCount = None
        self._PocID = None
        self._DefenceStatus = None
        self._DefenceScope = None
        self._DefenceHostCount = None
        self._DefendedCount = None
        self._ScanStatus = None

    @property
    def CVEID(self):
        r"""CVE No.
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def Name(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Tags(self):
        r"""Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CategoryType(self):
        r"""Vulnerability type
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._CategoryType

    @CategoryType.setter
    def CategoryType(self, CategoryType):
        self._CategoryType = CategoryType

    @property
    def Level(self):
        r"""Vulnerability severity
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def SubmitTime(self):
        r"""Vulnerability disclosure time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._SubmitTime

    @SubmitTime.setter
    def SubmitTime(self, SubmitTime):
        self._SubmitTime = SubmitTime

    @property
    def Description(self):
        r"""Vulnerability description
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CVSSV3Desc(self):
        r"""CVSS V3 description
        :rtype: str
        """
        return self._CVSSV3Desc

    @CVSSV3Desc.setter
    def CVSSV3Desc(self, CVSSV3Desc):
        self._CVSSV3Desc = CVSSV3Desc

    @property
    def OfficialSolution(self):
        r"""Vulnerability fix suggestion
        :rtype: str
        """
        return self._OfficialSolution

    @OfficialSolution.setter
    def OfficialSolution(self, OfficialSolution):
        self._OfficialSolution = OfficialSolution

    @property
    def DefenseSolution(self):
        r"""Mitigation measure
        :rtype: str
        """
        return self._DefenseSolution

    @DefenseSolution.setter
    def DefenseSolution(self, DefenseSolution):
        self._DefenseSolution = DefenseSolution

    @property
    def Reference(self):
        r"""Reference link
        :rtype: list of str
        """
        return self._Reference

    @Reference.setter
    def Reference(self, Reference):
        self._Reference = Reference

    @property
    def CVSSV3Score(self):
        r"""CVSS V3 score
        :rtype: float
        """
        return self._CVSSV3Score

    @CVSSV3Score.setter
    def CVSSV3Score(self, CVSSV3Score):
        self._CVSSV3Score = CVSSV3Score

    @property
    def ComponentList(self):
        r"""List of components affected by vulnerabilities
        :rtype: list of VulAffectedComponentInfo
        """
        return self._ComponentList

    @ComponentList.setter
    def ComponentList(self, ComponentList):
        self._ComponentList = ComponentList

    @property
    def LocalImageCount(self):
        r"""Number of affected local images
        :rtype: int
        """
        return self._LocalImageCount

    @LocalImageCount.setter
    def LocalImageCount(self, LocalImageCount):
        self._LocalImageCount = LocalImageCount

    @property
    def ContainerCount(self):
        r"""Number of affected containers
        :rtype: int
        """
        return self._ContainerCount

    @ContainerCount.setter
    def ContainerCount(self, ContainerCount):
        self._ContainerCount = ContainerCount

    @property
    def RegistryImageCount(self):
        r"""Number of affected repository images
        :rtype: int
        """
        return self._RegistryImageCount

    @RegistryImageCount.setter
    def RegistryImageCount(self, RegistryImageCount):
        self._RegistryImageCount = RegistryImageCount

    @property
    def Category(self):
        r"""Vulnerability sub-category
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def LocalNewestImageCount(self):
        r"""Number of affected local images on the latest version
        :rtype: int
        """
        return self._LocalNewestImageCount

    @LocalNewestImageCount.setter
    def LocalNewestImageCount(self, LocalNewestImageCount):
        self._LocalNewestImageCount = LocalNewestImageCount

    @property
    def RegistryNewestImageCount(self):
        r"""Number of affected repository images on the latest version
        :rtype: int
        """
        return self._RegistryNewestImageCount

    @RegistryNewestImageCount.setter
    def RegistryNewestImageCount(self, RegistryNewestImageCount):
        self._RegistryNewestImageCount = RegistryNewestImageCount

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def DefenceStatus(self):
        r"""Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceStatus

    @DefenceStatus.setter
    def DefenceStatus(self, DefenceStatus):
        self._DefenceStatus = DefenceStatus

    @property
    def DefenceScope(self):
        r"""Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceScope

    @DefenceScope.setter
    def DefenceScope(self, DefenceScope):
        self._DefenceScope = DefenceScope

    @property
    def DefenceHostCount(self):
        r"""Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenceHostCount

    @DefenceHostCount.setter
    def DefenceHostCount(self, DefenceHostCount):
        self._DefenceHostCount = DefenceHostCount

    @property
    def DefendedCount(self):
        r"""Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefendedCount

    @DefendedCount.setter
    def DefendedCount(self, DefendedCount):
        self._DefendedCount = DefendedCount

    @property
    def ScanStatus(self):
        r"""Whether it is scanned. Valid values: `NOT_SCAN` (not scanned); `SCANNED` (scanned).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus


    def _deserialize(self, params):
        self._CVEID = params.get("CVEID")
        self._Name = params.get("Name")
        self._Tags = params.get("Tags")
        self._CategoryType = params.get("CategoryType")
        self._Level = params.get("Level")
        self._SubmitTime = params.get("SubmitTime")
        self._Description = params.get("Description")
        self._CVSSV3Desc = params.get("CVSSV3Desc")
        self._OfficialSolution = params.get("OfficialSolution")
        self._DefenseSolution = params.get("DefenseSolution")
        self._Reference = params.get("Reference")
        self._CVSSV3Score = params.get("CVSSV3Score")
        if params.get("ComponentList") is not None:
            self._ComponentList = []
            for item in params.get("ComponentList"):
                obj = VulAffectedComponentInfo()
                obj._deserialize(item)
                self._ComponentList.append(obj)
        self._LocalImageCount = params.get("LocalImageCount")
        self._ContainerCount = params.get("ContainerCount")
        self._RegistryImageCount = params.get("RegistryImageCount")
        self._Category = params.get("Category")
        self._LocalNewestImageCount = params.get("LocalNewestImageCount")
        self._RegistryNewestImageCount = params.get("RegistryNewestImageCount")
        self._PocID = params.get("PocID")
        self._DefenceStatus = params.get("DefenceStatus")
        self._DefenceScope = params.get("DefenceScope")
        self._DefenceHostCount = params.get("DefenceHostCount")
        self._DefendedCount = params.get("DefendedCount")
        self._ScanStatus = params.get("ScanStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulIgnoreLocalImage(AbstractModel):
    r"""Local images ignored by the vulnerability scan

    """

    def __init__(self):
        r"""
        :param _ID: Record ID
        :type ID: int
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _ImageSize: Image size
        :type ImageSize: int
        :param _PocID: POC ID
        :type PocID: str
        """
        self._ID = None
        self._ImageID = None
        self._ImageName = None
        self._ImageSize = None
        self._PocID = None

    @property
    def ID(self):
        r"""Record ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageSize(self):
        r"""Image size
        :rtype: int
        """
        return self._ImageSize

    @ImageSize.setter
    def ImageSize(self, ImageSize):
        self._ImageSize = ImageSize

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID


    def _deserialize(self, params):
        self._ID = params.get("ID")
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._ImageSize = params.get("ImageSize")
        self._PocID = params.get("PocID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulIgnoreRegistryImage(AbstractModel):
    r"""Repository images ignored by the vulnerability scan

    """

    def __init__(self):
        r"""
        :param _ID: Record ID
        :type ID: int
        :param _RegistryName: Repository name
        :type RegistryName: str
        :param _ImageVersion: Image tag
        :type ImageVersion: str
        :param _RegistryPath: Repository address
        :type RegistryPath: str
        :param _ImageID: Image ID
        :type ImageID: str
        :param _PocID: POC ID
        :type PocID: str
        """
        self._ID = None
        self._RegistryName = None
        self._ImageVersion = None
        self._RegistryPath = None
        self._ImageID = None
        self._PocID = None

    @property
    def ID(self):
        r"""Record ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def RegistryName(self):
        r"""Repository name
        :rtype: str
        """
        return self._RegistryName

    @RegistryName.setter
    def RegistryName(self, RegistryName):
        self._RegistryName = RegistryName

    @property
    def ImageVersion(self):
        r"""Image tag
        :rtype: str
        """
        return self._ImageVersion

    @ImageVersion.setter
    def ImageVersion(self, ImageVersion):
        self._ImageVersion = ImageVersion

    @property
    def RegistryPath(self):
        r"""Repository address
        :rtype: str
        """
        return self._RegistryPath

    @RegistryPath.setter
    def RegistryPath(self, RegistryPath):
        self._RegistryPath = RegistryPath

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID


    def _deserialize(self, params):
        self._ID = params.get("ID")
        self._RegistryName = params.get("RegistryName")
        self._ImageVersion = params.get("ImageVersion")
        self._RegistryPath = params.get("RegistryPath")
        self._ImageID = params.get("ImageID")
        self._PocID = params.get("PocID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulInfo(AbstractModel):
    r"""List of vulnerabilities

    """

    def __init__(self):
        r"""
        :param _Name: Vulnerability name
        :type Name: str
        :param _Tags: Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :type Tags: list of str
        :param _CVSSV3Score: CVSS V3 score
Note: This field may return null, indicating that no valid values can be obtained.
        :type CVSSV3Score: float
        :param _Level: Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :type Level: str
        :param _CVEID: CVE No.
        :type CVEID: str
        :param _Category: Vulnerability sub-category
Note: This field may return null, indicating that no valid values can be obtained.
        :type Category: str
        :param _FoundTime: First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type FoundTime: str
        :param _LatestFoundTime: Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :type LatestFoundTime: str
        :param _ID: Vulnerability ID
        :type ID: int
        :param _LocalImageCount: Number of affected local images
        :type LocalImageCount: int
        :param _ContainerCount: Number of affected containers
Note: This field may return null, indicating that no valid values can be obtained.
        :type ContainerCount: int
        :param _RegistryImageCount: Number of affected repository images
Note: This field may return null, indicating that no valid values can be obtained.
        :type RegistryImageCount: int
        :param _PocID: POC ID
Note: This field may return null, indicating that no valid values can be obtained.
        :type PocID: str
        :param _DefenceStatus: Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceStatus: str
        :param _DefenceScope: Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceScope: str
        :param _DefenceHostCount: Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefenceHostCount: int
        :param _DefendedCount: Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :type DefendedCount: int
        """
        self._Name = None
        self._Tags = None
        self._CVSSV3Score = None
        self._Level = None
        self._CVEID = None
        self._Category = None
        self._FoundTime = None
        self._LatestFoundTime = None
        self._ID = None
        self._LocalImageCount = None
        self._ContainerCount = None
        self._RegistryImageCount = None
        self._PocID = None
        self._DefenceStatus = None
        self._DefenceScope = None
        self._DefenceHostCount = None
        self._DefendedCount = None

    @property
    def Name(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Tags(self):
        r"""Vulnerability tag
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CVSSV3Score(self):
        r"""CVSS V3 score
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._CVSSV3Score

    @CVSSV3Score.setter
    def CVSSV3Score(self, CVSSV3Score):
        self._CVSSV3Score = CVSSV3Score

    @property
    def Level(self):
        r"""Risk level
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def CVEID(self):
        r"""CVE No.
        :rtype: str
        """
        return self._CVEID

    @CVEID.setter
    def CVEID(self, CVEID):
        self._CVEID = CVEID

    @property
    def Category(self):
        r"""Vulnerability sub-category
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def FoundTime(self):
        r"""First discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._FoundTime

    @FoundTime.setter
    def FoundTime(self, FoundTime):
        self._FoundTime = FoundTime

    @property
    def LatestFoundTime(self):
        r"""Last discovery time
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._LatestFoundTime

    @LatestFoundTime.setter
    def LatestFoundTime(self, LatestFoundTime):
        self._LatestFoundTime = LatestFoundTime

    @property
    def ID(self):
        r"""Vulnerability ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def LocalImageCount(self):
        r"""Number of affected local images
        :rtype: int
        """
        return self._LocalImageCount

    @LocalImageCount.setter
    def LocalImageCount(self, LocalImageCount):
        self._LocalImageCount = LocalImageCount

    @property
    def ContainerCount(self):
        r"""Number of affected containers
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._ContainerCount

    @ContainerCount.setter
    def ContainerCount(self, ContainerCount):
        self._ContainerCount = ContainerCount

    @property
    def RegistryImageCount(self):
        r"""Number of affected repository images
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._RegistryImageCount

    @RegistryImageCount.setter
    def RegistryImageCount(self, RegistryImageCount):
        self._RegistryImageCount = RegistryImageCount

    @property
    def PocID(self):
        r"""POC ID
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID

    @property
    def DefenceStatus(self):
        r"""Defense status. Valid values: `NO_DEFENDED`, `DEFENDED`.
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceStatus

    @DefenceStatus.setter
    def DefenceStatus(self, DefenceStatus):
        self._DefenceStatus = DefenceStatus

    @property
    def DefenceScope(self):
        r"""Scope of servers with exploit prevention enabled. Valid values: `MANUAL` (specified servers); `ALL` (all servers).
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: str
        """
        return self._DefenceScope

    @DefenceScope.setter
    def DefenceScope(self, DefenceScope):
        self._DefenceScope = DefenceScope

    @property
    def DefenceHostCount(self):
        r"""Number of servers with exploit prevention enabled
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefenceHostCount

    @DefenceHostCount.setter
    def DefenceHostCount(self, DefenceHostCount):
        self._DefenceHostCount = DefenceHostCount

    @property
    def DefendedCount(self):
        r"""Number of attacks defended against
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: int
        """
        return self._DefendedCount

    @DefendedCount.setter
    def DefendedCount(self, DefendedCount):
        self._DefendedCount = DefendedCount


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Tags = params.get("Tags")
        self._CVSSV3Score = params.get("CVSSV3Score")
        self._Level = params.get("Level")
        self._CVEID = params.get("CVEID")
        self._Category = params.get("Category")
        self._FoundTime = params.get("FoundTime")
        self._LatestFoundTime = params.get("LatestFoundTime")
        self._ID = params.get("ID")
        self._LocalImageCount = params.get("LocalImageCount")
        self._ContainerCount = params.get("ContainerCount")
        self._RegistryImageCount = params.get("RegistryImageCount")
        self._PocID = params.get("PocID")
        self._DefenceStatus = params.get("DefenceStatus")
        self._DefenceScope = params.get("DefenceScope")
        self._DefenceHostCount = params.get("DefenceHostCount")
        self._DefendedCount = params.get("DefendedCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulScanImageInfo(AbstractModel):
    r"""Information of the scanned image

    """

    def __init__(self):
        r"""
        :param _ImageID: Image ID
        :type ImageID: str
        :param _ImageName: Image name
        :type ImageName: str
        :param _Size: Image size
        :type Size: float
        :param _ScanStatus: Task status. Valid values: `SCANNING` (scanning); `FAILED` (failed); `FINISHED` (completed); `CANCELED` (canceled).
        :type ScanStatus: str
        :param _ScanDuration: Scan duration
Note: This field may return null, indicating that no valid values can be obtained.
        :type ScanDuration: float
        :param _HighLevelVulCount: Number of high-risk vulnerabilities
        :type HighLevelVulCount: int
        :param _MediumLevelVulCount: Number of medium-risk vulnerabilities
        :type MediumLevelVulCount: int
        :param _LowLevelVulCount: Number of low-risk vulnerabilities
        :type LowLevelVulCount: int
        :param _CriticalLevelVulCount: Number of critical vulnerabilities
        :type CriticalLevelVulCount: int
        :param _TaskID: ID of the task to scan local images for vulnerabilities
        :type TaskID: int
        :param _ScanStartTime: Start time of the vulnerability scan
        :type ScanStartTime: str
        :param _ScanEndTime: End time of the vulnerability scan
        :type ScanEndTime: str
        :param _ErrorStatus: Cause of the failure. Valid values: `TIMEOUT` (timeout); `TOO_MANY` (too many tasks); `OFFLINE` (offline).
        :type ErrorStatus: str
        """
        self._ImageID = None
        self._ImageName = None
        self._Size = None
        self._ScanStatus = None
        self._ScanDuration = None
        self._HighLevelVulCount = None
        self._MediumLevelVulCount = None
        self._LowLevelVulCount = None
        self._CriticalLevelVulCount = None
        self._TaskID = None
        self._ScanStartTime = None
        self._ScanEndTime = None
        self._ErrorStatus = None

    @property
    def ImageID(self):
        r"""Image ID
        :rtype: str
        """
        return self._ImageID

    @ImageID.setter
    def ImageID(self, ImageID):
        self._ImageID = ImageID

    @property
    def ImageName(self):
        r"""Image name
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def Size(self):
        r"""Image size
        :rtype: float
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size

    @property
    def ScanStatus(self):
        r"""Task status. Valid values: `SCANNING` (scanning); `FAILED` (failed); `FINISHED` (completed); `CANCELED` (canceled).
        :rtype: str
        """
        return self._ScanStatus

    @ScanStatus.setter
    def ScanStatus(self, ScanStatus):
        self._ScanStatus = ScanStatus

    @property
    def ScanDuration(self):
        r"""Scan duration
Note: This field may return null, indicating that no valid values can be obtained.
        :rtype: float
        """
        return self._ScanDuration

    @ScanDuration.setter
    def ScanDuration(self, ScanDuration):
        self._ScanDuration = ScanDuration

    @property
    def HighLevelVulCount(self):
        r"""Number of high-risk vulnerabilities
        :rtype: int
        """
        return self._HighLevelVulCount

    @HighLevelVulCount.setter
    def HighLevelVulCount(self, HighLevelVulCount):
        self._HighLevelVulCount = HighLevelVulCount

    @property
    def MediumLevelVulCount(self):
        r"""Number of medium-risk vulnerabilities
        :rtype: int
        """
        return self._MediumLevelVulCount

    @MediumLevelVulCount.setter
    def MediumLevelVulCount(self, MediumLevelVulCount):
        self._MediumLevelVulCount = MediumLevelVulCount

    @property
    def LowLevelVulCount(self):
        r"""Number of low-risk vulnerabilities
        :rtype: int
        """
        return self._LowLevelVulCount

    @LowLevelVulCount.setter
    def LowLevelVulCount(self, LowLevelVulCount):
        self._LowLevelVulCount = LowLevelVulCount

    @property
    def CriticalLevelVulCount(self):
        r"""Number of critical vulnerabilities
        :rtype: int
        """
        return self._CriticalLevelVulCount

    @CriticalLevelVulCount.setter
    def CriticalLevelVulCount(self, CriticalLevelVulCount):
        self._CriticalLevelVulCount = CriticalLevelVulCount

    @property
    def TaskID(self):
        r"""ID of the task to scan local images for vulnerabilities
        :rtype: int
        """
        return self._TaskID

    @TaskID.setter
    def TaskID(self, TaskID):
        self._TaskID = TaskID

    @property
    def ScanStartTime(self):
        r"""Start time of the vulnerability scan
        :rtype: str
        """
        return self._ScanStartTime

    @ScanStartTime.setter
    def ScanStartTime(self, ScanStartTime):
        self._ScanStartTime = ScanStartTime

    @property
    def ScanEndTime(self):
        r"""End time of the vulnerability scan
        :rtype: str
        """
        return self._ScanEndTime

    @ScanEndTime.setter
    def ScanEndTime(self, ScanEndTime):
        self._ScanEndTime = ScanEndTime

    @property
    def ErrorStatus(self):
        r"""Cause of the failure. Valid values: `TIMEOUT` (timeout); `TOO_MANY` (too many tasks); `OFFLINE` (offline).
        :rtype: str
        """
        return self._ErrorStatus

    @ErrorStatus.setter
    def ErrorStatus(self, ErrorStatus):
        self._ErrorStatus = ErrorStatus


    def _deserialize(self, params):
        self._ImageID = params.get("ImageID")
        self._ImageName = params.get("ImageName")
        self._Size = params.get("Size")
        self._ScanStatus = params.get("ScanStatus")
        self._ScanDuration = params.get("ScanDuration")
        self._HighLevelVulCount = params.get("HighLevelVulCount")
        self._MediumLevelVulCount = params.get("MediumLevelVulCount")
        self._LowLevelVulCount = params.get("LowLevelVulCount")
        self._CriticalLevelVulCount = params.get("CriticalLevelVulCount")
        self._TaskID = params.get("TaskID")
        self._ScanStartTime = params.get("ScanStartTime")
        self._ScanEndTime = params.get("ScanEndTime")
        self._ErrorStatus = params.get("ErrorStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulTendencyInfo(AbstractModel):
    r"""Vulnerability trend information

    """

    def __init__(self):
        r"""
        :param _VulSet: List of vulnerability trends
        :type VulSet: list of RunTimeTendencyInfo
        :param _ImageType: Image type affected by vulnerabilities:
`LOCAL`: Local image.
`REGISTRY`: Repository image.
        :type ImageType: str
        """
        self._VulSet = None
        self._ImageType = None

    @property
    def VulSet(self):
        r"""List of vulnerability trends
        :rtype: list of RunTimeTendencyInfo
        """
        return self._VulSet

    @VulSet.setter
    def VulSet(self, VulSet):
        self._VulSet = VulSet

    @property
    def ImageType(self):
        r"""Image type affected by vulnerabilities:
`LOCAL`: Local image.
`REGISTRY`: Repository image.
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType


    def _deserialize(self, params):
        if params.get("VulSet") is not None:
            self._VulSet = []
            for item in params.get("VulSet"):
                obj = RunTimeTendencyInfo()
                obj._deserialize(item)
                self._VulSet.append(obj)
        self._ImageType = params.get("ImageType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VulTopRankingInfo(AbstractModel):
    r"""Ranking of top vulnerabilities

    """

    def __init__(self):
        r"""
        :param _VulName: Vulnerability name
        :type VulName: str
        :param _Level: Severity. Valid values: `CRITICAL` (critical); `HIGH` (high);`MIDDLE` (medium);`LOW` (low).
        :type Level: str
        :param _AffectedImageCount: Number of affected images
        :type AffectedImageCount: int
        :param _AffectedContainerCount: Number of affected containers
        :type AffectedContainerCount: int
        :param _ID: Vulnerability ID
        :type ID: int
        :param _PocID: POC ID
        :type PocID: str
        """
        self._VulName = None
        self._Level = None
        self._AffectedImageCount = None
        self._AffectedContainerCount = None
        self._ID = None
        self._PocID = None

    @property
    def VulName(self):
        r"""Vulnerability name
        :rtype: str
        """
        return self._VulName

    @VulName.setter
    def VulName(self, VulName):
        self._VulName = VulName

    @property
    def Level(self):
        r"""Severity. Valid values: `CRITICAL` (critical); `HIGH` (high);`MIDDLE` (medium);`LOW` (low).
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def AffectedImageCount(self):
        r"""Number of affected images
        :rtype: int
        """
        return self._AffectedImageCount

    @AffectedImageCount.setter
    def AffectedImageCount(self, AffectedImageCount):
        self._AffectedImageCount = AffectedImageCount

    @property
    def AffectedContainerCount(self):
        r"""Number of affected containers
        :rtype: int
        """
        return self._AffectedContainerCount

    @AffectedContainerCount.setter
    def AffectedContainerCount(self, AffectedContainerCount):
        self._AffectedContainerCount = AffectedContainerCount

    @property
    def ID(self):
        r"""Vulnerability ID
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def PocID(self):
        r"""POC ID
        :rtype: str
        """
        return self._PocID

    @PocID.setter
    def PocID(self, PocID):
        self._PocID = PocID


    def _deserialize(self, params):
        self._VulName = params.get("VulName")
        self._Level = params.get("Level")
        self._AffectedImageCount = params.get("AffectedImageCount")
        self._AffectedContainerCount = params.get("AffectedContainerCount")
        self._ID = params.get("ID")
        self._PocID = params.get("PocID")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WarningRule(AbstractModel):
    r"""Alert configuration policy

    """

    def __init__(self):
        r"""
        :param _Type: Alert event type:
Image repository security - Trojan: `IMG_REG_VIRUS`.
Image repository security - Vulnerability: `IMG_REG_VUL`.
Image repository security - Sensitive data: `IMG_REG_RISK`.
Image security - Trojan: `IMG_VIRUS`.
Image security - Vulnerability: `IMG_VUL`.
Image security - Sensitive data: `IMG_RISK`.
Image security - Image blocking: `IMG_INTERCEPT`.
Runtime security - Container escape: `RUNTIME_ESCAPE`.
Runtime security - Abnormal process: `RUNTIME_FILE`.
Runtime security - Abnormal file access: `RUNTIME_PROCESS`.
Runtime security - High-risk syscall: `RUNTIME_SYSCALL`.
Runtime security - Reverse shell: `RUNTIME_REVERSE_SHELL`.
Runtime security - Trojan: `RUNTIME_VIRUS`.
        :type Type: str
        :param _Switch: Switch status:
`ON`: On.
`OFF`: Off.
        :type Switch: str
        :param _BeginTime: Alert start time in the format of "HH:mm"
        :type BeginTime: str
        :param _EndTime: Alert end time in the format of "HH:mm"
        :type EndTime: str
        :param _ControlBits: Alert level policy control. Each binary bit represents a meaning, and the value is passed as a string.
The control switch can be high, medium, or low, corresponding to the third, second, and first binary bit, respectively. Valid values: `0` (off); `1` (on).
For example, if the high and medium levels indicate to enable the alert and the low level indicates to disable it, the binary value is `110`.
If level control does not take effect for the alert type, pass in `1`.
        :type ControlBits: str
        """
        self._Type = None
        self._Switch = None
        self._BeginTime = None
        self._EndTime = None
        self._ControlBits = None

    @property
    def Type(self):
        r"""Alert event type:
Image repository security - Trojan: `IMG_REG_VIRUS`.
Image repository security - Vulnerability: `IMG_REG_VUL`.
Image repository security - Sensitive data: `IMG_REG_RISK`.
Image security - Trojan: `IMG_VIRUS`.
Image security - Vulnerability: `IMG_VUL`.
Image security - Sensitive data: `IMG_RISK`.
Image security - Image blocking: `IMG_INTERCEPT`.
Runtime security - Container escape: `RUNTIME_ESCAPE`.
Runtime security - Abnormal process: `RUNTIME_FILE`.
Runtime security - Abnormal file access: `RUNTIME_PROCESS`.
Runtime security - High-risk syscall: `RUNTIME_SYSCALL`.
Runtime security - Reverse shell: `RUNTIME_REVERSE_SHELL`.
Runtime security - Trojan: `RUNTIME_VIRUS`.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Switch(self):
        r"""Switch status:
`ON`: On.
`OFF`: Off.
        :rtype: str
        """
        return self._Switch

    @Switch.setter
    def Switch(self, Switch):
        self._Switch = Switch

    @property
    def BeginTime(self):
        r"""Alert start time in the format of "HH:mm"
        :rtype: str
        """
        return self._BeginTime

    @BeginTime.setter
    def BeginTime(self, BeginTime):
        self._BeginTime = BeginTime

    @property
    def EndTime(self):
        r"""Alert end time in the format of "HH:mm"
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ControlBits(self):
        r"""Alert level policy control. Each binary bit represents a meaning, and the value is passed as a string.
The control switch can be high, medium, or low, corresponding to the third, second, and first binary bit, respectively. Valid values: `0` (off); `1` (on).
For example, if the high and medium levels indicate to enable the alert and the low level indicates to disable it, the binary value is `110`.
If level control does not take effect for the alert type, pass in `1`.
        :rtype: str
        """
        return self._ControlBits

    @ControlBits.setter
    def ControlBits(self, ControlBits):
        self._ControlBits = ControlBits


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Switch = params.get("Switch")
        self._BeginTime = params.get("BeginTime")
        self._EndTime = params.get("EndTime")
        self._ControlBits = params.get("ControlBits")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        